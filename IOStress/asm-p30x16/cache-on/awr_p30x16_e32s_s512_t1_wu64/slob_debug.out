
































































































































































































































































































































































































































































































































PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


SQL*Plus: Release 19.0.0.0.0 - Production on Fri Feb 14 08:45:13 2020
Version 19.3.0.0.0

Copyright (c) 1982, 2019, Oracle.  All rights reserved.


SQL*Plus: Release 19.0.0.0.0 - Production on Fri Feb 14 08:45:13 2020
Version 19.3.0.0.0

Copyright (c) 1982, 2019, Oracle.  All rights reserved.

Last Successful login time: Fri Feb 14 2020 08:45:04 +08:00

Connected to:
Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL>   2    3    4    5    6  Last Successful login time: Fri Feb 14 2020 08:45:04 +08:00

Connected to:
Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL>   2    3    4    5    6  
   DB Id    DB Name	 Inst Num Instance
----------- ------------ -------- ------------
 3889879926 P60SDB		1 p60sdb1

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> 
   DB Id    DB Name	 Inst Num Instance
----------- ------------ -------- ------------
 3889879926 P60SDB		1 p60sdb1

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> 
Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt. Default value is 'html'.

   'html'	   HTML format (default)
   'text'	   Text format
   'active-html'   Includes Performance Hub active report




Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt. Default value is 'html'.

   'html'	   HTML format (default)
   'text'	   Text format
   'active-html'   Includes Performance Hub active report


Type Specified: html



Type Specified: text


Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
  DB Id      Inst Num	DB Name      Instance	  Host
  3889879926	 2	P60SDB	     p60sdb2	  mcracpoc2.ex
* 3889879926	 1	P60SDB	     p60sdb1	  mcracpoc1.ex
------------ ---------- ---------    ----------   ------
  3889879926	 2	P60SDB	     p60sdb2	  mcracpoc2.ex
* 3889879926	 1	P60SDB	     p60sdb1	  mcracpoc1.ex


Using 3889879926 for database Id
Using	       1 for instance number
Using 3889879926 for database Id
Using	       1 for instance number


Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.



Listing the last day's Completed Snapshots
Instance     DB Name	  Snap Id	Snap Started	Snap Level
------------ ------------ ---------- ------------------ ----------

p60sdb1      P60SDB		120  14 Feb 2020 00:00	  1
				121  14 Feb 2020 01:00	  1
				122  14 Feb 2020 02:00	  1
				123  14 Feb 2020 03:00	  1
				124  14 Feb 2020 04:00	  1
				125  14 Feb 2020 05:00	  1
				126  14 Feb 2020 06:00	  1
				127  14 Feb 2020 07:00	  1
				128  14 Feb 2020 07:42	  1
				129  14 Feb 2020 07:44	  1
				130  14 Feb 2020 07:48	  1
				131  14 Feb 2020 07:50	  1
				132  14 Feb 2020 07:56	  1
				133  14 Feb 2020 07:58	  1
				134  14 Feb 2020 08:01	  1
				135  14 Feb 2020 08:34	  1
				136  14 Feb 2020 08:45	  1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 135

End   Snapshot Id specified: 136



Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_1_135_136.txt.  To use this name,
press <return> to continue, otherwise enter an alternative.


Using the report name awr.txt


Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.



Listing the last day's Completed Snapshots
Instance     DB Name	  Snap Id	Snap Started	Snap Level
------------ ------------ ---------- ------------------ ----------

p60sdb1      P60SDB		120  14 Feb 2020 00:00	  1
				121  14 Feb 2020 01:00	  1
				122  14 Feb 2020 02:00	  1
				123  14 Feb 2020 03:00	  1
				124  14 Feb 2020 04:00	  1
				125  14 Feb 2020 05:00	  1
				126  14 Feb 2020 06:00	  1
				127  14 Feb 2020 07:00	  1
				128  14 Feb 2020 07:42	  1
				129  14 Feb 2020 07:44	  1
				130  14 Feb 2020 07:48	  1
				131  14 Feb 2020 07:50	  1
				132  14 Feb 2020 07:56	  1
				133  14 Feb 2020 07:58	  1
				134  14 Feb 2020 08:01	  1
				135  14 Feb 2020 08:34	  1
				136  14 Feb 2020 08:45	  1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 135

End   Snapshot Id specified: 136



Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_1_135_136.html.	To use this name,
press <return> to continue, otherwise enter an alternative.


Using the report name awr.html

<html lang="en"><head><title>AWR Report for DB: P60SDB, Inst: p60sdb1, Snaps: 135-136</title>
<style type="text/css">
body.awr {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black; background:White;}
pre.awr  {font:8pt Courier;color:black; background:White;}
pre_sqltext.awr  {white-space: pre-wrap;}
h1.awr	 {font:bold 20pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;border-bottom:1px solid #cccc99;margin-top:0pt; margin-bottom:0pt;padding:0px 0px 0px 0px;}
h2.awr	 {font:bold 18pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
h3.awr {font:bold 16pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
li.awr {font: 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;}
th.awrnobg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;padding-left:4px; padding-right:4px;padding-bottom:2px}
th.awrbg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#0066CC;padding-left:4px; padding-right:4px;padding-bottom:2px}
td.awrnc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;}
td.awrc    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;}
td.awrncbb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
td.awrncrb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-right: thin solid black;}
td.awrcrb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-right: thin solid black;}
td.awrclb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;}
td.awrcbb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
a.awr {font:bold 8pt Arial,Helvetica,sans-serif;color:#663300; vertical-align:top;margin-top:0pt; margin-bottom:0pt;}
td.awrnct {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:White;vertical-align:top;}
td.awrct   {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrncbbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;border-top: thin solid black;}
td.awrncrbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrcrbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrclbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrcbbt   {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;border-right: thin solid black;}
table.tdiff {  border_collapse: collapse; }
table.tscl {width: 600;}
table.tscl tbody, table.tscl thead { display: block; }
table.tscl thead tr th {height: 12px;line-height: 12px;}
table.tscl tbody { height: 100px;overflow-y: auto; overflow-x: hidden;}
table.tscl tbody td, thead th {width: 200;}
.hidden   {position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden;}
.pad   {margin-left:17px;}
.doublepad {margin-left:34px;}
</style></head><body class="awr">
<h1 class="awr">
WORKLOAD REPOSITORY report for

</h1>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays database instance information">
<tr><th class="awrbg" scope="col">DB Name</th><th class="awrbg" scope="col">DB Id</th><th class="awrbg" scope="col">Unique Name</th><th class="awrbg" scope="col">Role</th><th class="awrbg" scope="col">Edition</th><th class="awrbg" scope="col">Release</th><th class="awrbg" scope="col">RAC</th><th class="awrbg" scope="col">CDB</th></tr>
<tr><td scope="row" class='awrnc'>P60SDB</td><td align="right" class='awrnc'>3889879926</td><td class='awrnc'>p60sdb</td><td class='awrnc'>PRIMARY</td><td class='awrnc'>EE</td><td class='awrnc'>19.0.0.0.0</td><td class='awrnc'>YES</td><td class='awrnc'>NO</td></tr>
</table>
<p />
<p />
<table border="0" class="tdiff" summary="This table displays database instance information">
<tr><th class="awrbg" scope="col">Instance</th><th class="awrbg" scope="col">Inst Num</th><th class="awrbg" scope="col">Startup Time</th></tr>
<tr><td scope="row" class='awrnc'>p60sdb1</td><td align="right" class='awrnc'>1</td><td class='awrnc'>13-Feb-20 14:57</td></tr>
</table>
<p />
<p />
<table border="0" width="600" class="tdiff" summary="This table displays host information">
<tr><th class="awrbg" scope="col">Host Name</th><th class="awrbg" scope="col">Platform</th><th class="awrbg" scope="col">CPUs</th><th class="awrbg" scope="col">Cores</th><th class="awrbg" scope="col">Sockets</th><th class="awrbg" scope="col">Memory (GB)</th></tr>
<tr><td scope="row" class='awrnc'>mcracpoc1.example.com</td><td class='awrnc'>Linux x86 64-bit</td><td align="right" class='awrnc'>  32</td><td align="right" class='awrnc'>  16</td><td align="right" class='awrnc'>	1</td><td align="right" class='awrnc'>	251.90</td></tr>
</table>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays snapshot information">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Snap Id</th><th class="awrbg" scope="col">Snap Time</th><th class="awrbg" scope="col">Sessions</th><th class="awrbg" scope="col">Cursors/Session</th><th class="awrbg" scope="col">Instances</th></tr>
<tr><td scope="row" class='awrnc'>Begin Snap:</td><td align="right" class='awrnc'>135</td><td align="center" class='awrnc'>14-Feb-20 08:34:03</td><td align="right" class='awrnc'>377</td><td align="right" class='awrnc'>	3.5</td><td align="right" class='awrnc'>2</td></tr>
<tr><td scope="row" class='awrc'>End Snap:</td><td align="right" class='awrc'>136</td><td align="center" class='awrc'>14-Feb-20 08:45:04</td><td align="right" class='awrc'>126</td><td align="right" class='awrc'>	 1.3</td><td align="right" class='awrc'>2</td></tr>
<tr><td scope="row" class='awrnc'>Elapsed:</td><td class='awrnc'>&#160;</td><td align="center" class='awrnc'>		   11.01 (mins)</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DB Time:</td><td class='awrc'>&#160;</td><td align="center" class='awrc'>	     2,345.01 (mins)</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
</table>
<p />
<h3 class="awr"><a class="awr" name="99999"></a>Report Summary</h3>
<p />Top ADDM Findings by Average Active Sessions<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top ADDM findings by average active sessions"><tr><th class="awrbg" scope="col">Finding Name</th><th class="awrbg" scope="col">Avg active sessions of the task</th><th class="awrbg" scope="col">Percent active sessions of finding</th><th class="awrbg" scope="col">Task Name</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th></tr>
<tr><td class='awrc'>Interconnect Latency</td><td align="right" class='awrc'>212.86</td><td align="right" class='awrc'>1.0E+02</td><td scope="row" class='awrc'>ADDM:3889879926_1_136</td><td class='awrc'>14-Feb-20 08:34</td><td class='awrc'>14-Feb-20 08:45</td></tr>
<tr><td class='awrnc'>Top SQL Statements</td><td align="right" class='awrnc'>212.86</td><td align="right" class='awrnc'>99.45</td><td scope="row" class='awrnc'>ADDM:3889879926_1_136</td><td class='awrnc'>14-Feb-20 08:34</td><td class='awrnc'>14-Feb-20 08:45</td></tr>
<tr><td class='awrc'>Global Cache Messaging</td><td align="right" class='awrc'>212.86</td><td align="right" class='awrc'>89.60</td><td scope="row" class='awrc'>ADDM:3889879926_1_136</td><td class='awrc'>14-Feb-20 08:34</td><td class='awrc'>14-Feb-20 08:45</td></tr>
<tr><td class='awrnc'>Buffer Busy - Hot Objects</td><td align="right" class='awrnc'>212.86</td><td align="right" class='awrnc'>63.57</td><td scope="row" class='awrnc'>ADDM:3889879926_1_136</td><td class='awrnc'>14-Feb-20 08:34</td><td class='awrnc'>14-Feb-20 08:45</td></tr>
<tr><td class='awrc'>&quot;User I/O&quot; wait Class</td><td align="right" class='awrc'>212.86</td><td align="right" class='awrc'>9.54</td><td scope="row" class='awrc'>ADDM:3889879926_1_136</td><td class='awrc'>14-Feb-20 08:34</td><td class='awrc'>14-Feb-20 08:45</td></tr>
</table><p />
<p />Load Profile<p />
<table border="0" width="600" class="tdiff" summary="This table displays load profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Per Second</th><th class="awrbg" scope="col">Per Transaction</th><th class="awrbg" scope="col">Per Exec</th><th class="awrbg" scope="col">Per Call</th></tr>
<tr><td scope="row" class='awrc'>DB Time(s):</td><td align="right" class='awrc'>	     212.9</td><td align="right" class='awrc'>		     3.5</td><td align="right" class='awrc'>	  0.50</td><td align="right" class='awrc'>     65.81</td></tr>
<tr><td scope="row" class='awrnc'>DB CPU(s):</td><td align="right" class='awrnc'>		4.0</td><td align="right" class='awrnc'>	       0.1</td><td align="right" class='awrnc'>      0.01</td><td align="right" class='awrnc'>	    1.24</td></tr>
<tr><td scope="row" class='awrc'>Background CPU(s):</td><td align="right" class='awrc'> 	      2.0</td><td align="right" class='awrc'>		    0.0</td><td align="right" class='awrc'>	 0.00</td><td align="right" class='awrc'>      0.00</td></tr>
<tr><td scope="row" class='awrnc'>Redo size (bytes):</td><td align="right" class='awrnc'>	3,133,508.8</td><td align="right" class='awrnc'>	  51,115.2</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Logical read (blocks):</td><td align="right" class='awrc'>	     26,828.0</td><td align="right" class='awrc'>	      437.6</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Block changes:</td><td align="right" class='awrnc'>		7,999.6</td><td align="right" class='awrnc'>		 130.5</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Physical read (blocks):</td><td align="right" class='awrc'>	      22,598.6</td><td align="right" class='awrc'>	       368.6</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Physical write (blocks):</td><td align="right" class='awrnc'> 	  3,864.0</td><td align="right" class='awrnc'>		    63.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Read IO requests:</td><td align="right" class='awrc'>		22,598.4</td><td align="right" class='awrc'>		 368.6</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Write IO requests:</td><td align="right" class='awrnc'>	    3,607.6</td><td align="right" class='awrnc'>	      58.9</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Read IO (MB):</td><td align="right" class='awrc'>	       176.6</td><td align="right" class='awrc'>	       2.9</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Write IO (MB):</td><td align="right" class='awrnc'>		   30.2</td><td align="right" class='awrnc'>		   0.5</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM scan rows:</td><td align="right" class='awrc'>		 0.0</td><td align="right" class='awrc'>	       0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Session Logical Read IM:</td><td align="right" class='awrnc'> 	      0.0</td><td align="right" class='awrnc'>		     0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Global Cache blocks received:</td><td align="right" class='awrc'>		76.3</td><td align="right" class='awrc'>	       1.2</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Global Cache blocks served:</td><td align="right" class='awrnc'>		77.4</td><td align="right" class='awrnc'>		1.3</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>User calls:</td><td align="right" class='awrc'>	       3.2</td><td align="right" class='awrc'>		     0.1</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Parses (SQL):</td><td align="right" class='awrnc'>		  17.3</td><td align="right" class='awrnc'>		  0.3</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Hard parses (SQL):</td><td align="right" class='awrc'> 	      0.5</td><td align="right" class='awrc'>		    0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL Work Area (MB):</td><td align="right" class='awrnc'>		 0.6</td><td align="right" class='awrnc'>		0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Logons:</td><td align="right" class='awrc'>		   0.2</td><td align="right" class='awrc'>		 0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>User logons:</td><td align="right" class='awrnc'>		  0.0</td><td align="right" class='awrnc'>		 0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Executes (SQL):</td><td align="right" class='awrc'>		 422.5</td><td align="right" class='awrc'>		 6.9</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Rollbacks:</td><td align="right" class='awrnc'>		0.0</td><td align="right" class='awrnc'>	       0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Transactions:</td><td align="right" class='awrc'>		61.3</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
</table>
<p />
Instance Efficiency Percentages (Target 100%)
<p />
<table border="0" width="600" class="tdiff" summary="This table displays instance efficiency percentages">
<tr><td scope="row" class='awrc'>Buffer Nowait %:</td><td align="right" class='awrc'>		100.00</td><td class='awrc'>Redo NoWait %:</td><td align="right" class='awrc'>		 100.00</td></tr>
<tr><td scope="row" class='awrnc'>Buffer  Hit	%:</td><td align="right" class='awrnc'> 	   15.76</td><td class='awrnc'>In-memory Sort %:</td><td align="right" class='awrnc'>		100.00</td></tr>
<tr><td scope="row" class='awrc'>Library Hit   %:</td><td align="right" class='awrc'>		 99.53</td><td class='awrc'>Soft Parse %:</td><td align="right" class='awrc'>		 97.06</td></tr>
<tr><td scope="row" class='awrnc'>Execute to Parse %:</td><td align="right" class='awrnc'>	      95.92</td><td class='awrnc'>Latch Hit %:</td><td align="right" class='awrnc'>	       99.93</td></tr>
<tr><td scope="row" class='awrc'>Parse CPU to Parse Elapsd %:</td><td align="right" class='awrc'>	     25.11</td><td class='awrc'>% Non-Parse CPU:</td><td align="right" class='awrc'>		99.97</td></tr>
<tr><td scope="row" class='awrnc'>Flash Cache Hit %:</td><td align="right" class='awrnc'>	      0.00</td></tr>
</table>

<p />Top 10 Foreground Events by Total Wait Time<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top 10 wait events by total wait time"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (sec)</th><th class="awrbg" scope="col">Avg Wait</th><th class="awrbg" scope="col">% DB time</th><th class="awrbg" scope="col">Wait Class</th></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>1,226,319</td><td align="right" class='awrc'>73.7K</td><td align="right" class='awrc'>60.07ms</td><td align="right" class='awrc'>52.4</td><td class='awrc'>Cluster</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>222,450</td><td align="right" class='awrnc'>34.9K</td><td align="right" class='awrnc'>156.96ms</td><td align="right" class='awrnc'>24.8</td><td class='awrnc'>Cluster</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>237,614</td><td align="right" class='awrc'>15.4K</td><td align="right" class='awrc'>64.66ms</td><td align="right" class='awrc'>10.9</td><td class='awrc'>Cluster</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>2,750,245</td><td align="right" class='awrnc'>9831.8</td><td align="right" class='awrnc'>3.57ms</td><td align="right" class='awrnc'>7.0</td><td class='awrnc'>User I/O</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>224,166</td><td align="right" class='awrc'>3593.5</td><td align="right" class='awrc'>16.03ms</td><td align="right" class='awrc'>2.6</td><td class='awrc'>User I/O</td></tr>
<tr><td scope="row" class='awrnc'>DB CPU</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2660</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1.9</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>4,195</td><td align="right" class='awrc'>1095.3</td><td align="right" class='awrc'>261.09ms</td><td align="right" class='awrc'>.8</td><td class='awrc'>Other</td></tr>
<tr><td scope="row" class='awrnc'>gc current block lost</td><td align="right" class='awrnc'>798</td><td align="right" class='awrnc'>507.2</td><td align="right" class='awrnc'>635.56ms</td><td align="right" class='awrnc'>.4</td><td class='awrnc'>Cluster</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>1,380</td><td align="right" class='awrc'>485.4</td><td align="right" class='awrc'>351.72ms</td><td align="right" class='awrc'>.3</td><td class='awrc'>Cluster</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>18,051</td><td align="right" class='awrnc'>408</td><td align="right" class='awrnc'>22.60ms</td><td align="right" class='awrnc'>.3</td><td class='awrnc'>Cluster</td></tr>
</table><p />
<p />Wait Classes by Total Wait Time<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays wait class statistics ordered by total wait time"><tr><th class="awrbg" scope="col">Wait Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (sec)</th><th class="awrbg" scope="col">Avg Wait Time</th><th class="awrbg" scope="col">% DB time</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>Cluster</td><td align="right" class='awrc'>1,729,770</td><td align="right" class='awrc'>126,171</td><td align="right" class='awrc'>72.94ms</td><td align="right" class='awrc'>89.7</td><td align="right" class='awrc'>190.9</td></tr>
<tr><td scope="row" class='awrnc'>User I/O</td><td align="right" class='awrnc'>3,216,114</td><td align="right" class='awrnc'>13,438</td><td align="right" class='awrnc'>4.18ms</td><td align="right" class='awrnc'>9.6</td><td align="right" class='awrnc'>20.3</td></tr>
<tr><td scope="row" class='awrc'>DB CPU</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2,660</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1.9</td><td align="right" class='awrc'>4.0</td></tr>
<tr><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>438,059</td><td align="right" class='awrnc'>1,468</td><td align="right" class='awrnc'>3.35ms</td><td align="right" class='awrnc'>1.0</td><td align="right" class='awrnc'>2.2</td></tr>
<tr><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>134,673</td><td align="right" class='awrc'>1,350</td><td align="right" class='awrc'>10.02ms</td><td align="right" class='awrc'>1.0</td><td align="right" class='awrc'>2.0</td></tr>
<tr><td scope="row" class='awrnc'>Application</td><td align="right" class='awrnc'>426</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>45.78ms</td><td align="right" class='awrnc'>.0</td><td align="right" class='awrnc'>0.0</td></tr>
<tr><td scope="row" class='awrc'>Configuration</td><td align="right" class='awrc'>122</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>144.26ms</td><td align="right" class='awrc'>.0</td><td align="right" class='awrc'>0.0</td></tr>
<tr><td scope="row" class='awrnc'>Concurrency</td><td align="right" class='awrnc'>10,720</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>.99ms</td><td align="right" class='awrnc'>.0</td><td align="right" class='awrnc'>0.0</td></tr>
<tr><td scope="row" class='awrc'>Commit</td><td align="right" class='awrc'>141</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>23.03ms</td><td align="right" class='awrc'>.0</td><td align="right" class='awrc'>0.0</td></tr>
<tr><td scope="row" class='awrnc'>Network</td><td align="right" class='awrnc'>1,389</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>33.10us</td><td align="right" class='awrnc'>.0</td><td align="right" class='awrnc'>0.0</td></tr>
</table><p />

Host CPU
<p />
<table border="0" width="600" class="tdiff" summary="This table displays system load statistics">
<tr><th class="awrbg" scope="col">CPUs</th><th class="awrbg" scope="col">Cores</th><th class="awrbg" scope="col">Sockets</th><th class="awrbg" scope="col">Load Average Begin</th><th class="awrbg" scope="col">Load Average End</th><th class="awrbg" scope="col">%User</th><th class="awrbg" scope="col">%System</th><th class="awrbg" scope="col">%WIO</th><th class="awrbg" scope="col">%Idle</th></tr>
<tr><td align="right" class='awrc'>   32</td><td align="right" class='awrc'>   16</td><td align="right" class='awrc'>	 1</td><td align="right" class='awrc'>	32.16</td><td align="right" class='awrc'>   9.52</td><td align="right" class='awrc'>   7.1</td><td align="right" class='awrc'>	11.6</td><td align="right" class='awrc'>  17.4</td><td align="right" class='awrc'>  75.0</td></tr>
</table>
<p />
Instance CPU
<p />
<table border="0" width="600" class="tdiff" summary="This table displays CPU usage and wait statistics">
<tr><th class="awrbg" scope="col">%Total CPU</th><th class="awrbg" scope="col">%Busy CPU</th><th class="awrbg" scope="col">%DB time waiting for CPU (Resource Manager)</th></tr>
<tr><td align="right" class='awrc'>	 20.4</td><td align="right" class='awrc'>      81.7</td><td align="right" class='awrc'>       0.0</td></tr>
</table>
<p />IO Profile<p />
<table border="0" width="600" class="tdiff" summary="This table displays IO profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Read+Write Per Second</th><th class="awrbg" scope="col">Read per Second</th><th class="awrbg" scope="col">Write Per Second</th></tr>
<tr><td scope="row" class='awrc'>Total Requests:</td><td align="right" class='awrc'>	      26,279.0</td><td align="right" class='awrc'>	    22,606.8</td><td align="right" class='awrc'>	   3,672.1</td></tr>
<tr><td scope="row" class='awrnc'>Database Requests:</td><td align="right" class='awrnc'>	   26,205.9</td><td align="right" class='awrnc'>	  22,598.4</td><td align="right" class='awrnc'> 	  3,607.6</td></tr>
<tr><td scope="row" class='awrc'>Optimized Requests:</td><td align="right" class='awrc'>	       0.0</td><td align="right" class='awrc'>		     0.0</td><td align="right" class='awrc'>		   0.0</td></tr>
<tr><td scope="row" class='awrnc'>Redo Requests:</td><td align="right" class='awrnc'>		   65.5</td><td align="right" class='awrnc'>		   2.5</td><td align="right" class='awrnc'>		 63.0</td></tr>
<tr><td scope="row" class='awrc'>Total (MB):</td><td align="right" class='awrc'>	     212.2</td><td align="right" class='awrc'>		   178.9</td><td align="right" class='awrc'>		  33.3</td></tr>
<tr><td scope="row" class='awrnc'>Database (MB):</td><td align="right" class='awrnc'>		  206.7</td><td align="right" class='awrnc'>		 176.6</td><td align="right" class='awrnc'>		 30.2</td></tr>
<tr><td scope="row" class='awrc'>Optimized Total (MB):</td><td align="right" class='awrc'>		 0.0</td><td align="right" class='awrc'>	       0.0</td><td align="right" class='awrc'>		     0.0</td></tr>
<tr><td scope="row" class='awrnc'>Redo (MB):</td><td align="right" class='awrnc'>		5.3</td><td align="right" class='awrnc'>	       2.3</td><td align="right" class='awrnc'> 	      3.0</td></tr>
<tr><td scope="row" class='awrc'>Database (blocks):</td><td align="right" class='awrc'> 	 26,462.6</td><td align="right" class='awrc'>	       22,598.6</td><td align="right" class='awrc'>	      3,864.0</td></tr>
<tr><td scope="row" class='awrnc'>Via Buffer Cache (blocks):</td><td align="right" class='awrnc'>	   26,460.9</td><td align="right" class='awrnc'>	  22,598.6</td><td align="right" class='awrnc'> 	  3,862.3</td></tr>
<tr><td scope="row" class='awrc'>Direct (blocks):</td><td align="right" class='awrc'>		    1.7</td><td align="right" class='awrc'>		  0.0</td><td align="right" class='awrc'>		1.7</td></tr>
</table>
<p />
Memory Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays memory statistics">
<tr><th class="awrbg" scope="col"> </th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th></tr>
<tr><td scope="row" class='awrc'>Host Mem (MB):</td><td align="right" class='awrc'>   257,947.8</td><td align="right" class='awrc'>   257,947.8</td></tr>
<tr><td scope="row" class='awrnc'>SGA use (MB):</td><td align="right" class='awrnc'>	40,960.0</td><td align="right" class='awrnc'>	 40,960.0</td></tr>
<tr><td scope="row" class='awrc'>PGA use (MB):</td><td align="right" class='awrc'>     4,096.4</td><td align="right" class='awrc'>     2,197.1</td></tr>
<tr><td scope="row" class='awrc'>% Host Mem used for SGA+PGA:</td><td align="right" class='awrc'>   17.47</td><td align="right" class='awrc'>	16.73</td></tr>
</table>
<p />
Cache Sizes
<p />
<table border="0" width="600" class="tdiff" summary="This table displays cache sizes and other statistics for
		    different types of cache">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th><th class="awrnobg" scope="col"></th><th class="awrnobg" scope="col"></th></tr>
<tr><td scope="row" class='awrnc'>Buffer Cache:</td><td align="right" class='awrnc'>	35,072M</td><td align="right" class='awrnc'>	35,072M</td><td class='awrnc'>Std Block Size:</td><td align="right" class='awrnc'>	   8K</td></tr>
<tr><td scope="row" class='awrc'>Shared Pool Size:</td><td align="right" class='awrc'>	   4,423M</td><td align="right" class='awrc'>	  4,556M</td><td class='awrc'>Log Buffer:</td><td align="right" class='awrc'>	101,568K</td></tr>
<tr><td scope="row" class='awrnc'>In-Memory Area:</td><td align="right" class='awrnc'>	       0M</td><td align="right" class='awrnc'>	       0M</td></tr>
</table>
<p />
Shared Pool Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays shared pool statistics">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th></tr>
<tr><td scope="row" class='awrc'>Memory Usage %:</td><td align="right" class='awrc'>		77.98</td><td align="right" class='awrc'>	     71.91</td></tr>
<tr><td scope="row" class='awrnc'>% SQL with executions&gt;1:</td><td align="right" class='awrnc'>	      89.00</td><td align="right" class='awrnc'>	    82.65</td></tr>
<tr><td scope="row" class='awrc'>% Memory for SQL w/exec&gt;1:</td><td align="right" class='awrc'>	      91.54</td><td align="right" class='awrc'> 	   90.51</td></tr>
</table>
<p />
<a class="awr" name="top"></a>
<h2 class="awr">
Main Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#99999">Report Summary</a></li>
<li class="awr"><a class="awr" href="#21">Wait Events Statistics</a></li>
<li class="awr"><a class="awr" href="#22">SQL Statistics</a></li>
<li class="awr"><a class="awr" href="#23">Instance Activity Statistics</a></li>
<li class="awr"><a class="awr" href="#24">IO Stats</a></li>
<li class="awr"><a class="awr" href="#25">Buffer Pool Statistics</a></li>
<li class="awr"><a class="awr" href="#26">Advisory Statistics</a></li>
<li class="awr"><a class="awr" href="#27">Wait Statistics</a></li>
<li class="awr"><a class="awr" href="#28">Undo Statistics</a></li>
<li class="awr"><a class="awr" href="#29">Latch Statistics</a></li>
<li class="awr"><a class="awr" href="#30">Segment Statistics</a></li>
<li class="awr"><a class="awr" href="#31">Dictionary Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#32">Library Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#33">Memory Statistics</a></li>
<li class="awr"><a class="awr" href="#39">Replication Statistics (GoldenGate, XStream)</a></li>
<li class="awr"><a class="awr" href="#34">Advanced Queuing</a></li>
<li class="awr"><a class="awr" href="#6700">Resource Limit Statistics</a></li>
<li class="awr"><a class="awr" href="#37">Shared Server Statistics</a></li>
<li class="awr"><a class="awr" href="#36">Initialization Parameters</a></li>
<li class="awr"><a class="awr" href="#42">Active Session History (ASH) Report</a></li>
<li class="awr"><a class="awr" href="#99995">ADDM Reports</a></li>
</ul>
<h2 class="awr">
RAC Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#9997">RAC Report Summary</a></li>
<li class="awr"><a class="awr" href="#5100">Global Messaging Statistics</a></li>
<li class="awr"><a class="awr" href="#5200">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#5300">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#7">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#8">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#8790">Dynamic Remastering Statistics</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<p />
<a class="awr" name="21"></a>
<h2 class="awr">
Wait Events Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1500">Time Model Statistics</a></li>
<li class="awr"><a class="awr" href="#1600">Operating System Statistics</a></li>
<li class="awr"><a class="awr" href="#1610">Operating System Statistics - Detail</a></li>
<li class="awr"><a class="awr" href="#210">Foreground Wait Class</a></li>
<li class="awr"><a class="awr" href="#100">Foreground Wait Events</a></li>
<li class="awr"><a class="awr" href="#300">Background Wait Events</a></li>
<li class="awr"><a class="awr" href="#7400">Wait Event Histogram</a></li>
<li class="awr"><a class="awr" href="#7405">Wait Event Histogram (up to 64 us)</a></li>
<li class="awr"><a class="awr" href="#7410">Wait Event Histogram (up to 32 ms)</a></li>
<li class="awr"><a class="awr" href="#7420">Wait Event Histogram (up to 2 sec)</a></li>
<li class="awr"><a class="awr" href="#7430">Wait Event Histogram (up to 2 min)</a></li>
<li class="awr"><a class="awr" href="#7440">Wait Event Histogram (up to 1 hr)</a></li>
<li class="awr"><a class="awr" href="#5800">Service Statistics</a></li>
<li class="awr"><a class="awr" href="#5820">Service Wait Class Stats</a></li>
<li class="awr"><a class="awr" href="#5840">Top 10 Channel Waits</a></li>
<li class="awr"><a class="awr" href="#2310">Top Process Types by Wait Class</a></li>
<li class="awr"><a class="awr" href="#2320">Top Process Types by CPU Used</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1500"></a>
<h3 class="awr">Time Model Statistics</h3>
<ul>
<li class="awr">DB Time represents total time in user calls</li>
<li class="awr">DB CPU represents CPU time of foreground processes</li>
<li class="awr">Total CPU Time represents foreground and background processes</li>
<li class="awr">Statistics including the word "background" measure background process
   time, therefore do not contribute to the DB time statistic</li>
<li class="awr">Ordered by % of DB time in descending order, followed by Statistic Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays different time model statistics. For each statistic, time and % of DB time are displayed"><tr><th class="awrbg" scope="col">Statistic Name</th><th class="awrbg" scope="col">Time (s)</th><th class="awrbg" scope="col">% of  DB Time</th><th class="awrbg" scope="col">% of Total CPU Time</th></tr>
<tr><td scope="row" class='awrc'>sql execute elapsed time</td><td align="right" class='awrc'>140,688.02</td><td align="right" class='awrc'>99.99</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DB CPU</td><td align="right" class='awrnc'>2,660.00</td><td align="right" class='awrnc'>1.89</td><td align="right" class='awrnc'>66.54</td></tr>
<tr><td scope="row" class='awrc'>PL/SQL execution elapsed time</td><td align="right" class='awrc'>27.76</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>parse time elapsed</td><td align="right" class='awrnc'>7.28</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hard parse elapsed time</td><td align="right" class='awrc'>6.84</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>hard parse (sharing criteria) elapsed time</td><td align="right" class='awrnc'>2.03</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sequence load elapsed time</td><td align="right" class='awrc'>0.32</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PL/SQL compilation elapsed time</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hard parse (bind mismatch) elapsed time</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>connection management call elapsed time</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>repeated bind elapsed time</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DB time</td><td align="right" class='awrnc'>140,700.39</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>background elapsed time</td><td align="right" class='awrc'>3,502.43</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>background cpu time</td><td align="right" class='awrnc'>1,337.80</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>33.46</td></tr>
<tr><td scope="row" class='awrc'>total CPU time</td><td align="right" class='awrc'>3,997.81</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1600"></a>
<h3 class="awr">Operating System Statistics</h3>
<ul>
<li class="awr"> *TIME statistic values are diffed.	 All others display actual values.  End Value is displayed if different </li>
<li class="awr"> ordered by statistic type (CPU Use, Virtual Memory, Hardware Config), Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays operating systems statistics. For each statistic, actual value is displayed. If the end value is different, it is also displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Value</th><th class="awrbg" scope="col">End Value</th></tr>
<tr><td scope="row" class='awrc'>FREE_MEMORY_BYTES</td><td align="right" class='awrc'>119,786,893,312</td><td align="right" class='awrc'>124,677,910,528</td></tr>
<tr><td scope="row" class='awrnc'>INACTIVE_MEMORY_BYTES</td><td align="right" class='awrnc'>1,993,224,192</td><td align="right" class='awrnc'>1,975,668,736</td></tr>
<tr><td scope="row" class='awrc'>BUSY_TIME</td><td align="right" class='awrc'>489,119</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IDLE_TIME</td><td align="right" class='awrnc'>1,466,259</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IOWAIT_TIME</td><td align="right" class='awrc'>339,593</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>NICE_TIME</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SYS_TIME</td><td align="right" class='awrc'>227,043</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>USER_TIME</td><td align="right" class='awrnc'>138,788</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LOAD</td><td align="right" class='awrc'>32</td><td align="right" class='awrc'>10</td></tr>
<tr><td scope="row" class='awrnc'>PHYSICAL_MEMORY_BYTES</td><td align="right" class='awrnc'>270,477,918,208</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>NUM_CPUS</td><td align="right" class='awrc'>32</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>NUM_CPU_CORES</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>NUM_CPU_SOCKETS</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GLOBAL_RECEIVE_SIZE_MAX</td><td align="right" class='awrnc'>4,194,304</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GLOBAL_SEND_SIZE_MAX</td><td align="right" class='awrc'>1,048,576</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_RECEIVE_SIZE_DEFAULT</td><td align="right" class='awrnc'>87,380</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_RECEIVE_SIZE_MAX</td><td align="right" class='awrc'>6,291,456</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_RECEIVE_SIZE_MIN</td><td align="right" class='awrnc'>4,096</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_SEND_SIZE_DEFAULT</td><td align="right" class='awrc'>16,384</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_SEND_SIZE_MAX</td><td align="right" class='awrnc'>4,194,304</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_SEND_SIZE_MIN</td><td align="right" class='awrc'>4,096</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1610"></a>
<h3 class="awr">Operating System Statistics - Detail</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays some detailed operating systems statistics. load, % busy , % user, % sys, % idle, % iowait are displayed for begin and end snap time"><tr><th class="awrbg" scope="col">Snap Time</th><th class="awrbg" scope="col">Load</th><th class="awrbg" scope="col">%busy</th><th class="awrbg" scope="col">%user</th><th class="awrbg" scope="col">%sys</th><th class="awrbg" scope="col">%idle</th><th class="awrbg" scope="col">%iowait</th></tr>
<tr><td scope="row" class='awrc'>14-Feb 08:34:03</td><td align="right" class='awrc'>32.16</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>14-Feb 08:45:04</td><td align="right" class='awrnc'>9.52</td><td align="right" class='awrnc'>25.01</td><td align="right" class='awrnc'>7.10</td><td align="right" class='awrnc'>11.61</td><td align="right" class='awrnc'>74.99</td><td align="right" class='awrnc'>17.37</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="210"></a>
<h3 class="awr">Foreground Wait Class</h3>
<ul>
<li class="awr"> s  - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> ordered by wait time desc, waits desc </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
<li class="awr">Captured Time accounts for	  101.9%  of Total DB time     140,700.39 (s)</li>
<li class="awr">Total FG Wait Time:	      140,647.28 (s)  DB CPU time:	 2,660.00 (s)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays foreground wait class statistics"><tr><th class="awrbg" scope="col">Wait Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">%DB time</th></tr>
<tr><td scope="row" class='awrc'>Cluster</td><td align="right" class='awrc'>1,725,928</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>126,063</td><td align="right" class='awrc'>73.04ms</td><td align="right" class='awrc'>89.60</td></tr>
<tr><td scope="row" class='awrnc'>User I/O</td><td align="right" class='awrnc'>2,974,485</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>13,425</td><td align="right" class='awrnc'>4.51ms</td><td align="right" class='awrnc'>9.54</td></tr>
<tr><td scope="row" class='awrc'>DB CPU</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2,660</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1.89</td></tr>
<tr><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>23,916</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>1,133</td><td align="right" class='awrnc'>47.37ms</td><td align="right" class='awrnc'>0.81</td></tr>
<tr><td scope="row" class='awrc'>Configuration</td><td align="right" class='awrc'>46</td><td align="right" class='awrc'>87</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>288.39ms</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Concurrency</td><td align="right" class='awrnc'>227</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>40.73ms</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>Commit</td><td align="right" class='awrc'>141</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>23.03ms</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>99</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>241.23us</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Application</td><td align="right" class='awrc'>132</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>99.50us</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Network</td><td align="right" class='awrnc'>635</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9.72us</td><td align="right" class='awrnc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="100"></a>
<h3 class="awr">Foreground Wait Events</h3>
<ul>
<li class="awr"> s  - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Only events with Total Wait Time (s) &gt;= .001 are shown </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Foreground Wait Events and their wait statistics"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">Waits /txn</th><th class="awrbg" scope="col">% DB time</th></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>1,226,319</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>73,664</td><td align="right" class='awrc'>60.07ms</td><td align="right" class='awrc'>30.27</td><td align="right" class='awrc'>52.36</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>222,450</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>34,917</td><td align="right" class='awrnc'>156.96ms</td><td align="right" class='awrnc'>5.49</td><td align="right" class='awrnc'>24.82</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>237,614</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>15,365</td><td align="right" class='awrc'>64.66ms</td><td align="right" class='awrc'>5.87</td><td align="right" class='awrc'>10.92</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>2,750,245</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>9,832</td><td align="right" class='awrnc'>3.57ms</td><td align="right" class='awrnc'>67.89</td><td align="right" class='awrnc'>6.99</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>224,166</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3,594</td><td align="right" class='awrc'>16.03ms</td><td align="right" class='awrc'>5.53</td><td align="right" class='awrc'>2.55</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>4,195</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1,095</td><td align="right" class='awrnc'>261.09ms</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.78</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>798</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>507</td><td align="right" class='awrc'>635.56ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.36</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>1,380</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>485</td><td align="right" class='awrnc'>351.72ms</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.34</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>18,051</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>408</td><td align="right" class='awrc'>22.60ms</td><td align="right" class='awrc'>0.45</td><td align="right" class='awrc'>0.29</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>8,370</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>239</td><td align="right" class='awrnc'>28.56ms</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>0.17</td></tr>
<tr><td scope="row" class='awrc'>gc cr block lost</td><td align="right" class='awrc'>257</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>166</td><td align="right" class='awrc'>646.69ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.12</td></tr>
<tr><td scope="row" class='awrnc'>gc current block congested</td><td align="right" class='awrnc'>4,149</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>91</td><td align="right" class='awrnc'>21.97ms</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>2,286</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>28.81ms</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>1,270</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>58</td><td align="right" class='awrnc'>45.53ms</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>1,654</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>57</td><td align="right" class='awrc'>34.19ms</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>366</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>38.75ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>undo segment extension</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>326.90ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block congested</td><td align="right" class='awrnc'>558</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>23.38ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant congested</td><td align="right" class='awrc'>361</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>29.76ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>10.41 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>5,803</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>1.72ms</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>1108.16ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>294</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>22.03ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>4,371</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>1.05ms</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: redo allocation</td><td align="right" class='awrc'>3,136</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1.27ms</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>log file sync</td><td align="right" class='awrnc'>141</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>23.03ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>library cache pin</td><td align="right" class='awrc'>56</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>35.73ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block busy</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>61.81ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: WF - contention</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>57.14ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: object queue header operation</td><td align="right" class='awrnc'>357</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.26ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>1,106</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>246.09us</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>17.08ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>row cache lock</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>96</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8.74ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>282</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>704.99us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>31.68ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.69ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.88ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>library cache lock</td><td align="right" class='awrnc'>56</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.15ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>964</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>100.97us</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>55</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.69ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: shared pool</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7.01ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy acquire</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>79.41ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>2,173</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>36.07us</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>104</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>533.22us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: ges resource hash list</td><td align="right" class='awrc'>96</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>572.67us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>row cache mutex</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7.05ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>lock deadlock retry</td><td align="right" class='awrc'>791</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>44.61us</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>library cache: mutex X</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.24ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>direct path write</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.77ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>99</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>241.23us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.34ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: TO - contention</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.58ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net break/reset to client</td><td align="right" class='awrc'>132</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>99.50us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: WT - contention</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.32ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CSS initialization</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4.75ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>279.08us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: TT - contention</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.62ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message to client</td><td align="right" class='awrnc'>631</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9.69us</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: undo global data</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>615.56us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: enqueue hash chains</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>666.25us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>wait list latch free</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.13ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: AF - task serialization</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.08ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: action</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.30ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>328.17us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: query</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>229.67us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>46.31us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>name-service call wait</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>596.50us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>watchdog main loop</td><td align="right" class='awrnc'>1,100</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3,300</td><td align="right" class='awrnc'>3000.05ms</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message from client</td><td align="right" class='awrc'>632</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>660</td><td align="right" class='awrc'>1044.88ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Execution Msg</td><td align="right" class='awrnc'>316</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>10.78ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Msg Fragment</td><td align="right" class='awrc'>395</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>7.22ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq Credit: send blkd</td><td align="right" class='awrnc'>241</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>11.36ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="300"></a>
<h3 class="awr">Background Wait Events</h3>
<ul>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
<li class="awr"> Only events with Total Wait Time (s) &gt;= .001 are shown </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays background wait events statistics"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">Waits /txn</th><th class="awrbg" scope="col">% bg time</th></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>231,809</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>936</td><td align="right" class='awrc'>4.04ms</td><td align="right" class='awrc'>5.72</td><td align="right" class='awrc'>26.73</td></tr>
<tr><td scope="row" class='awrnc'>log file parallel write</td><td align="right" class='awrnc'>21,690</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>515</td><td align="right" class='awrnc'>23.75ms</td><td align="right" class='awrnc'>0.54</td><td align="right" class='awrnc'>14.71</td></tr>
<tr><td scope="row" class='awrc'>LGWR any worker group</td><td align="right" class='awrc'>7,198</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>117</td><td align="right" class='awrc'>16.23ms</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>3.34</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>2,682</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>15.01ms</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>1.15</td></tr>
<tr><td scope="row" class='awrc'>LGWR worker group ordering</td><td align="right" class='awrc'>3,287</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>8.55ms</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.80</td></tr>
<tr><td scope="row" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrnc'>318</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>55.57ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.50</td></tr>
<tr><td scope="row" class='awrc'>LGWR all worker groups</td><td align="right" class='awrc'>348</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>46.27ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.46</td></tr>
<tr><td scope="row" class='awrnc'>enq: TM - contention</td><td align="right" class='awrnc'>105</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>128.46ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.39</td></tr>
<tr><td scope="row" class='awrc'>gc cr block lost</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>723.50ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.33</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>344</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>33.33ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.33</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>320</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>33.87ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.31</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>185</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>50.66ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.27</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>23,646</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>318.31us</td><td align="right" class='awrc'>0.58</td><td align="right" class='awrc'>0.21</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block busy</td><td align="right" class='awrnc'>78</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>95.44ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.21</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>181</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>40.92ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.21</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>103</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>62.46ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.18</td></tr>
<tr><td scope="row" class='awrc'>gc cr block congested</td><td align="right" class='awrc'>252</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>25.36ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.18</td></tr>
<tr><td scope="row" class='awrnc'>enq: RO - fast object reuse</td><td align="right" class='awrnc'>180</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>33.27ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.17</td></tr>
<tr><td scope="row" class='awrc'>ASM IO for non-blocking poll</td><td align="right" class='awrc'>239,652</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>23.30us</td><td align="right" class='awrc'>5.92</td><td align="right" class='awrc'>0.16</td></tr>
<tr><td scope="row" class='awrnc'>gc current block lost</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>632.42ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.14</td></tr>
<tr><td scope="row" class='awrc'>undo segment extension</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>388.19ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.12</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>419.46ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.12</td></tr>
<tr><td scope="row" class='awrc'>direct path write</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>57.20ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>26</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>128.43ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.10</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>118.76ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>538</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>5.97ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.09</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>1,291</td><td align="right" class='awrc'>46</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1.78ms</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>ASM file metadata operation</td><td align="right" class='awrnc'>2,941</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>724.91us</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>enq: CF - contention</td><td align="right" class='awrc'>63</td><td align="right" class='awrc'>51</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>32.30ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>gcs log flush sync</td><td align="right" class='awrnc'>2,250</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>670.68us</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>3,854</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>362.45us</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>54</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>23.85ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>45,085</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>27.12us</td><td align="right" class='awrc'>1.11</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>db file async I/O submit</td><td align="right" class='awrnc'>179,698</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>6.56us</td><td align="right" class='awrnc'>4.44</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>461</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2.49ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>98</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>15.90ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>676</td><td align="right" class='awrc'>97</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.52ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>2,065</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>460.34us</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>1,977</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>457.22us</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>direct path write temp</td><td align="right" class='awrnc'>67</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>13.32ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>885</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>827.49us</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>log file sequential read</td><td align="right" class='awrnc'>481</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.43ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gc current block congested</td><td align="right" class='awrc'>53</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>12.73ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers lru chain</td><td align="right" class='awrnc'>817</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>667.13us</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>enq: TO - contention</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>84.91ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>enq: TA - contention</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>252.61ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>latch: redo allocation</td><td align="right" class='awrc'>597</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>791.66us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>354</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.28ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>enq: DW - contention</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>167.51ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>ges message buffer allocation</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>23.07ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ges inquiry response</td><td align="right" class='awrc'>84</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.33ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>384</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>670.02us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>398</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>625.60us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy acquire</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>192.10ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc current block 2-way</td><td align="right" class='awrc'>59</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.18ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>AQ: RAC AQ Network</td><td align="right" class='awrnc'>6,564</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>28.48us</td><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>6,890</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>26.65us</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc cr disk read</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>39.56ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Disk file operations I/O</td><td align="right" class='awrc'>471</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>328.55us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PGA memory operation</td><td align="right" class='awrnc'>418</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>207.07us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>oracle thread bootstrap</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>26.36ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>row cache mutex</td><td align="right" class='awrnc'>56</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.29ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Join ACK</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.23ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo writing</td><td align="right" class='awrnc'>61</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>.97ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>libcache interrupt action by LCK</td><td align="right" class='awrc'>10,069</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5.64us</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ksxr poll remote instances</td><td align="right" class='awrnc'>1,587</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>30.42us</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>65</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>673.60us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context root latch</td><td align="right" class='awrnc'>67</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>619.00us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>IPC group service call</td><td align="right" class='awrc'>504</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>74.02us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges DFS hang analysis phase 2 acks</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>36.80ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current retry</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>35.05ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>library cache lock</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>56</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.94ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>58</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>575.14us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: object queue header operation</td><td align="right" class='awrnc'>23</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.31ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.15ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>library cache: bucket mutex X</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.57ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: checkpoint queue latch</td><td align="right" class='awrc'>53</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>478.55us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data query</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.26ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>library cache pin</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.32ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: TT - contention</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.66ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data update</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>899.23us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: US - contention</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.36ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>135</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>97.58us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy release</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>11.33ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>os thread creation</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.66ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: PW - flush prewarm buffers</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.21ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context latch</td><td align="right" class='awrc'>32</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>316.28us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>322.81us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>db file scattered read</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>251.12us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: WF - contention</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>894.11us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: messages</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>179.05us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: SM -  contention</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.44ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: ges resource hash list</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>498.38us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>.96ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.04ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>120.26us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>asynch descriptor resize</td><td align="right" class='awrc'>253</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10.98us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message to client</td><td align="right" class='awrnc'>250</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9.97us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA heap latch</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>120.05us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: WT - contention</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>719.50us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>wait list latch free</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.13ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>library cache: mutex X</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.09ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>buffer busy waits</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>353.33us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX Idle Wait</td><td align="right" class='awrnc'>105</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>43,084</td><td align="right" class='awrnc'>410.33 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Space Manager: slave idle wait</td><td align="right" class='awrc'>6,646</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>28,803</td><td align="right" class='awrc'>4333.83ms</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>rdbms ipc message</td><td align="right" class='awrnc'>66,098</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>14,806</td><td align="right" class='awrnc'>224.00ms</td><td align="right" class='awrnc'>1.63</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>class slave wait</td><td align="right" class='awrc'>8,480</td><td align="right" class='awrc'>77</td><td align="right" class='awrc'>4,330</td><td align="right" class='awrc'>510.66ms</td><td align="right" class='awrc'>0.21</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>wait for unread message on broadcast channel</td><td align="right" class='awrnc'>1,010</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>1,976</td><td align="right" class='awrnc'>1956.08ms</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LMS CR slave timer</td><td align="right" class='awrc'>196,536</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,972</td><td align="right" class='awrc'>10.03ms</td><td align="right" class='awrc'>4.85</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs yield cpu</td><td align="right" class='awrnc'>69,349</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>1,939</td><td align="right" class='awrnc'>27.96ms</td><td align="right" class='awrnc'>1.71</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs remote message</td><td align="right" class='awrc'>1,802,183</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,336</td><td align="right" class='awrc'>741.40us</td><td align="right" class='awrc'>44.49</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pmon timer</td><td align="right" class='awrnc'>439</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>1,317</td><td align="right" class='awrnc'>2999.89ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges remote message</td><td align="right" class='awrc'>31,892</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,314</td><td align="right" class='awrc'>41.22ms</td><td align="right" class='awrc'>0.79</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCR sleep</td><td align="right" class='awrnc'>4,375</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,314</td><td align="right" class='awrnc'>300.40ms</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DIAG idle wait</td><td align="right" class='awrc'>10,376</td><td align="right" class='awrc'>71</td><td align="right" class='awrc'>1,312</td><td align="right" class='awrc'>126.47ms</td><td align="right" class='awrc'>0.26</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Streams AQ: qmn coordinator idle wait</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>672</td><td align="right" class='awrnc'>13.71 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Streams AQ: qmn slave idle wait</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>672</td><td align="right" class='awrc'>26.88 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dispatcher timer</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>660</td><td align="right" class='awrnc'>60.01 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AQPC idle</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>660</td><td align="right" class='awrc'>30.00 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Data Guard: Gap Manager</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>660</td><td align="right" class='awrnc'>60.00 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pman timer</td><td align="right" class='awrc'>220</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>660</td><td align="right" class='awrc'>2999.74ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM cluster membership changes</td><td align="right" class='awrnc'>376</td><td align="right" class='awrnc'>85</td><td align="right" class='awrnc'>658</td><td align="right" class='awrnc'>1750.39ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>heartbeat redo informer</td><td align="right" class='awrc'>658</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>658</td><td align="right" class='awrc'>1000.18ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>658</td><td align="right" class='awrnc'>59.83 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM background timer</td><td align="right" class='awrc'>2,229</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>658</td><td align="right" class='awrc'>295.02ms</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lreg timer</td><td align="right" class='awrnc'>219</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>658</td><td align="right" class='awrnc'>3002.63ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>OFS idle</td><td align="right" class='awrc'>219</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>657</td><td align="right" class='awrc'>3000.03ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SCM slave idle</td><td align="right" class='awrnc'>6,606</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>654</td><td align="right" class='awrnc'>98.98ms</td><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PING</td><td align="right" class='awrc'>626</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>650</td><td align="right" class='awrc'>1038.83ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Data Guard: Timer</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>600</td><td align="right" class='awrnc'>600.00 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>smon timer</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>487</td><td align="right" class='awrc'>21.18 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group idle</td><td align="right" class='awrnc'>12,683</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>338</td><td align="right" class='awrnc'>26.63ms</td><td align="right" class='awrnc'>0.31</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Execute Reply</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>53.01ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Parse Reply</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>39.66ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq Credit: send blkd</td><td align="right" class='awrc'>140</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.37ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message from client</td><td align="right" class='awrnc'>250</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>335.46us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>RMA: IPC0 completion sync</td><td align="right" class='awrc'>715</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>22.93us</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7400"></a>
<h3 class="awr">Wait Event Histogram</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (idle events last)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Total Waits</th><th class="awrbg" scope="col" id="&lt;8us">&lt;8us</th><th class="awrbg" scope="col" id="&lt;16us">&lt;16us</th><th class="awrbg" scope="col" id="&lt;32us">&lt;32us</th><th class="awrbg" scope="col" id="&lt;64us">&lt;64us</th><th class="awrbg" scope="col" id="&lt;128us">&lt;128us</th><th class="awrbg" scope="col" id="&lt;256us">&lt;256us</th><th class="awrbg" scope="col" id="&lt;512us">&lt;512us</th><th class="awrbg" scope="col" id="&gt;=512us">&gt;=512us</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>6526</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>89.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>239.7K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>81.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.2</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>2930</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>26.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>24.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>20.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>11.9</td></tr>
<tr><td scope="row" class='awrnc'>AWR Flush</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>6847</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>83.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>CSS initialization</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: action</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>75.0</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data query</td><td align="right" class='awrnc'>20</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>15.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>85.0</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data update</td><td align="right" class='awrc'>22</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: query</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>66.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>16.7</td></tr>
<tr><td scope="row" class='awrc'>DFS lock handle</td><td align="right" class='awrc'>538</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>27.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>71.9</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>402</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>30.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>56.0</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>902</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>59.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>26.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>14.1</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>483</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>12.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>36.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>15.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>13.0</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group query</td><td align="right" class='awrc'>20</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>70.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group update</td><td align="right" class='awrnc'>20</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>95.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>1965</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>26.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>10.6</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>507</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>1.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>18.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>35.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>37.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.8</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>951</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>63.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>22.0</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>27.8K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>19.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>16.5</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>1282</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>21.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>18.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>30.4</td></tr>
<tr><td scope="row" class='awrnc'>LGWR all worker groups</td><td align="right" class='awrnc'>342</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>LGWR any worker group</td><td align="right" class='awrc'>7060</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>95.1</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>379</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>26.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>13.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>26.6</td></tr>
<tr><td scope="row" class='awrc'>LGWR worker group ordering</td><td align="right" class='awrc'>3213</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>80.5</td></tr>
<tr><td scope="row" class='awrnc'>PGA memory operation</td><td align="right" class='awrnc'>1439</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>23.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>22.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>15.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>10.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>3.6</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Join ACK</td><td align="right" class='awrc'>27</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>96.3</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>27</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>51.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>126</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>23.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>19.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>25.4</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>46.9K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>88.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.2</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net break/reset to client</td><td align="right" class='awrc'>130</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>29.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>25.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>18.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>2.3</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message to client</td><td align="right" class='awrnc'>880</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>90.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.1</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>54</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>40.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>50.0</td></tr>
<tr><td scope="row" class='awrnc'>asynch descriptor resize</td><td align="right" class='awrnc'>254</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>81.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>13.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.4</td></tr>
<tr><td scope="row" class='awrc'>buffer busy waits</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>57.1</td></tr>
<tr><td scope="row" class='awrnc'>buffer deadlock</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>80.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>control file parallel write</td><td align="right" class='awrc'>342</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>3915</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>34.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>29.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>11.8</td></tr>
<tr><td scope="row" class='awrc'>db file async I/O submit</td><td align="right" class='awrc'>179.7K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>95.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>220.8K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>99.8</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>231.8K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>79.5</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>33</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>69.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>27.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>3.0</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>2.7M</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>73.9</td></tr>
<tr><td scope="row" class='awrnc'>direct path write</td><td align="right" class='awrnc'>71</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>direct path write temp</td><td align="right" class='awrc'>67</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: AF - task serialization</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: CF - contention</td><td align="right" class='awrc'>63</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>98.4</td></tr>
<tr><td scope="row" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrnc'>244</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>91.8</td></tr>
<tr><td scope="row" class='awrc'>enq: DW - contention</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: FB - contention</td><td align="right" class='awrnc'>18</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>88.9</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>80.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: PS - contention</td><td align="right" class='awrnc'>109</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>90.8</td></tr>
<tr><td scope="row" class='awrc'>enq: PW - flush prewarm buffers</td><td align="right" class='awrc'>9</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>88.9</td></tr>
<tr><td scope="row" class='awrnc'>enq: RO - fast object reuse</td><td align="right" class='awrnc'>176</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>22.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>77.3</td></tr>
<tr><td scope="row" class='awrc'>enq: SM -  contention</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: TA - contention</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: TM - contention</td><td align="right" class='awrc'>104</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>96.2</td></tr>
<tr><td scope="row" class='awrnc'>enq: TO - contention</td><td align="right" class='awrnc'>14</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>92.9</td></tr>
<tr><td scope="row" class='awrc'>enq: TT - contention</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>80.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: US - contention</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: WF - contention</td><td align="right" class='awrc'>18</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>94.4</td></tr>
<tr><td scope="row" class='awrnc'>enq: WT - contention</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy acquire</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy release</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>60.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>4286</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>24.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>75.1</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block busy</td><td align="right" class='awrnc'>109</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr block congested</td><td align="right" class='awrc'>739</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>266</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>1333</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>91.8</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>233.6K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>99.5</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant congested</td><td align="right" class='awrnc'>361</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>219.1K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>1322</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current block 2-way</td><td align="right" class='awrc'>495</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>22.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>77.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>17.7K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>12.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>86.9</td></tr>
<tr><td scope="row" class='awrc'>gc current block congested</td><td align="right" class='awrc'>3916</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current block lost</td><td align="right" class='awrnc'>797</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>8453</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>13.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>85.9</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>1.2M</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>99.1</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>2294</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>22</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>95.5</td></tr>
<tr><td scope="row" class='awrc'>gc current retry</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gcs log flush sync</td><td align="right" class='awrnc'>1894</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>15.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>34.2</td></tr>
<tr><td scope="row" class='awrc'>ges DFS hang analysis phase 2 acks</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>77</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>94.8</td></tr>
<tr><td scope="row" class='awrc'>ges message buffer allocation</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>92.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>7.7</td></tr>
<tr><td scope="row" class='awrnc'>ges resource directory to be unfrozen</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>87.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>1495</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>86.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>6279</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>18.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>19.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>32.5</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA heap latch</td><td align="right" class='awrc'>19</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>47.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>15.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>5.3</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context latch</td><td align="right" class='awrnc'>32</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>28.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>18.8</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context root latch</td><td align="right" class='awrc'>67</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>10.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>28.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>13.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>35.8</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>182</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>43.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>22.5</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>1909</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>27.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>18.1</td></tr>
<tr><td scope="row" class='awrnc'>latch: call allocation</td><td align="right" class='awrnc'>15</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: checkpoint queue latch</td><td align="right" class='awrc'>53</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>28.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>24.5</td></tr>
<tr><td scope="row" class='awrnc'>latch: enqueue hash chains</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>37.5</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>6096</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>17.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>61.4</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>668</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>15.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>34.6</td></tr>
<tr><td scope="row" class='awrc'>latch: ges resource hash list</td><td align="right" class='awrc'>109</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>9.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>14.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>23.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>31.2</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>45</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>37.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>8.9</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>378</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>16.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>53.4</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo allocation</td><td align="right" class='awrnc'>3646</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>42.0</td></tr>
<tr><td scope="row" class='awrc'>latch: redo writing</td><td align="right" class='awrc'>55</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>49.1</td></tr>
<tr><td scope="row" class='awrnc'>latch: shared pool</td><td align="right" class='awrnc'>13</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>46.2</td></tr>
<tr><td scope="row" class='awrc'>latch: undo global data</td><td align="right" class='awrc'>9</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>44.4</td></tr>
<tr><td scope="row" class='awrnc'>libcache interrupt action by LCK</td><td align="right" class='awrnc'>10.3K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>98.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.0</td></tr>
<tr><td scope="row" class='awrc'>library cache lock</td><td align="right" class='awrc'>139</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>34.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>65.5</td></tr>
<tr><td scope="row" class='awrnc'>library cache pin</td><td align="right" class='awrnc'>140</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>37.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>62.1</td></tr>
<tr><td scope="row" class='awrc'>library cache: bucket mutex X</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>library cache: mutex X</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>36.4</td></tr>
<tr><td scope="row" class='awrc'>lock deadlock retry</td><td align="right" class='awrc'>789</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>81.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.4</td></tr>
<tr><td scope="row" class='awrnc'>log file parallel write</td><td align="right" class='awrnc'>21.5K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>log file sequential read</td><td align="right" class='awrc'>478</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>30.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>10.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>50.8</td></tr>
<tr><td scope="row" class='awrnc'>log file sync</td><td align="right" class='awrnc'>141</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>name-service call wait</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>oracle thread bootstrap</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>os thread creation</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>153</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>row cache lock</td><td align="right" class='awrc'>89</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>row cache mutex</td><td align="right" class='awrnc'>63</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>11.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>20.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>20.6</td></tr>
<tr><td scope="row" class='awrc'>undo segment extension</td><td align="right" class='awrc'>42</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>90.5</td></tr>
<tr><td scope="row" class='awrnc'>undo_retention publish retry</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>wait list latch free</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>AQPC idle</td><td align="right" class='awrnc'>22</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>ASM background timer</td><td align="right" class='awrc'>2222</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>80.2</td></tr>
<tr><td scope="row" class='awrnc'>ASM cluster membership changes</td><td align="right" class='awrnc'>374</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>DIAG idle wait</td><td align="right" class='awrc'>10.3K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>97.8</td></tr>
<tr><td scope="row" class='awrnc'>Data Guard: Gap Manager</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>Data Guard: Timer</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>GCR sleep</td><td align="right" class='awrnc'>4351</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>LGWR worker group idle</td><td align="right" class='awrc'>12.4K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>3.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>9.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>71.4</td></tr>
<tr><td scope="row" class='awrnc'>LMS CR slave timer</td><td align="right" class='awrnc'>195.4K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>OFS idle</td><td align="right" class='awrc'>218</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>PING</td><td align="right" class='awrnc'>626</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>18.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>49.2</td></tr>
<tr><td scope="row" class='awrc'>PX Deq Credit: send blkd</td><td align="right" class='awrc'>381</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>22.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>58.5</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Execute Reply</td><td align="right" class='awrnc'>27</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>85.2</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Execution Msg</td><td align="right" class='awrc'>292</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>85.3</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Msg Fragment</td><td align="right" class='awrnc'>394</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>4.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>14.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>62.7</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Parse Reply</td><td align="right" class='awrc'>27</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>88.9</td></tr>
<tr><td scope="row" class='awrnc'>PX Idle Wait</td><td align="right" class='awrnc'>99</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>RMA: IPC0 completion sync</td><td align="right" class='awrnc'>708</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>40.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>51.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.1</td></tr>
<tr><td scope="row" class='awrc'>SCM slave idle</td><td align="right" class='awrc'>6568</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message from client</td><td align="right" class='awrnc'>881</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>21.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>46.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>32.3</td></tr>
<tr><td scope="row" class='awrc'>Space Manager: slave idle wait</td><td align="right" class='awrc'>6611</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>97.4</td></tr>
<tr><td scope="row" class='awrnc'>Streams AQ: qmn coordinator idle wait</td><td align="right" class='awrnc'>49</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>2.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>34.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>10.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>53.1</td></tr>
<tr><td scope="row" class='awrc'>Streams AQ: qmn slave idle wait</td><td align="right" class='awrc'>25</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>4.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>96.0</td></tr>
<tr><td scope="row" class='awrnc'>class slave wait</td><td align="right" class='awrnc'>8435</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>89.9</td></tr>
<tr><td scope="row" class='awrc'>dispatcher timer</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gcs remote message</td><td align="right" class='awrnc'>1.8M</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>17.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>17.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>29.6</td></tr>
<tr><td scope="row" class='awrc'>gcs yield cpu</td><td align="right" class='awrc'>69K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>93.9</td></tr>
<tr><td scope="row" class='awrnc'>ges remote message</td><td align="right" class='awrnc'>31.9K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>86.5</td></tr>
<tr><td scope="row" class='awrc'>heartbeat monitor sleep</td><td align="right" class='awrc'>52</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>94.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>heartbeat redo informer</td><td align="right" class='awrnc'>655</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>lreg timer</td><td align="right" class='awrc'>218</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>pman timer</td><td align="right" class='awrnc'>218</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>pmon timer</td><td align="right" class='awrc'>437</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>rdbms ipc message</td><td align="right" class='awrnc'>65.2K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>13.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>66.8</td></tr>
<tr><td scope="row" class='awrc'>smon timer</td><td align="right" class='awrc'>19</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>wait for unread message on broadcast channel</td><td align="right" class='awrnc'>1003</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>watchdog main loop</td><td align="right" class='awrc'>1090</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7405"></a>
<h3 class="awr">Wait Event Histogram (up to 64 us)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds  </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 1us  - 64us</th><th class="awrbg" scope="col" id="&lt;1us"> &lt;1us</th><th class="awrbg" scope="col" id="&lt;2us"> &lt;2us</th><th class="awrbg" scope="col" id="&lt;4us"> &lt;4us</th><th class="awrbg" scope="col" id="&lt;8us">&lt;8us</th><th class="awrbg" scope="col" id="&lt;16us">&lt;16us</th><th class="awrbg" scope="col" id="&lt;32us">&lt;32us</th><th class="awrbg" scope="col" id="&lt;64us">&lt;64us</th><th class="awrbg" scope="col" id="&gt;=64us">&gt;=64us</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>6249</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>89.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>4.2</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>226.9K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>81.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>5.3</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>2156</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>26.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>24.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>20.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>26.4</td></tr>
<tr><td scope="row" class='awrnc'>AWR Flush</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>6569</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>83.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>4.1</td></tr>
<tr><td scope="row" class='awrnc'>CSS initialization</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: action</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>75.0</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: query</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>16.7</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>44</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>89.1</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>149</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>12.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>15.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>69.2</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group query</td><td align="right" class='awrc'>20</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>70.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group update</td><td align="right" class='awrnc'>20</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>95.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>576</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>70.7</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>284</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>18.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>35.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>44.0</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>648</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>63.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>31.9</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>15.3K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>19.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>12.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>44.9</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>485</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>21.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>62.2</td></tr>
<tr><td scope="row" class='awrnc'>LGWR any worker group</td><td align="right" class='awrnc'>17</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>99.8</td></tr>
<tr><td scope="row" class='awrc'>LGWR wait for redo copy</td><td align="right" class='awrc'>150</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>26.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>60.4</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group ordering</td><td align="right" class='awrnc'>211</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>93.4</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>914</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>23.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>22.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>15.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>36.5</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>17</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>51.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>37.0</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>40</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>23.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>68.3</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>45.1K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>88.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>3.9</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net break/reset to client</td><td align="right" class='awrc'>65</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>29.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>50.0</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message to client</td><td align="right" class='awrnc'>869</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>90.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>1.3</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>24</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>40.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>55.6</td></tr>
<tr><td scope="row" class='awrnc'>asynch descriptor resize</td><td align="right" class='awrnc'>249</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>81.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>13.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>2.0</td></tr>
<tr><td scope="row" class='awrc'>buffer deadlock</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>80.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>20.0</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>873</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>77.7</td></tr>
<tr><td scope="row" class='awrc'>db file async I/O submit</td><td align="right" class='awrc'>178.5K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>95.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>.7</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>9530</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>95.9</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>60.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>16</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>99.9</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>9</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>99.9</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>93</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gcs log flush sync</td><td align="right" class='awrnc'>307</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>9.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>83.8</td></tr>
<tr><td scope="row" class='awrc'>ges message buffer allocation</td><td align="right" class='awrc'>12</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>92.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>7.7</td></tr>
<tr><td scope="row" class='awrnc'>ges resource directory to be unfrozen</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>87.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>1405</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>86.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>6.0</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>1012</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>83.9</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA heap latch</td><td align="right" class='awrc'>12</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>47.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>36.8</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context latch</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>81.3</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context root latch</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>88.1</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>88</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>43.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>51.6</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>652</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>27.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>65.8</td></tr>
<tr><td scope="row" class='awrnc'>latch: call allocation</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>60.0</td></tr>
<tr><td scope="row" class='awrc'>latch: checkpoint queue latch</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>75.5</td></tr>
<tr><td scope="row" class='awrnc'>latch: enqueue hash chains</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>87.5</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>299</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>95.1</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>104</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>84.4</td></tr>
<tr><td scope="row" class='awrc'>latch: ges resource hash list</td><td align="right" class='awrc'>16</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>9.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>85.3</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>9</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>80.0</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>31</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>91.8</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo allocation</td><td align="right" class='awrnc'>463</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>87.3</td></tr>
<tr><td scope="row" class='awrc'>latch: redo writing</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>87.3</td></tr>
<tr><td scope="row" class='awrnc'>latch: shared pool</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>76.9</td></tr>
<tr><td scope="row" class='awrc'>latch: undo global data</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>77.8</td></tr>
<tr><td scope="row" class='awrnc'>libcache interrupt action by LCK</td><td align="right" class='awrnc'>10.3K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>96.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>.3</td></tr>
<tr><td scope="row" class='awrc'>library cache: mutex X</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>54.5</td></tr>
<tr><td scope="row" class='awrnc'>lock deadlock retry</td><td align="right" class='awrnc'>731</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>81.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>7.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>7.4</td></tr>
<tr><td scope="row" class='awrc'>log file sequential read</td><td align="right" class='awrc'>147</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>30.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>69.2</td></tr>
<tr><td scope="row" class='awrnc'>row cache mutex</td><td align="right" class='awrnc'>35</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>20.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>44.4</td></tr>
<tr><td scope="row" class='awrc'>undo segment extension</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>90.5</td></tr>
<tr><td scope="row" class='awrnc'>undo_retention publish retry</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7410"></a>
<h3 class="awr">Wait Event Histogram (up to 32 ms)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds,	ms is 1024 microseconds (approximately 1 millisecond) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 1ms  to 32ms</th><th class="awrbg" scope="col" id="&lt;512us"> &lt;512us</th><th class="awrbg" scope="col" id="&lt;1ms"> &lt;1ms</th><th class="awrbg" scope="col" id="&lt;2ms"> &lt;2ms</th><th class="awrbg" scope="col" id="&lt;4ms"> &lt;4ms</th><th class="awrbg" scope="col" id="&lt;8ms">&lt;8ms</th><th class="awrbg" scope="col" id="&lt;16ms">&lt;16ms</th><th class="awrbg" scope="col" id="&lt;32ms">&lt;32ms</th><th class="awrbg" scope="col" id="&gt;=32ms">&gt;=32ms</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>545</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>344</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>88.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>CGS wait for IPC msg</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS initialization</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data query</td><td align="right" class='awrc'>17</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>15.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>35.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>35.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>15.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data update</td><td align="right" class='awrnc'>22</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>68.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>31.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: query</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>83.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>382</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>28.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>35.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>17.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.9</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>224</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>44.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>45.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>124</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>85.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.3</td></tr>
<tr><td scope="row" class='awrc'>Disk file operations I/O</td><td align="right" class='awrc'>63</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>87.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" class='awrnc'>206</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>89.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.2</td></tr>
<tr><td scope="row" class='awrc'>IPC group service call</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC send completion sync</td><td align="right" class='awrnc'>202</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>78.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.7</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>1727</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>83.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>10.3</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>388</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>69.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.2</td></tr>
<tr><td scope="row" class='awrc'>LGWR all worker groups</td><td align="right" class='awrc'>220</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>29.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>29.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>35.7</td></tr>
<tr><td scope="row" class='awrnc'>LGWR any worker group</td><td align="right" class='awrnc'>6143</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>4.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>21.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>7.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>8.1</td></tr>
<tr><td scope="row" class='awrc'>LGWR wait for redo copy</td><td align="right" class='awrc'>101</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>73.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group ordering</td><td align="right" class='awrnc'>2461</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>19.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>34.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>16.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>4.0</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>52</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>96.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Join ACK</td><td align="right" class='awrnc'>26</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>3.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>37.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>37.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>32</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>74.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>84</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net break/reset to client</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>97.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message to client</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>9.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>22.2</td></tr>
<tr><td scope="row" class='awrnc'>asynch descriptor resize</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>control file parallel write</td><td align="right" class='awrc'>288</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>21.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>38.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>8.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>15.8</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>461</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>88.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file async I/O submit</td><td align="right" class='awrc'>57</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>182.6K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>43.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>13.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>16.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>17.0</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>181.1K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>20.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>33.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>1.4</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>97.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>2M</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>26.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>46.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.9</td></tr>
<tr><td scope="row" class='awrnc'>direct path write</td><td align="right" class='awrnc'>52</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>19.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>32.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>26.8</td></tr>
<tr><td scope="row" class='awrc'>direct path write temp</td><td align="right" class='awrc'>63</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>71.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>6.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: AF - task serialization</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CF - contention</td><td align="right" class='awrc'>57</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>25.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>17.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>7.9</td></tr>
<tr><td scope="row" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrnc'>183</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>8.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>23.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>29.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>16.8</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>16</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>11.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>55.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>20.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>99</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>9.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>37.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>26.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: PW - flush prewarm buffers</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>11.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>88.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: RO - fast object reuse</td><td align="right" class='awrc'>129</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>22.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>38.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>4.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: SM -  contention</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TA - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>50.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: TM - contention</td><td align="right" class='awrnc'>83</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>3.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>22.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>30.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>21.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>16.3</td></tr>
<tr><td scope="row" class='awrc'>enq: TO - contention</td><td align="right" class='awrc'>12</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>7.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>35.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>7.1</td></tr>
<tr><td scope="row" class='awrnc'>enq: TT - contention</td><td align="right" class='awrnc'>12</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>20.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>46.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: US - contention</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>30.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>70.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: WF - contention</td><td align="right" class='awrnc'>16</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>5.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>27.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>5.6</td></tr>
<tr><td scope="row" class='awrc'>enq: WT - contention</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy release</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>40.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>3132</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>24.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>19.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>21.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>19.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block busy</td><td align="right" class='awrnc'>53</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>16.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>23.9</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>51.4</td></tr>
<tr><td scope="row" class='awrc'>gc cr block congested</td><td align="right" class='awrc'>724</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>16.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>41.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>33.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr disk read</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>1173</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>8.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>13.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>23.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>34.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>3.8</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>194.1K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>16.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>24.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>21.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>8.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>16.4</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant congested</td><td align="right" class='awrc'>354</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>52.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>28.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>1.9</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>128.7K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>23.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>16.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>41.3</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>496</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>11.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>62.5</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>367</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>23.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>14.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>23.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>2.8</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>15K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>13.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>22.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>27.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>22.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.1</td></tr>
<tr><td scope="row" class='awrnc'>gc current block congested</td><td align="right" class='awrnc'>3845</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>44.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>30.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>1.8</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>6973</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>14.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>23.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>26.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>3.4</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>1M</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>23.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>15.6</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>2188</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>16.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>49.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>24.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>4.6</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>19</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>4.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>31.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>9.1</td></tr>
<tr><td scope="row" class='awrc'>gcs log flush sync</td><td align="right" class='awrc'>648</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>65.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>72</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>5.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>46.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>31.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>1.3</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>2039</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>67.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA heap latch</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>94.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context latch</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>81.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context root latch</td><td align="right" class='awrc'>24</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>64.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>41</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>77.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>346</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>81.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: checkpoint queue latch</td><td align="right" class='awrnc'>13</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>75.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: enqueue hash chains</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>62.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>3743</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>38.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>19.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>18.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>13.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.0</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>231</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>65.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: ges resource hash list</td><td align="right" class='awrnc'>34</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>68.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: messages</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>91.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: object queue header operation</td><td align="right" class='awrnc'>202</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>46.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>21.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: redo allocation</td><td align="right" class='awrc'>1530</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>58.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>13.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo writing</td><td align="right" class='awrnc'>27</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>50.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>23.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>14.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: shared pool</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>53.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>23.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: undo global data</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>55.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>libcache interrupt action by LCK</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache lock</td><td align="right" class='awrnc'>91</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>34.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>33.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache pin</td><td align="right" class='awrc'>83</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>37.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>32.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.9</td></tr>
<tr><td scope="row" class='awrnc'>library cache: bucket mutex X</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>30.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>70.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache: mutex X</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>63.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lock deadlock retry</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>18.8K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>50.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>17.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>12.2</td></tr>
<tr><td scope="row" class='awrnc'>log file sequential read</td><td align="right" class='awrnc'>243</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>49.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>14.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>23.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file sync</td><td align="right" class='awrc'>106</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>14.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>40.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>17.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>24.8</td></tr>
<tr><td scope="row" class='awrnc'>name-service call wait</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>oracle thread bootstrap</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>75.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>25.0</td></tr>
<tr><td scope="row" class='awrnc'>os thread creation</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>75.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>141</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>26.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>41.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>7.8</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>86</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>18.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>29.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>41.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>3.4</td></tr>
<tr><td scope="row" class='awrc'>row cache mutex</td><td align="right" class='awrc'>12</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>79.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>1.6</td></tr>
<tr><td scope="row" class='awrnc'>undo segment extension</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>9.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>71.4</td></tr>
<tr><td scope="row" class='awrc'>wait list latch free</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7420"></a>
<h3 class="awr">Wait Event Histogram (up to 2 sec)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 ms is milliseconds    s is 1024 milliseconds (approximately 1 second) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 64ms  to 2s</th><th class="awrbg" scope="col" id="&lt;32ms">&lt;32ms</th><th class="awrbg" scope="col" id="&lt;64ms">&lt;64ms</th><th class="awrbg" scope="col" id="&lt;1/8s">&lt;1/8s</th><th class="awrbg" scope="col" id="&lt;1/4s">&lt;1/4s</th><th class="awrbg" scope="col" id="&lt;1/2s">&lt;1/2s</th><th class="awrbg" scope="col" id="&lt;1s">  &lt;1s</th><th class="awrbg" scope="col" id="&lt;2s">  &lt;2s</th><th class="awrbg" scope="col" id="&gt;=2s">&gt;=2s</th></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC send completion sync</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>2833</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>89.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR all worker groups</td><td align="right" class='awrc'>122</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>64.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR any worker group</td><td align="right" class='awrnc'>569</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>91.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR worker group ordering</td><td align="right" class='awrc'>127</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>96.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>12</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>77.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>buffer busy waits</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>42.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>14.3</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>54</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>84.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>37.6K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>83.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>3186</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>98.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>24.9K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path write</td><td align="right" class='awrnc'>19</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>73.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>direct path write temp</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>94.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: CF - contention</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>92.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>41</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>83.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: DW - contention</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: RO - fast object reuse</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>96.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>1.1</td></tr>
<tr><td scope="row" class='awrnc'>enq: TA - contention</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TM - contention</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>83.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>2.9</td></tr>
<tr><td scope="row" class='awrnc'>enq: TO - contention</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>92.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: WF - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>94.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy acquire</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>86</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>98.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block busy</td><td align="right" class='awrnc'>56</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>48.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>29.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block congested</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>98.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>265</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>30.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>63.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>6.4</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.4</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>51</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>96.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>38K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>83.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant congested</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>98.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>88.8K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>58.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>17.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.8</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>810</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>37.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>26.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>1.2</td></tr>
<tr><td scope="row" class='awrc'>gc current block 2-way</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>97.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>361</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>97.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.0</td></tr>
<tr><td scope="row" class='awrc'>gc current block congested</td><td align="right" class='awrc'>70</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>98.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current block lost</td><td align="right" class='awrnc'>793</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>32.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>62.7</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.5</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>286</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>96.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>185.9K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>84.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.2</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>106</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>95.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>90.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>4.5</td></tr>
<tr><td scope="row" class='awrc'>gc current retry</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges DFS hang analysis phase 2 acks</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges inquiry response</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>98.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges message buffer allocation</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>92.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache pin</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>97.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>2630</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>87.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log file sync</td><td align="right" class='awrnc'>35</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>75.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>20.6</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>oracle thread bootstrap</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>75.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>92.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.7</td></tr>
<tr><td scope="row" class='awrc'>row cache lock</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>96.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>row cache mutex</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>98.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>undo segment extension</td><td align="right" class='awrc'>30</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>28.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7430"></a>
<h3 class="awr">Wait Event Histogram (up to 2 min)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	s is 1024 milliseconds (approximately 1 second)    m is 64*1024 milliseconds (approximately 67 seconds or 1.12 minutes) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 4s	 to 2m</th><th class="awrbg" scope="col" id="&lt;2s">&lt;2s</th><th class="awrbg" scope="col" id="&lt;4s"> &lt;4s</th><th class="awrbg" scope="col" id="&lt;8s"> &lt;8s</th><th class="awrbg" scope="col" id="&lt;16s">&lt;16s</th><th class="awrbg" scope="col" id="&lt;32s">&lt;32s</th><th class="awrbg" scope="col" id="&lt;1m">&lt; 1m</th><th class="awrbg" scope="col" id="&lt;2m">&lt; 2m</th><th class="awrbg" scope="col" id="&gt;=2m">&gt;=2m</th></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>21</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>85.7</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: RO - fast object reuse</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>98.9</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TM - contention</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>97.1</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>99.6</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>376</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>1659</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>99.2</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>16</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>98.8</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.5</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>2136</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>95.5</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.3</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7440"></a>
<h3 class="awr">Wait Event Histogram (up to 1 hr)</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5800"></a>
<h3 class="awr">Service Statistics</h3>
<ul>
<li class="awr"> ordered by DB Time</li>
</ul>
<table border="0" class="tdiff" summary="This table displays service statistics. It displays service names and corresponding DB time, DB CPU, Physical reads, logical reads."><tr><th class="awrbg" scope="col">Service Name</th><th class="awrbg" scope="col">DB Time (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">Physical Reads (K)</th><th class="awrbg" scope="col">Logical Reads (K)</th></tr>
<tr><td scope="row" class='awrc'>p60sdb.example.com</td><td align="right" class='awrc'>140,178</td><td align="right" class='awrc'>2,639</td><td align="right" class='awrc'>14,811</td><td align="right" class='awrc'>17,412</td></tr>
<tr><td scope="row" class='awrnc'>SYS$BACKGROUND</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>186</td></tr>
<tr><td scope="row" class='awrc'>SYS$USERS</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>p60sdbXDB</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5820"></a>
<h3 class="awr">Service Wait Class Stats</h3>
<ul>
<li class="awr"> Wait Class info for services in the Service Statistics section.  </li>
<li class="awr"> Total Waits and Time Waited displayed for the following wait	  classes:  User I/O, Concurrency, Administrative, Network </li>
<li class="awr"> Time Waited (Wt Time) in seconds</li>
</ul>
<table border="0" class="tdiff" summary="This table displays service wait class statistics. It displays user I/O total wait, user I/O wait time, concurrency total wait, concurrency wait time, etc."><tr><th class="awrbg" scope="col">Service Name</th><th class="awrbg" scope="col">User I/O Total Wts</th><th class="awrbg" scope="col">User I/O Wt Time</th><th class="awrbg" scope="col">Concurcy Total Wts</th><th class="awrbg" scope="col">Concurcy Wt Time</th><th class="awrbg" scope="col">Admin Total Wts</th><th class="awrbg" scope="col">Admin Wt Time</th><th class="awrbg" scope="col">Network Total Wts</th><th class="awrbg" scope="col">Network Wt Time</th></tr>
<tr><td scope="row" class='awrc'>p60sdb.example.com</td>
<td align="right" class='awrc'>2910808</td><td align="right" class='awrc'>13144</td><td align="right" class='awrc'>136</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>501</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SYS$BACKGROUND</td>
<td align="right" class='awrnc'>242279</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>11630</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>502</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SYS$USERS</td>
<td align="right" class='awrc'>12</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>130</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5840"></a>
<h3 class="awr">Top 10 Channel Waits</h3>
<ul>
<li class="awr"> Top 10 Channel Waits by wait time </li>
</ul>
<table border="0" class="tdiff" summary="This table displays top 10 Channel Watis by wait time."><tr><th class="awrbg" scope="col">Channel</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg Wait</th></tr>
<tr><td scope="row" class='awrc'>kxfp control signal channel</td>
<td align="right" class='awrc'>14</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.20ms</td></tr>
<tr><td scope="row" class='awrnc'>GEN0 ksbxic channel</td>
<td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.13ms</td></tr>
<tr><td scope="row" class='awrc'>obj broadcast channel</td>
<td align="right" class='awrc'>22</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4.00ms</td></tr>
<tr><td scope="row" class='awrnc'>RBR channel</td>
<td align="right" class='awrnc'>102</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>51.99ms</td></tr>
<tr><td scope="row" class='awrc'>MMON remote action broadcast channel</td>
<td align="right" class='awrc'>3</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>4157.95ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2310"></a>
<h3 class="awr">Top Process Types by Wait Class</h3>
<ul>
<li class="awr"> This table displays top process types ordered by wait class</li>
</ul>
<table border="0" class="tdiff" summary="Top Process Types by Wait Class. . This table displays top process types ordered by wait class"><tr><th class="awrbg" scope="col">Process Type</th><th class="awrbg" scope="col">Description</th><th class="awrbg" scope="col">Wait Class Type</th><th class="awrbg" scope="col">Wait Time (sec)</th></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrc'>Cluster</td><td align="right" class='awrc'>125,189.12</td></tr>
<tr><td scope="row" class='awrnc'>&#160;</td><td scope="row" class='awrnc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrnc'>User I/O</td><td align="right" class='awrnc'>13,259.41</td></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>1,113.53</td></tr>
<tr><td scope="row" class='awrnc'>LG</td><td scope="row" class='awrnc'>Log Writer Slave</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>366.95</td></tr>
<tr><td scope="row" class='awrc'>DBW1</td><td scope="row" class='awrc'>db writer process 1</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>235.04</td></tr>
<tr><td scope="row" class='awrnc'>DBW0</td><td scope="row" class='awrnc'>db writer process 0</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>234.30</td></tr>
<tr><td scope="row" class='awrc'>DBW2</td><td scope="row" class='awrc'>db writer process 2</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>234.27</td></tr>
<tr><td scope="row" class='awrnc'>DBW3</td><td scope="row" class='awrnc'>db writer process 3</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>232.74</td></tr>
<tr><td scope="row" class='awrc'>LGWR</td><td scope="row" class='awrc'>Redo etc.</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>143.21</td></tr>
<tr><td scope="row" class='awrnc'>LGWR</td><td scope="row" class='awrnc'>Redo etc.</td><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>131.99</td></tr>
<tr><td scope="row" class='awrc'>MMON</td><td scope="row" class='awrc'>Manageability Monitor Process</td><td scope="row" class='awrc'>Cluster</td><td align="right" class='awrc'>64.01</td></tr>
<tr><td scope="row" class='awrnc'>M</td><td scope="row" class='awrnc'>MMON slave class 1</td><td scope="row" class='awrnc'>Cluster</td><td align="right" class='awrnc'>38.68</td></tr>
<tr><td scope="row" class='awrc'>LG</td><td scope="row" class='awrc'>Log Writer Slave</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>28.15</td></tr>
<tr><td scope="row" class='awrnc'>SMON</td><td scope="row" class='awrnc'>System Monitor Process</td><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>24.95</td></tr>
<tr><td scope="row" class='awrc'>M</td><td scope="row" class='awrc'>MMON slave class 1</td><td scope="row" class='awrc'>Application</td><td align="right" class='awrc'>18.71</td></tr>
<tr><td scope="row" class='awrnc'>&#160;</td><td scope="row" class='awrnc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrnc'>Configuration</td><td align="right" class='awrnc'>10.82</td></tr>
<tr><td scope="row" class='awrc'>CKPT</td><td scope="row" class='awrc'>checkpoint</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>10.53</td></tr>
<tr><td scope="row" class='awrnc'>P</td><td scope="row" class='awrnc'>Parallel query slave</td><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>8.17</td></tr>
<tr><td scope="row" class='awrc'>M</td><td scope="row" class='awrc'>MMON slave class 1</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>6.92</td></tr>
<tr><td scope="row" class='awrnc'>&#160;</td><td scope="row" class='awrnc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrnc'>Concurrency</td><td align="right" class='awrnc'>6.33</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2320"></a>
<h3 class="awr">Top Process Types by CPU Used</h3>
<ul>
<li class="awr"> This table displays top process types ordered by CPU time</li>
</ul>
<table border="0" class="tdiff" summary="Top Process Types by CPU Used. . This table displays top process types ordered by CPU time"><tr><th class="awrbg" scope="col">Process Type</th><th class="awrbg" scope="col">Description</th><th class="awrbg" scope="col">CPU Time (sec)</th></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td align="right" class='awrc'>2,651.13</td></tr>
<tr><td scope="row" class='awrnc'>LM</td><td scope="row" class='awrnc'>global cache service process</td><td align="right" class='awrnc'>975.03</td></tr>
<tr><td scope="row" class='awrc'>DBW0</td><td scope="row" class='awrc'>db writer process 0</td><td align="right" class='awrc'>57.93</td></tr>
<tr><td scope="row" class='awrnc'>DBW3</td><td scope="row" class='awrnc'>db writer process 3</td><td align="right" class='awrnc'>57.57</td></tr>
<tr><td scope="row" class='awrc'>DBW1</td><td scope="row" class='awrc'>db writer process 1</td><td align="right" class='awrc'>57.52</td></tr>
<tr><td scope="row" class='awrnc'>DBW2</td><td scope="row" class='awrnc'>db writer process 2</td><td align="right" class='awrnc'>57.34</td></tr>
<tr><td scope="row" class='awrc'>VKTM</td><td scope="row" class='awrc'>Virtual Keeper of TiMe process</td><td align="right" class='awrc'>46.36</td></tr>
<tr><td scope="row" class='awrnc'>RS*</td><td scope="row" class='awrnc'>GCS RM Slave</td><td align="right" class='awrnc'>37.04</td></tr>
<tr><td scope="row" class='awrc'>M</td><td scope="row" class='awrc'>MMON slave class 1</td><td align="right" class='awrc'>15.47</td></tr>
<tr><td scope="row" class='awrnc'>LG</td><td scope="row" class='awrnc'>Log Writer Slave</td><td align="right" class='awrnc'>12.74</td></tr>
<tr><td scope="row" class='awrc'>P</td><td scope="row" class='awrc'>Parallel query slave</td><td align="right" class='awrc'>12.47</td></tr>
<tr><td scope="row" class='awrnc'>CR*</td><td scope="row" class='awrnc'>GCS CR Slave</td><td align="right" class='awrnc'>12.39</td></tr>
<tr><td scope="row" class='awrc'>LGWR</td><td scope="row" class='awrc'>Redo etc.</td><td align="right" class='awrc'>8.27</td></tr>
<tr><td scope="row" class='awrnc'>GCR</td><td scope="row" class='awrnc'>GCR Slaves (LMHB)</td><td align="right" class='awrnc'>5.92</td></tr>
<tr><td scope="row" class='awrc'>DIA0</td><td scope="row" class='awrc'>diagnosibility process 0</td><td align="right" class='awrc'>4.82</td></tr>
<tr><td scope="row" class='awrnc'>SCM</td><td scope="row" class='awrnc'>DLM Statistics Collection and Management Slave</td><td align="right" class='awrnc'>4.73</td></tr>
<tr><td scope="row" class='awrc'>IPC0</td><td scope="row" class='awrc'>IPC Service 0</td><td align="right" class='awrc'>4.26</td></tr>
<tr><td scope="row" class='awrnc'>RMS0</td><td scope="row" class='awrnc'>rac management server</td><td align="right" class='awrnc'>3.84</td></tr>
<tr><td scope="row" class='awrc'>LMD0</td><td scope="row" class='awrc'>global enqueue service daemon 0</td><td align="right" class='awrc'>3.65</td></tr>
<tr><td scope="row" class='awrnc'>LMHB</td><td scope="row" class='awrnc'>lm heartbeat monitor</td><td align="right" class='awrnc'>2.25</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="22"></a>
<h2 class="awr">
SQL Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#400">SQL ordered by Elapsed Time</a></li>
<li class="awr"><a class="awr" href="#500">SQL ordered by CPU Time</a></li>
<li class="awr"><a class="awr" href="#550">SQL ordered by User I/O Wait Time</a></li>
<li class="awr"><a class="awr" href="#600">SQL ordered by Gets</a></li>
<li class="awr"><a class="awr" href="#700">SQL ordered by Reads</a></li>
<li class="awr"><a class="awr" href="#740">SQL ordered by Physical Reads (UnOptimized)</a></li>
<li class="awr"><a class="awr" href="#800">SQL ordered by Executions</a></li>
<li class="awr"><a class="awr" href="#900">SQL ordered by Parse Calls</a></li>
<li class="awr"><a class="awr" href="#1000">SQL ordered by Sharable Memory</a></li>
<li class="awr"><a class="awr" href="#1100">SQL ordered by Version Count</a></li>
<li class="awr"><a class="awr" href="#1150">SQL ordered by Cluster Wait Time</a></li>
<li class="awr"><a class="awr" href="#99997">Complete List of SQL Text</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="400"></a>
<h3 class="awr">SQL ordered by Elapsed Time</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> % Total DB Time is the Elapsed Time of the SQL statement divided     into the Total Database Time multiplied by 100 </li>
<li class="awr"> %Total - Elapsed Time	as a percentage of Total DB time </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Captured SQL account for   95.7% of Total DB Time (s):	       140,700</li>
<li class="awr">Captured PL/SQL account for   20.5% of Total DB Time (s):	  140,700</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by elapsed time"><tr><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">Elapsed Time per Exec (s) </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">	SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>79,969.16</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>56.84</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>&#160;</td><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'>54,540.10</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>38.76</td><td align="right" class='awrnc'>2.33</td><td align="right" class='awrnc'>&#160;</td><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'>546.76</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>546.76</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>1.92</td><td align="right" class='awrc'>9.49</td><td scope="row" class='awrc'><a class="awr" href="#fpx8qau059b6k">fpx8qau059b6k</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>546.60</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>546.60</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>1.82</td><td align="right" class='awrnc'>10.05</td><td scope="row" class='awrnc'><a class="awr" href="#dpgskpjbnxu8n">dpgskpjbnxu8n</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>546.58</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>546.58</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>1.78</td><td align="right" class='awrc'>8.66</td><td scope="row" class='awrc'><a class="awr" href="#58vuprsfnw7af">58vuprsfnw7af</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>545.82</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>545.82</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>1.86</td><td align="right" class='awrnc'>9.87</td><td scope="row" class='awrnc'><a class="awr" href="#dk7wndm4trmxm">dk7wndm4trmxm</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>545.81</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>545.81</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>1.85</td><td align="right" class='awrc'>9.11</td><td scope="row" class='awrc'><a class="awr" href="#59u1h8q0dn7kr">59u1h8q0dn7kr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>545.77</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>545.77</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>1.93</td><td align="right" class='awrnc'>9.17</td><td scope="row" class='awrnc'><a class="awr" href="#bp4mjh3dc1y4y">bp4mjh3dc1y4y</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>545.67</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>545.67</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>1.92</td><td align="right" class='awrc'>8.06</td><td scope="row" class='awrc'><a class="awr" href="#dnznjspycqrhh">dnznjspycqrhh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>545.42</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>545.42</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>1.96</td><td align="right" class='awrnc'>9.94</td><td scope="row" class='awrnc'><a class="awr" href="#grnj9m41xzwyv">grnj9m41xzwyv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="500"></a>
<h3 class="awr">SQL ordered by CPU Time</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> %Total - CPU Time	as a percentage of Total DB CPU </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Captured SQL account for   93.0% of Total CPU Time (s): 	  2,660</li>
<li class="awr">Captured PL/SQL account for   20.9% of Total CPU Time (s):	     2,660</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by CPU time"><tr><th class="awrbg" scope="col">CPU    Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">CPU per  Exec (s)</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>1,273.07</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>47.86</td><td align="right" class='awrc'>54,540.10</td><td align="right" class='awrc'>2.33</td><td align="right" class='awrc'>&#160;</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>1,184.98</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>44.55</td><td align="right" class='awrnc'>79,969.16</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>&#160;</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>11.23</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>11.23</td><td align="right" class='awrc'>0.42</td><td align="right" class='awrc'>544.30</td><td align="right" class='awrc'>2.06</td><td align="right" class='awrc'>9.32</td><td scope="row" class='awrc'><a class="awr" href="#b2a4zdu00qd3v">b2a4zdu00qd3v</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>11.23</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>11.23</td><td align="right" class='awrnc'>0.42</td><td align="right" class='awrnc'>543.37</td><td align="right" class='awrnc'>2.07</td><td align="right" class='awrnc'>9.26</td><td scope="row" class='awrnc'><a class="awr" href="#3ga2c5w22k8p4">3ga2c5w22k8p4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>11.21</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>11.21</td><td align="right" class='awrc'>0.42</td><td align="right" class='awrc'>543.16</td><td align="right" class='awrc'>2.06</td><td align="right" class='awrc'>8.84</td><td scope="row" class='awrc'><a class="awr" href="#gta39sva2c0pj">gta39sva2c0pj</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>11.15</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>11.15</td><td align="right" class='awrnc'>0.42</td><td align="right" class='awrnc'>544.91</td><td align="right" class='awrnc'>2.05</td><td align="right" class='awrnc'>7.79</td><td scope="row" class='awrnc'><a class="awr" href="#f737cjs9htn1t">f737cjs9htn1t</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>11.13</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>11.13</td><td align="right" class='awrc'>0.42</td><td align="right" class='awrc'>544.09</td><td align="right" class='awrc'>2.05</td><td align="right" class='awrc'>7.70</td><td scope="row" class='awrc'><a class="awr" href="#1hh6k5cdprk6r">1hh6k5cdprk6r</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>11.11</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>11.11</td><td align="right" class='awrnc'>0.42</td><td align="right" class='awrnc'>543.24</td><td align="right" class='awrnc'>2.04</td><td align="right" class='awrnc'>9.27</td><td scope="row" class='awrnc'><a class="awr" href="#1ksjxx805vj29">1ksjxx805vj29</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>11.08</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>11.08</td><td align="right" class='awrc'>0.42</td><td align="right" class='awrc'>544.81</td><td align="right" class='awrc'>2.03</td><td align="right" class='awrc'>8.62</td><td scope="row" class='awrc'><a class="awr" href="#cnvn60d4ys1ym">cnvn60d4ys1ym</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>11.07</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>11.07</td><td align="right" class='awrnc'>0.42</td><td align="right" class='awrnc'>544.61</td><td align="right" class='awrnc'>2.03</td><td align="right" class='awrnc'>10.87</td><td scope="row" class='awrnc'><a class="awr" href="#4zg5m4p0nhv8x">4zg5m4p0nhv8x</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="550"></a>
<h3 class="awr">SQL ordered by User I/O Wait Time</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> %Total - User I/O Time as a percentage of Total User I/O Wait time </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Captured SQL account for    0.0% of Total User I/O Wait Time (s):	   13,438</li>
<li class="awr">Captured PL/SQL account for   19.9% of Total User I/O Wait Time (s):	      13,438</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by user I/O time"><tr><th class="awrbg" scope="col">User I/O Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">UIO per  Exec (s)</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>61.49</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>61.49</td><td align="right" class='awrc'>0.46</td><td align="right" class='awrc'>542.69</td><td align="right" class='awrc'>1.98</td><td align="right" class='awrc'>11.33</td><td scope="row" class='awrc'><a class="awr" href="#3jkjssn33np0t">3jkjssn33np0t</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>60.62</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>60.62</td><td align="right" class='awrnc'>0.45</td><td align="right" class='awrnc'>544.18</td><td align="right" class='awrnc'>2.03</td><td align="right" class='awrnc'>11.14</td><td scope="row" class='awrnc'><a class="awr" href="#gdsqn03xtayhg">gdsqn03xtayhg</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>59.23</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>59.23</td><td align="right" class='awrc'>0.44</td><td align="right" class='awrc'>544.61</td><td align="right" class='awrc'>2.03</td><td align="right" class='awrc'>10.87</td><td scope="row" class='awrc'><a class="awr" href="#4zg5m4p0nhv8x">4zg5m4p0nhv8x</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>56.75</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>56.75</td><td align="right" class='awrnc'>0.42</td><td align="right" class='awrnc'>545.17</td><td align="right" class='awrnc'>1.80</td><td align="right" class='awrnc'>10.41</td><td scope="row" class='awrnc'><a class="awr" href="#f69ubn526tz3u">f69ubn526tz3u</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>56.17</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>56.17</td><td align="right" class='awrc'>0.42</td><td align="right" class='awrc'>545.36</td><td align="right" class='awrc'>1.76</td><td align="right" class='awrc'>10.30</td><td scope="row" class='awrc'><a class="awr" href="#9wdas3v8sxd2f">9wdas3v8sxd2f</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>56.11</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>56.11</td><td align="right" class='awrnc'>0.42</td><td align="right" class='awrnc'>544.90</td><td align="right" class='awrnc'>1.79</td><td align="right" class='awrnc'>10.30</td><td scope="row" class='awrnc'><a class="awr" href="#0qjstdgx3hhpf">0qjstdgx3hhpf</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>56.11</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>56.11</td><td align="right" class='awrc'>0.42</td><td align="right" class='awrc'>542.84</td><td align="right" class='awrc'>1.98</td><td align="right" class='awrc'>10.34</td><td scope="row" class='awrc'><a class="awr" href="#2dc950rg2y3rq">2dc950rg2y3rq</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>54.99</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>54.99</td><td align="right" class='awrnc'>0.41</td><td align="right" class='awrnc'>544.94</td><td align="right" class='awrnc'>1.87</td><td align="right" class='awrnc'>10.09</td><td scope="row" class='awrnc'><a class="awr" href="#a4qy0pkfjru0y">a4qy0pkfjru0y</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>54.92</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>54.92</td><td align="right" class='awrc'>0.41</td><td align="right" class='awrc'>546.60</td><td align="right" class='awrc'>1.82</td><td align="right" class='awrc'>10.05</td><td scope="row" class='awrc'><a class="awr" href="#dpgskpjbnxu8n">dpgskpjbnxu8n</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>54.81</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>54.81</td><td align="right" class='awrnc'>0.41</td><td align="right" class='awrnc'>545.41</td><td align="right" class='awrnc'>1.68</td><td align="right" class='awrnc'>10.05</td><td scope="row" class='awrnc'><a class="awr" href="#527xjy66n24d6">527xjy66n24d6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="600"></a>
<h3 class="awr">SQL ordered by Gets</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> %Total - Buffer Gets	as a percentage of Total Buffer Gets </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Total Buffer Gets:	17,727,484</li>
<li class="awr">Captured SQL account for    0.4% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by buffer gets"><tr><th class="awrbg" scope="col">Buffer Gets </th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">Gets     per Exec  </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col"> %CPU</th><th class="awrbg" scope="col">	%IO</th><th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>79,495</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>79,495.00</td><td align="right" class='awrc'>0.45</td><td align="right" class='awrc'>543.16</td><td class='awrc'>2.1</td><td class='awrc'>8.8</td><td scope="row" class='awrc'><a class="awr" href="#gta39sva2c0pj">gta39sva2c0pj</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>77,938</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>77,938.00</td><td align="right" class='awrnc'>0.44</td><td align="right" class='awrnc'>543.37</td><td class='awrnc'>2.1</td><td class='awrnc'>9.3</td><td scope="row" class='awrnc'><a class="awr" href="#3ga2c5w22k8p4">3ga2c5w22k8p4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>77,813</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>77,813.00</td><td align="right" class='awrc'>0.44</td><td align="right" class='awrc'>544.91</td><td class='awrc'>2</td><td class='awrc'>7.8</td><td scope="row" class='awrc'><a class="awr" href="#f737cjs9htn1t">f737cjs9htn1t</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>77,143</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>77,143.00</td><td align="right" class='awrnc'>0.44</td><td align="right" class='awrnc'>544.30</td><td class='awrnc'>2.1</td><td class='awrnc'>9.3</td><td scope="row" class='awrnc'><a class="awr" href="#b2a4zdu00qd3v">b2a4zdu00qd3v</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>76,953</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>76,953.00</td><td align="right" class='awrc'>0.43</td><td align="right" class='awrc'>543.85</td><td class='awrc'>2</td><td class='awrc'>8.9</td><td scope="row" class='awrc'><a class="awr" href="#5v7mdgpz8yna4">5v7mdgpz8yna4</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>76,091</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>76,091.00</td><td align="right" class='awrnc'>0.43</td><td align="right" class='awrnc'>543.57</td><td class='awrnc'>2</td><td class='awrnc'>9.3</td><td scope="row" class='awrnc'><a class="awr" href="#f1g58g2a3cyvm">f1g58g2a3cyvm</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>74,795</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>74,795.00</td><td align="right" class='awrc'>0.42</td><td align="right" class='awrc'>544.77</td><td class='awrc'>2</td><td class='awrc'>8.6</td><td scope="row" class='awrc'><a class="awr" href="#2zvxtcksvbjq1">2zvxtcksvbjq1</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>74,720</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>74,720.00</td><td align="right" class='awrnc'>0.42</td><td align="right" class='awrnc'>543.24</td><td class='awrnc'>2</td><td class='awrnc'>9.3</td><td scope="row" class='awrnc'><a class="awr" href="#1ksjxx805vj29">1ksjxx805vj29</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>74,568</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>74,568.00</td><td align="right" class='awrc'>0.42</td><td align="right" class='awrc'>544.10</td><td class='awrc'>2</td><td class='awrc'>9</td><td scope="row" class='awrc'><a class="awr" href="#3kka3cf9mv6y5">3kka3cf9mv6y5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>74,111</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>74,111.00</td><td align="right" class='awrnc'>0.42</td><td align="right" class='awrnc'>544.81</td><td class='awrnc'>2</td><td class='awrnc'>8.6</td><td scope="row" class='awrnc'><a class="awr" href="#cnvn60d4ys1ym">cnvn60d4ys1ym</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="700"></a>
<h3 class="awr">SQL ordered by Reads</h3>
<ul>
<li class="awr"> %Total - Physical Reads as a percentage of Total Disk Reads </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Total Disk Reads:      14,932,774</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by physical reads"><tr><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">Reads	  per Exec  </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>67,077</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>67,077.00</td><td align="right" class='awrc'>0.45</td><td align="right" class='awrc'>544.91</td><td align="right" class='awrc'>2.05</td><td align="right" class='awrc'>7.79</td><td scope="row" class='awrc'><a class="awr" href="#f737cjs9htn1t">f737cjs9htn1t</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>64,150</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>64,150.00</td><td align="right" class='awrnc'>0.43</td><td align="right" class='awrnc'>543.16</td><td align="right" class='awrnc'>2.06</td><td align="right" class='awrnc'>8.84</td><td scope="row" class='awrnc'><a class="awr" href="#gta39sva2c0pj">gta39sva2c0pj</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>63,951</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>63,951.00</td><td align="right" class='awrc'>0.43</td><td align="right" class='awrc'>544.30</td><td align="right" class='awrc'>2.06</td><td align="right" class='awrc'>9.32</td><td scope="row" class='awrc'><a class="awr" href="#b2a4zdu00qd3v">b2a4zdu00qd3v</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>63,773</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>63,773.00</td><td align="right" class='awrnc'>0.43</td><td align="right" class='awrnc'>543.37</td><td align="right" class='awrnc'>2.07</td><td align="right" class='awrnc'>9.26</td><td scope="row" class='awrnc'><a class="awr" href="#3ga2c5w22k8p4">3ga2c5w22k8p4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>63,337</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>63,337.00</td><td align="right" class='awrc'>0.42</td><td align="right" class='awrc'>544.18</td><td align="right" class='awrc'>2.03</td><td align="right" class='awrc'>11.14</td><td scope="row" class='awrc'><a class="awr" href="#gdsqn03xtayhg">gdsqn03xtayhg</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>63,304</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>63,304.00</td><td align="right" class='awrnc'>0.42</td><td align="right" class='awrnc'>544.09</td><td align="right" class='awrnc'>2.05</td><td align="right" class='awrnc'>7.70</td><td scope="row" class='awrnc'><a class="awr" href="#1hh6k5cdprk6r">1hh6k5cdprk6r</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>63,017</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>63,017.00</td><td align="right" class='awrc'>0.42</td><td align="right" class='awrc'>544.61</td><td align="right" class='awrc'>2.03</td><td align="right" class='awrc'>10.87</td><td scope="row" class='awrc'><a class="awr" href="#4zg5m4p0nhv8x">4zg5m4p0nhv8x</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>62,960</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>62,960.00</td><td align="right" class='awrnc'>0.42</td><td align="right" class='awrnc'>544.81</td><td align="right" class='awrnc'>2.03</td><td align="right" class='awrnc'>8.62</td><td scope="row" class='awrnc'><a class="awr" href="#cnvn60d4ys1ym">cnvn60d4ys1ym</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>62,882</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>62,882.00</td><td align="right" class='awrc'>0.42</td><td align="right" class='awrc'>545.18</td><td align="right" class='awrc'>2.01</td><td align="right" class='awrc'>8.61</td><td scope="row" class='awrc'><a class="awr" href="#b44btzb64d14v">b44btzb64d14v</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>62,879</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>62,879.00</td><td align="right" class='awrnc'>0.42</td><td align="right" class='awrnc'>543.24</td><td align="right" class='awrnc'>2.04</td><td align="right" class='awrnc'>9.27</td><td scope="row" class='awrnc'><a class="awr" href="#1ksjxx805vj29">1ksjxx805vj29</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="740"></a>
<h3 class="awr">SQL ordered by Physical Reads (UnOptimized)</h3>
<ul>
<li class="awr"> UnOptimized Read Reqs = Physical Read Reqs -	    (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile) </li>
<li class="awr"> %Opt	- Optimized Reads as percentage of SQL Read Requests </li>
<li class="awr"> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs</li>
<li class="awr">Total Physical Read Requests:	   14,932,644</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
<li class="awr">Total UnOptimized Read Requests:      14,932,644</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
<li class="awr">Total Optimized Read Requests:		     1</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by unoptimized read requests"><tr><th class="awrbg" scope="col">UnOptimized Read Reqs</th><th class="awrbg" scope="col">Physical  Read Reqs</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">UnOptimized Reqs per Exec</th><th class="awrbg" scope="col">%Opt</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>67,077</td><td align="right" class='awrc'>67,077</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>67,077.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.45</td><td scope="row" class='awrc'><a class="awr" href="#f737cjs9htn1t">f737cjs9htn1t</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>64,150</td><td align="right" class='awrnc'>64,150</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>64,150.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.43</td><td scope="row" class='awrnc'><a class="awr" href="#gta39sva2c0pj">gta39sva2c0pj</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>63,951</td><td align="right" class='awrc'>63,951</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>63,951.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.43</td><td scope="row" class='awrc'><a class="awr" href="#b2a4zdu00qd3v">b2a4zdu00qd3v</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>63,773</td><td align="right" class='awrnc'>63,773</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>63,773.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.43</td><td scope="row" class='awrnc'><a class="awr" href="#3ga2c5w22k8p4">3ga2c5w22k8p4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>63,337</td><td align="right" class='awrc'>63,337</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>63,337.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.42</td><td scope="row" class='awrc'><a class="awr" href="#gdsqn03xtayhg">gdsqn03xtayhg</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>63,304</td><td align="right" class='awrnc'>63,304</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>63,304.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.42</td><td scope="row" class='awrnc'><a class="awr" href="#1hh6k5cdprk6r">1hh6k5cdprk6r</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>63,017</td><td align="right" class='awrc'>63,017</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>63,017.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.42</td><td scope="row" class='awrc'><a class="awr" href="#4zg5m4p0nhv8x">4zg5m4p0nhv8x</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>62,960</td><td align="right" class='awrnc'>62,960</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>62,960.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.42</td><td scope="row" class='awrnc'><a class="awr" href="#cnvn60d4ys1ym">cnvn60d4ys1ym</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>62,882</td><td align="right" class='awrc'>62,882</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>62,882.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.42</td><td scope="row" class='awrc'><a class="awr" href="#b44btzb64d14v">b44btzb64d14v</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>62,879</td><td align="right" class='awrnc'>62,879</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>62,879.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.42</td><td scope="row" class='awrnc'><a class="awr" href="#1ksjxx805vj29">1ksjxx805vj29</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="800"></a>
<h3 class="awr">SQL ordered by Executions</h3>
<ul>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Total Executions:	  279,199</li>
<li class="awr">Captured SQL account for    4.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by number of executions"><tr><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">Rows Processed</th><th class="awrbg" scope="col">Rows per Exec</th><th class="awrbg" scope="col">Elapsed	Time (s)</th><th class="awrbg" scope="col"> %CPU</th><th class="awrbg" scope="col">  %IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>5,120</td><td align="right" class='awrc'>4,857</td><td align="right" class='awrc'>0.95</td><td align="right" class='awrc'>0.40</td><td class='awrc'>95.4</td><td class='awrc'>0</td><td scope="row" class='awrc'><a class="awr" href="#24djtk7r8fz33">24djtk7r8fz33</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>update svcobj_access$ set acce...</td></tr>
<tr><td align="right" class='awrnc'>1,680</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.13</td><td class='awrnc'>93.9</td><td class='awrnc'>1.3</td><td scope="row" class='awrnc'><a class="awr" href="#2p9fv35c7zxtg">2p9fv35c7zxtg</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select /* KSXM:LOAD_DML_INF */...</td></tr>
<tr><td align="right" class='awrc'>1,022</td><td align="right" class='awrc'>197</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.04</td><td class='awrc'>100.3</td><td class='awrc'>0</td><td scope="row" class='awrc'><a class="awr" href="#87gaftwrm2h68">87gaftwrm2h68</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select o.owner#, o.name, o.nam...</td></tr>
<tr><td align="right" class='awrnc'>425</td><td align="right" class='awrnc'>417</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>0.17</td><td class='awrnc'>43.4</td><td class='awrnc'>1.9</td><td scope="row" class='awrnc'><a class="awr" href="#9tgj4g8y4rwy8">9tgj4g8y4rwy8</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select type#, blocks, extents,...</td></tr>
<tr><td align="right" class='awrc'>361</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.05</td><td class='awrc'>87.2</td><td class='awrc'>0</td><td scope="row" class='awrc'><a class="awr" href="#0gx3b09qrx9f5">0gx3b09qrx9f5</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select obj#, index# from oid$ ...</td></tr>
<tr><td align="right" class='awrnc'>325</td><td align="right" class='awrnc'>300</td><td align="right" class='awrnc'>0.92</td><td align="right" class='awrnc'>0.03</td><td class='awrnc'>87.5</td><td class='awrnc'>4.3</td><td scope="row" class='awrnc'><a class="awr" href="#acmvv4fhdc9zh">acmvv4fhdc9zh</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select obj#, type#, ctime, mti...</td></tr>
<tr><td align="right" class='awrc'>320</td><td align="right" class='awrc'>320</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.08</td><td class='awrc'>97.7</td><td class='awrc'>0</td><td scope="row" class='awrc'><a class="awr" href="#3dbzmtf9ahvzt">3dbzmtf9ahvzt</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>merge /* KSXM:OPTIM_DML_INF */...</td></tr>
<tr><td align="right" class='awrnc'>263</td><td align="right" class='awrnc'>263</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0.02</td><td class='awrnc'>99.7</td><td class='awrnc'>0</td><td scope="row" class='awrnc'><a class="awr" href="#7hc9uvs2016m6">7hc9uvs2016m6</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>insert into svcobj_access$(nam...</td></tr>
<tr><td align="right" class='awrc'>249</td><td align="right" class='awrc'>249</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.05</td><td class='awrc'>89.3</td><td class='awrc'>0</td><td scope="row" class='awrc'><a class="awr" href="#5cu0x10yu88sw">5cu0x10yu88sw</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>merge into sys.wri$_index_usag...</td></tr>
<tr><td align="right" class='awrnc'>249</td><td align="right" class='awrnc'>249</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0.25</td><td class='awrnc'>52</td><td class='awrnc'>1.4</td><td scope="row" class='awrnc'><a class="awr" href="#9babjv8yq8ru3">9babjv8yq8ru3</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>BEGIN DBMS_OUTPUT.GET_LINES(:L...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="900"></a>
<h3 class="awr">SQL ordered by Parse Calls</h3>
<ul>
<li class="awr">Total Parse Calls:	    11,400</li>
<li class="awr">Captured SQL account for   81.5% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by number of parse calls"><tr><th class="awrbg" scope="col">Parse Calls</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">% Total Parses</th><th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>5,120</td><td align="right" class='awrc'>5,120</td><td align="right" class='awrc'>44.91</td><td scope="row" class='awrc'><a class="awr" href="#24djtk7r8fz33">24djtk7r8fz33</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>update svcobj_access$ set acce...</td></tr>
<tr><td align="right" class='awrnc'>1,680</td><td align="right" class='awrnc'>1,680</td><td align="right" class='awrnc'>14.74</td><td scope="row" class='awrnc'><a class="awr" href="#2p9fv35c7zxtg">2p9fv35c7zxtg</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select /* KSXM:LOAD_DML_INF */...</td></tr>
<tr><td align="right" class='awrc'>320</td><td align="right" class='awrc'>320</td><td align="right" class='awrc'>2.81</td><td scope="row" class='awrc'><a class="awr" href="#3dbzmtf9ahvzt">3dbzmtf9ahvzt</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>merge /* KSXM:OPTIM_DML_INF */...</td></tr>
<tr><td align="right" class='awrnc'>263</td><td align="right" class='awrnc'>263</td><td align="right" class='awrnc'>2.31</td><td scope="row" class='awrnc'><a class="awr" href="#7hc9uvs2016m6">7hc9uvs2016m6</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>insert into svcobj_access$(nam...</td></tr>
<tr><td align="right" class='awrc'>249</td><td align="right" class='awrc'>249</td><td align="right" class='awrc'>2.18</td><td scope="row" class='awrc'><a class="awr" href="#5cu0x10yu88sw">5cu0x10yu88sw</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>merge into sys.wri$_index_usag...</td></tr>
<tr><td align="right" class='awrnc'>249</td><td align="right" class='awrnc'>249</td><td align="right" class='awrnc'>2.18</td><td scope="row" class='awrnc'><a class="awr" href="#9babjv8yq8ru3">9babjv8yq8ru3</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>BEGIN DBMS_OUTPUT.GET_LINES(:L...</td></tr>
<tr><td align="right" class='awrc'>163</td><td align="right" class='awrc'>425</td><td align="right" class='awrc'>1.43</td><td scope="row" class='awrc'><a class="awr" href="#9tgj4g8y4rwy8">9tgj4g8y4rwy8</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select type#, blocks, extents,...</td></tr>
<tr><td align="right" class='awrnc'>148</td><td align="right" class='awrnc'>361</td><td align="right" class='awrnc'>1.30</td><td scope="row" class='awrnc'><a class="awr" href="#0gx3b09qrx9f5">0gx3b09qrx9f5</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select obj#, index# from oid$ ...</td></tr>
<tr><td align="right" class='awrc'>115</td><td align="right" class='awrc'>115</td><td align="right" class='awrc'>1.01</td><td scope="row" class='awrc'><a class="awr" href="#f80h0xb1qvbsk">f80h0xb1qvbsk</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>SELECT sys.wri$_adv_seq_msggro...</td></tr>
<tr><td align="right" class='awrnc'>103</td><td align="right" class='awrnc'>103</td><td align="right" class='awrnc'>0.90</td><td scope="row" class='awrnc'><a class="awr" href="#d96u6hzrz93x5">d96u6hzrz93x5</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>select con_id from v$container...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1000"></a>
<h3 class="awr">SQL ordered by Sharable Memory</h3>
<ul>
<li class="awr">Only Statements with Sharable Memory greater than 1048576 are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by amount of shared memory used"><tr><th class="awrbg" scope="col">Sharable Mem (b)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">% Total</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>70,580,784</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1.48</td><td scope="row" class='awrc'><a class="awr" href="#3q5nfyq3x1gu4">3q5nfyq3x1gu4</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>INSERT /*+ APPEND */ INTO cf2 ...</td></tr>
<tr><td align="right" class='awrnc'>17,597,897</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.37</td><td scope="row" class='awrnc'><a class="awr" href="#9yv5dwv8k0awg">9yv5dwv8k0awg</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>WITH MONITOR_DATA AS (SELECT I...</td></tr>
<tr><td align="right" class='awrc'>9,102,128</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0.19</td><td scope="row" class='awrc'><a class="awr" href="#cytuv95rat5h1">cytuv95rat5h1</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>LOCK TABLE &quot;CF1&quot; IN EXCLUSIVE ...</td></tr>
<tr><td align="right" class='awrnc'>8,067,600</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0.17</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>7,057,728</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0.15</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>4,177,876</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.09</td><td scope="row" class='awrnc'><a class="awr" href="#atwuyuvqkf27w">atwuyuvqkf27w</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>SELECT /*+ OPT_PARAM('_fix_con...</td></tr>
<tr><td align="right" class='awrc'>1,192,748</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.02</td><td scope="row" class='awrc'><a class="awr" href="#fg11facbfjwvx">fg11facbfjwvx</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'> SELECT /*+ no_monitor leading...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1100"></a>
<h3 class="awr">SQL ordered by Version Count</h3>
<ul>
<li class="awr">Only Statements with Version Count greater than 20 are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by version counts"><tr><th class="awrbg" scope="col">Version Count </th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>940</td><td align="right" class='awrc'>&#160;</td><td scope="row" class='awrc'><a class="awr" href="#cytuv95rat5h1">cytuv95rat5h1</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>LOCK TABLE &quot;CF1&quot; IN EXCLUSIVE ...</td></tr>
<tr><td align="right" class='awrnc'>696</td><td align="right" class='awrnc'>&#160;</td><td scope="row" class='awrnc'><a class="awr" href="#3q5nfyq3x1gu4">3q5nfyq3x1gu4</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>INSERT /*+ APPEND */ INTO cf2 ...</td></tr>
<tr><td align="right" class='awrc'>249</td><td align="right" class='awrc'>&#160;</td><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'>249</td><td align="right" class='awrnc'>&#160;</td><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1150"></a>
<h3 class="awr">SQL ordered by Cluster Wait Time</h3>
<ul>
<li class="awr"> %Total - Cluster Time	as a percentage of Total Cluster Wait Time </li>
<li class="awr"> %Clu	- Cluster Time	as a percentage of Elapsed Time </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time </li>
<li class="awr"> Only SQL with Cluster Wait Time &gt; .005 seconds is reported</li>
<li class="awr">Total Cluster Wait Time (s):	     126,171</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by cluster wait time"><tr><th class="awrbg" scope="col">Cluster Wait Time (s)</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed Time(s)</th><th class="awrbg" scope="col">%Clu</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>497.57</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>544.91</td><td align="right" class='awrc'>91.31</td><td align="right" class='awrc'>2.05</td><td align="right" class='awrc'>7.79</td><td scope="row" class='awrc'><a class="awr" href="#f737cjs9htn1t">f737cjs9htn1t</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>496.59</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>544.53</td><td align="right" class='awrnc'>91.20</td><td align="right" class='awrnc'>1.97</td><td align="right" class='awrnc'>7.36</td><td scope="row" class='awrnc'><a class="awr" href="#96mhm2vpjm2m8">96mhm2vpjm2m8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>495.46</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>543.99</td><td align="right" class='awrc'>91.08</td><td align="right" class='awrc'>2.00</td><td align="right" class='awrc'>7.56</td><td scope="row" class='awrc'><a class="awr" href="#bch1n63zxk221">bch1n63zxk221</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>494.52</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>544.09</td><td align="right" class='awrnc'>90.89</td><td align="right" class='awrnc'>2.05</td><td align="right" class='awrnc'>7.70</td><td scope="row" class='awrnc'><a class="awr" href="#1hh6k5cdprk6r">1hh6k5cdprk6r</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>494.31</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>545.67</td><td align="right" class='awrc'>90.59</td><td align="right" class='awrc'>1.92</td><td align="right" class='awrc'>8.06</td><td scope="row" class='awrc'><a class="awr" href="#dnznjspycqrhh">dnznjspycqrhh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>492.31</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>544.64</td><td align="right" class='awrnc'>90.39</td><td align="right" class='awrnc'>1.97</td><td align="right" class='awrnc'>8.42</td><td scope="row" class='awrnc'><a class="awr" href="#50zr91aba0jmn">50zr91aba0jmn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>492.13</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>546.58</td><td align="right" class='awrc'>90.04</td><td align="right" class='awrc'>1.78</td><td align="right" class='awrc'>8.66</td><td scope="row" class='awrc'><a class="awr" href="#58vuprsfnw7af">58vuprsfnw7af</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>491.74</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>544.91</td><td align="right" class='awrnc'>90.24</td><td align="right" class='awrnc'>1.79</td><td align="right" class='awrnc'>8.49</td><td scope="row" class='awrnc'><a class="awr" href="#98xtrn0z3vxbw">98xtrn0z3vxbw</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>490.65</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>544.98</td><td align="right" class='awrc'>90.03</td><td align="right" class='awrc'>1.81</td><td align="right" class='awrc'>8.57</td><td scope="row" class='awrc'><a class="awr" href="#fb4bu20sm75kp">fb4bu20sm75kp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>490.65</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>544.77</td><td align="right" class='awrnc'>90.07</td><td align="right" class='awrnc'>1.98</td><td align="right" class='awrnc'>8.63</td><td scope="row" class='awrnc'><a class="awr" href="#2zvxtcksvbjq1">2zvxtcksvbjq1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>490.24</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>545.16</td><td align="right" class='awrc'>89.93</td><td align="right" class='awrc'>1.84</td><td align="right" class='awrc'>8.79</td><td scope="row" class='awrc'><a class="awr" href="#dr1s7n6r0tysn">dr1s7n6r0tysn</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>489.88</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>545.18</td><td align="right" class='awrnc'>89.86</td><td align="right" class='awrnc'>2.01</td><td align="right" class='awrnc'>8.61</td><td scope="row" class='awrnc'><a class="awr" href="#b44btzb64d14v">b44btzb64d14v</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>489.63</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>545.19</td><td align="right" class='awrc'>89.81</td><td align="right" class='awrc'>1.89</td><td align="right" class='awrc'>8.79</td><td scope="row" class='awrc'><a class="awr" href="#asqv36zpxvan4">asqv36zpxvan4</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>489.04</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>543.85</td><td align="right" class='awrnc'>89.92</td><td align="right" class='awrnc'>1.98</td><td align="right" class='awrnc'>8.88</td><td scope="row" class='awrnc'><a class="awr" href="#5v7mdgpz8yna4">5v7mdgpz8yna4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>488.41</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>543.81</td><td align="right" class='awrc'>89.81</td><td align="right" class='awrc'>2.00</td><td align="right" class='awrc'>9.10</td><td scope="row" class='awrc'><a class="awr" href="#9gc8rpw0b3fxs">9gc8rpw0b3fxs</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>488.30</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>542.61</td><td align="right" class='awrnc'>89.99</td><td align="right" class='awrnc'>1.99</td><td align="right" class='awrnc'>7.98</td><td scope="row" class='awrnc'><a class="awr" href="#9pxprtmxz7nuc">9pxprtmxz7nuc</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>488.22</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>544.81</td><td align="right" class='awrc'>89.61</td><td align="right" class='awrc'>2.03</td><td align="right" class='awrc'>8.62</td><td scope="row" class='awrc'><a class="awr" href="#cnvn60d4ys1ym">cnvn60d4ys1ym</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>488.09</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>544.10</td><td align="right" class='awrnc'>89.70</td><td align="right" class='awrnc'>1.98</td><td align="right" class='awrnc'>9.05</td><td scope="row" class='awrnc'><a class="awr" href="#3kka3cf9mv6y5">3kka3cf9mv6y5</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>488.03</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>545.11</td><td align="right" class='awrc'>89.53</td><td align="right" class='awrc'>1.89</td><td align="right" class='awrc'>9.12</td><td scope="row" class='awrc'><a class="awr" href="#87mtr3gbck7dm">87mtr3gbck7dm</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>487.71</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>543.37</td><td align="right" class='awrnc'>89.76</td><td align="right" class='awrnc'>2.07</td><td align="right" class='awrnc'>9.26</td><td scope="row" class='awrnc'><a class="awr" href="#3ga2c5w22k8p4">3ga2c5w22k8p4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>487.58</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>545.09</td><td align="right" class='awrc'>89.45</td><td align="right" class='awrc'>1.86</td><td align="right" class='awrc'>9.46</td><td scope="row" class='awrc'><a class="awr" href="#5vyhw99fk7s8b">5vyhw99fk7s8b</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>487.46</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>545.81</td><td align="right" class='awrnc'>89.31</td><td align="right" class='awrnc'>1.85</td><td align="right" class='awrnc'>9.11</td><td scope="row" class='awrnc'><a class="awr" href="#59u1h8q0dn7kr">59u1h8q0dn7kr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>486.74</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>545.77</td><td align="right" class='awrc'>89.18</td><td align="right" class='awrc'>1.93</td><td align="right" class='awrc'>9.17</td><td scope="row" class='awrc'><a class="awr" href="#bp4mjh3dc1y4y">bp4mjh3dc1y4y</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>486.55</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>542.61</td><td align="right" class='awrnc'>89.67</td><td align="right" class='awrnc'>2.01</td><td align="right" class='awrnc'>8.82</td><td scope="row" class='awrnc'><a class="awr" href="#57n9vv9q5q4md">57n9vv9q5q4md</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>486.40</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>546.76</td><td align="right" class='awrc'>88.96</td><td align="right" class='awrc'>1.92</td><td align="right" class='awrc'>9.49</td><td scope="row" class='awrc'><a class="awr" href="#fpx8qau059b6k">fpx8qau059b6k</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>486.22</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>545.28</td><td align="right" class='awrnc'>89.17</td><td align="right" class='awrnc'>1.78</td><td align="right" class='awrnc'>9.25</td><td scope="row" class='awrnc'><a class="awr" href="#5mqxkupnn07c1">5mqxkupnn07c1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>486.16</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>544.93</td><td align="right" class='awrc'>89.22</td><td align="right" class='awrc'>1.79</td><td align="right" class='awrc'>8.75</td><td scope="row" class='awrc'><a class="awr" href="#0sfyku115gc35">0sfyku115gc35</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>485.62</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>544.90</td><td align="right" class='awrnc'>89.12</td><td align="right" class='awrnc'>1.89</td><td align="right" class='awrnc'>9.80</td><td scope="row" class='awrnc'><a class="awr" href="#5hkjnb8twmhc4">5hkjnb8twmhc4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>485.42</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.38</td><td align="right" class='awrc'>543.24</td><td align="right" class='awrc'>89.36</td><td align="right" class='awrc'>2.04</td><td align="right" class='awrc'>9.27</td><td scope="row" class='awrc'><a class="awr" href="#1ksjxx805vj29">1ksjxx805vj29</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>485.19</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>545.42</td><td align="right" class='awrnc'>88.96</td><td align="right" class='awrnc'>1.96</td><td align="right" class='awrnc'>9.94</td><td scope="row" class='awrnc'><a class="awr" href="#grnj9m41xzwyv">grnj9m41xzwyv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>485.04</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.38</td><td align="right" class='awrc'>543.16</td><td align="right" class='awrc'>89.30</td><td align="right" class='awrc'>2.06</td><td align="right" class='awrc'>8.84</td><td scope="row" class='awrc'><a class="awr" href="#gta39sva2c0pj">gta39sva2c0pj</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>484.53</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>543.57</td><td align="right" class='awrnc'>89.14</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnc'>9.30</td><td scope="row" class='awrnc'><a class="awr" href="#f1g58g2a3cyvm">f1g58g2a3cyvm</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>484.51</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.38</td><td align="right" class='awrc'>544.30</td><td align="right" class='awrc'>89.01</td><td align="right" class='awrc'>2.06</td><td align="right" class='awrc'>9.32</td><td scope="row" class='awrc'><a class="awr" href="#b2a4zdu00qd3v">b2a4zdu00qd3v</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>484.33</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>544.99</td><td align="right" class='awrnc'>88.87</td><td align="right" class='awrnc'>1.90</td><td align="right" class='awrnc'>9.49</td><td scope="row" class='awrnc'><a class="awr" href="#15q1bvqf7bwak">15q1bvqf7bwak</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>484.23</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.38</td><td align="right" class='awrc'>543.32</td><td align="right" class='awrc'>89.12</td><td align="right" class='awrc'>1.98</td><td align="right" class='awrc'>9.31</td><td scope="row" class='awrc'><a class="awr" href="#15mtdbsgq41ny">15mtdbsgq41ny</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>483.89</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>546.60</td><td align="right" class='awrnc'>88.53</td><td align="right" class='awrnc'>1.82</td><td align="right" class='awrnc'>10.05</td><td scope="row" class='awrnc'><a class="awr" href="#dpgskpjbnxu8n">dpgskpjbnxu8n</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>483.88</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.38</td><td align="right" class='awrc'>543.09</td><td align="right" class='awrc'>89.10</td><td align="right" class='awrc'>1.98</td><td align="right" class='awrc'>9.39</td><td scope="row" class='awrc'><a class="awr" href="#f4pt6jq32984z">f4pt6jq32984z</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>483.62</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>545.82</td><td align="right" class='awrnc'>88.60</td><td align="right" class='awrnc'>1.86</td><td align="right" class='awrnc'>9.87</td><td scope="row" class='awrnc'><a class="awr" href="#dk7wndm4trmxm">dk7wndm4trmxm</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>483.08</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.38</td><td align="right" class='awrc'>545.36</td><td align="right" class='awrc'>88.58</td><td align="right" class='awrc'>1.76</td><td align="right" class='awrc'>10.30</td><td scope="row" class='awrc'><a class="awr" href="#9wdas3v8sxd2f">9wdas3v8sxd2f</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>482.61</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>542.72</td><td align="right" class='awrnc'>88.93</td><td align="right" class='awrnc'>2.02</td><td align="right" class='awrnc'>9.59</td><td scope="row" class='awrnc'><a class="awr" href="#5mb968t41yxfr">5mb968t41yxfr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>482.01</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.38</td><td align="right" class='awrc'>544.88</td><td align="right" class='awrc'>88.46</td><td align="right" class='awrc'>1.77</td><td align="right" class='awrc'>10.00</td><td scope="row" class='awrc'><a class="awr" href="#8abaypcq9z8hg">8abaypcq9z8hg</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>481.82</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>545.41</td><td align="right" class='awrnc'>88.34</td><td align="right" class='awrnc'>1.68</td><td align="right" class='awrnc'>10.05</td><td scope="row" class='awrnc'><a class="awr" href="#527xjy66n24d6">527xjy66n24d6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>481.65</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.38</td><td align="right" class='awrc'>543.99</td><td align="right" class='awrc'>88.54</td><td align="right" class='awrc'>2.01</td><td align="right" class='awrc'>9.93</td><td scope="row" class='awrc'><a class="awr" href="#axz2uh61fq467">axz2uh61fq467</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>481.61</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>545.17</td><td align="right" class='awrnc'>88.34</td><td align="right" class='awrnc'>1.80</td><td align="right" class='awrnc'>10.41</td><td scope="row" class='awrnc'><a class="awr" href="#f69ubn526tz3u">f69ubn526tz3u</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>480.92</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.38</td><td align="right" class='awrc'>545.15</td><td align="right" class='awrc'>88.22</td><td align="right" class='awrc'>1.69</td><td align="right" class='awrc'>9.75</td><td scope="row" class='awrc'><a class="awr" href="#1967g3sxuhkdf">1967g3sxuhkdf</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>480.38</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>543.77</td><td align="right" class='awrnc'>88.34</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnc'>9.59</td><td scope="row" class='awrnc'><a class="awr" href="#dgcrydsuha4r3">dgcrydsuha4r3</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>479.69</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.38</td><td align="right" class='awrc'>542.84</td><td align="right" class='awrc'>88.37</td><td align="right" class='awrc'>1.98</td><td align="right" class='awrc'>10.34</td><td scope="row" class='awrc'><a class="awr" href="#2dc950rg2y3rq">2dc950rg2y3rq</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>479.43</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>544.90</td><td align="right" class='awrnc'>87.98</td><td align="right" class='awrnc'>1.79</td><td align="right" class='awrnc'>10.30</td><td scope="row" class='awrnc'><a class="awr" href="#0qjstdgx3hhpf">0qjstdgx3hhpf</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>479.20</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.38</td><td align="right" class='awrc'>544.91</td><td align="right" class='awrc'>87.94</td><td align="right" class='awrc'>1.78</td><td align="right" class='awrc'>9.85</td><td scope="row" class='awrc'><a class="awr" href="#ga8nw4v3u99km">ga8nw4v3u99km</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>478.48</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>544.61</td><td align="right" class='awrnc'>87.86</td><td align="right" class='awrnc'>2.03</td><td align="right" class='awrnc'>10.87</td><td scope="row" class='awrnc'><a class="awr" href="#4zg5m4p0nhv8x">4zg5m4p0nhv8x</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>477.51</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.38</td><td align="right" class='awrc'>544.18</td><td align="right" class='awrc'>87.75</td><td align="right" class='awrc'>2.03</td><td align="right" class='awrc'>11.14</td><td scope="row" class='awrc'><a class="awr" href="#gdsqn03xtayhg">gdsqn03xtayhg</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>476.28</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>544.94</td><td align="right" class='awrnc'>87.40</td><td align="right" class='awrnc'>1.87</td><td align="right" class='awrnc'>10.09</td><td scope="row" class='awrnc'><a class="awr" href="#a4qy0pkfjru0y">a4qy0pkfjru0y</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>473.08</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.37</td><td align="right" class='awrc'>542.69</td><td align="right" class='awrc'>87.17</td><td align="right" class='awrc'>1.98</td><td align="right" class='awrc'>11.33</td><td scope="row" class='awrc'><a class="awr" href="#3jkjssn33np0t">3jkjssn33np0t</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>35.06</td><td align="right" class='awrnc'>101</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>59.20</td><td align="right" class='awrnc'>59.22</td><td align="right" class='awrnc'>1.68</td><td align="right" class='awrnc'>6.36</td><td scope="row" class='awrnc'><a class="awr" href="#8fgdzmkchnn1a">8fgdzmkchnn1a</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>INSERT /*+ APPEND LEADING(@&quot;SE...</td></tr>
<tr><td align="right" class='awrc'>0.62</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.67</td><td align="right" class='awrc'>92.07</td><td align="right" class='awrc'>5.68</td><td align="right" class='awrc'>1.88</td><td scope="row" class='awrc'><a class="awr" href="#6s1ku6bs9a8xb">6s1ku6bs9a8xb</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'> WITH ash as (SELECT ash.event...</td></tr>
<tr><td align="right" class='awrnc'>0.47</td><td align="right" class='awrnc'>91</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.50</td><td align="right" class='awrnc'>94.82</td><td align="right" class='awrnc'>6.00</td><td align="right" class='awrnc'>1.59</td><td scope="row" class='awrnc'><a class="awr" href="#f7xnvp44nukp7">f7xnvp44nukp7</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>insert into wrm$_snapshot_deta...</td></tr>
<tr><td align="right" class='awrc'>0.21</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.26</td><td align="right" class='awrc'>80.49</td><td align="right" class='awrc'>14.25</td><td align="right" class='awrc'>6.73</td><td scope="row" class='awrc'><a class="awr" href="#8swypbbr0m372">8swypbbr0m372</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select order#, columns, types ...</td></tr>
<tr><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>249</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>36.69</td><td align="right" class='awrnc'>51.99</td><td align="right" class='awrnc'>1.39</td><td scope="row" class='awrnc'><a class="awr" href="#9babjv8yq8ru3">9babjv8yq8ru3</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>BEGIN DBMS_OUTPUT.GET_LINES(:L...</td></tr>
<tr><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>57.54</td><td align="right" class='awrc'>21.90</td><td align="right" class='awrc'>23.78</td><td scope="row" class='awrc'><a class="awr" href="#3un99a0zwp4vd">3un99a0zwp4vd</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select owner#, name, namespace...</td></tr>
<tr><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>38</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>82.74</td><td align="right" class='awrnc'>11.98</td><td align="right" class='awrnc'>6.06</td><td scope="row" class='awrnc'><a class="awr" href="#6wvzvgvg6qsyb">6wvzvgvg6qsyb</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>INSERT INTO wri$_adv_findings ...</td></tr>
<tr><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>18.45</td><td align="right" class='awrc'>0.45</td><td align="right" class='awrc'>53.86</td><td align="right" class='awrc'>6.97</td><td scope="row" class='awrc'><a class="awr" href="#9yv5dwv8k0awg">9yv5dwv8k0awg</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>WITH MONITOR_DATA AS (SELECT I...</td></tr>
<tr><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>425</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>28.58</td><td align="right" class='awrnc'>43.35</td><td align="right" class='awrnc'>1.90</td><td scope="row" class='awrnc'><a class="awr" href="#9tgj4g8y4rwy8">9tgj4g8y4rwy8</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select type#, blocks, extents,...</td></tr>
<tr><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>5.88</td><td align="right" class='awrc'>10.79</td><td align="right" class='awrc'>87.58</td><td scope="row" class='awrc'><a class="awr" href="#03guhbfpak0w7">03guhbfpak0w7</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select /*+ index(idl_ub1$ i_id...</td></tr>
<tr><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>66.63</td><td align="right" class='awrnc'>33.12</td><td align="right" class='awrnc'>1.99</td><td scope="row" class='awrnc'><a class="awr" href="#42mkua34ay6bc">42mkua34ay6bc</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>INSERT INTO wri$_adv_addm_fdg ...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="99997"></a>
<p />
<h3 class="awr">Complete List of SQL Text</h3><p />
<table border="0" class="tdiff" summary="This table displays the text of the SQL statements which have been
      referred to in the report">
<tr><th class="awrbg" scope="col">SQL Id</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="03guhbfpak0w7"></a>03guhbfpak0w7</td><td class='awrc'><pre_sqltext class="awr">select /*+ index(idl_ub1$ i_idl_ub11) */ piece#, length, piece from idl_ub1$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="0gx3b09qrx9f5"></a>0gx3b09qrx9f5</td><td class='awrnc'><pre_sqltext class="awr">select obj#, index# from oid$ where user#=:1 and oid$=:2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="0qjstdgx3hhpf"></a>0qjstdgx3hhpf</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '287';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="0sfyku115gc35"></a>0sfyku115gc35</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '139';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="15mtdbsgq41ny"></a>15mtdbsgq41ny</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '55';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="15q1bvqf7bwak"></a>15q1bvqf7bwak</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '258';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="1967g3sxuhkdf"></a>1967g3sxuhkdf</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '383';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="1hh6k5cdprk6r"></a>1hh6k5cdprk6r</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '471';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="1ksjxx805vj29"></a>1ksjxx805vj29</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '168';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="24djtk7r8fz33"></a>24djtk7r8fz33</td><td class='awrnc'><pre_sqltext class="awr">update svcobj_access$ set accesses = :5,  inc_no = :6 where name = :1 AND pdb = :2 AND tsn = :3 AND objid = :4</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="2dc950rg2y3rq"></a>2dc950rg2y3rq</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '270';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="2p9fv35c7zxtg"></a>2p9fv35c7zxtg</td><td class='awrnc'><pre_sqltext class="awr">select /* KSXM:LOAD_DML_INF *//*+ leading(o) index(m) use_nl(m) */	     nvl(m.inserts,  0) ins,  nvl(m.updates,  0) upd,  nvl(m.deletes,  0) del,		 nvl(m.drop_segments,  0) dropseg,  nvl(m.flags,  0) flags,			   nvl(rowcnt,	0) rowcnt,  o.pobjn pobjn					   from 									 (select :objn objn,  0 pobjn,	rowcnt						  from tab$ t									where t.obj# = :objn							      union all 								    select :objn objn,	tp.bo# pobjn,  rowcnt					    from tabpart$ tp								  where tp.obj# = :objn 							union all								      select :objn objn,  tcp.bo# pobjn,  rowcnt				      from tabcompart$ tcp							    where tcp.obj# = :objn							  union all									select :objn objn,  tsp.pobj# pobjn,  rowcnt					from tabsubpart$ tsp							      where tsp.obj# = :objn) o,  sys.mon_mods_all$ m				    where o.objn = m.obj#(+) and rownum &lt; 2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="2zvxtcksvbjq1"></a>2zvxtcksvbjq1</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '170';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="35dumc2tpr9dv"></a>35dumc2tpr9dv</td><td class='awrnc'><pre_sqltext class="awr">UPDATE CF1 SET C2 = :B3 ,  C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 )) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3dbzmtf9ahvzt"></a>3dbzmtf9ahvzt</td><td class='awrc'><pre_sqltext class="awr">merge /* KSXM:OPTIM_DML_INF */  into sys.mon_mods_all$ m			using dual								   on (m.obj# = :objn and							  (:pobjn = 0 or							      m.obj# = :pobjn or							 m.obj# in (select obj# 							       from tabpart$								  where bo# = :pobjn and obj# = :objn					     union all									select obj#								   from tabcompart$							      where bo# = :pobjn and obj# = :objn					 union all								    select tsp.obj#							       from tabsubpart$ tsp,  tabcompart$ tcp					   where tsp.pobj# = tcp.obj#							and (tcp.bo# = :pobjn or tcp.obj# = :pobjn)				   and tsp.obj# = :objn)))				    when matched then								 update 								    set inserts = decode(:reset,  1,  0,  inserts) + :ins,			       updates = decode(:reset,  1,  0,  updates) + :upd,			      deletes = decode(:reset,	1,  0,	deletes) + :del,			     flags =  decode(:reset,  1,  0,  flags - bitand(flags,  :flag)) + :flag,	     drop_segments = decode(:reset,  1,  0,  drop_segments) + :dropseg, 	    timestamp = :time							 when NOT matched then							      insert (obj#,  inserts,  updates,  deletes,					     timestamp,  flags,  drop_segments) 				  values (:objn,  :ins,  :upd,	:del,  :time,  :flag,  :dropseg)		   where :ins != 0 or :upd != 0 or :del != 0 or :flag != 0 or :dropseg !=0</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3ga2c5w22k8p4"></a>3ga2c5w22k8p4</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '52';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3jkjssn33np0t"></a>3jkjssn33np0t</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '376';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3kka3cf9mv6y5"></a>3kka3cf9mv6y5</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '248';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3q5nfyq3x1gu4"></a>3q5nfyq3x1gu4</td><td class='awrc'><pre_sqltext class="awr">INSERT /*+ APPEND */ INTO cf2 SELECT * FROM user1.cf2 ORDER BY DBMS_RANDOM.VALUE()</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3un99a0zwp4vd"></a>3un99a0zwp4vd</td><td class='awrnc'><pre_sqltext class="awr">select owner#, name, namespace, remoteowner, linkname, p_timestamp, p_obj#,  nvl(property, 0), subname, type#, flags, d_attrs from dependency$ d,  obj$ o where d_obj#=:1 and p_obj#=obj#(+) order by order#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="42mkua34ay6bc"></a>42mkua34ay6bc</td><td class='awrc'><pre_sqltext class="awr">INSERT INTO wri$_adv_addm_fdg ( TASK_ID,  FINDING_ID,  RULE_ID,  ADDM_FDG_ID,  ADDM_SEQ,	 DATABASE_TIME,  ACTIVE_SESSIONS,  PERC_ACTIVE_SESS,	IS_AGGREGATE,  METER_LEVEL,    QUERY_TYPE,  QUERY_IS_APPROX,  QUERY_ARGS) VALUES ( :tid,  :kea_id,  :rid,  :fdg_id,  :keh_id,  :dbt,	       round(:dbt / (1000000 * :sint) ,  2),	       round(((:dbt * 100) / :total_dbt) ,  2), 	  'N',	NULL,		:aqt,  decode(:aqa,  0,  'N',  'Y'),	       decode(:aqargs,	' ',  NULL,  :aqargs)) </pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="4zg5m4p0nhv8x"></a>4zg5m4p0nhv8x</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '361';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="50zr91aba0jmn"></a>50zr91aba0jmn</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '452';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="527xjy66n24d6"></a>527xjy66n24d6</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '283';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="57n9vv9q5q4md"></a>57n9vv9q5q4md</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '445';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="58vuprsfnw7af"></a>58vuprsfnw7af</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '65';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="59u1h8q0dn7kr"></a>59u1h8q0dn7kr</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '75';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5cu0x10yu88sw"></a>5cu0x10yu88sw</td><td class='awrnc'><pre_sqltext class="awr">merge into sys.wri$_index_usage iu					     using dual 								   on (iu.obj# = :objn) 						       when matched then							     update									  set iu.total_access_count = iu.total_access_count + :ns,			    iu.total_rows_returned = iu.total_rows_returned + :rr,			  iu.total_exec_count = iu.total_exec_count + :ne,				iu.bucket_0_access_count = iu.bucket_0_access_count + :nsh0,		      iu.bucket_1_access_count = iu.bucket_1_access_count + :nsh1,		    iu.bucket_2_10_access_count = iu.bucket_2_10_access_count + :nsh2_10,	  iu.bucket_2_10_rows_returned = iu.bucket_2_10_rows_returned + 						  :nrh2_10,				     iu.bucket_11_100_access_count = iu.bucket_11_100_access_count +						     :nsh11_100,				iu.bucket_11_100_rows_returned = iu.bucket_11_100_rows_returned +						:nrh11_100,				   iu.bucket_101_1000_access_count = iu.bucket_101_1000_access_count +						   :nsh101_1000,			      iu.bucket_101_1000_rows_returned = iu.bucket_101_1000_rows_returned +					      :nrh101_1000,				 iu.bucket_1000_plus_access_count = iu.bucket_1000_plus_access_count +						 :nsh1000plus,				    iu.bucket_1000_plus_rows_returned = iu.bucket_1000_plus_rows_returned					    + :nrh1000plus,			       last_used = SYSDATE						       when NOT matched then							     insert (iu.obj#,  iu.total_access_count,						    iu.total_rows_returned,							  iu.total_exec_count,								iu.bucket_0_access_count,						      iu.bucket_1_access_count, 						    iu.bucket_2_10_access_count,						  iu.bucket_2_10_rows_returned, 						iu.bucket_11_100_access_count,						      iu.bucket_11_100_rows_returned,						    iu.bucket_101_1000_access_count,						  iu.bucket_101_1000_rows_returned,						iu.bucket_1000_plus_access_count,					      iu.bucket_1000_plus_rows_returned,					    iu.last_used)							 values (:objn,  :ns,  :rr,								 :ne,  :nsh0,  :nsh1,  :nsh2_10,  :nrh2_10,  :nsh11_100,  :nrh11_100,		       :nsh101_1000,  :nrh101_1000,  :nsh1000plus,  :nrh1000plus,			SYSDATE)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="5hkjnb8twmhc4"></a>5hkjnb8twmhc4</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '9';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5mb968t41yxfr"></a>5mb968t41yxfr</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '53';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="5mqxkupnn07c1"></a>5mqxkupnn07c1</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '49';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5v7mdgpz8yna4"></a>5v7mdgpz8yna4</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '250';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met


				IF ( MOD(v_random_block,  2) = 0 ) THEN
WORKLOAD REPOSITORY report for

					v_do_update := TRUE;
DB Name 	DB Id	 Unique Name DB Role	      Edition Release	 RAC CDB
------------ ----------- ----------- ---------------- ------- ---------- --- ---
P60SDB	      3889879926 p60sdb      PRIMARY	      EE      19.0.0.0.0 YES NO
				ELSE

Instance     Inst Num Startup Time
------------ -------- ---------------
					v_do_update := FALSE;
p60sdb1 	    1 13-Feb-20 14:57

Host Name	 Platform			  CPUs Cores Sockets Memory(GB)
				END IF;
---------------- -------------------------------- ---- ----- ------- ----------
mcracpoc1.exampl Linux x86 64-bit		    32	  16	   1	 251.90

			ELSE
	      Snap Id	   Snap Time	  Sessions Curs/Sess Instances
	    --------- ------------------- -------- --------- ---------
Begin Snap:	  135 14-Feb-20 08:34:03       377	 3.5	     2
				-- UPDATE quota has been filled,  force drain some SELECTs
  End Snap:	  136 14-Feb-20 08:45:04       126	 1.3	     2
   Elapsed:		  11.01 (mins)
   DB Time:	       2,345.01 (mins)

				v_do_update := FALSE;
Top ADDM Findings by Average Active Sessions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Finding Name				 Avg act Percen Task Name
			END IF;
---------------------------------------- ------- ------ ------------------------
Interconnect Latency			  212.86 1.E+02 ADDM:3889879926_1_136
Top SQL Statements			  212.86  99.45 ADDM:3889879926_1_136
		END IF;
Global Cache Messaging			  212.86  89.60 ADDM:3889879926_1_136
Buffer Busy - Hot Objects		  212.86  63.57 ADDM:3889879926_1_136
"User I/O" wait Class			  212.86   9.54 ADDM:3889879926_1_136
	END IF;
Load Profile			Per Second   Per Transaction  Per Exec	Per Call
~~~~~~~~~~~~~~~ 	   ---------------   --------------- --------- ---------

	     DB Time(s):	     212.9		 3.5	  0.50	   65.81
	      DB CPU(s):	       4.0		 0.1	  0.01	    1.24
      Background CPU(s):	       2.0		 0.0	  0.00	    0.00
----------------------------------------------------------------------------------------------------------------------
      Redo size (bytes):       3,133,508.8	    51,115.2
  Logical read (blocks):	  26,828.0	       437.6
	  Block changes:	   7,999.6	       130.5
-- The type of SQL is now determined...execute it in the following section
 Physical read (blocks):	  22,598.6	       368.6
Physical write (blocks):	   3,864.0		63.0
       Read IO requests:	  22,598.4	       368.6
      Write IO requests:	   3,607.6		58.9
----------------------------------------------------------------------------------------------------------------------
	   Read IO (MB):	     176.6		 2.9
	  Write IO (MB):	      30.2		 0.5
	   IM scan rows:	       0.0		 0.0

Session Logical Read IM:	       0.0		 0.0
 RAC GC blocks received:	      76.3		 1.2
   RAC GC blocks served:	      77.4		 1.3
	     User calls:	       3.2		 0.1
	   Parses (SQL):	      17.3		 0.3
	IF ( v_do_update != TRUE ) THEN
      Hard parses (SQL):	       0.5		 0.0
     SQL Work Area (MB):	       0.6		 0.0
		 Logons:	       0.2		 0.0
		--
	    User logons:	       0.0		 0.0
	 Executes (SQL):	     422.5		 6.9
	      Rollbacks:	       0.0		 0.0
	   Transactions:	      61.3
		-- Do a SELECT statement

Instance Efficiency Percentages (Target 100%)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		-- Work out scan or random
	    Buffer Nowait %:  100.00	   Redo NoWait %:  100.00
	    Buffer  Hit   %:   15.76	In-memory Sort %:  100.00
	    Library Hit   %:   99.53	    Soft Parse %:   97.06
		IF  ( v_random_workload_only = TRUE ) THEN
	 Execute to Parse %:   95.92	     Latch Hit %:   99.93
Parse CPU to Parse Elapsd %:   25.11	 % Non-Parse CPU:   99.97
	  Flash Cache Hit %:	0.00

			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
Top 10 Foreground Events by Total Wait Time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					   Total Wait	    Avg   % DB Wait
			v_do_scan_query := FALSE;
Event				     Waits Time (sec)	   Wait   time Class
			v_scan_query_quota := TRUE ;
------------------------------ ----------- ---------- --------- ------ --------
gc current grant busy		 1,226,319	73.7K	60.07ms   52.4 Cluster
		ELSE
gc cr multi block grant 	   222,450	34.9K  156.96ms   24.8 Cluster
gc cr grant busy		   237,614	15.4K	64.66ms   10.9 Cluster
db file sequential read 	 2,750,245     9831.8	 3.57ms    7.0 User I/O
			IF ( v_scan_workload_only = TRUE ) THEN
db file parallel read		   224,166     3593.5	16.03ms    2.6 User I/O
DB CPU						 2660		   1.9
KJC: Wait for msg sends to com	     4,195     1095.3  261.09ms     .8 Other
gc current block lost		       798	507.2  635.56ms     .4 Cluster
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
gc cr multi block mixed 	     1,380	485.4  351.72ms     .3 Cluster
gc current block busy		    18,051	  408	22.60ms     .3 Cluster

				v_do_scan_query := TRUE;
Wait Classes by Total Wait Time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
							  Avg		  Avg
					Total Wait	 Wait	% DB   Active
				v_scan_query_quota := FALSE;
Wait Class		    Waits	Time (sec)	 Time	time Sessions
---------------- ---------------- ---------------- ---------- ------ --------
Cluster 		1,729,770	   126,171    72.94ms	89.7	190.9
			ELSE
User I/O		3,216,114	    13,438     4.18ms	 9.6	 20.3
DB CPU					     2,660		 1.9	  4.0
System I/O		  438,059	     1,468     3.35ms	 1.0	  2.2
				IF ( v_scan_query_quota = FALSE ) THEN
Other			  134,673	     1,350    10.02ms	 1.0	  2.0
Application		      426		20    45.78ms	  .0	  0.0
Configuration		      122		18   144.26ms	  .0	  0.0
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
Concurrency		   10,720		11	.99ms	  .0	  0.0
Commit			      141		 3    23.03ms	  .0	  0.0
Network 		    1,389		 0    33.10us	  .0	  0.0

					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
Host CPU
~~~~~~~~		  Load Average
 CPUs Cores Sockets	Begin	    End     %User   %System	 %WIO	  %Idle
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
----- ----- ------- --------- --------- --------- --------- --------- ---------
   32	 16	  1	32.16	   9.52       7.1      11.6	 17.4	   75.0

Instance CPU
						v_do_scan_query := TRUE;
~~~~~~~~~~~~
	      % of total CPU for Instance:	20.4
	      % of busy  CPU for Instance:	81.7
					ELSE
  %DB time waiting for CPU - Resource Mgr:	 0.0

IO Profile		    Read+Write/Second	  Read/Second	 Write/Second
~~~~~~~~~~		    ----------------- --------------- ---------------
						v_do_scan_query := FALSE;
	    Total Requests:	     26,279.0	     22,606.8	      3,672.1
	 Database Requests:	     26,205.9	     22,598.4	      3,607.6
	Optimized Requests:		  0.0		  0.0		  0.0
					END IF;
	     Redo Requests:		 65.5		  2.5		 63.0
		Total (MB):		212.2		178.9		 33.3
	     Database (MB):		206.7		176.6		 30.2
				ELSE
      Optimized Total (MB):		  0.0		  0.0		  0.0
		 Redo (MB):		  5.3		  2.3		  3.0
	 Database (blocks):	     26,462.6	     22,598.6	      3,864.0
 Via Buffer Cache (blocks):	     26,460.9	     22,598.6	      3,862.3
					-- Scan quota has been filled,	force drain some random access SELECTS
	   Direct (blocks):		  1.7		  0.0		  1.7

Memory Statistics
~~~~~~~~~~~~~~~~~			Begin	       End
					v_do_scan_query := FALSE;
				 ------------ ------------
		  Host Mem (MB):    257,947.8	 257,947.8
		   SGA use (MB):     40,960.0	  40,960.0
				END IF;
		   PGA use (MB):      4,096.4	   2,197.1
    % Host Mem used for SGA+PGA:	17.47	     16.73

Cache Sizes			  Begin        End
			END IF;
~~~~~~~~~~~		     ---------- ----------
	       Buffer Cache:	35,072M    35,072M  Std Block Size:	    8K
		END IF;
	   Shared Pool Size:	 4,423M     4,556M	Log Buffer:   101,568K
	     In-Memory Area:	     0M 	0M


 Shared Pool Statistics        Begin	End
~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ------  ------
	     Memory Usage %:   77.98   71.91
    % SQL with executions>1:   89.00   82.65

  % Memory for SQL w/exec>1:   91.54   90.51


Time Model Statistics		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
		IF ( v_do_scan_query != TRUE ) THEN
-> DB Time represents total time in user calls
-> DB CPU represents CPU time of foreground processes
-> Total CPU Time represents foreground and background processes
			SELECT COUNT(c2) INTO v_rowcnt
-> Statistics including the word "background" measure background process
   time, therefore do not contribute to the DB time statistic
-> Ordered by % of DB time in descending order, followed by Statistic Name
			FROM cf1

								% of  % of Total
Statistic Name					     Time (s) DB Time	CPU Time
------------------------------------------ ------------------ ------- ----------
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
sql execute elapsed time			    140,688.0	100.0
DB CPU						      2,660.0	  1.9	    66.5
PL/SQL execution elapsed time				 27.8	   .0

parse time elapsed					  7.3	   .0
hard parse elapsed time 				  6.8	   .0
hard parse (sharing criteria) elapsed time		  2.0	   .0
sequence load elapsed time				  0.3	   .0
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
PL/SQL compilation elapsed time 			  0.2	   .0
hard parse (bind mismatch) elapsed time 		  0.1	   .0
connection management call elapsed time 		  0.0	   .0
		ELSE
repeated bind elapsed time				  0.0	   .0
DB time 					    140,700.4
background elapsed time 			      3,502.4
background cpu time				      1,337.8		    33.5
total CPU time					      3,997.8
			  ------------------------------------------------------
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

Operating System Statistics	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> *TIME statistic values are diffed.
   All others display actual values.  End Value is displayed if different
-> ordered by statistic type (CPU Use, Virtual Memory, Hardware Config), Name


Statistic				   Value	End Value
------------------------- ---------------------- ----------------
FREE_MEMORY_BYTES		 119,786,893,312  124,677,910,528
INACTIVE_MEMORY_BYTES		   1,993,224,192    1,975,668,736
BUSY_TIME				 489,119
IDLE_TIME			       1,466,259
IOWAIT_TIME				 339,593
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
NICE_TIME				       0
SYS_TIME				 227,043
USER_TIME				 138,788
LOAD					      32	       10
PHYSICAL_MEMORY_BYTES		 270,477,918,208
NUM_CPUS				      32
NUM_CPU_CORES				      16

NUM_CPU_SOCKETS 			       1
GLOBAL_RECEIVE_SIZE_MAX 	       4,194,304
GLOBAL_SEND_SIZE_MAX		       1,048,576
TCP_RECEIVE_SIZE_DEFAULT		  87,380
TCP_RECEIVE_SIZE_MAX		       6,291,456
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
TCP_RECEIVE_SIZE_MIN			   4,096
TCP_SEND_SIZE_DEFAULT			  16,384
TCP_SEND_SIZE_MAX		       4,194,304
TCP_SEND_SIZE_MIN			   4,096
				v_scan_query_quota := TRUE;
			  ------------------------------------------------------

Operating System Statistics - Detail   DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

			END IF;
Snap Time	    Load    %busy    %user     %sys    %idle  %iowait
--------------- -------- -------- -------- -------- -------- --------
14-Feb 08:34:03     32.2      N/A      N/A	N/A	 N/A	  N/A
		END IF;
14-Feb 08:45:04      9.5     25.0      7.1     11.6	75.0	 17.4
			  ------------------------------------------------------


Foreground Wait Class		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond
-> ordered by wait time desc, waits desc
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0
-> Captured Time accounts for	     101.9%  of Total DB time	  140,700.39 (s)
-> Total FG Wait Time:		 140,647.28 (s)  DB CPU time:	    2,660.00 (s)

	ELSE
				     %Time	Total Wait
Wait Class		       Waits -outs	  Time (s)   Avg wait  %DB time
-------------------- --------------- ----- --------------- ---------- ---------
		--
Cluster 		   1,725,928	 0	   126,063    73.04ms	   89.6
User I/O		   2,974,485	 0	    13,425     4.51ms	    9.5
DB CPU						     2,660		    1.9
Other			      23,916	12	     1,133    47.37ms	    0.8
		-- Do an UPDATE statement
Configuration			  46	87		13   288.39ms	    0.0
Concurrency			 227	10		 9    40.73ms	    0.0
Commit				 141	 0		 3    23.03ms	    0.0
		--
System I/O			  99	 0		 0   241.23us	    0.0
Application			 132	 0		 0    99.50us	    0.0
Network 			 635	 0		 0     9.72us	    0.0
			  ------------------------------------------------------



Foreground Wait Events		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond
		v_my_serial := v_my_serial + v_loop_cnt ;
-> Only events with Total Wait Time (s) >= .001 are shown
-> ordered by wait time desc, waits desc (idle events last)
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0


						Total
				       %Time	 Wait		   Waits   % DB
Event				 Waits -outs Time (s)  Avg wait     /txn   time
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
-------------------------- ----------- ----- -------- --------- -------- ------
gc current grant busy	     1,226,319	       73,664	60.07ms     30.3   52.4
gc cr multi block grant        222,450	       34,917  156.96ms      5.5   24.8
		--
gc cr grant busy	       237,614	       15,365	64.66ms      5.9   10.9
db file sequential read      2,750,245		9,832	 3.57ms     67.9    7.0
db file parallel read	       224,166		3,594	16.03ms      5.5    2.6
KJC: Wait for msg sends to	 4,195		1,095  261.09ms      0.1     .8
		-- Increment count of UPDATES and set UPDATE quota flag if needed
gc current block lost		   798		  507  635.56ms      0.0     .4
gc cr multi block mixed 	 1,380		  485  351.72ms      0.0     .3
gc current block busy		18,051		  408	22.60ms      0.4     .3
		--
gc current grant 2-way		 8,370		  239	28.56ms      0.2     .2
gc cr block lost		   257		  166  646.69ms      0.0     .1
gc current block congested	 4,149		   91	21.97ms      0.1     .1
		v_updates_cnt := v_updates_cnt + 1;
gc current grant congested	 2,286		   66	28.81ms      0.1     .0
gc cr grant 2-way		 1,270		   58	45.53ms      0.0     .0
gc cr block 2-way		 1,654		   57	34.19ms      0.0     .0
gc current block 2-way		   366		   14	38.75ms      0.0     .0

undo segment extension		    40	 100	   13  326.90ms      0.0     .0
gc cr block congested		   558		   13	23.38ms      0.0     .0
gc cr grant congested		   361		   11	29.76ms      0.0     .0
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
reliable message		     1		   10	10.41 s      0.0     .0
latch: gc element		 5,803		   10	 1.72ms      0.1     .0
buffer busy waits		     6		    7 1108.16ms      0.0     .0
IPC send completion sync	   294		    6	22.03ms      0.0     .0
			v_update_quota := TRUE;
latch free			 4,371		    5	 1.05ms      0.1     .0
latch: redo allocation		 3,136		    4	 1.27ms      0.1     .0
		END IF;
log file sync			   141		    3	23.03ms      0.0     .0
library cache pin		    56		    2	35.73ms      0.0     .0
gc cr block busy		    28		    2	61.81ms      0.0     .0
enq: WF - contention		     9		    1	57.14ms      0.0     .0
	END IF ;
latch: object queue header	   357		    0	 1.26ms      0.0     .0
latch: cache buffers lru c	 1,106		    0  246.09us      0.0     .0
gc current multi block req	    14		    0	17.08ms      0.0     .0
row cache lock			    24	  96	    0	 8.74ms      0.0     .0
----------------------------------------------------------------------------------------------------------------------
latch: gcs resource hash	   282		    0  704.99us      0.0     .0
enq: HW - contention		     6		    0	31.68ms      0.0     .0
DLM cross inst call comple	    49		    0	 3.69ms      0.0     .0
enq: PS - contention		    91		    0	 1.88ms      0.0     .0
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
library cache lock		    56		    0	 2.15ms      0.0     .0
PGA memory operation		   964		    0  100.97us      0.0     .0
latch: cache buffers chain	    55		    0	 1.69ms      0.0     .0
latch: shared pool		    13		    0	 7.01ms      0.0     .0
----------------------------------------------------------------------------------------------------------------------
gc buffer busy acquire		     1		    0	79.41ms      0.0     .0
PX Deq: reap credit		 2,173	 100	    0	36.07us      0.1     .0
PX Deq: Slave Session Stat	   104		    0  533.22us      0.0     .0

latch: ges resource hash l	    96		    0  572.67us      0.0     .0
row cache mutex 		     7		    0	 7.05ms      0.0     .0
lock deadlock retry		   791	 100	    0	44.61us      0.0     .0
library cache: mutex X		    10		    0	 3.24ms      0.0     .0
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
direct path write		     7		    0	 3.77ms      0.0     .0
control file sequential re	    99		    0  241.23us      0.0     .0
enq: FB - contention		    14		    0	 1.34ms      0.0     .0
enq: TO - contention		     9		    0	 1.58ms      0.0     .0
		--
SQL*Net break/reset to cli	   132		    0	99.50us      0.0     .0
enq: WT - contention		     8		    0	 1.32ms      0.0     .0
CSS initialization		     2		    0	 4.75ms      0.0     .0
Disk file Mirror Read		    25		    0  279.08us      0.0     .0
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
enq: TT - contention		     4		    0	 1.62ms      0.0     .0
SQL*Net message to client	   631		    0	 9.69us      0.0     .0
latch: undo global data 	     9		    0  615.56us      0.0     .0
latch: enqueue hash chains	     8		    0  666.25us      0.0     .0
		-- so reset flags and counters before continuing

Foreground Wait Events		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
		--
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Only events with Total Wait Time (s) >= .001 are shown
-> ordered by wait time desc, waits desc (idle events last)
		v_update_quota := FALSE;
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

						Total
				       %Time	 Wait		   Waits   % DB
Event				 Waits -outs Time (s)  Avg wait     /txn   time
		v_updates_cnt := 0;
-------------------------- ----------- ----- -------- --------- -------- ------
wait list latch free		     3		    0	 1.13ms      0.0     .0
enq: AF - task serializati	     1		    0	 3.08ms      0.0     .0
		v_selects_cnt := 0;
CSS operation: action		     2		    0	 1.30ms      0.0     .0
latch: messages 		     6		    0  328.17us      0.0     .0
CSS operation: query		     6		    0  229.67us      0.0     .0
ASM IO for non-blocking po	    29		    0	46.31us      0.0     .0
	END IF;
name-service call wait		     2		    0  596.50us      0.0     .0
watchdog main loop		 1,100		3,300 3000.05ms      0.0

SQL*Net message from clien	   632		  660 1044.88ms      0.0
PX Deq: Execution Msg		   316		    3	10.78ms      0.0
PX Deq: Msg Fragment		   395		    3	 7.22ms      0.0
PX Deq Credit: send blkd	   241		    3	11.36ms      0.0
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
			  ------------------------------------------------------


Background Wait Events		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> ordered by wait time desc, waits desc (idle events last)
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
-> Only events with Total Wait Time (s) >= .001 are shown
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

						Total
		-- so reset flags and counters
				       %Time	 Wait		   Waits   % bg
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------
db file parallel write	       231,809	   0	  936	 4.04ms      5.7   26.7
		v_scan_query_quota := FALSE;
log file parallel write 	21,690	   0	  515	23.75ms      0.5   14.7
LGWR any worker group		 7,198	   0	  117	16.23ms      0.2    3.3
gc cr block 2-way		 2,682	   0	   40	15.01ms      0.1    1.1
		v_scan_queries_cnt := 0;
LGWR worker group ordering	 3,287	   0	   28	 8.55ms      0.1     .8
enq: CR - block range reus	   318	   0	   18	55.57ms      0.0     .5
LGWR all worker groups		   348	   0	   16	46.27ms      0.0     .5
enq: TM - contention		   105	   0	   13  128.46ms      0.0     .4
		v_random_access_queries_cnt := 0;
gc cr block lost		    16	   0	   12  723.50ms      0.0     .3
control file parallel writ	   344	   0	   11	33.33ms      0.0     .3
gc current block busy		   320	   0	   11	33.87ms      0.0     .3
	END IF;
reliable message		   185	   0	    9	50.66ms      0.0     .3
KJC: Wait for msg sends to	23,646	  99	    8  318.31us      0.6     .2
gc cr block busy		    78	   0	    7	95.44ms      0.0     .2
gc current grant busy		   181	   0	    7	40.92ms      0.0     .2

gc current grant 2-way		   103	   0	    6	62.46ms      0.0     .2
gc cr block congested		   252	   0	    6	25.36ms      0.0     .2
enq: RO - fast object reus	   180	   0	    6	33.27ms      0.0     .2
	v_loop_cnt := v_loop_cnt + 1 ;
ASM IO for non-blocking po     239,652	   0	    6	23.30us      5.9     .2
gc current block lost		     8	   0	    5  632.42ms      0.0     .1
undo segment extension		    11	 100	    4  388.19ms      0.0     .1
gc current multi block req	    10	   0	    4  419.46ms      0.0     .1
direct path write		    64	   0	    4	57.20ms      0.0     .1
gc cr grant busy		    26	   0	    3  128.43ms      0.0     .1
gc current grant congested	    28	   0	    3  118.76ms      0.0     .1
DFS lock handle 		   538	 100	    3	 5.97ms      0.0     .1
KSV master wait 		 1,291	  46	    2	 1.78ms      0.0     .1
ASM file metadata operatio	 2,941	   0	    2  724.91us      0.1     .1
enq: CF - contention		    63	  51	    2	32.30ms      0.0     .1
gcs log flush sync		 2,250	   0	    2  670.68us      0.1     .0
control file sequential re	 3,854	   0	    1  362.45us      0.1     .0
Sync ASM rebalance		    54	   0	    1	23.85ms      0.0     .0
PX Deq: reap credit		45,085	 100	    1	27.12us      1.1     .0
db file async I/O submit       179,698	   0	    1	 6.56us      4.4     .0
db file sequential read 	   461	   0	    1	 2.49ms      0.0     .0
	v_now := DBMS_UTILITY.GET_TIME();
row cache lock			    66	  98	    1	15.90ms      0.0     .0
IPC send completion sync	   676	  97	    1	 1.52ms      0.0     .0
latch free			 2,065	   0	    1  460.34us      0.1     .0

IMR slave acknowledgement	 1,977	   0	    1  457.22us      0.0     .0
direct path write temp		    67	   0	    1	13.32ms      0.0     .0
Disk file Mirror Read		   885	   0	    1  827.49us      0.0     .0
log file sequential read	   481	   0	    1	 1.43ms      0.0     .0
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
gc current block congested	    53	   0	    1	12.73ms      0.0     .0
latch: cache buffers lru c	   817	   0	    1  667.13us      0.0     .0
enq: TO - contention		     6	   0	    1	84.91ms      0.0     .0
enq: TA - contention		     2	   0	    1  252.61ms      0.0     .0
		-- If this is a fixed-iteration count test cycle and we've hit the number of
latch: redo allocation		   597	   0	    0  791.66us      0.0     .0
latch: gc element		   354	   0	    0	 1.28ms      0.0     .0
enq: DW - contention		     2	 100	    0  167.51ms      0.0     .0
ges message buffer allocat	    13	   0	    0	23.07ms      0.0     .0
		-- iterations then set exit flag
ges inquiry response		    84	   0	    0	 3.33ms      0.0     .0
LGWR wait for redo copy 	   384	   0	    0  670.02us      0.0     .0
latch: gcs resource hash	   398	   0	    0  625.60us      0.0     .0
gc buffer busy acquire		     1	   0	    0  192.10ms      0.0     .0
		v_stop_immediate := TRUE ;
gc current block 2-way		    59	   0	    0	 3.18ms      0.0     .0
AQ: RAC AQ Network		 6,564	 100	    0	28.48us      0.2     .0
CGS wait for IPC msg		 6,890	 100	    0	26.65us      0.2     .0
	END IF;
gc cr disk read 		     4	   0	    0	39.56ms      0.0     .0
Disk file operations I/O	   471	   0	    0  328.55us      0.0     .0
PGA memory operation		   418	   0	    0  207.07us      0.0     .0

END LOOP;
Background Wait Events		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> ordered by wait time desc, waits desc (idle events last)
-> Only events with Total Wait Time (s) >= .001 are shown
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0


						Total
				       %Time	 Wait		   Waits   % bg
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------
oracle thread bootstrap 	     3	   0	    0	26.36ms      0.0     .0
v_end_time := v_now ;
row cache mutex 		    56	   0	    0	 1.29ms      0.0     .0
PX Deq: Join ACK		    27	   0	    0	 2.23ms      0.0     .0
latch: redo writing		    61	   0	    0	  .97ms      0.0     .0
libcache interrupt action	10,069	   0	    0	 5.64us      0.2     .0
ksxr poll remote instances	 1,587	 100	    0	30.42us      0.0     .0
DLM cross inst call comple	    65	   0	    0  673.60us      0.0     .0
latch: MGA shared context	    67	   0	    0  619.00us      0.0     .0
v_now := DBMS_UTILITY.GET_TIME();
IPC group service call		   504	   0	    0	74.02us      0.0     .0
ges DFS hang analysis phas	     1	   0	    0	36.80ms      0.0     .0
gc current retry		     1	   0	    0	35.05ms      0.0     .0
library cache lock		    18	  56	    0	 1.94ms      0.0     .0
gc cr grant 2-way		    58	   0	    0  575.14us      0.0     .0
latch: object queue header	    23	   0	    0	 1.31ms      0.0     .0
enq: PS - contention		    23	  39	    0	 1.15ms      0.0     .0
library cache: bucket mute	    10	   0	    0	 2.57ms      0.0     .0
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
latch: checkpoint queue la	    53	   0	    0  478.55us      0.0     .0
CSS operation: data query	    20	   0	    0	 1.26ms      0.0     .0
library cache pin		    17	   0	    0	 1.32ms      0.0     .0
enq: TT - contention		    12	  25	    0	 1.66ms      0.0     .0
CSS operation: data update	    22	   0	    0  899.23us      0.0     .0
enq: US - contention		    11	   0	    0	 1.36ms      0.0     .0

latch: cache buffers chain	   135	   0	    0	97.58us      0.0     .0
gc buffer busy release		     1	   0	    0	11.33ms      0.0     .0
os thread creation		     3	   0	    0	 3.66ms      0.0     .0
enq: PW - flush prewarm bu	     9	 100	    0	 1.21ms      0.0     .0
latch: MGA shared context	    32	   0	    0  316.28us      0.0     .0
PX Deq: Slave Session Stat	    27	   0	    0  322.81us      0.0     .0
db file scattered read		    33	   0	    0  251.12us      0.0     .0
enq: WF - contention		     9	   0	    0  894.11us      0.0     .0
latch: messages 		    39	   0	    0  179.05us      0.0     .0
enq: SM -  contention		     2	   0	    0	 3.44ms      0.0     .0
latch: ges resource hash l	    13	   0	    0  498.38us      0.0     .0
enq: HW - contention		     6	   0	    0	  .96ms      0.0     .0
enq: FB - contention		     5	   0	    0	 1.04ms      0.0     .0
v_total_time := v_end_time - v_begin_time ;
PX Deq: Signal ACK EXT		    27	   0	    0  120.26us      0.0     .0
asynch descriptor resize	   253	 100	    0	10.98us      0.0     .0
SQL*Net message to client	   250	   0	    0	 9.97us      0.0     .0
latch: MGA heap latch		    19	   0	    0  120.05us      0.0     .0
enq: WT - contention		     2	   0	    0  719.50us      0.0     .0
wait list latch free		     1	   0	    0	 1.13ms      0.0     .0
library cache: mutex X		     1	   0	    0	 1.09ms      0.0     .0
buffer busy waits		     3	   0	    0  353.33us      0.0     .0
PX Idle Wait			   105	   0   43,084  410.33 s      0.0
Space Manager: slave idle	 6,646	   0   28,803 4333.83ms      0.2
rdbms ipc message		66,098	  19   14,806  224.00ms      1.6
class slave wait		 8,480	  77	4,330  510.66ms      0.2
wait for unread message on	 1,010	 100	1,976 1956.08ms      0.0
LMS CR slave timer	       196,536	   0	1,972	10.03ms      4.9
gcs yield cpu			69,349	 100	1,939	27.96ms      1.7
gcs remote message	     1,802,183	   0	1,336  741.40us     44.5
pmon timer			   439	 100	1,317 2999.89ms      0.0
ges remote message		31,892	   0	1,314	41.22ms      0.8
GCR sleep			 4,375	   0	1,314  300.40ms      0.1
DIAG idle wait			10,376	  71	1,312  126.47ms      0.3
Streams AQ: qmn coordinato	    49	   0	  672	13.71 s      0.0
Streams AQ: qmn slave idle	    25	   0	  672	26.88 s      0.0
dispatcher timer		    11	 100	  660	60.01 s      0.0
AQPC idle			    22	 100	  660	30.00 s      0.0
Data Guard: Gap Manager 	    11	   0	  660	60.00 s      0.0
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;

Background Wait Events		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> ordered by wait time desc, waits desc (idle events last)
-> Only events with Total Wait Time (s) >= .001 are shown
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

						Total
				       %Time	 Wait		   Waits   % bg
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="5vyhw99fk7s8b"></a>5vyhw99fk7s8b</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '148';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;
Event				 Waits -outs Time (s)  Avg wait     /txn   time

-------------------------- ----------- ----- -------- --------- -------- ------
pman timer			   220	 100	  660 2999.74ms      0.0
v_loop_cnt PLS_INTEGER := 0;
ASM cluster membership cha	   376	  85	  658 1750.39ms      0.0
heartbeat redo informer 	   658	   0	  658 1000.18ms      0.0
REPL Capture/Apply: RAC AQ	    11	 100	  658	59.83 s      0.0
v_rowcnt PLS_INTEGER := 0;
ASM background timer		 2,229	   0	  658  295.02ms      0.1
lreg timer			   219	 100	  658 3002.63ms      0.0
OFS idle			   219	 100	  657 3000.03ms      0.0
v_updates_cnt PLS_INTEGER := 0;
SCM slave idle			 6,606	   0	  654	98.98ms      0.2
PING				   626	  19	  650 1038.83ms      0.0
v_selects_cnt PLS_INTEGER := 0;
Data Guard: Timer		     1	   0	  600  600.00 s      0.0
smon timer			    23	   4	  487	21.18 s      0.0
LGWR worker group idle		12,683	   0	  338	26.63ms      0.3

PX Deq: Execute Reply		    27	   0	    1	53.01ms      0.0
PX Deq: Parse Reply		    27	   0	    1	39.66ms      0.0
PX Deq Credit: send blkd	   140	   0	    0	 3.37ms      0.0
v_random_access_queries_cnt PLS_INTEGER := 0;
SQL*Net message from clien	   250	   0	    0  335.46us      0.0
RMA: IPC0 completion sync	   715	   0	    0	22.93us      0.0
			  ------------------------------------------------------
v_scan_queries_cnt PLS_INTEGER := 0;


Wait Event Histogram		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds
v_do_scan_query BOOLEAN :=FALSE;
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (idle events last)

v_scan_query_quota  BOOLEAN := FALSE;
						 % of Total Waits
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;
				 -----------------------------------------------
			   Total

Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
AQ: RAC AQ Network	    6526	  .1  89.1   6.6   3.0	  .9	.2    .2

ASM IO for non-blocking p 239.7K    .0	81.3  10.1   3.2   2.1	 2.2	.8    .2
ASM file metadata operati   2930  26.4	 1.6  24.6  20.9   4.2	 5.6   4.8  11.9
AWR Flush		       6 100.0
v_random_block PLS_INTEGER := 1;
CGS wait for IPC msg	    6847	 6.4  83.9   5.6   2.7	  .9	.3    .1
CSS initialization	       2	      50.0			    50.0
CSS operation: action	       4	25.0				    75.0
v_tmp PLS_INTEGER;
CSS operation: data query     20				      15.0  85.0
CSS operation: data updat     22					   100.0
CSS operation: query	       6  66.7	16.7				    16.7
v_now PLS_INTEGER;
DFS lock handle 	     538			    .2	  .2  27.7  71.9
DLM cross inst call compl    402	       9.7   1.2   1.0	 1.2  30.8  56.0
Disk file Mirror Read	     902			    .6	59.0  26.4  14.1
v_brick_wall PLS_INTEGER;
Disk file operations I/O     483    .4	 2.5  12.4  15.5   3.7	36.4  15.9  13.0
GCR CSS group query	      20	70.0  25.0   5.0
GCR CSS group update	      20	95.0	     5.0

IMR slave acknowledgement   1965	12.7  12.3   4.4  19.2	14.8  26.0  10.6
IPC group service call	     507   1.2	 1.2  18.3  35.3  37.1	 4.7   1.4    .8
IPC send completion sync     951	      63.8   4.3   2.1	 2.4   5.4  22.0
v_begin_time PLS_INTEGER;
KJC: Wait for msg sends t  27.8K	19.4  23.1  12.6  16.3	 7.5   4.6  16.5
KSV master wait 	    1282	10.6  21.2   6.0   8.8	18.6   4.4  30.4
LGWR all worker groups	     342					   100.0
v_end_time PLS_INTEGER;
LGWR any worker group	    7060	  .2	.0    .0    .8	 1.5   2.4  95.1
LGWR wait for redo copy      379  26.4	 6.1   1.6   5.5   8.2	11.9  13.7  26.6
v_total_time PLS_INTEGER;
LGWR worker group orderin   3213    .8	 1.2   1.2   3.4   6.3	 3.6   3.1  80.5
PGA memory operation	    1439  23.4	22.4  15.0   2.7   6.0	16.4  10.4   3.6
PX Deq: Join ACK	      27			   3.7		    96.3
v_begin_cpu_tm PLS_INTEGER;
PX Deq: Signal ACK EXT	      27	      51.9  11.1	14.8  22.2
PX Deq: Slave Session Sta    126	 7.9  23.0    .8  11.1	12.7  19.0  25.4
PX Deq: reap credit	   46.9K	 2.3  88.1   5.8   2.6	  .8	.3    .2
v_end_cpu_tm PLS_INTEGER;
SQL*Net break/reset to cl    130  29.2	20.0	      .8  25.4	18.5   3.8   2.3
SQL*Net message to client    880  90.7	 5.6   1.3   1.3    .5	  .2	.5    .1
Sync ASM rebalance	      54	40.7   1.9   1.9	 1.9   3.7  50.0
v_total_cpu_tm PLS_INTEGER;
asynch descriptor resize     254  81.5	13.8   1.2   1.6   1.6		      .4
buffer busy waits	       7			  14.3	      28.6  57.1

buffer deadlock 	       5	      80.0	  20.0
control file parallel wri    342					   100.0
control file sequential r   3915	10.0  11.4    .9   1.5	34.6  29.9  11.8
v_do_sleeps BOOLEAN := FALSE;
db file async I/O submit  179.7K  95.7	 2.1	.6    .9    .5	  .2	.0    .0
db file parallel read	  220.8K				  .0	.2  99.8
db file parallel write	  231.8K	  .0   1.3   2.8   3.0	 5.2   8.3  79.5
v_loop_control BOOLEAN := FALSE;
db file scattered read	      33				69.7  27.3   3.0
db file sequential read     2.7M			    .0	 1.1  25.0  73.9
direct path write	      71					   100.0
v_update_quota BOOLEAN := FALSE;
direct path write temp	      67					   100.0
enq: AF - task serializat      1					   100.0
enq: CF - contention	      63				       1.6  98.4
enq: CR - block range reu    244				       8.2  91.8
v_select_only_workload BOOLEAN := FALSE;
enq: DW - contention	       2					   100.0
enq: FB - contention	      18				      11.1  88.9
enq: HW - contention	      10				      20.0  80.0
v_update_only_workload BOOLEAN := FALSE;
enq: PS - contention	     109				       9.2  90.8
enq: PW - flush prewarm b      9				      11.1  88.9
enq: RO - fast object reu    176				      22.7  77.3
v_do_update BOOLEAN := FALSE;
enq: SM -  contention	       2					   100.0
enq: TA - contention	       2					   100.0
enq: TM - contention	     104				       3.8  96.2
enq: TO - contention	      14				       7.1  92.9
v_do_hot_schema BOOLEAN := FALSE;
enq: TT - contention	      15				      20.0  80.0
enq: US - contention	      10					   100.0

v_stop_immediate BOOLEAN := FALSE;
Wait Event Histogram		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds
v_sharing_schema BOOLEAN := FALSE;
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (idle events last)
v_seed VARCHAR2(128);

						 % of Total Waits
				 -----------------------------------------------
			   Total
v_home_schema_str VARCHAR2(80);
Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
enq: WF - contention	      18				       5.6  94.4
v_scratch VARCHAR2(200) ;
enq: WT - contention	      10					   100.0
gc buffer busy acquire	       2					   100.0
gc buffer busy release	       5	      20.0  20.0		    60.0

gc cr block 2-way	    4286		      .0    .1	  .3  24.4  75.1
gc cr block busy	     109					   100.0
gc cr block congested	     739					   100.0
gc cr block lost	     266					   100.0
v_cpu_pct NUMBER(6, 3);
gc cr disk read 	       4					   100.0
gc cr grant 2-way	    1333				  .2   8.0  91.8
gc cr grant busy	  233.6K		.0    .0    .0	  .0	.4  99.5
v_my_serial NUMBER(16);
gc cr grant congested	     361					   100.0
gc cr multi block grant   219.1K		.0	    .0	  .0	.0 100.0
gc cr multi block mixed     1322					   100.0

gc current block 2-way	     495				 1.0  22.0  77.0
gc current block busy	   17.7K		      .1    .2	  .2  12.7  86.9
gc current block congeste   3916					.0 100.0
BEGIN
gc current block lost	     797					   100.0
gc current grant 2-way	    8453		      .1    .2	  .6  13.2  85.9

gc current grant busy	    1.2M	  .0	.0    .0    .0	  .0	.8  99.1
gc current grant congeste   2294					   100.0
gc current multi block re     22				       4.5  95.5
gc current retry	       1					   100.0
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
gcs log flush sync	    1894	 2.9   3.7   9.6  17.6	15.3  16.7  34.2
ges DFS hang analysis pha      1					   100.0
ges inquiry response	      77				       5.2  94.8
EXECUTE IMMEDIATE v_home_schema_str;
ges message buffer alloca     13	92.3				     7.7
ges resource directory to      8  87.5	12.5
ksxr poll remote instance   1495	      86.3   7.7   4.3	 1.2	.3    .2

latch free		    6279	10.7   2.5   2.9  13.0	18.7  19.8  32.5
latch: MGA heap latch	      19	47.4  10.5   5.3  15.8	 5.3  10.5   5.3
latch: MGA shared context     32	 9.4   3.1   6.3  25.0	28.1   9.4  18.8

latch: MGA shared context     67	 4.5   7.5	  10.4	28.4  13.4  35.8
latch: cache buffers chai    182	43.4   1.1   3.8  14.8	 9.3   4.9  22.5
latch: cache buffers lru    1909	27.6   2.9   3.7  17.6	17.9  12.3  18.1
IF ( v_hot_schema_modulus != 0 ) THEN
latch: call allocation	      15	40.0		  33.3	20.0   6.7
latch: checkpoint queue l     53	18.9	     5.7  28.3	13.2   9.4  24.5
latch: enqueue hash chain      8		    12.5  12.5	12.5  25.0  37.5
	v_do_hot_schema := TRUE;
latch: gc element	    6096	 2.4   1.0   1.5   5.9	10.6  17.2  61.4
latch: gcs resource hash     668	11.2   2.2   2.1  15.4	19.2  15.3  34.6
latch: ges resource hash     109	 9.2   2.8   2.8  15.6	14.7  23.9  31.2
END IF;
latch: messages 	      45	 8.9   8.9   2.2  37.8	22.2  11.1   8.9
latch: object queue heade    378	 3.7   1.6   2.9   9.5	12.7  16.1  53.4
latch: redo allocation	    3646	 8.5   1.6   2.6  13.0	16.0  16.3  42.0

latch: redo writing	      55	12.7		  16.4	10.9  10.9  49.1
latch: shared pool	      13	15.4   7.7	   7.7	15.4   7.7  46.2
latch: undo global data        9	11.1	    11.1	11.1  22.2  44.4
IF ( v_sleep_modulus != 0 )	  THEN
libcache interrupt action  10.3K  98.1	  .8	.3    .6    .2	  .0	.0    .0
library cache lock	     139				      34.5  65.5
library cache pin	     140				      37.9  62.1
library cache: bucket mut     10					   100.0
	v_do_sleeps := TRUE;
library cache: mutex X	      11	27.3	    18.2	      18.2  36.4
lock deadlock retry	     789	 3.8  81.6   7.2   3.7	 2.3   1.0    .4
log file parallel write    21.5K					   100.0
END IF;
log file sequential read     478		.4  30.3   2.5	 5.6  10.3  50.8
log file sync		     141					   100.0
name-service call wait	       3					   100.0

oracle thread bootstrap        4					   100.0
os thread creation	       4					   100.0
reliable message	     153					   100.0

IF ( v_max_loop_iterations &gt; 0 )  THEN
Wait Event Histogram		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds
	v_loop_control := TRUE ;
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (idle events last)
END IF;

						 % of Total Waits
				 -----------------------------------------------
			   Total

Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
IF ( v_update_pct = 0 ) 	  THEN
row cache lock		      89					   100.0
row cache mutex 	      63  11.1	20.6   9.5  14.3   6.3	12.7   4.8  20.6
undo segment extension	      42	 9.5				    90.5
undo_retention publish re      2  50.0	50.0
	v_select_only_workload := TRUE;
wait list latch free	       4					   100.0
AQPC idle		      22					   100.0
ASM background timer	    2222				12.3   7.4  80.2
END IF;
ASM cluster membership ch    374					   100.0
DIAG idle wait		   10.3K		.0    .3    .8	  .4	.7  97.8
Data Guard: Gap Manager       10					   100.0
Data Guard: Timer	       1					   100.0

GCR sleep		    4351					   100.0
LGWR worker group idle	   12.4K   3.0	 3.1   1.1   3.8   9.2	 5.4   3.1  71.4
LMS CR slave timer	  195.4K					   100.0
IF ( v_update_pct = 100 )	  THEN
OFS idle		     218					   100.0
PING			     626	       1.4  14.9  18.1	 8.8   7.7  49.2
PX Deq Credit: send blkd     381	      11.8   3.1   1.6	 2.9  22.0  58.5
PX Deq: Execute Reply	      27	       7.4		 3.7   3.7  85.2
	v_update_only_workload := TRUE;
PX Deq: Execution Msg	     292		.7	    .7	 1.4  12.0  85.3
PX Deq: Msg Fragment	     394   4.6	 1.0   5.1   6.6   4.1	 1.3  14.7  62.7
PX Deq: Parse Reply	      27	 3.7			       7.4  88.9
END IF;
PX Idle Wait		      99					   100.0
REPL Capture/Apply: RAC A     11					   100.0
RMA: IPC0 completion sync    708	40.8  51.4   3.4   3.1	 1.0	.1    .1

SCM slave idle		    6568					   100.0
SQL*Net message from clie    881			    .1	21.2  46.3  32.3
Space Manager: slave idle   6611	  .5	.2    .2    .9	  .6	.3  97.4
Streams AQ: qmn coordinat     49   2.0				34.7  10.2  53.1
IF ( v_scan_query_pct = 0 ) 	THEN
Streams AQ: qmn slave idl     25   4.0					    96.0
class slave wait	    8435	 3.5	.5   1.7   3.0	 1.0	.4  89.9
dispatcher timer	      11					   100.0
	v_random_workload_only := TRUE;
gcs remote message	    1.8M	  .9   2.2  12.3  17.4	17.7  20.0  29.6
gcs yield cpu		     69K	 5.1	.5    .2    .1	  .1	.1  93.9
ges remote message	   31.9K	  .3	.2    .4   1.1	 3.6   7.9  86.5
heartbeat monitor sleep       52  94.2	 3.8		   1.9
END IF;
heartbeat redo informer      655					   100.0
lreg timer		     218					   100.0
pman timer		     218					   100.0

pmon timer		     437					   100.0
rdbms ipc message	   65.2K    .0	13.5   1.1   2.6   3.4	 4.7   7.8  66.8
smon timer		      19					   100.0
wait for unread message o   1003					   100.0
IF ( v_scan_query_pct = 100 ) 	THEN
watchdog main loop	    1090					   100.0
			  ------------------------------------------------------


	v_scan_workload_only := TRUE;
Wait Event Histogram (up to 64 us)     DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds
END IF;
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0

-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
				 -----------------------------------------------
v_seconds_to_run := v_seconds_to_run * 100 ;
			   Waits
			    1us
Event			  - 64us  <1us	<2us  <4us  <8us <16us <32us <64us >=64u
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
AQ: RAC AQ Network	    6249			    .1	89.1   6.6   4.2

ASM IO for non-blocking p 226.9K		      .0  81.3	10.1   3.2   5.3
ASM file metadata operati   2156		.2  26.2   1.6	24.6  20.9  26.4
AWR Flush		       6		   100.0
CGS wait for IPC msg	    6569			   6.4	83.9   5.6   4.1
CSS initialization	       1				50.0	    50.0
CSS operation: action	       1			  25.0		    75.0
CSS operation: query	       5		    66.7  16.7		    16.7
DLM cross inst call compl     44				 9.7   1.2  89.1
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
Disk file operations I/O     149		      .4   2.5	12.4  15.5  69.2
GCR CSS group query	      20			  70.0	25.0   5.0
GCR CSS group update	      20			  95.0	       5.0
IMR slave acknowledgement    576			  12.7	12.3   4.4  70.7
IPC group service call	     284		     1.2   1.2	18.3  35.3  44.0
IPC send completion sync     648				63.8   4.3  31.9
KJC: Wait for msg sends t  15.3K			  19.4	23.1  12.6  44.9

KSV master wait 	     485			  10.6	21.2   6.0  62.2
LGWR any worker group	      17			    .2	  .0	.0  99.8
LGWR wait for redo copy      150		    26.4   6.1	 1.6   5.5  60.4
LGWR worker group orderin    211		      .8   1.2	 1.2   3.4  93.4
PGA memory operation	     914		    23.4  22.4	15.0   2.7  36.5
PX Deq: Signal ACK EXT	      17				51.9  11.1  37.0
PX Deq: Slave Session Sta     40			   7.9	23.0	.8  68.3
PX Deq: reap credit	   45.1K			   2.3	88.1   5.8   3.9
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
SQL*Net break/reset to cl     65		    29.2  20.0		.8  50.0
SQL*Net message to client    869		.1  90.6   5.6	 1.3   1.3   1.3
Sync ASM rebalance	      24			  40.7	 1.9   1.9  55.6
asynch descriptor resize     249		    81.5  13.8	 1.2   1.6   2.0
-- DBMS_RANDOM.seed (val =&gt; v_seed);
buffer deadlock 	       4				80.0	    20.0
control file sequential r    873			  10.0	11.4	.9  77.7
db file async I/O submit  178.5K		.6  95.1   2.1	  .6	.9    .7

db file parallel write	    9530			    .0	 1.3   2.8  95.9
gc buffer busy release	       2				20.0  20.0  60.0
gc cr block 2-way	       2					.0 100.0
gc cr grant busy	      16				  .0	.0 100.0
v_begin_time := DBMS_UTILITY.GET_TIME();
gc cr multi block grant        1				  .0	   100.0
gc current block busy	      13					.1  99.9
gc current grant 2-way	       9					.1  99.9
gc current grant busy	      93			    .0	  .0	.0 100.0
v_now := v_begin_time ;
gcs log flush sync	     307			   2.9	 3.7   9.6  83.8
ges message buffer alloca     12			  92.3		     7.7
ges resource directory to      8		    87.5  12.5
ksxr poll remote instance   1405				86.3   7.7   6.0
v_brick_wall := v_now + v_seconds_to_run ;
latch free		    1012			  10.7	 2.5   2.9  83.9
latch: MGA heap latch	      12			  47.4	10.5   5.3  36.8
latch: MGA shared context      6			   9.4	 3.1   6.3  81.3
latch: MGA shared context      8			   4.5	 7.5	    88.1
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
latch: cache buffers chai     88			  43.4	 1.1   3.8  51.6
latch: cache buffers lru     652			  27.6	 2.9   3.7  65.8

latch: call allocation	       6			  40.0		    60.0
latch: checkpoint queue l     13			  18.9	       5.7  75.5
latch: enqueue hash chain      1				      12.5  87.5
latch: gc element	     299			   2.4	 1.0   1.5  95.1
----------------------------------------------------------------------------------------------------------------------
latch: gcs resource hash     104			  11.2	 2.2   2.1  84.4
latch: ges resource hash      16			   9.2	 2.8   2.8  85.3
latch: messages 	       9			   8.9	 8.9   2.2  80.0
latch: object queue heade     31			   3.7	 1.6   2.9  91.8
-- The following WHILE loop is the master work loop control
latch: redo allocation	     463			   8.5	 1.6   2.6  87.3
latch: redo writing	       7			  12.7		    87.3
latch: shared pool	       3			  15.4	 7.7	    76.9

Wait Event Histogram (up to 64 us)     DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
----------------------------------------------------------------------------------------------------------------------
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds
-> % of Total Waits: total waits for all wait classes, including Idle
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)


						 % of Total Waits
				 -----------------------------------------------
			   Waits
			    1us
Event			  - 64us  <1us	<2us  <4us  <8us <16us <32us <64us >=64u
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
latch: undo global data        2			  11.1	      11.1  77.8
libcache interrupt action  10.3K	       1.7  96.4    .8	  .3	.6    .3
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
library cache: mutex X	       5			  27.3	      18.2  54.5
lock deadlock retry	     731			   3.8	81.6   7.2   7.4
log file sequential read     147				  .4  30.3  69.2
row cache mutex 	      35		    11.1  20.6	 9.5  14.3  44.4
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
undo segment extension	       4			   9.5		    90.5
undo_retention publish re      2		    50.0  50.0
			  ------------------------------------------------------


			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
Wait Event Histogram (up to 32 ms)     DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds,
			DBMS_LOCK.SLEEP(v_num_tmp);
   ms is 1024 microseconds (approximately 1 millisecond)
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
		END IF;
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
				 -----------------------------------------------
	END IF;
			   Waits
			    1ms
Event			  to 32m  <512	<1ms  <2ms  <4ms  <8ms <16ms <32ms >=32m
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----

AQ: RAC AQ Network	      10  99.8	  .0	.1    .0
ASM IO for non-blocking p    545  99.8	  .2	.0    .0    .0	  .0
ASM file metadata operati    344  88.1	  .8   1.1   3.2   5.2	 1.2	.2    .2
CGS wait for IPC msg	      10  99.9	  .1	.0    .0
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
CSS initialization	       1  50.0				50.0
CSS operation: action	       3  25.0	50.0  25.0
CSS operation: data query     17  15.0	35.0  35.0  15.0
CSS operation: data updat     22	68.2  31.8
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
CSS operation: query	       1  83.3	      16.7
DFS lock handle 	     382  28.1	35.5  15.2  17.1   2.8	  .4	      .9
DLM cross inst call compl    224  44.0	45.3   7.0   3.0    .5		      .2
Disk file Mirror Read	     124  85.9	 5.9   3.7   1.8    .8	 1.6	.1    .3
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
Disk file operations I/O      63  87.0	 8.3   2.1   2.5	  .2
IMR slave acknowledgement    206  89.4	 6.2   2.1    .9    .6	  .6	.1    .2
			v_sharing_schema := TRUE ;
IPC group service call	       4  99.2	  .8
IPC send completion sync     202  78.0	 7.4   7.8   3.6   2.1	  .4	      .7
KJC: Wait for msg sends t   1727  83.5	 2.7   1.4   1.0    .9	  .2	.1  10.3
		ELSE
KSV master wait 	     388  69.6	 1.1   1.9   8.0  15.4	 3.4	.5    .2
LGWR all worker groups	     220		      .3   5.3	29.2  29.5  35.7
LGWR any worker group	    6143   4.9	 4.7   9.8  21.6  25.0	18.8   7.2   8.1
LGWR wait for redo copy      101  73.4	11.9   7.1   4.2   1.8	 1.3	.3
			IF ( v_sharing_schema = TRUE ) THEN
LGWR worker group orderin   2461  19.5	 5.6  10.3  34.1  16.9	 6.8   2.9   4.0
PGA memory operation	      52  96.4	 2.2	.8    .4    .1
PX Deq: Join ACK	      26   3.7	37.0  14.8  37.0	 7.4
PX Deq: Slave Session Sta     32  74.6	14.3   5.6   4.8    .8
PX Deq: reap credit	      84  99.8	  .1	.0    .0    .0	  .0
SQL*Net break/reset to cl      3  97.7	 1.5	      .8
SQL*Net message to client      1  99.9	  .1
Sync ASM rebalance	      15  50.0	 7.4   9.3		 1.9   9.3  22.2
asynch descriptor resize       1  99.6	  .4
control file parallel wri    288		    21.1  38.3	16.1   8.8  15.8
control file sequential r    461  88.2	 7.8   2.4    .8    .5	  .1	.1
db file async I/O submit      57 100.0	  .0	.0    .0
db file parallel read	  182.6K    .2	  .8   2.7   6.3  43.7	13.1  16.0  17.0
db file parallel write	  181.1K  20.5	13.3  19.2  33.5   8.1	 3.0   1.1   1.4
db file scattered read	       1  97.0	 3.0
db file sequential read       2M  26.1	 8.0   3.9  46.0   9.5	 2.7   2.7    .9
direct path write	      52	 1.4   2.8  12.7  19.7	32.4   4.2  26.8
direct path write temp	      63		    71.6  16.4	 4.5   1.5   6.0
enq: AF - task serializat      1		   100.0
enq: CF - contention	      57   1.6	42.9  25.4  17.5   4.8		     7.9
enq: CR - block range reu    183   8.2	23.4  29.1  16.4   4.1	  .8   1.2  16.8
enq: FB - contention	      16  11.1	55.6  16.7  16.7
enq: HW - contention	       8  20.0	20.0  40.0  10.0  10.0
enq: PS - contention	      99   9.2	37.6  26.6  19.3   5.5	 1.8
enq: PW - flush prewarm b      8  11.1	      88.9
enq: RO - fast object reu    129  22.7	38.1  19.3  10.2   5.7		     4.0
enq: SM -  contention	       2	50.0		  50.0
enq: TA - contention	       1		    50.0		    50.0
enq: TM - contention	      83   3.8	22.1  30.8  21.2   5.8		    16.3
enq: TO - contention	      12   7.1	35.7  21.4  28.6		     7.1
enq: TT - contention	      12  20.0	13.3  46.7  13.3   6.7
enq: US - contention	      10	30.0  70.0
enq: WF - contention	      16   5.6	50.0  27.8  11.1		     5.6
enq: WT - contention	      10	50.0  40.0  10.0
gc buffer busy release	       3  40.0			  20.0	40.0
gc cr block 2-way	    3132  24.9	19.8  21.9  19.8   9.3	 2.0	.3   2.0
gc cr block busy	      53	       1.8   2.8   3.7	16.5  23.9  51.4
gc cr block congested	     724		.1  16.8  41.8	33.4   5.8   2.0
gc cr disk read 	       2		    25.0  25.0		    50.0

Wait Event Histogram (up to 32 ms)     DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds,
   ms is 1024 microseconds (approximately 1 millisecond)
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
				 -----------------------------------------------
			   Waits
			    1ms
Event			  to 32m  <512	<1ms  <2ms  <4ms  <8ms <16ms <32ms >=32m
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
gc cr grant 2-way	    1173   8.2	13.8  23.2  34.0  14.3	 2.4	.3   3.8
gc cr grant busy	  194.1K    .5	 3.4   8.5  16.9  24.1	21.5   8.8  16.4
gc cr grant congested	     354		    13.9  52.1	28.8   3.3   1.9
gc cr multi block grant   128.7K    .0	  .2   1.4   4.5  12.7	23.6  16.2  41.3
gc cr multi block mixed      496	  .2	.4   2.4   7.1	16.1  11.3  62.5
gc current block 2-way	     367  23.0	14.7  19.6  23.8  11.7	 3.4	.8   2.8
gc current block busy	     15K  13.1	22.6  27.1  22.6   9.9	 2.2	.3   2.1
gc current block congeste   3845    .0		.9  17.9  44.2	30.0   5.3   1.8
gc current grant 2-way	    6973  14.1	16.0  23.3  26.5  13.2	 2.9	.6   3.4
gc current grant busy	      1M    .9	 4.7  10.0  17.9  23.3	19.6   8.0  15.6
gc current grant congeste   2188		.7  16.5  49.3	24.6   4.3   4.6
gc current multi block re     19   4.5	31.8  13.6   9.1  13.6	 4.5  13.6   9.1
gcs log flush sync	     648  65.8	16.0  10.6   5.0   1.8	  .6	.3
ges inquiry response	      72   5.2	46.8  31.2  11.7   2.6	 1.3	     1.3
ksxr poll remote instance      3  99.8	  .1	      .1
latch free		    2039  67.5	12.1   9.4   6.5   3.5	 1.0
latch: MGA heap latch	       1  94.7	       5.3
latch: MGA shared context      6  81.3	12.5   6.3
latch: MGA shared context     24  64.2	16.4  10.4   9.0
latch: cache buffers chai     41  77.5	 6.6   8.2   4.4   2.7	  .5
latch: cache buffers lru     346  81.9	 7.7   6.0   2.7   1.4	  .3
latch: checkpoint queue l     13  75.5	 7.5  11.3   5.7
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
latch: enqueue hash chain      3  62.5	12.5  25.0

latch: gc element	    3743  38.6	19.5  18.1  13.8   7.1	 2.2	.7    .0
latch: gcs resource hash     231  65.4	15.1  11.5   6.3   1.6
latch: ges resource hash      34  68.8	10.1  12.8   8.3
latch: messages 	       4  91.1	 6.7   2.2
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
latch: object queue heade    202  46.6	21.2  16.1   9.0   5.3	 1.3	.5
latch: redo allocation	    1530  58.0	13.7  14.0   7.5   4.5	 1.1   1.1
latch: redo writing	      27  50.9	23.6  14.5   5.5   3.6	 1.8
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
latch: shared pool	       6  53.8			   7.7	15.4  23.1
latch: undo global data        4  55.6	22.2  22.2
libcache interrupt action      3 100.0	  .0	.0
library cache lock	      91  34.5	33.1  15.1  12.2   4.3	  .7
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
library cache pin	      83  37.9	32.9  19.3   4.3   2.1		.7   2.9
library cache: bucket mut     10	      30.0  70.0
library cache: mutex X	       4  63.6	       9.1		27.3
lock deadlock retry	       3  99.6	  .1	.1		  .1
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
log file parallel write    18.8K		     1.3  19.0	50.3  17.2  12.2
log file sequential read     243  49.2	14.2   7.9  23.4   3.8	  .2   1.3
log file sync		     106		     2.8  14.2	40.4  17.7  24.8
	END IF;
name-service call wait	       3       100.0
oracle thread bootstrap        3				      75.0  25.0
os thread creation	       4		    75.0  25.0

reliable message	     141	 3.9   7.8  26.8  41.8	11.1	.7   7.8
row cache lock		      86	18.0  29.2  41.6   7.9		     3.4
row cache mutex 	      12  79.4	 4.8   4.8		 7.9   1.6   1.6
undo segment extension	       8   9.5				 9.5   9.5  71.4
----------------------------------------------------------------------------------------------------------------------
wait list latch free	       4	     100.0
			  ------------------------------------------------------


-- The following section governs what the SQL execution will be (UPDATE or SELECT)
Wait Event Histogram (up to 2 sec)     DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   ms is milliseconds
----------------------------------------------------------------------------------------------------------------------
   s is 1024 milliseconds (approximately 1 second)
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;

   value of null is truly 0
	IF  ( v_select_only_workload = TRUE ) THEN
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
				 -----------------------------------------------
		-- handle case where user specified zero pct updates (a SELECT-only workload)
			   Waits
			   64ms
Event			   to 2s <32ms <64ms <1/8s <1/4s <1/2s	 <1s   <2s  >=2s
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
		v_do_update := FALSE;
ASM file metadata operati      5  99.8	  .2
DFS lock handle 	       5  99.1			    .9
DLM cross inst call compl      1  99.8		.2
		v_update_quota := TRUE ;
Disk file Mirror Read	       3  99.7	  .2	.1
IMR slave acknowledgement      3  99.8	  .1	.1
IPC send completion sync       7  99.3				  .7
KJC: Wait for msg sends t   2833  89.7			   9.1	 1.1	.0    .1
	ELSE
KSV master wait 	       2  99.8	  .2
LGWR all worker groups	     122  64.3	19.6   8.8   3.5   3.8
LGWR any worker group	     569  91.9	 3.4   1.4   2.8    .4	  .1
		IF ( v_update_only_workload = TRUE ) THEN
LGWR worker group orderin    127  96.0	 1.9	.7   1.1    .3	  .0
Sync ASM rebalance	      12  77.8	 5.6  14.8   1.9
buffer busy waits	       3  42.9	      14.3		14.3  14.3  14.3
control file parallel wri     54  84.2	 5.8   3.2   4.4   1.8	  .6
db file parallel read	   37.6K  83.0	15.6   1.4    .0    .0
db file parallel write	    3186  98.6	  .4	.3    .6    .0	  .0
			-- handle case where user specified 100% updates
db file sequential read    24.9K  99.1	  .9	.0    .0    .0
direct path write	      19  73.2	 8.5  11.3   1.4   2.8	 2.8
direct path write temp	       4  94.0	       3.0   3.0
enq: CF - contention	       5  92.1	       1.6	   6.3
enq: CR - block range reu     41  83.2	  .8   1.6   2.9   6.1	 4.9	.4
enq: DW - contention	       2		   100.0
			v_do_update := TRUE;
enq: RO - fast object reu      5  96.0		     2.8		     1.1
enq: TA - contention	       1  50.0			  50.0
enq: TM - contention	      14  83.7	 1.9	     3.8   4.8	 1.9   1.0   2.9
enq: TO - contention	       1  92.9			   7.1
enq: WF - contention	       1  94.4			   5.6
gc buffer busy acquire	       2	      50.0  50.0
gc cr block 2-way	      86  98.0		.1    .1    .1	 1.6	.2    .0
			v_update_quota := FALSE;
gc cr block busy	      56  48.6	29.4   5.5  10.1   4.6	       1.8
gc cr block congested	      15  98.0	  .7		    .1	  .9	.3
gc cr block lost	     265			  30.1	63.2   6.4    .4
gc cr disk read 	       2  50.0	25.0  25.0
gc cr grant 2-way	      51  96.2				 3.6	.2
gc cr grant busy	     38K  83.6	 3.4   6.9   2.1    .2	 2.8	.8    .2
		ELSE
gc cr grant congested	       7  98.1				 1.7	.3
gc cr multi block grant    88.8K  58.7	 8.1  17.3   6.3    .6	 4.7   3.4    .8
gc cr multi block mixed      810  37.5	 5.9  13.4   3.8   6.3	26.6   5.3   1.2
gc current block 2-way	      14  97.2		      .2	 2.6
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
gc current block busy	     361  97.9	  .1	.1    .1    .0	 1.6	.2    .0
gc current block congeste     70  98.2	  .3	.1    .2	 1.1	.2
gc current block lost	     793			  32.1	62.7   4.6    .5
gc current grant 2-way	     286  96.6	  .3	.5    .4    .1	 1.8	.3    .0
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
gc current grant busy	  185.9K  84.4	 3.2   6.6   2.0    .2	 2.5	.8    .2
gc current grant congeste    106  95.4	  .6   1.4    .8    .2	 1.4	.3
gc current multi block re      1  90.9				 4.5	     4.5
			IF ( v_update_quota = FALSE ) THEN
gc current retry	       1       100.0
ges DFS hang analysis pha      1       100.0
ges inquiry response	       1  98.7		     1.3
ges message buffer alloca      1  92.3			   7.7
				-- Handle case where user has set UPDATE_PCT to a valid value
latch: gc element	       1 100.0	  .0
library cache pin	       4  97.1		      .7   1.4	  .7
log file parallel write     2630  87.8	 7.3   1.8   2.4    .6	  .1	.0
log file sync		      35  75.2	20.6   4.3
				--
oracle thread bootstrap        1  75.0	25.0
reliable message	      11  92.2	 1.3	      .7   2.6	 1.3   1.3    .7
				-- We are doing updates during this run and quota has not been met yet
row cache lock		       3  96.6		     2.2	 1.1
row cache mutex 	       1  98.4	 1.6
undo segment extension	      30  28.6	 9.5   9.5   9.5   9.5	33.3
			  ------------------------------------------------------
				-- We still vacillate until update quota has been met


Wait Event Histogram (up to 2 min)     DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000

-> Units for % of Total Waits:
   s is 1024 milliseconds (approximately 1 second)
   m is 64*1024 milliseconds (approximately 67 seconds or 1.12 minutes)
				IF ( MOD(v_random_block,  2) = 0 ) THEN
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)
					v_do_update := TRUE;

						 % of Total Waits
				 -----------------------------------------------
			   Waits
				ELSE
			    4s
Event			   to 2m   <2s	 <4s   <8s  <16s  <32s	< 1m  < 2m  >=2m
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
KJC: Wait for msg sends t     21  99.9	  .1	.0
					v_do_update := FALSE;
buffer busy waits	       1  85.7	14.3
enq: RO - fast object reu      2  98.9	 1.1
enq: TM - contention	       3  97.1	 2.9
gc cr block 2-way	       1 100.0	  .0
				END IF;
gc cr block lost	       1  99.6	  .4
gc cr grant busy	     376  99.8	  .1	.0
gc cr multi block grant     1659  99.2	  .7	.1    .0
			ELSE
gc cr multi block mixed       16  98.8	 1.2
gc current block busy	       5 100.0	  .0	.0
gc current block lost	       4  99.5	  .5
gc current grant 2-way	       4 100.0	  .0	.0
				-- UPDATE quota has been filled,  force drain some SELECTs
gc current grant busy	    2136  99.8	  .2	.0    .0
gc current multi block re      1  95.5	 4.5
reliable message	       1  99.3		      .7
			  ------------------------------------------------------
				v_do_update := FALSE;


Wait Event Histogram (up to 1 hr)      DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

			END IF;
		  No data exists for this section of the report.
			  ------------------------------------------------------


		END IF;
Service Statistics		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> ordered by DB Time

							   Physical	 Logical
	END IF;
Service Name		      DB Time (s)   DB CPU (s)	  Reads (K)    Reads (K)
---------------------------- ------------ ------------ ------------ ------------
p60sdb.example.com		  140,178	 2,639	     14,811	  17,412
SYS$BACKGROUND			       16	     6		  1	     186

SYS$USERS				1	     0		  0	       0
p60sdbXDB				0	     0		  0	       0
			  ------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
Service Wait Class Stats	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Wait Class info for services in the Service Statistics section.
-> Total Waits and Time Waited displayed for the following wait
-- The type of SQL is now determined...execute it in the following section
   classes:  User I/O, Concurrency, Administrative, Network
-> Time Waited (Wt Time) in seconds

Service Name
----------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
 User I/O  User I/O  Concurcy  Concurcy     Admin     Admin   Network	Network
Total Wts   Wt Time Total Wts	Wt Time Total Wts   Wt Time Total Wts	Wt Time
--------- --------- --------- --------- --------- --------- --------- ---------

p60sdb.example.com
  2910808     13144	  136	      6 	0	  0	  501	      0
SYS$BACKGROUND
	IF ( v_do_update != TRUE ) THEN
   242279	 12	11630	      4 	0	  0	  502	      0
SYS$USERS
       12	  0	   16	      0 	0	  0	  130	      0
			  ------------------------------------------------------
		--

Top 10 Channel Waits		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Top 10 Channel Waits by wait time
		-- Do a SELECT statement

Channel
----------------------------------------------------------------
	       Total
		Wait
		-- Work out scan or random
      Waits Time (s)  Avg Wait
----------- -------- ---------
kxfp control signal channel
	 14	   0	1.20ms
		IF  ( v_random_workload_only = TRUE ) THEN
GEN0 ksbxic channel
	 11	   0	2.13ms
obj broadcast channel
	 22	   0	4.00ms
RBR channel
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
	102	   5   51.99ms
MMON remote action broadcast channel
	  3	  12 4157.95ms
			  ------------------------------------------------------

			v_do_scan_query := FALSE;

Top Process Types by Wait Class        DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> This table displays top process types ordered by wait class

			v_scan_query_quota := TRUE ;
Proce Description		     Wait Class Type  Wait Time (sec
----- ------------------------------ ---------------- --------------
      Others (foregrounds + unclassi Cluster		   125,189.1
		ELSE
      Others (foregrounds + unclassi User I/O		    13,259.4
      Others (foregrounds + unclassi Other		     1,113.5
LG    Log Writer Slave		     System I/O 	       367.0
DBW1  db writer process 1	     System I/O 	       235.0
			IF ( v_scan_workload_only = TRUE ) THEN
DBW0  db writer process 0	     System I/O 	       234.3
DBW2  db writer process 2	     System I/O 	       234.3
DBW3  db writer process 3	     System I/O 	       232.7
LGWR  Redo etc. 		     System I/O 	       143.2
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
LGWR  Redo etc. 		     Other		       132.0
MMON  Manageability Monitor Process  Cluster			64.0
M     MMON slave class 1	     Cluster			38.7
LG    Log Writer Slave		     Other			28.2
				v_do_scan_query := TRUE;
SMON  System Monitor Process	     Other			25.0
M     MMON slave class 1	     Application		18.7
      Others (foregrounds + unclassi Configuration		10.8
CKPT  checkpoint		     System I/O 		10.5
				v_scan_query_quota := FALSE;
P     Parallel query slave	     Other			 8.2
M     MMON slave class 1	     Other			 6.9
      Others (foregrounds + unclassi Concurrency		 6.3
			  ------------------------------------------------------
			ELSE


Top Process Types by CPU Used	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> This table displays top process types ordered by CPU time

				IF ( v_scan_query_quota = FALSE ) THEN
Proces Description		      CPU Time (sec)
------ ------------------------------ --------------
       Others (foregrounds + unclassi	     2,651.1
LM     global cache service process	       975.0
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
DBW0   db writer process 0			57.9
DBW3   db writer process 3			57.6
DBW1   db writer process 1			57.5
DBW2   db writer process 2			57.3
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
VKTM   Virtual Keeper of TiMe process		46.4
RS*    GCS RM Slave				37.0
M      MMON slave class 1			15.5
LG     Log Writer Slave 			12.7
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
P      Parallel query slave			12.5
CR*    GCS CR Slave				12.4
LGWR   Redo etc.				 8.3
GCR    GCR Slaves (LMHB)			 5.9
DIA0   diagnosibility process 0 		 4.8
						v_do_scan_query := TRUE;
SCM    DLM Statistics Collection and		 4.7
IPC0   IPC Service 0				 4.3
RMS0   rac management server			 3.8
LMD0   global enqueue service daemon		 3.7
					ELSE
LMHB   lm heartbeat monitor			 2.3
			  ------------------------------------------------------


						v_do_scan_query := FALSE;
SQL ordered by Elapsed Time	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
					END IF;
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
				ELSE
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   95.7% of Total DB Time (s):	  140,700
-> Captured PL/SQL account for	 20.5% of Total DB Time (s):	     140,700

					-- Scan quota has been filled,	force drain some random access SELECTS
	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------
	79,969.2	    N/A 	  N/A	56.8	1.5    N/A 35dumc2tpr9dv
					v_do_scan_query := FALSE;
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

	54,540.1	    N/A 	  N/A	38.8	2.3    N/A bhdvtsvjhgvrh
				END IF;
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

	   546.8	      1        546.76	  .4	1.9    9.5 fpx8qau059b6k
Module: SQL*Plus
			END IF;
DECLARE v_default_schema_number PLS_INTEGER := '25'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
		END IF;
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

	   546.6	      1        546.60	  .4	1.8   10.0 dpgskpjbnxu8n
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '32'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_


	   546.6	      1        546.58	  .4	1.8    8.7 58vuprsfnw7af
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '65'; v_update_pct PLS_INTEGER :=
		IF ( v_do_scan_query != TRUE ) THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

			SELECT COUNT(c2) INTO v_rowcnt
	   545.8	      1        545.82	  .4	1.9    9.9 dk7wndm4trmxm
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '262'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
			FROM cf1
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   545.8	      1        545.81	  .4	1.8    9.1 59u1h8q0dn7kr
Module: SQL*Plus
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red

o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

	   545.8	      1        545.77	  .4	1.9    9.2 bp4mjh3dc1y4y
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '15'; v_update_pct PLS_INTEGER :=
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

		ELSE
	   545.7	      1        545.67	  .4	1.9    8.1 dnznjspycqrhh
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '174'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   545.4	      1        545.42	  .4	2.0    9.9 grnj9m41xzwyv

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

			v_scan_queries_cnt := v_scan_queries_cnt + 1;
SQL ordered by Elapsed Time	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.

-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   95.7% of Total DB Time (s):	  140,700
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
-> Captured PL/SQL account for	 20.5% of Total DB Time (s):	     140,700

	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
				v_scan_query_quota := TRUE;
---------------- -------------- ------------- ------ ------ ------ -------------
'600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

			END IF;
			  ------------------------------------------------------


SQL ordered by CPU Time 	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Resources reported for PL/SQL code includes the resources used by all SQL
		END IF;
   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   93.0% of Total CPU Time (s):	     2,660
-> Captured PL/SQL account for	 20.9% of Total CPU Time (s):		2,660

    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
   1,273.1	    N/A        N/A   47.9   54,540.1	2.3    N/A bhdvtsvjhgvrh

SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

   1,185.0	    N/A        N/A   44.5   79,969.2	1.5    N/A 35dumc2tpr9dv
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects

      11.2	      1      11.23    0.4      544.3	2.1    9.3 b2a4zdu00qd3v
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '249'; v_update_pct PLS_INTEGER :
	ELSE
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		--
      11.2	      1      11.23    0.4      543.4	2.1    9.3 3ga2c5w22k8p4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		-- Do an UPDATE statement
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

      11.2	      1      11.21    0.4      543.2	2.1    8.8 gta39sva2c0pj
		--
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '165'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      11.2	      1      11.15    0.4      544.9	2.0    7.8 f737cjs9htn1t
Module: SQL*Plus
		v_my_serial := v_my_serial + v_loop_cnt ;
DECLARE v_default_schema_number PLS_INTEGER := '444'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


      11.1	      1      11.13    0.4      544.1	2.0    7.7 1hh6k5cdprk6r
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '471'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		--
      11.1	      1      11.11    0.4      543.2	2.0    9.3 1ksjxx805vj29
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '168'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
		-- Increment count of UPDATES and set UPDATE quota flag if needed
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      11.1	      1      11.08    0.4      544.8	2.0    8.6 cnvn60d4ys1ym
Module: SQL*Plus
		--
DECLARE v_default_schema_number PLS_INTEGER := '462'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		v_updates_cnt := v_updates_cnt + 1;
      11.1	      1      11.07    0.4      544.6	2.0   10.9 4zg5m4p0nhv8x
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '361'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :


SQL ordered by CPU Time 	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   93.0% of Total CPU Time (s):	     2,660
			v_update_quota := TRUE;
-> Captured PL/SQL account for	 20.9% of Total CPU Time (s):		2,660

    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
		END IF;
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  ------------------------------------------------------

	END IF ;

SQL ordered by User I/O Wait Time      DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
----------------------------------------------------------------------------------------------------------------------
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for    0.0% of Total User I/O Wait Time (s):	      13
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
-> Captured PL/SQL account for	 19.9% of Total User I/O Wait Time (s):

  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
----------------------------------------------------------------------------------------------------------------------
      61.5	      1      61.49    0.5      542.7	2.0   11.3 3jkjssn33np0t
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '376'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :

= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      60.6	      1      60.62    0.5      544.2	2.0   11.1 gdsqn03xtayhg
Module: SQL*Plus
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '347'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		--

      59.2	      1      59.23    0.4      544.6	2.0   10.9 4zg5m4p0nhv8x
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '361'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		-- so reset flags and counters before continuing
      56.7	      1      56.75    0.4      545.2	1.8   10.4 f69ubn526tz3u
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '385'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
		--
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      56.2	      1      56.17    0.4      545.4	1.8   10.3 9wdas3v8sxd2f
Module: SQL*Plus
		v_update_quota := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '380'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		v_updates_cnt := 0;

      56.1	      1      56.11    0.4      544.9	1.8   10.3 0qjstdgx3hhpf
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '287'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
		v_selects_cnt := 0;
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      56.1	      1      56.11    0.4      542.8	2.0   10.3 2dc950rg2y3rq
Module: SQL*Plus
	END IF;
DECLARE v_default_schema_number PLS_INTEGER := '270'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


      55.0	      1      54.99    0.4      544.9	1.9   10.1 a4qy0pkfjru0y
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '369'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      54.9	      1      54.92    0.4      546.6	1.8   10.0 dpgskpjbnxu8n
Module: SQL*Plus
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
DECLARE v_default_schema_number PLS_INTEGER := '32'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

SQL ordered by User I/O Wait Time      DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Resources reported for PL/SQL code includes the resources used by all SQL
		-- so reset flags and counters
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
		v_scan_query_quota := FALSE;
-> Captured SQL account for    0.0% of Total User I/O Wait Time (s):	      13
-> Captured PL/SQL account for	 19.9% of Total User I/O Wait Time (s):

  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
		v_scan_queries_cnt := 0;
---------- ------------ ---------- ------ ---------- ------ ------ -------------
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

      54.8	      1      54.81    0.4      545.4	1.7   10.0 527xjy66n24d6
		v_random_access_queries_cnt := 0;
Module: SQL*Plus
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="6s1ku6bs9a8xb"></a>6s1ku6bs9a8xb</td><td class='awrnc'><pre_sqltext class="awr"> WITH ash as  (SELECT ash.event_id,   sum(decode(ash.session_type,  1,  1,  0)) as cnt_fg,   count(*) as cnt_total  FROM  WRH$_ACTIVE_SESSION_HISTORY ash  WHERE  ash.dbid = :dbid  AND ash.instance_number = :inst  AND ash.snap_id &gt; :bid AND ash.snap_id &lt;= :eid  AND  ash.wait_time = 0  GROUP BY ash.event_id  ),   evts as  (SELECT event_id,  sum(w_cnt) as w_cnt,	sum(to_cnt) as to_cnt,	 sum(w_time) as w_time	, sum(w_cnt_fg) as w_cnt_fg,  sum(to_cnt_fg) as to_cnt_fg,   sum(w_time_fg) as w_time_fg  FROM (SELECT es.event_id as event_id,   es.total_waits - nvl(bs.total_waits, 0) as w_cnt,   es.TOTAL_TIMEOUTS - nvl(bs.TOTAL_TIMEOUTS, 0) as to_cnt,	 es.TIME_WAITED_MICRO - nvl(bs.TIME_WAITED_MICRO, 0)  as w_time  , es.total_waits_fg - nvl(bs.total_waits_fg, 0)  as w_cnt_fg,	 es.TOTAL_TIMEOUTS_FG - nvl(bs.TOTAL_TIMEOUTS_FG, 0)  as to_cnt_fg,   es.TIME_WAITED_MICRO_FG - nvl(bs.TIME_WAITED_MICRO_FG, 0)  as w_time_fg  FROM  WRH$_SYSTEM_EVENT es ,  WRH$_SYSTEM_EVENT bs  WHERE  es.dbid = :dbid  AND es.instance_number = :inst  AND es.snap_id = :eid  AND bs.dbid(+) = :dbid AND bs.instance_number(+) = es.instance_number AND bs.snap_id(+) = :bid  AND  es.instance_number = bs.instance_number(+)  AND	es.event_id = bs.event_id(+)  UNION ALL  SELECT x.event_hash as event_id,   0 as w_cnt,  0 as to_cnt,  0 as w_time  , 0 as w_cnt_fg,  0 as to_cnt_fg,  0 as w_time_fg  FROM  X$KEHEVTMAP x  )  GROUP BY event_id  ),   awr_names as  (SELECT e.event_id,  max(e.event_name) as event_name,	     max(e.wait_class_id) as wait_class_id,	      max(e.wait_class) as wait_class,		 max(e.parameter1) as parameter1,	    max(e.parameter2) as parameter2,	       max(e.parameter3) as parameter3	FROM  WRH$_EVENT_NAME e  WHERE e.dbid = :dbid GROUP BY e.event_id  ),	named_events as  (SELECT names.event_id as event_id,   names.event_name as event_name,	 evts.w_cnt as w_cnt,	evts.to_cnt as to_cnt,	 evts.w_time as w_time,   evts.w_cnt_fg as w_cnt_fg,   evts.to_cnt_fg as to_cnt_fg,   evts.w_time_fg as w_time_fg,   names.wait_class_id as wait_class_id,   names.parameter1 as p1,   names.parameter2 as p2,	 names.parameter3 as p3  FROM	evts,  awr_names names	WHERE  evts.event_id = names.event_id  AND  names.wait_class_id &lt;&gt; 2723168908  ),   data as  (SELECT e.event_id as event_id,   e.event_name as event_name,   e.wait_class_id as wait_class_id,   e.p1 as p1,   e.p2 as p2,   e.p3 as p3,	 e.w_cnt as total_w_cnt,   e.to_cnt as total_to_cnt,   e.w_time as total_w_time,   e.w_cnt_fg as fg_w_cnt,   e.to_cnt_fg as fg_to_cnt,	 e.w_time_fg as fg_w_time,   nvl(a.cnt_total, 0) as total_ash_cnt,   nvl(a.cnt_fg, 0) as fg_ash_cnt  FROM   named_events e,  ash a  WHERE  e.event_id  = a.event_id(+)	),   final_query as  (SELECT d.event_name,   d.event_id,   d.p1 as p1,	 case when (p1 is null OR p1 = '0')  then 0 else 1 end as p1valid,   d.p2 as p2,   case when (p2 is null OR p2 = '0')  then 0 else 1 end as p2valid,   d.p3 as p3,   case when (p3 is null OR p3 = '0')  then 0 else 1 end as p3valid,	 nvl(e.keh_id, 0) as keh_evt_id,   c.class# as class_num,   d.wait_class_id as wait_class_id,	c.keh_id as keh_ecl_id,   round(d.total_ash_cnt, 0) as total_ash_cnt,	round(d.fg_ash_cnt, 0) as fg_ash_cnt,	round(d.fg_w_cnt, 0) as fg_w_cnt,   round(d.fg_to_cnt, 0) as fg_to_cnt,   round(d.fg_w_time, 0) as fg_w_time,	round(d.total_w_cnt, 0) as total_w_cnt,   round(d.total_to_cnt, 0) as total_to_cnt,   round(d.total_w_time, 0) as total_w_time	from data d,   X$KEHEVTMAP e ,	X$KEHECLMAP c  where d.event_id = e.event_hash(+)  and d.wait_class_id = c.class_hash  )  SELECT *  FROM   final_query	WHERE  keh_evt_id &gt; 0 OR total_w_time &gt; 0  ORDER BY wait_class_id,  fg_w_time DESC,  event_id </pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="6wvzvgvg6qsyb"></a>6wvzvgvg6qsyb</td><td class='awrc'><pre_sqltext class="awr">INSERT INTO wri$_adv_findings (id,  task_id,  type,  parent,  obj_id,  impact_msg_id,  impact_val,  msg_id,  more_info_id,  name_msg_code,  flags,  exec_name) VALUES (:1,  :2,  :3,  :4,	:5,  :6,  :7, :8,  :9,	:10,  :11,  :12) </pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="7hc9uvs2016m6"></a>7hc9uvs2016m6</td><td class='awrnc'><pre_sqltext class="awr">insert into svcobj_access$(name,  pdb,  tsn,  objid,  accesses,	inc_no) values (:1,  :2,  :3,  :4,  :5,  :6)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="87gaftwrm2h68"></a>87gaftwrm2h68</td><td class='awrc'><pre_sqltext class="awr">select o.owner#, o.name, o.namespace, o.remoteowner, o.linkname, o.subname from obj$ o where o.obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="87mtr3gbck7dm"></a>87mtr3gbck7dm</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '48';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
DECLARE v_default_schema_number PLS_INTEGER := '283'; v_update_pct PLS_INTEGER :
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_redo_stress  VARCHAR2(12) := 'LITE';

			  ------------------------------------------------------


v_hot_schema_modulus PLS_INTEGER := '0';
SQL ordered by Gets		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
v_do_hotspot   VARCHAR(7) := 'FALSE';
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

-> %CPU   - CPU Time	  as a percentage of Elapsed Time
v_sleep_modulus PLS_INTEGER := '0';
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Buffer Gets:	   17,727,484
-> Captured SQL account for    0.4% of Total
v_sleep_min NUMBER := '.1';

     Buffer		    Gets	      Elapsed
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
v_sleep_max NUMBER := '.5';
----------- ----------- ------------ ------ ---------- ----- ----- -------------
     79,495	      1     79,495.0	0.4	 543.2	 2.1   8.8 gta39sva2c0pj
Module: SQL*Plus
v_scan_query_pct PLS_INTEGER := '0';
DECLARE v_default_schema_number PLS_INTEGER := '165'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
v_obfuscate VARCHAR(5)	:= 'FALSE';
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     77,938	      1     77,938.0	0.4	 543.4	 2.1   9.3 3ga2c5w22k8p4
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

     77,813	      1     77,813.0	0.4	 544.9	   2   7.8 f737cjs9htn1t
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '444'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


     77,143	      1     77,143.0	0.4	 544.3	 2.1   9.3 b2a4zdu00qd3v
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '249'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
v_num_tmp NUMBER := 0;
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


     76,953	      1     76,953.0	0.4	 543.9	   2   8.9 5v7mdgpz8yna4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '250'; v_update_pct PLS_INTEGER :
v_loop_cnt PLS_INTEGER := 0;
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_rowcnt PLS_INTEGER := 0;
     76,091	      1     76,091.0	0.4	 543.6	   2   9.3 f1g58g2a3cyvm
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '28'; v_update_pct PLS_INTEGER :=
v_updates_cnt PLS_INTEGER := 0;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_
v_selects_cnt PLS_INTEGER := 0;

     74,795	      1     74,795.0	0.4	 544.8	   2   8.6 2zvxtcksvbjq1
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '170'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_random_access_queries_cnt PLS_INTEGER := 0;
     74,720	      1     74,720.0	0.4	 543.2	   2   9.3 1ksjxx805vj29
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '168'; v_update_pct PLS_INTEGER :
v_scan_queries_cnt PLS_INTEGER := 0;
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


     74,568	      1     74,568.0	0.4	 544.1	   2	 9 3kka3cf9mv6y5
Module: SQL*Plus
v_do_scan_query BOOLEAN :=FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '248'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :

v_scan_query_quota  BOOLEAN := FALSE;
SQL ordered by Gets		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
v_scan_workload_only BOOLEAN := FALSE;
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
v_random_workload_only BOOLEAN := FALSE;
-> Total Buffer Gets:	   17,727,484
-> Captured SQL account for    0.4% of Total

     Buffer		    Gets	      Elapsed

      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     74,111	      1     74,111.0	0.4	 544.8	   2   8.6 cnvn60d4ys1ym
v_random_block PLS_INTEGER := 1;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '462'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
v_tmp PLS_INTEGER;
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  ------------------------------------------------------
v_now PLS_INTEGER;


SQL ordered by Reads		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> %Total - Physical Reads as a percentage of Total Disk Reads
v_brick_wall PLS_INTEGER;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	  14,932,774

-> Captured SQL account for    0.0% of Total

   Physical		 Reads		    Elapsed
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
v_begin_time PLS_INTEGER;
----------- ----------- ---------- ------ ---------- ------ ------ -------------
     67,077	      1   67,077.0    0.4      544.9	2.0    7.8 f737cjs9htn1t
Module: SQL*Plus
v_end_time PLS_INTEGER;
DECLARE v_default_schema_number PLS_INTEGER := '444'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
v_total_time PLS_INTEGER;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     64,150	      1   64,150.0    0.4      543.2	2.1    8.8 gta39sva2c0pj
Module: SQL*Plus
v_begin_cpu_tm PLS_INTEGER;
DECLARE v_default_schema_number PLS_INTEGER := '165'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
v_end_cpu_tm PLS_INTEGER;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     63,951	      1   63,951.0    0.4      544.3	2.1    9.3 b2a4zdu00qd3v
Module: SQL*Plus
v_total_cpu_tm PLS_INTEGER;
DECLARE v_default_schema_number PLS_INTEGER := '249'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     63,773	      1   63,773.0    0.4      543.4	2.1    9.3 3ga2c5w22k8p4
Module: SQL*Plus
v_do_sleeps BOOLEAN := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
v_loop_control BOOLEAN := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_update_quota BOOLEAN := FALSE;
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_
v_select_only_workload BOOLEAN := FALSE;

     63,337	      1   63,337.0    0.4      544.2	2.0   11.1 gdsqn03xtayhg
v_update_only_workload BOOLEAN := FALSE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '347'; v_update_pct PLS_INTEGER :
v_do_update BOOLEAN := FALSE;
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
v_do_hot_schema BOOLEAN := FALSE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     63,304	      1   63,304.0    0.4      544.1	2.0    7.7 1hh6k5cdprk6r
Module: SQL*Plus
v_stop_immediate BOOLEAN := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '471'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
v_sharing_schema BOOLEAN := FALSE;
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
v_seed VARCHAR2(128);
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_home_schema_str VARCHAR2(80);
     63,017	      1   63,017.0    0.4      544.6	2.0   10.9 4zg5m4p0nhv8x
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '361'; v_update_pct PLS_INTEGER :
v_scratch VARCHAR2(200) ;
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :

= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
v_cpu_pct NUMBER(6, 3);
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     62,960	      1   62,960.0    0.4      544.8	2.0    8.6 cnvn60d4ys1ym
v_my_serial NUMBER(16);
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '462'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :

= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     62,882	      1   62,882.0    0.4      545.2	2.0    8.6 b44btzb64d14v
BEGIN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '464'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :


SQL ordered by Reads		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	  14,932,774
-> Captured SQL account for    0.0% of Total

EXECUTE IMMEDIATE v_home_schema_str;
   Physical		 Reads		    Elapsed
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------

= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     62,879	      1   62,879.0    0.4      543.2	2.0    9.3 1ksjxx805vj29

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '168'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
IF ( v_hot_schema_modulus != 0 ) THEN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  ------------------------------------------------------

	v_do_hot_schema := TRUE;

SQL ordered by Physical Reads (UnOptimized)DB/Inst: P60SDB/p60sdb1  Snaps: 135
-> UnOptimized Read Reqs = Physical Read Reqs -
END IF;
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs

-> Total Physical Read Requests:      14,932,644
-> Captured SQL account for    0.0% of Total
-> Total UnOptimized Read Requests:	 14,932,644
-> Captured SQL account for    0.0% of Total
IF ( v_sleep_modulus != 0 )	  THEN
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total

UnOptimized   Physical		    UnOptimized
	v_do_sleeps := TRUE;
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
----------- ----------- ---------- ------------ ------ ------ -------------
     67,077	 67,077 	 1     67,077.0    0.0	  0.4 f737cjs9htn1t
END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '444'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :

= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     64,150	 64,150 	 1     64,150.0    0.0	  0.4 gta39sva2c0pj
IF ( v_max_loop_iterations &gt; 0 )  THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '165'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
	v_loop_control := TRUE ;
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

END IF;
     63,951	 63,951 	 1     63,951.0    0.0	  0.4 b2a4zdu00qd3v
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '249'; v_update_pct PLS_INTEGER :

= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

IF ( v_update_pct = 0 ) 	  THEN
     63,773	 63,773 	 1     63,773.0    0.0	  0.4 3ga2c5w22k8p4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	v_select_only_workload := TRUE;
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

END IF;
     63,337	 63,337 	 1     63,337.0    0.0	  0.4 gdsqn03xtayhg
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '347'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :

= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     63,304	 63,304 	 1     63,304.0    0.0	  0.4 1hh6k5cdprk6r
IF ( v_update_pct = 100 )	  THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '471'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
	v_update_only_workload := TRUE;
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     63,017	 63,017 	 1     63,017.0    0.0	  0.4 4zg5m4p0nhv8x
END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '361'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :

= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     62,960	 62,960 	 1     62,960.0    0.0	  0.4 cnvn60d4ys1ym
IF ( v_scan_query_pct = 0 ) 	THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '462'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
	v_random_workload_only := TRUE;
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

END IF;
     62,882	 62,882 	 1     62,882.0    0.0	  0.4 b44btzb64d14v
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '464'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :


SQL ordered by Physical Reads (UnOptimized)DB/Inst: P60SDB/p60sdb1  Snaps: 135
-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
IF ( v_scan_query_pct = 100 ) 	THEN
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
-> Total Physical Read Requests:      14,932,644
	v_scan_workload_only := TRUE;
-> Captured SQL account for    0.0% of Total
-> Total UnOptimized Read Requests:	 14,932,644
-> Captured SQL account for    0.0% of Total
-> Total Optimized Read Requests:		1
END IF;
-> Captured SQL account for    0.0% of Total

UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id

----------- ----------- ---------- ------------ ------ ------ -------------
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_seconds_to_run := v_seconds_to_run * 100 ;
     62,879	 62,879 	 1     62,879.0    0.0	  0.4 1ksjxx805vj29
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '168'; v_update_pct PLS_INTEGER :

= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
			  ------------------------------------------------------



-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
SQL ordered by Executions	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-- DBMS_RANDOM.seed (val =&gt; v_seed);
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Executions:	     279,199
-> Captured SQL account for    4.0% of Total


					      Elapsed
 Executions   Rows Processed  Rows per Exec   Time (s)	%CPU   %IO    SQL Id
------------ --------------- -------------- ---------- ----- ----- -------------
       5,120	       4,857		0.9	   0.4	95.4	 0 24djtk7r8fz33
v_begin_time := DBMS_UTILITY.GET_TIME();
update svcobj_access$ set accesses = :5, inc_no = :6 where name = :1 AND pdb = :
2 AND tsn = :3 AND objid = :4

       1,680		   9		0.0	   0.1	93.9   1.3 2p9fv35c7zxtg
v_now := v_begin_time ;
select /* KSXM:LOAD_DML_INF *//*+ leading(o) index(m) use_nl(m) */ nv
l(m.inserts, 0) ins, nvl(m.updates, 0) upd, nvl(m.deletes, 0) del, nvl(
m.drop_segments, 0) dropseg, nvl(m.flags, 0) flags, nvl(ro
wcnt, 0) rowcnt, o.pobjn pobjn from
v_brick_wall := v_now + v_seconds_to_run ;

       1,022		 197		0.2	   0.0 100.3	 0 87gaftwrm2h68
select o.owner#,o.name,o.namespace,o.remoteowner,o.linkname,o.subname from obj$
o where o.obj#=:1
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

	 425		 417		1.0	   0.2	43.4   1.9 9tgj4g8y4rwy8
select type#,blocks,extents,minexts,maxexts,extsize,extpct,user#,iniexts,NVL(lis
ts,65535),NVL(groups,65535),cachehint,hwmincr, NVL(spare1,0),NVL(scanhint,0),NVL
(bitmapranges,0) from seg$ where ts#=:1 and file#=:2 and block#=:3

	 361		   5		0.0	   0.0	87.2	 0 0gx3b09qrx9f5
select obj#,index# from oid$ where user#=:1 and oid$=:2

	 325		 300		0.9	   0.0	87.5   4.3 acmvv4fhdc9zh
select obj#,type#,ctime,mtime,stime, status, dataobj#, flags, oid$, spare1, spar

e2, spare3, signature, spare7, spare8, spare9, nvl(dflcollid, 16382), creappid,
creverid, modappid, modverid, crepatchid, modpatchid from obj$ where owner#=:1 a
nd name=:2 and namespace=:3 and remoteowner is null and linkname is null and sub

----------------------------------------------------------------------------------------------------------------------
	 320		 320		1.0	   0.1	97.7	 0 3dbzmtf9ahvzt
merge /* KSXM:OPTIM_DML_INF */ into sys.mon_mods_all$ m using
 dual on (m.obj#
 = :objn and (:pobjn = 0
 or m.obj# = :pobjn
-- The following WHILE loop is the master work loop control

	 263		 263		1.0	   0.0	99.7	 0 7hc9uvs2016m6
insert into svcobj_access$(name, pdb, tsn, objid, accesses, inc_no) values (:1,
:2, :3, :4, :5, :6)

----------------------------------------------------------------------------------------------------------------------
	 249		 249		1.0	   0.1	89.3	 0 5cu0x10yu88sw
merge into sys.wri$_index_usage iu us
ing dual on (
iu.obj# = :objn) when mat
ched then update
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	 249		 249		1.0	   0.3	  52   1.4 9babjv8yq8ru3
Module: SQL*Plus
BEGIN DBMS_OUTPUT.GET_LINES(:LINES, :NUMLINES); END;


			  ------------------------------------------------------

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME

SQL ordered by Parse Calls	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
-> Total Parse Calls:	       11,400
-> Captured SQL account for   81.5% of Total
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );

			    % Total
 Parse Calls  Executions     Parses    SQL Id
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
------------ ------------ --------- -------------
       5,120	    5,120     44.91 24djtk7r8fz33
			DBMS_LOCK.SLEEP(v_num_tmp);
update svcobj_access$ set accesses = :5, inc_no = :6 where name = :1 AND pdb = :
2 AND tsn = :3 AND objid = :4

		END IF;
       1,680	    1,680     14.74 2p9fv35c7zxtg
select /* KSXM:LOAD_DML_INF *//*+ leading(o) index(m) use_nl(m) */ nv
	END IF;
l(m.inserts, 0) ins, nvl(m.updates, 0) upd, nvl(m.deletes, 0) del, nvl(
m.drop_segments, 0) dropseg, nvl(m.flags, 0) flags, nvl(ro

wcnt, 0) rowcnt, o.pobjn pobjn from

	 320	      320      2.81 3dbzmtf9ahvzt
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
merge /* KSXM:OPTIM_DML_INF */ into sys.mon_mods_all$ m using
 dual on (m.obj#
 = :objn and (:pobjn = 0
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
 or m.obj# = :pobjn

			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
	 263	      263      2.31 7hc9uvs2016m6
insert into svcobj_access$(name, pdb, tsn, objid, accesses, inc_no) values (:1,
			v_sharing_schema := TRUE ;
:2, :3, :4, :5, :6)

	 249	      249      2.18 5cu0x10yu88sw
		ELSE
merge into sys.wri$_index_usage iu us
ing dual on (
iu.obj# = :objn) when mat
			IF ( v_sharing_schema = TRUE ) THEN
ched then update

	 249	      249      2.18 9babjv8yq8ru3
				EXECUTE IMMEDIATE v_home_schema_str;
Module: SQL*Plus
BEGIN DBMS_OUTPUT.GET_LINES(:LINES, :NUMLINES); END;

				v_sharing_schema := FALSE;
	 163	      425      1.43 9tgj4g8y4rwy8
select type#,blocks,extents,minexts,maxexts,extsize,extpct,user#,iniexts,NVL(lis
			END IF;
ts,65535),NVL(groups,65535),cachehint,hwmincr, NVL(spare1,0),NVL(scanhint,0),NVL
(bitmapranges,0) from seg$ where ts#=:1 and file#=:2 and block#=:3

		END IF;
	 148	      361      1.30 0gx3b09qrx9f5
	END IF;
select obj#,index# from oid$ where user#=:1 and oid$=:2

	 115	      115      1.01 f80h0xb1qvbsk

SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	 103	      103      0.90 d96u6hzrz93x5
Module: SQL*Plus
select con_id from v$containers where open_mode in ('READ WRITE', 'READ ONLY
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
')


			  ------------------------------------------------------


SQL ordered by Sharable Memory	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Only Statements with Sharable Memory greater than 1048576 are displayed
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot

Sharable Mem (b)  Executions   % Total	  SQL Id
---------------- ------------ -------- -------------
      70,580,784	  N/A	  1.48 3q5nfyq3x1gu4
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
INSERT /*+ APPEND */ INTO cf2 SELECT * FROM user1.cf2 ORDER BY DBMS_RANDOM.VALUE
()

      17,597,897	   11	  0.37 9yv5dwv8k0awg
WITH MONITOR_DATA AS (SELECT INST_ID, KEY, NVL2(PX_QCSID, NULL, STATUS) STATUS,
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
FIRST_REFRESH_TIME, LAST_REFRESH_TIME, REFRESH_COUNT, PROCESS_NAME, SID, SQL_ID,
 SQL_EXEC_START, SQL_EXEC_ID, DBOP_NAME, DBOP_EXEC_ID, SQL_PLAN_HASH_VALUE, SQL_
FULL_PLAN_HASH_VALUE, SESSION_SERIAL#, SQL_TEXT, PX_SERVER#, PX_SERVER_GROUP, PX

       9,102,128	  N/A	  0.19 cytuv95rat5h1
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
LOCK TABLE "CF1" IN EXCLUSIVE MODE NOWAIT

       8,067,600	  N/A	  0.17 35dumc2tpr9dv
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )
	END IF;

       7,057,728	  N/A	  0.15 bhdvtsvjhgvrh
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


       4,177,876	   11	  0.09 atwuyuvqkf27w
SELECT /*+ OPT_PARAM('_fix_control' '16391176:1') */ GROUP_TYPE, BUCKET_START, B
UCKET_END, TM_GROUP_TYPE, TM_BUCKET_START, TM_BUCKET_END, SUM(TM_CPU_FIRST_BUCKE
T_VALUE) TM_CPU_FIRST_BUCKET_VALUE, SUM(TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDD
----------------------------------------------------------------------------------------------------------------------
LE_BUCKETS_VALUE, SUM(TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE, SUM(TM

       1,192,748	    0	  0.02 fg11facbfjwvx
 SELECT /*+ no_monitor leading(mo_px) use_hash(mo_px) */ xm
lelement( "sql_monitor_list_report", xmlattributes(
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
 :report_version as "version",
 :total_count as "total_count", to

			  ------------------------------------------------------


SQL ordered by Version Count	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
----------------------------------------------------------------------------------------------------------------------
-> Only Statements with Version Count greater than 20 are displayed

 Version
  Count   Executions	 SQL Id
-------- ------------ -------------

     940	  N/A cytuv95rat5h1
LOCK TABLE "CF1" IN EXCLUSIVE MODE NOWAIT

     696	  N/A 3q5nfyq3x1gu4
	IF  ( v_select_only_workload = TRUE ) THEN
INSERT /*+ APPEND */ INTO cf2 SELECT * FROM user1.cf2 ORDER BY DBMS_RANDOM.VALUE
()

     249	  N/A 35dumc2tpr9dv
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
		-- handle case where user specified zero pct updates (a SELECT-only workload)
< :B1 )

     249	  N/A bhdvtsvjhgvrh
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

		v_do_update := FALSE;
			  ------------------------------------------------------


SQL ordered by Cluster Wait Time       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
		v_update_quota := TRUE ;
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
	ELSE
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	126,171
-> Captured SQL account for    0.0% of Total

		IF ( v_update_only_workload = TRUE ) THEN
       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
	 497.6		  1    0.4	544.9	91.3	2.0    7.8 f737cjs9htn1t
			-- handle case where user specified 100% updates
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '444'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
			v_do_update := TRUE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 496.6		  1    0.4	544.5	91.2	2.0    7.4 96mhm2vpjm2m8
Module: SQL*Plus
			v_update_quota := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '454'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		ELSE

	 495.5		  1    0.4	544.0	91.1	2.0    7.6 bch1n63zxk221
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '475'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 494.5		  1    0.4	544.1	90.9	2.0    7.7 1hh6k5cdprk6r
Module: SQL*Plus
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
DECLARE v_default_schema_number PLS_INTEGER := '471'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
			IF ( v_update_quota = FALSE ) THEN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 494.3		  1    0.4	545.7	90.6	1.9    8.1 dnznjspycqrhh
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '174'; v_update_pct PLS_INTEGER :
				-- Handle case where user has set UPDATE_PCT to a valid value
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

				--
	 492.3		  1    0.4	544.6	90.4	2.0    8.4 50zr91aba0jmn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '452'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
				-- We are doing updates during this run and quota has not been met yet
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 492.1		  1    0.4	546.6	90.0	1.8    8.7 58vuprsfnw7af
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '65'; v_update_pct PLS_INTEGER :=
				-- We still vacillate until update quota has been met
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_


	 491.7		  1    0.4	544.9	90.2	1.8    8.5 98xtrn0z3vxbw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '239'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
				IF ( MOD(v_random_block,  2) = 0 ) THEN
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 490.7		  1    0.4	545.0	90.0	1.8    8.6 fb4bu20sm75kp
Module: SQL*Plus
					v_do_update := TRUE;
DECLARE v_default_schema_number PLS_INTEGER := '142'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :

				ELSE
SQL ordered by Cluster Wait Time       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
					v_do_update := FALSE;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	126,171
				END IF;
-> Captured SQL account for    0.0% of Total

       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
			ELSE
-------------- ------------ ------ ---------- ------ ------ ------ -------------
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 490.6		  1    0.4	544.8	90.1	2.0    8.6 2zvxtcksvbjq1
				-- UPDATE quota has been filled,  force drain some SELECTs
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '170'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
				v_do_update := FALSE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 490.2		  1    0.4	545.2	89.9	1.8    8.8 dr1s7n6r0tysn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '81'; v_update_pct PLS_INTEGER :=
			END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

		END IF;
	 489.9		  1    0.4	545.2	89.9	2.0    8.6 b44btzb64d14v
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '464'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
	END IF;
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 489.6		  1    0.4	545.2	89.8	1.9    8.8 asqv36zpxvan4
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '173'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

----------------------------------------------------------------------------------------------------------------------
	 489.0		  1    0.4	543.9	89.9	2.0    8.9 5v7mdgpz8yna4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '250'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
-- The type of SQL is now determined...execute it in the following section
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 488.4		  1    0.4	543.8	89.8	2.0    9.1 9gc8rpw0b3fxs
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '443'; v_update_pct PLS_INTEGER :
----------------------------------------------------------------------------------------------------------------------
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


	 488.3		  1    0.4	542.6	90.0	2.0    8.0 9pxprtmxz7nuc
Module: SQL*Plus
	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

DECLARE v_default_schema_number PLS_INTEGER := '474'; v_update_pct PLS_INTEGER :
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
	ELSE
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 488.2		  1    0.4	544.8	89.6	2.0    8.6 cnvn60d4ys1ym
Module: SQL*Plus
		--
DECLARE v_default_schema_number PLS_INTEGER := '462'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
		-- Do an UPDATE statement
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		--
	 488.1		  1    0.4	544.1	89.7	2.0    9.0 3kka3cf9mv6y5


SQL ordered by Cluster Wait Time       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
		v_my_serial := v_my_serial + v_loop_cnt ;
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time

-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	126,171
-> Captured SQL account for    0.0% of Total

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
		--
-------------- ------------ ------ ---------- ------ ------ ------ -------------
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '248'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
		-- Increment count of UPDATES and set UPDATE quota flag if needed
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		--
	 488.0		  1    0.4	545.1	89.5	1.9    9.1 87mtr3gbck7dm
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '48'; v_update_pct PLS_INTEGER :=
		v_updates_cnt := v_updates_cnt + 1;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_


	 487.7		  1    0.4	543.4	89.8	2.1    9.3 3ga2c5w22k8p4
Module: SQL*Plus
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
			v_update_quota := TRUE;
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

	 487.6		  1    0.4	545.1	89.5	1.9    9.5 5vyhw99fk7s8b
Module: SQL*Plus
		END IF;
DECLARE v_default_schema_number PLS_INTEGER := '148'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
	END IF ;
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 487.5		  1    0.4	545.8	89.3	1.8    9.1 59u1h8q0dn7kr
----------------------------------------------------------------------------------------------------------------------
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

	 486.7		  1    0.4	545.8	89.2	1.9    9.2 bp4mjh3dc1y4y
----------------------------------------------------------------------------------------------------------------------
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '15'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

	 486.5		  1    0.4	542.6	89.7	2.0    8.8 57n9vv9q5q4md
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
Module: SQL*Plus
		--
DECLARE v_default_schema_number PLS_INTEGER := '445'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 486.4		  1    0.4	546.8	89.0	1.9    9.5 fpx8qau059b6k
		-- so reset flags and counters before continuing
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '25'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		--
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

		v_update_quota := FALSE;
	 486.2		  1    0.4	545.3	89.2	1.8    9.3 5mqxkupnn07c1
Module: SQL*Plus
		v_updates_cnt := 0;
DECLARE v_default_schema_number PLS_INTEGER := '49'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
		v_selects_cnt := 0;

	END IF;

SQL ordered by Cluster Wait Time       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
-> Total Cluster Wait Time (s): 	126,171
-> Captured SQL account for    0.0% of Total

		-- so reset flags and counters
       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
		v_scan_query_quota := FALSE;
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

	 486.2		  1    0.4	544.9	89.2	1.8    8.7 0sfyku115gc35
Module: SQL*Plus
		v_scan_queries_cnt := 0;
DECLARE v_default_schema_number PLS_INTEGER := '139'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
		v_random_access_queries_cnt := 0;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 485.6		  1    0.4	544.9	89.1	1.9    9.8 5hkjnb8twmhc4
	END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '9'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

'600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	 485.4		  1    0.4	543.2	89.4	2.0    9.3 1ksjxx805vj29
	v_loop_cnt := v_loop_cnt + 1 ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '168'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
	v_now := DBMS_UTILITY.GET_TIME();
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


	 485.2		  1    0.4	545.4	89.0	2.0    9.9 grnj9m41xzwyv
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
'600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	 485.0		  1    0.4	543.2	89.3	2.1    8.8 gta39sva2c0pj
		-- If this is a fixed-iteration count test cycle and we've hit the number of
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '165'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
		-- iterations then set exit flag
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 484.5		  1    0.4	543.6	89.1	2.0    9.3 f1g58g2a3cyvm
		v_stop_immediate := TRUE ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '28'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	END IF;
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

END LOOP;
	 484.5		  1    0.4	544.3	89.0	2.1    9.3 b2a4zdu00qd3v
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '249'; v_update_pct PLS_INTEGER :

= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_end_time := v_now ;
	 484.3		  1    0.4	545.0	88.9	1.9    9.5 15q1bvqf7bwak
Module: SQL*Plus
v_now := DBMS_UTILITY.GET_TIME();
DECLARE v_default_schema_number PLS_INTEGER := '258'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 484.2		  1    0.4	543.3	89.1	2.0    9.3 15mtdbsgq41ny
Module: SQL*Plus


SQL ordered by Cluster Wait Time       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
v_total_time := v_end_time - v_begin_time ;
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
-> Total Cluster Wait Time (s): 	126,171
-> Captured SQL account for    0.0% of Total

       Cluster			      Elapsed
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '55'; v_update_pct PLS_INTEGER :=
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_


	 483.9		  1    0.4	546.6	88.5	1.8   10.0 dpgskpjbnxu8n
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '32'; v_update_pct PLS_INTEGER :=
END;</pre_sqltext></td></tr>
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

<tr><td scope="row" class='awrc'><a class="awr" name="8abaypcq9z8hg"></a>8abaypcq9z8hg</td><td class='awrc'><pre_sqltext class="awr">DECLARE
	 483.9		  1    0.4	543.1	89.1	2.0    9.4 f4pt6jq32984z
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '166'; v_update_pct PLS_INTEGER :
v_default_schema_number PLS_INTEGER := '355';
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_update_pct PLS_INTEGER := '15';
	 483.6		  1    0.4	545.8	88.6	1.9    9.9 dk7wndm4trmxm
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '262'; v_update_pct PLS_INTEGER :
v_max_loop_iterations PLS_INTEGER := '0';
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_seconds_to_run PLS_INTEGER := '600';
	 483.1		  1    0.4	545.4	88.6	1.8   10.3 9wdas3v8sxd2f
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '380'; v_update_pct PLS_INTEGER :
v_scale PLS_INTEGER := '131072';
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_work_unit PLS_INTEGER := '64' ;
	 482.6		  1    0.4	542.7	88.9	2.0    9.6 5mb968t41yxfr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '53'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_redo_stress  VARCHAR2(12) := 'LITE';
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

v_hot_schema_modulus PLS_INTEGER := '0';
	 482.0		  1    0.4	544.9	88.5	1.8   10.0 8abaypcq9z8hg
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '355'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
v_do_hotspot   VARCHAR(7) := 'FALSE';
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 481.8		  1    0.4	545.4	88.3	1.7   10.0 527xjy66n24d6
v_hotspot_mb  NUMBER := '8';
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '283'; v_update_pct PLS_INTEGER :
v_hotspot_offset_mb NUMBER := '16';
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_hotspot_modulus  PLS_INTEGER := '3';
	 481.6		  1    0.4	544.0	88.5	2.0    9.9 axz2uh61fq467
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '167'; v_update_pct PLS_INTEGER :

= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_sleep_modulus PLS_INTEGER := '0';

SQL ordered by Cluster Wait Time       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
v_sleep_min NUMBER := '.1';
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
v_sleep_max NUMBER := '.5';
-> Total Cluster Wait Time (s): 	126,171
-> Captured SQL account for    0.0% of Total

       Cluster			      Elapsed
v_scan_query_pct PLS_INTEGER := '0';
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------

	 481.6		  1    0.4	545.2	88.3	1.8   10.4 f69ubn526tz3u
v_obfuscate VARCHAR(5)	:= 'FALSE';
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '385'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :

= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


	 480.9		  1    0.4	545.1	88.2	1.7    9.7 1967g3sxuhkdf
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '383'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 480.4		  1    0.4	543.8	88.3	2.0    9.6 dgcrydsuha4r3
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '472'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :

= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 479.7		  1    0.4	542.8	88.4	2.0   10.3 2dc950rg2y3rq
v_num_tmp NUMBER := 0;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '270'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :

= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 479.4		  1    0.4	544.9	88.0	1.8   10.3 0qjstdgx3hhpf
v_loop_cnt PLS_INTEGER := 0;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '287'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
v_rowcnt PLS_INTEGER := 0;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 479.2		  1    0.4	544.9	87.9	1.8    9.9 ga8nw4v3u99km
Module: SQL*Plus
v_updates_cnt PLS_INTEGER := 0;
DECLARE v_default_schema_number PLS_INTEGER := '2'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_redo
v_selects_cnt PLS_INTEGER := 0;
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	 478.5		  1    0.4	544.6	87.9	2.0   10.9 4zg5m4p0nhv8x
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '361'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
v_random_access_queries_cnt PLS_INTEGER := 0;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 477.5		  1    0.4	544.2	87.7	2.0   11.1 gdsqn03xtayhg
v_scan_queries_cnt PLS_INTEGER := 0;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '347'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 476.3		  1    0.4	544.9	87.4	1.9   10.1 a4qy0pkfjru0y
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '369'; v_update_pct PLS_INTEGER :
v_do_scan_query BOOLEAN :=FALSE;

SQL ordered by Cluster Wait Time       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
v_scan_query_quota  BOOLEAN := FALSE;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	126,171
v_scan_workload_only BOOLEAN := FALSE;
-> Captured SQL account for    0.0% of Total

       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
v_random_workload_only BOOLEAN := FALSE;
-------------- ------------ ------ ---------- ------ ------ ------ -------------
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 473.1		  1    0.4	542.7	87.2	2.0   11.3 3jkjssn33np0t
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '376'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_random_block PLS_INTEGER := 1;

	  35.1		101    0.0	 59.2	59.2	1.7    6.4 8fgdzmkchnn1a
INSERT /*+ APPEND LEADING(@"SEL$F5BB74E1" "H"@"SEL$2" "A"@"SEL$1") USE_NL(@"SE
L$F5BB74E1" "A"@"SEL$1") */ INTO WRH$_ACTIVE_SESSION_HISTORY ( snap_id
v_tmp PLS_INTEGER;
, dbid, instance_number , sample_id, sample_time,sample_time_utc, usecs_per_row
, session_id, session_serial#, session_type , flags , user_id , sql_id, sql_chil

	    .6		  1    0.0	  0.7	92.1	5.7    1.9 6s1ku6bs9a8xb
v_now PLS_INTEGER;
 WITH ash as (SELECT ash.event_id, sum(decode(ash.session_type, 1, 1, 0)) as c
nt_fg, count(*) as cnt_total FROM WRH$_ACTIVE_SESSION_HISTORY ash WHERE ash
.dbid = :dbid AND ash.instance_number = :inst AND ash.snap_id > :bid AND ash.s
v_brick_wall PLS_INTEGER;
nap_id <= :eid AND ash.wait_time = 0 GROUP BY ash.event_id ), evts as (SEL

	    .5		 91    0.0	  0.5	94.8	6.0    1.6 f7xnvp44nukp7
insert into wrm$_snapshot_details (snap_id,dbid,instance_number,table_id,begin

_time,end_time,step_id) values (:snap_id,:dbid,:instance_number,:bind1,:bind2
,:bind3,:step_id)

	    .2		 44    0.0	  0.3	80.5   14.2    6.7 8swypbbr0m372
v_begin_time PLS_INTEGER;
select order#,columns,types from access$ where d_obj#=:1

	    .1		249    0.0	  0.3	36.7   52.0    1.4 9babjv8yq8ru3
Module: SQL*Plus
v_end_time PLS_INTEGER;
BEGIN DBMS_OUTPUT.GET_LINES(:LINES, :NUMLINES); END;

	    .1		 44    0.0	  0.1	57.5   21.9   23.8 3un99a0zwp4vd
select owner#,name,namespace,remoteowner,linkname,p_timestamp,p_obj#, nvl(proper
v_total_time PLS_INTEGER;
ty,0),subname,type#,flags,d_attrs from dependency$ d, obj$ o where d_obj#=:1 and
 p_obj#=obj#(+) order by order#

	    .1		 38    0.0	  0.1	82.7   12.0    6.1 6wvzvgvg6qsyb
v_begin_cpu_tm PLS_INTEGER;
INSERT INTO wri$_adv_findings (id, task_id, type, parent, obj_id, impact_msg_id,
 impact_val, msg_id, more_info_id, name_msg_code, flags, exec_name) VALUES (:1,
:2, :3, :4, :5, :6, :7,:8, :9, :10, :11, :12)

v_end_cpu_tm PLS_INTEGER;
	    .1		 11    0.0	 18.5	 0.4   53.9    7.0 9yv5dwv8k0awg
WITH MONITOR_DATA AS (SELECT INST_ID, KEY, NVL2(PX_QCSID, NULL, STATUS) STATUS,
v_total_cpu_tm PLS_INTEGER;
FIRST_REFRESH_TIME, LAST_REFRESH_TIME, REFRESH_COUNT, PROCESS_NAME, SID, SQL_ID,
 SQL_EXEC_START, SQL_EXEC_ID, DBOP_NAME, DBOP_EXEC_ID, SQL_PLAN_HASH_VALUE, SQL_
FULL_PLAN_HASH_VALUE, SESSION_SERIAL#, SQL_TEXT, PX_SERVER#, PX_SERVER_GROUP, PX


	    .0		425    0.0	  0.2	28.6   43.4    1.9 9tgj4g8y4rwy8
select type#,blocks,extents,minexts,maxexts,extsize,extpct,user#,iniexts,NVL(lis
ts,65535),NVL(groups,65535),cachehint,hwmincr, NVL(spare1,0),NVL(scanhint,0),NVL
(bitmapranges,0) from seg$ where ts#=:1 and file#=:2 and block#=:3
v_do_sleeps BOOLEAN := FALSE;

	    .0		 22    0.0	  0.4	 5.9   10.8   87.6 03guhbfpak0w7
select /*+ index(idl_ub1$ i_idl_ub11) */ piece#,length,piece from idl_ub1$ where
 obj#=:1 and part=:2 and version=:3 order by piece#
v_loop_control BOOLEAN := FALSE;


SQL ordered by Cluster Wait Time       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
v_update_quota BOOLEAN := FALSE;
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
v_select_only_workload BOOLEAN := FALSE;
-> Total Cluster Wait Time (s): 	126,171
-> Captured SQL account for    0.0% of Total

       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
v_update_only_workload BOOLEAN := FALSE;
-------------- ------------ ------ ---------- ------ ------ ------ -------------
	    .0		 36    0.0	  0.0	66.6   33.1    2.0 42mkua34ay6bc
INSERT INTO wri$_adv_addm_fdg ( TASK_ID, FINDING_ID, RULE_ID, ADDM_FDG_ID, ADDM_
v_do_update BOOLEAN := FALSE;
SEQ, DATABASE_TIME, ACTIVE_SESSIONS, PERC_ACTIVE_SESS, IS_AGGREGATE, METER_L
EVEL, QUERY_TYPE, QUERY_IS_APPROX, QUERY_ARGS) VALUES ( :tid, :kea_id, :rid, :
fdg_id, :keh_id, :dbt, round(:dbt / (1000000 * :sint) , 2), ro

v_do_hot_schema BOOLEAN := FALSE;
			  ------------------------------------------------------


Key Instance Activity Stats	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Ordered by statistic name
v_stop_immediate BOOLEAN := FALSE;

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
db block changes			  5,286,019	   7,999.6	   130.5
v_sharing_schema BOOLEAN := FALSE;
execute count				    279,199	     422.5	     6.9
gc cr block receive time		    170,805	     258.5	     4.2
gc cr blocks received			     26,767	      40.5	     0.7
gc current block receive time		     61,868	      93.6	     1.5
v_seed VARCHAR2(128);
gc current blocks received		     23,633	      35.8	     0.6
logons cumulative				105	       0.2	     0.0
opened cursors cumulative		    319,792	     484.0	     7.9
parse count (total)			     11,400	      17.3	     0.3
v_home_schema_str VARCHAR2(80);
parse time elapsed				438	       0.7	     0.0
physical reads				 14,932,774	  22,598.6	   368.6
physical writes 			  2,553,257	   3,864.0	    63.0
redo size			      2,070,572,496    3,133,508.8	51,115.2
v_scratch VARCHAR2(200) ;
session cursor cache hits		    317,399	     480.3	     7.8
session logical reads			 17,727,484	  26,828.0	   437.6
user calls				      2,138	       3.2	     0.1
user commits				     40,508	      61.3	     1.0

workarea executions - optimal		      1,459	       2.2	     0.0
			  ------------------------------------------------------


v_cpu_pct NUMBER(6, 3);
Instance Activity Stats 	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
v_my_serial NUMBER(16);
-------------------------------- ------------------ -------------- -------------
ASSM bg: segment fix monitor			  1	       0.0	     0.0
ASSM cbk:blocks examined		      1,096	       1.7	     0.0

ASSM cbk:blocks marked full			306	       0.5	     0.0
ASSM gsp:L1 bitmaps examined			870	       1.3	     0.0
ASSM gsp:L2 bitmap full 			 31	       0.1	     0.0
BEGIN
ASSM gsp:L2 bitmaps examined			193	       0.3	     0.0
ASSM gsp:Search all				 33	       0.1	     0.0
ASSM gsp:Search hint				 33	       0.1	     0.0
ASSM gsp:Search steal				 11	       0.0	     0.0

ASSM gsp:bump HWM				 11	       0.0	     0.0
ASSM gsp:get free block 			790	       1.2	     0.0
ASSM gsp:get free data block			557	       0.8	     0.0
ASSM gsp:get free index block			233	       0.4	     0.0
ASSM gsp:good hint				713	       1.1	     0.0
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
ASSM gsp:reject db				  0	       0.0	     0.0
ASSM rsv:clear reserve				  0	       0.0	     0.0
ASSM rsv:fill reserve				  0	       0.0	     0.0
ASSM wasted db state change			  0	       0.0	     0.0
EXECUTE IMMEDIATE v_home_schema_str;
Batched IO (bound) vector count 		608	       0.9	     0.0
Batched IO (full) vector count			  0	       0.0	     0.0
Batched IO block miss count		 12,232,863	  18,512.7	   302.0
Batched IO buffer defrag count			  0	       0.0	     0.0

Batched IO double miss count		    226,690	     343.1	     5.6
Batched IO same unit count		      1,193	       1.8	     0.0
Batched IO single block count		      1,210	       1.8	     0.0
Batched IO vector block count		 12,233,468	  18,513.6	   302.0

Batched IO vector read count		    221,345	     335.0	     5.5
Block Cleanout Optim referenced 		 23	       0.0	     0.0
CCursor + sql area evicted		      2,578	       3.9	     0.1
CPU used by this session		    368,235	     557.3	     9.1
IF ( v_hot_schema_modulus != 0 ) THEN
CPU used when call started		    299,356	     453.0	     7.4
CR blocks created			     11,057	      16.7	     0.3
Cached Commit SCN referenced		 14,242,898	  21,554.5	   351.6
Client Advertised Receive Window	      1,750	       2.7	     0.0
	v_do_hot_schema := TRUE;
Client Advertised Send Window		      1,750	       2.7	     0.0
Client Path Maximum Transmission	 16,383,750	  24,794.4	   404.5
Client Send Congestion Window		      2,500	       3.8	     0.1
Client Time (usec) Last Ack Rece		188	       0.3	     0.0
END IF;
Client Time (usec) Last Data Rec		131	       0.2	     0.0
Client Time (usec) Last Data Sen		778	       1.2	     0.0
Client Time (usec) Round Trip Ti	  1,244,996	   1,884.1	    30.7
Client Time (usec) Round Trip Ti	  2,028,101	   3,069.2	    50.1

Client Total Bytes Acked		  3,945,649	   5,971.2	    97.4
Client Total Bytes Received		  1,528,196	   2,312.7	    37.7
Client Total Number of Retransmi		  0	       0.0	     0.0
Commit SCN cached				185	       0.3	     0.0
IF ( v_sleep_modulus != 0 )	  THEN
DBWR checkpoint buffers written 	    238,123	     360.4	     5.9
DBWR checkpoints				231	       0.4	     0.0
DBWR fusion writes				226	       0.3	     0.0
DBWR object drop buffers written		 44	       0.1	     0.0
	v_do_sleeps := TRUE;
DBWR parallel query checkpoint b		  0	       0.0	     0.0
DBWR thread checkpoint buffers w		  0	       0.0	     0.0
DBWR transaction table writes			565	       0.9	     0.0
END IF;
DBWR undo block writes			    113,892	     172.4	     2.8
DFO trees parallelized				 14	       0.0	     0.0
DML statements retried				  0	       0.0	     0.0
Effective IO time				  0	       0.0	     0.0

HSC Heap Segment Block Changes		  2,527,787	   3,825.4	    62.4
Heap Segment Array Inserts			194	       0.3	     0.0
Heap Segment Array Updates			 15	       0.0	     0.0

Instance Activity Stats 	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
IF ( v_max_loop_iterations &gt; 0 )  THEN
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
	v_loop_control := TRUE ;
Heatmap BlkLevel Flushed			  0	       0.0	     0.0
Heatmap BlkLevel Flushed to SYSA		  0	       0.0	     0.0
Heatmap BlkLevel Ranges Flushed 		  0	       0.0	     0.0
Heatmap Blklevel Flush Task Coun		  0	       0.0	     0.0
END IF;
KTFB alloc myinst				  0	       0.0	     0.0
KTFB alloc req					559	       0.9	     0.0
KTFB alloc search FFB				  0	       0.0	     0.0

KTFB alloc space (block)		577,306,624	 873,669.2	14,251.7
KTFB alloc steal				  0	       0.0	     0.0
KTFB alloc time (ms)			  7,335,251	  11,100.8	   181.1
KTFB apply req					673	       1.0	     0.0
KTFB apply time (ms)			     30,861	      46.7	     0.8
IF ( v_update_pct = 0 ) 	  THEN
KTFB commit req 				  0	       0.0	     0.0
KTFB commit time (ms)				  0	       0.0	     0.0
KTFB free req					130	       0.2	     0.0
KTFB free space (block) 		      2,480	       3.8	     0.1
	v_select_only_workload := TRUE;
KTFB free time (ms)				725	       1.1	     0.0
LOB table id lookup cache misses		  0	       0.0	     0.0
Number of read IOs issued			  0	       0.0	     0.0
PX local messages recv'd			182	       0.3	     0.0
END IF;
PX local messages sent				182	       0.3	     0.0
PX remote messages recv'd			468	       0.7	     0.0
PX remote messages sent 			572	       0.9	     0.0
Parallel operations downgraded t		  0	       0.0	     0.0

Parallel operations not downgrad		 14	       0.0	     0.0
Requests to/from client 			881	       1.3	     0.0
SMON posted for undo segment shr		 21	       0.0	     0.0
IF ( v_update_pct = 100 )	  THEN
SQL*Net roundtrips to/from clien		631	       1.0	     0.0
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
TBS Extension: tasks created			  0	       0.0	     0.0
				v_sharing_schema := FALSE;
TBS Extension: tasks executed			  0	       0.0	     0.0
active txn count during cleanout		428	       0.7	     0.0
background checkpoints completed		  0	       0.0	     0.0
			END IF;
background checkpoints started			  0	       0.0	     0.0
background timeouts			      6,376	       9.7	     0.2
blocks cleaned out using minact 	    245,470	     371.5	     6.1
		END IF;
branch node splits				  1	       0.0	     0.0
buffer is not pinned count		 39,064,062	  59,117.8	   964.4
	END IF;
buffer is pinned count			 16,820,780	  25,455.8	   415.3
bytes received via SQL*Net from 	    655,751	     992.4	    16.2

bytes sent via SQL*Net to client	    153,691	     232.6	     3.8
calls to get snapshot scn: kcmgs	    337,536	     510.8	     8.3
calls to kcmgas 			     64,001	      96.9	     1.6
	-- Choose the random block. The v_do_hotspot handler that follows can override.
calls to kcmgcs 			      6,654	      10.1	     0.2
cell physical IO interconnect by    170,136,403,968  257,476,579.3   4,200,069.2
change write time			      7,319	      11.1	     0.2
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
cleanout - number of ktugct call	     19,078	      28.9	     0.5
cleanouts and rollbacks - consis		  7	       0.0	     0.0
cleanouts only - consistent read		279	       0.4	     0.0

cluster key scan block gets		      1,772	       2.7	     0.0
cluster key scans			      1,396	       2.1	     0.0
commit batch/immediate performed		 38	       0.1	     0.0
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
commit batch/immediate requested		 38	       0.1	     0.0
commit cleanout failures: block 		  4	       0.0	     0.0
commit cleanout failures: buffer		200	       0.3	     0.0
commit cleanout failures: callba		 73	       0.1	     0.0
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
commit cleanout failures: cannot		  0	       0.0	     0.0
commit cleanouts			  2,533,404	   3,833.9	    62.5
commit cleanouts successfully co	  2,533,127	   3,833.5	    62.5
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
commit immediate performed			 38	       0.1	     0.0
commit immediate requested			 38	       0.1	     0.0

Instance Activity Stats 	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
	END IF;
-------------------------------- ------------------ -------------- -------------
commit txn count during cleanout		586	       0.9	     0.0
consistent changes			     30,625	      46.4	     0.8

consistent gets 			 14,847,668	  22,469.8	   366.5
consistent gets direct				  0	       0.0	     0.0
consistent gets examination		    317,763	     480.9	     7.8
consistent gets examination (fas	    317,409	     480.4	     7.8
----------------------------------------------------------------------------------------------------------------------
consistent gets from cache		 14,847,673	  22,469.8	   366.5
consistent gets pin			 14,529,910	  21,988.9	   358.7
consistent gets pin (fastpath)		 13,812,238	  20,902.8	   341.0
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
cursor authentications				115	       0.2	     0.0
cursor reload failures				  1	       0.0	     0.0
data blocks consistent reads - u		 64	       0.1	     0.0
db block changes			  5,286,019	   7,999.6	   130.5
----------------------------------------------------------------------------------------------------------------------
db block gets				  2,879,846	   4,358.2	    71.1
db block gets direct				995	       1.5	     0.0

db block gets from cache		  2,878,851	   4,356.7	    71.1
db block gets from cache (fastpa	    285,207	     431.6	     7.0
deferred (CURRENT) block cleanou	    257,138	     389.1	     6.4
	IF  ( v_select_only_workload = TRUE ) THEN
dirty buffers inspected 		  2,156,891	   3,264.1	    53.3
enqueue conversions			      1,289	       2.0	     0.0
enqueue releases			     95,535	     144.6	     2.4
enqueue requests			     94,981	     143.7	     2.3
		-- handle case where user specified zero pct updates (a SELECT-only workload)
enqueue timeouts				  9	       0.0	     0.0
enqueue waits					867	       1.3	     0.0
		v_do_update := FALSE;
exchange deadlocks				  5	       0.0	     0.0
execute count				    279,199	     422.5	     6.9
failed probes on index block rec		  0	       0.0	     0.0
		v_update_quota := TRUE ;
fastpath consistent get quota li		  0	       0.0	     0.0
file io service time			519,331,872	 785,932.9	12,820.5
free buffer inspected			 15,452,294	  23,384.8	   381.5
	ELSE
free buffer requested			 15,091,749	  22,839.2	   372.6
gc blocks compressed			     50,411	      76.3	     1.2
gc blocks lost				      4,191	       6.3	     0.1
gc cleanout applied				  0	       0.0	     0.0
		IF ( v_update_only_workload = TRUE ) THEN
gc cleanout saved				  4	       0.0	     0.0
gc cr anti locks created			  0	       0.0	     0.0
gc cr anti locks expanded			  0	       0.0	     0.0
			-- handle case where user specified 100% updates
gc cr anti locks shrunk 			  0	       0.0	     0.0
gc cr block build time				213	       0.3	     0.0
gc cr block flush time				110	       0.2	     0.0
			v_do_update := TRUE;
gc cr block receive time		    170,805	     258.5	     4.2
gc cr blocks built			     33,448	      50.6	     0.8
gc cr blocks flushed				 26	       0.0	     0.0
			v_update_quota := FALSE;
gc cr blocks received			     26,767	      40.5	     0.7
gc cr blocks served			     33,524	      50.7	     0.8
gc cr multiblock grant time		 53,087,465	  80,340.1	 1,310.5
		ELSE
gc cr multiblock grants received	 12,203,384	  18,468.0	   301.3
gc current block flush time			138	       0.2	     0.0
gc current block pin time			  0	       0.0	     0.0
gc current block receive time		     61,868	      93.6	     1.5
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
gc current blocks flushed			 24	       0.0	     0.0
gc current blocks pinned			  0	       0.0	     0.0
gc current blocks received		     23,633	      35.8	     0.6
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
gc current blocks served		     17,638	      26.7	     0.4
gc force cr read cr				  7	       0.0	     0.0
gc force cr read current			  0	       0.0	     0.0
gc kbytes saved 			    215,921	     326.8	     5.3
			IF ( v_update_quota = FALSE ) THEN
gc kbytes sent				    193,375	     292.6	     4.8
gc local grants 			  7,654,449	  11,583.9	   189.0
gc merge pi bg					  0	       0.0	     0.0

				-- Handle case where user has set UPDATE_PCT to a valid value
Instance Activity Stats 	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Ordered by statistic name

				--
Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
gc merge pi fg					248	       0.4	     0.0
gc no change made				 52	       0.1	     0.0
				-- We are doing updates during this run and quota has not been met yet
gc read waits					  0	       0.0	     0.0
gc reader bypass grants 			644	       1.0	     0.0
gc reader bypass waits				 29	       0.0	     0.0
				-- We still vacillate until update quota has been met
gc remote grants			  7,567,240	  11,451.9	   186.8
gc status messages received		     11,659	      17.6	     0.3
gc status messages sent 		     34,050	      51.5	     0.8

gcs affinity lock failures			  0	       0.0	     0.0
gcs affinity lock grants		     98,069	     148.4	     2.4
gcs anti-locks created				  0	       0.0	     0.0
				IF ( MOD(v_random_block,  2) = 0 ) THEN
gcs data block access records		 14,979,878	  22,669.9	   369.8
gcs messages sent			 22,699,040	  34,351.7	   560.4
gcs read-mostly lock failures			  0	       0.0	     0.0
					v_do_update := TRUE;
gcs read-mostly lock grants			  0	       0.0	     0.0
gcs stats management (SCM) proce		  0	       0.0	     0.0
ges messages sent			     11,756	      17.8	     0.3
				ELSE
global enqueue get time 		     38,536	      58.3	     1.0
global enqueue gets async			  0	       0.0	     0.0
global enqueue gets sync		     93,159	     141.0	     2.3
global enqueue releases 		     96,095	     145.4	     2.4
					v_do_update := FALSE;
heap block compress				655	       1.0	     0.0
hot buffers moved to head of LRU	  1,198,714	   1,814.1	    29.6
immediate (CR) block cleanout ap		286	       0.4	     0.0
				END IF;
immediate (CURRENT) block cleano		740	       1.1	     0.0
index crx state invalidation			  0	       0.0	     0.0
index crx upgrade (positioned)			 65	       0.1	     0.0
			ELSE
index crx upgrade (prefetch)			  0	       0.0	     0.0
index fast full scans (full)			 15	       0.0	     0.0
index fetch by key			     16,979	      25.7	     0.4
index range scans			    297,335	     450.0	     7.3
				-- UPDATE quota has been filled,  force drain some SELECTs
index reclamation/extension swit		  1	       0.0	     0.0
index split cancel wait noclean 		  0	       0.0	     0.0
leaf node 90-10 splits				  2	       0.0	     0.0
				v_do_update := FALSE;
leaf node splits				230	       0.4	     0.0
lob reads					378	       0.6	     0.0
lob writes				      6,782	      10.3	     0.2
			END IF;
lob writes unaligned			      6,782	      10.3	     0.2
logical read bytes from cache	    145,215,684,608  219,762,713.1   3,584,864.3
logons cumulative				105	       0.2	     0.0
		END IF;
max cf enq hold time			      1,675	       2.5	     0.0
messages received			    278,713	     421.8	     6.9
messages sent				    278,713	     421.8	     6.9
min active SCN optimization appl		 64	       0.1	     0.0
	END IF;
no work - consistent read gets		 14,474,864	  21,905.6	   357.3
non-idle wait count			  7,235,984	  10,950.6	   178.6
opened cursors cumulative		    319,792	     484.0	     7.9

parse count (describe)				 12	       0.0	     0.0
parse count (failures)				  2	       0.0	     0.0
parse count (hard)				335	       0.5	     0.0
parse count (total)			     11,400	      17.3	     0.3
----------------------------------------------------------------------------------------------------------------------
parse time cpu					110	       0.2	     0.0
parse time elapsed				438	       0.7	     0.0
physical read IO requests		 14,932,644	  22,598.4	   368.6
physical read bytes		    122,329,276,416  185,127,479.5   3,019,879.4
-- The type of SQL is now determined...execute it in the following section
physical read total IO requests 	 14,938,237	  22,606.8	   368.8
physical read total bytes	    123,970,706,432  187,611,543.9   3,060,400.6
physical read total multi block 	      1,504	       2.3	     0.0
----------------------------------------------------------------------------------------------------------------------
physical reads				 14,932,774	  22,598.6	   368.6
physical reads cache			 14,932,773	  22,598.6	   368.6

Instance Activity Stats 	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

-> Ordered by statistic name

	IF ( v_do_update != TRUE ) THEN
Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
physical reads cache prefetch		 11,985,013	  18,137.6	   295.9
		--
physical reads direct				  0	       0.0	     0.0
physical reads direct (lob)			  0	       0.0	     0.0
physical reads direct temporary 		  0	       0.0	     0.0
		-- Do a SELECT statement
physical reads prefetch warmup			  0	       0.0	     0.0
physical write IO requests		  2,383,820	   3,607.6	    58.9
physical write bytes		     20,916,281,344   31,653,734.6     516,349.4
physical write total IO requests	  2,426,482	   3,672.1	    59.9
		-- Work out scan or random
physical write total bytes	     23,077,233,152   34,924,019.3     569,695.7
physical write total multi block	      8,826	      13.4	     0.2
physical writes 			  2,553,257	   3,864.0	    63.0
		IF  ( v_random_workload_only = TRUE ) THEN
physical writes direct			      1,116	       1.7	     0.0
physical writes direct (lob)			121	       0.2	     0.0
physical writes direct temporary		185	       0.3	     0.0
physical writes from cache		  2,552,141	   3,862.3	    63.0
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
physical writes non checkpoint		  2,520,168	   3,813.9	    62.2
pinned buffers inspected		     17,888	      27.1	     0.4
prefetch warmup blocks aged out 		  0	       0.0	     0.0
prefetch warmup blocks flushed o		  0	       0.0	     0.0
			v_do_scan_query := FALSE;
prefetched blocks aged out befor		  0	       0.0	     0.0
process last non-idle time			657	       1.0	     0.0
queries parallelized				  0	       0.0	     0.0
			v_scan_query_quota := TRUE ;
recursive calls 			    456,734	     691.2	    11.3
recursive cpu usage			    362,531	     548.6	     9.0
redo KB read				    892,928	   1,351.3	    22.0
redo blocks checksummed by FG (e	  1,529,288	   2,314.4	    37.8
		ELSE
redo blocks written			  4,198,713	   6,354.1	   103.7
redo blocks written (group 0)		  1,913,202	   2,895.4	    47.2
redo blocks written (group 1)		    821,934	   1,243.9	    20.3
			IF ( v_scan_workload_only = TRUE ) THEN
redo entries				  2,836,587	   4,292.8	    70.0
redo ordering marks				  0	       0.0	     0.0
redo size			      2,070,572,496    3,133,508.8	51,115.2
redo size for direct writes		      3,704	       5.6	     0.1
redo subscn max counts				438	       0.7	     0.0
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
redo synch long waits				  0	       0.0	     0.0
redo synch time 				342	       0.5	     0.0
redo synch time (usec)			  3,249,823	   4,918.1	    80.2
redo synch time overhead (usec) 	     26,438	      40.0	     0.7
				v_do_scan_query := TRUE;
redo synch time overhead count (		138	       0.2	     0.0
redo synch time overhead count (		  2	       0.0	     0.0
redo synch time overhead count (		  0	       0.0	     0.0
				v_scan_query_quota := FALSE;
redo synch writes				251	       0.4	     0.0
redo wastage				 10,169,536	  15,390.1	   251.1
redo write active strands		     41,873	      63.4	     1.0
redo write broadcast ack count			 29	       0.0	     0.0
			ELSE
redo write broadcast ack time		    399,855	     605.1	     9.9
redo write finish time			542,041,130	 820,300.0	13,381.1
redo write gather time			 28,763,206	  43,528.9	   710.1
redo write info find				141	       0.2	     0.0
				IF ( v_scan_query_quota = FALSE ) THEN
redo write info find fail			  1	       0.0	     0.0
redo write schedule time		 29,129,037	  44,082.5	   719.1
redo write size count (   4KB)			669	       1.0	     0.0
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
redo write size count (   8KB)			669	       1.0	     0.0
redo write size count (  16KB)		      1,523	       2.3	     0.0
redo write size count (  32KB)		      3,197	       4.8	     0.1
redo write size count ( 128KB)		     11,519	      17.4	     0.3
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
redo write size count ( 256KB)		      2,749	       4.2	     0.1
redo write size count ( 512KB)			630	       1.0	     0.0
redo write size count (1024KB)			299	       0.5	     0.0
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
redo write size count (inf)			185	       0.3	     0.0

Instance Activity Stats 	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Ordered by statistic name

						v_do_scan_query := TRUE;
Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
redo write time 			     54,287	      82.2	     1.3
					ELSE
redo write time (usec)			542,863,907	 821,545.2	13,401.4
redo write total time			572,016,363	 865,663.2	14,121.1
redo write worker delay (usec)		 26,347,670	  39,873.4	   650.4
redo write worker delay count		     16,581	      25.1	     0.4
						v_do_scan_query := FALSE;
redo writes				     21,438	      32.4	     0.5
redo writes (group 0)			      9,636	      14.6	     0.2
redo writes (group 1)			      6,945	      10.5	     0.2
					END IF;
redo writes adaptive all		     21,438	      32.4	     0.5
redo writes adaptive worker		     16,581	      25.1	     0.4
rollback changes - undo records 		  2	       0.0	     0.0
rollbacks only - consistent read		 42	       0.1	     0.0
				ELSE
root node splits				  1	       0.0	     0.0
rows fetched via callback		      3,944	       6.0	     0.1
saved cleanout failures: callbac		  0	       0.0	     0.0
saved cleanouts 				  0	       0.0	     0.0
					-- Scan quota has been filled,	force drain some random access SELECTS
saved cleanouts successfully com		  0	       0.0	     0.0
securefile allocation bytes		    991,232	   1,500.1	    24.5
securefile allocation chunks			 47	       0.1	     0.0
securefile bytes non-transformed	    835,563	   1,264.5	    20.6
					v_do_scan_query := FALSE;
securefile direct read bytes			  0	       0.0	     0.0
securefile direct read ops			  0	       0.0	     0.0
securefile direct write bytes		    991,232	   1,500.1	    24.5
				END IF;
securefile direct write ops			 47	       0.1	     0.0
securefile number of non-transfo		 48	       0.1	     0.0
segment cfs allocations 			  0	       0.0	     0.0
segment chunks allocation from d		 47	       0.1	     0.0
			END IF;
segment dispenser allocations			 47	       0.1	     0.0
segment dispenser load empty			  0	       0.0	     0.0
segment dispenser load tasks			  0	       0.0	     0.0
		END IF;
segment prealloc ops				  2	       0.0	     0.0
segment prealloc tasks				  0	       0.0	     0.0
segment prealloc time (ms)			599	       0.9	     0.0
segment prealloc ufs2cfs bytes			  0	       0.0	     0.0

segment total chunk allocation			  0	       0.0	     0.0
session cursor cache hits		    317,399	     480.3	     7.8

session logical reads			 17,727,484	  26,828.0	   437.6
shared hash latch upgrades - no 	  2,350,318	   3,556.9	    58.0
shared hash latch upgrades - wai		 99	       0.2	     0.0
		IF ( v_do_scan_query != TRUE ) THEN
shared io pool buffer get succes		 47	       0.1	     0.0
sorts (memory)				      1,713	       2.6	     0.0
sorts (rows)				    173,938	     263.2	     4.3
sql area evicted			      2,528	       3.8	     0.1
			SELECT COUNT(c2) INTO v_rowcnt
sql area purged 				 29	       0.0	     0.0
summed dirty queue length		 28,018,437	  42,401.8	   691.7
switch current caused by our pin		 39	       0.1	     0.0
switch current to new buffer			 39	       0.1	     0.0
			FROM cf1
table fetch by rowid			 26,534,922	  40,156.7	   655.1
table fetch continued row			110	       0.2	     0.0
table scan blocks gotten		     13,138	      19.9	     0.3
table scan disk non-IMC rows got	    331,263	     501.3	     8.2
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
table scan rows gotten			    331,263	     501.3	     8.2
table scans (cache partitions)			  0	       0.0	     0.0
table scans (direct read)			  0	       0.0	     0.0
table scans (long tables)			  0	       0.0	     0.0

table scans (rowid ranges)			  0	       0.0	     0.0
table scans (short tables)			660	       1.0	     0.0
temp space allocated (bytes)			  0	       0.0	     0.0
total cf enq hold time			      5,666	       8.6	     0.1
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
total number of cf enq holders			262	       0.4	     0.0

Instance Activity Stats 	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Ordered by statistic name
		ELSE

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
total number of times SMON poste		 21	       0.0	     0.0
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
transaction lock background get 		  0	       0.0	     0.0
transaction lock background gets		  0	       0.0	     0.0
transaction lock foreground requ		  0	       0.0	     0.0
transaction rollbacks				 33	       0.1	     0.0

transaction tables consistent re	     22,207	      33.6	     0.6
undo change vector size 		865,917,952    1,310,440.3	21,376.5
user calls				      2,138	       3.2	     0.1
user commits				     40,508	      61.3	     1.0
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
user logons cumulative				  0	       0.0	     0.0
user logouts cumulative 			250	       0.4	     0.0
workarea executions - optimal		      1,459	       2.2	     0.0

write clones created in backgrou		  0	       0.0	     0.0
write clones created in foregrou		200	       0.3	     0.0
			  ------------------------------------------------------


			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
Instance Activity Stats - Absolute ValuesDB/Inst: P60SDB/p60sdb1  Snaps: 135-1
-> Statistics with absolute values (should not be diffed)

Statistic			     Begin Value       End Value
				v_scan_query_quota := TRUE;
-------------------------------- --------------- ---------------
logons current				     377	     126
opened cursors current			   1,304	     169
session cursor cache count		 331,622	 332,176
			END IF;
session pga memory		   2,283,146,760     736,231,120
session pga memory max		   2,838,766,344     967,889,200
session uga memory		  19,029,442,328  18,377,328,472
		END IF;
session uga memory max		 4.566245017E+11 4.572633890E+11
			  ------------------------------------------------------

Instance Activity Stats - Thread ActivityDB/Inst: P60SDB/p60sdb1  Snaps: 135-1

-> Statistics identified by '(derived)' come from sources other than SYSSTAT

Statistic				      Total  per Hour
-------------------------------- ------------------ ---------
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
log switches (derived)				  0	  .00
			  ------------------------------------------------------

IOStat by Function summary	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
	ELSE
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
    other columns suffixed with K,M,G,T,P are in multiples of 1000
-> ordered by (Data Read + Write) desc

		--
		 Reads:  Reqs	 Data	Writes:  Reqs	 Data	 Waits:    Avg
Function Name	   Data per sec per sec    Data per sec per sec   Count    Time
--------------- ------- ------- ------- ------- ------- ------- ------- --------
Buffer Cache Re  112.5G 2.2E+04 174.281      0M     0.0      0M    2.9M   4.55ms
		-- Do an UPDATE statement
DBWR		     0M     0.0      0M   19.4G  3602.9 30.138M       0
LGWR		     0M     0.0      0M      2G    62.9  3.043M   21.4K  23.68ms
Others		   1.5G     8.4  2.376M     18M     1.2   .027M    3500   3.68ms
		--
Direct Writes	     0M     0.0      0M      1M     0.1   .002M       0
Direct Reads	     0M     0.0      0M      0M     0.0      0M       0
TOTAL:		   114G 2.2E+04 176.657   21.4G  3667.2 33.211M    2.9M   4.69ms
			  ------------------------------------------------------


IOStat by Filetype summary	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
    other columns suffixed with K,M,G,T,P are in multiples of 1000
		v_my_serial := v_my_serial + v_loop_cnt ;
-> Small Read and Large Read are average service times
-> Ordered by (Data Read + Write) desc

		Reads:	Reqs	Data   Writes:	Reqs	Data	  Small    Large

Filetype Name	  Data per sec per sec	  Data per sec per sec	   Read     Read
-------------- ------- ------- ------- ------- ------- ------- -------- --------
Data File	112.4G 2.2E+04 174.226	 19.5G	3603.1 30.152M 595.88us
Log File	  1.5G	   2.5	2.284M	    2G	  63.0	3.043M 289.31us 1721.36m
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
Control File	   61M	   5.9	 .092M	   11M	   1.0	 .017M 117.27us
Temp File	    2M	   0.2	 .003M	    2M	   0.2	 .003M	 9.01us
TOTAL:		  114G 2.2E+04 176.605	 21.4G	3667.2 33.215M 595.74us 1721.36m
			  ------------------------------------------------------
		--

IOStat by Function/Filetype summary    DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
    other columns suffixed with K,M,G,T,P are in multiples of 1000
		-- Increment count of UPDATES and set UPDATE quota flag if needed
-> Ordered by (Data Read + Write) desc for each function

  Reads:  Reqs	  Data	 Writes:  Reqs	  Data	  Waits:      Avg
    Data per sec per sec    Data per sec per sec   Count     Time
		--
 ------- ------- ------- ------- ------- ------- ------- ----------
Buffer Cache Reads
  112.4G 2.2E+04 174.182      0M     0.0      0M    2.7M     3.60ms
 Buffer Cache Reads (Data File)
		v_updates_cnt := v_updates_cnt + 1;
  112.4G 2.2E+04 174.179      0M     0.0      0M    2.7M     3.60ms
 Buffer Cache Reads (Temp File)
      2M     0.2   .003M      0M     0.0      0M     111   261.26us
 DBWR (Data File)

      0M     0.0      0M   19.4G  3602.9 30.138M       0
DBWR
      0M     0.0      0M   19.4G  3602.9 30.138M       0
 DBWR (Temp File)
      0M     0.0      0M      0M     0.1      0M       0
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
 LGWR (Log File)
      0M     0.0      0M      2G    63.0  3.043M       0
LGWR
      0M     0.0      0M      2G    63.0  3.043M       0
Others
			v_update_quota := TRUE;
    1.5G     8.4  2.376M     18M     1.2   .027M    3159   490.00us
 Others (Log File)
    1.5G     2.5  2.284M      0M     0.0      0M     159   787.91us
 Others (Control File)
		END IF;
     61M     5.9   .092M     10M     1.0   .015M    3000   474.24us
 Others (Data File)
      0M     0.0      0M      7M     0.1   .011M       0
 Others (Temp File)
	END IF ;
      0M     0.0      0M      1M     0.1   .002M       0
 Direct Writes (Data File)
      0M     0.0      0M      1M     0.1   .002M       0
Direct Writes
----------------------------------------------------------------------------------------------------------------------
      0M     0.0      0M      1M     0.1   .002M       0
 Direct Reads (Data File)
      0M     0.0      0M      0M     0.0      0M       0
Direct Reads
      0M     0.0      0M      0M     0.0      0M       0
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
TOTAL:
  113.9G 2.2E+04 176.558   21.4G  3667.2 33.211M    2.7M     3.59ms
			  ------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------
Tablespace IO Stats		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
			  ------------------------------------------------------



File IO Stats			       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
			  ------------------------------------------------------
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN


Buffer Pool Statistics		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Standard block size Pools  D: default,  K: keep,  R: recycle
		--
-> Default Pools for other block sizes: 2k, 4k, 8k, 16k, 32k

							    Free   Writ   Buffer
     Number of Pool	  Buffer     Physical	 Physical   Buff   Comp     Busy
P      Buffers Hit%	    Gets	Reads	   Writes   Wait   Wait    Waits
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
--- ---------- ---- ------------ ------------ ----------- ------ ------ --------
D    4,088,354	 16   17,783,133   14,988,863	2,552,142      0      0       19
			  ------------------------------------------------------

		-- so reset flags and counters before continuing
Checkpoint Activity		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Total Physical Writes:		     2,553,257

					  Other    Autotune	 Thread
       MTTR    Log Size    Log Ckpt    Settings        Ckpt	   Ckpt
		--
     Writes	 Writes      Writes	 Writes      Writes	 Writes
----------- ----------- ----------- ----------- ----------- -----------
	  0	      0 	  0	      0     238,098	      0
			  ------------------------------------------------------
		v_update_quota := FALSE;

Instance Recovery Stats 	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> B: Begin Snapshot,  E: End Snapshot

									    Estd
		v_updates_cnt := 0;
  Targt  Estd					  Log Ckpt Log Ckpt    Opt   RAC
  MTTR	 MTTR Recovery	Actual	 Target   Log Sz   Timeout Interval    Log Avail
   (s)	  (s) Estd IOs RedoBlks RedoBlks RedoBlks RedoBlks RedoBlks  Sz(M)  Time
		v_selects_cnt := 0;
- ----- ----- -------- -------- -------- -------- -------- -------- ------ -----
B     0   149	300493	 461605 1.70E+07 1.70E+07      N/A	N/A    N/A    48
E     0   277	355624	1615735  2169603 1.70E+07  2169603	N/A    N/A    98
			  ------------------------------------------------------
	END IF;

MTTR Advisory				    DB/Inst: P60SDB/p60sdb1  Snap: 136

		  No data exists for this section of the report.
			  ------------------------------------------------------


Buffer Pool Advisory			    DB/Inst: P60SDB/p60sdb1  Snap: 136
-> Only rows with estimated physical reads >0 are displayed
-> ordered by Block Size, Buffers For Estimate

				    Est
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
				   Phys      Estimated			Est
    Size for   Size	 Buffers   Read     Phys Reads	   Est Phys %DBtime
P    Est (M) Factor  (thousands) Factor    (thousands)	  Read Time for Rds
--- -------- ------ ------------ ------ -------------- ------------ -------
D      3,456	 .1	     403    1.1        176,880		  1 4.9E+04
D      6,912	 .2	     806    1.0        161,894		  1 3.3E+04
D     10,368	 .3	   1,209    1.0        161,488		  1 3.3E+04
D     13,824	 .4	   1,611    1.0        161,017		  1 3.2E+04
D     17,280	 .5	   2,014    1.0        160,613		  1 3.2E+04
D     20,736	 .6	   2,417    1.0        160,300		  1 3.2E+04
D     24,192	 .7	   2,820    1.0        159,971		  1 3.1E+04
D     27,648	 .8	   3,223    1.0        159,635		  1 3.1E+04
D     31,104	 .9	   3,626    1.0        159,335		  1 3.1E+04
D     34,560	1.0	   4,029    1.0        159,069		  1 3.0E+04
D     35,072	1.0	   4,088    1.0        159,048		  1 3.0E+04
D     38,016	1.1	   4,432    1.0        158,790		  1 3.0E+04
D     41,472	1.2	   4,834    1.0        158,511		  1 3.0E+04
D     44,928	1.3	   5,237    1.0        158,267		  1 3.0E+04
D     48,384	1.4	   5,640    1.0        158,018		  1 2.9E+04
D     51,840	1.5	   6,043    1.0        157,774		  1 2.9E+04
D     55,296	1.6	   6,446    1.0        157,542		  1 2.9E+04
D     58,752	1.7	   6,849    1.0        157,314		  1 2.9E+04
D     62,208	1.8	   7,252    1.0        157,089		  1 2.8E+04
D     65,664	1.9	   7,654    1.0        156,869		  1 2.8E+04
D     69,120	2.0	   8,057    1.0        156,655		  1 2.8E+04
			  ------------------------------------------------------


PGA Aggr Summary		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> PGA cache hit % - percentage of W/A (WorkArea) data processed only in-memory

PGA Cache Hit %   W/A MB Processed  Extra W/A MB Read/Written
--------------- ------------------ --------------------------
	  100.0 	       424			    0
			  ------------------------------------------------------

PGA Aggr Target Stats		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> B: Begin Snap   E: End Snap (rows dentified with B or E contain data
   which is absolute i.e. not diffed over the interval)
-> Auto PGA Target - actual workarea memory target
-> W/A PGA Used    - amount of memory used for all Workareas (manual + auto)
-> %PGA W/A Mem    - percentage of PGA memory allocated to workareas
-> %Auto W/A Mem   - percentage of workarea memory controlled by Auto Mem Mgmt
-> %Man W/A Mem    - percentage of workarea memory under manual control

						%PGA  %Auto   %Man
    PGA Aggr   Auto PGA   PGA Mem    W/A PGA	 W/A	W/A    W/A Global Mem
   Target(M)  Target(M)  Alloc(M)    Used(M)	 Mem	Mem    Mem   Bound(K)
- ---------- ---------- ---------- ---------- ------ ------ ------ ----------
B      3,215	    201    4,096.4	  0.0	  .0	 .0	.0    329,210
E      3,215	  1,198    2,197.1	  0.0	  .0	 .0	.0    329,210
			  ------------------------------------------------------

PGA Aggr Target Histogram	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Optimal Executions are purely in-memory operations

  Low	  High
Optimal Optimal    Total Execs	Optimal Execs 1-Pass Execs M-Pass Execs
------- ------- -------------- -------------- ------------ ------------
     2K      4K 	   854		  854		 0	      0
    64K    128K 	    99		   99		 0	      0
   128K    256K 	    64		   64		 0	      0
   256K    512K 	    48		   48		 0	      0
   512K   1024K 	   164		  164		 0	      0
     1M      2M 	   213		  213		 0	      0
     2M      4M 	     9		    9		 0	      0
			  ------------------------------------------------------

PGA Memory Advisory			    DB/Inst: P60SDB/p60sdb1  Snap: 136
-> When using Auto Memory Mgmt, minimally choose a pga_aggregate_target value
   where Estd PGA Overalloc Count is 0

				       Estd Extra    Estd P Estd PGA
PGA Target    Size	     W/A MB   W/A MB Read/    Cache Overallo	Estd
  Est (MB)   Factr	  Processed Written to Disk   Hit %    Count	Time
---------- ------- ---------------- ---------------- ------ -------- -------
       402     0.1	  768,309.0	 1,489,671.6   34.0    1,809 2.1E+10
       804     0.3	  768,309.0	 1,489,671.6   34.0    1,809 2.1E+10
     1,608     0.5	  768,309.0	   960,978.8   44.0	 782 1.6E+10
     2,411     0.8	  768,309.0	   367,479.2   68.0	  40 1.0E+10
     3,215     1.0	  768,309.0		 0.0  100.0	   0 7.1E+09
     3,858     1.2	  768,309.0		 0.0  100.0	   0 7.1E+09
     4,501     1.4	  768,309.0		 0.0  100.0	   0 7.1E+09
     5,144     1.6	  768,309.0		 0.0  100.0	   0 7.1E+09
     5,787     1.8	  768,309.0		 0.0  100.0	   0 7.1E+09
     6,430     2.0	  768,309.0		 0.0  100.0	   0 7.1E+09
     9,645     3.0	  768,309.0		 0.0  100.0	   0 7.1E+09
    12,860     4.0	  768,309.0		 0.0  100.0	   0 7.1E+09
    19,290     6.0	  768,309.0		 0.0  100.0	   0 7.1E+09
    25,720     8.0	  768,309.0		 0.0  100.0	   0 7.1E+09
			  ------------------------------------------------------


Shared Pool Advisory			    DB/Inst: P60SDB/p60sdb1  Snap: 136
-> SP: Shared Pool     Est LC: Estimated Library Cache	 Factr: Factor
-> Note there is often a 1:Many correlation between a single logical object
   in the Library Cache, and the physical number of memory objects associated
   with it.  Therefore comparing the number of Lib Cache objects (e.g. in
   v$librarycache), with the number of Lib Cache Memory Objects is invalid.

				       Est LC Est LC  Est LC Est LC
  Shared    SP	 Est LC 		 Time	Time	Load   Load	  Est LC
<tr><td scope="row" class='awrnc'><a class="awr" name="8fgdzmkchnn1a"></a>8fgdzmkchnn1a</td><td class='awrnc'><pre_sqltext class="awr">INSERT /*+ APPEND  LEADING(@&quot;SEL$F5BB74E1&quot; &quot;H&quot;@&quot;SEL$2&quot; &quot;A&quot;@&quot;SEL$1&quot;)  USE_NL(@&quot;SEL$F5BB74E1&quot; &quot;A&quot;@&quot;SEL$1&quot;) 	*/ INTO  WRH$_ACTIVE_SESSION_HISTORY  ( snap_id,  dbid,  instance_number ,  sample_id,	sample_time, sample_time_utc,  usecs_per_row ,	session_id,  session_serial#,  session_type ,  flags ,	user_id ,  sql_id,  sql_child_number,  sql_opcode,  force_matching_signature ,	top_level_sql_id,  top_level_sql_opcode ,  sql_plan_hash_value,  sql_full_plan_hash_value ,  sql_adaptive_plan_resolved ,  sql_plan_line_id ,  sql_plan_operation#,  sql_plan_options# ,  sql_exec_id,	sql_exec_start ,  plsql_entry_object_id,  plsql_entry_subprogram_id ,  plsql_object_id,        plsql_subprogram_id ,  qc_instance_id,  qc_session_id,  qc_session_serial#,  px_flags ,	event_id,  seq#,  p1,  p2,  p3 ,  wait_time,  time_waited ,  blocking_session,	blocking_session_serial#,  blocking_inst_id ,  current_obj#,  current_file#,  current_block#,  current_row# ,  top_level_call#,  consumer_group_id,  xid,  remote_instance#,  time_model ,  service_hash,  program,  module,  action,  client_id,  machine,  port,    ecid ,  dbreplay_file_id,  dbreplay_call_counter ,  con_dbid,  per_pdb ,	tm_delta_time,	tm_delta_cpu_time,  tm_delta_db_time,  delta_time,  delta_read_io_requests,  delta_write_io_requests,  delta_read_io_bytes,  delta_write_io_bytes,  delta_interconnect_io_bytes,  pga_allocated,  temp_space_allocated ,  dbop_name,  dbop_exec_id  )  (SELECT /*+ PARAM('_module_action_old_length', 0) */:snap_id,  :dbid,  :instance_number ,  a.sample_id,	a.sample_time, a.sample_time_utc ,  a.usecs_per_row * :disk_filter_ratio ,  a.session_id,  a.session_serial#,  a.session_type ,  decode(a.flags,  0,  to_number(NULL),	a.flags) ,  a.user_id ,  a.sql_id,  a.sql_child_number,  a.sql_opcode,	a.force_matching_signature ,  a.top_level_sql_id,  a.top_level_sql_opcode ,  a.sql_plan_hash_value,  a.sql_full_plan_hash_value ,  a.sql_adaptive_plan_resolved ,  a.sql_plan_line_id ,  a.sql_plan_operation#,  a.sql_plan_options# ,	a.sql_exec_id,	a.sql_exec_start ,  a.plsql_entry_object_id,  a.plsql_entry_subprogram_id ,  a.plsql_object_id,        a.plsql_subprogram_id ,	a.qc_instance_id,  a.qc_session_id,  a.qc_session_serial#,  a.px_flags ,  a.event_id,  a.seq#,	a.p1,  a.p2,  a.p3 ,  a.wait_time,  a.time_waited ,  a.blocking_session,  a.blocking_session_serial#,  a.blocking_inst_id ,  a.current_obj#,  a.current_file#,	a.current_block#,  a.current_row# ,  a.top_level_call#,  a.consumer_group_id,  a.xid,  a.remote_instance# ,  a.time_model ,  a.service_hash ,  substrb(a.program,  1,  64) ,  a.module,  a.action,  a.client_id,  a.machine,  a.port,  a.ecid ,  a.dbreplay_file_id,  a.dbreplay_call_counter ,  a.con_dbid,  a.con_id ,  decode(a.tm_delta_time,  0,  to_number(null),  a.tm_delta_time),  decode(a.tm_delta_time,  0,  to_number(null),  a.tm_delta_cpu_time),  decode(a.tm_delta_time,  0,  to_number(null),  a.tm_delta_db_time),  decode(a.delta_time,  0,  to_number(null),	    a.delta_time),  decode(a.delta_time,  0,  to_number(null),		 decode(a.delta_read_io_requests,  0,  to_number(null), 		 a.delta_read_io_requests)),  decode(a.delta_time,  0,	to_number(null),	   decode(a.delta_write_io_requests,  0,  to_number(null),		    a.delta_write_io_requests)),  decode(a.delta_time,	0,  to_number(null),	       decode(a.delta_read_io_bytes,  0,  to_number(null),		    a.delta_read_io_bytes)),  decode(a.delta_time,  0,	to_number(null),	   decode(a.delta_write_io_bytes,  0,  to_number(null), 		 a.delta_write_io_bytes)),  decode(a.delta_time,  0,  to_number(null),		 decode(a.delta_interconnect_io_bytes,	0,  to_number(null),		      a.delta_interconnect_io_bytes)),	decode(a.pga_allocated,  0,  to_number(null),  a.pga_allocated),  decode(a.pga_allocated,  0,  to_number(null), 	  decode(a.temp_space_allocated,  0,  to_number(null),			a.temp_space_allocated)) ,  a.dbop_name,  a.dbop_exec_id    Pool  Size	   Size       Est LC	Saved  Saved	Time   Time	 Mem Obj
 Size(M) Factr	    (M)      Mem Obj	  (s)  Factr	 (s)  Factr	Hits (K)
-------- ----- -------- ------------ -------- ------ ------- ------ ------------
   5,248   1.0	    251       11,747  230,221	 1.0   5,393	1.0	   6,853
   5,376   1.0	    378       19,334  230,225	 1.0   5,389	1.0	   6,853
   5,504   1.0	    506       23,044  230,227	 1.0   5,387	1.0	   6,854
   5,632   1.1	    634       29,412  230,234	 1.0   5,380	1.0	   6,854
   5,760   1.1	    762       37,120  230,234	 1.0   5,380	1.0	   6,854
   5,888   1.1	    873       41,633  230,234	 1.0   5,380	1.0	   6,854
 FROM	   x$ash a,	      (SELECT h.sample_addr,  h.sample_id	    FROM   x$kewash h	       WHERE		      ( (h.sample_id &gt;= :begin_flushing) and 		  (h.sample_id &lt;  :latest_sample_id) )	      and (nlssort(h.is_awr_sample, 'nls_sort=BINARY') =		  nlssort('Y',	'nls_sort=BINARY'))	      ) shdr  WHERE (1 = 1)	and shdr.sample_addr	 = a.sample_addr     and shdr.sample_id       = a.sample_id	and nlssort(a.need_awr_sample,	'nls_sort=BINARY') =	     nlssort('Y',  'nls_sort=BINARY')) </pre_sqltext></td></tr>
   6,016   1.1	    873       41,633  230,234	 1.0   5,380	1.0	   6,854
   6,144   1.2	    873       41,633  230,234	 1.0   5,380	1.0	   6,854
   6,272   1.2	    873       41,633  230,234	 1.0   5,380	1.0	   6,854
   6,400   1.2	    873       41,633  230,234	 1.0   5,380	1.0	   6,854
   6,528   1.2	    873       41,633  230,234	 1.0   5,380	1.0	   6,854
<tr><td scope="row" class='awrc'><a class="awr" name="8swypbbr0m372"></a>8swypbbr0m372</td><td class='awrc'><pre_sqltext class="awr">select order#, columns, types from access$ where d_obj#=:1</pre_sqltext></td></tr>
   7,168   1.4	    873       41,633  230,234	 1.0   5,380	1.0	   6,854
   7,808   1.5	    873       41,633  230,234	 1.0   5,380	1.0	   6,854
   8,448   1.6	    873       41,633  230,234	 1.0   5,380	1.0	   6,854
   9,088   1.7	    873       41,633  230,234	 1.0   5,380	1.0	   6,854
<tr><td scope="row" class='awrnc'><a class="awr" name="96mhm2vpjm2m8"></a>96mhm2vpjm2m8</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
   9,728   1.9	    873       41,633  230,234	 1.0   5,380	1.0	   6,854
  10,368   2.0	    873       41,633  230,234	 1.0   5,380	1.0	   6,854
  11,008   2.1	    873       41,633  230,234	 1.0   5,380	1.0	   6,854
v_default_schema_number PLS_INTEGER := '454';
			  ------------------------------------------------------

v_update_pct PLS_INTEGER := '15';
SGA Target Advisory			    DB/Inst: P60SDB/p60sdb1  Snap: 136

SGA Target   SGA Size	    Est DB     Est Physical
  Size (M)     Factor	  Time (s)	      Reads
v_max_loop_iterations PLS_INTEGER := '0';
---------- ---------- ------------ ----------------
    10,240	  0.3	   264,750	176,877,469
    15,360	  0.4	   249,234	161,895,131
    20,480	  0.5	   248,323	161,020,366
v_seconds_to_run PLS_INTEGER := '600';
    25,600	  0.6	   247,584	160,304,650
    30,720	  0.8	   247,239	159,970,648
    35,840	  0.9	   246,575	159,334,456
v_scale PLS_INTEGER := '131072';
    40,960	  1.0	   246,279	159,048,169
    46,080	  1.1	   245,713	158,507,405
    51,200	  1.3	   245,466	158,268,833
    56,320	  1.4	   244,949	157,775,784
v_work_unit PLS_INTEGER := '64' ;
    61,440	  1.5	   244,481	157,314,544
    66,560	  1.6	   244,260	157,091,877
    71,680	  1.8	   243,792	156,662,446
    76,800	  1.9	   243,792	156,662,446
v_redo_stress  VARCHAR2(12) := 'LITE';
    81,920	  2.0	   243,792	156,662,446
			  ------------------------------------------------------

Streams Pool Advisory			    DB/Inst: P60SDB/p60sdb1  Snap: 136
v_hot_schema_modulus PLS_INTEGER := '0';

		  No data exists for this section of the report.
			  ------------------------------------------------------

v_do_hotspot   VARCHAR(7) := 'FALSE';
Java Pool Advisory			    DB/Inst: P60SDB/p60sdb1  Snap: 136

		  No data exists for this section of the report.
			  ------------------------------------------------------
v_hotspot_mb  NUMBER := '8';

Buffer Wait Statistics		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> ordered by wait time desc, waits desc

v_hotspot_offset_mb NUMBER := '16';
Class			 Waits Total Wait Time (s)  Avg Time (ms)
------------------ ----------- ------------------- --------------
file header block	    13			 6	      445
undo header		     4			 0	       48
v_hotspot_modulus  PLS_INTEGER := '3';
data block		     2			 0	       40
			  ------------------------------------------------------



Enqueue Activity		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> only enqueues with requests are shown
-> Enqueue stats gathered prior to 10g should not be compared with 10g data
-> ordered by Wait Time desc, Waits desc, Requests desc
v_sleep_modulus PLS_INTEGER := '0';

Enqueue Type (Request Reason)
------------------------------------------------------------------------------
    Requests	Succ Gets Failed Gets	    Waits  Wt Time (s) Av Wt Time(ms)
v_sleep_min NUMBER := '.1';
------------ ------------ ----------- ----------- ------------ --------------
CR-Reuse Block Range (block range reuse ckpt)
       1,058	    1,058	    0	      236	    17		72.37
v_sleep_max NUMBER := '.5';
TM-DML
      41,094	   41,094	    0	      104	    14	       138.60
RO-Multiple Object Reuse (fast object reuse)
	 456	      456	    0	      174	     6		34.54
v_scan_query_pct PLS_INTEGER := '0';
CF-Controlfile Transaction
       1,715	    1,715	    0	       63	     2		32.41
TO-Temp Object
	 123	      123	    0	       14	     1		38.07
v_obfuscate VARCHAR(5)	:= 'FALSE';
WF-AWR Flush
	  34	       27	    7	       19	     1		27.68
TA-Instance Undo
	   2		2	    0		2	     1	       253.00

DW-In memory Dispenser
	   2		2	    0		2	     0	       170.00
PS-PX Process Reservation
	 178	      177	    1	      105	     0		 1.97

TT-Tablespace
	 710	      710	    0	       16	     0		 1.81
FB-Format Block
	  33	       33	    0	       23	     0		  .96
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
HW-Segment High Water Mark
       1,100	    1,100	    0	       15	     0		 1.07
PW-Buffer Cache PreWarm (flush prewarm buffers)
	  56	       56	    0		9	     0		 1.56
US-Undo Segment
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
	  20	       20	    0		9	     0		 1.44
WT-AWR CDB-Wide Table Lock
	  22	       22	    0	       10	     0		 1.20
AF-Advisor Framework (task serialization)

	  13	       13	    0		1	     0		 3.00
TX-Transaction
      41,054	   41,053	    0		0	     0		  N/A
v_num_tmp NUMBER := 0;
JG-Job Scheduler1
       2,751	    2,751	    0		0	     0		  N/A
JG-Job Scheduler1 (queue lock)

       2,751	    2,751	    0		0	     0		  N/A
DD-ASM Local Disk Group
	 536	      536	    0		0	     0		  N/A
SJ-KTSJ Slave Task Cancel (Slave Task Cancel)
v_loop_cnt PLS_INTEGER := 0;
	 492	      494	    0		0	     0		  N/A
CU-Cursor
	 278	      278	    0		0	     0		  N/A
JG-Job Scheduler1 (q mem clnup lck)
v_rowcnt PLS_INTEGER := 0;
	 262	      262	    0		0	     0		  N/A
BU-Buddy Instance Context (recovery set construct)
	 215	      215	    0		0	     0		  N/A
IS-Instance State
v_updates_cnt PLS_INTEGER := 0;
	 197	      197	    0		0	     0		  N/A
FP-File Object (global fob contention)
	 159	      159	    0		0	     0		  N/A
SE-Session Migration
v_selects_cnt PLS_INTEGER := 0;
	 109	      109	    0		0	     0		  N/A
SH-Active Session History Flushing
	 106	      105	    1		0	     0		  N/A
XR-Quiesce / Force Logging (database force logging)

	  56	       56	    0		0	     0		  N/A
IT-In-Mem Temp Table Meta Creation
	  46	       46	    0		0	     0		  N/A

Enqueue Activity		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
v_random_access_queries_cnt PLS_INTEGER := 0;
-> only enqueues with requests are shown
-> Enqueue stats gathered prior to 10g should not be compared with 10g data
-> ordered by Wait Time desc, Waits desc, Requests desc

v_scan_queries_cnt PLS_INTEGER := 0;
Enqueue Type (Request Reason)
------------------------------------------------------------------------------
    Requests	Succ Gets Failed Gets	    Waits  Wt Time (s) Av Wt Time(ms)

------------ ------------ ----------- ----------- ------------ --------------
MR-Media Recovery
	  14	       14	    0		0	     0		  N/A
DA-Instance DP Array (Slave Process Array)
	  13	       13	    0		0	     0		  N/A
v_do_scan_query BOOLEAN :=FALSE;
SQ-Sequence Cache
	  13	       13	    0		0	     0		  N/A
TH-Threshold Chain (metric threshold evaluation)
	  11	       11	    0		0	     0		  N/A
v_scan_query_quota  BOOLEAN := FALSE;
PR-Process Startup
	   4		4	    0		0	     0		  N/A
AE-Edition Lock (lock)
	   3		3	    0		0	     0		  N/A
PV-KSV slave startup (syncstart)
v_scan_workload_only BOOLEAN := FALSE;
	   3		3	    0		0	     0		  N/A
RA-Real-Time ADDM Flood Control (RT ADDM flood control)
	   1		1	    0		0	     0		  N/A
TD-KTF map table enqueue (KTF dump entries)
v_random_workload_only BOOLEAN := FALSE;
	   1		1	    0		0	     0		  N/A
			  ------------------------------------------------------



Undo Segment Summary		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Min/Max TR (mins) - Min and Max Tuned Retention (minutes)
-> STO - Snapshot Too Old count,  OOS - Out of Space count
-> Undo segment block stats:

-> uS - unexpired Stolen,   uR - unexpired Released,   uU - unexpired reUsed
-> eS - expired   Stolen,   eR - expired   Released,   eU - expired   reUsed

Undo   Num Undo       Number of  Max Qry   Max Tx Min/Max   STO/     uS/uR/uU/
v_random_block PLS_INTEGER := 1;
 TS# Blocks (K)    Transactions  Len (s) Concurcy TR (mins) OOS      eS/eR/eU
---- ---------- --------------- -------- -------- --------- ----- --------------
   2	   57.9 	 21,746    1,639      231 38.3/38.3 38/0  0/0/0/0/0/0
v_tmp PLS_INTEGER;
			  ------------------------------------------------------

Undo Segment Stats		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Most recent 35 Undostat rows, ordered by Time desc

v_now PLS_INTEGER;
		Num Undo    Number of Max Qry  Max Tx Tun Ret STO/    uS/uR/uU/
End Time	  Blocks Transactions Len (s)	Concy  (mins) OOS     eS/eR/eU
------------ ----------- ------------ ------- ------- ------- ----- ------------
v_brick_wall PLS_INTEGER;
14-Feb 08:37	  57,868       21,746	1,639	  231	   38 38/0  0/0/0/0/0/0
			  ------------------------------------------------------



Latch Activity			       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
v_begin_time PLS_INTEGER;
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
v_end_time PLS_INTEGER;
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
AQ Background: interrupt	      1    0.0		   0	       24    0.0
AQ Coord jobx_kwsbgsgn l	     22    0.0		   0		0    N/A
v_total_time PLS_INTEGER;
AQ Message drive state o	      1    0.0		   0		0    N/A
AQ Sharded master pool l	     22    0.0		   0		0    N/A
AQ deq hash table latch 	      1    0.0		   0		0    N/A
AQ dequeue txn counter l	    132    0.0		   0		0    N/A
v_begin_cpu_tm PLS_INTEGER;
ASM Keyed state latch		    258    0.0		   0		0    N/A
ASM allocation			 39,942    0.0		   0		0    N/A
ASM connection state lat	  5,424    0.0		   0		0    N/A
ASM db client latch		  1,063    0.0		   0		0    N/A
v_end_cpu_tm PLS_INTEGER;
ASM map headers 		  1,120    0.0		   0		0    N/A
ASM map load waiting lis	    320    0.0		   0		0    N/A
ASM map operation freeli	 15,468    0.2	  0.0	   0		0    N/A
ASM map operation hash t     35,654,202    0.0	  0.2	   0		0    N/A
v_total_cpu_tm PLS_INTEGER;
ASM network background l	  5,498    0.0		   0		0    N/A
ASM network state latch 	    330    0.0		   0		0    N/A
ASM remote client latch 	     10    0.0		   0		0    N/A
AWR Alerted Metric Eleme	  9,388    0.0		   0		0    N/A

Autotask management		     11    0.0		   0		0    N/A
Change Notification Hash	    319    0.0		   0		0    N/A
Column stats entry latch	      1    0.0		   0		0    N/A
Consistent RBA			 21,694    0.0	  0.3	   0		0    N/A
v_do_sleeps BOOLEAN := FALSE;
DML lock allocation		 82,632    0.0		   0		0    N/A
Event Group Locks		    111    0.0		   0		0    N/A
FIB s.o chain latch		    320    0.0		   0		0    N/A
FOB consolidated s.o lis	    320    0.0		   0		0    N/A
v_loop_control BOOLEAN := FALSE;
File State Object Pool P	      1    0.0		   0		0    N/A
GCS logfile block		      1    0.0		   0		0    N/A
GCS logfile write queue 	      1    0.0		   0		0    N/A
Hang Manager wait event 	     43    0.0		   0	    7,732    0.0
v_update_quota BOOLEAN := FALSE;
I/O Staticstics latch		      1    0.0		   0		0    N/A
ILM Stats Stripe Latch		      1    0.0		   0		0    N/A
ILM Stats main anchor la	  1,021    0.0		   0		0    N/A
ILM access tracking exte	      1    0.0		   0		0    N/A
v_select_only_workload BOOLEAN := FALSE;
ILM activity tracking la	      1    0.0		   0		0    N/A
IM Global dictionary lat	      1    0.0		   0		0    N/A
IM Global dictionary que	      1    0.0		   0		0    N/A
IM Global dictionary rw 	      1    0.0		   0		0    N/A
v_update_only_workload BOOLEAN := FALSE;
IM area sb latch		      1    0.0		   0		0    N/A
IM area scb latch		      1    0.0		   0		0    N/A
IM emb latch			      1    0.0		   0		0    N/A
IM seg hdr latch		      1    0.0		   0		0    N/A
v_do_update BOOLEAN := FALSE;
IMFS defer write list		      1    0.0		   0		0    N/A
IMXT hash table latch		      1    0.0		   0		0    N/A
IPC other latch 		      8    0.0		   0		0    N/A
IPC stats buffer allocat	      1    0.0		   0		0    N/A
v_do_hot_schema BOOLEAN := FALSE;
In memory undo latch		      1    0.0		   0		0    N/A
JS Sh mem access		    132    0.0		   0		0    N/A
JS broadcast add buf lat	    150    0.0		   0		0    N/A
JS broadcast drop buf la	    150    0.0		   0		0    N/A
v_stop_immediate BOOLEAN := FALSE;
JS broadcast load blnc l	    150    0.0		   0		0    N/A
JS queue access latch		      1    0.0		   0		0    N/A
JS queue state obj latch	  5,502    0.0		   0		0    N/A
JS slv state obj latch		      1    0.0		   0		0    N/A
v_sharing_schema BOOLEAN := FALSE;
KCNIBR - invalid block r	      1    0.0		   0		0    N/A
KDCStatHash latch		      1    0.0		   0		0    N/A
KDFI Buffer Latch		      1    0.0		   0		0    N/A
KDFI Hash Bucket Latch		      1    0.0		   0		0    N/A
v_seed VARCHAR2(128);
KDFI Hash Elem Latch		      1    0.0		   0		0    N/A
KDMADO action list latch	      1    0.0		   0		0    N/A

Latch Activity			       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
v_home_schema_str VARCHAR2(80);
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

v_scratch VARCHAR2(200) ;
					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------

KDMADO bll latch		      1    0.0		   0		0    N/A
KDMADO latch			      1    0.0		   0		0    N/A
KFC FX Hash Latch		      1    0.0		   0		0    N/A
KFC Hash Latch			      1    0.0		   0		0    N/A
v_cpu_pct NUMBER(6, 3);
KFCL LE Freelist		      1    0.0		   0		0    N/A
KFIAS client latch		      1    0.0		   0		0    N/A
KFIAS cluster latch		      1    0.0		   0		0    N/A
KFIAS endpoint latch		      1    0.0		   0		0    N/A
v_my_serial NUMBER(16);
KFIAS node latch		      1    0.0		   0		0    N/A
KFIAS process latch		      1    0.0		   0		0    N/A
KFIAS queue latch		      1    0.0		   0		0    N/A
KFK SGA Libload latch		 13,486    0.0		   0		0    N/A

KFMD SGA			    377    0.0		   0		0    N/A
KGNFS-NFS:SHM structure 	      2    0.0		   0		0    N/A
KGNFS-NFS:SVR LIST		    220    0.0		   0		0    N/A
KJC message pool KGH cal	 15,382    0.0		   0		3    0.0
BEGIN
KJC message pool free li	897,564    0.3	  0.1	   0	1,779,468    2.4
KJC message pool pending	      1    0.0		   0		0    N/A
KJCT flow control latch       6,645,595    0.1	  0.1	   0		0    N/A
KMG MMAN ready and start	    219    0.0		   0		0    N/A

KSFS OFS ctx level paren	      1    0.0		   0		0    N/A
KSFS OFS req layer paren	      1    0.0		   0		0    N/A
KSFS OFS sess layer pare	      1    0.0		   0		0    N/A
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
KSFS Receive and Send Qu	      1    0.0		   0		0    N/A
KSFS id table parent lat	      1    0.0		   0		0    N/A
KSFS ksfs_node latch		      1    0.0		   0		0    N/A
KSFSD name cache parent 	      1    0.0		   0		0    N/A
KSGL LS Segment latch		      1    0.0		   0		0    N/A
EXECUTE IMMEDIATE v_home_schema_str;
KSGL SGA anchor latch		      1    0.0		   0		0    N/A
KSIPC ASPC anchor latch 	      1    0.0		   0		0    N/A
KSIPC SGA allocation par	  1,028    0.0		   0		0    N/A
KSIPCGSN Hash Table latc	      1    0.0		   0		0    N/A

KSIPCGSN Namespace latch	      1    0.0		   0		0    N/A
KSK PDB IO STAT 		      1    0.0		   0		0    N/A
KSRMA SGA anchor latch		      1    0.0		   0		0    N/A
KSRMF SGA anchor latch		      1    0.0		   0		0    N/A

KSWL SGA anchor latch		      1    0.0		   0		0    N/A
KSXR hang analysis phase	    566    0.0		   0	       27    0.0
KSXR hang analysis phase	    352    0.0		   0		0    N/A
KSXR large replies		     28    0.0		   0		0    N/A
IF ( v_hot_schema_modulus != 0 ) THEN
KTF sga latch			      2    0.0		   0	      263    0.0
KTILM latch			      1    0.0		   0		0    N/A
KTU in-memory txn table 	      1    0.0		   0		0    N/A
KTURMA ODPSCN latch		      1    0.0		   0		0    N/A
KTURMA SGA allocation pa	      1    0.0		   0		0    N/A
	v_do_hot_schema := TRUE;
KWQMN job cache list lat	     98    0.0		   0		0    N/A
Latch for NonceHistory		      1    0.0		   0		0    N/A
Locator state objects po	      1    0.0		   0		0    N/A
Lost write change tracki	      1    0.0		   0		0    N/A
END IF;
Lsod array latch		    272    0.0		   0		0    N/A
MGA asr alloc latch		     11    0.0		   0		0    N/A
MGA heap latch			    513    6.8	  0.7	   0		0    N/A
MGA shared context latch	  3,279    2.3	  0.5	   0		0    N/A

MGA shared context root 	    527   23.7	  0.6	   0		0    N/A
MQL Tracking Latch		      0    N/A		   0	       13    0.0
Memory Management Latch 	      0    N/A		   0	      219    0.0
Memory Queue			      1    0.0		   0		0    N/A
Memory Queue Message Sub	      1    0.0		   0		0    N/A
IF ( v_sleep_modulus != 0 )	  THEN
Memory Queue Message Sub	      1    0.0		   0		0    N/A
Memory Queue Message Sub	      1    0.0		   0		0    N/A

Latch Activity			       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
	v_do_sleeps := TRUE;
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0
END IF;

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss

------------------------ -------------- ------ ------ ------ ------------ ------
Memory Queue Message Sub	      1    0.0		   0		0    N/A
Memory Queue Subscriber 	      1    0.0		   0		0    N/A
Message cache latch		      1    0.0		   0		0    N/A
MinActiveScn Latch		     33    0.0		   0		0    N/A
IF ( v_max_loop_iterations &gt; 0 )  THEN
Mutex				      1    0.0		   0		0    N/A
Mutex Stats			      1    0.0		   0		0    N/A
Nologging Standby SCN Ti	    212    0.0		   0		0    N/A
OS process			  1,334    0.0		   0		0    N/A
	v_loop_control := TRUE ;
OS process allocation		  1,582    0.1	  0.0	   0		0    N/A
OS process: request allo	    258    0.0		   0		0    N/A
PDB Hash Table Latch		      1    0.0		   0		0    N/A
PDB LRU structure		      1    0.0		   0		0    N/A
END IF;
PL/SQL warning settings 	    107    0.0		   0		0    N/A
PX hash array latch		      1    0.0		   0		0    N/A
Parent latch for depende	      1    0.0		   0		0    N/A
Parent latch for query h	      1    0.0		   0		0    N/A

Parent latch for segment	      1    0.0		   0		0    N/A
QMT				      1    0.0		   0		0    N/A
Real-time descriptor lat	 68,620    0.0		   0		0    N/A
Report Request stats lat	     58    0.0		   0		0    N/A
Report Request struct la	     24    0.0		   0		0    N/A
IF ( v_update_pct = 0 ) 	  THEN
Request holder compeltio	      7    0.0		   0		0    N/A
Retry Ht elm latch		      1    0.0		   0		0    N/A
Retry bkt latch 		      1    0.0		   0		0    N/A
SGA Blackbox latch		      2    0.0		   0		0    N/A
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;
SGA IO buffer pool latch	      4    0.0		   0		4    0.0
SGA Logging Bkt Latch		      1    0.0		   0		0    N/A

SGA Logging Log Latch		 11,935    0.0		   0		0    N/A
SGA blob parent 		      1    0.0		   0		0    N/A
SGA bucket locks		      1    0.0		   0		0    N/A
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
SGA heap locks			      1    0.0		   0		0    N/A
SGA pool locks			      1    0.0		   0		0    N/A
SO private so latch		    767    0.3	  0.0	   0	       32    0.0
SQL memory manager latch	      1    0.0		   0	      219    0.0
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
SQL memory manager worka	 16,350    0.0		   0		0    N/A
SR Stats Stripe Latch		      1    0.0		   0		0    N/A
Sched IM Job latch		     11    0.0		   0		0    N/A
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
Sched InMem Job Cache		      1    0.0		   0		0    N/A
Shared B-Tree			     25    0.0		   0		0    N/A
Streams Generic 		      1    0.0		   0		0    N/A
			v_sharing_schema := TRUE ;
Subscriber Ht elm latch 	      1    0.0		   0		0    N/A
Testing 			      1    0.0		   0		0    N/A
Token Manager			      1    0.0		   0		0    N/A
		ELSE
Txn Ht elm latch		      1    0.0		   0		0    N/A
Txn bkt latch			      1    0.0		   0		0    N/A
UM object latch 		      1    0.0		   0		0    N/A
WCR: sync			      1    0.0		   0		0    N/A
			IF ( v_sharing_schema = TRUE ) THEN
Write State Object Pool 	      1    0.0		   0		0    N/A
X$KSFQP 			      1    0.0		   0		0    N/A
XDB NFS Security Latch		      1    0.0		   0		0    N/A
				EXECUTE IMMEDIATE v_home_schema_str;
XDB unused session pool 	      1    0.0		   0		0    N/A
XDB used session pool		      1    0.0		   0		0    N/A
active checkpoint queue 	256,717    0.2	  0.2	   0		0    N/A
active service list		  4,353    0.0	  0.0	   0	    3,821    0.0
				v_sharing_schema := FALSE;
archive destination		     20    0.0		   0		0    N/A
begin backup scn array		    108    0.0		   0		0    N/A
			END IF;
buffer pool			      1    0.0		   0		0    N/A
business card			     29    0.0		   0		0    N/A
cache buffer handles		    224    0.0		   0		0    N/A
		END IF;
cache buffers chains	     85,406,212    0.0	  0.1	   0   27,858,158    0.3

Latch Activity			       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
	END IF;
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests

-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
	-- Choose the random block. The v_do_hotspot handler that follows can override.
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
cache buffers lru chain      18,089,948    0.5	  0.0	   1   17,853,212    0.8
cache table scan latch		     33    0.0		   0	       33    0.0
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
call allocation 		  2,064    1.0	  0.8	   0		0    N/A
change notification clie	      1    0.0		   0		0    N/A
channel handle pool latc	    519    0.0		   0		0    N/A

channel operations paren	  4,290    0.0	  0.0	   0	       28    0.0
checkpoint queue latch	      8,629,183    0.0	  0.1	   0	2,628,625    0.0
client/application info 	    161    0.0		   0		0    N/A
compile environment latc	    118    0.0		   0		0    N/A
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
corrupted undo seg latch	     39    0.0		   0		0    N/A
cp handoff latch		      1    0.0		   0		0    N/A
cp pool latch			      1    0.0		   0		0    N/A
cp server hash latch		      1    0.0		   0		0    N/A
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
cp sga latch			     10    0.0		   0		0    N/A
cp srv type state latch 	    661    0.0		   0		0    N/A
cp srv type wait latch		      1    0.0		   0		0    N/A
cr slave free list		     16    0.0		   0		5    0.0
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
cvmap freelist lock		      1    0.0		   0		0    N/A
deferred cleanup latch		     10    0.0		   0		0    N/A
dispatcher info 		      4    0.0		   0		0    N/A
dml lock allocation		     10    0.0		   0		0    N/A
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
done queue latch		      1    0.0		   0		0    N/A
dtp latch			    258    0.0		   0		0    N/A
dummy allocation		    467    0.0		   0		0    N/A
	END IF;
eighth spare latch - X p	      1    0.0		   0		0    N/A
eleventh spare latch - c	      1    0.0		   0		0    N/A
enqueue freelist latch		      1    0.0		   0	   25,463    0.0

enqueue hash chains		284,518    0.0	  0.2	   0	       68    0.0
enqueues			    275    0.0		   0		0    N/A
error message lists		     68    0.0		   0		0    N/A
fast space usage latch		     47    0.0		   0		0    N/A
----------------------------------------------------------------------------------------------------------------------
fifteenth spare latch - 	      1    0.0		   0		0    N/A
file cache latch		    822    0.0		   0		0    N/A
flash file access latch 	      1    0.0		   0		0    N/A
flashback copy			      1    0.0		   0		0    N/A
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
fourteenth spare latch -	      1    0.0		   0		0    N/A
fourth Audit Vault latch	      1    0.0		   0		0    N/A
gc element		     54,683,162    0.1	  0.1	  10	1,772,045    0.2
----------------------------------------------------------------------------------------------------------------------
gc xid list			    237    0.0		   0		0    N/A
gcr global ctx			    166    0.0		   0		0    N/A
gcs commit scn state		      1    0.0		   0		0    N/A

gcs nodemap pool		 34,291    0.0	  1.0	   0		0    N/A
gcs opaque info freelist	 42,851    0.0	  0.0	   0		0    N/A
gcs partitioned table ha     32,589,402    0.0	  0.0	   0	   98,859    0.0
	IF  ( v_select_only_workload = TRUE ) THEN
gcs pcm hashed value buc	      1    0.0		   0		0    N/A
gcs remaster request que	      2    0.0		   0		0    N/A
gcs resource freelist	     14,139,904    0.4	  0.1	   4	7,420,703    0.6
gcs resource hash	     56,974,896    0.0	  0.2	   0	   46,163    0.1
		-- handle case where user specified zero pct updates (a SELECT-only workload)
gcs resource scan list		      1    0.0		   0		0    N/A
gcs resource timerq list	      1    0.0		   0		0    N/A
gcs resource validate li	      1    0.0		   0		0    N/A
		v_do_update := FALSE;
gcs shadows freelist	      6,700,609    0.0	  0.1	   0		0    N/A
ges DFS wait callback in	      6    0.0		   0		1    0.0
ges cached resource list	 73,067    0.0	  0.1	   0	   54,336    0.0
ges deadlock list		    468    0.0		   0		1    0.0
		v_update_quota := TRUE ;
ges domain table		187,509    0.0		   0		0    N/A
ges enqueue table freeli	 90,880    0.0	  0.3	   0		0    N/A
ges group table 		189,772    0.0		   0		0    N/A
	ELSE
ges process hash list		 23,499    0.0	  0.7	   0		0    N/A
ges process parent latch	381,380    0.0		   0		0    N/A

Latch Activity			       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
		IF ( v_update_only_workload = TRUE ) THEN
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0
			-- handle case where user specified 100% updates

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
			v_do_update := TRUE;
------------------------ -------------- ------ ------ ------ ------------ ------
ges process table freeli	    258    0.0		   0		0    N/A
ges remote lock freelist	  6,258    0.0		   0		1    0.0
			v_update_quota := FALSE;
ges resource hash list		264,549    0.1	  0.4	   0	   22,528    0.0
ges resource scan list		     25    0.0		   0		0    N/A
ges resource table freel	 44,282    0.0	  0.0	   0		0    N/A
		ELSE
ges s-lock bitvec freeli	  2,296    0.0		   0		0    N/A
ges timeout list		    363    0.0		   0	       75    0.0
ges value block free lis	      1    0.0		   0		0    N/A
global tx hash mapping		      1    0.0		   0		0    N/A
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
granule from data transf	      1    0.0		   0		0    N/A
gws:Sharding global desc	     44    0.0		   0		0    N/A
hash table Sql Plan Find	      0    N/A		   0	       69    0.0
hash table column usage 	      0    N/A		   0	   21,414    0.0
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
hash table expression us	      1    0.0		   0		0    N/A
hash table sql contorl l	      1    0.0		   0		0    N/A
heartbeat check 		      1    0.0		   0	      396    0.0
heartbeat structure mana	      0    N/A		   0	      329    0.0
			IF ( v_update_quota = FALSE ) THEN
imc buf hdl lat 		      1    0.0		   0		0    N/A
imc cr clone buf		      1    0.0		   0		0    N/A
imc hash lat			      1    0.0		   0		0    N/A
imc sj lat			      1    0.0		   0		0    N/A
				-- Handle case where user has set UPDATE_PCT to a valid value
imc srchsp lat			      1    0.0		   0		0    N/A
imc-txn-wrk-lat 		      1    0.0		   0		0    N/A
in-memory area latch		      1    0.0		   0		0    N/A
				--
in-memory columnar segme	      1    0.0		   0		0    N/A
in-memory columnar ts ex	      1    0.0		   0		0    N/A
in-memory global pool la	      1    0.0		   0		0    N/A
internal temp table obje	    115    0.0		   0		0    N/A
				-- We are doing updates during this run and quota has not been met yet
interrupt manipulation		    432    0.0		   0		0    N/A
intra txn parallel recov	      1    0.0		   0		0    N/A
io pool granule list		     94    0.0		   0		0    N/A
				-- We still vacillate until update quota has been met
io pool granule metadata	    189    0.0		   0		0    N/A
job workq parent latch		      1    0.0		   0		0    N/A
job_queue_processes para	     10    0.0		   0		0    N/A
k2q global data latch		    438    0.0		   0		0    N/A

k2q lock allocation		      1    0.0		   0		0    N/A
kKCN Cqn SGA			      1    0.0		   0		0    N/A
kcb DW scan objtemp hash	      1    0.0		   0		0    N/A
kcn buffer chains		      1    0.0		   0		0    N/A
				IF ( MOD(v_random_block,  2) = 0 ) THEN
kdlx hb parent latch		      1    0.0		   0		0    N/A
kgb parent			      1    0.0		   0		0    N/A
kgnfs mount latch		      1    0.0		   0		0    N/A
					v_do_update := TRUE;
kjbr roi instance map		      1    0.0		   0		0    N/A
kjci objects freelist la	 10,363    0.1	  0.3	   0		0    N/A
kjci process context lat	  5,853    0.1	  0.0	   0	   84,025    0.0
kjci process list latch 	  5,321    0.0		   0		3    0.0
				ELSE
kjci request sequence la	    114    0.0		   0		0    N/A
kjcipctx state object fr	    254    0.0		   0		0    N/A
kjoedcso state object fr	     10    0.0		   0		0    N/A
					v_do_update := FALSE;
kjoeq omni enqueue hash 	      1    0.0		   0		0    N/A
kjoer owner hash bucket 	      1    0.0		   0		0    N/A
kjpm my inst data		     22    0.0		   0		0    N/A
kjsc Request obj freelis	    504    0.2	  0.0	   0		0    N/A
				END IF;
kjsc Ring Buffer obj fre	    252    0.0		   0		0    N/A
kjsc protect control req	    252    0.0		   0	    6,656    0.0
kjsc protect warm up con	    493    0.0		   0		0    N/A
			ELSE
kjsca pkey obj freelist 	    296    0.0		   0		0    N/A
kjsca protect pkey hash 	 18,031    0.0		   0		0    N/A
kjsca protect service ha	     23    0.0		   0		0    N/A
kjscpss state object fre	    252    0.0		   0		0    N/A
				-- UPDATE quota has been filled,  force drain some SELECTs

Latch Activity			       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
				v_do_update := FALSE;
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
			END IF;
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
		END IF;
kokc descriptor allocati	     80    0.0		   0		0    N/A
kpoxft latch			      0    N/A		   0	      249    0.4
krso process			     23    0.0		   0		0    N/A
ksbxic instance latch		     55    0.0		   0		0    N/A
	END IF;
ksevn object root latch 	    219    0.0		   0		0    N/A
ksfv messages			      1    0.0		   0		0    N/A
ksi resource reuse count	      1    0.0		   0		0    N/A

ksim group membership ca	    999    0.0		   0		0    N/A
ksim membership request 	      0    N/A		   0	      329    0.0
ksns object latch		      1    0.0		   0		0    N/A
kss move lock			      5    0.0		   0		0    N/A
----------------------------------------------------------------------------------------------------------------------
ksuosstats global area		     70    0.0		   0	      252    0.0
ksutcpistat latch		      1    0.0		   0		0    N/A
ksv allocation latch		     20    0.0		   0		0    N/A
ksv class latch 		 17,794    0.1	  0.1	   0		1    0.0
-- The type of SQL is now determined...execute it in the following section
ksv msg queue latch		    534    0.0		   0	      533    0.0
ksxp shared latch		    258    0.0		   0		0    N/A
ksxp so latch			    258    0.0		   0		0    N/A
ksz_so allocation latch 	    258    0.4	  0.0	   0		0    N/A
----------------------------------------------------------------------------------------------------------------------
ktfbn latch			    131    0.0		   0		0    N/A
ktm adg jrnls			      1    0.0		   0		0    N/A
ktm adg lookuptable leve	      1    0.0		   0		0    N/A
ktm adg lookuptable leve	      1    0.0		   0		0    N/A

ktm adg space			      1    0.0		   0		0    N/A
ktm adg stages			      1    0.0		   0		0    N/A
ktm adg worklink		      1    0.0		   0		0    N/A
	IF ( v_do_update != TRUE ) THEN
ktm global data 		    106    0.0		   0		0    N/A
ktm prv jrnls			      1    0.0		   0		0    N/A
ktmpj HT ls			      1    0.0		   0		0    N/A
kwqbsn:qsga			     24    0.0		   0		0    N/A
		--
kwslbmdl: metadata latch	     23    0.0		   0		0    N/A
kwslbql: queue latch		      1    0.0		   0		0    N/A
kwslbutl: uncommitted tx	      1    0.0		   0		0    N/A
kwsptQcachLt: queue cach	      1    0.0		   0		0    N/A
		-- Do a SELECT statement
kwsptTrncTsksLt: trunc t	      1    0.0		   0		0    N/A
kwsptjobAdPtLt: AdPt lis	     16    0.0		   0		0    N/A
kwsslLat: skiplist latch	      1    0.0		   0		0    N/A
kxfxscanrate_latch		      1    0.0		   0		0    N/A
		-- Work out scan or random
lgwr LWN SCN			 22,113    0.3	  0.2	   0		0    N/A
list of block allocation	162,545    0.0	  0.6	   0		0    N/A
loader state object free	    246    0.0		   0		0    N/A
lob segment dispenser la	    243    0.0		   0		0    N/A
		IF  ( v_random_workload_only = TRUE ) THEN
lob segment hash table l	    164    0.0		   0		0    N/A
lob segment query latch 	      1    0.0		   0		0    N/A
lock DBA buffer during m	      1    0.0		   0		0    N/A
log write info			      0    N/A		   0	  131,256    2.9
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
log write worker phase		  6,575    0.0		   0		0    N/A
logical standby cache		      1    0.0		   0		0    N/A
logminer context allocat	      1    0.0		   0		0    N/A
logminer local			      1    0.0		   0		0    N/A
			v_do_scan_query := FALSE;
logminer work area		      1    0.0		   0		0    N/A
longop free list parent 	      1    0.0		   0		0    N/A
managed standby 		     22    0.0		   0		0    N/A
message bitmap latch		      1    0.0		   0		0    N/A
			v_scan_query_quota := TRUE ;
message pool operations 	  1,621    0.0		   0		0    N/A
messages			671,349    0.2	  0.0	   0		0    N/A
msg queue latch 		      1    0.0		   0		0    N/A
		ELSE
multiblock read objects 	446,730    0.1	  0.3	   0		0    N/A
name-service memory obje	    313    0.0		   0		0    N/A
name-service namespace b	  3,708    0.0		   0		0    N/A

			IF ( v_scan_workload_only = TRUE ) THEN
Latch Activity			       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
name-service pending que	    136    0.0		   0		0    N/A
name-service request		      6    0.0		   0		0    N/A
name-service request que	  7,093    0.0		   0		0    N/A
ncodef allocation latch 	     10    0.0		   0		0    N/A
ninth spare latch - X pa	      1    0.0		   0		0    N/A
object queue header free	 26,286    0.0	  1.0	   0		0    N/A
object queue header oper     38,161,014    0.0	  0.1	   0	  798,544    0.0
object queue memory		    211    0.0		   0		0    N/A
object stats modificatio	    296    0.0		   0		0    N/A
parallel query alloc buf	    763    0.0		   0	      400    0.0
				v_do_scan_query := TRUE;
parallel query stats		    147    0.0		   0		0    N/A
parallel txn reco latch 	  1,754    0.0		   0		0    N/A
parameter table manageme	  1,408    0.0		   0		0    N/A
pdb enqueue hash chains 	      1    0.0		   0		0    N/A
peshm				      1    0.0		   0		0    N/A
				v_scan_query_quota := FALSE;
pesom_free_list 		      1    0.0		   0		0    N/A
pesom_hash_node 		      1    0.0		   0		0    N/A
pkey global statistics		      1    0.0		   0		0    N/A
pmon dead latch 		     11    0.0		   0		0    N/A
			ELSE
post/wait queue 		 48,821    0.1	  0.0	   0	   48,884    0.1
process allocation		  3,526    0.0	  0.0	   0		0    N/A
process group creation		    258    0.0		   0		0    N/A
process memory detail		      1    0.0		   0		0    N/A
				IF ( v_scan_query_quota = FALSE ) THEN
process pkey statistics 	      1    0.0		   0		0    N/A
process queue			    370    0.0		   0		0    N/A
process queue reference 	  8,015    0.0		   0	    1,336    0.0
qmn task queue latch		     99    0.0		   0		0    N/A
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
quarantine object		     10    0.0		   0		0    N/A
query server freelists		    307    0.0		   0		0    N/A
query server process		    633    0.0		   0		1    0.0
queued dump request		      2    0.0		   0		0    N/A
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
queuing load statistics 	      1    0.0		   0		0    N/A
read-moslty lock queue u	      1    0.0		   0		0    N/A
recovery domain hash buc	    393    0.0		   0		0    N/A
redo allocation 		 99,008   13.4	  0.3	   4	2,845,754    3.8
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
redo copy			      1    0.0		   0	2,858,305    0.3
redo transport task		      1    0.0		   0		0    N/A
						v_do_scan_query := TRUE;
redo writing			342,955    0.1	  0.2	   0		0    N/A
remote tool request latc	    359    0.0		   0		0    N/A
resmgr group change latc	    208    0.0		   0		0    N/A
resmgr:active threads		    484    0.0		   0	       11    0.0
					ELSE
resmgr:actses change gro	    107    0.0		   0		0    N/A
resmgr:actses change sta	      1    0.0		   0		0    N/A
resmgr:free threads list	    466    0.2	  0.0	   0		0    N/A
resmgr:plan CPU method		      1    0.0		   0		0    N/A
						v_do_scan_query := FALSE;
resmgr:plan change alloc	      1    0.0		   0		0    N/A
resmgr:plan change latch	      1    0.0		   0		0    N/A
resmgr:resource group CP	     37    0.0		   0		0    N/A
resmgr:schema config		     31    0.0		   0	       11    0.0
					END IF;
resmgr:session queuing		      1    0.0		   0		0    N/A
row cache objects		      1    0.0		   0		0    N/A
rt rmv count latch		      0    N/A		   0	      329    0.0
second Audit Vault latch	      1    0.0		   0		0    N/A
				ELSE
segmented array pool		    320    0.0		   0		0    N/A
sequence cache			    416    0.0		   0		0    N/A
service drain list		    657    0.0		   0		0    N/A
session allocation		 30,998    0.0		   0	   30,212    0.0
session idle bit		 65,274    0.0		   0		0    N/A
session queue latch		      1    0.0		   0		0    N/A
					-- Scan quota has been filled,	force drain some random access SELECTS
session state list latch	    516    0.0		   0		0    N/A

Latch Activity			       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
					v_do_scan_query := FALSE;
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
				END IF;
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
			END IF;
session statistics		    467    0.0		   0		0    N/A
session switching		    267    0.4	  0.0	   0		0    N/A
session timer			    220    0.0		   0		0    N/A
seventh spare latch - X 	      1    0.0		   0		0    N/A
		END IF;
sga hash table parent la	      1    0.0		   0		0    N/A
shard latch			      1    0.0		   0		0    N/A
shardgroup list latch		    273    0.0		   0		0    N/A
shared pool			122,643    0.1	  0.7	   0	    1,053    0.0

shared pool sim alloc		      9    0.0		   0		0    N/A
shared pool simulator		 11,277    0.0		   0		0    N/A
shared server configurat	    220    0.0		   0		0    N/A
sim partition latch		      1    0.0		   0		0    N/A

simulator hash latch	      3,701,249    0.0	  0.0	   0		0    N/A
simulator lru latch		      1    0.0		   0	2,068,148    0.1
sixth spare latch - X pa	      1    0.0		   0		0    N/A
sort extent pool		    725    0.0		   0		0    N/A
		IF ( v_do_scan_query != TRUE ) THEN
space background state o	      1    0.0		   0		0    N/A
space background task la	  1,916   54.8	  1.0	   0	      473    2.7
state object free list		      2    0.0		   0		0    N/A
statistics aggregation		    145    0.0		   0		0    N/A
			SELECT COUNT(c2) INTO v_rowcnt
subscriber Ht bkt		      1    0.0		   0		0    N/A
tablespace key chain		      1    0.0		   0		0    N/A
temp lob duration state 	    114    0.0		   0		0    N/A
temporary table state ob	     80    0.0		   0		0    N/A
			FROM cf1
tenth spare latch - X pa	      1    0.0		   0		0    N/A
test excl. parent l0		      1    0.0		   0		0    N/A
test excl. parent2 l0		      1    0.0		   0		0    N/A
test excl. parent2 lmid 	      1    0.0		   0		0    N/A
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
test mixed exclusive		      1    0.0		   0		0    N/A
test mode exclusive		      1    0.0		   0		0    N/A
test open exclusive		      1    0.0		   0		0    N/A
test pdb exclusive		      1    0.0		   0		0    N/A

test shared parent2 lmid	      1    0.0		   0		0    N/A
thirteenth spare latch -	      1    0.0		   0		0    N/A
threshold alerts latch		     21    0.0		   0		0    N/A
trace latch			      1    0.0		   0		0    N/A
transaction allocation		    853    0.0		   0		0    N/A
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
twelfth spare latch - ch	      1    0.0		   0		0    N/A
twenty-fifth spare latch	      1    0.0		   0		0    N/A
twenty-first spare latch	      1    0.0		   0		0    N/A
twenty-fourth spare latc	      1    0.0		   0		0    N/A
		ELSE
twenty-second spare latc	      1    0.0		   0		0    N/A
twenty-third spare latch	      1    0.0		   0		0    N/A
undo global data		253,319    0.0	  0.2	   0		0    N/A
virtual circuit buffers 	      1    0.0		   0		0    N/A
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
virtual circuit holder		      1    0.0		   0		0    N/A
virtual circuit queues		      1    0.0		   0		0    N/A
			  ------------------------------------------------------



Latch Sleep Breakdown		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> ordered by misses desc

				       Get				   Spin
Latch Name			  Requests	 Misses      Sleeps	   Gets
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
-------------------------- --------------- ------------ ----------- -----------
cache buffers lru chain 	18,089,948	 89,207       2,036	 87,290
gc element			54,683,162	 68,644       6,598	 62,487
gcs resource freelist		14,139,904	 58,434       4,317	 54,456

redo allocation 		    99,008	 13,225       4,008	  9,505
KJCT flow control latch 	 6,645,595	  7,917 	767	  7,227
object queue header operat	38,161,014	  4,010 	411	  3,630
gcs resource hash		56,974,896	  3,241 	737	  2,561
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
KJC message pool free list	   897,564	  2,846 	376	  2,486
cache buffers chains		85,406,212	  2,231 	207	  2,043
ASM map operation hash tab	35,654,202	  1,549 	290	  1,278
messages			   671,349	  1,324 	 49	  1,279
				v_scan_query_quota := TRUE;
space background task latc	     1,916	  1,050       1,030	    165
active checkpoint queue la	   256,717	    580 	 97	    487
checkpoint queue latch		 8,629,183	    469 	 58	    416
redo writing			   342,955	    353 	 64	    292
			END IF;
ges resource hash list		   264,549	    289 	117	    183
multiblock read objects 	   446,730	    246 	 86	    165
MGA shared context root la	       527	    125 	 81	     60
		END IF;
shared pool			   122,643	     79 	 57	     68
MGA shared context latch	     3,279	     74 	 34	     42
post/wait queue 		    48,821	     66 	  3	     63
lgwr LWN SCN			    22,113	     61 	 13	     49

undo global data		   253,319	     44 	  9	     35
enqueue hash chains		   284,518	     39 	  8	     31
MGA heap latch			       513	     35 	 24	     17
ges cached resource lists	    73,067	     23 	  3	     20
call allocation 		     2,064	     20 	 15	      5
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
gcs shadows freelist		 6,700,609	     19 	  1	     18
ksv class latch 		    17,794	     10 	  1	      9
Consistent RBA			    21,694	      8 	  2	      6
ges enqueue table freelist	    90,880	      6 	  2	      4
	ELSE
kjci objects freelist latc	    10,363	      6 	  2	      4
list of block allocation	   162,545	      5 	  3	      2
ges process hash list		    23,499	      3 	  2	      1
gcs nodemap pool		    34,291	      1 	  1	      0
		--
object queue header freeli	    26,286	      1 	  1	      0
			  ------------------------------------------------------


Latch Miss Sources		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
		-- Do an UPDATE statement
-> only latches with sleeps are shown
-> ordered by name, sleeps desc

						     NoWait		 Waiter
Latch Name		 Where			     Misses	Sleeps	 Sleeps
		--
------------------------ -------------------------- ------- ---------- --------

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

ASM map operation hash t kffmTranslate			  0	   177	    146
ASM map operation hash t kffmDoDone_1			  0	   113	    144
KJC message pool free li kjcsmpav: allocate a msg b	  0	   224	    373
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
KJC message pool free li kjcspfmbq: free vector of	  0	   152	      0
KJCT flow control latch  kjctcsnd: send normal mess	  0	   350	    440
KJCT flow control latch  kjcts_sedeqv3: dequeue a v	  0	   169	     28
		-- If this is a fixed-iteration count test cycle and we've hit the number of
KJCT flow control latch  kjcts_sqenq: queue a messa	  0	   145	    210
KJCT flow control latch  kjctr_updatetkt: update ti	  0	    52	     34
KJCT flow control latch  kjcts_adjtkt: adjust send	  0	    42	     14
KJCT flow control latch  kjcts_sqenq2: queue a mess	  0	     8	     40
KJCT flow control latch  kjctr_releasetkt: change t	  0	     1	      1
MGA pid alloc latch	 ksm_mga_sctx_rtrcv_do_whr2	  0	     3	     26
MGA shared context latch ksm_mga_detach_whr2		  0	    29	      5
MGA shared context latch ksm_mga_sync_whr1		  0	     4	      5
		-- iterations then set exit flag
MGA shared context root  ksm_mga_detach_whr1		  0	    81	     81
active checkpoint queue  kcbbacq: scan active check	  0	    88	     97
active checkpoint queue  kcbk_add_rbr_ckpt: Add rbr	  0	     8	      0
		v_stop_immediate := TRUE ;
active checkpoint queue  kcbkcpa: Checkpoint post-p	  0	     1	      0
cache buffers chains	 kcbzacrb: convert latch	  0	    84	      0
cache buffers chains	 kcbgtcr: convert latch 4	  0	    64	      0
	END IF;
cache buffers chains	 kcbzgb: scan from tail now	  0	    29	      0
cache buffers chains	 kcbzibmlt: multi-block rea	  0	    25	      0
cache buffers chains	 kcbgtcr: fast path exam	  0	     6	    157
END LOOP;
cache buffers chains	 kcbgtcr: slow path excl	  0	     6	     13
cache buffers chains	 kcbchg: change complete	  0	     5	      0
cache buffers chains	 kcbgcur: slow path		  0	     4	      6

cache buffers chains	 kcbchg: rollback		  0	     3	      1
cache buffers chains	 kcbgtcr: fast path pin 	  0	     3	     21
v_end_time := v_now ;
cache buffers chains	 kcbzibmlt: finish free buf	  0	     3	     22
cache buffers chains	 kcbgcur: fast path excl	  0	     2	      0
cache buffers chains	 kcbbic1			  0	     1	      1
v_now := DBMS_UTILITY.GET_TIME();
cache buffers chains	 kcbchg: aux pin		  0	     1	      1
cache buffers chains	 kcbnlc 			  0	     1	      3
cache buffers chains	 kcbrls: fast pin release	  0	     1	      3
cache buffers chains	 kcbrls: pin release		  0	     1	      8
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
cache buffers chains	 kclrwrite_3			  0	     1	      0
cache buffers lru chain  kcbzgb_2			  0	 1,774	  1,141
cache buffers lru chain  kcbzgws			  0	   223	      0

cache buffers lru chain  kcbbic2			  0	    17	    629
cache buffers lru chain  kcbbxsv: move to being wri	  0	    14	      0
cache buffers lru chain  kcbbwlru			  0	     8	    252
v_total_time := v_end_time - v_begin_time ;
call allocation 	 ksuxds 			  0	    13	      9
call allocation 	 ksudlp: top call		  0	     2	      6
checkpoint queue latch	 kcbklbc_cql			  0	    46	      0
checkpoint queue latch	 kcbkubc_4			  0	    12	     26
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
gc element		 kclnfndnewm			  0	 4,326	  1,815
gc element		 kclulb 			  0	 1,046	  2,624
gc element		 KCLUNLNK			  0	   488	  1,811
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
gc element		 kclplz 			  0	   308	      0
gc element		 kclrwrite			  0	   170	    214
gc element		 kclfwrite1			  0	   131	    137
gc element		 kclplz_1			  0	   109	     11
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
gc element		 kclrwrite_1			  0	    39	      1
gc element		 kclhngcbk1			  0	    23	      0
gc element		 kclebs 			  0	    13	     32

gc element		 kclrlstp			  0	     3	      0
gc element		 kclbla 			  0	     2	      1
gc element		 kclnfndx			  0	     1	      2
gcs nodemap pool	 kjbrnmapalloc_1		  0	     1	      1
END;</pre_sqltext></td></tr>
gcs resource freelist	 kjbralc: check freelist no	  0	 2,978	      0

Latch Miss Sources		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> only latches with sleeps are shown
<tr><td scope="row" class='awrc'><a class="awr" name="98xtrn0z3vxbw"></a>98xtrn0z3vxbw</td><td class='awrc'><pre_sqltext class="awr">DECLARE
-> ordered by name, sleeps desc

						     NoWait		 Waiter
Latch Name		 Where			     Misses	Sleeps	 Sleeps
v_default_schema_number PLS_INTEGER := '239';
------------------------ -------------------------- ------- ---------- --------
gcs resource freelist	 kjbralc add resource		  0	   511	  3,620
gcs resource freelist	 kjbrfr_bg2			  0	   471	    587
v_update_pct PLS_INTEGER := '15';
gcs resource freelist	 kjbrralc: reserve allocati	  0	   357	    110
gcs resource hash	 kjbcropen			  0	   329	    248
gcs resource hash	 kjbopen			  0	   107	     49
v_max_loop_iterations PLS_INTEGER := '0';
gcs resource hash	 kclfwrite1			  0	   106	     44
gcs resource hash	 kjbclose_remaster		  0	    61	    166
gcs resource hash	 kjbmpopen			  0	    42	     64
v_seconds_to_run PLS_INTEGER := '600';
gcs resource hash	 kjbmpclose			  0	    37	     49
gcs resource hash	 kjblpast			  0	    25	     53
gcs resource hash	 kclrwrite			  0	    12	     44
gcs resource hash	 kjbralc: reacquire		  0	     8	      0
v_scale PLS_INTEGER := '131072';
gcs resource hash	 kjbmpflushpi			  0	     6	     13
gcs resource hash	 kjbconvert			  0	     2	      3
gcs resource hash	 kjblocalobj_nolock		  0	     1	      3
v_work_unit PLS_INTEGER := '64' ;
gcs resource hash	 kjbrdowncvt			  0	     1	      0
gcs shadows freelist	 kjblralc: allocate reserve	  0	     1	      0
ges cached resource list kjruch: cached obj cleanup	  0	     3	      0
v_redo_stress  VARCHAR2(12) := 'LITE';
ges enqueue table freeli kjlfr: remove lock from pa	  0	     2	      1
ges process hash list	 kjakiqa: set inquiry respo	  0	     2	      0
ges resource hash list	 kjlrlr: remove lock from r	  0	   107	    110
v_hot_schema_modulus PLS_INTEGER := '0';
ges resource hash list	 kjrmas1: lookup master nod	  0	     5	      0
ges resource hash list	 kjlmfnd: search for lockp	  0	     3	      1
ges resource hash list	 kjakcai: search for resp b	  0	     1	      5
v_do_hotspot   VARCHAR(7) := 'FALSE';
ges resource hash list	 kjucvl: lock convert reque	  0	     1	      1
kjci objects freelist la kjcibal (get)			  0	     1	      4
kjci objects freelist la kjcibfr_cln (free)		  0	     1	      0
ksv class latch 	 ksvclsl: rdp - recycle 	  0	     1	      0
v_hotspot_mb  NUMBER := '8';
list of block allocation ktlabl 			  0	     2	      3
list of block allocation ktlbbl 			  0	     1	      0
messages		 ksarcv 			  0	    35	      6
v_hotspot_offset_mb NUMBER := '16';
messages		 ksaamb: after wakeup		  0	     8	     36
messages		 ksarcv: after wait		  0	     6	      7
mostly latch-free SCN	 kcs024 			  0	     9	      0
mostly latch-free SCN	 kcslcu3			  0	     4	     13
v_hotspot_modulus  PLS_INTEGER := '3';
mostly latch-free SCN	 kcsnew_scn_rba 		  0	     2	      0
multiblock read objects  kcbzibmlt: normal mbr free	  0	    47	     41
multiblock read objects  kcbzibmlt			  0	    39	     45

object queue header free kcbo_unlink_q			  0	     1	      1
object queue header oper kcbo_unlink_q			  0	   337	    272
v_sleep_modulus PLS_INTEGER := '0';
object queue header oper kcbo_link_q			  0	    48	     72
object queue header oper kcbo_switch_cq 		  0	    12	     43
object queue header oper kcbo_switch_q_bg		  0	    10	     11
v_sleep_min NUMBER := '.1';
object queue header oper kcbo_switch_mq_bg		  0	     4	     14
object queue header oper kclbufs			  0	     1	      0
post/wait queue 	 ksliwat:add:nowait		  0	     1	      0
post/wait queue 	 ksliwat:remove 		  0	     1	      3
v_sleep_max NUMBER := '.5';
post/wait queue 	 kslpstevent:get		  0	     1	      0
redo allocation 	 kcrfw_redo_gen: redo alloc	  0	 2,828	      0
redo allocation 	 kcrfw_redo_gen: redo alloc	  0	   657	  3,443
v_scan_query_pct PLS_INTEGER := '0';
redo allocation 	 kcrfw_redo_gen: redo alloc	  0	   393	      0
redo allocation 	 kcrfw_redo_write: before w	  0	    71	    308
redo allocation 	 kcrfw_post: more space 	  0	    58	    256
redo writing		 kcrfwcr			  0	    24	     53
v_obfuscate VARCHAR(5)	:= 'FALSE';
redo writing		 kcrfw_post: rba scn pair	  0	    22	      0
redo writing		 kcrfw_cal_target_rba		  0	    11	     10
redo writing		 kcrfw_post: after write	  0	     7	      1

space background task la ktsj_grab_task 		  0	   749	    960
space background task la ktsj_detach_task		  0	   153	     70
space background task la ktsj_smco_purgeexpired 	  0	   121	      0


Latch Miss Sources		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> only latches with sleeps are shown
-> ordered by name, sleeps desc

v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
						     NoWait		 Waiter
Latch Name		 Where			     Misses	Sleeps	 Sleeps
------------------------ -------------------------- ------- ---------- --------
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
space background task la ktsj_smco_movetasks		  0	     7	      0
undo global data	 ktusmupst: KSLBEGIN		  0	     9	      9

unknown latch		 kghfrunp: alloc: wait		  0	    45	      0
unknown latch		 kghfre 			  0	    32	     30
unknown latch		 ksqgtl3			  0	     4	      1
unknown latch		 kghfrunp: batch min scan	  0	     2	      0
v_num_tmp NUMBER := 0;
unknown latch		 ksqcmi: if lk mode request	  0	     2	      0
unknown latch		 ksqrcl 			  0	     2	      7
unknown latch		 kghalo 			  0	     1	      1

unknown latch		 kghupr1			  0	     1	     50
			  ------------------------------------------------------

Mutex Sleep Summary		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
v_loop_cnt PLS_INTEGER := 0;
-> ordered by number of sleeps desc

									 Wait
Mutex Type	      Location				     Sleeps    Time (ms)
v_rowcnt PLS_INTEGER := 0;
--------------------- -------------------------------- ------------ ------------
Row Cache	      [19] kqrpre				206	     111
Library Cache	      kglhdgh1	64				 31	      26
Library Cache	      kgllkdl1	85				 13	      32
v_updates_cnt PLS_INTEGER := 0;
Row Cache	      [06] kqrGetClusterLock			  3	      10
Library Cache	      kglhdgh3	   161				  3	       1
Library Cache	      kglget2	2				  2	       0
v_selects_cnt PLS_INTEGER := 0;
Library Cache	      kglhdgn2 106				  1	       0
Library Cache	      kglpndl1	95				  1	       0
			  ------------------------------------------------------



Parent Latch Statistics 	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
v_random_access_queries_cnt PLS_INTEGER := 0;
			  ------------------------------------------------------

Child Latch Statistics		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

v_scan_queries_cnt PLS_INTEGER := 0;
		  No data exists for this section of the report.
			  ------------------------------------------------------



Segments by Logical Reads	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Total Logical Reads:      17,727,484
-> Captured Segments account for   16.0% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available
v_do_scan_query BOOLEAN :=FALSE;

		     Tablespace
Owner			Name
-------------------- ----------
v_scan_query_quota  BOOLEAN := FALSE;
		     Subobject	Obj.				 Logical
Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER165 	     IOPS
CF1				TABLE	   78848      78845	  79,216     .45
v_scan_workload_only BOOLEAN := FALSE;
USER52		     IOPS
CF1				TABLE	   78287      78289	  76,048     .43
USER250 	     IOPS
CF1				TABLE	   79275      79279	  75,552     .43
v_random_workload_only BOOLEAN := FALSE;
USER170 	     IOPS
CF1				TABLE	   78854      78881	  75,328     .42
USER249 	     IOPS
CF1				TABLE	   79267      79270	  74,640     .42

			  ------------------------------------------------------

Segments by Physical Reads	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Total Physical Reads:      14,932,774

-> Captured Segments account for   16.5% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
v_random_block PLS_INTEGER := 1;
Owner			Name
-------------------- ----------
		     Subobject	Obj.				Physical
Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
v_tmp PLS_INTEGER;
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER165 	     IOPS
CF1				TABLE	   78848      78845	  67,579     .45
v_now PLS_INTEGER;
USER444 	     IOPS
CF1				TABLE	   80246      80248	  67,539     .45
USER471 	     IOPS
CF1				TABLE	   80377      80379	  66,652     .45
v_brick_wall PLS_INTEGER;
USER462 	     IOPS
CF1				TABLE	   80324      80338	  65,937     .44
USER52		     IOPS
CF1				TABLE	   78287      78289	  65,449     .44

			  ------------------------------------------------------

Segments by Physical Read Requests     DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Total Physical Read Requests:      14,932,644
v_begin_time PLS_INTEGER;
-> Captured Segments account for   16.5% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
v_end_time PLS_INTEGER;
Owner			Name
-------------------- ----------
		     Subobject	Obj.			       Phys Read
Object Name	       Name	Type	    Obj#   Dataobj#	Requests  %Total
v_total_time PLS_INTEGER;
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER165 	     IOPS
CF1				TABLE	   78848      78845	  67,579     .45
USER444 	     IOPS
v_begin_cpu_tm PLS_INTEGER;
CF1				TABLE	   80246      80248	  67,539     .45
USER471 	     IOPS
CF1				TABLE	   80377      80379	  66,652     .45
USER462 	     IOPS
v_end_cpu_tm PLS_INTEGER;
CF1				TABLE	   80324      80338	  65,937     .44
USER52		     IOPS
CF1				TABLE	   78287      78289	  65,449     .44
			  ------------------------------------------------------
v_total_cpu_tm PLS_INTEGER;

Segments by UnOptimized Reads	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Total UnOptimized Read Requests:	 14,932,644
-> Captured Segments account for   16.5% of Total

-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
v_do_sleeps BOOLEAN := FALSE;
-------------------- ----------
		     Subobject	Obj.			     UnOptimized
Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
v_loop_control BOOLEAN := FALSE;
USER165 	     IOPS
CF1				TABLE	   78848      78845	  67,579     .45
USER444 	     IOPS
CF1				TABLE	   80246      80248	  67,539     .45
v_update_quota BOOLEAN := FALSE;
USER471 	     IOPS
CF1				TABLE	   80377      80379	  66,652     .45
USER462 	     IOPS
CF1				TABLE	   80324      80338	  65,937     .44
USER52		     IOPS
v_select_only_workload BOOLEAN := FALSE;
CF1				TABLE	   78287      78289	  65,449     .44
			  ------------------------------------------------------

Segments by Optimized Reads	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
v_update_only_workload BOOLEAN := FALSE;

		  No data exists for this section of the report.
			  ------------------------------------------------------

v_do_update BOOLEAN := FALSE;
Segments by Direct Physical Reads      DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
			  ------------------------------------------------------

v_do_hot_schema BOOLEAN := FALSE;
Segments by Physical Writes	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Total Physical Writes:	2,553,257
-> Captured Segments account for   16.1% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available
v_stop_immediate BOOLEAN := FALSE;

		     Tablespace
Owner			Name
-------------------- ----------
		     Subobject	Obj.				Physical
v_sharing_schema BOOLEAN := FALSE;
Object Name	       Name	Type	    Obj#   Dataobj#	  Writes  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER165 	     IOPS
v_seed VARCHAR2(128);
CF1				TABLE	   78848      78845	  11,583     .45
USER50		     IOPS
CF1				TABLE	   78277      78281	  11,454     .45
USER462 	     IOPS
v_home_schema_str VARCHAR2(80);
CF1				TABLE	   80324      80338	  11,279     .44
USER170 	     IOPS
CF1				TABLE	   78854      78881	  11,134     .44
USER174 	     IOPS
v_scratch VARCHAR2(200) ;
CF1				TABLE	   78897      78901	  11,059     .43
			  ------------------------------------------------------

Segments by Physical Write Requests    DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

-> Total Physical Write Requests:	2,383,820
-> Captured Segments account for   16.7% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

v_cpu_pct NUMBER(6, 3);
		     Tablespace
Owner			Name
-------------------- ----------
		     Subobject	Obj.			      Phys Write
v_my_serial NUMBER(16);
Object Name	       Name	Type	    Obj#   Dataobj#	Requests  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER165 	     IOPS

CF1				TABLE	   78848      78845	  11,217     .47
USER50		     IOPS
CF1				TABLE	   78277      78281	  11,140     .47
USER462 	     IOPS
CF1				TABLE	   80324      80338	  10,938     .46
BEGIN
USER170 	     IOPS
CF1				TABLE	   78854      78881	  10,797     .45
USER174 	     IOPS
CF1				TABLE	   78897      78901	  10,694     .45

			  ------------------------------------------------------

Segments by Direct Physical Writes     DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Total Direct Physical Writes:	   1,116
-> Captured Segments account for   71.3% of Total
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------
EXECUTE IMMEDIATE v_home_schema_str;
		     Subobject	Obj.				  Direct
Object Name	       Name	Type	    Obj#   Dataobj#	  Writes  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
SYS		     SYSAUX

WRH$_ACTIVE_SESSION_ 879926_119 TABLE	   84156      84156	     796   71.33
			  ------------------------------------------------------

Segments by Table Scans 	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136


		  No data exists for this section of the report.
			  ------------------------------------------------------

Segments by DB Blocks Changes	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
IF ( v_hot_schema_modulus != 0 ) THEN
-> % of Capture shows % of DB Block Changes for each top segment compared
-> with total DB Block Changes for all segments captured by the Snapshot
-> When ** MISSING ** occurs, some of the object attributes may not be available

	v_do_hot_schema := TRUE;
		     Tablespace
Owner			Name
-------------------- ----------
		     Subobject	Obj.				DB Block    % of
END IF;
Object Name	       Name	Type	    Obj#   Dataobj#	 Changes Capture
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER52		     IOPS
CF1				TABLE	   78287      78289	  11,584    2.76

USER165 	     IOPS
CF1				TABLE	   78848      78845	  11,328    2.70
USER250 	     IOPS
CF1				TABLE	   79275      79279	  11,248    2.68
IF ( v_sleep_modulus != 0 )	  THEN
USER170 	     IOPS
CF1				TABLE	   78854      78881	  11,216    2.67
USER28		     IOPS
CF1				TABLE	   78167      78171	  11,104    2.64
	v_do_sleeps := TRUE;
			  ------------------------------------------------------


Segments by Row Lock Waits	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
END IF;

		  No data exists for this section of the report.
			  ------------------------------------------------------


Segments by ITL Waits		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
			  ------------------------------------------------------

IF ( v_max_loop_iterations &gt; 0 )  THEN
Segments by Buffer Busy Waits	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
			  ------------------------------------------------------

	v_loop_control := TRUE ;
Segments by Global Cache Buffer Busy   DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> % of Capture shows % of GC Buffer Busy for each top segment compared
-> with GC Buffer Busy for all segments captured by the Snapshot
END IF;
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------

								      GC
		     Subobject	Obj.				  Buffer    % of
Object Name	       Name	Type	    Obj#   Dataobj#	    Busy Capture
-------------------- ---------- ----- ---------- ---------- ------------ -------
IF ( v_update_pct = 0 ) 	  THEN
SYS		     SYSAUX
WRH$_ACTIVE_SESSION_ 879926_119 INDEX	   84158      84160	       2  100.00
			  ------------------------------------------------------


	v_select_only_workload := TRUE;
Segments by CR Blocks Received	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Total CR Blocks Received:	      26,767
-> Captured Segments account for    8.2% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available
END IF;

		     Tablespace
Owner			Name
-------------------- ----------
								   CR

		     Subobject	Obj.				 Blocks
Object Name	       Name	Type	    Obj#   Dataobj#	Received  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER144 	     IOPS
IF ( v_update_pct = 100 )	  THEN
CF1				TABLE	   78744      78748	     452    1.69
USER7		     IOPS
CF1				TABLE	   78058      78054	     253     .95
SYS		     SYSAUX
WRH$_ACTIVE_SESSION_ 879926_119 TABLE	   84156      84156	     248     .93
	v_update_only_workload := TRUE;
USER165 	     IOPS
CF1				TABLE	   78848      78845	     224     .84
USER56		     IOPS
CF1				TABLE	   78306      78310	     146     .55
END IF;
			  ------------------------------------------------------

Segments by Current Blocks Received    DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Total Current Blocks Received:	   23,633

-> Captured Segments account for   11.7% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
IF ( v_scan_query_pct = 0 ) 	THEN
-------------------- ----------
								 Current
		     Subobject	Obj.				 Blocks
Object Name	       Name	Type	    Obj#   Dataobj#	Received  %Total
	v_random_workload_only := TRUE;
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER144 	     IOPS
CF1				TABLE	   78744      78748	     415    1.76
USER7		     IOPS
CF1				TABLE	   78058      78054	     266    1.13
END IF;
SYS		     SYSAUX
WRH$_ACTIVE_SESSION_ 879926_119 TABLE	   84156      84156	     253    1.07
USER52		     IOPS
CF1				TABLE	   78287      78289	     216     .91

USER165 	     IOPS
CF1				TABLE	   78848      78845	     215     .91
			  ------------------------------------------------------

IF ( v_scan_query_pct = 100 ) 	THEN
Segments by Global Cache Remote Grants DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Total Global Cache Remote Grants:	   7,567,240
-> Captured Segments account for   16.5% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available
	v_scan_workload_only := TRUE;

		     Tablespace
Owner			Name
-------------------- ----------
								      GC
END IF;
		     Subobject	Obj.				  Remote
Object Name	       Name	Type	    Obj#   Dataobj#	  Grants  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER444 	     IOPS

CF1				TABLE	   80246      80248	  34,157     .45
USER165 	     IOPS
CF1				TABLE	   78848      78845	  34,107     .45
USER471 	     IOPS
CF1				TABLE	   80377      80379	  33,811     .45
v_seconds_to_run := v_seconds_to_run * 100 ;
USER462 	     IOPS
CF1				TABLE	   80324      80338	  33,386     .44
USER52		     IOPS
CF1				TABLE	   78287      78289	  33,167     .44

			  ------------------------------------------------------


Dictionary Cache Stats		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> "Pct Misses"  should be very low (< 2% in most cases)
-> "Final Usage" is the number of cache entries being used

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
				   Get	  Pct	 Scan	Pct	 Mod	  Final
Cache			      Requests	 Miss	 Reqs  Miss	Reqs	  Usage
------------------------- ------------ ------ ------- ----- -------- ----------
dc_awr_control			   241	  0.8	    0	N/A	   5	      1

dc_global_oids			 5,183	  7.0	    0	N/A	   0	    981
dc_histogram_data		 8,417	  6.8	    0	N/A	   0	  1,793
dc_histogram_defs		10,353	 10.2	    0	N/A	 363	  9,500
dc_objects			 8,736	  3.0	    0	N/A	 100	  3,799
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
dc_props			   795	  0.0	    0	N/A	   0	      1
dc_rollback_segments		12,692	  0.0	    0	N/A	   0	    879
dc_segments			 1,067	 34.7	    0	N/A	  25	  1,597
dc_sequences			    25	 20.0	    0	N/A	  25	      4
dc_tablespaces			   547	  0.5	    0	N/A	   0	      7
-- DBMS_RANDOM.seed (val =&gt; v_seed);
dc_users			   191	 30.4	    0	N/A	   0	  1,027
outstanding_alerts		     2	100.0	    0	N/A	   0	      3
			  ------------------------------------------------------


Dictionary Cache Stats (RAC)	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
			  ------------------------------------------------------

v_begin_time := DBMS_UTILITY.GET_TIME();
Library Cache Activity		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> "Pct Misses"  should be very low

			 Get	Pct	       Pin    Pct	      Invali-
Namespace	    Requests   Miss	  Requests   Miss    Reloads  dations
v_now := v_begin_time ;
--------------- ------------ ------ -------------- ------ ---------- --------
BODY			 408	0.2	     1,043    0.8	   7	    0
CLUSTER 		  27	0.0		27    0.0	   0	    0
EDITION 		   2	0.0		 4    0.0	   0	    0
v_brick_wall := v_now + v_seconds_to_run ;
HINTSET OBJECT		  53	5.7		53    5.7	   0	    0
INDEX			  44	0.0		48   16.7	   8	    0
OBJECT ID		  25  100.0		 0    N/A	   0	    0
QUEUE			  66	0.0		66    0.0	   0	    0
SCHEMA			 155	0.0		 0    N/A	   0	    0
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
SQL AREA	       2,523   13.7	   287,155    0.2	  46	   29
SQL AREA BUILD		 236   69.9		 0    N/A	   0	    0
SQL AREA STATS		 236   98.7	       236   98.7	   0	    0

TABLE/PROCEDURE        1,338	5.5	     7,997    5.6	 161	    0
TRANSFORMATION		  66	1.5		66    1.5	   0	    0
TRIGGER 		   6   33.3		 6   33.3	   0	    0
			  ------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
Library Cache Activity (RAC)	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		    GES Lock	  GES Pin      GES Pin	 GES Inval GES Invali-
Namespace	    Requests	 Requests     Releases	  Requests     dations
--------------- ------------ ------------ ------------ ----------- -----------
-- The following WHILE loop is the master work loop control
BODY			 133	      994	   994		 0	     0
CLUSTER 		  27	       27	    27		 0	     0
EDITION 		   2		2	     2		 0	     0
HINTSET OBJECT		  53	       53	    53		 0	     0
INDEX			  48	       48	    48		 0	     0
----------------------------------------------------------------------------------------------------------------------
QUEUE			  66	       66	    66		 0	     0
SCHEMA			  25		0	     0		 0	     0
TABLE/PROCEDURE        2,677	    5,643	 5,643		 0	     0
TRANSFORMATION		  66	       66	    66		 0	     0
TRIGGER 		   0		6	     6		 0	     0
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
			  ------------------------------------------------------

		v_do_update := FALSE;

Memory Dynamic Components	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Min/Max sizes since instance startup
		v_update_quota := TRUE ;
-> Oper Types/Modes: INItializing,GROw,SHRink,STAtic/IMMediate,DEFerred
-> ordered by Component

		 Begin Snap	Current 	Min	    Max   Oper Last Op
	ELSE
Component	  Size (Mb)   Size (Mb)   Size (Mb)   Size (Mb)  Count Typ/Mod
--------------- ----------- ----------- ----------- ----------- ------ -------
ASM Buffer Cach 	.00	    .00 	.00	    .00      0 STA/
		IF ( v_update_only_workload = TRUE ) THEN
DEFAULT 16K buf 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 2K buff 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 32K buf 	.00	    .00 	.00	    .00      0 STA/
			-- handle case where user specified 100% updates
DEFAULT 4K buff 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 8K buff 	.00	    .00 	.00	    .00      0 STA/
DEFAULT buffer	  35,072.00   35,072.00   35,072.00   35,200.00      0 SHR/IMM
			v_do_update := TRUE;
Data Transfer C 	.00	    .00 	.00	    .00      0 STA/
In Memory RO Ex 	.00	    .00 	.00	    .00      0 STA/
In Memory RW Ex 	.00	    .00 	.00	    .00      0 STA/
			v_update_quota := FALSE;
In-Memory Area		.00	    .00 	.00	    .00      0 STA/
KEEP buffer cac 	.00	    .00 	.00	    .00      0 STA/
PGA Target	   3,328.00    3,328.00    3,328.00    3,328.00      0 STA/
		ELSE
RECYCLE buffer		.00	    .00 	.00	    .00      0 STA/
SGA Target	  40,960.00   40,960.00   40,960.00   40,960.00      0 STA/
Shared IO Pool	     128.00	 128.00      128.00	 128.00      0 STA/
java pool		.00	    .00 	.00	    .00      0 STA/
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
large pool	     384.00	 384.00      384.00	 384.00      0 STA/
memoptimize buf 	.00	    .00 	.00	    .00      0 STA/
shared pool	   5,248.00    5,248.00    1,536.00    5,248.00      0 GRO/IMM
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
streams pool		.00	    .00 	.00	    .00      0 STA/
unified pga poo 	.00	    .00 	.00	    .00      0 STA/
			  ------------------------------------------------------

			IF ( v_update_quota = FALSE ) THEN
Memory Resize Operations Summary       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
				-- Handle case where user has set UPDATE_PCT to a valid value
			  ------------------------------------------------------

				--
Memory Resize Ops		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
			  ------------------------------------------------------
				-- We are doing updates during this run and quota has not been met yet

Process Memory Summary		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> B: Begin Snap   E: End Snap
				-- We still vacillate until update quota has been met
-> All rows below contain absolute values (i.e. not diffed over the interval)
-> Max Alloc is Maximum PGA Allocation size at snapshot time
-> Hist Max Alloc is the Historical Max Allocation for still-connected processes

-> ordered by Begin/End snapshot, Alloc (MB) desc
-> Top 10 containers by Alloc (MB) at end snapshot time are displayed

							     Hist
				IF ( MOD(v_random_block,  2) = 0 ) THEN
				     Avg  Std Dev     Max     Max
		Alloc	   Used    Alloc    Alloc   Alloc   Alloc    Num    Num
   Category	 (MB)	   (MB)     (MB)     (MB)    (MB)    (MB)   Proc  Alloc
					v_do_update := TRUE;
 - -------- --------- --------- -------- -------- ------- ------- ------ ------
B Freeable     530.7	    .0	    1.9      2.4      20     N/A    278    278
  Other      2,357.8	   N/A	    5.3      4.4      46      46    444    444
				ELSE
  PL/SQL       124.3	 117.6	     .3       .3       2       3    442    378
  SQL		60.2	  45.8	     .2       .3       1      19    383    295
					v_do_update := FALSE;
  Total      3,073.0	 163.4	    7.7      7.4      70      68  1,547  1,395
E Freeable     169.4	    .0	    2.7      6.6      43     N/A     62     62
  Other        992.6	   N/A	    5.1      6.7      48      48    193    193
				END IF;
  PL/SQL	 6.7	   1.9	     .0       .2       2       3    191    127
  SQL		 7.4	   5.8	     .1       .2       1      19    133     60
  Total      1,176.1	   7.7	    8.0     13.6      94      70    579    442
			ELSE
			  ------------------------------------------------------

SGA Memory Summary		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

				-- UPDATE quota has been filled,  force drain some SELECTs
						      End Size (Bytes)
SGA regions			Begin Size (Bytes)	(if different)
------------------------------ ------------------- -------------------
				v_do_update := FALSE;
Database Buffers		    36,909,875,200
Fixed Size				30,210,816
Redo Buffers			       104,005,632
Variable Size			   199,179,108,352
			END IF;
			       -------------------
sum				   236,223,200,000
			  ------------------------------------------------------
		END IF;

SGA breakdown difference by Pool and NameDB/Inst: P60SDB/p60sdb1  Snaps: 135-1
-> ordered by Pool, Name
	END IF;
-> N/A value for Begin MB or End MB indicates the size of that Pool/Name was
   insignificant, or zero in that snapshot

Pool   Name				    Begin MB	     End MB  % Diff

------ ------------------------------ -------------- -------------- -------
large  PX msg pool			       204.0	      204.0    0.00
large  free memory			       179.6	      179.6    0.00
----------------------------------------------------------------------------------------------------------------------
shared ASH buffers				64.0	       64.0    0.00
shared KCRAHT Free Blocks			 N/A	       60.0	N/A
shared KGLH0				       157.2	       94.6  -39.83
shared KJSC rnb slots			       124.4	       61.6  -50.48
-- The type of SQL is now determined...execute it in the following section
shared SQLA				       335.5	      228.0  -32.03
shared db_block_hash_buckets		       256.0	      256.0    0.00
shared free memory			       974.2	    1,279.6   31.35
shared gc name table			       192.0	      192.0    0.00
----------------------------------------------------------------------------------------------------------------------
shared gcs resources			     1,314.7	    1,314.7    0.00
shared gcs resv res hash bucket 	       288.0	      288.0    0.00
shared gcs shadows			       717.1	      717.1    0.00

shared row cache				  .0		 .0    0.00
       buffer_cache			    35,072.0	   35,072.0    0.00
	IF ( v_do_update != TRUE ) THEN
       fixed_sga				28.8	       28.8    0.00
       log_buffer				99.2	       99.2    0.00
       shared_io_pool			       128.0	      128.0    0.00
		--
			  ------------------------------------------------------


Replication System Resource Usage      DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
		-- Do a SELECT statement

		  No data exists for this section of the report.
			  ------------------------------------------------------

		-- Work out scan or random
Replication SGA Usage		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
			  ------------------------------------------------------
		IF  ( v_random_workload_only = TRUE ) THEN


GoldenGate Capture		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
		  No data exists for this section of the report.
			  ------------------------------------------------------

GoldenGate Capture Rate 	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
			v_do_scan_query := FALSE;

		  No data exists for this section of the report.
			  ------------------------------------------------------

			v_scan_query_quota := TRUE ;
GoldenGate Apply Reader 	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
			  ------------------------------------------------------
		ELSE

GoldenGate Apply Coordinator	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

			IF ( v_scan_workload_only = TRUE ) THEN
		  No data exists for this section of the report.
			  ------------------------------------------------------

GoldenGate Apply Server 	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

		  No data exists for this section of the report.
			  ------------------------------------------------------

				v_do_scan_query := TRUE;
GoldenGate Apply Coordinator Rate      DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
			  ------------------------------------------------------
				v_scan_query_quota := FALSE;

GoldenGate Apply Reader and Server RateDB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
			ELSE
			  ------------------------------------------------------


XStream Capture 		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
				IF ( v_scan_query_quota = FALSE ) THEN

		  No data exists for this section of the report.
			  ------------------------------------------------------

					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
XStream Capture Rate		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
			  ------------------------------------------------------
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN

XStream Apply Reader		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
			  ------------------------------------------------------

XStream Apply Coordinator	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

						v_do_scan_query := TRUE;
		  No data exists for this section of the report.
			  ------------------------------------------------------

XStream Apply Server		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
					ELSE

		  No data exists for this section of the report.
			  ------------------------------------------------------

						v_do_scan_query := FALSE;
XStream Apply Coordinator Rate	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
			  ------------------------------------------------------
					END IF;

XStream Apply Reader and Server Rate   DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
				ELSE
			  ------------------------------------------------------


Table Statistics by DML Operations     DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
					-- Scan quota has been filled,	force drain some random access SELECTS

		  No data exists for this section of the report.
			  ------------------------------------------------------
					v_do_scan_query := FALSE;

Table Statistics by Conflict ResolutionsDB/Inst: P60SDB/p60sdb1  Snaps: 135-13

		  No data exists for this section of the report.
				END IF;
			  ------------------------------------------------------

Replication Large Transaction StatisticsDB/Inst: P60SDB/p60sdb1  Snaps: 135-13

			END IF;
		  No data exists for this section of the report.
			  ------------------------------------------------------

		END IF;
Replication Long Running Transaction StatisticsDB/Inst: P60SDB/p60sdb1	Snaps:

		  No data exists for this section of the report.
			  ------------------------------------------------------



Advanced Queue CPU/IO Usage	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136


		  No data exists for this section of the report.
			  ------------------------------------------------------

Buffered Queues 		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
		IF ( v_do_scan_query != TRUE ) THEN

		  No data exists for this section of the report.
			  ------------------------------------------------------

			SELECT COUNT(c2) INTO v_rowcnt
Buffered Queue Subscribers	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
			  ------------------------------------------------------
			FROM cf1

Rule Set			       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
			  ------------------------------------------------------

Persistent Queues		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136


		  No data exists for this section of the report.
			  ------------------------------------------------------

Persistent Queues Rate		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;

		  No data exists for this section of the report.
			  ------------------------------------------------------

		ELSE
Persistent Queue Subscribers	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
			  ------------------------------------------------------
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;


Resource Limit Stats			    DB/Inst: P60SDB/p60sdb1  Snap: 136
-> Only rows with Current or Maximum Utilization > 80% of Limit are shown

-> For "UNLIMITED" resources, rows whose Current or Maximum Utilization
   exceeds 2*Initial Allocation are shown
-> Ordered by Resource Name

			v_scan_queries_cnt := v_scan_queries_cnt + 1;
				  Current      Maximum	   Initial
Resource Name			Utilization  Utilization Allocation   Limit
------------------------------ ------------ ------------ ---------- ----------

ges_big_msgs				 70	   7,950       3310  UNLIMITED
ges_cache_ress			      3,621	   5,320	  0  UNLIMITED
ges_reg_msgs				225	   7,764       3310  UNLIMITED
smartio_overhead_memory 		  0	 171,032	  0  UNLIMITED
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
smartio_sessions			  0	       1	  0  UNLIMITED
			  ------------------------------------------------------

Shared Servers Activity 	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
				v_scan_query_quota := TRUE;
-> Values represent averages for all samples

   Avg Total   Avg Active    Avg Total	 Avg Active    Avg Total   Avg Active
			END IF;
 Connections  Connections Shared Srvrs Shared Srvrs  Dispatchers  Dispatchers
------------ ------------ ------------ ------------ ------------ ------------
	   0		0	     1		  0	       1	    0
			  ------------------------------------------------------
		END IF;

Shared Servers Rates		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

  Common     Disp			 Common       Disp     Server

   Queue    Queue   Server    Server	  Queue      Queue	Total	  Server
 Per Sec  Per Sec Msgs/Sec    KB/Sec	  Total      Total	 Msgs  Total(KB)
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
-------- -------- -------- --------- ---------- ---------- ---------- ----------
       0	0	 0	 0.0	      0 	 0	    0	       0
			  ------------------------------------------------------

	ELSE
Shared Servers Utilization	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Statistics are combined for all servers
-> Incoming and Outgoing Net % are included in %Busy

		--
  Total Server			  Incoming  Outgoing
      Time (s)	  %Busy    %Idle     Net %     Net %
-------------- -------- -------- --------- ---------
	   654	    0.0    100.0       0.0	 0.0
		-- Do an UPDATE statement
			  ------------------------------------------------------

Shared Servers Common Queue	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		--
		  No data exists for this section of the report.
			  ------------------------------------------------------

Shared Servers Dispatchers	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

-> Ordered by %Busy, descending
-> Total Queued, Total Queue Wait and Avg Queue Wait are for dispatcher queue
-> Name suffixes:
     "(N)" - dispatcher started between begin and end snapshots
		v_my_serial := v_my_serial + v_loop_cnt ;
     "(R)" - dispatcher re-started between begin and end snapshots

	      Avg Total Disp			    Total Total Queue  Avg Queue

Name	    Conns   Time (s)	%Busy	 %Idle	   Queued    Wait (s)  Wait (ms)
------- --------- ---------- -------- -------- ---------- ----------- ----------
D000	      0.0	 654	  0.0	 100.0		0	    0
			  ------------------------------------------------------
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);


Modified Parameters		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> This section shows all the modified initialization parameters that
		--
were in effect during the entire snapshot interval
-> End Value is displayed only if the parameter value was modified within
the snapshot interval

		-- Increment count of UPDATES and set UPDATE quota flag if needed
								End value
Parameter Name		      Begin value			(if different)
----------------------------- --------------------------------- --------------
_ipddb_enable		      TRUE
		--
audit_file_dest 	      /u01/app/oracle/admin/p60sdb/adum
audit_trail		      DB
cluster_database	      TRUE
compatible		      19.0.0
		v_updates_cnt := v_updates_cnt + 1;
control_files		      +P60S/P60SDB/CONTROLFILE/current.
db_block_size		      8192
db_create_file_dest	      +P60S
db_domain		      example.com

db_name 		      p60sdb
db_recovery_file_dest	      +FRA
db_recovery_file_dest_size    137438953472
diagnostic_dest 	      /u01/app/oracle
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
dispatchers		      (PROTOCOL=TCP) (SERVICE=p60sdbXDB
instance_number 	      1
listener_networks
local_listener		       (ADDRESS=(PROTOCOL=TCP)(HOST=192
			v_update_quota := TRUE;
nls_language		      AMERICAN
nls_territory		      AMERICA
open_cursors		      300
pga_aggregate_target	      3371171840
		END IF;
processes		      640
remote_listener 	       mcracpoc-scan.example.com:1521
remote_login_passwordfile     EXCLUSIVE
sga_max_size		      236223201280
	END IF ;
sga_target		      42949672960
thread			      1
undo_tablespace 	      UNDOTBS1
			  ------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------

Modified Multi-Valued Parameters       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> This section only displays parameters that have more than one value
->'(NULL)' indicates a missing parameter value
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
-> A blank in the 'End Snapshot' indicates the same value as the 'Begin Snapshot

								End value
Parameter Name		      Begin value			(if different)
----------------------------- --------------------------------- --------------
----------------------------------------------------------------------------------------------------------------------
control_files		      +FRA/P60SDB/CONTROLFILE/current.2
			      +P60S/P60SDB/CONTROLFILE/current.
			  ------------------------------------------------------


Top SQL with Top Events 	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Top SQL statements by DB Time along with the top events by DB Time
   for those SQLs.
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
-> % Activity is the percentage of DB Time due to the SQL.
-> % Event is the percentage of DB Time due to the event that the SQL is
   waiting on.
-> % Row Source is the percentage of DB Time due to the row source for the
		--
   SQL waiting on the event.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
----------------------- -------------------- -------------------- --------------
									   % Row
Event			       % Event Top Row Source			  Source
------------------------------ ------- --------------------------------- -------
	  35dumc2tpr9dv 	   203653710		     7850	   57.28
		-- so reset flags and counters before continuing
gc current grant busy		 51.18 UPDATE				   51.18
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


		--
db file sequential read 	  4.74 UPDATE				    4.70

	  bhdvtsvjhgvrh 	  1497866750		     5481	   39.76
gc cr multi block request	 26.12 TABLE ACCESS - BY INDEX ROWID BAT   26.12
		v_update_quota := FALSE;
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


gc cr grant busy		 10.40 TABLE ACCESS - BY INDEX ROWID BAT    9.47
		v_updates_cnt := 0;


db file parallel read		  1.83 TABLE ACCESS - BY INDEX ROWID BAT    1.83

			  ------------------------------------------------------
		v_selects_cnt := 0;

Top SQL with Top Row Sources	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Top SQL statements by DB Time along with the top row sources by DB Time
   for those SQLs.
	END IF;
-> % Activity is the percentage of DB Time due to the SQL.
-> % Row Source is the percentage of DB Time spent on the row source by
   that SQL.

-> % Event is the percentage of DB Time spent on the event by the
   SQL executing the row source.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
----------------------- -------------------- -------------------- --------------
					   % Row
Row Source				  Source Top Event		 % Event
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
---------------------------------------- ------- ----------------------- -------
	  35dumc2tpr9dv 	   203653710		     7850	   57.28
UPDATE					   56.73 gc current grant busy	   51.18
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
		-- so reset flags and counters
< :B1 )

	  bhdvtsvjhgvrh 	  1497866750		     5481	   39.76
TABLE ACCESS - BY INDEX ROWID BATCHED	   38.73 gc cr multi block reque   26.12
		v_scan_query_quota := FALSE;
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


INDEX - RANGE SCAN			    1.02 gc cr grant busy	    0.93

		v_scan_queries_cnt := 0;
			  ------------------------------------------------------

Top Sessions			       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
		v_random_access_queries_cnt := 0;
			  ------------------------------------------------------

Top Blocking Sessions		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

	END IF;
		  No data exists for this section of the report.
			  ------------------------------------------------------

Top PL/SQL Procedures		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

-> 'PL/SQL entry subprogram' represents the application's top-level
      entry-point (procedure, function, trigger, package initialization
      or RPC call) into PL/SQL.
	v_loop_cnt := v_loop_cnt + 1 ;
-> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed
      at the point of sampling . If the value is 'SQL', it represents
      the percentage of time spent executing SQL for the particular
      PL/SQL entry subprogram
	v_now := DBMS_UTILITY.GET_TIME();

PL/SQL Entry Subprogram 					  % Activity
----------------------------------------------------------------- ----------
PL/SQL Current Subprogram					   % Current

----------------------------------------------------------------- ----------
USER1.SLOBUPDATE						       57.74
   SQL								       57.74
			  ------------------------------------------------------

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
Top Events			       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Top Events by DB Time
-> % Activity is the percentage of DB Time due to the event

Event				    Event Class     Session Type
		-- If this is a fixed-iteration count test cycle and we've hit the number of
----------------------------------- --------------- ---------------
	   Avg Active
% Activity   Sessions
---------- ----------
		-- iterations then set exit flag
gc current grant busy		    Cluster	    FOREGROUND
     51.19     106.75
gc cr multi block request	    Cluster	    FOREGROUND
     26.12	54.46
gc cr grant busy		    Cluster	    FOREGROUND
		v_stop_immediate := TRUE ;
     10.56	22.03
db file sequential read 	    User I/O	    FOREGROUND
      5.72	11.92
db file parallel read		    User I/O	    FOREGROUND
	END IF;
      1.83	 3.81
			  ------------------------------------------------------

Top Event P1/P2/P3 Values	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
END LOOP;
-> Top Events by DB Time and the top P1/P2/P3 values for those events.
-> % Event is the percentage of DB Time due to the event
-> % Activity is the percentage of DB Time due to the event with the given
   P1,P2,P3 Values.


Event			       % Event		   P1, P2, P3 Values % Activity
------------------------------ ------- ----------------------------- ----------
Parameter 1		   Parameter 2		      Parameter 3
v_end_time := v_now ;
-------------------------- -------------------------- --------------------------
gc cr multi block request	 26.12		  "9","31186282","1"	   0.01
file#			   block#		      class#

v_now := DBMS_UTILITY.GET_TIME();
db file sequential read 	  5.72		  "9","13187649","1"	   0.01
file#			   block#		      blocks

db file parallel read		  1.83		       "1","61","61"	   1.58
files			   blocks		      requests
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

			  ------------------------------------------------------

Top DB Objects			       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136


		  No data exists for this section of the report.
			  ------------------------------------------------------

Activity Over Time		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
v_total_time := v_end_time - v_begin_time ;
-> Analysis period is divided into smaller time slots as indicated
   in the 'Slot Time (Duration)'.
-> Top 3 events are reported in each of those slots
-> 'Slot Count' shows the number of ASH samples in that slot
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
-> 'Event Count' shows the number of ASH samples waiting for
   that event in that slot
-> '% Event' is 'Event Count' over all ASH samples in the analysis period

			 Slot					Event
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
Slot Time (Duration)	Count Event				Count % Event
-------------------- -------- ------------------------------ -------- -------
08:34:03   (57 secs)	  765 gc current grant busy		  383	 2.78
			      gc cr multi block request 	  220	 1.60
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
			      gc cr grant busy			   71	 0.52
08:35:00   (5.0 min)	7,405 gc current grant busy		3,685	26.73
			      gc cr multi block request 	1,973	14.31

			      gc cr grant busy			  772	 5.60
08:40:00   (5.0 min)	5,615 gc current grant busy		2,988	21.68
			      gc cr multi block request 	1,407	10.21
			      gc cr grant busy			  613	 4.45
END;</pre_sqltext></td></tr>
			  ------------------------------------------------------



	  ADDM Report for Task 'ADDM:3889879926_1_136'
	  --------------------------------------------

<tr><td scope="row" class='awrnc'><a class="awr" name="9babjv8yq8ru3"></a>9babjv8yq8ru3</td><td class='awrnc'><pre_sqltext class="awr">BEGIN DBMS_OUTPUT.GET_LINES(:LINES,  :NUMLINES); END;</pre_sqltext></td></tr>
Analysis Period
---------------
AWR snapshot range from 135 to 136.
Time period starts at 14-FEB-20 08.34.04 AM
Time period ends at 14-FEB-20 08.45.04 AM

<tr><td scope="row" class='awrc'><a class="awr" name="9gc8rpw0b3fxs"></a>9gc8rpw0b3fxs</td><td class='awrc'><pre_sqltext class="awr">DECLARE
Analysis Target
---------------
Database 'P60SDB' with DB ID 3889879926.
Database version 19.0.0.0.0.
ADDM performed an analysis of instance p60sdb1, numbered 1 and hosted at
v_default_schema_number PLS_INTEGER := '443';
mcracpoc1.example.com.

Activity During the Analysis Period
-----------------------------------
Total database time was 140700 seconds.
v_update_pct PLS_INTEGER := '15';
The average number of active sessions was 213.18.

Summary of Findings
-------------------
   Description		      Active Sessions	   Recommendations
v_max_loop_iterations PLS_INTEGER := '0';
			      Percent of Activity
   -------------------------  -------------------  ---------------
1  Interconnect Latency       213.18 | 100	   1
2  Top SQL Statements	      212.01 | 99.45	   2
v_seconds_to_run PLS_INTEGER := '600';
3  Global Cache Messaging     191 | 89.6	   1
4  Buffer Busy - Hot Objects  135.52 | 63.57	   0
5  "User I/O" wait Class      20.34 | 9.54	   0
6  Undersized SGA	      3.04 | 1.43	   1

v_scale PLS_INTEGER := '131072';

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


v_work_unit PLS_INTEGER := '64' ;
	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 212.86 active sessions, 100% of total activity.
v_redo_stress  VARCHAR2(12) := 'LITE';
---------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time on this instance.
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
The instance was consuming 75068 kilo bits per second of interconnect
bandwidth.
3% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 96% for database lock management.
v_hotspot_offset_mb NUMBER := '16';
The average latency for 8K interconnect messages was 75358 microseconds.
The instance is using the private interconnect device "fg-priv:1" with IP
address 169.254.22.248 and source "??".

   Recommendation 1: Host Configuration
v_hotspot_modulus  PLS_INTEGER := '3';
   Estimated benefit is 213.18 active sessions, 100% of total activity.
   --------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database

      instances. Oracle's recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
v_sleep_modulus PLS_INTEGER := '0';
      adapter setting, firmware and driver release. Check that the OS's socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter "db_file_multiblock_read_count" may be decreased as a
      workaround.

v_sleep_min NUMBER := '.1';
   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
v_sleep_max NUMBER := '.5';
      Impact is 191 active sessions, 89.6% of total activity.
	 Wait class "Cluster" was consuming significant database time.
	 Impact is 191 active sessions, 89.6% of total activity.


v_scan_query_pct PLS_INTEGER := '0';
Finding 2: Top SQL Statements
Impact is 211.69 active sessions, 99.45% of total activity.
-----------------------------------------------------------
SQL statements consuming significant database time were found. These
v_obfuscate VARCHAR(5)	:= 'FALSE';
statements offer a good opportunity for performance improvement.



v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;
   Recommendation 1: SQL Tuning

   Estimated benefit is 124.44 active sessions, 58.37% of total activity.
   ----------------------------------------------------------------------
   Action
v_do_sleeps BOOLEAN := FALSE;
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
v_loop_control BOOLEAN := FALSE;
      "35dumc2tpr9dv".
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
v_update_quota BOOLEAN := FALSE;
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 ))
	 AND (CUSTID < :B1 )
   Rationale
v_select_only_workload BOOLEAN := FALSE;
      The SQL spent 99% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
v_update_only_workload BOOLEAN := FALSE;
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
v_do_update BOOLEAN := FALSE;

   Recommendation 2: SQL Tuning
   Estimated benefit is 86.84 active sessions, 40.73% of total activity.
v_do_hot_schema BOOLEAN := FALSE;
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      "bhdvtsvjhgvrh".
v_stop_immediate BOOLEAN := FALSE;
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND
v_sharing_schema BOOLEAN := FALSE;
	 (CUSTID < :B1 )
   Rationale
      The SQL spent 99% of its database time on CPU, I/O and Cluster waits.
v_seed VARCHAR2(128);
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
v_home_schema_str VARCHAR2(80);
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.


v_scratch VARCHAR2(200) ;
Finding 3: Global Cache Messaging
Impact is 190.72 active sessions, 89.6% of total activity.
----------------------------------------------------------

Inter-instance messaging was consuming significant database time on this
instance.

v_cpu_pct NUMBER(6, 3);
   Recommendation 1: Application Analysis
   Estimated benefit is 191 active sessions, 89.6% of total activity.
   ------------------------------------------------------------------
v_my_serial NUMBER(16);
   Action
      Look at the "Top SQL Statements" finding for SQL statements consuming
      significant time on Cluster waits. For example, the UPDATE statement

      with SQL_ID "35dumc2tpr9dv" is responsible for 59% of Cluster wait
      during the analysis period.

BEGIN
   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "Cluster" was consuming significant database time.

      Impact is 191 active sessions, 89.6% of total activity.


Finding 4: Buffer Busy - Hot Objects
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
Impact is 135.32 active sessions, 63.57% of total activity.
-----------------------------------------------------------
Read and write contention on database blocks was consuming significant
EXECUTE IMMEDIATE v_home_schema_str;
database time.

   No recommendations are available.


   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant

      database time.
      Impact is 135.52 active sessions, 63.57% of total activity.
	 Inter-instance messaging was consuming significant database time on
IF ( v_hot_schema_modulus != 0 ) THEN
	 this instance.
	 Impact is 191 active sessions, 89.6% of total activity.
	    Wait class "Cluster" was consuming significant database time.
	v_do_hot_schema := TRUE;
	    Impact is 191 active sessions, 89.6% of total activity.


Finding 5: "User I/O" wait Class
END IF;
Impact is 20.31 active sessions, 9.54% of total activity.
---------------------------------------------------------
Wait class "User I/O" was consuming significant database time.

Waits for I/O to temporary tablespaces were not consuming significant database
time.
The throughput of the I/O subsystem was not significantly lower than expected.
IF ( v_sleep_modulus != 0 )	  THEN

   No recommendations are available.


	v_do_sleeps := TRUE;
Finding 6: Undersized SGA
Impact is 3.04 active sessions, 1.43% of total activity.
--------------------------------------------------------
END IF;
The SGA was inadequately sized, causing additional I/O or hard parses.
The value of parameter "sga_target" was "40960 M" during the analysis period.


   Recommendation 1: Database Configuration
   Estimated benefit is .73 active sessions, .34% of total activity.
   -----------------------------------------------------------------
IF ( v_max_loop_iterations &gt; 0 )  THEN
   Action
      Increase the size of the SGA by setting the parameter "sga_target" to
      46080 M.

	v_loop_control := TRUE ;
   Symptoms That Led to the Finding:
   ---------------------------------
END IF;
      Wait class "User I/O" was consuming significant database time.
      Impact is 20.34 active sessions, 9.54% of total activity.




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
IF ( v_update_pct = 0 ) 	  THEN

	  Additional Information
	  ----------------------

	v_select_only_workload := TRUE;
Miscellaneous Information
-------------------------
Wait class "Application" was not consuming significant database time.
END IF;
Wait class "Commit" was not consuming significant database time.
Wait class "Concurrency" was not consuming significant database time.
Wait class "Configuration" was not consuming significant database time.

CPU was not a bottleneck for the instance.
Wait class "Network" was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
IF ( v_update_pct = 100 )	  THEN
time.
Hard parsing of SQL statements was not consuming significant database time.

RAC Statistics  DB/Inst: P60SDB/p60sdb1  Snaps: 135-136
	v_update_only_workload := TRUE;

				Begin	End
				----- -----
END IF;
	   Number of Instances:     2	  2
	       Number of LMS's:     3	  3
      Number of realtime LMS's:     3	  3  (0 priority changes)



Global Cache Load Profile
~~~~~~~~~~~~~~~~~~~~~~~~~		   Per Second	    Per Transaction
IF ( v_scan_query_pct = 0 ) 	THEN
				      ---------------	    ---------------
  Global Cache blocks received: 		76.27		       1.24
    Global Cache blocks served: 		77.43		       1.26
	v_random_workload_only := TRUE;
     GCS/GES messages received: 	    32,237.32		     525.87
	 GCS/GES messages sent: 	    34,421.00		     561.49
	    DBWR Fusion writes: 		 0.34		       0.01
END IF;
 Estd Interconnect traffic (KB) 	    14,248.80


Global Cache Efficiency Percentages (Target local+remote 100%)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Buffer access -  local cache %:   15.48
Buffer access - remote cache %:    0.28
IF ( v_scan_query_pct = 100 ) 	THEN
Buffer access - 	disk %:   84.24
Global Cache Locality	     %:   50.29


	v_scan_workload_only := TRUE;
Global Cache and Enqueue Services - Workload Characteristics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	  Avg global cache cr block receive time (us):	       63,811.8
END IF;
     Avg global cache current block receive time (us):	       26,178.6
			       Avg LMS process busy %:		   32.5

	    Avg global cache cr block build time (us):		   63.7

      Global cache log flushes for cr blocks served %:		    0.1
	    Avg global cache cr block flush time (us):	       42,307.7

v_seconds_to_run := v_seconds_to_run * 100 ;
	 Avg global cache current block pin time (us):
 Global cache log flushes for current blocks served %:		    0.1
       Avg global cache current block flush time (us):	       60,000.0


		     Avg global enqueue get time (us):		4,136.6

Global Cache and Enqueue Services - Messaging Statistics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		     Avg message sent queue time (us):		4,804.6
	     Avg message sent queue time on ksxp (us):	       57,603.6
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
	  Avg message received kernel queue time (us):		  125.5
		 Avg message received queue time (us):		   71.8
		    Avg GCS message process time (us):		   21.7

		    Avg GES message process time (us):		   25.3

			    % of direct sent messages:		  14.65
			  % of indirect sent messages:		  85.33
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
			% of flow controlled messages:		   0.02
	  -------------------------------------------------------------

Cluster Interconnect
-- DBMS_RANDOM.seed (val =&gt; v_seed);
-> if Public/Source at End snap is different a '*' is displayed
~~~~~~~~~~~~~~~~~~~~
				    Begin			    End

	     --------------------------------------------------   -------
Interface    IP Address      Pub Source 			  Pub Src
v_begin_time := DBMS_UTILITY.GET_TIME();
----------   --------------- --- ------------------------------   --- ---
fg-priv:1    169.254.22.248  N

Global Messaging Statistics	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
v_now := v_begin_time ;

Statistic				     Total   per Second    per Trans
--------------------------------- ---------------- ------------ ------------
v_brick_wall := v_now + v_seconds_to_run ;
Cluster reconfiguration count			 0	    0.0 	 0.0
Domain reconfiguration count			 0	    0.0 	 0.0
Global Enqueue S-optim Broadcasts	       164	    0.2 	 0.0
Global Enqueue S-optim S-lock get	    45,697	   69.2 	 1.1
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
Global Enqueue S-optim anti-locks		48	    0.1 	 0.0
KA local message waits				 0	    0.0 	 0.0
KA local messages received			 0	    0.0 	 0.0

KA messages received actual			 0	    0.0 	 0.0
KA messages received logical			 0	    0.0 	 0.0
KA requests failed				 0	    0.0 	 0.0
KA requests succeeded				 0	    0.0 	 0.0
----------------------------------------------------------------------------------------------------------------------
Pseudo reconfiguration count			 0	    0.0 	 0.0
Pseudo rm reconfig count			 0	    0.0 	 0.0
acks for commit broadcast(actual)	     2,205	    3.3 	 0.1
-- The following WHILE loop is the master work loop control
acks for commit broadcast(logical	    12,213	   18.5 	 0.3
broadcast msgs on commit(actual)	    13,572	   20.5 	 0.3
broadcast msgs on commit(logical)	    21,421	   32.4 	 0.5
broadcast msgs on commit(wasted)	     9,842	   14.9 	 0.2
----------------------------------------------------------------------------------------------------------------------
dynamically allocated gcs resourc		 0	    0.0 	 0.0
dynamically allocated gcs shadows		 0	    0.0 	 0.0
flow control messages received			24	    0.0 	 0.0
flow control messages sent			21	    0.0 	 0.0
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
gcs assume cvt					 0	    0.0 	 0.0
gcs assume no cvt			     8,955	   13.6 	 0.2
gcs ast to fg				    34,024	   51.5 	 0.8

gcs ast xid					 0	    0.0 	 0.0
gcs bidless ast to lms			     1,947	    2.9 	 0.0
gcs blocked converts			    22,409	   33.9 	 0.6
gcs blocked cr converts 		    30,204	   45.7 	 0.7
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
gcs compatible basts				14	    0.0 	 0.0
gcs compatible cr basts (global)	       110	    0.2 	 0.0
gcs compatible cr basts (local) 	     1,330	    2.0 	 0.0
gcs cr basts to PIs				 0	    0.0 	 0.0
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
gcs cr requests to slave			 5	    0.0 	 0.0
gcs cr serve without current lock		 0	    0.0 	 0.0
gcs dbwr flush pi msgs			 1,217,035	1,841.8 	30.0
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
gcs dbwr write request msgs		       225	    0.3 	 0.0
gcs error msgs					 0	    0.0 	 0.0
gcs flash read serve requests to		 0	    0.0 	 0.0
gcs force cr block only 			 1	    0.0 	 0.0
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
gcs force cr grant				 0	    0.0 	 0.0
gcs force cr no current 			 0	    0.0 	 0.0
gcs forward cr to pinged instance		 0	    0.0 	 0.0
gcs grant ast				    35,971	   54.4 	 0.9
			DBMS_LOCK.SLEEP(v_num_tmp);
gcs grant request in partial open		 0	    0.0 	 0.0
gcs immediate (compatible) conver	   177,675	  268.9 	 4.4
gcs immediate (null) converts		 2,051,826	3,105.1 	50.7
		END IF;
gcs immediate cr (compatible) con	    99,061	  149.9 	 2.4
gcs immediate cr (null) converts	11,565,960     17,503.4        285.5
	END IF;
gcs lms flush pi msgs				 0	    0.0 	 0.0
gcs lms write request msgs		       161	    0.2 	 0.0
gcs msgs process time(ms)		   462,270	  699.6 	11.4

gcs msgs received			21,268,705     32,187.1        525.0
gcs new served by master		       438	    0.7 	 0.0
gcs out-of-order msgs			    12,707	   19.2 	 0.3
gcs pings refused			     8,749	   13.2 	 0.2
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
gcs pkey conflicts retry			 0	    0.0 	 0.0
gcs queued converts				 1	    0.0 	 0.0
gcs read-mostly failure unmount d		 0	    0.0 	 0.0
gcs reader bypass N->Xw ping loca		 0	    0.0 	 0.0
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN

Global Messaging Statistics	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

Statistic				     Total   per Second    per Trans
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
--------------------------------- ---------------- ------------ ------------
gcs reader bypass N->Xw ping remo		 0	    0.0 	 0.0
gcs reader bypass grant X on assu		 0	    0.0 	 0.0
gcs reader bypass grant ast			 0	    0.0 	 0.0
			v_sharing_schema := TRUE ;
gcs reader bypass grant fg ast			 0	    0.0 	 0.0
gcs reader bypass grant immediate	       636	    1.0 	 0.0
gcs recovery claim msgs 			 0	    0.0 	 0.0
		ELSE
gcs refuse xid					 0	    0.0 	 0.0
gcs refuse xid to fg				 0	    0.0 	 0.0
gcs refuse xid to lms				 0	    0.0 	 0.0
gcs refuse xid to master			 0	    0.0 	 0.0
			IF ( v_sharing_schema = TRUE ) THEN
gcs regular cr					 0	    0.0 	 0.0
gcs resources for dynamic sga			 0	    0.0 	 0.0
gcs retry convert request			 0	    0.0 	 0.0
gcs shadows for dynamic sga			 0	    0.0 	 0.0
				EXECUTE IMMEDIATE v_home_schema_str;
gcs share recovery bast 			 0	    0.0 	 0.0
gcs side channel msgs actual		     3,806	    5.8 	 0.1
gcs side channel msgs logical		    65,895	   99.7 	 1.6
gcs stale cr					 0	    0.0 	 0.0
				v_sharing_schema := FALSE;
gcs undo cr					 4	    0.0 	 0.0
gcs write notification msgs			 0	    0.0 	 0.0
gcs writes refused				 1	    0.0 	 0.0
			END IF;
ges msgs process time(ms)		       545	    0.8 	 0.0
ges msgs received			    21,541	   32.6 	 0.5
ges remote lock allocation		      -150	   -0.2 	 0.0
global posts dropped				 0	    0.0 	 0.0
		END IF;
global posts queue time 			 0	    0.0 	 0.0
global posts queued				 0	    0.0 	 0.0
global posts requested				 0	    0.0 	 0.0
global posts sent				 0	    0.0 	 0.0
	END IF;
implicit batch messages received	   202,501	  306.5 	 5.0
implicit batch messages sent		   205,126	  310.4 	 5.1
lmd msg send time(ms)				 0	    0.0 	 0.0

lms(s) msg send time(ms)			 0	    0.0 	 0.0
messages flow controlled		     2,102	    3.2 	 0.1
messages queue sent actual		 1,344,786	2,035.1 	33.2
messages queue sent logical		 2,044,270	3,093.7 	50.5
	-- Choose the random block. The v_do_hotspot handler that follows can override.
messages received actual		 3,073,012	4,650.6 	75.9
messages received logical		21,290,246     32,219.7        525.6
messages sent directly			 1,497,260	2,265.9 	37.0
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
messages sent indirectly		 8,722,126     13,199.7        215.3
messages sent not implicit batche	    67,813	  102.6 	 1.7
messages sent pbatched			19,930,667     30,162.2        492.0
msgs causing lmd to send msgs			 0	    0.0 	 0.0

msgs causing lms(s) to send msgs		 0	    0.0 	 0.0
msgs received kernel queue time ( 2.6714958949E+12 4.042919E+09 6.594983E+07
msgs received queue time (ms)		 1,527,960	2,312.3 	37.7
msgs received queued			21,290,244     32,219.7        525.6
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
msgs sent queue time (ms)		11,841,379     17,920.2        292.3
msgs sent queue time on ksxp (ms)      201,759,316    305,333.2      4,980.7
msgs sent queued			 2,464,576	3,729.8 	60.8
msgs sent queued on ksxp		 3,502,547	5,300.6 	86.5
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
number of broadcasted resources 		 0	    0.0 	 0.0
number of directly freed master r		 0	    0.0 	 0.0
number of ges deadlock detected 		 0	    0.0 	 0.0
number of lock borrowed by LMD			 0	    0.0 	 0.0
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
number of received ODPS messages		 0	    0.0 	 0.0
number of received RBA messages 		 0	    0.0 	 0.0
number of resource borrowed by LM		 0	    0.0 	 0.0
number of sent ODPS messages			 0	    0.0 	 0.0
number of sent RBA messages			 0	    0.0 	 0.0
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );

Global Messaging Statistics	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

Statistic				     Total   per Second    per Trans
	END IF;
--------------------------------- ---------------- ------------ ------------
process batch messages received 	 1,597,069	2,416.9 	39.4
process batch messages sent		 1,888,012	2,857.2 	46.6

receiver cycle time			   800,088	1,210.8 	19.8
receiver loop count			 1,829,449	2,768.6 	45.2
			  ------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------
Global CR Server Statistics	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

Statistic				    Total
------------------------------ ------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
CR Block Requests			   33,371
CURRENT Block Requests			       81
Data Block Requests			   33,371
Undo Block Requests				0
TX Block Requests			       12
----------------------------------------------------------------------------------------------------------------------
Current Results 			   33,425
Private results 				0
Zero Results				       14
Disk Read Results				0

Fail Results					3
Fairness Down Converts			   33,228
Light Works				   18,343
Flushes 				       26
Builds					   33,349
	IF  ( v_select_only_workload = TRUE ) THEN
Errors						0
			  ------------------------------------------------------

Global Current Server Statistics       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
		-- handle case where user specified zero pct updates (a SELECT-only workload)
-> Pins    = CURRENT Block Pin Operations
-> Flushes = Redo Flush before CURRENT Block Served Operations

Statistic	  Total % <100us   % <1ms  % <10ms % <100ms    % <1s   % <10s
		v_do_update := FALSE;
---------- ------------ -------- -------- -------- -------- -------- --------
Pins		      0
Flushes 	     23 		     52.17    39.13	8.70
			  ------------------------------------------------------
		v_update_quota := TRUE ;

Global Cache Transfer Statistics       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
	ELSE
-> Busy        (Busy) - Block Transfer impacted by Remote Contention
-> Congested (Congst) - Block Transfer impacted by Remote System Load
-> ordered by CR + Current Blocks Received desc

		IF ( v_update_only_workload = TRUE ) THEN
			       CR			  Current
		 ----------------------------- -----------------------------
Inst Block	   Blocks      %      %      %	 Blocks      %	    %	   %
			-- handle case where user specified 100% updates
  No Class	 Received  Immed   Busy Congst Received  Immed	 Busy Congst
---- ----------- -------- ------ ------ ------ -------- ------ ------ ------
   2 data block    23,451   91.9     .4    7.7	 23,197    7.2	 75.8	17.0
			v_do_update := TRUE;
   2 undo header    2,998   89.0    2.7    8.3	     66     .0	 86.4	13.6
   2 Others	       85   77.6     .0   22.4	    249    9.2	 75.9	14.9
			  ------------------------------------------------------

			v_update_quota := FALSE;
Global Cache Transfer Times (us)       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Avg Time - average time of all blocks (Immed,Busy,Congst) in us
-> Immed, Busy, Congst -  Average times in us
		ELSE
-> ordered by CR + Current Blocks Received desc

		    CR Avg Time (us)	     Current Avg Time (us)
	      --------------------------- ---------------------------
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
Inst Block
  No Class	 All  Immed   Busy Congst    All  Immed   Busy Congst
---- -------- ------ ------ ------ ------ ------ ------ ------ ------
   2 data blo  69047  69813  74378  59699  26155  67195  22869	23395
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
   2 undo hea  18051  14700  92584  29778  61842    N/A  67390	26704
   2 others    15112  17003    N/A   8543  20706   7803  24684	 8405
   2 undo blo	 N/A	N/A    N/A    N/A    N/A    N/A    N/A	  N/A
			IF ( v_update_quota = FALSE ) THEN
			  ------------------------------------------------------

Global Cache Transfer (Immediate)      DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
				-- Handle case where user has set UPDATE_PCT to a valid value
-> % of Blocks Received requiring 2 or 3 hops
-> ordered by CR + Current Blocks Received desc

				   CR			    Current
				--
		      --------------------------- ---------------------------
 Src Block     Blocks  Immed Blks	%	%  Immed Blks	    %	    %
Inst Class	 Lost	 Received    2hop    3hop    Received	 2hop	 3hop
---- -------- ------- ----------- ------- ------- ----------- ------- -------
				-- We are doing updates during this run and quota has not been met yet
   2 data blo		   21,544   100.0     0.0	1,673	100.0	  0.0
   2 undo hea		    2,669   100.0     0.0	  N/A	  N/A	  N/A
   2 others		       66   100.0     0.0	   23	100.0	  0.0
   2 undo blo		      N/A     N/A     N/A	  N/A	  N/A	  N/A
				-- We still vacillate until update quota has been met
			  ------------------------------------------------------

Global Cache Times (Immediate)	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Blocks Lost, 2-hop and 3-hop Average times in (us)

-> ordered by CR + Current Blocks Received desc

		       CR Avg Time (us)   Current Avg Time (us)
		     -------------------- --------------------
				IF ( MOD(v_random_block,  2) = 0 ) THEN
 Src Block	Lost
Inst Class	Time  Immed   2hop   3hop  Immed   2hop   3hop
---- -------- ------ ------ ------ ------ ------ ------ ------
   2 data blo	      69813  69813    N/A  67195  67195    N/A
					v_do_update := TRUE;
   2 undo hea	      14700  14700    N/A    N/A    N/A    N/A
   2 others	      17003  17003    N/A   7803   7803    N/A
   2 undo blo		N/A    N/A    N/A    N/A    N/A    N/A
				ELSE
			  ------------------------------------------------------

Interconnect Ping Latency Statistics   DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Ping latency of the roundtrip of a message from this instance to -> target in
					v_do_update := FALSE;
-> The target instance is identified by an instance number.
-> Average and standard deviation of ping latency is given in microseconds
-> for message sizes of 500 bytes and 8K.
-> Note that latency of a message from the instance to itself is used as
				END IF;
-> control, since message latency can include wait for CPU

   Target 500B Pin Avg La      Stddev  8K Ping Avg La	   Stddev
			ELSE
 Instance    Count 500B m    500B msg	 Count 8K msg	   8K msg
--------- -------- ------ ----------- -------- ------ -----------
	1	59    690	  .47	    65	  676	      .45
	2	59   2033	 2.08	    65 4.E+05	 1,121.36
				-- UPDATE quota has been filled,  force drain some SELECTs
			  ------------------------------------------------------

Interconnect Throughput by Client      DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Throughput of interconnect usage by major consumers
				v_do_update := FALSE;
-> All throughput numbers are megabytes per second

			Send	 Receive
Used By 	  Mbytes/sec  Mbytes/sec
			END IF;
---------------- ----------- -----------
Global Cache		 .30	     .31
Parallel Query		 .01	     .01
DB Locks		8.80	    7.98
DB Streams		 N/A	     N/A
		END IF;
Other			 .01	     .01
			  ------------------------------------------------------

	END IF;
Interconnect Device Statistics	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Throughput and errors of interconnect devices (at OS level)
-> All throughput numbers are megabytes per second


Device Name	IP Address	 Public Source
--------------- ---------------- ------ -------------------------------
				  Send	   Send
       Send	Send	 Send	Buffer	Carrier
 Mbytes/sec   Errors  Dropped  Overrun	   Lost
----------------------------------------------------------------------------------------------------------------------
----------- -------- -------- -------- --------
			       Receive	Receive
    Receive  Receive  Receive	Buffer	  Frame
 Mbytes/sec   Errors  Dropped  Overrun	 Errors
-- The type of SQL is now determined...execute it in the following section
----------- -------- -------- -------- --------
fg-priv:1	169.254.22.248	 NO
	.00	   0	    0	     0	      0
	.00	   0	    0	     0	      0
			  ------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------

Dynamic Remastering Statistics	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Times are in seconds
-> Affinity objects - Affinity objects mastered at the begin/end snapshot

-> Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot

							per    Begin	  End
Name					Total	Remaster Op	Snap	 Snap
	IF ( v_do_update != TRUE ) THEN
-------------------------------- ------------ ------------- -------- --------
affinity objects					N/A	   1	    1
read-mostly objects					N/A	   0	    0
affinity objects (other inst)				N/A	   1	    1
		--
read-mostly objects (persistent)			N/A	   0	    0
			  ------------------------------------------------------

End of Report
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
Report written to awr.txt

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9pxprtmxz7nuc"></a>9pxprtmxz7nuc</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '474';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
SQL> SQL> SQL> v_work_unit PLS_INTEGER := '64' ;
SQL> SQL> SQL> v_redo_stress  VARCHAR2(12) := 'LITE';
SQL> v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN

			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';



			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE

				-- UPDATE quota has been filled,  force drain some SELECTs
Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
				v_do_update := FALSE;
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt.  Default value is 'html'.

			END IF;
'html'		HTML format (default)
'text'		Text format
'active-html'	Includes Performance Hub active report
		END IF;

	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;



Type Specified:  text
		IF ( v_do_scan_query != TRUE ) THEN

			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9tgj4g8y4rwy8"></a>9tgj4g8y4rwy8</td><td class='awrc'><pre_sqltext class="awr">select type#, blocks, extents, minexts, maxexts, extsize, extpct, user#, iniexts, NVL(lists, 65535), NVL(groups, 65535), cachehint, hwmincr,  NVL(spare1, 0), NVL(scanhint, 0), NVL(bitmapranges, 0) from seg$ where ts#=:1 and file#=:2 and block#=:3</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9wdas3v8sxd2f"></a>9wdas3v8sxd2f</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '380';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9yv5dwv8k0awg"></a>9yv5dwv8k0awg</td><td class='awrc'><pre_sqltext class="awr">WITH MONITOR_DATA AS (SELECT INST_ID,  KEY,  NVL2(PX_QCSID,  NULL,  STATUS) STATUS,  FIRST_REFRESH_TIME,  LAST_REFRESH_TIME,  REFRESH_COUNT,  PROCESS_NAME,  SID,	SQL_ID,  SQL_EXEC_START,  SQL_EXEC_ID,	DBOP_NAME,  DBOP_EXEC_ID,  SQL_PLAN_HASH_VALUE,  SQL_FULL_PLAN_HASH_VALUE,  SESSION_SERIAL#,  SQL_TEXT,  PX_SERVER#,  PX_SERVER_GROUP,	PX_SERVER_SET,	PX_QCINST_ID,  PX_QCSID,  CASE WHEN ELAPSED_TIME &lt; (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) THEN (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) ELSE ELAPSED_TIME END ELAPSED_TIME,  QUEUING_TIME,  CPU_TIME,  APPLICATION_WAIT_TIME,  CONCURRENCY_WAIT_TIME,  CLUSTER_WAIT_TIME,	USER_IO_WAIT_TIME,  CASE WHEN ELAPSED_TIME &lt; (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) THEN 0 ELSE ELAPSED_TIME - (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) END OTHER_WAIT_TIME,  PLSQL_EXEC_TIME,  JAVA_EXEC_TIME,  FETCHES,	BUFFER_GETS,  IO_INTERCONNECT_BYTES IO_INTER_BYTES,  PHYSICAL_READ_REQUESTS READ_REQS,	PHYSICAL_READ_BYTES READ_BYTES,  PHYSICAL_WRITE_REQUESTS WRITE_REQS,  PHYSICAL_WRITE_BYTES WRITE_BYTES,  NVL(PHYSICAL_READ_BYTES,  0) + NVL(PHYSICAL_WRITE_BYTES,  0) IO_BYTES,  NVL(PHYSICAL_READ_REQUESTS,  0) + NVL(PHYSICAL_WRITE_REQUESTS,  0) IO_REQS,  IO_CELL_UNCOMPRESSED_BYTES IO_UNC_BYTES,	IO_CELL_OFFLOAD_ELIGIBLE_BYTES IO_ELIG_BYTES,  IO_CELL_OFFLOAD_RETURNED_BYTES IO_RET_BYTES,  USER# USERID,  USERNAME,  MODULE,	ACTION,  SERVICE_NAME,	CLIENT_IDENTIFIER,  CLIENT_INFO,  PROGRAM,  PLSQL_OBJECT_ID PL_OID,  PLSQL_SUBPROGRAM_ID PL_PROGID,  PLSQL_ENTRY_OBJECT_ID PL_ENTRY_OID,  PLSQL_ENTRY_SUBPROGRAM_ID PL_ENTRY_PROGID,  PX_MAXDOP MAX_DOP,  PX_IS_CROSS_INSTANCE,  PX_MAXDOP_INSTANCES MAX_DOP_INSTANCES,  PX_SERVERS_REQUESTED SERVERS_REQUESTED,  PX_SERVERS_ALLOCATED SERVERS_ALLOCATED,  ERROR_NUMBER,  ERROR_FACILITY,  ERROR_MESSAGE,  NVL2(OTHER_XML,  'Y',  NULL) HAS_OTHER_XML,	NVL2(BINDS_XML,  'Y',  NULL) HAS_BINDS_XML,  NVL2(RM_CONSUMER_GROUP,  NVL2(RM_LAST_ACTION_TIME,  TO_CHAR(RM_LAST_ACTION_TIME,  :B12 ),	'00/00/0000 00:00:01') || XMLELEMENT( &quot;rminfo&quot;,  XMLATTRIBUTES( RM_LAST_ACTION AS &quot;rmlastact&quot;,  RM_LAST_ACTION_REASON AS &quot;rmlastreason&quot;,	TO_CHAR(RM_LAST_ACTION_TIME,  :B12 ) AS &quot;rmlasttime&quot;,  RM_CONSUMER_GROUP AS &quot;rmcg&quot;)).GETSTRINGVAL(),  '00/00/0000 00:00:00') RM_INFO,  CON_NAME,  CON_ID FROM GV$ALL_SQL_MONITOR MO1 WHERE MO1.INST_ID BETWEEN :B11 AND :B10 AND MO1.SQL_ID = NVL(:B9 ,  MO1.SQL_ID) AND MO1.SQL_EXEC_START = NVL(:B8 ,  MO1.SQL_EXEC_START) AND MO1.SQL_EXEC_ID = NVL(:B7 ,  MO1.SQL_EXEC_ID) OR (MO1.DBOP_NAME = NVL(:B6 ,  MO1.DBOP_NAME) AND MO1.DBOP_EXEC_ID = NVL(:B5 ,  MO1.DBOP_EXEC_ID)) AND ((:B4 = 1 AND MO1.PX_QCSID IS NULL) OR (MO1.PX_SERVER_GROUP = NVL(:B3 ,  MO1.PX_SERVER_GROUP) AND MO1.PX_SERVER_SET = NVL(:B2 ,  MO1.PX_SERVER_SET) AND MO1.PX_SERVER# = NVL(:B1 ,  MO1.PX_SERVER#)))),  MONITOR_AGG AS (SELECT MAX_PX_QCSID,  MAX_KEY,  MAX_INST_ID,  MAX_SESSION_ID,  MAX_SESSION_SERIAL,  MAX_PX_DOP,  MAX_PX_DOP_INSTANCES,  MAX_PX_IS_CROSS_INSTANCE,  SUM_SERVERS_REQUESTED,  SUM_SERVERS_ALLOCATED,  DIST_INST_COUNT,	DIST_PX_GROUP_COUNT,  DIST_PX_SET_COUNT,  MAX_PLAN_HASH_VALUE,	MAX_FULL_PLAN_HASH_VALUE,  MAX_USERID,	MAX_PROGRAM,  MAX_USERNAME,  MAX_MODULE,  MAX_ACTION,  MAX_SERVICE_NAME,  MAX_CLIENT_ID,  MAX_CLIENT_INFO,  MAX_ERROR_NUMBER,  MAX_ERROR_FACILITY,  MAX_ERROR_MESSAGE,	QC_HAS_OTHER_XML,  QC_HAS_BINDS_XML,  MAX_PL_OID,  MAX_PL_PROGID,  MAX_PL_ENTRY_OID,  MAX_PL_ENTRY_PROGID,  MAX_SQL_ID,  MAX_SQL_EXEC_START,  MAX_SQL_EXEC_ID,	MAX_LAST_REFRESH_TIME,	MAX_DBOP_NAME,	MAX_DBOP_EXEC_ID,  CASE WHEN MAX_PL_OID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,  NULL,  '',  '.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = MAX_PL_OID AND P.SUBPROGRAM_ID = MAX_PL_PROGID AND ROWNUM = 1),  'Unavailable') END MAX_PL_NAME,  CASE WHEN MAX_PL_ENTRY_OID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,	NULL,  '',  '.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = MAX_PL_ENTRY_OID AND P.SUBPROGRAM_ID = MAX_PL_ENTRY_PROGID AND ROWNUM = 1),  'Unavailable') END MAX_PL_ENTRY_NAME,  MAX_STATUS,	SUM_REFRESH_COUNT,  MIN_FIRST_REFRESH_TIME,  SQLMON_TEXT,  SUM_ELAPSED_TIME,  MAX_ELAPSED_TIME,  MAX_QUEUING_TIME,  SUM_CPU_TIME,  SUM_USER_IO_WAIT_TIME,  SUM_APPLICATION_WAIT_TIME,  SUM_CONCURRENCY_WAIT_TIME,  SUM_CLUSTER_WAIT_TIME,  SUM_PLSQL_EXEC_TIME,  SUM_JAVA_EXEC_TIME,  SUM_OTHER_WAIT_TIME,  SUM_FETCHES,  SUM_BUFFER_GETS,  SUM_READ_REQS,  SUM_READ_BYTES,  SUM_WRITE_REQS,  SUM_WRITE_BYTES,	SUM_IO_BYTES,  SUM_IO_INTER_BYTES,  SUM_IO_UNC_BYTES,  SUM_IO_ELIG_BYTES,  SUM_IO_RET_BYTES,  DECODE(:B14 ,  1,  'db_name',  SYS_CONTEXT('userenv',  'db_unique_name')) DB_UNIQUE_NAME,  DECODE(:B14 ,	1,  'platform_name',  SYS.DBMS_UTILITY.PORT_STRING) PLATFORM_NAME,  DECODE(:B14 ,  1,  'host_name',  SYS_CONTEXT('userenv',  'server_host')) HOST_NAME,  AGG_RM_INFO MAX_RM_INFO,  MAX_CON_NAME,  DECODE(MAX_CON_ID,  0,  NULL,  MAX_CON_ID) MAX_CON_ID FROM (SELECT MAX(PX_QCSID) MAX_PX_QCSID,  MAX(CASE WHEN PX_QCSID IS NULL THEN KEY ELSE NULL END) MAX_KEY,  MAX(CASE WHEN PX_QCSID IS NULL THEN INST_ID ELSE NULL END) MAX_INST_ID,  MAX(CASE WHEN PX_QCSID IS NULL THEN SID ELSE NULL END) MAX_SESSION_ID,  MAX(CASE WHEN PX_QCSID IS NULL THEN SESSION_SERIAL# ELSE NULL END) MAX_SESSION_SERIAL,  MAX(MAX_DOP) MAX_PX_DOP,  MAX(MAX_DOP_INSTANCES) MAX_PX_DOP_INSTANCES,  MAX(PX_IS_CROSS_INSTANCE) MAX_PX_IS_CROSS_INSTANCE,  SUM(SERVERS_REQUESTED) SUM_SERVERS_REQUESTED,	SUM(SERVERS_ALLOCATED) SUM_SERVERS_ALLOCATED,  COUNT(DISTINCT INST_ID) DIST_INST_COUNT,  COUNT(DISTINCT PX_SERVER_GROUP) DIST_PX_GROUP_COUNT,  COUNT(DISTINCT PX_SERVER_SET) DIST_PX_SET_COUNT,  MAX(SQL_PLAN_HASH_VALUE) MAX_PLAN_HASH_VALUE,	MAX(SQL_FULL_PLAN_HASH_VALUE) MAX_FULL_PLAN_HASH_VALUE,  MAX(USERID) MAX_USERID,  MAX(PROGRAM) MAX_PROGRAM,  MAX(USERNAME) MAX_USERNAME,  MAX(MODULE) MAX_MODULE,  MAX(ACTION) MAX_ACTION,  MAX(SERVICE_NAME) MAX_SERVICE_NAME,  MAX(CLIENT_IDENTIFIER) MAX_CLIENT_ID,	MAX(CLIENT_INFO) MAX_CLIENT_INFO,  MAX(ERROR_NUMBER) MAX_ERROR_NUMBER,	MAX(ERROR_FACILITY) MAX_ERROR_FACILITY,  MAX(ERROR_MESSAGE) MAX_ERROR_MESSAGE,	MAX(NVL2(PX_QCSID,  HAS_OTHER_XML,  NULL)) QC_HAS_OTHER_XML,  MAX(HAS_BINDS_XML) QC_HAS_BINDS_XML,  MAX(PL_OID) MAX_PL_OID,  MAX(PL_PROGID) MAX_PL_PROGID,  MAX(PL_ENTRY_OID) MAX_PL_ENTRY_OID,  MAX(PL_ENTRY_PROGID) MAX_PL_ENTRY_PROGID,  MAX(SQL_ID) MAX_SQL_ID,  MAX(SQL_EXEC_START) MAX_SQL_EXEC_START,  MAX(SQL_EXEC_ID) MAX_SQL_EXEC_ID,  MAX(LAST_REFRESH_TIME) MAX_LAST_REFRESH_TIME,	MAX(STATUS) MAX_STATUS,  SUM(REFRESH_COUNT) SUM_REFRESH_COUNT,	MIN(FIRST_REFRESH_TIME) MIN_FIRST_REFRESH_TIME,  MAX(DBOP_NAME) MAX_DBOP_NAME,	MAX(DBOP_EXEC_ID) MAX_DBOP_EXEC_ID,  CASE WHEN :B13 = 0 THEN NULL ELSE MAX(SQL_TEXT) END SQLMON_TEXT,  SUM(ELAPSED_TIME) SUM_ELAPSED_TIME,  MAX(ELAPSED_TIME) MAX_ELAPSED_TIME,  MAX(QUEUING_TIME) MAX_QUEUING_TIME,  SUM(CPU_TIME) SUM_CPU_TIME,  SUM(USER_IO_WAIT_TIME) SUM_USER_IO_WAIT_TIME,  SUM(APPLICATION_WAIT_TIME) SUM_APPLICATION_WAIT_TIME,  SUM(CONCURRENCY_WAIT_TIME) SUM_CONCURRENCY_WAIT_TIME,	SUM(CLUSTER_WAIT_TIME) SUM_CLUSTER_WAIT_TIME,  SUM(PLSQL_EXEC_TIME) SUM_PLSQL_EXEC_TIME,  SUM(JAVA_EXEC_TIME) SUM_JAVA_EXEC_TIME,  SUM(OTHER_WAIT_TIME) SUM_OTHER_WAIT_TIME,  SUM(FETCHES) SUM_FETCHES,  SUM(BUFFER_GETS) SUM_BUFFER_GETS,  SUM(READ_REQS) SUM_READ_REQS,  SUM(READ_BYTES) SUM_READ_BYTES,  SUM(WRITE_REQS) SUM_WRITE_REQS,  SUM(WRITE_BYTES) SUM_WRITE_BYTES,	NVL(SUM(READ_BYTES),  0) + NVL(SUM(WRITE_BYTES),  0) SUM_IO_BYTES,  SUM(IO_INTER_BYTES) SUM_IO_INTER_BYTES,  SUM(IO_UNC_BYTES) S



UM_IO_UNC_BYTES,  SUM(IO_ELIG_BYTES) SUM_IO_ELIG_BYTES,  SUM(IO_RET_BYTES) SUM_IO_RET_BYTES,  MAX(RM_INFO) AGG_RM_INFO,  MAX(CON_NAME) MAX_CON_NAME,  MAX(CON_ID) MAX_CON_ID FROM MONITOR_DATA) MD),  ASH_DATA AS (SELECT AD0.INST_ID,	AD0.SESSION_ID,  AD0.PLAN_LINE_ID,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  AD0.ACTIVITY_BUCKET_NUM,  AD0.PLAN_ACTIVITY_BUCKET_NUM,  AD0.SQL,  AD0.TOP_LEVEL_SQL_ID,  AD0.DBOP_NAME,  AD0.IS_MONITORED_SQL,  AD0.IS_PX_SLAVE,  AD0.BUCKET_ACTIVITY_START,  AD0.ACTIVITY_START,	AD0.BUCKET_ACTIVITY_END,  AD0.ACTIVITY_END,  AD0.ACTIVITY_COUNT,  AD0.ACTIVITY_TYPE,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.IMQ_COUNT,  AD0.WAIT_COUNT,  AD0.CPU_COUNT,  AD0.OTHER_SQL_COUNT,  AD0.PX_SERVER_SET,	AD0.PX_DFO_ACTIVITY_COUNT,  AD0.DFO_MOST_ACTIVE_IID,  AD0.DFO_MOST_ACTIVE_SID,	(CASE WHEN AD0.DFO_MOST_ACTIVE_IID = AD0.INST_ID AND AD0.DFO_MOST_ACTIVE_SID = AD0.SESSION_ID AND (((AD0.PX_DFO_ACTIVITY_COUNT / AD0.DFO_MOST_ACTIVE_COUNT) &gt;= AD0.PX_DOP * 1.05) OR ((AD0.PX_DFO_ACTIVITY_COUNT / AD0.DFO_MOST_ACTIVE_COUNT) &lt;= AD0.PX_DOP *0.95)) AND (AD0.DFO_DURATION * 100) &gt; :B32 THEN AD0.ACTIVITY_COUNT ELSE NULL END) DFO_MOST_ACTIVE_COUNT,	AD0.BUCKET_DISTINCT_SAMPLES,  AD0.SQL_BUCKET_DISTINCT_SAMPLES,	CASE WHEN AD0.PX_SERVER_GROUP IS NULL AND AD0.IS_PX_SLAVE = 1 THEN 1 ELSE AD0.PX_SERVER_GROUP END PX_SERVER_GROUP,  AD0.PX_STEP_ID,  AD0.PX_DFO_PAIR_TYPE,  AD0.PX_DFO_PAIR_ID,  AD0.PX_STEP_ARG,  AD0.PX_DOP,	CASE WHEN AD0.PX_DOP IS NOT NULL AND AD0.PX_DOP &lt;&gt; AD0.PX_MIN_DOP AND AD0.PX_MIN_DOP != 0 THEN PX_MIN_DOP ELSE NULL END PX_MIN_DOP FROM (SELECT /*+ use_hash(ash) leading(mo) */ ASH.INST_ID,  ASH.IS_PX_SLAVE,  ASH.SESSION_ID,	ASH.PLAN_LINE_ID,  ASH.PLSQL_OBJECT_ID,  ASH.PLSQL_SUBPROGRAM_ID,  ASH.ACTIVITY_BUCKET_NUM,  ASH.PLAN_ACTIVITY_BUCKET_NUM,  ASH.SQL,  ASH.TOP_LEVEL_SQL_ID,  ASH.DBOP_NAME,  ASH.IS_MONITORED_SQL,  ASH.BUCKET_ACTIVITY_START,	ASH.ACTIVITY_START,  ASH.BUCKET_ACTIVITY_END,  ASH.ACTIVITY_END,  ASH.ACTIVITY_COUNT,  ASH.ACTIVITY_TYPE,  ASH.OTHER_SQL_ACTIVITY_TYPE,  ASH.EVENT_NAME,  ASH.IMQ_COUNT,  ASH.WAIT_COUNT,  ASH.CPU_COUNT,  ASH.OTHER_SQL_COUNT,  MO.PX_SERVER_SET,  ASH.PX_DFO_ACTIVITY_COUNT,	TRUNC(ASH.MOST_ACTIVE_IN_DFO / 10000000000) DFO_MOST_ACTIVE_COUNT,  MOD(TRUNC(ASH.MOST_ACTIVE_IN_DFO / 1000000),  10000) DFO_MOST_ACTIVE_IID,  MOD(ASH.MOST_ACTIVE_IN_DFO,  1000000) DFO_MOST_ACTIVE_SID,  ASH.DFO_DURATION,  ASH.BUCKET_DISTINCT_SAMPLES,  ASH.SQL_BUCKET_DISTINCT_SAMPLES,  MO.PX_SERVER_GROUP,  ASH.PX_STEP_ID,  ASH.PX_DFO_PAIR_TYPE,  ASH.PX_DFO_PAIR_ID,	ASH.PX_STEP_ARG,  ASH.PX_DOP,  ASH.PX_MIN_DOP FROM (SELECT /*+ no_merge */ MD.INST_ID,	MD.SID,  MD.SESSION_SERIAL#,  MD.PX_SERVER_SET,  MD.PX_SERVER_GROUP FROM MONITOR_DATA MD WHERE MD.SID IS NOT NULL OR :B31 = 1) MO,  (SELECT /*+ no_merge */ GVTF.INST_ID,  GVTF.GLOBAL_SAMPLE_ID,  GVTF.IS_PX_SLAVE,  GVTF.SESSION_ID,	GVTF.PLAN_LINE_ID,  GVTF.PLSQL_OBJECT_ID,  GVTF.PLSQL_SUBPROGRAM_ID,  GVTF.ACTIVITY_BUCKET_NUM,  GVTF.PLAN_ACTIVITY_BUCKET_NUM,  GVTF.SQL,  GVTF.TOP_LEVEL_SQL_ID,  GVTF.DBOP_NAME,  GVTF.IS_MONITORED_SQL,  GVTF.BUCKET_ACTIVITY_START,  GVTF.ACTIVITY_START,	GVTF.BUCKET_ACTIVITY_END,  GVTF.ACTIVITY_END,  GVTF.ACTIVITY_COUNT,  GVTF.ACTIVITY_TYPE,  GVTF.OTHER_SQL_ACTIVITY_TYPE,  GVTF.EVENT_NAME,  GVTF.IMQ_COUNT,  GVTF.WAIT_COUNT,  GVTF.CPU_COUNT,  GVTF.OTHER_SQL_COUNT,  MAX(GVTF.PER_SERVER_DFO_COUNT * 10000000000 + GVTF.INST_ID * 1000000 + GVTF.SESSION_ID) OVER(PARTITION BY GVTF.PX_DFO_PAIR_TYPE,	GVTF.PX_DFO_PAIR_ID) MOST_ACTIVE_IN_DFO,  SUM(GVTF.ACTIVITY_COUNT) OVER(PARTITION BY GVTF.PX_DFO_PAIR_TYPE,  GVTF.PX_DFO_PAIR_ID) PX_DFO_ACTIVITY_COUNT,  GVTF.DFO_DURATION,  GVTF.PX_STEP_ID,	GVTF.PX_DFO_PAIR_TYPE,	GVTF.PX_DFO_PAIR_ID,  GVTF.PX_STEP_ARG,  GVTF.PX_DOP,  GVTF.PX_MIN_DOP,  COUNT(DISTINCT GVTF.GLOBAL_SAMPLE_ID) OVER(PARTITION BY GVTF.ACTIVITY_BUCKET_NUM) BUCKET_DISTINCT_SAMPLES,  COUNT(DISTINCT GVTF.GLOBAL_SAMPLE_ID) OVER(PARTITION BY GVTF.SQL,	GVTF.ACTIVITY_BUCKET_NUM) SQL_BUCKET_DISTINCT_SAMPLES FROM TABLE(SYS.GV$(CURSOR( (SELECT USERENV('INSTANCE') INST_ID,  ASH2.GLOBAL_SAMPLE_ID,  CASE WHEN :B30 = 1 AND :B27 &gt; 1 THEN BUCKET_NUM ELSE NULL END ACTIVITY_BUCKET_NUM,  CASE WHEN :B29 = 1 AND :B27 &gt; 1 THEN BUCKET_NUM ELSE NULL END PLAN_ACTIVITY_BUCKET_NUM,  ASH2.SQL,  ASH2.TOP_LEVEL_SQL_ID,  ASH2.DBOP_NAME,  ASH2.IS_MONITORED_SQL,  ASH2.PLAN_LINE_ID,  ASH2.PLSQL_OBJECT_ID,  ASH2.PLSQL_SUBPROGRAM_ID,  ASH2.ACTIVITY_TYPE,  ASH2.OTHER_SQL_ACTIVITY_TYPE,	ASH2.EVENT_NAME,  ASH2.IS_PX_SLAVE,  ASH2.SESSION_ID,  ASH2.PX_STEP_ID,  ASH2.PX_DFO_PAIR_TYPE,  ASH2.PX_DFO_PAIR_ID,  ASH2.PX_STEP_ARG,  CASE WHEN ASH2.PX_DFO_PAIR_ID IS NOT NULL THEN DECODE(ASH2.PX_DOP,  0,  :B28 ,  ASH2.PX_DOP) ELSE NULL END PX_DOP,  ASH2.PX_MIN_DOP,	:B20 + NUMTODSINTERVAL(:B26 * (ASH2.BUCKET_NUM-1),  'SECOND') BUCKET_ACTIVITY_START,  :B20 + NUMTODSINTERVAL( :B26 * ASH2.BUCKET_NUM - 1,  'SECOND') BUCKET_ACTIVITY_END,  ASH2.ACTIVITY_START,  ASH2.ACTIVITY_END,  ASH2.ACTIVITY_COUNT,  ASH2.IMQ_COUNT,  ASH2.WAIT_COUNT,  ASH2.CPU_COUNT,  ASH2.OTHER_SQL_COUNT,  SUM(ASH2.ACTIVITY_COUNT) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE,  DECODE(ASH2.PX_DFO_PAIR_ID,  NULL,  NULL,  ASH2.SESSION_ID)) PER_SERVER_DFO_COUNT,  CEIL((MAX(ASH2.MAX_SAMPLE_DATE) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE) - MIN(ASH2.MIN_SAMPLE_DATE) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE)) * 3600 * 24) DFO_DURATION FROM (SELECT ASH1.BUCKET_NUM,  ASH1.GLOBAL_SAMPLE_ID,  ASH1.PLAN_LINE_ID,  ASH1.PLSQL_OBJECT_ID,  ASH1.PLSQL_SUBPROGRAM_ID,  ASH1.ACTIVITY_TYPE,  ASH1.OTHER_SQL_ACTIVITY_TYPE,  ASH1.EVENT_NAME,  ASH1.SESSION_ID,  ASH1.PX_STEP_ID,  ASH1.PX_STEP_ARG,  MAX(ASH1.SQL) SQL,  MAX(ASH1.IS_MONITORED_SQL) IS_MONITORED_SQL,  MAX(ASH1.PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  MAX(ASH1.PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  MIN(SAMPLE_DATE) MIN_SAMPLE_DATE,  MAX(SAMPLE_DATE) MAX_SAMPLE_DATE,  MAX(ASH1.IS_PX_SLAVE) IS_PX_SLAVE,  MAX(ASH1.PX_DOP) PX_DOP,	MIN(ASH1.PX_DOP) PX_MIN_DOP,  MIN(ASH1.SAMPLE_DATE) ACTIVITY_START,  MAX(ASH1.SAMPLE_DATE) ACTIVITY_END,  COUNT(ASH1.SQL) ACTIVITY_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Cpu' AND ASH1.EVENT_NAME = 'in memory' THEN 1 ELSE NULL END) IMQ_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE != 'Other SQL Execution' AND ASH1.ACTIVITY_TYPE != 'Non SQL' AND ASH1.ACTIVITY_TYPE != 'Cpu' THEN 1 ELSE NULL END) WAIT_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Cpu' AND ASH1.EVENT_NAME IS NULL THEN 1 ELSE NULL END) CPU_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Other SQL Execution' AND ASH1.ACTIVITY_TYPE != 'Non SQL' THEN 1 ELSE NULL END) OTHER_SQL_COUNT,  MAX(ASH1.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  MAX(ASH1.DBOP_NAME) DBOP_NAME FROM ( SELECT (CASE WHEN :B27 &gt; 1 THEN (TRUNC(DELTA_TIME_SECONDS/ :B26 ) + 1) ELSE 1 END) BUCKET_NUM,  ASH00.SQL,  ASH00.SAMPLE_DATE,  NVL2(DUP.C2,  TRUNC(DELTA_TIME_SECONDS/ (:B25 )) + 1,  NULL) GLOBAL_SAMPLE_ID,  NVL2(DUP.C2,  NULL,	ASH00.IS_MONITORED_SQL) IS_MONITORED_SQL,  NVL2(DUP.C2,  NULL,	ASH00.IN_INMEMORY_QUERY) IN_INMEMORY_QUERY,  NVL2(DUP.C2,  NULL,  ASH00.WAIT_CLASS) WAIT_CLASS,  NVL2(DUP.C2,  NULL,  ASH00.ACTIVITY_TYPE) ACTIVITY_TYPE,  NVL2(DUP.C2,  NULL,	ASH00.OTHER_SQL_ACTIVITY_TYPE) OTHER_SQL_ACTIVITY_TYPE,  NVL2(DUP.C2,  NULL,  ASH00.EVENT_NAME) EVENT_NAME,  NVL2(DUP.C2,  NULL,  ASH00.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  NVL2(DUP.C2,  NULL,  ASH00.DBOP_NAME) DBOP_NAME,  NVL2(DUP.C2,  NULL,  ASH00.IS_PX_SLAVE) IS_PX_SLAVE,  NVL2(DUP.C2,  NULL,  ASH00.SESSION_ID) SESSION_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLSQL_OBJECT_ID) PLSQL_OBJECT_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLSQL_SUBPROGRAM_ID) PLSQL_SUBPROGRAM_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLAN_LINE_ID) PLAN_LINE_ID,  NVL2(DUP.C2,  NULL,  ASH00.PX_STEP_ID) PX_STEP_ID,  NVL2(DUP.C2,  NULL,  ASH00.PX_STEP_ARG) PX_STEP_ARG,  NVL2(DUP.C2,  NULL,  ASH00.PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  NVL2(DUP.C2,  NULL,	ASH00.PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  NVL2(DUP.C2,  NULL,	ASH00.PX_DOP) PX_DOP FROM (SELECT 1 C1,  NULL C2 FROM V$DUAL UNI
ON ALL SELECT 1 C1,  1 C2 FROM V$DUAL) DUP,  (SELECT /*+ no_merge */ 1 C1,  ASH000.SAMPLE_DATE,  ASH000.IS_MONITORED_SQL,  ((EXTRACT(SECOND FROM(DELTA_TIME)) + EXTRACT(MINUTE FROM(DELTA_TIME)) * 60 + EXTRACT(HOUR FROM(DELTA_TIME)) * 3600 + EXTRACT(DAY FROM(DELTA_TIME)) * 86400)) DELTA_TIME_SECONDS,  ASH000.IN_INMEMORY_QUERY,	ASH000.WAIT_CLASS,  DECODE(ASH000.IS_MONITORED_SQL,  1,  NVL(ASH000.WAIT_CLASS,  'Cpu'),  DECODE(SQL_ID,  NULL,  'Non SQL',  'Other SQL Execution')) ACTIVITY_TYPE,  NVL(ASH000.WAIT_CLASS,  'Cpu') OTHER_SQL_ACTIVITY_TYPE,  DECODE(:B24 ,  1,  CASE WHEN ASH000.IS_MONITORED_SQL = 1 THEN NVL(ASH000.EVENT,  DECODE(ASH000.IN_INMEMORY_QUERY,  'Y',  'in memory',  ASH000.EVENT)) WHEN ASH000.SQL_ID IS NOT NULL THEN 'sql_id: ' || ASH000.SQL_ID WHEN ASH000.CALL_NAME IS NOT NULL THEN 'call: ' || ASH000.CALL_NAME ELSE 'anonymous: '|| ASH000.EVENT END,	NULL) EVENT_NAME,  CASE WHEN ASH000.IS_MONITORED_SQL = 1 AND (NVL(ASH000.SQL_ID,  :B9 ) = :B9 OR NVL(ASH000.DBOP_NAME,	:B6 ) = :B6 ) THEN 'this' WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.SQL_ID IS NOT NULL AND ASH000.TOP_LEVEL_SQL_ID != ASH000.SQL_ID THEN ASH000.TOP_LEVEL_SQL_ID WHEN ASH000.SQL_ID IS NOT NULL THEN ASH000.SQL_ID ELSE NVL(CALL_NAME,  'anonymous') END SQL,  CASE WHEN ASH000.IS_PX_SLAVE = 0 AND (ASH000.SQL_ID IS NULL OR ASH000.TOP_LEVEL_SQL_ID != ASH000.SQL_ID) THEN ASH000.TOP_LEVEL_SQL_ID END TOP_LEVEL_SQL_ID,  ASH000.DBOP_NAME,  ASH000.IS_PX_SLAVE,  CASE WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.IS_MONITORED_SQL != 1 THEN 65536 ELSE ASH000.SESSION_ID END SESSION_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PLSQL_OBJECT_ID,  NULL) PLSQL_OBJECT_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PLSQL_SUBPROGRAM_ID,  NULL) PLSQL_SUBPROGRAM_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.SQL_PLAN_LINE_ID,  NULL) PLAN_LINE_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_STEP_ID,  NULL) PX_STEP_ID,  CASE WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.IS_MONITORED_SQL = 1 AND ASH000.PX_STEP_ID IN (1,  2,  3) THEN ASH000.PX_STEP_ARG ELSE NULL END PX_DFO_PAIR_ID,  CASE WHEN ASH000.IS_PX_SLAVE = 0 OR ASH000.IS_MONITORED_SQL != 1 THEN NULL WHEN ASH000.PX_STEP_ID = 1 THEN 1 WHEN ASH000.PX_STEP_ID IN (2,  3) THEN 0 ELSE NULL END PX_DFO_PAIR_TYPE,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_STEP_ARG,	NULL) PX_STEP_ARG,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_DOP,  NULL) PX_DOP FROM (SELECT ASH0.*,  CASE WHEN ASH0.IS_TARGET_SQL = 1 OR (ASH0.IS_PX_SLAVE = 1 AND ((NVL(ASH0.TOP_LEVEL_SQL_ID,	ASH0.SQL_ID) IS NOT NULL AND NVL(ASH0.TOP_LEVEL_SQL_ID,  ASH0.SQL_ID) = :B9 ) OR (SQL_ID IS NULL AND :B23 = 'Y'))) THEN 1 ELSE 0 END IS_MONITORED_SQL FROM (SELECT (CASE WHEN (ASH.SQL_ID = :B9 AND ASH.SQL_EXEC_ID = :B7 AND ASH.SQL_EXEC_START = :B8 ) THEN 1 ELSE 0 END) IS_TARGET_SQL,  ASH.SQL_ID,  ASH.SQL_PLAN_LINE_ID,	ASH.PLSQL_OBJECT_ID,  ASH.PLSQL_SUBPROGRAM_ID,	ASH.TOP_LEVEL_SQL_ID,  DECODE(ASH.SQL_ID,  NULL,  ASH.TOP_LEVEL_CALL_NAME,  NULL) CALL_NAME,  ASH.EVENT,  ASH.IN_INMEMORY_QUERY,  ASH.WAIT_CLASS,  ASH.SQL_EXEC_ID,  ASH.SQL_EXEC_START,  ASH.DBOP_NAME,  ASH.DBOP_EXEC_ID,  ASH.SESSION_ID,  ASH.SESSION_SERIAL#,  CASE WHEN QC_INSTANCE_ID IS NOT NULL AND (ASH.SESSION_ID != ASH.QC_SESSION_ID OR ASH.SESSION_SERIAL# != ASH.QC_SESSION_SERIAL# OR USERENV('instance') != ASH.QC_INSTANCE_ID) THEN 1 ELSE 0 END IS_PX_SLAVE,  SAMPLE_TIME - CAST(:B20 AS TIMESTAMP) DELTA_TIME,  CAST(FROM_TZ(ASH.SAMPLE_TIME,  DBTIMEZONE) AS DATE) SAMPLE_DATE,  TRUNC(MOD(PX_FLAGS/65536,  32)) PX_STEP_ID,  MOD(PX_FLAGS,  65536) PX_STEP_ARG,  TRUNC(PX_FLAGS/2097152) PX_DOP FROM V$ALL_ACTIVE_SESSION_HISTORY ASH WHERE ((ASH.SESSION_ID = :B19 AND ASH.SESSION_SERIAL# = :B18 AND USERENV('INSTANCE') = :B17 ) OR (ASH.QC_SESSION_ID IS NOT NULL AND ASH.QC_SESSION_ID = :B19 AND ASH.QC_SESSION_SERIAL# = :B18 AND ASH.QC_INSTANCE_ID = :B17 )) AND SAMPLE_TIME BETWEEN :B16 AND :B15 ) ASH0 WHERE (ASH0.SAMPLE_DATE BETWEEN :B20 + 1/24/3600 AND :B22 - 1/24/3600 OR (ASH0.SQL_ID = :B9 AND ASH0.SQL_EXEC_START = :B8 AND ASH0.SQL_EXEC_ID = :B7 ) OR (ASH0.DBOP_NAME = :B6 AND ASH0.DBOP_EXEC_ID = :B5 )) AND (:B21 IS NULL OR ASH0.SQL_PLAN_LINE_ID = :B21 ) AND (ASH0.IS_PX_SLAVE = 0 OR ASH0.SQL_ID IS NOT NULL)) ASH000 ) ASH00 WHERE ASH00.C1 = DUP.C1) ASH1 WHERE ASH1.BUCKET_NUM &gt; 0 AND ASH1.BUCKET_NUM &lt;= :B27 GROUP BY USERENV('INSTANCE'),  ASH1.GLOBAL_SAMPLE_ID,  ASH1.BUCKET_NUM,  ASH1.SESSION_ID,  ASH1.PLAN_LINE_ID,  ASH1.PLSQL_OBJECT_ID,  ASH1.PLSQL_SUBPROGRAM_ID,  ASH1.ACTIVITY_TYPE,  ASH1.EVENT_NAME,  ASH1.OTHER_SQL_ACTIVITY_TYPE,  ASH1.PX_STEP_ID,  ASH1.PX_STEP_ARG) ASH2)))) GVTF WHERE GVTF.INST_ID BETWEEN :B11 AND :B10 ) ASH WHERE ASH.GLOBAL_SAMPLE_ID IS NULL AND ASH.SESSION_ID = MO.SID(+) AND ASH.INST_ID = MO.INST_ID(+)) AD0),  RESPONSE_TIME_DATA AS (SELECT ADH.BUCKET_NUM,  ADH.SQL_ROWNUM,  ADH.SQL,	ADH.TOP_LEVEL_SQL_ID,  ADH.DBOP_NAME,  ADH.PX_ID,  DECODE( ADH.PX_STEP_ID,  NULL,  NULL,  0,  NULL,  1,  'PX Server(s) - Executing Parent DFO',  2,  'PX Server(s) - Executing Child DFO',  3,	'PX Server(s) - Sampling Child DFO',  4,  'PX Server(s) - Joining Group',  5,  'QC - Scheduling Child DFO',  6,  'QC - Scheduling Parent DFO',	7,  'QC - Initializing Objects',  8,  'QC - Flushing Objects',	9,  'QC - Allocating Slaves',  10,  'QC - Initializing Granules',  11,	'PX Server(s) - Parsing Cursor',  12,  'PX Server(s) - Executing Cursor',  13,	'PX Server(s) - Preparing Transaction',  14,  'PX Server(s) - Joining Transaction',  15,  'PX Server(s) - Load Commit',  16,  'PX Server(s) - Aborting Transaction',  17,  'QC - Executing Child DFO',	18,  'QC - Executing Parent DFO',  'PX Step - ' || PX_STEP_ID) PX_STEP_ID,  ADH.PX_STEP_ARG,  ADH.PX_DFO_PAIR_ID,  ADH.PX_DOP,	ADH.PX_MIN_DOP,  ADH.DFO_MOST_ACTIVE_IID,  ADH.DFO_MOST_ACTIVE_SID,  ADH.DFO_MOST_ACTIVE_COUNT,  ADH.ACTIVITY_START,  ADH.ACTIVITY_END,  ADH.ACTIVITY_TYPE,  ADH.OTHER_SQL_ACTIVITY_TYPE,  ADH.EVENT_NAME,  ADH.PLAN_LINE_ID,  ADH.PLSQL_OBJECT_ID,  ADH.PLSQL_SUBPROGRAM_ID,  CASE WHEN PLSQL_ROWNUM = 1 AND ADH.PLSQL_OBJECT_ID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,  NULL,  '',	'.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = ADH.PLSQL_OBJECT_ID AND P.SUBPROGRAM_ID = ADH.PLSQL_SUBPROGRAM_ID),	'Unavailable') ELSE NULL END PLSQL_NAME,  ADH.ACTIVITY_COUNT,  ADH.BUCKET_ACTIVE_SECONDS,  ADH.BUCKET_IDLE_SECONDS,  (CASE WHEN ADH.IS_MONITORED_SQL = 0 THEN ADH.ACTIVE_SECONDS WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_CPU_HEIGHT &gt;= :B34 THEN DECODE(ADH.ACTIVITY_TYPE,  'Cpu',  (ADH.DFO_PAIR_ACTIVITY_HEIGHT / ADH.DFO_PAIR_CPU_HEIGHT) * ADH.DFO_PAIR_TOTAL_SECONDS,  0) WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.PX_DOP &gt; :B34 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * DECODE(ADH.ACTIVITY_TYPE,  'Cpu',  ADH.DFO_PAIR_ACTIVITY_HEIGHT,  (ADH.DFO_PAIR_ACTIVITY_HEIGHT * (:B34 - ADH.DFO_PAIR_CPU_HEIGHT)) / (ADH.DFO_PAIR_TOTAL_HEIGHT_ADJ - ADH.DFO_PAIR_CPU_HEIGHT))) / :B34 WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL THEN (ADH.DFO_PAIR_TOTAL_SECONDS * ADH.DFO_PAIR_ACTIVITY_HEIGHT) / ADH.PX_DOP ELSE ADH.ACTIVE_SECONDS END) RESP_TIME,  (CASE WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_IDLE_HEIGHT &gt; 0 AND ADH.PX_DOP &gt; :B34 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * (ADH.DFO_PAIR_IDLE_HEIGHT * (:B34 - ADH.DFO_PAIR_CPU_HEIGHT)) / (ADH.DFO_PAIR_TOTAL_HEIGHT_ADJ - ADH.DFO_PAIR_CPU_HEIGHT)) / :B34 WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_IDLE_HEIGHT &gt; 0 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * ADH.DFO_PAIR_IDLE_HEIGHT) / ADH.PX_DOP ELSE 0 END) DFO_PAIR_IDLE_RESP_TIME,  ADH.DFO_PAIR_ACTIVITY_HEIGHT,  ADH.DFO_PAIR_CPU_HEIGHT,	ADH.DFO_PAIR_IDLE_HEIGHT,  ADH.DFO_PAIR_TOTAL_HEIGHT,  ADH.DFO_PAIR_CPU_ACTIVITY,  ADH.DFO_PAIR_TOTAL_SECONDS FROM (SELECT ADH_1.*,  (ROW_NUMBER() OVER(PARTITION BY ADH_1.PLSQL_OBJECT_ID,  ADH_1.PLSQL_SUBPROGRAM_ID ORDER BY ADH_1.BUCKET_NUM,  ADH_1.ACTIVITY_TYPE,  ADH_1.EVENT_NAME)) PLSQL_ROWNUM,  (ROW_NUMBER() OVER(PARTITION BY ADH_1.SQL ORDER BY ADH_1.BUCKET_NUM,  ADH_1.ACTIVITY_TYPE,  ADH_1.EVENT_NAME)) SQL_ROWNUM,  (
CASE WHEN ADH_1.PX_DFO_PAIR_ID IS NOT NULL AND (ADH_1.DFO_PAIR_TOTAL_HEIGHT &lt; ADH_1.PX_DOP) AND (ADH_1.DFO_PAIR_CPU_HEIGHT &lt; :B34 ) THEN ADH_1.PX_DOP - ADH_1.DFO_PAIR_TOTAL_HEIGHT ELSE 0 END) DFO_PAIR_IDLE_HEIGHT,  (CASE WHEN ADH_1.PX_DFO_PAIR_ID IS NOT NULL AND (ADH_1.DFO_PAIR_TOTAL_HEIGHT &lt; ADH_1.PX_DOP) AND (ADH_1.DFO_PAIR_CPU_HEIGHT &lt; :B34 ) THEN ADH_1.PX_DOP ELSE ADH_1.DFO_PAIR_TOTAL_HEIGHT END) DFO_PAIR_TOTAL_HEIGHT_ADJ FROM (SELECT ADH_0.*,  (CASE WHEN ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.DFO_PAIR_TOTAL_ACTIVITY * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_TOTAL_HEIGHT,	(CASE WHEN ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.DFO_PAIR_CPU_ACTIVITY * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_CPU_HEIGHT,  (CASE WHEN ADH_0.PX_DFO_PAIR_ID IS NOT NULL AND ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.ACTIVITY_COUNT * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_ACTIVITY_HEIGHT FROM (SELECT AD3.*,  (SUM(DECODE(AD3.PX_DFO_PAIR_ID,  NULL,  0,	AD3.ACTIVE_SECONDS)) OVER(PARTITION BY DECODE(AD3.PX_DFO_PAIR_ID,  NULL,  NULL,  AD3.BUCKET_NUM),  DECODE(AD3.PX_DFO_PAIR_ID,  NULL,  NULL,  AD3.PX_STEP_ARG))) DFO_PAIR_TOTAL_SECONDS FROM (SELECT AD2.*,  CASE WHEN AD2.IS_MONITORED_SQL = 0 THEN SQL_BUCKET_DISTINCT_SAMPLES * :B25 WHEN AD2.PX_ID IS NULL THEN AD2.ACTIVITY_COUNT * :B25 WHEN AD2.BUCKET_PARALLEL_MON_ACTIVITY &gt; 0 THEN (AD2.ACTIVITY_COUNT * AD2.BUCKET_PARALLEL_MON_SECONDS) / AD2.BUCKET_PARALLEL_MON_ACTIVITY ELSE 0 END ACTIVE_SECONDS,  CASE WHEN AD2.BUCKET_INTERVAL &gt; BUCKET_ACTIVE_SECONDS THEN AD2.BUCKET_INTERVAL - BUCKET_ACTIVE_SECONDS ELSE 0 END BUCKET_IDLE_SECONDS FROM (SELECT AD1.*,  (AD1.BUCKET_SERIAL_MON_ACTIVITY * :B25 ) BUCKET_SERIAL_MON_SECONDS,	(AD1.BUCKET_TOTAL_MON_ACTIVITY - AD1.BUCKET_SERIAL_MON_ACTIVITY) BUCKET_PARALLEL_MON_ACTIVITY,	(AD1.BUCKET_ACTIVE_SECONDS - (AD1.BUCKET_OTHER_ACTIVITY + AD1.BUCKET_SERIAL_MON_ACTIVITY) * :B25 ) BUCKET_PARALLEL_MON_SECONDS,  (AD1.BUCKET_OTHER_ACTIVITY * :B25 ) BUCKET_OTHER_SECONDS,  DECODE(AD1.PX_DFO_PAIR_ID,	NULL,  NULL,  SUM(AD1.ACTIVITY_COUNT) OVER(PARTITION BY DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  AD1.BUCKET_NUM),  AD1.PX_DFO_PAIR_ID)) DFO_PAIR_TOTAL_ACTIVITY,  DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  SUM(DECODE(AD1.ACTIVITY_TYPE,  'Cpu',  AD1.ACTIVITY_COUNT,  0)) OVER(PARTITION BY DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  AD1.BUCKET_NUM),  AD1.PX_DFO_PAIR_ID)) DFO_PAIR_CPU_ACTIVITY FROM (SELECT AD01.*,  NVL((SUM(DECODE(AD01.IS_MONITORED_SQL,  1,	AD01.ACTIVITY_COUNT,  NULL)) OVER(PARTITION BY AD01.BUCKET_NUM)),  0) BUCKET_TOTAL_MON_ACTIVITY,  (NVL(SUM(CASE WHEN AD01.IS_MONITORED_SQL = 1 AND AD01.PX_ID IS NULL THEN AD01.ACTIVITY_COUNT ELSE NULL END) OVER(PARTITION BY AD01.BUCKET_NUM),  0)) BUCKET_SERIAL_MON_ACTIVITY,  (NVL((SUM(DECODE(AD01.IS_MONITORED_SQL,  0,  AD01.SQL_BUCKET_DISTINCT_SAMPLES,  NULL)) OVER(PARTITION BY AD01.BUCKET_NUM)),  0)) BUCKET_OTHER_ACTIVITY,  (NVL(AD01.BUCKET_DISTINCT_SAMPLES,  0) * :B25 ) BUCKET_ACTIVE_SECONDS,  DECODE(AD01.BUCKET_NUM,  :B27 ,  MOD(:B32 ,  :B26 ),  :B26 ) BUCKET_INTERVAL FROM (SELECT AD0.ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.PX_ID,	AD0.ACTIVITY_TYPE,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.PLAN_LINE_ID,  AD0.PX_STEP_ID,  AD0.PX_STEP_ARG,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,	MAX(AD0.IS_MONITORED_SQL) IS_MONITORED_SQL,  MAX(AD0.SQL) SQL,	MAX(AD0.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  MAX(AD0.DBOP_NAME) DBOP_NAME,  MAX(DECODE(AD0.DFO_MOST_ACTIVE_COUNT,  NULL,  NULL,  AD0.DFO_MOST_ACTIVE_IID)) DFO_MOST_ACTIVE_IID,  MAX(DECODE(AD0.DFO_MOST_ACTIVE_COUNT,	NULL,  NULL,  AD0.DFO_MOST_ACTIVE_SID)) DFO_MOST_ACTIVE_SID,  SUM(AD0.DFO_MOST_ACTIVE_COUNT) DFO_MOST_ACTIVE_COUNT,  MAX(PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  MAX(PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  MAX(AD0.PX_DOP) PX_DOP,  MIN(AD0.PX_MIN_DOP) PX_MIN_DOP,  MAX(AD0.BUCKET_DISTINCT_SAMPLES) BUCKET_DISTINCT_SAMPLES,	MAX(AD0.SQL_BUCKET_DISTINCT_SAMPLES) SQL_BUCKET_DISTINCT_SAMPLES FROM (SELECT AD00.*,  (CASE WHEN AD00.IS_MONITORED_SQL = 1 AND (AD00.SESSION_ID != :B19 OR AD00.INST_ID != :B17 ) THEN AD00.PX_SERVER_GROUP END) PX_ID FROM ASH_DATA AD00 WHERE :B33 = 1 ) AD0 GROUP BY AD0.ACTIVITY_BUCKET_NUM,  AD0.PX_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.PLAN_LINE_ID,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  AD0.PX_STEP_ID,  AD0.PX_STEP_ARG ) AD01) AD1) AD2) AD3) ADH_0) ADH_1) ADH) SELECT /*+ no_monitor no_xml_query_rewrite
		 opt_param('_gby_hash_aggregation_enabled',  'false') */ XMLELEMENT( &quot;sql_monitor_report&quot;,  XMLATTRIBUTES(:B59 AS &quot;version&quot;,  TO_CHAR(:B58 ,  :B12 ) AS &quot;sysdate&quot;),  XMLELEMENT( &quot;report_parameters&quot;,  NULL,  CASE WHEN :B57 IS NOT NULL THEN XMLFOREST( :B57 AS &quot;dbop_name&quot;,  :B56 AS &quot;dbop_exec_id&quot;) ELSE XMLFOREST( :B55 AS
&quot;sql_id&quot;,  :B54 AS &quot;sql_exec_id&quot;) END,  XMLFOREST( :B53 AS &quot;session_id&quot;,	:B52 AS &quot;session_serial&quot;,  TO_CHAR(:B51 ,  :B12 ) AS &quot;sql_exec_start&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR(:B50 ,  :B12 ) AS &quot;interval_start&quot;,  TO_CHAR(:B22 ,  :B12 ) AS &quot;interval_end&quot;,  DECODE(:B49 ,  'Y',	:B48 ,	NULL) AS &quot;auto_refresh&quot;,  :B47 AS &quot;base_path&quot;),  CASE WHEN :B23 = 'Y' AND :B46 IS NOT NULL AND NOT (:B4 = 1 AND :B3 IS NULL AND :B2 IS NULL AND :B1 IS NULL) THEN XMLELEMENT( &quot;parallel_filter&quot;,	NULL,  XMLFOREST( DECODE(:B4 ,	1,  'yes',  'no') AS &quot;qc&quot;,  :B3 AS &quot;server_group&quot;,	:B2 AS &quot;server_set&quot;,	:B1 AS &quot;server_number&quot;)) ELSE NULL END),  CASE WHEN :B14 = 1 THEN XMLELEMENT( &quot;derived_parameters_testing&quot;,  NULL,	XMLFOREST(:B11 AS &quot;instance_id_low&quot;,	:B10 AS &quot;instance_id_high&quot;,  :B26 AS &quot;bucket_interval_sec&quot;,  :B32 AS &quot;interval_second&quot;,  :B27 AS &quot;bucket_calc_count&quot;,  :B45 AS &quot;bucket_calc_max_count&quot;,  :B13 AS &quot;sel_sqltext&quot;)) ELSE NULL END,  (SELECT XMLCONCAT( CASE WHEN :B46 IS NULL AND :B67 IS NULL THEN XMLELEMENT( &quot;target&quot;,  XMLATTRIBUTES(:B17 AS &quot;instance_id&quot;,  :B19 AS &quot;session_id&quot;,  :B18 AS &quot;session_serial&quot;,  NVL2(:B6 ,	NULL,  :B9 ) AS &quot;sql_id&quot;,  NVL2(:B6 ,  NULL,	TO_CHAR(:B8 ,  :B12 )) AS &quot;sql_exec_start&quot;,  NVL2(:B6 ,  NULL,  :B7 ) AS &quot;sql_exec_id&quot;,  NVL2(:B6 ,  :B6 ,	NULL) AS &quot;dbop_name&quot;,  NVL2(:B6 ,  :B5 ,  NULL) AS &quot;dbop_exec_id&quot;,	NVL2(:B6 ,  TO_CHAR(:B8 ,  :B12 ),  NULL) AS &quot;dbop_exec_start&quot;,  NVL2(:B6 ,  NULL,  MAX_PLAN_HASH_VALUE) AS &quot;sql_plan_hash&quot;,  NVL2(:B6 ,  NULL,  MAX_FULL_PLAN_HASH_VALUE) AS &quot;sql_full_plan_hash&quot;,  MAGG.DB_UNIQUE_NAME AS &quot;db_unique_name&quot;,  MAGG.PLATFORM_NAME AS &quot;db_platform_name&quot;,  MAGG.HOST_NAME AS &quot;report_host_name&quot;),  NVL2(SUM_SERVERS_REQUESTED,  XMLELEMENT( &quot;servers_requested&quot;,  NULL,  SUM_SERVERS_REQUESTED),  NULL),  NVL2(SUM_SERVERS_ALLOCATED,  XMLELEMENT( &quot;servers_allocated&quot;,	NULL,  SUM_SERVERS_ALLOCATED),	NULL),	NVL2(MAX_USERID,  XMLELEMENT( &quot;user_id&quot;,  NULL,  MAX_USERID),  NULL),  NVL2(MAX_USERNAME,  XMLELEMENT( &quot;user&quot;,  NULL,  MAX_USERNAME),  NULL),  NVL2(MAX_CON_ID,  XMLELEMENT( &quot;con_id&quot;,  NULL,  MAX_CON_ID),  NULL),  NVL2(MAX_CON_NAME,  XMLELEMENT( &quot;con_name&quot;,  NULL,  MAX_CON_NAME),  NULL),  NVL2(MAX_PROGRAM,  XMLELEMENT( &quot;program&quot;,  NULL,  MAX_PROGRAM),  NULL),  NVL2(MAX_MODULE,  XMLELEMENT( &quot;module&quot;,  NULL,  MAX_MODULE),  NULL),  NVL2(MAX_ACTION,  XMLELEMENT( &quot;action&quot;,  NULL,  MAX_ACTION),  NULL),  NVL2(MAX_SERVICE_NAME,  XMLELEMENT( &quot;service&quot;,  NULL,  MAX_SERVICE_NAME),  NULL),  NVL2(MAX_CLIENT_ID,  XMLELEMENT( &quot;client_id&quot;,  NULL,  MAX_CLIENT_ID),  NULL),  NVL2(MAX_CLIENT_INFO,  XMLELEMENT( &quot;client_info&quot;,  NULL,  MAX_CLIENT_INFO),  NULL),  NVL2(MAX_PL_ENTRY_OID,  XMLELEMENT( &quot;plsql_entry_object_id&quot;,  NULL,	MAX_PL_ENTRY_OID),  NULL),  NVL2(MAX_PL_ENTRY_PROGID,  XMLELEMENT( &quot;plsql_entry_subprogram_id&quot;,  NULL,  MAX_PL_ENTRY_PROGID),  NULL),  NVL2(MAX_PL_ENTRY_NAME,  XMLELEMENT( &quot;plsql_entry_name&quot;,  NULL,  MAX_PL_ENTRY_NAME),  NULL),  NVL2(MAX_PL_OID,  XMLELEMENT( &quot;plsql_object_id&quot;,  NULL,  MAX_PL_OID),  NULL),  NVL2(MAX_PL_PROGID,  XMLELEMENT( &quot;plsql_subprogram_id&quot;,  NULL,  MAX_PL_PROGID),  NULL),  NVL2(MAX_PL_NAME,	XMLELEMENT( &quot;plsql_name&quot;,  NULL,  MAX_PL_NAME),  NULL),  CASE WHEN (:B13 = 0 OR :B6 IS NOT NULL) THEN NULL ELSE XMLELEMENT( &quot;sql_fulltext&quot;,  XMLATTRIBUTES( NVL2(:B65 ,  'Y',  :B66 ) AS &quot;is_full&quot;),  NVL2(:B65 ,  :B65 ,  SQLMON_TEXT)) END,  XMLELEMENT( &quot;status&quot;,  NULL,  MAX_STATUS),  XMLELEMENT( &quot;refresh_count&quot;,  NULL,  SUM_REFRESH_COUNT),  XMLELEMENT( &quot;first_refresh_time&quot;,  NULL,  TO_CHAR(MIN_FIRST_REFRESH_TIME,  :B12 )),  XMLELEMENT( &quot;last_refresh_time&quot;,  NULL,  TO_CHAR(:B58 ,  :B12 )),  XMLELEMENT( &quot;duration&quot;,  NULL,  GREATEST(:B64 ,  LEAST(MAX_ELAPSED_TIME/1000000,  1),  CEIL(MAX_QUEUING_TIME/1000000))),  DECODE(MAX_RM_INFO,  '00/00/0000 00:00:00',  NULL,  XMLTYPE(SUBSTR(MAX_RM_INFO,	20))),	CASE WHEN (:B62 = 'Y') THEN XMLELEMENT( &quot;adaptive_plan&quot;,  XMLATTRIBUTES(:B63 AS &quot;is_final&quot;),  :B62 ) ELSE NULL END ) END,  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  DECODE(NVL(SUM_ELAPSED_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  SUM_ELAPSED_TIME)),  DECODE(NVL(MAX_QUEUING_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX_QUEUING_TIME)),  DECODE(NVL(SUM_CPU_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  SUM_CPU_TIME)),  DECODE(NVL(SUM_USER_IO_WAIT_TIME,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  SUM_USER_IO_WAIT_TIME)),  DECODE(NVL(SUM_APPLICATION_WAIT_TIME,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  SUM_APPLICATION_WAIT_TIME)),  DECODE(NVL(SUM_CONCURRENCY_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  SUM_CONCURRENCY_WAIT_TIME)),  DECODE(NVL(SUM_CLUSTER_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  SUM_CLUSTER_WAIT_TIME)),	DECODE(NVL(SUM_PLSQL_EXEC_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  SUM_PLSQL_EXEC_TIME)),  DECODE(NVL(SUM_JAVA_EXEC_TIME,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  SUM_JAVA_EXEC_TIME)),  DECODE(NVL(SUM_OTHER_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  SUM_OTHER_WAIT_TIME)),  DECODE(NVL(SUM_FETCHES,  0),	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  SUM_FETCHES)),  DECODE(NVL(SUM_BUFFER_GETS,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  SUM_BUFFER_GETS)),  DECODE(NVL(SUM_READ_REQS,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),  SUM_READ_REQS)),  DECODE(NVL(SUM_WRITE_REQS,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  SUM_WRITE_REQS)),  DECODE(NVL(SUM_READ_REQS,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  SUM_READ_REQS)),  DECODE(NVL(SUM_READ_BYTES,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),	SUM_READ_BYTES)),  DECODE(NVL(SUM_WRITE_REQS,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),	SUM_WRITE_REQS)),  DECODE(NVL(SUM_WRITE_BYTES,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  SUM_WRITE_BYTES)),  DECODE(NVL(SUM_IO_UNC_BYTES,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  SUM_IO_UNC_BYTES)),  DECODE(NVL(SUM_IO_ELIG_BYTES,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  SUM_IO_ELIG_BYTES)),  DECODE(NVL(SUM_IO_RET_BYTES,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  SUM_IO_RET_BYTES)),  CASE WHEN SUM_IO_INTER_BYTES IS NULL OR SUM_IO_BYTES = 0 OR SUM_IO_INTER_BYTES = SUM_IO_BYTES OR NVL(SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE
 XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(SUM_IO_BYTES / DECODE(SUM_IO_INTER_BYTES,	0,  1,	SUM_IO_INTER_BYTES),  2)) END,	CASE WHEN NVL(SUM_IO_ELIG_BYTES,  0) = 0 OR SUM_IO_BYTES = 0 OR SUM_IO_UNC_BYTES = SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100* (GREATEST(SUM_IO_UNC_BYTES,  SUM_IO_ELIG_BYTES) - SUM_IO_RET_BYTES) / SUM_IO_ELIG_BYTES,  2))) END),	CASE WHEN :B33 = 1 THEN (SELECT CASE WHEN SUM(ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLAGG( XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME)) ELSE NULL END FROM (SELECT AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1) ELSE NULL END,  NVL2(MAX_ERROR_NUMBER,  XMLELEMENT( &quot;error&quot;,  XMLATTRIBUTES(MAX_ERROR_NUMBER AS &quot;number&quot;,  MAX_ERROR_FACILITY AS &quot;facility&quot;),  MAX_ERROR_MESSAGE),  NULL),  CASE WHEN :B61 = 1 AND MAGG.QC_HAS_BINDS_XML = 'Y' THEN (SELECT XMLTYPE(BINDS_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = :B17 AND MON.KEY = MAGG.MAX_KEY AND MON.SID = MAGG.MAX_SESSION_ID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END,  CASE WHEN :B60 = 1 AND MAGG.QC_HAS_OTHER_XML = 'Y' THEN (SELECT XMLTYPE(OTHER_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = MAGG.MAX_INST_ID AND MON.KEY = MAGG.MAX_KEY AND MON.SID = MAGG.MAX_SESSION_ID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END) FROM MONITOR_AGG MAGG),  CASE WHEN :B44 = 1 THEN (SELECT CASE WHEN AT.ACTIVITY_COUNT &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( :B41 AS



&quot;ash_missing_seconds&quot;,  TO_CHAR(AT.ACTIVITY_START,  :B12 ) AS &quot;first_sample_time&quot;,	TO_CHAR(AT.ACTIVITY_END,  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((AT.ACTIVITY_END - AT.ACTIVITY_START) * 3600 * 24) + 1 AS &quot;duration&quot;,  AT.ACTIVITY_COUNT AS &quot;count&quot;,  AT.IMQ_COUNT AS &quot;imq_count&quot;,  AT.WAIT_COUNT AS &quot;wait_count&quot;,  AT.CPU_COUNT AS &quot;cpu_count&quot;,  DECODE(AT.OTHER_SQL_COUNT,  0,  NULL,  AT.OTHER_SQL_COUNT) AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  AT.ACTIVITY_TOTAL,	AH.GLOB_ACTIVITY_HISTO) WHEN :B41 IS NOT NULL THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( DECODE( :B41 ,  -1,  'all',  TO_CHAR( :B41 )) AS &quot;ash_missing_seconds&quot;)) ELSE NULL END FROM (SELECT MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) IMQ_COUNT,  SUM(AD1.WAIT_COUNT) WAIT_COUNT,  SUM(AD1.CPU_COUNT) CPU_COUNT,  SUM(AD1.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG( XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME) ACTIVITY_TOTAL FROM (SELECT AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME,  MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,	SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,	SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1) AT,  (SELECT CASE WHEN :B30 = 1 AND :B27 &gt; 1 THEN XMLELEMENT( &quot;activity_histogram&quot;,  XMLATTRIBUTES( :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR( :B20 ,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR( :B22 ,  :B12 ) AS &quot;end_time&quot;,  ROUND(( :B22 - :B20 ) *3600*24) + 1 AS &quot;duration&quot;),  XMLAGG( XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),  ACTIVITY_BUCKET) ORDER BY AD2.BUCKET_NUM)) ELSE NULL END GLOB_ACTIVITY_HISTO FROM (SELECT AD1.BUCKET_NUM,  SUM(ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(IMQ_COUNT) IMQ_COUNT,  SUM(WAIT_COUNT) WAIT_COUNT,  SUM(CPU_COUNT) CPU_COUNT,  SUM(OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  MIN(AD1.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD1.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG( XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,  AD1.EVENT_NAME AS &quot;event&quot;),	AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,  AD1.EVENT_NAME) ACTIVITY_BUCKET FROM (SELECT AD0.ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,	MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(AD0.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,	MAX(AD0.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1 GROUP BY AD1.BUCKET_NUM) AD2) AH) ELSE NULL END,	CASE WHEN :B33 = 1 THEN (SELECT CASE WHEN AH.ACTIVITY_COUNT &gt; 0 THEN XMLELEMENT( &quot;activity_detail&quot;,  XMLATTRIBUTES( TO_CHAR( :B20 ,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR( :B22 ,  :B12 ) AS &quot;end_time&quot;,  :B41 AS &quot;ash_missing_seconds&quot;,  TO_CHAR(AH.ACTIVITY_START,  :B12 ) AS &quot;first_sample_time&quot;,  TO_CHAR(AH.ACTIVITY_END,  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((AH.ACTIVITY_END - AH.ACTIVITY_START) * 3600 * 24) + 1 AS &quot;duration&quot;,  :B25 AS &quot;sample_interval&quot;,  :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,	ROUND((:B22 - :B20 ) *3600*24) + 1 AS &quot;bucket_duration&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B34 AS &quot;total_cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  AH.GLOB_ACTIVITY_HISTO) WHEN :B41 IS NOT NULL THEN XMLELEMENT( &quot;activity_detail&quot;,  XMLATTRIBUTES( DECODE( :B41 ,  -1,  'all',  TO_CHAR( :B41 )) AS &quot;ash_missing_seconds&quot;)) ELSE NULL END FROM (SELECT MIN(AD2.ACTIVITY_START) ACTIVITY_START,	MAX(AD2.ACTIVITY_END) ACTIVITY_END,  SUM(AD2.ACTIVITY_COUNT) ACTIVITY_COUNT,  XMLAGG( XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),  ACTIVITY_BUCKET_XML) ORDER BY AD2.BUCKET_NUM) GLOB_ACTIVITY_HISTO FROM (SELECT AD1.BUCKET_NUM,  MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  MAX(AD1.BUCKET_IDLE_SECONDS) BUCKET_IDLE_SECONDS,	XMLAGG( XMLCONCAT( CASE WHEN AD1.DFO_PAIR_IDLE_RESP_TIME != 0 AND DFO_PAIR_ROWNUM = 1 THEN XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( 'Parallel Skew' AS &quot;class&quot;,  AD1.PX_STEP_ARG AS &quot;line&quot;,  AD1.PX_ID AS &quot;px&quot;,	ROUND(AD1.DFO_PAIR_IDLE_RESP_TIME,  2) AS &quot;rt&quot;),  0) ELSE NULL END,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( NVL(AD1.OTHER_SQL,  AD1.RPI) AS &quot;sql&quot;,  AD1.NON_SQL AS &quot;non_sql&quot;,	AD1.CLASS AS &quot;class&quot;,  AD1.OTHER_SQL_CLASS AS &quot;other_sql_class&quot;,  AD1.EVENT AS &quot;event&quot;,  AD1.PLAN_LINE_ID AS &quot;line&quot;,  NVL2(AD1.PLSQL_OBJECT_ID,  AD1.PLSQL_OBJECT_ID||'.'|| AD1.PLSQL_SUBPROGRAM_ID,  NULL) AS &quot;plsql_id&quot;,  AD1.PLSQL_NAME AS &quot;plsql_name&quot;,  CASE WHEN AD1.SQL_ROWNUM = 1 THEN AD1.TOP_LEVEL_SQL_ID END AS &quot;top_sql_id&quot;,	CASE WHEN AD1.DBOP_NAME IS NOT NULL THEN AD1.DBOP_NAME END AS &quot;dbop_name&quot;,  CASE WHEN AD1.DFO_MOST_ACTIVE_IID IS NOT NULL AND :B68 = 'Y' THEN AD1.DFO_MOST_ACTIVE_IID END AS &quot;skew_iid&quot;,  DECODE(AD1.DFO_MOST_ACTIVE_COUNT,  NULL, NULL,  AD1.DFO_MOST_ACTIVE_SID) AS &quot;skew_sid&quot;,  AD1.DFO_MOST_ACTIVE_COUNT AS &quot;skew_count&quot;,  DECODE(AD1.PX_DOP,  :B28 ,  NULL,  AD1.PX_DOP) AS &quot;dop&quot;,  DECODE(AD1.PX_DOP,  AD1.PX_MIN_DOP,	NULL,  AD1.PX_MIN_DOP) AS &quot;min_dop&quot;,	AD1.PX_ID AS &quot;px&quot;,  AD1.PX_STEP_ID AS &quot;step&quot;,  AD1.PX_STEP_ARG AS &quot;arg&quot;,	DECODE(AD1.ACTIVITY_COUNT,  AD1.RESP_TIME,  NULL,  ROUND(AD1.RESP_TIME,  2)) AS &quot;rt&quot;),  AD1.ACTIVITY_COUNT)) ORDER BY AD1.PX_STEP_ID,  AD1.PX_STEP_ARG,  AD1.DFO_PAIR_ROWNUM) ACTIVITY_BUCKET_XML FROM (SELECT AD01.*,  CASE WHEN AD01.ACTIVITY_TYPE != 'Other SQL Execution' AND AD01.ACTIVITY_TYPE != 'Non SQL' THEN AD01.ACTIVITY_TYPE END CLASS,	CASE WHEN (AD01.ACTIVITY_TYPE = 'Other SQL Execution' OR AD01.ACTIVITY_TYPE = 'Non SQL') THEN AD01.OTHER_SQL_ACTIVITY_TYPE END OTHER_SQL_CLASS,  CASE WHEN AD01.ACTIVITY_TYPE != 'Other SQL Execution' AND AD01.ACTIVITY_TYPE != 'Non SQL' THEN AD01.EVENT_NAME END EVENT,  CASE WHEN AD01.SQL IN ('this',  'anonymous') THEN NULL ELSE AD01.SQL END RPI,  DECODE(AD01.ACTIVITY_TYPE,  'Other SQL Execution',  SUBSTR(AD01.EVENT_NAME,	9),  NULL) OTHER_SQL,  DECODE(AD01.ACTIVITY_TYPE,  'Non SQL',  AD01.EVENT_NAME,  NULL) NON_SQL,  ROW_NUMBER() OVER(PARTITION BY AD01.BUCKET_NUM,  AD01.PX_DFO_PAIR_ID ORDER BY AD01.ACTIVITY_TYPE,  AD01.EVENT_NAME,  AD01.PLAN_LINE_ID) DFO_PAIR_ROWNUM FROM RESPONSE_TIME_DATA AD01) AD1 GROUP BY AD1.BUCKET_NUM) AD2) AH) ELSE NULL END,  CASE WHEN :B23 = 'Y' THEN (SELECT XMLELEMENT( &quot;parallel_info&quot;,  XMLATTRIBUTES( :B17 AS &quot;qc_instance_id&quot;,  MAX_PX_QCSID AS &quot;qc_session_id&quot;,  MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,  MAX_PX_DOP AS &quot;dop&quot;,  MAX_PX_DOP_INSTANCES AS &quot;max_dop_instances&quot;,  DIST_INST_COUNT AS &quot;inst_count&quot;,  DIST_PX_GROUP_COUNT AS &quot;serv
er_group_count&quot;,  DIST_PX_SET_COUNT AS &quot;server_set_count&quot;),  CASE WHEN :B70 = 1 THEN PX_SESSIONS ELSE NULL END,	CASE WHEN :B68 = 'Y' THEN DECODE(:B69 ,  1,  PX_INSTANCES,  NULL) ELSE NULL END) FROM (SELECT MAX_PX_QCSID,  MAX_PX_DOP,  MAX_PX_DOP_INSTANCES,  MAX_PX_IS_CROSS_INSTANCE,  SUM_SERVERS_REQUESTED,  SUM_SERVERS_ALLOCATED,  DIST_INST_COUNT,  DIST_PX_GROUP_COUNT,  DIST_PX_SET_COUNT,	(SELECT XMLELEMENT( &quot;sessions&quot;,  XMLATTRIBUTES(MAX(PX_SESSION.ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PX_SESSION.IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PX_SESSION.CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PX_SESSION.WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PX_SESSION.OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;,  MAX(PX_SESSION.MAX_IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PX_SESSION.MAX_IO_BYTES) AS &quot;max_io_bytes&quot;,  MAX(PX_SESSION.MAX_BUFFER_GETS) AS &quot;max_buffer_gets&quot;,  MAX(PX_SESSION.MAX_ELAPSED_TIME) AS &quot;max_elapsed_time&quot;),  XMLAGG(PX_SESSION.PX_SESSION_XML ORDER BY PX_SERVER_GROUP NULLS FIRST,  PX_SERVER_SET,  PX_SERVER#)) FROM (SELECT PX_SERVER_GROUP,  PX_SERVER_SET,  PX_SERVER#,	MAX(PI.MAX_ELAPSED_TIME) MAX_ELAPSED_TIME,  MAX(PI.MAX_IO_REQS) MAX_IO_REQS,  MAX(PI.MAX_IO_BYTES) MAX_IO_BYTES,  MAX(PI.MAX_BUFFER_GETS) MAX_BUFFER_GETS,  SUM(PI.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(PI.IMQ_COUNT) IMQ_COUNT,  SUM(PI.WAIT_COUNT) WAIT_COUNT,  SUM(PI.CPU_COUNT) CPU_COUNT,	SUM(PI.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  XMLELEMENT( &quot;session&quot;,  XMLATTRIBUTES( INST_ID AS &quot;inst_id&quot;,  PROCESS_NAME AS &quot;process_name&quot;,  SID AS &quot;session_id&quot;,  SESSION_SERIAL# AS &quot;session_serial&quot;,  PX_SERVER_GROUP AS &quot;server_group&quot;,  PX_SERVER_SET AS &quot;server_set&quot;,  PX_SERVER# AS &quot;server_num&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES( 'monitor' AS &quot;type&quot;),  NVL2(MAX(ELAPSED_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MAX(ELAPSED_TIME)),	NULL),	NVL2(MAX(QUEUING_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX(QUEUING_TIME)),  NULL),  NVL2(MAX(CPU_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MAX(CPU_TIME)),  NULL),  NVL2(MAX(USER_IO_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MAX(USER_IO_WAIT_TIME)),  NULL),  NVL2(MAX(APPLICATION_WAIT_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MAX(APPLICATION_WAIT_TIME)),  NULL),  NVL2(MAX(CONCURRENCY_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),	MAX(CONCURRENCY_WAIT_TIME)),  NULL),  NVL2(MAX(CLUSTER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MAX(CLUSTER_WAIT_TIME)),  NULL),  NVL2(MAX(PLSQL_EXEC_TIME),  XMLELEMENT(
&quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MAX(PLSQL_EXEC_TIME)),  NULL),  NVL2(MAX(JAVA_EXEC_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MAX(JAVA_EXEC_TIME)),  NULL),  NVL2(MAX(OTHER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'other_wait_time' AS &quot;name&quot;),  MAX(OTHER_WAIT_TIME)),  NULL),  NVL2(MAX(FETCHES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MAX(FETCHES)),  NULL),  NVL2(MAX(BUFFER_GETS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MAX(BUFFER_GETS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),  MAX(READ_REQS)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MAX(READ_REQS)),  NULL),  NVL2(MAX(READ_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MAX(READ_BYTES)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(WRITE_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MAX(WRITE_BYTES)),	NULL),	NVL2(MAX(IO_UNC_BYTES),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MAX(IO_UNC_BYTES)),  NULL),  NVL2(MAX(IO_ELIG_BYTES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MAX(IO_ELIG_BYTES)),  NULL),  NVL2(MAX(IO_RET_BYTES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),	MAX(IO_RET_BYTES)),  NULL),  CASE WHEN MAX(IO_INTER_BYTES) IS NULL OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_INTER_BYTES) = MAX(IO_BYTES) OR NVL(MAX(IO_ELIG_BYTES),  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),	ROUND(MAX(IO_BYTES) / DECODE(MAX(IO_INTER_BYTES),  0,  1,  MAX(IO_INTER_BYTES)),  2)) END,  CASE WHEN NVL(MAX(IO_ELIG_BYTES),  0) = 0 OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_UNC_BYTES) = MAX(IO_RET_BYTES) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,	ROUND(100* (GREATEST( NVL(MAX(IO_UNC_BYTES), 0),  NVL(MAX(IO_ELIG_BYTES), 0)) - MAX(IO_RET_BYTES)) / MAX(IO_ELIG_BYTES),  2))) END),  CASE WHEN SUM(PI.ACTIVITY_COUNT) &gt; 0 AND :B33 = 1 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( TO_CHAR(MIN(PI.ACTIVITY_START),  :B12 ) AS &quot;first_sample_time&quot;,  TO_CHAR(MAX(PI.ACTIVITY_END),  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((MAX(PI.ACTIVITY_END) - MIN(PI.ACTIVITY_START)) * 3600 * 24) + 1 AS &quot;duration&quot;,  SUM(PI.ACTIVITY_COUNT) AS &quot;count&quot;,  SUM(PI.IMQ_COUNT) AS &quot;imq_count&quot;,  SUM(PI.CPU_COUNT) AS &quot;cpu_count&quot;,  SUM(PI.WAIT_COUNT) AS &quot;wait_count&quot;,  SUM(PI.OTHER_SQL_COUNT)AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),	XMLAGG( NVL2(ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( PI.ACTIVITY_TYPE AS &quot;class&quot;,  PI.EVENT_NAME AS &quot;event&quot;),  ACTIVITY_COUNT),  NULL) ORDER BY PI.ACTIVITY_TYPE,  PI.EVENT_NAME)) ELSE NULL END,  CASE WHEN :B60 = 1 AND PI.HAS_OTHER_XML = 'Y' THEN (SELECT XMLTYPE(OTHER_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = PI.INST_ID AND MON.KEY = PI.KEY AND MON.SID = PI.SID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END) PX_SESSION_XML FROM (SELECT MO.HAS_OTHER_XML,  MO.KEY,  MO.INST_ID,  DECODE(MO.PROCESS_NAME,  'ora',  'PX Coordinator',	MO.PROCESS_NAME) PROCESS_NAME,	MO.SID,  MO.SESSION_SERIAL#,  MO.PX_SERVER_GROUP,  MO.PX_SERVER_SET,  MO.PX_SERVER#,  ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME,  MAX(MO.IO_REQS) MAX_IO_REQS,  MAX(MO.IO_BYTES) MAX_IO_BYTES,  MAX(MO.BUFFER_GETS) MAX_BUFFER_GETS,  MAX(MO.ELAPSED_TIME) MAX_ELAPSED_TIME,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.ACTIVITY_COUNT)) ACTIVITY_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,  NULL,  ASH0.IMQ_COUNT)) IMQ_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.WAIT_COUNT)) WAIT_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,  NULL,  ASH0.CPU_COUNT)) CPU_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.OTHER_SQL_COUNT)) OTHER_SQL_COUNT,	MIN(ASH0.ACTIVITY_START) ACTIVITY_START,  MAX(ASH0.ACTIVITY_END) ACTIVITY_END,	MAX(DECODE(MO.ELAPSED_TIME,  0,  NULL,	MO.ELAPSED_TIME)) ELAPSED_TIME,  MAX(DECODE(MO.QUEUING_TIME,  0,  NULL,  MO.QUEUING_TIME)) QUEUING_TIME,  MAX(DECODE(MO.CPU_TIME,  0,  NULL,  CPU_TIME)) CPU_TIME,  MAX(DECODE(MO.FETCHES,  0,	NULL,  FETCHES)) FETCHES,  MAX(DECODE(MO.BUFFER_GETS,  0,  NULL,  MO.BUFFER_GETS)) BUFFER_GETS,  MAX(DECODE(MO.IO_INTER_BYTES,	0,  NULL,  MO.IO_INTER_BYTES)) IO_INTER_BYTES,	MAX(DECODE(MO.READ_REQS,  0,  NULL,  MO.READ_REQS)) READ_REQS,	MAX(DECODE(MO.READ_BYTES,  0,  NULL,  MO.READ_BYTES)) READ_BYTES,  MAX(DECODE(MO.WRITE_REQS,  0,  NULL,  MO.WRITE_REQS)) WRITE_REQS,  MAX(DECODE(MO.WRITE_BYTES,  0,  NULL,  MO.WRITE_BYTES)) WRITE_BYTES,  MAX(DECODE(MO.IO_BYTES,  0,  NULL,	MO.IO_BYTES)) IO_BYTES,  MAX(DECODE(MO.IO_UNC_BYTES,  0,  NULL,  MO.IO_UNC_BYTES)) IO_UNC_BYTES,  MAX(DECODE(MO.IO_ELIG_BYTES,	0,  NULL,  MO.IO_ELIG_BYTES)) IO_ELIG_BYTES,  MAX(DECODE(MO.IO_RET_BYTES,  0,  NULL,  MO.IO_RET_BYTES)) IO_RET_BYTES,  MAX(DECODE(MO.APPLICATION_WAIT_TIME,  0,  NULL,	MO.APPLICATION_WAIT_TIME)) APPLICATION_WAIT_TIME,  MAX(DECODE(MO.CONCURRENCY_WAIT_TIME,  0,  NULL,  MO.CONCURRENCY_WAIT_TIME)) CONCURRENCY_WAIT_TIME,  MAX(DECODE(MO.CLUSTER_WAIT_TIME,  0,  NULL,  MO.CLUSTER_WAIT_TIME)) CLUSTER_WAIT_TIME,  MAX(DECODE(MO.USER_IO_WAIT_TIME,  0,  NULL,  MO.USER_IO_WAIT_TIME)) USER_IO_WAIT_TIME,  MAX(DECODE(PLSQL_EXEC_TIME,  0,	NULL,  PLSQL_EXEC_TIME)) PLSQL_EXEC_TIME,  MAX(DECODE(MO.JAVA_EXEC_TIME,  0,  NULL,  MO.JAVA_EXEC_TIME)) JAVA_EXEC_TIME,  MAX(DECODE(MO.OTHER_WAIT_TIME,  0,  NULL,  MO.OTHER_WAIT_TIME)) OTHER_WAIT_TIME FROM MONITOR_DATA MO,  (SELECT ASH1.INST_ID,	ASH1.SESSION_ID,  ASH1.ACTIVITY_TYPE,  ASH1.EVENT_NAME,  SUM(ASH1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(ASH1.IMQ_COUNT) IMQ_COUNT,  SUM(ASH1.WAIT_COUNT) WAIT_COUNT,  SUM(ASH1.CPU_COUNT) CPU_COUNT,  SUM(ASH1.OTHER_SQL_COUNT)OTHER_SQL_COUNT,	MIN(ASH1.ACTIVITY_START) ACTIVITY_START,  MAX(ASH1.ACTIVITY_END) ACTIVITY_END FROM ASH_DATA ASH1 GROUP BY ASH1.INST_ID,  ASH1.SESSION_ID,  ASH1.ACTIVITY_TYPE,	ASH1.EVENT_NAME) ASH0 WHERE MO.INST_ID = ASH0.INST_ID(+) AND MO.SID = ASH0.SESSION_ID(+) AND (:B70 = 1 OR :B69 = 1) GROUP BY MO.INST_ID,  MO.KEY,  MO.HAS_OTHER_XML,  MO.PROCESS_NAME,	MO.SID,  MO.SESSION_SERIAL#,  MO.PX_SERVER_GROUP,  MO.PX_SERVER_SET,  MO.PX_SERVER#,  ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME) PI WHERE (:B70 = 1) GROUP BY PI.INST_ID,  PI.KEY,  PI.HAS_OTHER_XML,  PI.SID,  PI.PROCESS_NAME,  PI.SESSION_SERIAL#,  PI.PX_SERVER_GROUP,  PI.PX_SERVER_SET,  PI.PX_SERVER#) PX_SESSION) PX_SESSIONS,  (SELECT XMLELEMENT( &quot;instances&quot;,  XMLATTRIBUTES( MAX(PX_INSTANCE.ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PX_INSTANCE.IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PX_INSTANCE.CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PX_INSTANCE.WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PX_INSTANCE.OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;,	MAX(PX_INSTANCE.ELAPSED_TIME) AS &quot;max_elapsed_time&quot;,	MAX(PX_INSTANCE.BUFFER_GETS) AS &quot;max_buffer_gets&quot;,  MAX(PX_INSTANCE.IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PX_INSTANCE.IO_BYTES) AS &quot;max_io_bytes&quot;),  XMLAGG(PX_INSTANCE.PX_INSTANCES_XML ORDER BY INST_ID)) FROM (SELECT PI.INST_ID,  MAX(PI.ELAPSED_TIME) ELAPSED_TIME,  MAX(PI.IO_REQS) IO_REQS,  MAX(PI.IO_BYTES) IO_BYTES,	MAX(PI.BUFFER_GETS) BUFFER_GETS,  SUM(PI
.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(PI.IMQ_COUNT) IMQ_COUNT,	SUM(PI.WAIT_COUNT) WAIT_COUNT,	SUM(PI.CPU_COUNT) CPU_COUNT,  SUM(PI.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	XMLELEMENT( &quot;instance&quot;,  XMLATTRIBUTES( INST_ID AS &quot;inst_id&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES( 'monitor' AS &quot;type&quot;),  NVL2(MAX(ELAPSED_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),	MAX(ELAPSED_TIME)),  NULL),  NVL2(MAX(QUEUING_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX(QUEUING_TIME)),  NULL),  NVL2(MAX(CPU_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MAX(CPU_TIME)),  NULL),  NVL2(MAX(USER_IO_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MAX(USER_IO_WAIT_TIME)),  NULL),  NVL2(MAX(APPLICATION_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name
&quot;),  MAX(APPLICATION_WAIT_TIME)),	NULL),	NVL2(MAX(CONCURRENCY_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MAX(CONCURRENCY_WAIT_TIME)),  NULL),  NVL2(MAX(CLUSTER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MAX(CLUSTER_WAIT_TIME)),  NULL),  NVL2(MAX(PLSQL_EXEC_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MAX(PLSQL_EXEC_TIME)),  NULL),  NVL2(MAX(JAVA_EXEC_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MAX(JAVA_EXEC_TIME)),  NULL),  NVL2(MAX(OTHER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'other_wait_time' AS &quot;name&quot;),	MAX(OTHER_WAIT_TIME)),	NULL),	NVL2(MAX(FETCHES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MAX(FETCHES)),  NULL),  NVL2(MAX(BUFFER_GETS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MAX(BUFFER_GETS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),	MAX(READ_REQS)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  MAX(WRITE_REQS)),	NULL),	NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MAX(READ_REQS)),	NULL),	NVL2(MAX(READ_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),	MAX(READ_BYTES)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(WRITE_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),	MAX(WRITE_BYTES)),  NULL),  NVL2(MAX(IO_UNC_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MAX(IO_UNC_BYTES)),  NULL),  NVL2(MAX(IO_ELIG_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MAX(IO_ELIG_BYTES)),  NULL),  NVL2(MAX(IO_RET_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  MAX(IO_RET_BYTES)),  NULL),  CASE WHEN MAX(IO_INTER_BYTES) IS NULL OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_INTER_BYTES) = MAX(IO_BYTES) OR NVL(MAX(IO_ELIG_BYTES),	0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MAX(IO_BYTES)/ DECODE(MAX(IO_INTER_BYTES),  0,  1,  MAX(IO_INTER_BYTES)),  2)) END,  CASE WHEN NVL(MAX(IO_ELIG_BYTES),  0) = 0 OR NVL(MAX(IO_BYTES),	0) = 0 OR MAX(IO_UNC_BYTES) = MAX(IO_RET_BYTES) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100* (GREATEST( NVL(MAX(IO_UNC_BYTES),  0),  NVL(MAX(IO_ELIG_BYTES),  0)) - MAX(IO_RET_BYTES)) / MAX(IO_ELIG_BYTES),  2))) END),  CASE WHEN :B33 = 1 AND SUM(PI.ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,	XMLATTRIBUTES( TO_CHAR(MIN(PI.ACTIVITY_START),	:B12 ) AS &quot;start_time&quot;,  TO_CHAR(MAX(PI.ACTIVITY_END),  :B12 ) AS &quot;end_time&quot;,  ROUND((MAX(PI.ACTIVITY_END) - MIN(PI.ACTIVITY_START)) * 3600 * 24) + 1 AS &quot;duration&quot;,  SUM(PI.ACTIVITY_COUNT) AS &quot;count&quot;,  SUM(PI.IMQ_COUNT) AS &quot;imq_count&quot;,  SUM(PI.WAIT_COUNT) AS &quot;wait_count&quot;,  SUM(PI.CPU_COUNT) AS &quot;cpu_count&quot;,  SUM(PI.OTHER_SQL_COUNT) AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  XMLAGG( NVL2(ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( PI.ACTIVITY_TYPE AS &quot;class&quot;,  PI.EVENT_NAME AS &quot;event&quot;),  ACTIVITY_COUNT),  NULL) ORDER BY PI.ACTIVITY_TYPE,	PI.EVENT_NAME)) ELSE NULL END) PX_INSTANCES_XML FROM (SELECT MO.INST_ID,  ASH.ACTIVITY_TYPE,  ASH.EVENT_NAME,  ASH.ACTIVITY_COUNT,  ASH.IMQ_COUNT,  ASH.WAIT_COUNT,  ASH.CPU_COUNT,  ASH.OTHER_SQL_COUNT,  ASH.ACTIVITY_START,	ASH.ACTIVITY_END,  MO.ELAPSED_TIME,  MO.QUEUING_TIME,  MO.CPU_TIME,  MO.APPLICATION_WAIT_TIME,	MO.CONCURRENCY_WAIT_TIME,  MO.CLUSTER_WAIT_TIME,  MO.USER_IO_WAIT_TIME,  MO.PLSQL_EXEC_TIME,  MO.JAVA_EXEC_TIME,  MO.OTHER_WAIT_TIME,  MO.FETCHES,  MO.BUFFER_GETS,  MO.IO_INTER_BYTES,  MO.IO_BYTES,  MO.READ_REQS,  MO.READ_BYTES,  MO.WRITE_REQS,  MO.WRITE_BYTES,  MO.IO_REQS,  MO.IO_UNC_BYTES,  MO.IO_ELIG_BYTES,  MO.IO_RET_BYTES FROM (SELECT MO0.INST_ID,  SUM(MO0.ELAPSED_TIME) ELAPSED_TIME,  SUM(MO0.QUEUING_TIME) QUEUING_TIME,  SUM(MO0.CPU_TIME) CPU_TIME,  SUM(MO0.FETCHES) FETCHES,  SUM(MO0.BUFFER_GETS) BUFFER_GETS,  SUM(MO0.IO_INTER_BYTES) IO_INTER_BYTES,  SUM(MO0.IO_BYTES) IO_BYTES,  SUM(MO0.READ_REQS) READ_REQS,  SUM(MO0.READ_BYTES) READ_BYTES,  SUM(MO0.WRITE_REQS) WRITE_REQS,	SUM(MO0.WRITE_BYTES) WRITE_BYTES,  SUM(MO0.IO_REQS) IO_REQS,  SUM(MO0.IO_UNC_BYTES) IO_UNC_BYTES,  SUM(MO0.IO_ELIG_BYTES) IO_ELIG_BYTES,  SUM(MO0.IO_RET_BYTES) IO_RET_BYTES,  SUM(MO0.APPLICATION_WAIT_TIME) APPLICATION_WAIT_TIME,  SUM(MO0.CONCURRENCY_WAIT_TIME) CONCURRENCY_WAIT_TIME,  SUM(MO0.CLUSTER_WAIT_TIME) CLUSTER_WAIT_TIME,  SUM(MO0.USER_IO_WAIT_TIME) USER_IO_WAIT_TIME,  SUM(MO0.PLSQL_EXEC_TIME) PLSQL_EXEC_TIME,  SUM(MO0.JAVA_EXEC_TIME) JAVA_EXEC_TIME,  SUM(MO0.OTHER_WAIT_TIME) OTHER_WAIT_TIME FROM MONITOR_DATA MO0 GROUP BY MO0.INST_ID) MO,  (SELECT ASH0.INST_ID,	ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME,  SUM(ASH0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(ASH0.IMQ_COUNT) IMQ_COUNT,  SUM(ASH0.WAIT_COUNT) WAIT_COUNT,  SUM(ASH0.CPU_COUNT) CPU_COUNT,  SUM(ASH0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(ASH0.ACTIVITY_START) ACTIVITY_START,  MAX(ASH0.ACTIVITY_END) ACTIVITY_END FROM ASH_DATA ASH0 GROUP BY ASH0.INST_ID,	ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME) ASH,  MONITOR_AGG WHERE MO.INST_ID = ASH.INST_ID(+) AND MONITOR_AGG.DIST_INST_COUNT &gt; 0 ) PI GROUP BY PI.INST_ID)PX_INSTANCE) PX_INSTANCES FROM MONITOR_AGG)) ELSE NULL END,  XPLAN_XML,  CASE WHEN :B43 = 1 THEN (SELECT XMLELEMENT( &quot;plan_monitor&quot;,  XMLATTRIBUTES(MAX(PLI.MAX_LINE_ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PLI.OVERALL_MAX_IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PLI.OVERALL_MAX_IO_BYTES) AS &quot;max_io_bytes&quot;,  MAX(PLI.MAX_LINE_IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PLI.MAX_LINE_CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PLI.MAX_LINE_WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PLI.MAX_LINE_OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;),  XMLAGG( XMLELEMENT( &quot;operation&quot;,  XMLATTRIBUTES( PLI.PLAN_LINE_ID AS &quot;id&quot;,  PLI.PARENT_ID AS &quot;parent_id&quot;,  PLI.OPERATION AS &quot;name&quot;,  PLI.OPTIONS AS &quot;options&quot;,	PLI.DEPTH AS &quot;depth&quot;,  PLI.POSITION AS &quot;position&quot;,	PLI.INACTIVE AS &quot;skp&quot;,  PLI.PX_TYPE AS &quot;px_type&quot;),	NVL2(PLI.OBJECT_NAME,  XMLELEMENT( &quot;object&quot;,	XMLATTRIBUTES(PLI.OBJECT_TYPE AS &quot;type&quot;),  XMLFOREST(PLI.OBJECT_OWNER AS &quot;owner&quot;),	XMLFOREST(PLI.OBJECT_NAME AS &quot;name&quot;)),  NULL),  XMLFOREST(PLI.PARTITION_START AS &quot;partition_start&quot;,  PLI.PARTITION_STOP AS &quot;partition_stop&quot;),  CASE WHEN PLI.CARDINALITY IS NULL AND PLI.BYTES IS NULL AND PLI.COST IS NULL AND PLI.TEMP_SPACE IS NULL AND PLI.TIME IS NULL THEN NULL ELSE XMLELEMENT( &quot;optimizer&quot;,  NULL,  NVL2(PLI.CARDINALITY,  XMLFOREST(PLI.CARDINALITY AS &quot;cardinality&quot;),  NULL),  NVL2(PLI.BYTES,  XMLFOREST(PLI.BYTES AS &quot;bytes&quot;),	NULL),	NVL2(PLI.COST,	XMLFOREST(PLI.COST AS &quot;cost&quot;),  NULL),  NVL2(PLI.CPU_COST,  XMLFOREST(PLI.CPU_COST AS &quot;cpu_cost&quot;),	NULL),	NVL2(PLI.IO_COST,  XMLFOREST(PLI.IO_COST AS &quot;io_cost&quot;),  NULL),  NVL2(PLI.TEMP_SPACE,  XMLFOREST(PLI.TEMP_SPACE AS &quot;temp&quot;),  NULL),  NVL2(PLI.TIME,  XMLFOREST(PLI.TIME AS &quot;time&quot;),  NULL)) END,	XMLELEMENT( &quot;stats&quot;,	XMLATTRIBUTES('plan_monitor' AS &quot;type&quot;),  NVL2(PLI.FIR
ST_MOVE_TIME,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('first_active' AS &quot;name&quot;),  TO_CHAR(FIRST_MOVE_TIME,  :B12 )),  NULL),  CASE WHEN PLI.FIRST_MOVE_TIME != PLI.FIRST_CHANGE_TIME THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('first_row' AS &quot;name&quot;),  TO_CHAR(FIRST_CHANGE_TIME,  :B12 )) ELSE NULL END,  NVL2(PLI.LAST_MOVE_TIME,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('last_active' AS &quot;name&quot;),  TO_CHAR(LAST_MOVE_TIME,  :B12 )),  NULL),  CASE WHEN (PLI.FIRST_MOVE_TIME IS NULL OR PLI.LAST_MOVE_TIME IS NULL) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('duration' AS &quot;name&quot;),  ROUND((LAST_MOVE_TIME - FIRST_MOVE_TIME) * 3600 * 24)+1) END,	CASE WHEN (PLI.OVERALL_LAST_MOVE_TIME IS NULL OR PLI.LAST_MOVE_TIME IS NULL) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('from_most_recent' AS &quot;name&quot;),  ROUND((PLI.OVERALL_LAST_MOVE_TIME - PLI.LAST_MOVE_TIME) * 3600 * 24)) END,  NVL2(PLI.LAST_MOVE_TIME,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'from_sql_exec_start' AS &quot;name&quot;),  ROUND( (FIRST_MOVE_TIME - :B8 ) * 3600*24)),  NULL),  NVL2(PLI.PERCENT_COMPLETE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('percent_complete' AS &quot;name&quot;),  PLI.PERCENT_COMPLETE),  NULL),  NVL2(PLI.TIME_REMAINING,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('time_left' AS &quot;name&quot;),  PLI.TIME_REMAINING),  NULL),  CASE WHEN PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('starts' AS &quot;name&quot;),  PLI.STARTS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'max_starts' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_STARTS/1000000),  10000),	NULL) AS &quot;iid&quot;,  MOD(MAX_STARTS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_STARTS/10000000000)) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('dop' AS
&quot;name&quot;),  PLI.DOP) ELSE NULL END,  CASE WHEN NEED_ROWS IS NOT NULL AND PLI.FIRST_MOVE_TIME IS NOT NULL THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cardinality' AS &quot;name&quot;),	PLI.OUTPUT_ROWS) ELSE NULL END,  CASE WHEN PLI.NEED_ROWS IS NOT NULL AND PLI.DOP &gt; 0 AND PLI.MAX_OUTPUT_ROWS IS NOT NULL AND (PLI.FIRST_MOVE_TIME IS NOT NULL) THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_card' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_OUTPUT_ROWS/1000000),	10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_OUTPUT_ROWS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_OUTPUT_ROWS/10000000000)) ELSE NULL END,  CASE WHEN PLI.MEM &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('memory' AS &quot;name&quot;),  PLI.MEM) ELSE NULL END,  CASE WHEN PLI.MAX_MEM &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('max_memory' AS &quot;name&quot;),	PLI.MAX_MEM) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MIN_MAX_MEM IS NOT NULL AND PLI.MAX_MEM
&gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'min_max_mem' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MIN_MAX_MEM/1000000),  10000),  NULL) AS &quot;iid&quot;,	MOD(MIN_MAX_MEM,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MIN_MAX_MEM/10000000000)) ELSE NULL END,  CASE WHEN PLI.TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('temp' AS &quot;name&quot;),  PLI.TEMP) ELSE NULL END,  CASE WHEN PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('max_temp' AS &quot;name&quot;),  PLI.MAX_TEMP) ELSE NULL END,  CASE WHEN PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('spill_count' AS &quot;name&quot;),  PLI.SPILL_COUNT) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_MAX_TEMP IS NOT NULL AND PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_max_temp' AS &quot;name&quot;,  DECODE(:B68 ,	'Y',  MOD(TRUNC(MAX_MAX_TEMP/1000000),	10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_MAX_TEMP,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_MAX_TEMP/10000000000)) ELSE NULL END,  CASE WHEN PLI.READ_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  PLI.READ_REQS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_READ_REQS IS NOT NULL AND PLI.READ_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_read_reqs' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',	MOD(TRUNC(PLI.MAX_READ_REQS/1000000),  10000),	NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_READ_REQS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_READ_REQS/10000000000)) ELSE NULL END,	CASE WHEN PLI.READ_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  PLI.READ_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_READ_BYTES IS NOT NULL AND PLI.READ_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'max_read_bytes' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_READ_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_READ_BYTES,	1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_READ_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.WRITE_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  PLI.WRITE_REQS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_WRITE_REQS IS NOT NULL AND PLI.WRITE_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_write_reqs' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_WRITE_REQS/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_WRITE_REQS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_WRITE_REQS/10000000000)) ELSE NULL END,  CASE WHEN PLI.WRITE_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  PLI.WRITE_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_WRITE_BYTES IS NOT NULL AND PLI.WRITE_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_write_bytes' AS &quot;name&quot;,	DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_WRITE_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_WRITE_BYTES,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_WRITE_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('io_inter_bytes' AS &quot;name&quot;),  PLI.IO_INTER_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_io_inter_bytes' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_IO_INTER_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_IO_INTER_BYTES, 1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_IO_INTER_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(PLI.IO_BYTES / DECODE(PLI.IO_INTER_BYTES,  0,  1,  PLI.IO_INTER_BYTES),  2)) ELSE NULL END),	NVL2(STAT_GID,	XMLELEMENT( &quot;rwsstats&quot;,  XMLATTRIBUTES( PLI.STAT_GID AS &quot;group_id&quot;),  DECODE(GID_ROWNUM,  1,  (SELECT XMLELEMENT( &quot;metadata&quot;,  NULL,  XMLAGG( XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( ROWNUM AS &quot;id&quot;,  NAME AS &quot;name&quot;,	DESCRIPTION AS &quot;desc&quot;,  TYPE AS &quot;type&quot;,  DECODE(FLAGS,  0,	NULL,  FLAGS) AS &quot;flags&quot;),  NULL) ORDER BY ID)) FROM V$SQL_MONITOR_STATNAME WHERE GROUP_ID = PLI.STAT_GID),  NULL),  NVL2(STAT1_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(1 AS &quot;id&quot;),  STAT1_VALUE),  NULL),  NVL2(STAT2_VALUE,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(2 AS &quot;id&quot;),  STAT2_VALUE),  NULL),  NVL2(STAT3_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(3 AS &quot;id&quot;),  STAT3_VALUE),  NULL),  NVL2(STAT4_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(4 AS &quot;id&quot;),	STAT4_VALUE),  NULL),  NVL2(STAT5_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(5 AS &quot;id&quot;),  STAT5_VALUE),  NULL),  NVL2(STAT6_VALUE,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(6 AS &quot;id&quot;),  STAT6_VALUE),  NULL),  NVL2(STAT7_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(7 AS &quot;id&quot;),  STAT7_VALUE),  NULL),  NVL2(STAT8_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(8 AS &quot;id&quot;),	STAT8_VALUE),  NULL),  NVL2(STAT9_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(9 AS &quot;id&quot;),  STAT9_VALUE),  NULL),  NVL2(STAT10_VALUE,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES(10 AS &quot;id&quot;),  STAT10_VALUE),  NULL)),  NULL),  CASE WHEN PLI.LINE_ACTIVITY_COUNT &gt; 0 AND :B33 = 1 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( TO_CHAR(PLI.LINE_ACTIVITY_START,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR(PLI.LINE_ACTIVITY_END,  :B12 ) AS &quot;end_time&quot;,  ROUND((PLI.LINE_ACTIVITY_END - PLI.LINE_ACTIVITY_START) * 3600*24) + 1 AS &quot;duration&quot;,  PLI.LINE_ACTIVITY_COUNT AS &quot;count&quot;,  PLI.LINE_IMQ_COUNT AS &quot;imq_count&quot;,	PLI.LINE_WAIT_COUNT AS &quot;wait_count&quot;,	PLI.LINE_CPU_COUNT AS &quot;cpu_count&quot;,  PLI.LINE_OTHER_SQL_COUNT AS &quot;other_sql_count&quot;,	:B40 AS &quot;cpu_cores&quot;,	:B39 AS &quot;hyperthread&quot;),  PLI.ACTIVITY_TOTAL,	PLI.PLAN_ACTIVITY_HISTO) ELSE NULL END) ORDER BY PLI.PLAN_LINE_ID) ) FROM (SELECT AT.MAX_LINE_ACTIVITY_COUNT,  PM.OVERALL_MAX_IO_REQS,	PM.OVERALL_MAX_IO_BYTES,  AT.MAX_LINE_IMQ_COUNT,  AT.MAX_LINE_CPU_COUNT,  AT.MAX_LINE_WAIT_COUNT,  AT.LINE_OTHER_SQL_COUNT,  AT.MAX_LINE_OTHER_SQL_COUNT,  PM.PLAN_LINE_ID,  PM.PARENT_ID,  PM.OPERATION,  PM.OPTIONS,	PM.DEPTH,  PM.POSITION,  PM.INACTIVE,  CASE WHEN PM.OPERATION = 'PX COORDINATOR' AND :B23 = 'Y' AND (PM.PX_SERVER_SET IS NOT NULL OR AH.PX_SERVER_SET IS NOT NULL) THEN 'QC' WHEN PM.PX_SERVER_SET IS NOT NULL THEN TO_CHAR(PM.PX_SERVER_SET) WHEN AH.PX_SERVER_SET IS NOT NULL THEN TO_CHAR(AH.PX_SERVER_SET) WHEN (:B23 = 'N' OR (PM.LAST_CHANGE_TIME IS NULL AND AT.LINE_ACTIVITY_END IS NULL)) THEN NULL ELSE 'QC' END PX_TYPE,  PM.FIRST_CHANGE_TIME,  AT.LINE_ACTIVITY_START,  PM.LAST_CHANGE_TIME,  PM.OVERALL_LAST_CHANGE_TIME,  AT.LINE_ACTIVITY_END,	AT.OVERALL_LINE_ACTIVITY_END,  LEAST(NVL(AT.LINE_ACTIVITY_START,  PM.FIRST_CHANGE_TIME),  NVL(PM.FIRST_CHANGE_TIME,  AT.LINE_ACTIVITY_START)) FIRST_MOVE_TIME,	GREATEST(NVL(AT.LINE_ACTIVITY_END,  PM.LAST_CHANGE_TIME),  NVL(PM.LAST_CHANGE_TIME,  AT.LINE_ACTIVITY_END)) LAST_MOVE_TIME,  GREATEST(NVL(AT.OVERALL_LINE_ACTIVITY_END,  PM.OVERALL_LAST_CHANGE_TIME),	NVL(PM.OVERALL_LAST_CHANGE_TIME,  AT.OVERALL_LINE_ACTIVITY_END)) OVERALL_LAST_MOVE_TIME,  CASE WHEN PM.STARTS IS NOT NULL AND PM.STARTS &gt; 0 THEN 1 ELSE 0 END HAS_EXECUTED,	PM.OBJECT_NAME,  PM.OBJECT_TYPE,  PM.OBJECT_OWNER,  PM.PARTITION_START,  PM.PARTITION_STOP,  PM.CARDINAL
ITY,  PM.BYTES,  PM.COST,  PM.TEMP_SPACE,  PM.TIME,  PM.CPU_COST,  PM.IO_COST,	LO.PERCENT_COMPLETE,  LO.TIME_REMAINING,  PM.STARTS,  PM.DOP,  PM.MAX_STARTS,  PM.OUTPUT_ROWS,	PM.NEED_ROWS,  PM.MAX_OUTPUT_ROWS,  PM.MEM,  PM.MAX_MEM,  PM.MIN_MAX_MEM,  PM.TEMP,  PM.MAX_TEMP,  PM.SPILL_COUNT,  PM.MAX_MAX_TEMP,  PM.READ_REQS,  PM.MAX_READ_REQS,	PM.READ_BYTES,	PM.MAX_READ_BYTES,  PM.WRITE_REQS,  PM.MAX_WRITE_REQS,	PM.WRITE_BYTES,  PM.MAX_WRITE_BYTES,  PM.IO_INTER_BYTES,  PM.IO_BYTES,	PM.MAX_IO_INTER_BYTES,	AT.LINE_ACTIVITY_COUNT,  AT.LINE_IMQ_COUNT,  AT.LINE_WAIT_COUNT,  AT.LINE_CPU_COUNT,  AT.ACTIVITY_TOTAL,  AH.PLAN_ACTIVITY_HISTO,  PM.STAT_GID,  PM.GID_ROWNUM,  PM.STAT1_VALUE,  PM.STAT2_VALUE,  PM.STAT3_VALUE,  PM.STAT4_VALUE,  PM.STAT5_VALUE,  PM.STAT6_VALUE,  PM.STAT7_VALUE,	PM.STAT8_VALUE,  PM.STAT9_VALUE,  PM.STAT10_VALUE FROM (SELECT AT0.*,  MAX(LINE_ACTIVITY_END) OVER() OVERALL_LINE_ACTIVITY_END,  MAX(LINE_ACTIVITY_COUNT) OVER() MAX_LINE_ACTIVITY_COUNT,  MAX(LINE_IMQ_COUNT) OVER() MAX_LINE_IMQ_COUNT,  MAX(LINE_CPU_COUNT) OVER() MAX_LINE_CPU_COUNT,  MAX(LINE_WAIT_COUNT) OVER() MAX_LINE_WAIT_COUNT,  MAX(LINE_OTHER_SQL_COUNT) OVER() MAX_LINE_OTHER_SQL_COUNT FROM (SELECT AD1.PLAN_LINE_ID,  MIN(AD1.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD1.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) LINE_ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) LINE_IMQ_COUNT,  SUM(AD1.WAIT_COUNT) LINE_WAIT_COUNT,  SUM(AD1.OTHER_SQL_COUNT) LINE_OTHER_SQL_COUNT,  SUM(AD1.CPU_COUNT) LINE_CPU_COUNT,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG(XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME) ACTIVITY_TOTAL FROM (SELECT AD0.PLAN_LINE_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  MIN(AD0.ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD0.ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MAX(AD0.DFO_MOST_ACTIVE_IID) DFO_MOST_ACTIVE_IID,  MAX(AD0.DFO_MOST_ACTIVE_SID) DFO_MOST_ACTIVE_SID,  SUM(AD0.DFO_MOST_ACTIVE_COUNT) DFO_MOST_ACTIVE_COUNT FROM ASH_DATA AD0 WHERE AD0.PLAN_LINE_ID IS NOT NULL GROUP BY AD0.PLAN_LINE_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1 GROUP BY AD1.PLAN_LINE_ID) AT0) AT,	(SELECT AD2.PLAN_LINE_ID,  MIN(AD2.PX_SERVER_SET) PX_SERVER_SET,  MIN(AD2.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD2.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD2.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD2.IMQ_COUNT) IMQ_COUNT,  SUM(AD2.WAIT_COUNT) WAIT_COUNT,  SUM(AD2.CPU_COUNT) CPU_COUNT,  SUM(AD2.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  CASE WHEN :B29 = 1 AND SUM(AD2.ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_histogram&quot;,  XMLATTRIBUTES( :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR( :B20 ,	:B12 ) AS &quot;start_time&quot;,  TO_CHAR(:B22 ,  :B12 ) AS &quot;end_time&quot;,  ROUND((:B22 -:B20 ) *3600*24) + 1 AS &quot;duration&quot;),  XMLAGG(XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),	AD2.ACTIVITY_BUCKET) ORDER BY AD2.BUCKET_NUM)) ELSE NULL END PLAN_ACTIVITY_HISTO FROM (SELECT AD1.PLAN_LINE_ID,  AD1.BUCKET_NUM,  MIN(AD1.PX_SERVER_SET) PX_SERVER_SET,  MIN(AD1.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD1.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  MIN(AD1.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD1.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) IMQ_COUNT,  SUM(AD1.WAIT_COUNT) WAIT_COUNT,  SUM(AD1.CPU_COUNT) CPU_COUNT,  SUM(AD1.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG(NVL2(AD1.ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,  AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT),  NULL) ORDER BY AD1.ACTIVITY_TYPE,  AD1.EVENT_NAME) ACTIVITY_BUCKET FROM (SELECT AD0.PLAN_LINE_ID,  AD0.PLAN_ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  MIN(NVL2(AD0.ACTIVITY_START,  AD0.PX_SERVER_SET,  NULL)) PX_SERVER_SET,  MIN(AD0.ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD0.ACTIVITY_END) LINE_ACTIVITY_END,  MIN(AD0.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD0.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT FROM ASH_DATA AD0 GROUP BY AD0.PLAN_LINE_ID,  AD0.PLAN_ACTIVITY_BUCKET_NUM,  AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME) AD1 GROUP BY AD1.PLAN_LINE_ID,	AD1.BUCKET_NUM) AD2 GROUP BY AD2.PLAN_LINE_ID) AH,  (SELECT LO.SQL_PLAN_LINE_ID PLAN_LINE_ID,  DECODE(SUM(LO.TOTALWORK),  0,  NULL,  ROUND(SUM(LO.SOFAR)*100/SUM(LO.TOTALWORK))) PERCENT_COMPLETE,  MAX(LO.TIME_REMAINING) TIME_REMAINING FROM GV$SESSION_LONGOPS LO,  MONITOR_DATA MO WHERE (:B49 = 'Y' OR :B71 = 'DONE (ERROR)') AND LO.SQL_ID = :B9 AND LO.SQL_EXEC_START = :B8 AND LO.SQL_EXEC_ID = :B7 AND LO.INST_ID = MO.INST_ID AND LO.SID = MO.SID GROUP BY LO.SQL_PLAN_LINE_ID) LO,  (SELECT PM0.*,  CASE WHEN PM0.STARTS IS NULL OR PM0.STARTS = 0 OR PM0.OUTPUT_ROWS IS NULL THEN NULL ELSE 1 END NEED_ROWS,  ROW_NUMBER() OVER(PARTITION BY PM0.STAT_GID ORDER BY PM0.PLAN_LINE_ID ) GID_ROWNUM,  MAX(LAST_CHANGE_TIME) OVER() OVERALL_LAST_CHANGE_TIME,  MAX(MAX_IO_REQS) OVER() OVERALL_MAX_IO_REQS,  MAX(MAX_IO_BYTES) OVER() OVERALL_MAX_IO_BYTES FROM (SELECT /*+ leading(mo) use_hash(plm) */ PLM.PLAN_LINE_ID PLAN_LINE_ID,  PLM.PLAN_OPERATION OPERATION,	PLM.PLAN_OPTIONS OPTIONS,  MAX(PLM.PLAN_PARENT_ID) PARENT_ID,  MAX(PLM.PLAN_DEPTH) DEPTH,  MAX(PLM.PLAN_POSITION) POSITION,  MAX(PLM.PLAN_OPERATION_INACTIVE) INACTIVE,  MAX(PLM.PLAN_OBJECT_OWNER) OBJECT_OWNER,  MAX(PLM.PLAN_OBJECT_NAME) OBJECT_NAME,  MAX(PLM.PLAN_OBJECT_TYPE) OBJECT_TYPE,  MAX(PLM.PLAN_COST) COST,  MAX(PLM.PLAN_CARDINALITY) CARDINALITY,  MAX(PLM.PLAN_BYTES) BYTES,  MAX(PLM.PLAN_CPU_COST) CPU_COST,  MAX(PLM.PLAN_IO_COST) IO_COST,  MAX(PLM.PLAN_TEMP_SPACE) TEMP_SPACE,  MAX(PLM.PLAN_TIME) TIME,  MAX(PLM.PLAN_PARTITION_START) PARTITION_START,  MAX(PLM.PLAN_PARTITION_STOP) PARTITION_STOP,  MIN(PLM.FIRST_CHANGE_TIME) FIRST_CHANGE_TIME,	MAX(PLM.LAST_CHANGE_TIME) LAST_CHANGE_TIME,  MIN(PLM.LAST_CHANGE_TIME) MIN_LAST_CHANGE_TIME,  MIN(NVL2(PLM.FIRST_CHANGE_TIME,  MO.PX_SERVER_SET,  NULL)) PX_SERVER_SET,  COUNT(CASE WHEN PLM.PAR IS NOT NULL AND PLM.STARTS IS NOT NULL AND PLM.STARTS &gt; 0 AND PLM.PLAN_LINE_ID != 0 AND PLM.PLAN_OPERATION != 'PX COORDINATOR' THEN 1 ELSE NULL END) DOP,  SUM(PLM.STARTS) STARTS,	MAX(NVL2(PAR,  PLM.STARTS * 10000000000 + PLM.ES,  NULL)) MAX_STARTS,  SUM(PLM.OUTPUT_ROWS) OUTPUT_ROWS,  MAX(NVL2(PAR,  PLM.OUTPUT_ROWS * 10000000000 +PLM.ES,  NULL)) MAX_OUTPUT_ROWS,  SUM(PLM.WORKAREA_MEM) MEM,  SUM(PLM.WORKAREA_MAX_MEM) MAX_MEM,  MIN(NVL2(PAR,  PLM.WORKAREA_MAX_MEM * 10000000000 + PLM.ES,  NULL)) MIN_MAX_MEM,  SUM(PLM.WORKAREA_TEMPSEG) TEMP,  SUM(PLM.WORKAREA_MAX_TEMPSEG) MAX_TEMP,  MAX(NVL2(PAR,  PLM.WORKAREA_MAX_TEMPSEG * 10000000000 + PLM.ES,  NULL)) MAX_MAX_TEMP,  COUNT(PLM.WORKAREA_MAX_TEMPSEG) SPILL_COUNT,  SUM(PLM.PHYSICAL_READ_REQUESTS) READ_REQS,  MAX(NVL2(PAR,  PLM.PHYSICAL_READ_REQUESTS * 10000000000 + PLM.ES,  NULL)) MAX_READ_REQS,  SUM(PLM.PHYSICAL_READ_BYTES) READ_BYTES,  MAX(NVL2(PAR,  PLM.PHYSICAL_READ_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_READ_BYTES,  SUM(PLM.PHYSICAL_WRITE_REQUESTS) WRITE_REQS,  MAX(NVL2(PAR,	PLM.PHYSICAL_WRITE_REQUESTS * 10000000000 + PLM.ES,  NULL)) MAX_WRITE_REQS,  SUM(PLM.PHYSICAL_WRITE_BYTES) WRITE_BYTES,  MAX(NVL2(PAR,	PLM.PHYSICAL_WRITE_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_WRITE_BYTES,  NVL(SUM(PLM.PHYSICAL_READ_BYTES),  0) + NVL(SUM(PLM.PHYSICAL_WRITE_BYTES),  0) IO_BYTES,  SUM(NVL(PLM.PHYSICA
L_READ_REQUESTS,  0) + NVL(PLM.PHYSICAL_WRITE_REQUESTS,  0)) MAX_IO_REQS,  SUM(NVL(PLM.PHYSICAL_READ_BYTES,  0) + NVL(PLM.PHYSICAL_WRITE_BYTES,  0)) MAX_IO_BYTES,  SUM(PLM.IO_INTERCONNECT_BYTES) IO_INTER_BYTES,  MAX(NVL2(PAR,  PLM.IO_INTERCONNECT_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_IO_INTER_BYTES,  MAX(OTHERSTAT_GROUP_ID) STAT_GID,  NVL(DECODE(MAX(OTHERSTAT_1_TYPE),	3,  MAX(OTHERSTAT_1_VALUE),  4,  MAX(OTHERSTAT_1_VALUE),  6,  MIN(OTHERSTAT_1_VALUE),  7,  MIN(OTHERSTAT_1_VALUE),  NULL),  SUM(DECODE(OTHERSTAT_1_TYPE,  1,  OTHERSTAT_1_VALUE,  2,  OTHERSTAT_1_VALUE,  NULL))) STAT1_VALUE,	NVL(MOD((DECODE(MAX(OTHERSTAT_2_TYPE),	3,  MAX(OTHERSTAT_2_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),	4,  MAX(RMAX1 + OTHERSTAT_2_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_2_VALUE),  NULL),  6,  MIN(OTHERSTAT_2_VALUE),  NULL)),	10000000000000000),  SUM(DECODE(OTHERSTAT_2_TYPE,  1,  OTHERSTAT_2_VALUE,  2,  OTHERSTAT_2_VALUE,  NULL))) STAT2_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_3_TYPE),  3,  MAX(OTHERSTAT_3_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_3_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_3_VALUE),  NULL),  6,  MIN(OTHERSTAT_3_VALUE),	NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_3_TYPE,  1,	OTHERSTAT_3_VALUE,  2,	OTHERSTAT_3_VALUE,  NULL))) STAT3_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_4_TYPE),  3,  MAX(OTHERSTAT_4_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_4_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_4_VALUE),  NULL),  6,	MIN(OTHERSTAT_4_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_4_TYPE,  1,  OTHERSTAT_4_VALUE,  2,  OTHERSTAT_4_VALUE,  NULL))) STAT4_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_5_TYPE),  3,  MAX(OTHERSTAT_5_VALUE),	5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_5_VALUE),	7,  MIN(RMAX1 + OTHERSTAT_5_VALUE),  NULL),  6,  MIN(OTHERSTAT_5_VALUE),  NULL)),  10000000000000000),	SUM(DECODE(OTHERSTAT_5_TYPE,  1,  OTHERSTAT_5_VALUE,  2,  OTHERSTAT_5_VALUE,  NULL))) STAT5_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_6_TYPE),  3,	MAX(OTHERSTAT_6_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,	MAX(RMAX1 + OTHERSTAT_6_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_6_VALUE),  NULL),  6,  MIN(OTHERSTAT_6_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_6_TYPE,  1,  OTHERSTAT_6_VALUE,  2,  OTHERSTAT_6_VALUE,  NULL))) STAT6_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_7_TYPE),  3,  MAX(OTHERSTAT_7_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_7_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_7_VALUE),  NULL),  6,  MIN(OTHERSTAT_7_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_7_TYPE,	1,  OTHERSTAT_7_VALUE,	2,  OTHERSTAT_7_VALUE,	NULL))) STAT7_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_8_TYPE),  3,  MAX(OTHERSTAT_8_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_8_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_8_VALUE),	NULL),	6,  MIN(OTHERSTAT_8_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_8_TYPE,  1,  OTHERSTAT_8_VALUE,  2,  OTHERSTAT_8_VALUE,  NULL))) STAT8_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_9_TYPE),  3,  MAX(OTHERSTAT_9_VALUE),  5,	DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_9_VALUE),  7,	MIN(RMAX1 + OTHERSTAT_9_VALUE),  NULL),  6,  MIN(OTHERSTAT_9_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_9_TYPE,  1,  OTHERSTAT_9_VALUE,  2,  OTHERSTAT_9_VALUE,  NULL))) STAT9_VALUE,	NVL(MOD((DECODE(MAX(OTHERSTAT_10_TYPE),  3,  MAX(OTHERSTAT_10_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_10_VALUE),	7,  MIN(RMAX1 + OTHERSTAT_10_VALUE),  NULL),  6,  MIN(OTHERSTAT_10_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_10_TYPE,  1,  OTHERSTAT_10_VALUE,  2,  OTHERSTAT_10_VALUE,  NULL))) STAT10_VALUE FROM (SELECT A.*,  OTHERSTAT_1_VALUE * 10000000000000000 RMAX1,  A.INST_ID * 1000000 + A.SID ES,  DECODE(A.PROCESS_NAME,  'ora',  NULL,  1) PAR FROM GV$ALL_SQL_PLAN_MONITOR A) PLM,  MONITOR_DATA MO WHERE PLM.SQL_ID = :B9 AND PLM.SQL_EXEC_START = :B8 AND PLM.SQL_EXEC_ID = :B7 AND PLM.INST_ID = MO.INST_ID AND PLM.INST_ID BETWEEN :B11 AND :B10 AND PLM.KEY = MO.KEY GROUP BY PLM.PLAN_LINE_ID,	PLM.PLAN_OPERATION,  PLM.PLAN_OPTIONS) PM0) PM WHERE AH.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND AT.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND LO.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND (:B21 IS NULL OR PM.PLAN_LINE_ID = :B21 )) PLI) ELSE NULL END,	CASE WHEN :B42 = 1 THEN DBMS_SQLTUNE.BUILD_STASH_XML( SESSION_ID=&gt;:B19 ,  SESSION_SERIAL=&gt;:B18 ,	SESSION_INST_ID=&gt;:B17 ,  PX_MODE=&gt;'yes',	START_TIME=&gt;:B20 ,  END_TIME=&gt;:B22 ,  MISSING_SECONDS=&gt; :B41 ,  INSTANCE_LOW_FILTER=&gt;:B11 ,  INSTANCE_HIGH_FILTER=&gt;:B10 ,  BUCKET_MAX_COUNT=&gt;NULL,  BUCKET_INTERVAL=&gt;:B26 ,  REPORT_LEVEL=&gt;'typical',  CPU_CORES=&gt;:B40 ,  IS_HYPER=&gt;:B39 ) ELSE NULL END),  (CASE WHEN :B38 = 1 THEN (SELECT XMLELEMENT( &quot;skewed_sessions&quot;,  XMLATTRIBUTES( DECODE(MIN(INST_ID),  NULL,  :B17 ,  MIN(INST_ID)) AS &quot;min_iid&quot;,	DECODE(MAX(INST_ID),  NULL,  :B17 ,  MAX(INST_ID)) AS
&quot;max_iid&quot;),  XMLAGG( XMLELEMENT( &quot;s&quot;,  XMLATTRIBUTES( INST_ID AS &quot;i&quot;),  SESSION_ID) ORDER BY INST_ID,  SESSION_ID)) FROM (SELECT SESS.* FROM (SELECT DECODE(AD.DFO_MOST_ACTIVE_IID,  :B17 ,  NULL,  AD.DFO_MOST_ACTIVE_IID) INST_ID,  AD.DFO_MOST_ACTIVE_SID SESSION_ID FROM ASH_DATA AD WHERE AD.DFO_MOST_ACTIVE_COUNT IS NOT NULL GROUP BY AD.DFO_MOST_ACTIVE_IID,  AD.DFO_MOST_ACTIVE_SID ORDER BY MAX(AD.DFO_MOST_ACTIVE_COUNT) DESC) SESS WHERE ROWNUM &lt;= 100)) ELSE NULL END),  (CASE WHEN :B37 = 1 THEN (SELECT XMLELEMENT( &quot;report_repository_summary&quot;,  CASE WHEN MA.MAX_DBOP_NAME IS NOT NULL THEN XMLELEMENT( &quot;dbop&quot;,  XMLATTRIBUTES('F' AS &quot;detail&quot;,  MA.MAX_DBOP_NAME AS &quot;dbop_name&quot;,  TO_CHAR(MA.MIN_FIRST_REFRESH_TIME,  :B12 ) AS &quot;dbop_exec_start&quot;,  MA.MAX_DBOP_EXEC_ID AS &quot;dbop_exec_id&quot;),  XMLFOREST( MA.MAX_STATUS AS &quot;status&quot;,  TO_CHAR(NVL(MA.MAX_SQL_EXEC_START,  MA.MIN_FIRST_REFRESH_TIME),  :B12 )AS
&quot;first_refresh_time&quot;,  TO_CHAR(MA.MAX_LAST_REFRESH_TIME,  :B12 )AS &quot;last_refresh_time&quot;,  MA.SUM_REFRESH_COUNT AS &quot;refresh_count&quot;,  MA.MAX_INST_ID AS &quot;inst_id&quot;,  MA.MAX_SESSION_ID AS &quot;session_id&quot;,  MA.MAX_SESSION_SERIAL AS &quot;session_serial&quot;,  MA.MAX_USERID AS &quot;user_id&quot;,  MA.MAX_USERNAME AS &quot;user&quot;,  MA.MAX_CON_ID AS &quot;con_id&quot;,	MA.MAX_CON_NAME AS &quot;con_name&quot;,  MA.MAX_MODULE AS &quot;module&quot;,	MA.MAX_ACTION AS &quot;action&quot;,  MA.MAX_SERVICE_NAME AS &quot;service&quot;,  MA.MAX_CLIENT_ID AS &quot;client_id&quot;,  MA.MAX_CLIENT_INFO AS &quot;client_info&quot;,  MA.MAX_PROGRAM AS &quot;program&quot;,  MA.MAX_PL_ENTRY_OID AS &quot;plsql_entry_object_id&quot;,  MA.MAX_PL_ENTRY_PROGID AS &quot;plsql_entry_subprogram_id&quot;,  MA.MAX_PL_OID AS &quot;plsql_object_id&quot;,  MA.MAX_PL_PROGID AS &quot;plsql_subprogram_id&quot;,  MA.MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,	MA.MAX_PX_DOP AS &quot;dop&quot;,  MA.MAX_PX_DOP_INSTANCES AS &quot;instances&quot;),  CASE WHEN MA.MAX_ERROR_NUMBER IS NULL THEN NULL ELSE XMLELEMENT( &quot;error&quot;,  XMLATTRIBUTES(MA.MAX_ERROR_NUMBER AS &quot;number&quot;,  MA.MAX_ERROR_FACILITY AS &quot;facility&quot;),  MA.MAX_ERROR_MESSAGE) END,  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('duration' AS &quot;name&quot;),  GREATEST(ROUND((MA.MAX_LAST_REFRESH_TIME- NVL(MA.MAX_SQL_EXEC_START,  MA.MIN_FIRST_REFRESH_TIME))*86400),  LEAST(MA.SUM_ELAPSED_TIME/1000000,	1),  CEIL(MA.MAX_QUEUING_TIME/1000000))),  DECODE(MA.SUM_ELAPSED_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MA.SUM_ELAPSED_TIME)),  DECODE(MA.MAX_QUEUING_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MA.MAX_QUEUING_TIME)),  DECODE(MA.SUM_CPU_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MA.SUM_CPU_TIME)),	DECODE(MA.SUM_USER_IO_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MA.SUM_USER_IO_WAIT_TIME)),  DECODE(MA.SUM_APPLICATION_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MA.SUM_APPLICATION_WAIT_TIME)),	DECODE(MA.SUM_CONCURRENCY_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MA.SUM_CONCURRENCY_WAIT_TIME)),  DECODE(MA.SUM_CLUSTER_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MA.SUM_CLUSTER_WAIT_TIME)),	DECODE(MA.SUM_PLSQL_EXEC_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MA.SUM_PLSQL_EXEC_TIME)),  DECODE(MA.SUM_JAVA_EXEC_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MA.SUM_JAVA_EXEC_TIME)),  DECODE(MA.SUM_OTHER_WAIT_TIME,  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  MA.SUM_OTHER_WAIT_TIME)),  DECODE(MA.SUM_FETCHES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MA.SUM_FETCHES)),  DECODE(MA.SUM_BUFFER_GETS,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MA.SUM_BUFFER_GETS)),  DECODE(MA.SUM_READ_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MA.SUM_READ_REQS)),	DECODE(MA.SUM_READ_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MA.SUM_READ_BYTES)),  DECODE(MA.SUM_WRITE_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MA.SUM_WRITE_REQS)),  DECODE(MA.SUM_WRITE_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MA.SUM_WRITE_BYTES)),  CASE WHEN MA.SUM_IO_INTER_BYTES IS NULL OR MA.SUM_IO_INTER_BYTES = MA.SUM_IO_BYTES OR MA.SUM_IO_BYTES = 0 OR NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MA.SUM_IO_BYTES / DECODE(MA.SUM_IO_INTER_BYTES,  0,  1,  MA.SUM_IO_INTER_BYTES),  2)) END,	CASE WHEN NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 OR MA.SUM_IO_BYTES = 0 OR MA.SUM_IO_UNC_BYTES = MA.SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100 * (GREATEST(MA.SUM_IO_UNC_BYTES,  MA.SUM_IO_ELIG_BYTES) - MA.SUM_IO_RET_BYTES) / MA.SUM_IO_ELIG_BYTES,  2))) END) ) ELSE XMLELEMENT( &quot;sql&quot;,  XMLATTRIBUTES( MA.MAX_SQL_ID AS &quot;sql_id&quot;,  TO_CHAR(MA.MAX_SQL_EXEC_START,  :B12 ) AS &quot;sql_exec_start&quot;,	MA.MAX_SQL_EXEC_ID AS &quot;sql_exec_id&quot;),  XMLFOREST(MA.MAX_STATUS AS &quot;status&quot;,  SUBSTR(MA.SQLMON_TEXT,  1,  100) AS &quot;sql_text&quot;,  TO_CHAR(MA.MIN_FIRST_REFRESH_TIME,	:B12 ) AS &quot;first_refresh_time&quot;,  TO_CHAR(MA.MAX_LAST_REFRESH_TIME,  :B12 ) AS &quot;last_refresh_time&quot;,	MA.SUM_REFRESH_COUNT AS &quot;refresh_count&quot;,  MA.MAX_INST_ID AS &quot;inst_id&quot;,  MA.MAX_SESSION_ID AS &quot;session_id&quot;,  MA.MAX_SESSION_SERIAL AS &quot;session_serial&quot;,	MA.MAX_USERID AS &quot;user_id&quot;,  MA.MAX_USERNAME AS &quot;user&quot;,  MA.MAX_CON_ID AS &quot;con_id&quot;,  MA.MAX_CON_NAME AS &quot;con_name&quot;,  MA.MAX_MODULE AS &quot;module&quot;,  MA.MAX_ACTION AS &quot;action&quot;,  MA.MAX_SERVICE_NAME AS &quot;service&quot;,  MA.MAX_CLIENT_ID AS &quot;client_id&quot;,  MA.MAX_CLIENT_INFO AS &quot;client_info&quot;,  MA.MAX_PROGRAM AS &quot;program&quot;,  MA.MAX_PLAN_HASH_VALUE AS &quot;plan_hash&quot;,  MA.MAX_PL_ENTRY_OID AS &quot;plsql_entry_object_id&quot;,  MA.MAX_PL_ENTRY_PROGID AS &quot;plsql_entry_subprogram_id&quot;,  MA.MAX_PL_OID AS &quot;plsql_object_id&quot;,	MA.MAX_PL_PROGID AS &quot;plsql_subprogram_id&quot;,  MA.MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,  MA.MAX_PX_DOP AS &quot;dop&quot;,	MA.MAX_PX_DOP_INSTANCES AS &quot;instances&quot;,  MA.SUM_SERVERS_REQUESTED AS &quot;px_servers_requested&quot;,  MA.SUM_SERVERS_ALLOCATED AS &quot;px_servers_allocated&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('duration' AS &quot;name&quot;),	GREATEST(ROUND((MA.MAX_LAST_REFRESH_TIME- MA.MAX_SQL_EXEC_START) * 86400),  LEAST(MA.SUM_ELAPSED_TIME/1000000,	1),  CEIL(MA.MAX_QUEUING_TIME/1000000))),  DECODE(MA.SUM_ELAPSED_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MA.SUM_ELAPSED_TIME)),  DECODE(MA.MAX_QUEUING_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MA.MAX_QUEUING_TIME)),  DECODE(MA.SUM_CPU_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MA.SUM_CPU_TIME)),	DECODE(MA.SUM_USER_IO_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MA.SUM_USER_IO_WAIT_TIME)),  DECODE(MA.SUM_APPLICATION_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MA.SUM_APPLICATION_WAIT_TIME)),	DECODE(MA.SUM_CONCURRENCY_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MA.SUM_CONCURRENCY_WAIT_TIME)),  DECODE(MA.SUM_CLUSTER_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MA.SUM_CLUSTER_WAIT_TIME)),	DECODE(MA.SUM_PLSQL_EXEC_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MA.SUM_PLSQL_EXEC_TIME)),  DECODE(MA.SUM_JAVA_EXEC_TIME
,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MA.SUM_JAVA_EXEC_TIME)),  DECODE(MA.SUM_OTHER_WAIT_TIME,  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  MA.SUM_OTHER_WAIT_TIME)),  DECODE(MA.SUM_FETCHES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MA.SUM_FETCHES)),  DECODE(MA.SUM_BUFFER_GETS,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MA.SUM_BUFFER_GETS)),  DECODE(MA.SUM_READ_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MA.SUM_READ_REQS)),	DECODE(MA.SUM_READ_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MA.SUM_READ_BYTES)),  DECODE(MA.SUM_WRITE_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MA.SUM_WRITE_REQS)),  DECODE(MA.SUM_WRITE_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MA.SUM_WRITE_BYTES)),  DECODE(MA.SUM_IO_UNC_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MA.SUM_IO_UNC_BYTES)),  DECODE(MA.SUM_IO_ELIG_BYTES,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MA.SUM_IO_ELIG_BYTES)),  DECODE(MA.SUM_IO_RET_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  MA.SUM_IO_RET_BYTES)),  CASE WHEN MA.SUM_IO_INTER_BYTES IS NULL OR MA.SUM_IO_INTER_BYTES = MA.SUM_IO_BYTES OR MA.SUM_IO_BYTES = 0 OR NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MA.SUM_IO_BYTES / DECODE(MA.SUM_IO_INTER_BYTES,	0,  1,	MA.SUM_IO_INTER_BYTES),  2)) END,  CASE WHEN NVL(MA.SUM_IO_ELIG_BYTES,	0) = 0 OR MA.SUM_IO_BYTES = 0 OR MA.SUM_IO_UNC_BYTES = MA.SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100 * (GREATEST(MA.SUM_IO_UNC_BYTES,  MA.SUM_IO_ELIG_BYTES) - MA.SUM_IO_RET_BYTES) / MA.SUM_IO_ELIG_BYTES,	2))) END) ) END) FROM MONITOR_AGG MA) ELSE NULL END) FROM (SELECT CASE WHEN V1.XPLAN_XML IS NULL OR V1.XPLAN_XML.EXISTSNODE('/error') &gt; 0 THEN NULL ELSE V1.XPLAN_XML END XPLAN_XML FROM (SELECT CASE WHEN :B36 = 1 THEN DBMS_XPLAN.BUILD_PLAN_XML( TABLE_NAME=&gt;'gv$all_sql_plan',  PLAN_TAG=&gt;'plan',	FILTER_PREDS=&gt;:B35 ,  FORMAT=&gt;'-PROJECTION +ALIAS +ADAPTIVE') ELSE NULL END XPLAN_XML FROM DUAL) V1) CONST_VIEW</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="a4qy0pkfjru0y"></a>a4qy0pkfjru0y</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '369';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="acmvv4fhdc9zh"></a>acmvv4fhdc9zh</td><td class='awrc'><pre_sqltext class="awr">select obj#, type#, ctime, mtime, stime,  status,	dataobj#,  flags,  oid$,  spare1,  spare2,  spare3,  signature,  spare7,  spare8,  spare9,  nvl(dflcollid,  16382),  creappid,	creverid,  modappid,  modverid,  crepatchid,  modpatchid from obj$ where owner#=:1 and name=:2 and namespace=:3 and remoteowner is null and linkname is null and subname is null</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="asqv36zpxvan4"></a>asqv36zpxvan4</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '173';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="atwuyuvqkf27w"></a>atwuyuvqkf27w</td><td class='awrc'><pre_sqltext class="awr">SELECT /*+ OPT_PARAM('_fix_control' '16391176:1') */ GROUP_TYPE,  BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END,  SUM(TM_CPU_FIRST_BUCKET_VALUE) TM_CPU_FIRST_BUCKET_VALUE,	SUM(TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE,	SUM(TM_DB_FIRST_BUCKET_VALUE) TM_DB_FIRST_BUCKET_VALUE,  SUM(TM_DB_MIDDLE_BUCKETS_VALUE) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(TM_DB_LAST_BUCKET_VALUE) TM_DB_LAST_BUCKET_VALUE,  SUM(RREQS_FIRST_BUCKET_VALUE) RREQS_FIRST_BUCKET_VALUE,  SUM(RREQS_MIDDLE_BUCKETS_VALUE) RREQS_MIDDLE_BUCKETS_VALUE,  SUM(RREQS_LAST_BUCKET_VALUE) RREQS_LAST_BUCKET_VALUE,  SUM(WREQS_FIRST_BUCKET_VALUE) WREQS_FIRST_BUCKET_VALUE,  SUM(WREQS_MIDDLE_BUCKETS_VALUE) WREQS_MIDDLE_BUCKETS_VALUE,	SUM(WREQS_LAST_BUCKET_VALUE) WREQS_LAST_BUCKET_VALUE,  SUM(RBYTES_FIRST_BUCKET_VALUE) RBYTES_FIRST_BUCKET_VALUE,  SUM(RBYTES_MIDDLE_BUCKETS_VALUE) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(RBYTES_LAST_BUCKET_VALUE) RBYTES_LAST_BUCKET_VALUE,  SUM(WBYTES_FIRST_BUCKET_VALUE) WBYTES_FIRST_BUCKET_VALUE,  SUM(WBYTES_MIDDLE_BUCKETS_VALUE) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(WBYTES_LAST_BUCKET_VALUE) WBYTES_LAST_BUCKET_VALUE,  SUM(IBYTES_FIRST_BUCKET_VALUE) IBYTES_FIRST_BUCKET_VALUE,	SUM(IBYTES_MIDDLE_BUCKETS_VALUE) IBYTES_MIDDLE_BUCKETS_VALUE,  SUM(IBYTES_LAST_BUCKET_VALUE) IBYTES_LAST_BUCKET_VALUE,	SUM(CRBYTES_FIRST_BUCKET_VALUE) CRBYTES_FIRST_BUCKET_VALUE,  SUM(CRBYTES_MIDDLE_BUCKETS_VALUE) CRBYTES_MIDDLE_BUCKETS_VALUE,  SUM(CRBYTES_LAST_BUCKET_VALUE) CRBYTES_LAST_BUCKET_VALUE,  SUM(PGA_ALLOC_FIRST_BUCKET_VALUE) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(PGA_ALLOC_MIDDLE_BUCKETS_VALUE) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(PGA_ALLOC_LAST_BUCKET_VALUE) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(TMP_ALLOC_FIRST_BUCKET_VALUE) TMP_ALLOC_FIRST_BUCKET_VALUE,  SUM(TMP_ALLOC_MIDDLE_BUCKETS_VALUE) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(TMP_ALLOC_LAST_BUCKET_VALUE) TMP_ALLOC_LAST_BUCKET_VALUE FROM ( SELECT GROUP_TYPE,  BUCKET_START,  TM_BUCKET_START,  TM_BUCKET_END,  BUCKET_END,  TM_GROUP_TYPE,  SUM(GVTF.TM_CPU_FIRST_BUCKET_VALUE) TM_CPU_FIRST_BUCKET_VALUE,  SUM(GVTF.TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE,  SUM(GVTF.TM_DB_FIRST_BUCKET_VALUE) TM_DB_FIRST_BUCKET_VALUE,  SUM(GVTF.TM_DB_MIDDLE_BUCKETS_VALUE) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TM_DB_LAST_BUCKET_VALUE) TM_DB_LAST_BUCKET_VALUE,	SUM(GVTF.RREQS_FIRST_BUCKET_VALUE) RREQS_FIRST_BUCKET_VALUE,  SUM(GVTF.RREQS_MIDDLE_BUCKETS_VALUE) RREQS_MIDDLE_BUCKETS_VALUE,	SUM(GVTF.RREQS_LAST_BUCKET_VALUE) RREQS_LAST_BUCKET_VALUE,  SUM(GVTF.WREQS_FIRST_BUCKET_VALUE) WREQS_FIRST_BUCKET_VALUE,  SUM(GVTF.WREQS_MIDDLE_BUCKETS_VALUE) WREQS_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.WREQS_LAST_BUCKET_VALUE) WREQS_LAST_BUCKET_VALUE,	SUM(GVTF.RBYTES_FIRST_BUCKET_VALUE) RBYTES_FIRST_BUCKET_VALUE,	SUM(GVTF.RBYTES_MIDDLE_BUCKETS_VALUE) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.RBYTES_LAST_BUCKET_VALUE) RBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.WBYTES_FIRST_BUCKET_VALUE) WBYTES_FIRST_BUCKET_VALUE,  SUM(GVTF.WBYTES_MIDDLE_BUCKETS_VALUE) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.WBYTES_LAST_BUCKET_VALUE) WBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.IBYTES_FIRST_BUCKET_VALUE) IBYTES_FIRST_BUCKET_VALUE,  SUM(GVTF.IBYTES_MIDDLE_BUCKETS_VALUE) IBYTES_MIDDLE_BUCKETS_VALUE,	SUM(GVTF.IBYTES_LAST_BUCKET_VALUE) IBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.CRBYTES_FIRST_BUCKET_VALUE) CRBYTES_FIRST_BUCKET_VALUE,	SUM(GVTF.CRBYTES_MIDDLE_BUCKETS_VALUE) CRBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.CRBYTES_LAST_BUCKET_VALUE) CRBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.PGA_ALLOC_FIRST_BUCKET_VALUE) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(GVTF.PGA_ALLOC_MIDDLE_BUCKETS_VALUE) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.PGA_ALLOC_LAST_BUCKET_VALUE) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(GVTF.TMP_ALLOC_FIRST_BUCKET_VALUE) TMP_ALLOC_FIRST_BUCKET_VALUE,	SUM(GVTF.TMP_ALLOC_MIDDLE_BUCKETS_VALUE) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TMP_ALLOC_LAST_BUCKET_VALUE) TMP_ALLOC_LAST_BUCKET_VALUE FROM TABLE(SYS.GV$(CURSOR( SELECT INST_ID,	GROUP_TYPE,  BUCKET_START,  TM_BUCKET_START,  TM_BUCKET_END,  BUCKET_END,  TM_GROUP_TYPE,  SUM(TM_DELTA_CPU_TIME * TM_FIRST_BUCKET_RATIO) TM_CPU_FIRST_BUCKET_VALUE,  SUM(TM_DELTA_CPU_TIME * TM_MIDDLE_BUCKETS_RATIO) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(TM_DELTA_CPU_TIME * TM_LAST_BUCKET_RATIO) TM_CPU_LAST_BUCKET_VALUE,  SUM(TM_DELTA_DB_TIME * TM_FIRST_BUCKET_RATIO) TM_DB_FIRST_BUCKET_VALUE,  SUM(TM_DELTA_DB_TIME * TM_MIDDLE_BUCKETS_RATIO) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(TM_DELTA_DB_TIME * TM_LAST_BUCKET_RATIO) TM_DB_LAST_BUCKET_VALUE,  SUM(DELTA_READ_REQUESTS * FIRST_BUCKET_RATIO) RREQS_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_REQUESTS * MIDDLE_BUCKETS_RATIO) RREQS_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_REQUESTS * LAST_BUCKET_RATIO) RREQS_LAST_BUCKET_VALUE,	SUM(DELTA_WRITE_REQUESTS * FIRST_BUCKET_RATIO) WREQS_FIRST_BUCKET_VALUE,  SUM(DELTA_WRITE_REQUESTS * MIDDLE_BUCKETS_RATIO) WREQS_MIDDLE_BUCKETS_VALUE,	SUM(DELTA_WRITE_REQUESTS * LAST_BUCKET_RATIO) WREQS_LAST_BUCKET_VALUE,	SUM(DELTA_READ_BYTES * FIRST_BUCKET_RATIO) RBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_BYTES * MIDDLE_BUCKETS_RATIO) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_BYTES * LAST_BUCKET_RATIO) RBYTES_LAST_BUCKET_VALUE,  SUM(DELTA_WRITE_BYTES * FIRST_BUCKET_RATIO) WBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_WRITE_BYTES * MIDDLE_BUCKETS_RATIO) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_WRITE_BYTES * LAST_BUCKET_RATIO) WBYTES_LAST_BUCKET_VALUE,  SUM(DELTA_INTERCONNECT_BYTES * FIRST_BUCKET_RATIO) IBYTES_FIRST_BUCKET_VALUE,	SUM(DELTA_INTERCONNECT_BYTES * MIDDLE_BUCKETS_RATIO) IBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_INTERCONNECT_BYTES * LAST_BUCKET_RATIO) IBYTES_LAST_BUCKET_VALUE,	SUM(DELTA_READ_MEM_BYTES * FIRST_BUCKET_RATIO) CRBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_MEM_BYTES * MIDDLE_BUCKETS_RATIO) CRBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_MEM_BYTES * LAST_BUCKET_RATIO) CRBYTES_LAST_BUCKET_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * FIRST_BUCKET_RATIO) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * MIDDLE_BUCKETS_RATIO) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * LAST_BUCKET_RATIO) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * FIRST_BUCKET_RATIO) TMP_ALLOC_FIRST_BUCKET_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * MIDDLE_BUCKETS_RATIO) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * LAST_BUCKET_RATIO) TMP_ALLOC_LAST_BUCKET_VALUE FROM ( SELECT USERENV('INSTANCE') INST_ID,  ROW_ID,  SID,	SAMPLE_TIME,  CASE WHEN BUCKET_END IS NULL OR BUCKET_START IS NULL THEN NULL WHEN BUCKET_START = TM_BUCKET_START AND BUCKET_START = BUCKET_END THEN 'CO' WHEN BUCKET_START = TM_BUCKET_START THEN 'CM' WHEN BUCKET_START = BUCKET_END THEN 'SO' ELSE 'SM' END GROUP_TYPE,  CASE WHEN TM_BUCKET_START IS NULL OR BUCKET_END IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL WHEN TM_BUCKET_START = BUCKET_END THEN 'O' ELSE 'M' END TM_GROUP_TYPE,  START_SEG,  BUCKET_START,  BUCKET_START_OFFSET,  TM_START_SEG,  CASE WHEN TM_BUCKET_START IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL ELSE TM_BUCKET_START END TM_BUCKET_START,  CASE WHEN TM_BUCKET_START IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL ELSE BUCKET_END END TM_BUCKET_END,	TM_BUCKET_START_OFFSET,  LENGTH_SEG,  TM_LENGTH_SEG,  END_SEG,	BUCKET_END,  BUCKET_END_OFFSET,  CASE WHEN BUCKET_START != BUCKET_END THEN (:B9 - BUCKET_START_OFFSET) / LENGTH_SEG ELSE 1 END FIRST_BUCKET_RATIO,  CASE WHEN BUCKET_END &gt;= BUCKET_START + 2 THEN :B9 / LENGTH_SEG ELSE NULL END MIDDLE_BUCKETS_RATIO,  CASE WHEN BUCKET_START != BUCKET_END THEN BUCKET_END_OFFSET / LENGTH_SEG ELSE NULL END LAST_BUCKET_RATIO,  CASE WHEN TM_BUCKET_START != BUCKET_END THEN (:B9 - TM_BUCKET_START_OFFSET) / TM_LENGTH_SEG ELSE 1 END TM_FIRST_BUCKET_RATIO,  CASE WHEN BUCKET_END &gt;= TM_BUCKE
T_START + 2 THEN :B9 / TM_LENGTH_SEG ELSE NULL END TM_MIDDLE_BUCKETS_RATIO,  CASE WHEN TM_BUCKET_START != BUCKET_END THEN BUCKET_END_OFFSET / TM_LENGTH_SEG ELSE NULL END TM_LAST_BUCKET_RATIO,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,	DELTA_READ_IO_REQUESTS DELTA_READ_REQUESTS,  DELTA_WRITE_IO_REQUESTS DELTA_WRITE_REQUESTS,  DELTA_READ_IO_BYTES DELTA_READ_BYTES,  DELTA_WRITE_IO_BYTES DELTA_WRITE_BYTES,  DELTA_INTERCONNECT_IO_BYTES DELTA_INTERCONNECT_BYTES,  DELTA_READ_MEM_BYTES DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,	SAMPLE_TIME,  START_SEG,  TRUNC(START_SEG / :B9 ) BUCKET_START,  MOD(START_SEG,  :B9 ) BUCKET_START_OFFSET,  TM_START_SEG,  TRUNC(TM_START_SEG/:B9 ) TM_BUCKET_START,  MOD(TM_START_SEG,  :B9 ) TM_BUCKET_START_OFFSET,  TRUNC(END_SEG/:B9 ) BUCKET_END,  MOD(END_SEG,	:B9 ) BUCKET_END_OFFSET,  END_SEG,  LENGTH_SEG,  TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,	DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,	DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,	SID,  SAMPLE_TIME,  TIME_INTERVAL,  CASE WHEN START_SEG &lt; 0 THEN 0 ELSE START_SEG END START_SEG,  CASE WHEN TM_START_SEG &lt; 0 THEN 0 ELSE TM_START_SEG END TM_START_SEG,  CASE WHEN END_SEG &gt; TIME_INTERVAL THEN TIME_INTERVAL ELSE END_SEG END END_SEG,  (LENGTH_SEG - (CASE WHEN START_SEG &lt; 0 THEN -START_SEG ELSE 0 END + CASE WHEN END_SEG &gt; TIME_INTERVAL THEN END_SEG - TIME_INTERVAL ELSE 0 END)) LENGTH_SEG,  (TM_LENGTH_SEG - (CASE WHEN TM_START_SEG &lt; 0 THEN -TM_START_SEG ELSE 0 END + CASE WHEN END_SEG &gt; TIME_INTERVAL THEN END_SEG - TIME_INTERVAL ELSE 0 END)) TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,	TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,	PGA_ALLOCATED,	TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,  SAMPLE_TIME,  TIME_INTERVAL,  LENGTH_SEG,  TM_LENGTH_SEG,  END_SEG - TM_LENGTH_SEG TM_START_SEG,  END_SEG - LENGTH_SEG START_SEG,  END_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,	DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,  SAMPLE_TIME,  EXTRACT(SECOND FROM REL_SAMPLE_TIME_INT) + EXTRACT(MINUTE FROM REL_SAMPLE_TIME_INT)*60 + EXTRACT(HOUR FROM REL_SAMPLE_TIME_INT)*3600 + EXTRACT(DAY FROM REL_SAMPLE_TIME_INT)*3600*24 END_SEG,	TIME_INTERVAL,	DELTA_TIME/1000000 LENGTH_SEG,	TM_DELTA_TIME/1000000 TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,	DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROWNUM ROW_ID,  SESSION_ID SID,  CAST(FROM_TZ(SAMPLE_TIME,	DBTIMEZONE) AS DATE) SAMPLE_DATE,  SAMPLE_TIME,  (SAMPLE_TIME - CAST(:B8 AS TIMESTAMP)) REL_SAMPLE_TIME_INT,  TRUNC((:B7 - :B8 ) * 3600 * 24) TIME_INTERVAL,  :B8 AS BND_START_INTERVAL ,  :B7 AS BND_END_INTERVAL ,  TM_DELTA_TIME,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,	DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ASH0.* FROM V$ACTIVE_SESSION_HISTORY ASH0 WHERE SAMPLE_TIME BETWEEN :B6 AND :B5 AND ( (SESSION_ID = :B2 AND SESSION_SERIAL# = :B1 AND USERENV('INSTANCE') = :B3 ) OR (:B4 = 'yes' AND QC_INSTANCE_ID = :B3 AND QC_SESSION_ID = :B2 AND QC_SESSION_SERIAL# = :B1 ))) ) ASH1 WHERE SAMPLE_DATE &gt;= BND_START_INTERVAL AND SAMPLE_DATE &lt;= BND_END_INTERVAL + 120/3600/24 ) ) WHERE START_SEG &lt;= TIME_INTERVAL ) WHERE (LENGTH_SEG IS NOT NULL AND LENGTH_SEG &gt; 0) OR (TM_LENGTH_SEG IS NOT NULL AND TM_LENGTH_SEG &gt; 0)) ) GROUP BY INST_ID,  GROUP_TYPE,  BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END))) GVTF WHERE INST_ID &gt;= :B11 AND INST_ID &lt;= :B10 GROUP BY GROUP_TYPE,	BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END ) GROUP BY GROUPING SETS ( (GROUP_TYPE,  BUCKET_START,  BUCKET_END),  (TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END) )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="axz2uh61fq467"></a>axz2uh61fq467</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '167';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="b2a4zdu00qd3v"></a>b2a4zdu00qd3v</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '249';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="b44btzb64d14v"></a>b44btzb64d14v</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '464';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="bch1n63zxk221"></a>bch1n63zxk221</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '475';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bhdvtsvjhgvrh"></a>bhdvtsvjhgvrh</td><td class='awrnc'><pre_sqltext class="awr">SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="bp4mjh3dc1y4y"></a>bp4mjh3dc1y4y</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '15';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="cnvn60d4ys1ym"></a>cnvn60d4ys1ym</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '462';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="cytuv95rat5h1"></a>cytuv95rat5h1</td><td class='awrc'><pre_sqltext class="awr">LOCK TABLE &quot;CF1&quot; IN EXCLUSIVE MODE  NOWAIT </pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="d96u6hzrz93x5"></a>d96u6hzrz93x5</td><td class='awrnc'><pre_sqltext class="awr">select con_id  from v$containers    where open_mode in ('READ WRITE',  'READ ONLY') </pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="dgcrydsuha4r3"></a>dgcrydsuha4r3</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '472';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="dk7wndm4trmxm"></a>dk7wndm4trmxm</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '262';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
Current Database
~~~~~~~~~~~~~~~~
DB Id	       DB Name	      Container Name
v_do_update BOOLEAN := FALSE;
-------------- -------------- --------------
 3889879926	P60SDB	       p60sdb


v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="dnznjspycqrhh"></a>dnznjspycqrhh</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '174';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="dpgskpjbnxu8n"></a>dpgskpjbnxu8n</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '32';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;



	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="dr1s7n6r0tysn"></a>dr1s7n6r0tysn</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '81';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();

v_now := v_begin_time ;

v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f1g58g2a3cyvm"></a>f1g58g2a3cyvm</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '28';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="f4pt6jq32984z"></a>f4pt6jq32984z</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '166';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN


	v_select_only_workload := TRUE;

END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;


Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f69ubn526tz3u"></a>f69ubn526tz3u</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '385';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="f737cjs9htn1t"></a>f737cjs9htn1t</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '444';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f7xnvp44nukp7"></a>f7xnvp44nukp7</td><td class='awrnc'><pre_sqltext class="awr">insert into  wrm$_snapshot_details  (snap_id, dbid, instance_number, table_id, begin_time, end_time, step_id)	values (:snap_id, :dbid, :instance_number, :bind1, :bind2, :bind3, :step_id)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="f80h0xb1qvbsk"></a>f80h0xb1qvbsk</td><td class='awrc'><pre_sqltext class="awr">SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fb4bu20sm75kp"></a>fb4bu20sm75kp</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '142';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------

* 3889879926	 1	P60SDB	     p60sdb1	  mcracpoc1.ex
* 3889879926	 2	P60SDB	     p60sdb2	  mcracpoc2.ex
v_num_tmp NUMBER := 0;


Using 3889879926 for database Id
v_loop_cnt PLS_INTEGER := 0;
Using instances ALL (default 'ALL')
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fg11facbfjwvx"></a>fg11facbfjwvx</td><td class='awrc'><pre_sqltext class="awr">
	  SELECT  /*+ no_monitor leading(mo_px) use_hash(mo_px) */
	  xmlelement(
	    &quot;sql_monitor_list_report&quot;,
	    xmlattributes(
	      :report_version				  as &quot;version&quot;,
	      :total_count				  as &quot;total_count&quot;,
	      to_char(:new_last_refresh_time,
		      :date_fmt)			  as &quot;sysdate&quot;,
	      :auto_refresh				  as &quot;auto_refresh&quot;,
	      :base_path				  as &quot;base_path&quot;),
	    case
	      when :debug_xml is NULL
	      then NULL
	      else xmltype(:debug_xml)
	    end,
	    xmlagg(
	      case
	       when mo.dbop_name is not NULL
	       then
	       xmlelement(
		 &quot;dbop&quot;,
		  xmlattributes(mo.detail_level 	as &quot;detail&quot;,
				mo.report_ref		as &quot;report_ref&quot;,
				mo.dbop_name		as &quot;dbop_name&quot;,
				to_char(mo.sql_exec_start,
					:date_fmt)	as &quot;dbop_exec_start&quot;,
				mo.dbop_exec_id 	as &quot;dbop_exec_id&quot;),
		 decode(
		   mo.detail_level,
		   'P',
		   xmlforest(
		     mo.status			   as &quot;status&quot;,
		     to_char(mo.last_refresh_time,
			     :date_fmt) 	   as &quot;last_refresh_time&quot;,
		     mo.refresh_count		   as &quot;refresh_count&quot;)),
		 decode(
		   mo.detail_level,
		   'F',
		   xmlforest(
		     mo.status			   as &quot;status&quot;,
		     to_char(mo.first_refresh_time,
			     :date_fmt) 	   as &quot;first_refresh_time&quot;,
		     to_char(mo.last_refresh_time,
			     :date_fmt) 	   as &quot;last_refresh_time&quot;,
		     mo.refresh_count		   as &quot;refresh_count&quot;,
		     mo.inst_id 		   as &quot;inst_id&quot;,
		     mo.sid			   as &quot;session_id&quot;,
		     mo.session_serial# 	   as &quot;session_serial&quot;,
		     mo.user#			   as &quot;user_id&quot;,
		     mo.username		   as &quot;user&quot;,
		     decode(mo.con_id,	0,  NULL,  mo.con_id)
						   as &quot;con_id&quot;,
		     mo.con_name		   as &quot;con_name&quot;,
		     mo.module			   as &quot;module&quot;,
		     mo.action			   as &quot;action&quot;,
		     mo.service_name		   as &quot;service&quot;,
		     mo.client_identifier	   as &quot;client_id&quot;,
		     mo.client_info		   as &quot;client_info&quot;,
		     mo.program 		   as &quot;program&quot;,
		     mo.plsql_entry_object_id	   as &quot;plsql_entry_object_id&quot;,
		     mo.plsql_entry_subprogram_id
						as &quot;plsql_entry_subprogram_id&quot;,
		     mo.plsql_object_id 	as &quot;plsql_object_id&quot;,
		     mo.plsql_subprogram_id	as &quot;plsql_subprogram_id&quot;,
		     mo.rm_consumer_group	as &quot;rm_consumer_group&quot;,
		     mo.px_is_cross_instance	as &quot;is_cross_instance&quot;,
		     mo.px_maxdop		as &quot;dop&quot;,
		     mo.px_maxdop_instances	as &quot;instances&quot;,
		     mo.ecid			as &quot;ecid&quot;)),
		 case
		   when mo.error_number is null or
			mo.detail_level = 'N'
		   then null
		   else
		     xmlelement(&quot;error&quot;,
			      xmlattributes(mo.error_number   as &quot;number&quot;,
					    mo.error_facility as &quot;facility&quot;),
			      mo.error_message)
		 end,
		 case
		   when mo.rm_last_action is not null
		   then
		     xmlelement(&quot;rm_action&quot;,
		       xmlattributes(mo.rm_last_action	 as &quot;name&quot;,
				     mo.rm_last_action_reason as &quot;reason&quot;))
		 end,
		 decode(mo.detail_level,  'N',	null,
		  xmlelement(&quot;stats&quot;,


		   xmlattributes('monitor' as &quot;type&quot;),
Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		   xmlelement(&quot;stat&quot;,
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.
			      xmlattributes('duration' as &quot;name&quot;),


			      greatest(mo.duration,
				       least(mo.elapsed_time/1000000,  1),
				       ceil(mo.queuing_time/1000000))),
Enter value for num_days: 		   decode(mo.elapsed_time,  0,	NULL,
			  xmlelement(&quot;stat&quot;,
				   xmlattributes('elapsed_time' as &quot;name&quot;),
				   mo.elapsed_time)),
		   decode(mo.queuing_time,  0,	NULL,
			  xmlelement(&quot;stat&quot;,
				   xmlattributes('queuing_time' as &quot;name&quot;),
				   mo.queuing_time)),
		   decode(mo.cpu_time,	0,  NULL,
			  xmlelement(&quot;stat&quot;,
				    xmlattributes('cpu_time' as &quot;name&quot;),
				    mo.cpu_time)),
		   decode(mo.user_io_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('user_io_wait_time' as &quot;name&quot;),
				mo.user_io_wait_time)),
		   decode(mo.application_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
			      xmlattributes('application_wait_time' as &quot;name&quot;),
			      mo.application_wait_time)),
		   decode(mo.concurrency_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
			      xmlattributes('concurrency_wait_time' as &quot;name&quot;),
			      mo.concurrency_wait_time)),
		   decode(mo.cluster_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('cluster_wait_time' as &quot;name&quot;),
				mo.cluster_wait_time)),
		   decode(mo.plsql_exec_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('plsql_exec_time' as &quot;name&quot;),
				mo.plsql_exec_time)),
		   decode(mo.java_exec_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('java_exec_time' as &quot;name&quot;),
				mo.java_exec_time)),
		   decode(mo.other_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,

Listing all Completed Snapshots
				xmlattributes('other_wait_time' as &quot;name&quot;),
				mo.other_wait_time)),
		   decode(mo.fetches,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('user_fetch_count' as &quot;name&quot;),
				mo.fetches)),
		   decode(mo.buffer_gets,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('buffer_gets' as &quot;name&quot;),
				mo.buffer_gets)),
		   decode(mo.read_reqs,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('read_reqs' as &quot;name&quot;),
				mo.read_reqs)),
		   decode(mo.read_bytes,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('read_bytes' as &quot;name&quot;),
				mo.read_bytes)),
		   decode(mo.write_reqs,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('write_reqs' as &quot;name&quot;),
				mo.write_reqs)),
		   decode(mo.write_bytes,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('write_bytes' as &quot;name&quot;),
				mo.write_bytes)),
		   case
		     when mo.io_inter_bytes is null or
			  mo.io_inter_bytes = mo.io_bytes or
			  mo.io_bytes = 0
		     then null
		     else xmlelement(&quot;stat
&quot;,
				xmlattributes('cell_offload_efficiency' as
					      &quot;name&quot;),
				round(mo.io_bytes /
				      decode(mo.io_inter_bytes,  0,  1,
					     mo.io_inter_bytes),  2))
		   end)))
	       else
	       xmlelement(
		 &quot;sql&quot;,
		 xmlattributes(mo.detail_level	       as &quot;detail&quot;,
			       mo.report_ref	       as &quot;report_ref&quot;,
			       mo.sql_id	       as &quot;sql_id&quot;,
			       to_char(mo.sql_exec_start,
				       :date_fmt)      as &quot;sql_exec_start&quot;,
			       mo.sql_exec_id	       as &quot;sql_exec_id&quot;),
		 decode(
		   mo.detail_level,
		   'P',
		   xmlforest(
		     mo.status			   as &quot;status&quot;,
		     to_char(mo.last_refresh_time,
			     :date_fmt) 	   as &quot;last_refresh_time&quot;,
		     mo.refresh_count		   as &quot;refresh_count&quot;,
		     mo.px_is_cross_instance	   as &quot;is_cross_instance&quot;,
		     mo.px_maxdop		   as &quot;dop&quot;,
		     mo.px_maxdop_instances	   as &quot;instances&quot;,
		     mo.px_servers_requested	   as &quot;px_servers_requested&quot;,
		     mo.px_servers_allocated	   as &quot;px_servers_allocated&quot;)),
		 decode(
		   mo.detail_level,
		   'F',
		   xmlforest(
		     mo.status			   as &quot;status&quot;,
		     to_char(mo.first_refresh_time,
			     :date_fmt) 	   as &quot;first_refresh_time&quot;,
		     to_char(mo.last_refresh_time,
			     :date_fmt) 	   as &quot;last_refresh_time&quot;,
		     mo.refresh_count		   as &quot;refresh_count&quot;,
		     mo.inst_id 		   as &quot;inst_id&quot;,
		     mo.sid			   as &quot;session_id&quot;,
		     mo.session_serial# 	   as &quot;session_serial&quot;,
		     mo.user#			   as &quot;user_id&quot;,
		     mo.username		   as &quot;user&quot;,
		     decode(mo.con_id,	0,  NULL,  mo.con_id)
						   as &quot;con_id&quot;,
		     mo.con_name		   as &quot;con_name&quot;,
		     mo.module			   as &quot;module&quot;,
		     mo.action			   as &quot;action&quot;,
		     mo.service_name		   as &quot;service&quot;,
		     mo.client_identifier	   as &quot;client_id&quot;,
		     mo.client_info		   as &quot;client_info&quot;,
		     mo.program 		   as &quot;program&quot;,
		     mo.sql_plan_hash_value	   as &quot;plan_hash&quot;,
		     mo.plsql_entry_object_id	   as &quot;plsql_entry_object_id&quot;,
		     mo.plsql_entry_subprogram_id
						as &quot;plsql_entry_subprogram_id&quot;,
		     mo.plsql_object_id 	as &quot;plsql_object_id&quot;,
		     mo.plsql_subprogram_id	as &quot;plsql_subprogram_id&quot;,
		     mo.rm_consumer_group	as &quot;rm_consumer_group&quot;,
		     mo.px_is_cross_instance	as &quot;is_cross_instance&quot;,
		     mo.px_maxdop		as &quot;dop&quot;,
		     mo.px_maxdop_instances	as &quot;instances&quot;,
		     mo.px_servers_requested	as &quot;px_servers_requested&quot;,
		     mo.px_servers_allocated	as &quot;px_servers_allocated&quot;,
		     mo.ecid			as &quot;ecid&quot;)),
		 case
		   when mo.error_number is null or
			mo.detail_level = 'N'
		   then null
		   else
		     xmlelement(&quot;error&quot;,
			      xmlattributes(mo.error_number   as &quot;number&quot;,
					    mo.error_facility as &quot;facility&quot;),
			      mo.error_message)
		 end,
		 case
		   when mo.rm_last_action is not null
		   then
		     xmlelement(&quot;rm_action&quot;,
		       xmlattributes(mo.rm_last_action	 as &quot;name&quot;,
				     mo.rm_last_action_reason as &quot;reason&quot;))
		 end,
		 case
		   when :sel_sqltext = 0 or
			mo.detail_level != 'F'
		   then null
		   else
		     xmlelement(
		       &quot;sql_text&quot;,
		       xmlattributes(mo.is_full_sqltext  as &quot;is_full&quot;),
		       to_clob(mo.sql_text))
		 end,
		 decode(mo.detail_level,  'N',	null,
		  xmlelement(&quot;stats&quot;,
		   xmlattributes('monitor' as &quot;type&quot;),
		   xmlelement(&quot;stat&quot;,
			      xmlattributes('duration' as &quot;name&quot;),
			      greatest(mo.duration,
				       least(mo.elapsed_time/1000000,  1),
				       ceil(mo.queuing_time/1000000))),
		   decode(mo.elapsed_time,  0,	NULL,
			  xmlelement(&quot;stat&quot;,
				   xmlattributes('elapsed_time' as &quot;name&quot;),
				   mo.elapsed_time)),
		   decode(mo.queuing_time,  0,	NULL,
			  xmlelement(&quot;stat&quot;,
				   xmlattributes('queuing_time' as &quot;name&quot;),
				   mo.queuing_time)),
		   decode(mo.cpu_time,	0,  NULL,
			  xmlelement(&quot;stat&quot;,
				    xmlattributes('cpu_time' as &quot;name&quot;),
				    mo.cpu_time)),
		   decode(mo.user_io_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('user_io_wait_time' as &quot;name&quot;),
				mo.user_io_wait_time)),
		   decode(mo.application_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
			      xmlattributes('application_wait_time' as &quot;name&quot;),
			      mo.application_wait_time)),
		   decode(mo.concurrency_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
			      xmlattributes('concurrency_wait_time' as &quot;name&quot;),
			      mo.concurrency_wait_time)),
		   decode(mo.cluster_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('cluster_wait_time' as &quot;name&quot;),
				mo.cluster_wait_time)),
		   decode(mo.plsql_exec_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('plsql_exec_time' as &quot;name&quot;),
				mo.plsql_exec_time)),
		   decode(mo.java_exec_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('java_exec_time' as &quot;name&quot;),
				mo.java_exec_time)),
		   decode(mo.other_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('other_wait_time' as &quot;name&quot;),
				mo.other_wait_time)),
		   decode(mo.fetches,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('user_fetch_count' as &quot;name&quot;),
				mo.fetches)),
		   decode(mo.buffer_gets,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('buffer_gets' as &quot;name&quot;),
				mo.buffer_gets)),
		   decode(mo.read_reqs,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('read_reqs' as &quot;name&quot;),
				mo.read_reqs)),
		   decode(mo.read_bytes,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('read_bytes' as &quot;name&quot;),
				mo.read_bytes)),
		   decode(mo.write_reqs,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('write_reqs' as &quot;name&quot;),
				mo.write_reqs)),
		   decode(mo.write_bytes,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('write_bytes' as &quot;name&quot;),
				mo.write_bytes)),
		   decode(:top_n_count,  NULL,	NULL,
			  xmlelement(&quot;stat&quot;,
			      xmlattributes('row_rank' as &quot;name&quot;),
			      mo.row_rank)),
		   case
		     when mo.io_inter_bytes is null or
			  mo.io_inter_bytes = mo.io_bytes or
			  mo.io_bytes = 0
		     then null
		     else xmlelement(&quot;stat&quot;,
				xmlattributes('cell_offload_efficiency' as
					      &quot;name&quot;),
				round(mo.io_bytes /
				      decode(mo.io_inter_bytes,  0,  1,
					     mo.io_inter_bytes),  2))
		   end)))
		end
		order by decode(mo.running,  'Y',  1,  2),
			 decode(mo.running,  'Y',  mo.sql_exec_start,
				mo.last_refresh_time) desc,
			 mo.sql_id,
			 mo.dbop_name,
			 mo.sql_exec_id,
			 mo.dbop_exec_id desc))FROM
	  (SELECT
	    decode(
	      :top_n_count,  null,  0,
	      (rank() over
		(order by
		  decode(
		    lower(nvl(:top_n_rankby,  'last_active_time')),
		    'duration',  mo0.duration,
		    'db_time',	mo0.elapsed_time,
		    'cpu_time',  mo0.cpu_time,
		    'io_requests',  (mo0.read_reqs + mo0.write_reqs),
		    'io_bytes',  mo0.io_bytes,
		    decode(mo0.running,  'Y',  0,
			   (mo0.last_refresh_time - sysdate) *
			    3600 * 24)) desc))) row_rank,
	    mo0.*
	  FROM
	    (SELECT
	       mo_qc.status status,
	       case
		 when mo_qc.status = 'EXECUTING' or mo_qc.status = 'QUEUED'
		 then 'Y'
		 else 'N'
	       end running,
	       case
		 when mo_qc.last_active &lt;
			      :show_detail_after
		 then 'N'
		 when mo_qc.first_refresh_time &lt;
			      :show_detail_after
		 then 'P'
		 else 'F'
	       end detail_level,
	       mo_qc.error_number,
	       mo_qc.error_facility,
	       mo_qc.error_message,
	       mo_qc.rm_last_action,
	       mo_qc.rm_last_action_reason,
	       case
		 when :need_url = 1 and mo_qc.dbop_name is not NULL
		 then
		     'main?report_level=all'||chr(38)||
		     'dbop_name='||mo_qc.dbop_name||chr(38)||
		     'inst_id='||mo_qc.inst_id||chr(38)||
		     'sql_exec_start='||to_char(mo_qc.sql_exec_start,
						:date_fmt_mod)||chr(38)||
		     'dbop_exec_id='||mo_qc.dbop_exec_id
		 when :need_url = 1
		 then
		     'main?report_level=all'||chr(38)||
		     'sql_id='||mo_qc.sql_id||chr(38)||
		     'inst_id='||mo_qc.inst_id||chr(38)||
		     'sql_exec_start='||to_char(mo_qc.sql_exec_start,
						:date_fmt_mod)||chr(38)||
		     'sql_exec_id='||mo_qc.sql_exec_id
		 else
		   null
	       end report_ref,
	       mo_qc.sql_id,
	       mo_qc.dbop_name,
	       mo_qc.sql_exec_start,
	       mo_qc.sql_exec_id,
	       mo_qc.dbop_exec_id,
	       mo_qc.first_refresh_time,
	       case when mo_px.last_refresh_time is null or
			 mo_qc.last_refresh_time &gt; mo_px.last_refresh_time
		    then mo_qc.last_refresh_time
		    else mo_px.last_refresh_time
	       end last_refresh_time,
	       mo_qc.refresh_count + nvl(mo_px.refresh_count,  0) refresh_count,
	       round((mo_qc.last_active - mo_qc.sql_exec_start) *
							24 * 3600) duration,
	       mo_qc.inst_id inst_id,
	       mo_qc.sid sid,
	       mo_qc.session_serial# session_serial#,
	       mo_qc.user# user#,
	       mo_qc.username username,
	       mo_qc.module module,
	       mo_qc.action action,
	       mo_qc.service_name service_name,
	       mo_qc.client_identifier client_identifier,
	       mo_qc.client_info client_info,
	       mo_qc.program program,
	       mo_qc.sql_plan_hash_value sql_plan_hash_value,
	       mo_qc.plsql_entry_object_id plsql_entry_object_id,
	       mo_qc.plsql_entry_subprogram_id plsql_entry_subprogram_id,
	       mo_qc.plsql_object_id plsql_object_id,
	       mo_qc.plsql_subprogram_id plsql_subprogram_id,
	       mo_qc.rm_consumer_group rm_consumer_group,
	       mo_qc.px_is_cross_instance px_is_cross_instance,
	       mo_qc.px_maxdop px_maxdop,
	       decode(mo_qc.px_is_cross_instance,  'Y',
		      mo_qc.px_maxdop_instances,  NULL) px_maxdop_instances,
	       mo_qc.px_servers_requested px_servers_requested,
	       mo_qc.px_servers_allocated px_servers_allocated,
	       decode(:max_sqltext_length,  null,
		      mo_qc.is_full_sqltext,
		      case
			when length(mo_qc.sql_text) &gt;
			     :max_sqltext_length
			then 'N'
			else 'Y'
		      end) is_full_sqltext,
	       decode(:max_sqltext_length,  null,
		      mo_qc.sql_text,
		      substr(mo_qc.sql_text,  1,
			     :max_sqltext_length)) sql_text,
	       nvl(mo_px.sum_elapsed_time,  0) +
		mo_qc.elapsed_time elapsed_time,
	       mo_qc.queuing_time queuing_time,
	       nvl(mo_px.sum_cpu_time,	0) + mo_qc.cpu_time cpu_time,
	       nvl(mo_px.sum_user_io_wait_time,  0) +
		   mo_qc.user_io_wait_time user_io_wait_time,
	       nvl(mo_px.sum_application_wait_time,  0) +
		   mo_qc.application_wait_time application_wait_time,
	       nvl(mo_px.sum_concurrency_wait_time,  0) +
		   mo_qc.concurrency_wait_time concurrency_wait_time,
	       nvl(mo_px.sum_cluster_wait_time,  0) +
		   mo_qc.cluster_wait_time cluster_wait_time,
	       nvl(mo_px.sum_plsql_exec_time,  0) +
		   mo_qc.plsql_exec_time plsql_exec_time,
	       nvl(mo_px.sum_java_exec_time,  0) +
		   mo_qc.java_exec_time java_exec_time,
	       nvl(mo_px.sum_other_wait_time,  0) +
		   mo_qc.other_wait_time other_wait_time,
	       nvl(mo_px.sum_fetches,  0) + mo_qc.fetches fetches,
	       nvl(mo_px.sum_buffer_gets,  0) + mo_qc.buffer_gets buffer_gets,
	       nvl(mo_px.sum_read_reqs,  0) + mo_qc.read_reqs read_reqs,
	       nvl(mo_px.sum_read_bytes,  0) + mo_qc.read_bytes read_bytes,
	       nvl(mo_px.sum_write_reqs,  0) + mo_qc.write_reqs write_reqs,
	       nvl(mo_px.sum_write_bytes,  0) + mo_qc.write_bytes write_bytes,
	       nvl(mo_px.sum_io_inter_bytes,  0) +
		   mo_qc.io_inter_bytes io_inter_bytes,
	       nvl(mo_px.sum_io_bytes,	0) + mo_qc.io_bytes io_bytes,
	       mo_qc.con_id,
	       mo_qc.con_name,
	       mo_qc.ecid
	     FROM
	     (SELECT /*+ no_merge */
		     mo1.inst_id,
		     mo1.sid,
		     mo1.session_serial#,
		     mo1.sql_id,
		     mo1.dbop_name,
		     nvl(mo1.sql_exec_start,
			 mo1.first_refresh_time) sql_exec_start,
		     mo1.sql_exec_id,
		     mo1.dbop_exec_id,
		     mo1.first_refresh_time,
		     mo1.last_refresh_time,
		     mo1.refresh_count,
		     case
		       when mo1.status = 'EXECUTING' or mo1.status = 'QUEUED'
		       then :new_last_refresh_time
		       else mo1.last_refresh_time
		     end last_active,
		     mo1.sql_plan_hash_value,
		     mo1.status,
		     mo1.error_number,
		     mo1.error_facility,
		     mo1.error_message,
		     mo1.rm_last_action,
		     mo1.rm_last_action_reason,
		     mo1.px_is_cross_instance,
		     mo1.px_maxdop,
		     mo1.px_maxdop_instances,
		     mo1.px_servers_requested,
		     mo1.px_servers_allocated,
		     mo1.is_full_sqltext,
		     mo1.sql_text,
		     mo1.user#,
		     mo1.username,
		     mo1.module,
		     mo1.action,
		     mo1.service_name,
		     mo1.client_identifier,
		     mo1.client_info,
		     mo1.program,
		     mo1.plsql_entry_object_id,
		     mo1.plsql_entry_subprogram_id,
		     mo1.plsql_object_id,
		     mo1.plsql_subprogram_id,
		     mo1.rm_consumer_group,
		     case
		     when
		       mo1.elapsed_time &lt; (mo1.cpu_time+
					   mo1.application_wait_time+
					   mo1.concurrency_wait_time+
					   mo1.cluster_wait_time+
					   mo1.user_io_wait_time+
					   mo1.queuing_time)
		     then
		       (mo1.cpu_time+
			mo1.application_wait_time+
			mo1.concurrency_wait_time+
			mo1.cluster_wait_time+
			mo1.user_io_wait_time+
			mo1.queuing_time)
		     else
			mo1.elapsed_time
		     end elapsed_time,
		     mo1.cpu_time cpu_time,
		     mo1.user_io_wait_time user_io_wait_time,
		     mo1.application_wait_time application_wait_time,
		     mo1.concurrency_wait_time concurrency_wait_time,
		     mo1.cluster_wait_time cluster_wait_time,
		     mo1.plsql_exec_time plsql_exec_time,
		     mo1.java_exec_time java_exec_time,
		     mo1.queuing_time queuing_time,
		     case
		     when
		       mo1.elapsed_time &lt; (mo1.cpu_time+
					   mo1.application_wait_time+
					   mo1.concurrency_wait_time+
					   mo1.cluster_wait_time+
					   mo1.user_io_wait_time+
					   mo1.queuing_time)
		     then
		       0
		     else
		       mo1.elapsed_time - (mo1.cpu_time+
					   mo1.application_wait_time+
					   mo1.concurrency_wait_time+
					   mo1.cluster_wait_time+
					   mo1.user_io_wait_time+
					   mo1.queuing_time)
		     end other_wait_time,
		     mo1.fetches,
		     mo1.buffer_gets,
		     mo1.physical_read_requests read_reqs,
		     mo1.physical_read_bytes read_bytes,
		     mo1.physical_write_requests write_reqs,
		     mo1.physical_write_bytes write_bytes,
		     nvl(mo1.physical_read_bytes,  0) +
		       nvl(mo1.physical_write_bytes,  0) io_bytes,
		     mo1.io_interconnect_bytes io_inter_bytes,
		     mo1.con_id,
		     mo1.con_name,
		     mo1.ecid
	     FROM    gv$all_sql_monitor mo1
	     WHERE   mo1.px_qcsid is NULL
	       AND   mo1.inst_id between :target_inst_id_low and
					 :target_inst_id_high
	       AND   mo1.sid =
			 nvl(:target_session_id,
			     mo1.sid)
	       AND   ((:dbop_name is NULL and
		      mo1.sql_id = nvl(:sql_id,
				      mo1.sql_id))
		     OR
		     (:sql_id is NULL and
		      mo1.dbop_name =
			nvl(:dbop_name,
			    mo1.dbop_name))
		     OR
		     (mo1.dbop_name = :dbop_name or
		      mo1.sql_id = :sql_id))
	       AND   mo1.session_serial# =
			 nvl(:target_session_serial,
			       mo1.session_serial#)
	       AND   (mo1.status = 'EXECUTING' or
		      mo1.status = 'QUEUED' or
		      mo1.last_refresh_time &gt;=
			  :active_since_filter)
	       AND (nvl(mo1.sql_exec_start,  mo1.first_refresh_time) between
			:target_first_exec_start and
			:target_last_exec_start)
	       AND   1 = nvl(1,  :dbsearch_value)
	     ) mo_qc,
	    (SELECT /*+ no_merge */
		     mo2.sql_id,
		     mo2.sql_exec_start,
		     mo2.sql_exec_id,
		     max(mo2.last_refresh_time) last_refresh_time,
		     sum(mo2.refresh_count) refresh_count,
		     sum(
		       case
			 when
			   mo2.elapsed_time &lt; (mo2.cpu_time+
					       mo2.application_wait_time+
					       mo2.concurrency_wait_time+
					       mo2.cluster_wait_time+
					       mo2.user_io_wait_time)
			 then
			   (mo2.cpu_time+
			    mo2.application_wait_time+
			    mo2.concurrency_wait_time+
			    mo2.cluster_wait_time+
			    mo2.user_io_wait_time)
			 else
			   mo2.elapsed_time
		       end) sum_elapsed_time,
		     sum(mo2.cpu_time) sum_cpu_time,
		     sum(mo2.user_io_wait_time) sum_user_io_wait_time,
DB Name      Snap Id	   Snap Started    Snap Level
------------ ---------- ------------------ ----------
		     sum(mo2.application_wait_time) sum_application_wait_time,

P60SDB		     1	06 Feb 2020 18:00    1
		     2	06 Feb 2020 19:00    1
		     3	06 Feb 2020 20:00    1
		     4	06 Feb 2020 21:00    1
		     sum(mo2.concurrency_wait_time) sum_concurrency_wait_time,
		     5	06 Feb 2020 22:00    1
		     6	06 Feb 2020 23:00    1
		     7	07 Feb 2020 00:00    1
		     8	07 Feb 2020 01:00    1
		     9	07 Feb 2020 02:00    1
		     sum(mo2.cluster_wait_time) sum_cluster_wait_time,
		    10	07 Feb 2020 03:00    1
		    11	07 Feb 2020 04:00    1
		    12	07 Feb 2020 05:00    1
		     sum(mo2.plsql_exec_time) sum_plsql_exec_time,
		     sum(mo2.java_exec_time) sum_java_exec_time,
		     sum(
		       case
			 when
			   mo2.elapsed_time &lt; (mo2.cpu_time+
					       mo2.application_wait_time+
					       mo2.concurrency_wait_time+
					       mo2.cluster_wait_time+
					       mo2.user_io_wait_time)
			 then
			   0
			 else
			   mo2.elapsed_time - (mo2.cpu_time+
					       mo2.application_wait_time+
					       mo2.concurrency_wait_time+
					       mo2.cluster_wait_time+
					       mo2.user_io_wait_time)
		       end) sum_other_wait_time,
		     sum(mo2.fetches) sum_fetches,
		     sum(mo2.buffer_gets) sum_buffer_gets,
		     sum(mo2.physical_read_requests) sum_read_reqs,
		    13	07 Feb 2020 06:00    1
		     sum(mo2.physical_read_bytes) sum_read_bytes,
		    14	07 Feb 2020 07:00    1
		    15	07 Feb 2020 08:00    1
		    16	07 Feb 2020 21:41    1
		    17	07 Feb 2020 23:00    1
		    18	08 Feb 2020 00:00    1
		     sum(mo2.physical_write_requests) sum_write_reqs,
		    19	08 Feb 2020 01:00    1
		    20	08 Feb 2020 02:00    1
		    21	08 Feb 2020 03:00    1
		    22	08 Feb 2020 04:00    1
		    23	08 Feb 2020 05:00    1
		     sum(mo2.physical_write_bytes) sum_write_bytes,
		    24	08 Feb 2020 06:00    1
		    25	08 Feb 2020 07:00    1
		    26	10 Feb 2020 21:32    1
		    27	11 Feb 2020 08:57    1
		     sum(nvl(mo2.physical_read_bytes,  0) +
			 nvl(mo2.physical_write_bytes,	0)) sum_io_bytes,
		     sum(nvl(mo2.io_interconnect_bytes,  0)) sum_io_inter_bytes
	     FROM    gv$all_sql_monitor mo2
	     WHERE   :detail_is_parallel is not null
	       AND   mo2.inst_id between
			  :px_inst_id_low and
			  :px_inst_id_high
	       AND   mo2.px_qcinst_id between
			  :target_inst_id_low and
			  :target_inst_id_high
	       AND   mo2.sql_id between
			  :detail_px_min_sqlid and
			  :detail_px_max_sqlid
	       AND   mo2.sql_exec_start &gt;=
			  :detail_px_first_exec_start
	       AND   (mo2.px_qcsid =
			 nvl(:target_session_id,
			     mo2.px_qcsid))
	       AND   mo2.con_id = nvl(:con_id,	mo2.con_id)
	       AND   1 = nvl(1,  :dbsearch_value)
		    28	11 Feb 2020 09:07    1
		    29	11 Feb 2020 09:10    1
	     GROUP BY mo2.sql_id,
		    30	11 Feb 2020 09:20    1
		    31	11 Feb 2020 09:51    1
		    32	11 Feb 2020 10:01    1
		    33	11 Feb 2020 10:11    1
		    34	11 Feb 2020 10:14    1
		      mo2.sql_exec_start,
		    35	11 Feb 2020 10:16    1
		    36	11 Feb 2020 10:27    1
		    37	11 Feb 2020 10:30    1
		    38	11 Feb 2020 10:33    1
		    39	11 Feb 2020 10:43    1
		      mo2.sql_exec_id
		    40	11 Feb 2020 10:58    1
		    41	11 Feb 2020 11:02    1
		    42	11 Feb 2020 11:05    1
	    ) mo_px
	  WHERE mo_qc.sql_id	     = mo_px.sql_id(+)
	    AND mo_qc.sql_exec_start = mo_px.sql_exec_start(+)
	    AND mo_qc.sql_exec_id    = mo_px.sql_exec_id(+)) mo0) mo
	WHERE row_rank &lt;= nvl(:top_n_count,	1)
	</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fpx8qau059b6k"></a>fpx8qau059b6k</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '25';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
		    43	11 Feb 2020 11:07    1
v_sleep_min NUMBER := '.1';
		    44	11 Feb 2020 11:11    1
		    45	11 Feb 2020 11:21    1
		    46	11 Feb 2020 11:31    1
		    47	11 Feb 2020 11:41    1
		    48	12 Feb 2020 09:57    1
v_sleep_max NUMBER := '.5';
		    49	12 Feb 2020 09:59    1
		    50	12 Feb 2020 10:10    1
		    51	12 Feb 2020 10:14    1
		    52	12 Feb 2020 10:24    1
		    53	12 Feb 2020 12:13    1
v_scan_query_pct PLS_INTEGER := '0';
		    54	12 Feb 2020 12:24    1
		    55	12 Feb 2020 12:34    1
		    56	12 Feb 2020 12:44    1
DB Name      Snap Id	   Snap Started    Snap Level
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;

------------ ---------- ------------------ ----------


P60SDB		    57	12 Feb 2020 12:46    1
		    58	12 Feb 2020 12:50    1
		    59	12 Feb 2020 12:56    1
		    60	12 Feb 2020 13:09    1
		    61	12 Feb 2020 13:51    1
v_random_block PLS_INTEGER := 1;
		    62	12 Feb 2020 14:03    1
		    63	12 Feb 2020 14:12    1
		    64	12 Feb 2020 14:31    1
		    65	12 Feb 2020 14:42    1
		    66	12 Feb 2020 14:56    1
v_tmp PLS_INTEGER;
		    67	12 Feb 2020 15:11    1
		    68	12 Feb 2020 16:00    1
		    69	12 Feb 2020 17:00    1
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
		    70	12 Feb 2020 18:00    1
		    71	12 Feb 2020 19:00    1
		    72	12 Feb 2020 20:00    1
v_scratch VARCHAR2(200) ;
		    73	12 Feb 2020 21:00    1
		    74	12 Feb 2020 22:00    1
		    75	12 Feb 2020 23:00    1
		    76	13 Feb 2020 00:00    1
		    77	13 Feb 2020 01:00    1

		    78	13 Feb 2020 02:00    1
		    79	13 Feb 2020 03:00    1
		    80	13 Feb 2020 04:00    1
		    81	13 Feb 2020 05:00    1
		    82	13 Feb 2020 06:00    1
v_cpu_pct NUMBER(6, 3);
		    83	13 Feb 2020 07:00    1
		    84	13 Feb 2020 08:00    1
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;
		    85	13 Feb 2020 09:06    1

		    86	13 Feb 2020 09:18    1
		    87	13 Feb 2020 09:21    1
		    88	13 Feb 2020 09:33    1
		    89	13 Feb 2020 09:40    1
		    90	13 Feb 2020 09:59    1
IF ( v_update_pct = 0 ) 	  THEN
		    91	13 Feb 2020 10:34    1
		    92	13 Feb 2020 11:30    1
		    93	13 Feb 2020 11:42    1
		    94	13 Feb 2020 12:09    1
		    95	13 Feb 2020 12:14    1
	v_select_only_workload := TRUE;
		    96	13 Feb 2020 12:17    1
		    97	13 Feb 2020 12:27    1
		    98	13 Feb 2020 13:00    1
		    99	13 Feb 2020 13:53    1
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

		   100	13 Feb 2020 13:59    1
		   101	13 Feb 2020 14:04    1
		   102	13 Feb 2020 14:16    1
v_begin_time := DBMS_UTILITY.GET_TIME();
		   103	13 Feb 2020 14:18    1
		   104	13 Feb 2020 14:31    1
		   105	13 Feb 2020 14:33    1
		   106	13 Feb 2020 14:42    1
		   107	13 Feb 2020 14:44    1
v_now := v_begin_time ;
		   108	13 Feb 2020 14:49    1
		   109	13 Feb 2020 14:51    1
		   110	13 Feb 2020 15:00    1
		   111	13 Feb 2020 15:01    1
		   112	13 Feb 2020 16:00    1
v_brick_wall := v_now + v_seconds_to_run ;
DB Name      Snap Id	   Snap Started    Snap Level
------------ ---------- ------------------ ----------
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE

			IF ( v_sharing_schema = TRUE ) THEN
P60SDB		   113	13 Feb 2020 17:00    1
		   114	13 Feb 2020 18:00    1
		   115	13 Feb 2020 19:00    1
		   116	13 Feb 2020 20:00    1
		   117	13 Feb 2020 21:00    1
				EXECUTE IMMEDIATE v_home_schema_str;
		   118	13 Feb 2020 22:00    1
		   119	13 Feb 2020 23:00    1
		   120	14 Feb 2020 00:00    1
		   121	14 Feb 2020 01:00    1
		   122	14 Feb 2020 02:00    1
				v_sharing_schema := FALSE;
		   123	14 Feb 2020 03:00    1
		   124	14 Feb 2020 04:00    1
		   125	14 Feb 2020 05:00    1
		   126	14 Feb 2020 06:00    1
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
		   127	14 Feb 2020 07:00    1
		   128	14 Feb 2020 07:42    1
		   129	14 Feb 2020 07:44    1
		   130	14 Feb 2020 07:48    1
		   131	14 Feb 2020 07:50    1
			-- handle case where user specified 100% updates
		   132	14 Feb 2020 07:56    1
		   133	14 Feb 2020 07:58    1
		   134	14 Feb 2020 08:01    1
		   135	14 Feb 2020 08:34    1
		   136	14 Feb 2020 08:45    1
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE


			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 135
			-- Work out whether this loop iteration is a SELECT or UPDATE here:

End   Snapshot Id specified: 136

			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);


			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="ga8nw4v3u99km"></a>ga8nw4v3u99km</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '2';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="gdsqn03xtayhg"></a>gdsqn03xtayhg</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '347';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="grnj9m41xzwyv"></a>grnj9m41xzwyv</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '7';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="gta39sva2c0pj"></a>gta39sva2c0pj</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '165';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
</table>
<p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="23"></a>
<h2 class="awr">
Instance Activity Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1200">Key Instance Activity Stats</a></li>
<li class="awr"><a class="awr" href="#1250">Instance Activity Stats</a></li>
<li class="awr"><a class="awr" href="#1300">Instance Activity Stats - Absolute Values</a></li>
<li class="awr"><a class="awr" href="#1400">Instance Activity Stats - Thread Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1200"></a>
<h3 class="awr">Key Instance Activity Stats</h3>
<ul>
<li class="awr"> Ordered by statistic name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Key Instance activity statistics. For each instance, activity total, activity per second, and activity per transaction are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>db block changes</td><td align="right" class='awrc'>5,286,019</td><td align="right" class='awrc'>7,999.62</td><td align="right" class='awrc'>130.49</td></tr>
<tr><td scope="row" class='awrnc'>execute count</td><td align="right" class='awrnc'>279,199</td><td align="right" class='awrnc'>422.53</td><td align="right" class='awrnc'>6.89</td></tr>
<tr><td scope="row" class='awrc'>gc cr block receive time</td><td align="right" class='awrc'>170,805</td><td align="right" class='awrc'>258.49</td><td align="right" class='awrc'>4.22</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks received</td><td align="right" class='awrnc'>26,767</td><td align="right" class='awrnc'>40.51</td><td align="right" class='awrnc'>0.66</td></tr>
<tr><td scope="row" class='awrc'>gc current block receive time</td><td align="right" class='awrc'>61,868</td><td align="right" class='awrc'>93.63</td><td align="right" class='awrc'>1.53</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks received</td><td align="right" class='awrnc'>23,633</td><td align="right" class='awrnc'>35.77</td><td align="right" class='awrnc'>0.58</td></tr>
<tr><td scope="row" class='awrc'>logons cumulative</td><td align="right" class='awrc'>105</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors cumulative</td><td align="right" class='awrnc'>319,792</td><td align="right" class='awrnc'>483.96</td><td align="right" class='awrnc'>7.89</td></tr>
<tr><td scope="row" class='awrc'>parse count (total)</td><td align="right" class='awrc'>11,400</td><td align="right" class='awrc'>17.25</td><td align="right" class='awrc'>0.28</td></tr>
<tr><td scope="row" class='awrnc'>parse time elapsed</td><td align="right" class='awrnc'>438</td><td align="right" class='awrnc'>0.66</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>physical reads</td><td align="right" class='awrc'>14,932,774</td><td align="right" class='awrc'>22,598.57</td><td align="right" class='awrc'>368.64</td></tr>
<tr><td scope="row" class='awrnc'>physical writes</td><td align="right" class='awrnc'>2,553,257</td><td align="right" class='awrnc'>3,863.98</td><td align="right" class='awrnc'>63.03</td></tr>
<tr><td scope="row" class='awrc'>redo size</td><td align="right" class='awrc'>2,070,572,496</td><td align="right" class='awrc'>3,133,508.83</td><td align="right" class='awrc'>51,115.15</td></tr>
<tr><td scope="row" class='awrnc'>session cursor cache hits</td><td align="right" class='awrnc'>317,399</td><td align="right" class='awrnc'>480.34</td><td align="right" class='awrnc'>7.84</td></tr>
<tr><td scope="row" class='awrc'>session logical reads</td><td align="right" class='awrc'>17,727,484</td><td align="right" class='awrc'>26,827.96</td><td align="right" class='awrc'>437.63</td></tr>
<tr><td scope="row" class='awrnc'>user calls</td><td align="right" class='awrnc'>2,138</td><td align="right" class='awrnc'>3.24</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>user commits</td><td align="right" class='awrc'>40,508</td><td align="right" class='awrc'>61.30</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>workarea executions - optimal</td><td align="right" class='awrnc'>1,459</td><td align="right" class='awrnc'>2.21</td><td align="right" class='awrnc'>0.04</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1250"></a>
<h3 class="awr">Instance Activity Stats</h3>
<ul>
<li class="awr"> Ordered by statistic name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Instance activity statistics. For each instance, activity total, activity per second, and activity per transaction are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>ASSM bg: segment fix monitor</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM cbk:blocks examined</td><td align="right" class='awrnc'>1,096</td><td align="right" class='awrnc'>1.66</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>ASSM cbk:blocks marked full</td><td align="right" class='awrc'>306</td><td align="right" class='awrc'>0.46</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L1 bitmaps examined</td><td align="right" class='awrnc'>870</td><td align="right" class='awrnc'>1.32</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:L2 bitmap full</td><td align="right" class='awrc'>31</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L2 bitmaps examined</td><td align="right" class='awrnc'>193</td><td align="right" class='awrnc'>0.29</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search all</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:Search hint</td><td align="right" class='awrnc'>33</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search steal</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:bump HWM</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free block</td><td align="right" class='awrc'>790</td><td align="right" class='awrc'>1.20</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:get free data block</td><td align="right" class='awrnc'>557</td><td align="right" class='awrnc'>0.84</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free index block</td><td align="right" class='awrc'>233</td><td align="right" class='awrc'>0.35</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:good hint</td><td align="right" class='awrnc'>713</td><td align="right" class='awrnc'>1.08</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:reject db</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM rsv:clear reserve</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM rsv:fill reserve</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM wasted db state change</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO (bound) vector count</td><td align="right" class='awrc'>608</td><td align="right" class='awrc'>0.92</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO (full) vector count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO block miss count</td><td align="right" class='awrc'>12,232,863</td><td align="right" class='awrc'>18,512.65</td><td align="right" class='awrc'>301.99</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO buffer defrag count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO double miss count</td><td align="right" class='awrc'>226,690</td><td align="right" class='awrc'>343.06</td><td align="right" class='awrc'>5.60</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO same unit count</td><td align="right" class='awrnc'>1,193</td><td align="right" class='awrnc'>1.81</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>Batched IO single block count</td><td align="right" class='awrc'>1,210</td><td align="right" class='awrc'>1.83</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO vector block count</td><td align="right" class='awrnc'>12,233,468</td><td align="right" class='awrnc'>18,513.57</td><td align="right" class='awrnc'>302.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO vector read count</td><td align="right" class='awrc'>221,345</td><td align="right" class='awrc'>334.97</td><td align="right" class='awrc'>5.46</td></tr>
<tr><td scope="row" class='awrnc'>Block Cleanout Optim referenced</td><td align="right" class='awrnc'>23</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CCursor + sql area evicted</td><td align="right" class='awrc'>2,578</td><td align="right" class='awrc'>3.90</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>CPU used by this session</td><td align="right" class='awrnc'>368,235</td><td align="right" class='awrnc'>557.27</td><td align="right" class='awrnc'>9.09</td></tr>
<tr><td scope="row" class='awrc'>CPU used when call started</td><td align="right" class='awrc'>299,356</td><td align="right" class='awrc'>453.03</td><td align="right" class='awrc'>7.39</td></tr>
<tr><td scope="row" class='awrnc'>CR blocks created</td><td align="right" class='awrnc'>11,057</td><td align="right" class='awrnc'>16.73</td><td align="right" class='awrnc'>0.27</td></tr>
<tr><td scope="row" class='awrc'>Cached Commit SCN referenced</td><td align="right" class='awrc'>14,242,898</td><td align="right" class='awrc'>21,554.54</td><td align="right" class='awrc'>351.61</td></tr>
<tr><td scope="row" class='awrnc'>Client Advertised Receive Window</td><td align="right" class='awrnc'>1,750</td><td align="right" class='awrnc'>2.65</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>Client Advertised Send Window</td><td align="right" class='awrc'>1,750</td><td align="right" class='awrc'>2.65</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>Client Path Maximum Transmission Unit(MTU)</td><td align="right" class='awrnc'>16,383,750</td><td align="right" class='awrnc'>24,794.41</td><td align="right" class='awrnc'>404.46</td></tr>
<tr><td scope="row" class='awrc'>Client Send Congestion Window</td><td align="right" class='awrc'>2,500</td><td align="right" class='awrc'>3.78</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Ack Received</td><td align="right" class='awrnc'>188</td><td align="right" class='awrnc'>0.28</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Last Data Received</td><td align="right" class='awrc'>131</td><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Data Sent</td><td align="right" class='awrnc'>778</td><td align="right" class='awrnc'>1.18</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Round Trip Time</td><td align="right" class='awrc'>1,244,996</td><td align="right" class='awrc'>1,884.12</td><td align="right" class='awrc'>30.73</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Round Trip Time Variance</td><td align="right" class='awrnc'>2,028,101</td><td align="right" class='awrnc'>3,069.23</td><td align="right" class='awrnc'>50.07</td></tr>
<tr><td scope="row" class='awrc'>Client Total Bytes Acked</td><td align="right" class='awrc'>3,945,649</td><td align="right" class='awrc'>5,971.16</td><td align="right" class='awrc'>97.40</td></tr>
<tr><td scope="row" class='awrnc'>Client Total Bytes Received</td><td align="right" class='awrnc'>1,528,196</td><td align="right" class='awrnc'>2,312.70</td><td align="right" class='awrnc'>37.73</td></tr>
<tr><td scope="row" class='awrc'>Client Total Number of Retransmitted Packets</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Commit SCN cached</td><td align="right" class='awrnc'>185</td><td align="right" class='awrnc'>0.28</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DBWR checkpoint buffers written</td><td align="right" class='awrc'>238,123</td><td align="right" class='awrc'>360.36</td><td align="right" class='awrc'>5.88</td></tr>
<tr><td scope="row" class='awrnc'>DBWR checkpoints</td><td align="right" class='awrnc'>231</td><td align="right" class='awrnc'>0.35</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>DBWR fusion writes</td><td align="right" class='awrc'>226</td><td align="right" class='awrc'>0.34</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>DBWR object drop buffers written</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DBWR parallel query checkpoint buffers written</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DBWR thread checkpoint buffers written</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DBWR transaction table writes</td><td align="right" class='awrc'>565</td><td align="right" class='awrc'>0.86</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>DBWR undo block writes</td><td align="right" class='awrnc'>113,892</td><td align="right" class='awrnc'>172.36</td><td align="right" class='awrnc'>2.81</td></tr>
<tr><td scope="row" class='awrc'>DFO trees parallelized</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DML statements retried</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Effective IO time</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>HSC Heap Segment Block Changes</td><td align="right" class='awrnc'>2,527,787</td><td align="right" class='awrnc'>3,825.44</td><td align="right" class='awrnc'>62.40</td></tr>
<tr><td scope="row" class='awrc'>Heap Segment Array Inserts</td><td align="right" class='awrc'>194</td><td align="right" class='awrc'>0.29</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Heap Segment Array Updates</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Heatmap BlkLevel Flushed</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Heatmap BlkLevel Flushed to SYSAUX</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Heatmap BlkLevel Ranges Flushed</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Heatmap Blklevel Flush Task Count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc myinst</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc req</td><td align="right" class='awrnc'>559</td><td align="right" class='awrnc'>0.85</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc search FFB</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc space (block)</td><td align="right" class='awrnc'>577,306,624</td><td align="right" class='awrnc'>873,669.19</td><td align="right" class='awrnc'>14,251.67</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc steal</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc time (ms)</td><td align="right" class='awrnc'>7,335,251</td><td align="right" class='awrnc'>11,100.83</td><td align="right" class='awrnc'>181.08</td></tr>
<tr><td scope="row" class='awrc'>KTFB apply req</td><td align="right" class='awrc'>673</td><td align="right" class='awrc'>1.02</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>KTFB apply time (ms)</td><td align="right" class='awrnc'>30,861</td><td align="right" class='awrnc'>46.70</td><td align="right" class='awrnc'>0.76</td></tr>
<tr><td scope="row" class='awrc'>KTFB commit req</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KTFB commit time (ms)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KTFB free req</td><td align="right" class='awrc'>130</td><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KTFB free space (block)</td><td align="right" class='awrnc'>2,480</td><td align="right" class='awrnc'>3.75</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>KTFB free time (ms)</td><td align="right" class='awrc'>725</td><td align="right" class='awrc'>1.10</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>LOB table id lookup cache misses</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Number of read IOs issued</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX local messages recv'd</td><td align="right" class='awrnc'>182</td><td align="right" class='awrnc'>0.28</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX local messages sent</td><td align="right" class='awrc'>182</td><td align="right" class='awrc'>0.28</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX remote messages recv'd</td><td align="right" class='awrnc'>468</td><td align="right" class='awrnc'>0.71</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>PX remote messages sent</td><td align="right" class='awrc'>572</td><td align="right" class='awrc'>0.87</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Parallel operations downgraded to serial</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Parallel operations not downgraded</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Requests to/from client</td><td align="right" class='awrnc'>881</td><td align="right" class='awrnc'>1.33</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>SMON posted for undo segment shrink</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net roundtrips to/from client</td><td align="right" class='awrnc'>631</td><td align="right" class='awrnc'>0.95</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>TBS Extension: tasks created</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>TBS Extension: tasks executed</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>active txn count during cleanout</td><td align="right" class='awrc'>428</td><td align="right" class='awrc'>0.65</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>background checkpoints completed</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>background checkpoints started</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>background timeouts</td><td align="right" class='awrnc'>6,376</td><td align="right" class='awrnc'>9.65</td><td align="right" class='awrnc'>0.16</td></tr>
<tr><td scope="row" class='awrc'>blocks cleaned out using minact</td><td align="right" class='awrc'>245,470</td><td align="right" class='awrc'>371.48</td><td align="right" class='awrc'>6.06</td></tr>
<tr><td scope="row" class='awrnc'>branch node splits</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>buffer is not pinned count</td><td align="right" class='awrc'>39,064,062</td><td align="right" class='awrc'>59,117.75</td><td align="right" class='awrc'>964.35</td></tr>
<tr><td scope="row" class='awrnc'>buffer is pinned count</td><td align="right" class='awrnc'>16,820,780</td><td align="right" class='awrnc'>25,455.79</td><td align="right" class='awrnc'>415.25</td></tr>
<tr><td scope="row" class='awrc'>bytes received via SQL*Net from client</td><td align="right" class='awrc'>655,751</td><td align="right" class='awrc'>992.38</td><td align="right" class='awrc'>16.19</td></tr>
<tr><td scope="row" class='awrnc'>bytes sent via SQL*Net to client</td><td align="right" class='awrnc'>153,691</td><td align="right" class='awrnc'>232.59</td><td align="right" class='awrnc'>3.79</td></tr>
<tr><td scope="row" class='awrc'>calls to get snapshot scn: kcmgss</td><td align="right" class='awrc'>337,536</td><td align="right" class='awrc'>510.81</td><td align="right" class='awrc'>8.33</td></tr>
<tr><td scope="row" class='awrnc'>calls to kcmgas</td><td align="right" class='awrnc'>64,001</td><td align="right" class='awrnc'>96.86</td><td align="right" class='awrnc'>1.58</td></tr>
<tr><td scope="row" class='awrc'>calls to kcmgcs</td><td align="right" class='awrc'>6,654</td><td align="right" class='awrc'>10.07</td><td align="right" class='awrc'>0.16</td></tr>
<tr><td scope="row" class='awrnc'>cell physical IO interconnect bytes</td><td align="right" class='awrnc'>170,136,403,968</td><td align="right" class='awrnc'>257,476,579.29</td><td align="right" class='awrnc'>4,200,069.22</td></tr>
<tr><td scope="row" class='awrc'>change write time</td><td align="right" class='awrc'>7,319</td><td align="right" class='awrc'>11.08</td><td align="right" class='awrc'>0.18</td></tr>
<tr><td scope="row" class='awrnc'>cleanout - number of ktugct calls</td><td align="right" class='awrnc'>19,078</td><td align="right" class='awrnc'>28.87</td><td align="right" class='awrnc'>0.47</td></tr>
<tr><td scope="row" class='awrc'>cleanouts and rollbacks - consistent read gets</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>cleanouts only - consistent read gets</td><td align="right" class='awrnc'>279</td><td align="right" class='awrnc'>0.42</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>cluster key scan block gets</td><td align="right" class='awrc'>1,772</td><td align="right" class='awrc'>2.68</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>cluster key scans</td><td align="right" class='awrnc'>1,396</td><td align="right" class='awrnc'>2.11</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>commit batch/immediate performed</td><td align="right" class='awrc'>38</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit batch/immediate requested</td><td align="right" class='awrnc'>38</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: block lost</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: buffer being written</td><td align="right" class='awrnc'>200</td><td align="right" class='awrnc'>0.30</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: callback failure</td><td align="right" class='awrc'>73</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: cannot pin</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit cleanouts</td><td align="right" class='awrc'>2,533,404</td><td align="right" class='awrc'>3,833.94</td><td align="right" class='awrc'>62.54</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanouts successfully completed</td><td align="right" class='awrnc'>2,533,127</td><td align="right" class='awrnc'>3,833.52</td><td align="right" class='awrnc'>62.53</td></tr>
<tr><td scope="row" class='awrc'>commit immediate performed</td><td align="right" class='awrc'>38</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit immediate requested</td><td align="right" class='awrnc'>38</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit txn count during cleanout</td><td align="right" class='awrc'>586</td><td align="right" class='awrc'>0.89</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>consistent changes</td><td align="right" class='awrnc'>30,625</td><td align="right" class='awrnc'>46.35</td><td align="right" class='awrnc'>0.76</td></tr>
<tr><td scope="row" class='awrc'>consistent gets</td><td align="right" class='awrc'>14,847,668</td><td align="right" class='awrc'>22,469.78</td><td align="right" class='awrc'>366.54</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets direct</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>consistent gets examination</td><td align="right" class='awrc'>317,763</td><td align="right" class='awrc'>480.89</td><td align="right" class='awrc'>7.84</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets examination (fastpath)</td><td align="right" class='awrnc'>317,409</td><td align="right" class='awrnc'>480.35</td><td align="right" class='awrnc'>7.84</td></tr>
<tr><td scope="row" class='awrc'>consistent gets from cache</td><td align="right" class='awrc'>14,847,673</td><td align="right" class='awrc'>22,469.78</td><td align="right" class='awrc'>366.54</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets pin</td><td align="right" class='awrnc'>14,529,910</td><td align="right" class='awrnc'>21,988.90</td><td align="right" class='awrnc'>358.69</td></tr>
<tr><td scope="row" class='awrc'>consistent gets pin (fastpath)</td><td align="right" class='awrc'>13,812,238</td><td align="right" class='awrc'>20,902.80</td><td align="right" class='awrc'>340.98</td></tr>
<tr><td scope="row" class='awrnc'>cursor authentications</td><td align="right" class='awrnc'>115</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>cursor reload failures</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>data blocks consistent reads - undo records applied</td><td align="right" class='awrnc'>64</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>db block changes</td><td align="right" class='awrc'>5,286,019</td><td align="right" class='awrc'>7,999.62</td><td align="right" class='awrc'>130.49</td></tr>
<tr><td scope="row" class='awrnc'>db block gets</td><td align="right" class='awrnc'>2,879,846</td><td align="right" class='awrnc'>4,358.23</td><td align="right" class='awrnc'>71.09</td></tr>
<tr><td scope="row" class='awrc'>db block gets direct</td><td align="right" class='awrc'>995</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>db block gets from cache</td><td align="right" class='awrnc'>2,878,851</td><td align="right" class='awrnc'>4,356.72</td><td align="right" class='awrnc'>71.07</td></tr>
<tr><td scope="row" class='awrc'>db block gets from cache (fastpath)</td><td align="right" class='awrc'>285,207</td><td align="right" class='awrc'>431.62</td><td align="right" class='awrc'>7.04</td></tr>
<tr><td scope="row" class='awrnc'>deferred (CURRENT) block cleanout applications</td><td align="right" class='awrnc'>257,138</td><td align="right" class='awrnc'>389.14</td><td align="right" class='awrnc'>6.35</td></tr>
<tr><td scope="row" class='awrc'>dirty buffers inspected</td><td align="right" class='awrc'>2,156,891</td><td align="right" class='awrc'>3,264.14</td><td align="right" class='awrc'>53.25</td></tr>
<tr><td scope="row" class='awrnc'>enqueue conversions</td><td align="right" class='awrnc'>1,289</td><td align="right" class='awrnc'>1.95</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>enqueue releases</td><td align="right" class='awrc'>95,535</td><td align="right" class='awrc'>144.58</td><td align="right" class='awrc'>2.36</td></tr>
<tr><td scope="row" class='awrnc'>enqueue requests</td><td align="right" class='awrnc'>94,981</td><td align="right" class='awrnc'>143.74</td><td align="right" class='awrnc'>2.34</td></tr>
<tr><td scope="row" class='awrc'>enqueue timeouts</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enqueue waits</td><td align="right" class='awrnc'>867</td><td align="right" class='awrnc'>1.31</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>exchange deadlocks</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>execute count</td><td align="right" class='awrnc'>279,199</td><td align="right" class='awrnc'>422.53</td><td align="right" class='awrnc'>6.89</td></tr>
<tr><td scope="row" class='awrc'>failed probes on index block reclamation</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>fastpath consistent get quota limit</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>file io service time</td><td align="right" class='awrc'>519,331,872</td><td align="right" class='awrc'>785,932.88</td><td align="right" class='awrc'>12,820.48</td></tr>
<tr><td scope="row" class='awrnc'>free buffer inspected</td><td align="right" class='awrnc'>15,452,294</td><td align="right" class='awrnc'>23,384.79</td><td align="right" class='awrnc'>381.46</td></tr>
<tr><td scope="row" class='awrc'>free buffer requested</td><td align="right" class='awrc'>15,091,749</td><td align="right" class='awrc'>22,839.16</td><td align="right" class='awrc'>372.56</td></tr>
<tr><td scope="row" class='awrnc'>gc blocks compressed</td><td align="right" class='awrnc'>50,411</td><td align="right" class='awrnc'>76.29</td><td align="right" class='awrnc'>1.24</td></tr>
<tr><td scope="row" class='awrc'>gc blocks lost</td><td align="right" class='awrc'>4,191</td><td align="right" class='awrc'>6.34</td><td align="right" class='awrc'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>gc cleanout applied</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cleanout saved</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr anti locks created</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr anti locks expanded</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr anti locks shrunk</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr block build time</td><td align="right" class='awrc'>213</td><td align="right" class='awrc'>0.32</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block flush time</td><td align="right" class='awrnc'>110</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr block receive time</td><td align="right" class='awrc'>170,805</td><td align="right" class='awrc'>258.49</td><td align="right" class='awrc'>4.22</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks built</td><td align="right" class='awrnc'>33,448</td><td align="right" class='awrnc'>50.62</td><td align="right" class='awrnc'>0.83</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks flushed</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks received</td><td align="right" class='awrnc'>26,767</td><td align="right" class='awrnc'>40.51</td><td align="right" class='awrnc'>0.66</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks served</td><td align="right" class='awrc'>33,524</td><td align="right" class='awrc'>50.73</td><td align="right" class='awrc'>0.83</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multiblock grant time</td><td align="right" class='awrnc'>53,087,465</td><td align="right" class='awrnc'>80,340.12</td><td align="right" class='awrnc'>1,310.54</td></tr>
<tr><td scope="row" class='awrc'>gc cr multiblock grants received</td><td align="right" class='awrc'>12,203,384</td><td align="right" class='awrc'>18,468.04</td><td align="right" class='awrc'>301.26</td></tr>
<tr><td scope="row" class='awrnc'>gc current block flush time</td><td align="right" class='awrnc'>138</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current block pin time</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current block receive time</td><td align="right" class='awrnc'>61,868</td><td align="right" class='awrnc'>93.63</td><td align="right" class='awrnc'>1.53</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks flushed</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks pinned</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks received</td><td align="right" class='awrc'>23,633</td><td align="right" class='awrc'>35.77</td><td align="right" class='awrc'>0.58</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks served</td><td align="right" class='awrnc'>17,638</td><td align="right" class='awrnc'>26.69</td><td align="right" class='awrnc'>0.44</td></tr>
<tr><td scope="row" class='awrc'>gc force cr read cr</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc force cr read current</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc kbytes saved</td><td align="right" class='awrc'>215,921</td><td align="right" class='awrc'>326.76</td><td align="right" class='awrc'>5.33</td></tr>
<tr><td scope="row" class='awrnc'>gc kbytes sent</td><td align="right" class='awrnc'>193,375</td><td align="right" class='awrnc'>292.64</td><td align="right" class='awrnc'>4.77</td></tr>
<tr><td scope="row" class='awrc'>gc local grants</td><td align="right" class='awrc'>7,654,449</td><td align="right" class='awrc'>11,583.89</td><td align="right" class='awrc'>188.96</td></tr>
<tr><td scope="row" class='awrnc'>gc merge pi bg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc merge pi fg</td><td align="right" class='awrc'>248</td><td align="right" class='awrc'>0.38</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc no change made</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc read waits</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc reader bypass grants</td><td align="right" class='awrnc'>644</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gc reader bypass waits</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc remote grants</td><td align="right" class='awrnc'>7,567,240</td><td align="right" class='awrnc'>11,451.91</td><td align="right" class='awrnc'>186.81</td></tr>
<tr><td scope="row" class='awrc'>gc status messages received</td><td align="right" class='awrc'>11,659</td><td align="right" class='awrc'>17.64</td><td align="right" class='awrc'>0.29</td></tr>
<tr><td scope="row" class='awrnc'>gc status messages sent</td><td align="right" class='awrnc'>34,050</td><td align="right" class='awrnc'>51.53</td><td align="right" class='awrnc'>0.84</td></tr>
<tr><td scope="row" class='awrc'>gcs affinity lock failures</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs affinity lock grants</td><td align="right" class='awrnc'>98,069</td><td align="right" class='awrnc'>148.41</td><td align="right" class='awrnc'>2.42</td></tr>
<tr><td scope="row" class='awrc'>gcs anti-locks created</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs data block access records</td><td align="right" class='awrnc'>14,979,878</td><td align="right" class='awrnc'>22,669.86</td><td align="right" class='awrnc'>369.80</td></tr>
<tr><td scope="row" class='awrc'>gcs messages sent</td><td align="right" class='awrc'>22,699,040</td><td align="right" class='awrc'>34,351.68</td><td align="right" class='awrc'>560.36</td></tr>
<tr><td scope="row" class='awrnc'>gcs read-mostly lock failures</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly lock grants</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs stats management (SCM) process posts</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ges messages sent</td><td align="right" class='awrc'>11,756</td><td align="right" class='awrc'>17.79</td><td align="right" class='awrc'>0.29</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue get time</td><td align="right" class='awrnc'>38,536</td><td align="right" class='awrnc'>58.32</td><td align="right" class='awrnc'>0.95</td></tr>
<tr><td scope="row" class='awrc'>global enqueue gets async</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue gets sync</td><td align="right" class='awrnc'>93,159</td><td align="right" class='awrnc'>140.98</td><td align="right" class='awrnc'>2.30</td></tr>
<tr><td scope="row" class='awrc'>global enqueue releases</td><td align="right" class='awrc'>96,095</td><td align="right" class='awrc'>145.43</td><td align="right" class='awrc'>2.37</td></tr>
<tr><td scope="row" class='awrnc'>heap block compress</td><td align="right" class='awrnc'>655</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>hot buffers moved to head of LRU</td><td align="right" class='awrc'>1,198,714</td><td align="right" class='awrc'>1,814.08</td><td align="right" class='awrc'>29.59</td></tr>
<tr><td scope="row" class='awrnc'>immediate (CR) block cleanout applications</td><td align="right" class='awrnc'>286</td><td align="right" class='awrnc'>0.43</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>immediate (CURRENT) block cleanout applications</td><td align="right" class='awrc'>740</td><td align="right" class='awrc'>1.12</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>index crx state invalidation</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>index crx upgrade (positioned)</td><td align="right" class='awrc'>65</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>index crx upgrade (prefetch)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>index fast full scans (full)</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>index fetch by key</td><td align="right" class='awrnc'>16,979</td><td align="right" class='awrnc'>25.70</td><td align="right" class='awrnc'>0.42</td></tr>
<tr><td scope="row" class='awrc'>index range scans</td><td align="right" class='awrc'>297,335</td><td align="right" class='awrc'>449.97</td><td align="right" class='awrc'>7.34</td></tr>
<tr><td scope="row" class='awrnc'>index reclamation/extension switch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>index split cancel wait noclean</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>leaf node 90-10 splits</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>leaf node splits</td><td align="right" class='awrc'>230</td><td align="right" class='awrc'>0.35</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>lob reads</td><td align="right" class='awrnc'>378</td><td align="right" class='awrnc'>0.57</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>lob writes</td><td align="right" class='awrc'>6,782</td><td align="right" class='awrc'>10.26</td><td align="right" class='awrc'>0.17</td></tr>
<tr><td scope="row" class='awrnc'>lob writes unaligned</td><td align="right" class='awrnc'>6,782</td><td align="right" class='awrnc'>10.26</td><td align="right" class='awrnc'>0.17</td></tr>
<tr><td scope="row" class='awrc'>logical read bytes from cache</td><td align="right" class='awrc'>145,215,684,608</td><td align="right" class='awrc'>219,762,713.09</td><td align="right" class='awrc'>3,584,864.34</td></tr>
<tr><td scope="row" class='awrnc'>logons cumulative</td><td align="right" class='awrnc'>105</td><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>max cf enq hold time</td><td align="right" class='awrc'>1,675</td><td align="right" class='awrc'>2.53</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>messages received</td><td align="right" class='awrnc'>278,713</td><td align="right" class='awrnc'>421.79</td><td align="right" class='awrnc'>6.88</td></tr>
<tr><td scope="row" class='awrc'>messages sent</td><td align="right" class='awrc'>278,713</td><td align="right" class='awrc'>421.79</td><td align="right" class='awrc'>6.88</td></tr>
<tr><td scope="row" class='awrnc'>min active SCN optimization applied on CR</td><td align="right" class='awrnc'>64</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>no work - consistent read gets</td><td align="right" class='awrc'>14,474,864</td><td align="right" class='awrc'>21,905.59</td><td align="right" class='awrc'>357.33</td></tr>
<tr><td scope="row" class='awrnc'>non-idle wait count</td><td align="right" class='awrnc'>7,235,984</td><td align="right" class='awrnc'>10,950.60</td><td align="right" class='awrnc'>178.63</td></tr>
<tr><td scope="row" class='awrc'>opened cursors cumulative</td><td align="right" class='awrc'>319,792</td><td align="right" class='awrc'>483.96</td><td align="right" class='awrc'>7.89</td></tr>
<tr><td scope="row" class='awrnc'>parse count (describe)</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>parse count (failures)</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>parse count (hard)</td><td align="right" class='awrnc'>335</td><td align="right" class='awrnc'>0.51</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>parse count (total)</td><td align="right" class='awrc'>11,400</td><td align="right" class='awrc'>17.25</td><td align="right" class='awrc'>0.28</td></tr>
<tr><td scope="row" class='awrnc'>parse time cpu</td><td align="right" class='awrnc'>110</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>parse time elapsed</td><td align="right" class='awrc'>438</td><td align="right" class='awrc'>0.66</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>physical read IO requests</td><td align="right" class='awrnc'>14,932,644</td><td align="right" class='awrnc'>22,598.37</td><td align="right" class='awrnc'>368.63</td></tr>
<tr><td scope="row" class='awrc'>physical read bytes</td><td align="right" class='awrc'>122,329,276,416</td><td align="right" class='awrc'>185,127,479.50</td><td align="right" class='awrc'>3,019,879.44</td></tr>
<tr><td scope="row" class='awrnc'>physical read total IO requests</td><td align="right" class='awrnc'>14,938,237</td><td align="right" class='awrnc'>22,606.84</td><td align="right" class='awrnc'>368.77</td></tr>
<tr><td scope="row" class='awrc'>physical read total bytes</td><td align="right" class='awrc'>123,970,706,432</td><td align="right" class='awrc'>187,611,543.91</td><td align="right" class='awrc'>3,060,400.57</td></tr>
<tr><td scope="row" class='awrnc'>physical read total multi block requests</td><td align="right" class='awrnc'>1,504</td><td align="right" class='awrnc'>2.28</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>physical reads</td><td align="right" class='awrc'>14,932,774</td><td align="right" class='awrc'>22,598.57</td><td align="right" class='awrc'>368.64</td></tr>
<tr><td scope="row" class='awrnc'>physical reads cache</td><td align="right" class='awrnc'>14,932,773</td><td align="right" class='awrnc'>22,598.57</td><td align="right" class='awrnc'>368.64</td></tr>
<tr><td scope="row" class='awrc'>physical reads cache prefetch</td><td align="right" class='awrc'>11,985,013</td><td align="right" class='awrc'>18,137.57</td><td align="right" class='awrc'>295.87</td></tr>
<tr><td scope="row" class='awrnc'>physical reads direct</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical reads direct (lob)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical reads direct temporary tablespace</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical reads prefetch warmup</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical write IO requests</td><td align="right" class='awrnc'>2,383,820</td><td align="right" class='awrnc'>3,607.56</td><td align="right" class='awrnc'>58.85</td></tr>
<tr><td scope="row" class='awrc'>physical write bytes</td><td align="right" class='awrc'>20,916,281,344</td><td align="right" class='awrc'>31,653,734.57</td><td align="right" class='awrc'>516,349.40</td></tr>
<tr><td scope="row" class='awrnc'>physical write total IO requests</td><td align="right" class='awrnc'>2,426,482</td><td align="right" class='awrnc'>3,672.13</td><td align="right" class='awrnc'>59.90</td></tr>
<tr><td scope="row" class='awrc'>physical write total bytes</td><td align="right" class='awrc'>23,077,233,152</td><td align="right" class='awrc'>34,924,019.27</td><td align="right" class='awrc'>569,695.69</td></tr>
<tr><td scope="row" class='awrnc'>physical write total multi block requests</td><td align="right" class='awrnc'>8,826</td><td align="right" class='awrnc'>13.36</td><td align="right" class='awrnc'>0.22</td></tr>
<tr><td scope="row" class='awrc'>physical writes</td><td align="right" class='awrc'>2,553,257</td><td align="right" class='awrc'>3,863.98</td><td align="right" class='awrc'>63.03</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct</td><td align="right" class='awrnc'>1,116</td><td align="right" class='awrnc'>1.69</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>physical writes direct (lob)</td><td align="right" class='awrc'>121</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct temporary tablespace</td><td align="right" class='awrnc'>185</td><td align="right" class='awrnc'>0.28</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical writes from cache</td><td align="right" class='awrc'>2,552,141</td><td align="right" class='awrc'>3,862.29</td><td align="right" class='awrc'>63.00</td></tr>
<tr><td scope="row" class='awrnc'>physical writes non checkpoint</td><td align="right" class='awrnc'>2,520,168</td><td align="right" class='awrnc'>3,813.91</td><td align="right" class='awrnc'>62.21</td></tr>

Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
<tr><td scope="row" class='awrc'>pinned buffers inspected</td><td align="right" class='awrc'>17,888</td><td align="right" class='awrc'>27.07</td><td align="right" class='awrc'>0.44</td></tr>
The default report file name is awrrpt_rac_135_136.txt.  To use this name,
press <return> to continue, otherwise enter an alternative.

<tr><td scope="row" class='awrnc'>prefetch warmup blocks aged out before use</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>prefetch warmup blocks flushed out before use</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>prefetched blocks aged out before use</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>process last non-idle time</td><td align="right" class='awrc'>657</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>queries parallelized</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>recursive calls</td><td align="right" class='awrc'>456,734</td><td align="right" class='awrc'>691.20</td><td align="right" class='awrc'>11.28</td></tr>
<tr><td scope="row" class='awrnc'>recursive cpu usage</td><td align="right" class='awrnc'>362,531</td><td align="right" class='awrnc'>548.64</td><td align="right" class='awrnc'>8.95</td></tr>
<tr><td scope="row" class='awrc'>redo KB read</td><td align="right" class='awrc'>892,928</td><td align="right" class='awrc'>1,351.32</td><td align="right" class='awrc'>22.04</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks checksummed by FG (exclusive)</td><td align="right" class='awrnc'>1,529,288</td><td align="right" class='awrnc'>2,314.35</td><td align="right" class='awrnc'>37.75</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written</td><td align="right" class='awrc'>4,198,713</td><td align="right" class='awrc'>6,354.14</td><td align="right" class='awrc'>103.65</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks written (group 0)</td><td align="right" class='awrnc'>1,913,202</td><td align="right" class='awrnc'>2,895.35</td><td align="right" class='awrnc'>47.23</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written (group 1)</td><td align="right" class='awrc'>821,934</td><td align="right" class='awrc'>1,243.88</td><td align="right" class='awrc'>20.29</td></tr>
<tr><td scope="row" class='awrnc'>redo entries</td><td align="right" class='awrnc'>2,836,587</td><td align="right" class='awrnc'>4,292.76</td><td align="right" class='awrnc'>70.03</td></tr>
<tr><td scope="row" class='awrc'>redo ordering marks</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo size</td><td align="right" class='awrnc'>2,070,572,496</td><td align="right" class='awrnc'>3,133,508.83</td><td align="right" class='awrnc'>51,115.15</td></tr>
<tr><td scope="row" class='awrc'>redo size for direct writes</td><td align="right" class='awrc'>3,704</td><td align="right" class='awrc'>5.61</td><td align="right" class='awrc'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>redo subscn max counts</td><td align="right" class='awrnc'>438</td><td align="right" class='awrnc'>0.66</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>redo synch long waits</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time</td><td align="right" class='awrnc'>342</td><td align="right" class='awrnc'>0.52</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>redo synch time (usec)</td><td align="right" class='awrc'>3,249,823</td><td align="right" class='awrc'>4,918.13</td><td align="right" class='awrc'>80.23</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead (usec)</td><td align="right" class='awrnc'>26,438</td><td align="right" class='awrnc'>40.01</td><td align="right" class='awrnc'>0.65</td></tr>
<tr><td scope="row" class='awrc'>redo synch time overhead count (  2ms)</td><td align="right" class='awrc'>138</td><td align="right" class='awrc'>0.21</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead count (  8ms)</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo synch time overhead count ( 32ms)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo synch writes</td><td align="right" class='awrnc'>251</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>redo wastage</td><td align="right" class='awrc'>10,169,536</td><td align="right" class='awrc'>15,390.11</td><td align="right" class='awrc'>251.05</td></tr>
<tr><td scope="row" class='awrnc'>redo write active strands</td><td align="right" class='awrnc'>41,873</td><td align="right" class='awrnc'>63.37</td><td align="right" class='awrnc'>1.03</td></tr>
<tr><td scope="row" class='awrc'>redo write broadcast ack count</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo write broadcast ack time</td><td align="right" class='awrnc'>399,855</td><td align="right" class='awrnc'>605.12</td><td align="right" class='awrnc'>9.87</td></tr>
<tr><td scope="row" class='awrc'>redo write finish time</td><td align="right" class='awrc'>542,041,130</td><td align="right" class='awrc'>820,300.02</td><td align="right" class='awrc'>13,381.09</td></tr>
<tr><td scope="row" class='awrnc'>redo write gather time</td><td align="right" class='awrnc'>28,763,206</td><td align="right" class='awrnc'>43,528.91</td><td align="right" class='awrnc'>710.06</td></tr>
<tr><td scope="row" class='awrc'>redo write info find</td><td align="right" class='awrc'>141</td><td align="right" class='awrc'>0.21</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo write info find fail</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write schedule time</td><td align="right" class='awrc'>29,129,037</td><td align="right" class='awrc'>44,082.54</td><td align="right" class='awrc'>719.09</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (   4KB)</td><td align="right" class='awrnc'>669</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (   8KB)</td><td align="right" class='awrc'>669</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (  16KB)</td><td align="right" class='awrnc'>1,523</td><td align="right" class='awrnc'>2.30</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (  32KB)</td><td align="right" class='awrc'>3,197</td><td align="right" class='awrc'>4.84</td><td align="right" class='awrc'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 128KB)</td><td align="right" class='awrnc'>11,519</td><td align="right" class='awrnc'>17.43</td><td align="right" class='awrnc'>0.28</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 256KB)</td><td align="right" class='awrc'>2,749</td><td align="right" class='awrc'>4.16</td><td align="right" class='awrc'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 512KB)</td><td align="right" class='awrnc'>630</td><td align="right" class='awrnc'>0.95</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (1024KB)</td><td align="right" class='awrc'>299</td><td align="right" class='awrc'>0.45</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (inf)</td><td align="right" class='awrnc'>185</td><td align="right" class='awrnc'>0.28</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write time</td><td align="right" class='awrc'>54,287</td><td align="right" class='awrc'>82.16</td><td align="right" class='awrc'>1.34</td></tr>
<tr><td scope="row" class='awrnc'>redo write time (usec)</td><td align="right" class='awrnc'>542,863,907</td><td align="right" class='awrnc'>821,545.18</td><td align="right" class='awrnc'>13,401.40</td></tr>
<tr><td scope="row" class='awrc'>redo write total time</td><td align="right" class='awrc'>572,016,363</td><td align="right" class='awrc'>865,663.16</td><td align="right" class='awrc'>14,121.07</td></tr>
<tr><td scope="row" class='awrnc'>redo write worker delay (usec)</td><td align="right" class='awrnc'>26,347,670</td><td align="right" class='awrnc'>39,873.35</td><td align="right" class='awrnc'>650.43</td></tr>
<tr><td scope="row" class='awrc'>redo write worker delay count</td><td align="right" class='awrc'>16,581</td><td align="right" class='awrc'>25.09</td><td align="right" class='awrc'>0.41</td></tr>
<tr><td scope="row" class='awrnc'>redo writes</td><td align="right" class='awrnc'>21,438</td><td align="right" class='awrnc'>32.44</td><td align="right" class='awrnc'>0.53</td></tr>
<tr><td scope="row" class='awrc'>redo writes (group 0)</td><td align="right" class='awrc'>9,636</td><td align="right" class='awrc'>14.58</td><td align="right" class='awrc'>0.24</td></tr>
<tr><td scope="row" class='awrnc'>redo writes (group 1)</td><td align="right" class='awrnc'>6,945</td><td align="right" class='awrnc'>10.51</td><td align="right" class='awrnc'>0.17</td></tr>
<tr><td scope="row" class='awrc'>redo writes adaptive all</td><td align="right" class='awrc'>21,438</td><td align="right" class='awrc'>32.44</td><td align="right" class='awrc'>0.53</td></tr>
<tr><td scope="row" class='awrnc'>redo writes adaptive worker</td><td align="right" class='awrnc'>16,581</td><td align="right" class='awrnc'>25.09</td><td align="right" class='awrnc'>0.41</td></tr>
<tr><td scope="row" class='awrc'>rollback changes - undo records applied</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>rollbacks only - consistent read gets</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>root node splits</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>rows fetched via callback</td><td align="right" class='awrnc'>3,944</td><td align="right" class='awrnc'>5.97</td><td align="right" class='awrnc'>0.10</td></tr>
<tr><td scope="row" class='awrc'>saved cleanout failures: callback failure</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>saved cleanouts</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>saved cleanouts successfully completed</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>securefile allocation bytes</td><td align="right" class='awrnc'>991,232</td><td align="right" class='awrnc'>1,500.08</td><td align="right" class='awrnc'>24.47</td></tr>
<tr><td scope="row" class='awrc'>securefile allocation chunks</td><td align="right" class='awrc'>47</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>securefile bytes non-transformed</td><td align="right" class='awrnc'>835,563</td><td align="right" class='awrnc'>1,264.50</td><td align="right" class='awrnc'>20.63</td></tr>
<tr><td scope="row" class='awrc'>securefile direct read bytes</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>

Using the report name awr_rac.txt
<tr><td scope="row" class='awrnc'>securefile direct read ops</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>securefile direct write bytes</td><td align="right" class='awrc'>991,232</td><td align="right" class='awrc'>1,500.08</td><td align="right" class='awrc'>24.47</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct write ops</td><td align="right" class='awrnc'>47</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>securefile number of non-transformed flushes</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment cfs allocations</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment chunks allocation from dispenser</td><td align="right" class='awrc'>47</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser allocations</td><td align="right" class='awrnc'>47</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment dispenser load empty</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser load tasks</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc ops</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc tasks</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc time (ms)</td><td align="right" class='awrc'>599</td><td align="right" class='awrc'>0.91</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc ufs2cfs bytes</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment total chunk allocation</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>session cursor cache hits</td><td align="right" class='awrnc'>317,399</td><td align="right" class='awrnc'>480.34</td><td align="right" class='awrnc'>7.84</td></tr>
<tr><td scope="row" class='awrc'>session logical reads</td><td align="right" class='awrc'>17,727,484</td><td align="right" class='awrc'>26,827.96</td><td align="right" class='awrc'>437.63</td></tr>
<tr><td scope="row" class='awrnc'>shared hash latch upgrades - no wait</td><td align="right" class='awrnc'>2,350,318</td><td align="right" class='awrnc'>3,556.86</td><td align="right" class='awrnc'>58.02</td></tr>
<tr><td scope="row" class='awrc'>shared hash latch upgrades - wait</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>shared io pool buffer get success</td><td align="right" class='awrnc'>47</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>sorts (memory)</td><td align="right" class='awrc'>1,713</td><td align="right" class='awrc'>2.59</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>sorts (rows)</td><td align="right" class='awrnc'>173,938</td><td align="right" class='awrnc'>263.23</td><td align="right" class='awrnc'>4.29</td></tr>
<tr><td scope="row" class='awrc'>sql area evicted</td><td align="right" class='awrc'>2,528</td><td align="right" class='awrc'>3.83</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>sql area purged</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>summed dirty queue length</td><td align="right" class='awrc'>28,018,437</td><td align="right" class='awrc'>42,401.81</td><td align="right" class='awrc'>691.68</td></tr>
<tr><td scope="row" class='awrnc'>switch current caused by our pin</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>switch current to new buffer</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>table fetch by rowid</td><td align="right" class='awrnc'>26,534,922</td><td align="right" class='awrnc'>40,156.73</td><td align="right" class='awrnc'>655.05</td></tr>
<tr><td scope="row" class='awrc'>table fetch continued row</td><td align="right" class='awrc'>110</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>table scan blocks gotten</td><td align="right" class='awrnc'>13,138</td><td align="right" class='awrnc'>19.88</td><td align="right" class='awrnc'>0.32</td></tr>
<tr><td scope="row" class='awrc'>table scan disk non-IMC rows gotten</td><td align="right" class='awrc'>331,263</td><td align="right" class='awrc'>501.32</td><td align="right" class='awrc'>8.18</td></tr>
<tr><td scope="row" class='awrnc'>table scan rows gotten</td><td align="right" class='awrnc'>331,263</td><td align="right" class='awrnc'>501.32</td><td align="right" class='awrnc'>8.18</td></tr>
<tr><td scope="row" class='awrc'>table scans (cache partitions)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>table scans (direct read)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>table scans (long tables)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>table scans (rowid ranges)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>table scans (short tables)</td><td align="right" class='awrc'>660</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>temp space allocated (bytes)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>total cf enq hold time</td><td align="right" class='awrc'>5,666</td><td align="right" class='awrc'>8.57</td><td align="right" class='awrc'>0.14</td></tr>
<tr><td scope="row" class='awrnc'>total number of cf enq holders</td><td align="right" class='awrnc'>262</td><td align="right" class='awrnc'>0.40</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>total number of times SMON posted</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction lock background get time</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>transaction lock background gets</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction lock foreground requests</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>transaction rollbacks</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction tables consistent reads - undo records applied</td><td align="right" class='awrnc'>22,207</td><td align="right" class='awrnc'>33.61</td><td align="right" class='awrnc'>0.55</td></tr>
<tr><td scope="row" class='awrc'>undo change vector size</td><td align="right" class='awrc'>865,917,952</td><td align="right" class='awrc'>1,310,440.25</td><td align="right" class='awrc'>21,376.47</td></tr>
<tr><td scope="row" class='awrnc'>user calls</td><td align="right" class='awrnc'>2,138</td><td align="right" class='awrnc'>3.24</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>user commits</td><td align="right" class='awrc'>40,508</td><td align="right" class='awrc'>61.30</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>user logons cumulative</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>user logouts cumulative</td><td align="right" class='awrc'>250</td><td align="right" class='awrc'>0.38</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>workarea executions - optimal</td><td align="right" class='awrnc'>1,459</td><td align="right" class='awrnc'>2.21</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>write clones created in background</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>write clones created in foreground</td><td align="right" class='awrnc'>200</td><td align="right" class='awrnc'>0.30</td><td align="right" class='awrnc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1300"></a>
<h3 class="awr">Instance Activity Stats - Absolute Values</h3>
<ul>
<li class="awr"> Statistics with absolute values (should not be diffed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays absolute values of instance-related features. For each instance, activity begin value and end value are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Begin Value</th><th class="awrbg" scope="col">End Value</th></tr>
<tr><td scope="row" class='awrc'>logons current</td><td align="right" class='awrc'>377</td><td align="right" class='awrc'>126</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors current</td><td align="right" class='awrnc'>1,304</td><td align="right" class='awrnc'>169</td></tr>
<tr><td scope="row" class='awrc'>session cursor cache count</td><td align="right" class='awrc'>331,622</td><td align="right" class='awrc'>332,176</td></tr>
<tr><td scope="row" class='awrnc'>session pga memory</td><td align="right" class='awrnc'>2,283,146,760</td><td align="right" class='awrnc'>736,231,120</td></tr>
<tr><td scope="row" class='awrc'>session pga memory max</td><td align="right" class='awrc'>2,838,766,344</td><td align="right" class='awrc'>967,889,200</td></tr>
<tr><td scope="row" class='awrnc'>session uga memory</td><td align="right" class='awrnc'>19,029,442,328</td><td align="right" class='awrnc'>18,377,328,472</td></tr>
<tr><td scope="row" class='awrc'>session uga memory max</td><td align="right" class='awrc'>456,624,501,656</td><td align="right" class='awrc'>457,263,389,016</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1400"></a>
<h3 class="awr">Instance Activity Stats - Thread Activity</h3>
<ul>
<li class="awr"> Statistics identified by '(derived)' come from sources other than SYSSTAT</li>
</ul>
<table border="0" class="tdiff" summary="This table displays thread activity stats in the instance. For each activity , total number of activity and activity per hour are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Hour</th></tr>
<tr><td scope="row" class='awrc'>log switches (derived)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="24"></a>
<h2 class="awr">
IO Stats
</h2>
<ul>
<li class="awr"><a class="awr" href="#8760">IOStat by Function summary</a></li>
<li class="awr"><a class="awr" href="#8770">IOStat by Filetype summary</a></li>
<li class="awr"><a class="awr" href="#8780">IOStat by Function/Filetype summary</a></li>
<li class="awr"><a class="awr" href="#1700">Tablespace IO Stats</a></li>
<li class="awr"><a class="awr" href="#1800">File IO Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8760"></a>
<h3 class="awr">IOStat by Function summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> ordered by (Data Read + Write) desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the IO Statistics for different functions. IO stats includes amount of reads and writes, requests per second, data per second, wait count and average wait time"><tr><th class="awrbg" scope="col">Function Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time </th></tr>
<tr><td scope="row" class='awrc'>Buffer Cache Reads</td><td align="right" class='awrc'>112.5G</td><td align="right" class='awrc'>22305.54</td><td align="right" class='awrc'>174.281M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>2.9M</td><td align="right" class='awrc'>4.55ms</td></tr>
<tr><td scope="row" class='awrnc'>DBWR</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>19.4G</td><td align="right" class='awrnc'>3602.92</td><td align="right" class='awrnc'>30.138M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>2G</td><td align="right" class='awrc'>62.94</td><td align="right" class='awrc'>3.043M</td><td align="right" class='awrc'>21.4K</td><td align="right" class='awrc'>23.68ms</td></tr>
<tr><td scope="row" class='awrnc'>Others</td><td align="right" class='awrnc'>1.5G</td><td align="right" class='awrnc'>8.42</td><td align="right" class='awrnc'>2.376M</td><td align="right" class='awrnc'>18M</td><td align="right" class='awrnc'>1.23</td><td align="right" class='awrnc'>.027M</td><td align="right" class='awrnc'>3500</td><td align="right" class='awrnc'>3.68ms</td></tr>
<tr><td scope="row" class='awrc'>Direct Writes</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>1M</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>.002M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Direct Reads</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TOTAL:</td><td align="right" class='awrc'>114G</td><td align="right" class='awrc'>22313.99</td><td align="right" class='awrc'>176.657M</td><td align="right" class='awrc'>21.4G</td><td align="right" class='awrc'>3667.16</td><td align="right" class='awrc'>33.211M</td><td align="right" class='awrc'>2.9M</td><td align="right" class='awrc'>4.69ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8770"></a>
<h3 class="awr">IOStat by Filetype summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> Small Read and Large Read are average service times </li>
<li class="awr"> Ordered by (Data Read + Write) desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays IO Statistics for different file types, such as data files, control files, log files and temp files. IO Statistics include amount of reads and writes, requests per second, data per second, wait count and average wait time"><tr><th class="awrbg" scope="col">Filetype Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Small Read</th><th class="awrbg" scope="col">Large Read</th></tr>
<tr><td scope="row" class='awrc'>Data File</td><td align="right" class='awrc'>112.4G</td><td align="right" class='awrc'>22299.00</td><td align="right" class='awrc'>174.226M</td><td align="right" class='awrc'>19.5G</td><td align="right" class='awrc'>3603.05</td><td align="right" class='awrc'>30.152M</td><td align="right" class='awrc'>595.88us</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Log File</td><td align="right" class='awrnc'>1.5G</td><td align="right" class='awrnc'>2.52</td><td align="right" class='awrnc'>2.284M</td><td align="right" class='awrnc'>2G</td><td align="right" class='awrnc'>62.95</td><td align="right" class='awrnc'>3.043M</td><td align="right" class='awrnc'>289.31us</td><td align="right" class='awrnc'>1721.36ms</td></tr>
<tr><td scope="row" class='awrc'>Control File</td><td align="right" class='awrc'>61M</td><td align="right" class='awrc'>5.90</td><td align="right" class='awrc'>.092M</td><td align="right" class='awrc'>11M</td><td align="right" class='awrc'>1.03</td><td align="right" class='awrc'>.017M</td><td align="right" class='awrc'>117.27us</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Temp File</td><td align="right" class='awrnc'>2M</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>.003M</td><td align="right" class='awrnc'>2M</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>.003M</td><td align="right" class='awrnc'>9.01us</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TOTAL:</td><td align="right" class='awrc'>114G</td><td align="right" class='awrc'>22307.59</td><td align="right" class='awrc'>176.605M</td><td align="right" class='awrc'>21.4G</td><td align="right" class='awrc'>3667.20</td><td align="right" class='awrc'>33.215M</td><td align="right" class='awrc'>595.74us</td><td align="right" class='awrc'>1721.36ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8780"></a>
<h3 class="awr">IOStat by Function/Filetype summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> Ordered by (Data Read + Write) desc for each function</li>
</ul>
<table border="0" class="tdiff" summary="IOStat by Function/Filetype summary. . 'Data' columns suffixed with M,G,T,P are in multiples of 1024 other columns suffixed with K,M,G,T,P are in multiples of 1000. Ordered by (Data Read + Write) desc for each function"><tr><th class="awrbg" scope="col">Function/File Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs	 per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time	</th></tr>
<tr><td scope="row" class='awrc'>
Buffer Cache Reads
</td><td align="right" class='awrc'>112.4G</td><td align="right" class='awrc'>22292.98</td><td align="right" class='awrc'>174.182M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>2.7M</td><td align="right" class='awrc'>3.60ms</td></tr>
<tr><td scope="row" class='awrnc'>
 Buffer Cache Reads (Data File)
</td><td align="right" class='awrnc'>112.4G</td><td align="right" class='awrnc'>22292.81</td><td align="right" class='awrnc'>174.179M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>2.7M</td><td align="right" class='awrnc'>3.60ms</td></tr>
<tr><td scope="row" class='awrc'>
 Buffer Cache Reads (Temp File)
</td><td align="right" class='awrc'>2M</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>.003M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>111</td><td align="right" class='awrc'>261.26us</td></tr>
<tr><td scope="row" class='awrnc'>
 DBWR (Data File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>19.4G</td><td align="right" class='awrnc'>3602.85</td><td align="right" class='awrnc'>30.138M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
DBWR
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>19.4G</td><td align="right" class='awrc'>3602.92</td><td align="right" class='awrc'>30.138M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
 DBWR (Temp File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
 LGWR (Log File)
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>2G</td><td align="right" class='awrc'>62.96</td><td align="right" class='awrc'>3.043M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
LGWR
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>2G</td><td align="right" class='awrnc'>62.96</td><td align="right" class='awrnc'>3.043M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
Others
</td><td align="right" class='awrc'>1.5G</td><td align="right" class='awrc'>8.42</td><td align="right" class='awrc'>2.376M</td><td align="right" class='awrc'>18M</td><td align="right" class='awrc'>1.23</td><td align="right" class='awrc'>.027M</td><td align="right" class='awrc'>3159</td><td align="right" class='awrc'>490.00us</td></tr>
<tr><td scope="row" class='awrnc'>
 Others (Log File)
</td><td align="right" class='awrnc'>1.5G</td><td align="right" class='awrnc'>2.52</td><td align="right" class='awrnc'>2.284M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>159</td><td align="right" class='awrnc'>787.91us</td></tr>
<tr><td scope="row" class='awrc'>
 Others (Control File)
</td><td align="right" class='awrc'>61M</td><td align="right" class='awrc'>5.90</td><td align="right" class='awrc'>.092M</td><td align="right" class='awrc'>10M</td><td align="right" class='awrc'>1.03</td><td align="right" class='awrc'>.015M</td><td align="right" class='awrc'>3000</td><td align="right" class='awrc'>474.24us</td></tr>
<tr><td scope="row" class='awrnc'>
 Others (Data File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>7M</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>.011M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
 Others (Temp File)
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>1M</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>.002M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
 Direct Writes (Data File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>1M</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>.002M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
Direct Writes
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>1M</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>.002M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
 Direct Reads (Data File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
Direct Reads
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
TOTAL:
</td><td align="right" class='awrnc'>113.9G</td><td align="right" class='awrnc'>22301.43</td><td align="right" class='awrnc'>176.558M</td><td align="right" class='awrnc'>21.4G</td><td align="right" class='awrnc'>3667.17</td><td align="right" class='awrnc'>33.211M</td><td align="right" class='awrnc'>2.7M</td><td align="right" class='awrnc'>3.59ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1700"></a>
<h3 class="awr">Tablespace IO Stats</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1800"></a>
<h3 class="awr">File IO Stats</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="25"></a>
<h2 class="awr">
Buffer Pool Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1900">Buffer Pool Statistics</a></li>
<li class="awr"><a class="awr" href="#1910">Checkpoint Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1900"></a>
<h3 class="awr">Buffer Pool Statistics</h3>
<ul>
<li class="awr"> Standard block size Pools  D: default,  K: keep,  R: recycle </li>
<li class="awr"> Default Pools for other block sizes: 2k, 4k, 8k, 16k, 32k</li>
</ul>
<table border="0" class="tdiff" summary="This table displays buffer pool statistics for different types of buffers, such as default, keep, and recycle. Statistics include number of buffers, % Pool hit, buffer gets, physical reads, physical writes, free buffer wait, etc."><tr><th class="awrbg" scope="col">P</th><th class="awrbg" scope="col">Number of Buffers</th><th class="awrbg" scope="col">Pool Hit%</th><th class="awrbg" scope="col">Buffer Gets</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">Free Buff Wait</th><th class="awrbg" scope="col">Writ Comp Wait</th><th class="awrbg" scope="col">Buffer Busy Waits</th></tr>
<tr><td scope="row" class='awrc'>D</td><td align="right" class='awrc'>4,088,354</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>17,783,133</td><td align="right" class='awrc'>14,988,863</td><td align="right" class='awrc'>2,552,142</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>19</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#25">Back to Buffer Pool Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1910"></a>
<h3 class="awr">Checkpoint Activity</h3>
<ul>
<li class="awr">Total Physical Writes:			  2,553,257</li>
</ul>
<table border="0" class="tdiff" summary="This table displays checkpoint activity statistics. Statistics include MTTR writes, log size writes, autotune checkpoint writes, etc."><tr><th class="awrbg" scope="col">MTTR Writes</th><th class="awrbg" scope="col">Log Size Writes</th><th class="awrbg" scope="col">Log Ckpt Writes</th><th class="awrbg" scope="col">Other Settings Writes</th><th class="awrbg" scope="col">Autotune Ckpt Writes</th><th class="awrbg" scope="col">Thread Ckpt Writes</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>238,098</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#25">Back to Buffer Pool Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="26"></a>
<h2 class="awr">
Advisory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#2000">Instance Recovery Stats</a></li>
<li class="awr"><a class="awr" href="#2010">MTTR Advisory</a></li>
<li class="awr"><a class="awr" href="#2100">Buffer Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#2400">PGA Aggr Summary</a></li>
<li class="awr"><a class="awr" href="#2600">PGA Aggr Target Stats</a></li>
<li class="awr"><a class="awr" href="#2700">PGA Aggr Target Histogram</a></li>
<li class="awr"><a class="awr" href="#2800">PGA Memory Advisory</a></li>
<li class="awr"><a class="awr" href="#5500">Shared Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#6900">SGA Target Advisory</a></li>
<li class="awr"><a class="awr" href="#7100">Streams Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#5700">Java Pool Advisory</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2000"></a>
<h3 class="awr">Instance Recovery Stats</h3>
<ul>
<li class="awr"> B: Begin Snapshot,  E: End Snapshot</li>
</ul>
<table border="0" class="tdiff" summary="This table displays instance recovery statistics at begin and end snapshot. It displays target MTTR, estimated MTTR, recovery estimated IO per second, redo blocks, target redo blocks, etc."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Targt MTTR  (s) </th><th class="awrbg" scope="col">Estd MTTR (s)</th><th class="awrbg" scope="col">Recovery Estd IOs</th><th class="awrbg" scope="col">Actual  RedoBlks</th><th class="awrbg" scope="col">Target	RedoBlks</th><th class="awrbg" scope="col">Log Sz  RedoBlks</th><th class="awrbg" scope="col">Log Ckpt Timeout RedoBlks</th><th class="awrbg" scope="col">Log Ckpt Interval RedoBlks</th><th class="awrbg" scope="col">Opt Log Sz(M)</th><th class="awrbg" scope="col">Estd RAC Avail Time</th></tr>
<tr><td scope="row" class='awrc'>B</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>149</td><td align="right" class='awrc'>300493</td><td align="right" class='awrc'>461605</td><td align="right" class='awrc'>16986915</td><td align="right" class='awrc'>16986915</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>48</td></tr>
<tr><td scope="row" class='awrnc'>E</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>277</td><td align="right" class='awrnc'>355624</td><td align="right" class='awrnc'>1615735</td><td align="right" class='awrnc'>2169603</td><td align="right" class='awrnc'>16986915</td><td align="right" class='awrnc'>2169603</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>98</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2010"></a>
<h3 class="awr">MTTR Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2100"></a>
<h3 class="awr">Buffer Pool Advisory</h3>
<ul>
<li class="awr"> Only rows with estimated physical reads &gt;0 are displayed </li>
<li class="awr"> ordered by Block Size, Buffers For Estimate</li>
</ul>
<table border="0" class="tdiff" summary="This table displays MTTR advisory. It displays size for estimate, dirty limit, estimated cache writes, estimated cache write factor, estimated total write, estimated total IO per second, etc."><tr><th class="awrbg" scope="col">P</th><th class="awrbg" scope="col">Size for Est (M)</th><th class="awrbg" scope="col">Size Factor</th><th class="awrbg" scope="col">Buffers (thousands)</th><th class="awrbg" scope="col">Est Phys Read Factor</th><th class="awrbg" scope="col">Estimated Phys Reads (thousands)</th><th class="awrbg" scope="col">Est Phys Read Time</th><th class="awrbg" scope="col">Est %DBtime for Rds</th></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>3,456</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>403</td><td align="right" class='awrc'>1.11</td><td align="right" class='awrc'>176,880</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>48806.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>6,912</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>806</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>161,894</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>33281.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>10,368</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>1,209</td><td align="right" class='awrc'>1.02</td><td align="right" class='awrc'>161,488</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>32860.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>13,824</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>1,611</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>161,017</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>32372.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>17,280</td><td align="right" class='awrc'>0.49</td><td align="right" class='awrc'>2,014</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>160,613</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>31954.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>20,736</td><td align="right" class='awrnc'>0.59</td><td align="right" class='awrnc'>2,417</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>160,300</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>31629.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>24,192</td><td align="right" class='awrc'>0.69</td><td align="right" class='awrc'>2,820</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>159,971</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>31289.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>27,648</td><td align="right" class='awrnc'>0.79</td><td align="right" class='awrnc'>3,223</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>159,635</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>30941.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>31,104</td><td align="right" class='awrc'>0.89</td><td align="right" class='awrc'>3,626</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>159,335</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>30629.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>34,560</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>4,029</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>159,069</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>30354.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>35,072</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>4,088</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>159,048</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>30333.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>38,016</td><td align="right" class='awrnc'>1.08</td><td align="right" class='awrnc'>4,432</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>158,790</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>30065.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>41,472</td><td align="right" class='awrc'>1.18</td><td align="right" class='awrc'>4,834</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>158,511</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>29777.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>44,928</td><td align="right" class='awrnc'>1.28</td><td align="right" class='awrnc'>5,237</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>158,267</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>29523.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>48,384</td><td align="right" class='awrc'>1.38</td><td align="right" class='awrc'>5,640</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>158,018</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>29266.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>51,840</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>6,043</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>157,774</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>29013.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>55,296</td><td align="right" class='awrc'>1.58</td><td align="right" class='awrc'>6,446</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>157,542</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>28772.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>58,752</td><td align="right" class='awrnc'>1.68</td><td align="right" class='awrnc'>6,849</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>157,314</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>28537.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>62,208</td><td align="right" class='awrc'>1.77</td><td align="right" class='awrc'>7,252</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>157,089</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>28303.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>65,664</td><td align="right" class='awrnc'>1.87</td><td align="right" class='awrnc'>7,654</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>156,869</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>28075.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>69,120</td><td align="right" class='awrc'>1.97</td><td align="right" class='awrc'>8,057</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>156,655</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>27854.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2400"></a>
<h3 class="awr">PGA Aggr Summary</h3>
<ul>
<li class="awr"> PGA cache hit % - percentage of W/A (WorkArea) data processed only in-memory</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate summary. It includes PGA cache hits, total wait time, average time for each class of buffer wait and WorkArea data processed."><tr><th class="awrbg" scope="col">PGA Cache Hit %</th><th class="awrbg" scope="col">W/A MB Processed</th><th class="awrbg" scope="col">Extra W/A MB Read/Written</th></tr>
<tr><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>424</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2600"></a>
<h3 class="awr">PGA Aggr Target Stats</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap (rows dentified with B or E contain data	 which is absolute i.e. not diffed over the interval) </li>
<li class="awr"> Auto PGA Target - actual workarea memory target </li>
<li class="awr"> W/A PGA Used	 - amount of memory used for all Workareas (manual + auto) </li>
<li class="awr"> %PGA W/A Mem	 - percentage of PGA memory allocated to workareas </li>
<li class="awr"> %Auto W/A Mem	 - percentage of workarea memory controlled by Auto Mem Mgmt </li>
<li class="awr"> %Man W/A Mem	 - percentage of workarea memory under manual control</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate target statistics for begin and end snapshot. Statistics include PGA aggregate target, auto PGA target, PGA memory allocation, etc."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">PGA Aggr Target(M)</th><th class="awrbg" scope="col">Auto PGA Target(M)</th><th class="awrbg" scope="col">PGA Mem  Alloc(M) </th><th class="awrbg" scope="col">W/A PGA  Used(M) </th><th class="awrbg" scope="col">%PGA W/A Mem</th><th class="awrbg" scope="col">%Auto W/A Mem</th><th class="awrbg" scope="col">%Man W/A Mem</th><th class="awrbg" scope="col">Global Mem Bound(K)</th></tr>
<tr><td scope="row" class='awrc'>B</td><td align="right" class='awrc'>3,215</td><td align="right" class='awrc'>201</td><td align="right" class='awrc'>4,096.43</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>329,210</td></tr>
<tr><td scope="row" class='awrnc'>E</td><td align="right" class='awrnc'>3,215</td><td align="right" class='awrnc'>1,198</td><td align="right" class='awrnc'>2,197.13</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>329,210</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2700"></a>
<h3 class="awr">PGA Aggr Target Histogram</h3>
<ul>
<li class="awr"> Optimal Executions are purely in-memory operations</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate target histograms."><tr><th class="awrbg" scope="col">  Low Optimal</th><th class="awrbg" scope="col">  High Optimal</th><th class="awrbg" scope="col">Total Execs</th><th class="awrbg" scope="col">Optimal Execs</th><th class="awrbg" scope="col">1-Pass Execs</th><th class="awrbg" scope="col">M-Pass Execs</th></tr>
<tr><td class='awrc'>2K</td><td class='awrc'>4K</td><td align="right" class='awrc'>854</td><td align="right" class='awrc'>854</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>64K</td><td class='awrnc'>128K</td><td align="right" class='awrnc'>99</td><td align="right" class='awrnc'>99</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>128K</td><td class='awrc'>256K</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>256K</td><td class='awrnc'>512K</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>512K</td><td class='awrc'>1024K</td><td align="right" class='awrc'>164</td><td align="right" class='awrc'>164</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>1M</td><td class='awrnc'>2M</td><td align="right" class='awrnc'>213</td><td align="right" class='awrnc'>213</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>2M</td><td class='awrc'>4M</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2800"></a>
<h3 class="awr">PGA Memory Advisory</h3>
<ul>
<li class="awr"> When using Auto Memory Mgmt, minimally choose a pga_aggregate_target value    where Estd PGA Overalloc Count is 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA memory advisory for different estimated PGA target sizes. It displays size factor, Workarea MB processed, estimated PGA cache hit, estimated extra Workarea MB read written to disk, etc., for each target size."><tr><th class="awrbg" scope="col">PGA Target Est (MB)</th><th class="awrbg" scope="col">Size Factr</th><th class="awrbg" scope="col">W/A MB Processed</th><th class="awrbg" scope="col">Estd Extra	 W/A MB Read/	Written to Disk </th><th class="awrbg" scope="col">Estd PGA Cache Hit %</th><th class="awrbg" scope="col">Estd PGA Overalloc Count</th><th class="awrbg" scope="col">Estd Time</th></tr>
<tr><td align="right" scope="row" class='awrc'>402</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>768,308.99</td><td align="right" class='awrc'>1,489,671.58</td><td align="right" class='awrc'>34.00</td><td align="right" class='awrc'>1,809</td><td align="right" class='awrc'>20,769,166,889</td></tr>
<tr><td align="right" scope="row" class='awrnc'>804</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>768,308.99</td><td align="right" class='awrnc'>1,489,671.58</td><td align="right" class='awrnc'>34.00</td><td align="right" class='awrnc'>1,809</td><td align="right" class='awrnc'>20,769,166,889</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,608</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>768,308.99</td><td align="right" class='awrc'>960,978.81</td><td align="right" class='awrc'>44.00</td><td align="right" class='awrc'>782</td><td align="right" class='awrc'>15,906,189,519</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,411</td><td align="right" class='awrnc'>0.75</td><td align="right" class='awrnc'>768,308.99</td><td align="right" class='awrnc'>367,479.24</td><td align="right" class='awrnc'>68.00</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>10,447,111,715</td></tr>
<tr><td align="right" scope="row" class='awrc'>3,215</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>768,308.99</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7,066,995,076</td></tr>
<tr><td align="right" scope="row" class='awrnc'>3,858</td><td align="right" class='awrnc'>1.20</td><td align="right" class='awrnc'>768,308.99</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7,066,995,076</td></tr>
<tr><td align="right" scope="row" class='awrc'>4,501</td><td align="right" class='awrc'>1.40</td><td align="right" class='awrc'>768,308.99</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7,066,995,076</td></tr>
<tr><td align="right" scope="row" class='awrnc'>5,144</td><td align="right" class='awrnc'>1.60</td><td align="right" class='awrnc'>768,308.99</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7,066,995,076</td></tr>
<tr><td align="right" scope="row" class='awrc'>5,787</td><td align="right" class='awrc'>1.80</td><td align="right" class='awrc'>768,308.99</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7,066,995,076</td></tr>
<tr><td align="right" scope="row" class='awrnc'>6,430</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnc'>768,308.99</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7,066,995,076</td></tr>
<tr><td align="right" scope="row" class='awrc'>9,645</td><td align="right" class='awrc'>3.00</td><td align="right" class='awrc'>768,308.99</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7,066,995,076</td></tr>
<tr><td align="right" scope="row" class='awrnc'>12,860</td><td align="right" class='awrnc'>4.00</td><td align="right" class='awrnc'>768,308.99</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7,066,995,076</td></tr>
<tr><td align="right" scope="row" class='awrc'>19,290</td><td align="right" class='awrc'>6.00</td><td align="right" class='awrc'>768,308.99</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7,066,995,076</td></tr>
<tr><td align="right" scope="row" class='awrnc'>25,720</td><td align="right" class='awrnc'>8.00</td><td align="right" class='awrnc'>768,308.99</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7,066,995,076</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5500"></a>
<h3 class="awr">Shared Pool Advisory</h3>
<ul>
<li class="awr"> SP: Shared Pool     Est LC: Estimated Library Cache   Factr: Factor </li>
<li class="awr"> Note there is often a 1:Many correlation between a single logical object    in the Library Cache, and the physical number of memory objects associated    with it.  Therefore comparing the number of Lib Cache objects (e.g. in     v$librarycache), with the number of Lib Cache Memory Objects is invalid.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared pool advisory. Size factor, estimated library cache size, estimated library cache memory object and other info is displayed for different shared pool sizes"><tr><th class="awrbg" scope="col">Shared Pool Size(M)</th><th class="awrbg" scope="col">SP Size Factr</th><th class="awrbg" scope="col">Est LC Size (M)</th><th class="awrbg" scope="col">Est LC Mem Obj</th><th class="awrbg" scope="col">Est LC Time Saved (s)</th><th class="awrbg" scope="col">Est LC Time Saved Factr</th><th class="awrbg" scope="col">Est LC Load Time (s)</th><th class="awrbg" scope="col">Est LC Load Time Factr</th><th class="awrbg" scope="col">Est LC Mem Obj Hits (K)</th></tr>
<tr><td align="right" scope="row" class='awrc'>5,248</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>251</td><td align="right" class='awrc'>11,747</td><td align="right" class='awrc'>230,221</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>5,393</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>6,853</td></tr>
<tr><td align="right" scope="row" class='awrnc'>5,376</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>378</td><td align="right" class='awrnc'>19,334</td><td align="right" class='awrnc'>230,225</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>5,389</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>6,853</td></tr>
<tr><td align="right" scope="row" class='awrc'>5,504</td><td align="right" class='awrc'>1.05</td><td align="right" class='awrc'>506</td><td align="right" class='awrc'>23,044</td><td align="right" class='awrc'>230,227</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>5,387</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>6,854</td></tr>
<tr><td align="right" scope="row" class='awrnc'>5,632</td><td align="right" class='awrnc'>1.07</td><td align="right" class='awrnc'>634</td><td align="right" class='awrnc'>29,412</td><td align="right" class='awrnc'>230,234</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>5,380</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>6,854</td></tr>
<tr><td align="right" scope="row" class='awrc'>5,760</td><td align="right" class='awrc'>1.10</td><td align="right" class='awrc'>762</td><td align="right" class='awrc'>37,120</td><td align="right" class='awrc'>230,234</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>5,380</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>6,854</td></tr>
<tr><td align="right" scope="row" class='awrnc'>5,888</td><td align="right" class='awrnc'>1.12</td><td align="right" class='awrnc'>873</td><td align="right" class='awrnc'>41,633</td><td align="right" class='awrnc'>230,234</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>5,380</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>6,854</td></tr>
<tr><td align="right" scope="row" class='awrc'>6,016</td><td align="right" class='awrc'>1.15</td><td align="right" class='awrc'>873</td><td align="right" class='awrc'>41,633</td><td align="right" class='awrc'>230,234</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>5,380</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>6,854</td></tr>
<tr><td align="right" scope="row" class='awrnc'>6,144</td><td align="right" class='awrnc'>1.17</td><td align="right" class='awrnc'>873</td><td align="right" class='awrnc'>41,633</td><td align="right" class='awrnc'>230,234</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>5,380</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>6,854</td></tr>
<tr><td align="right" scope="row" class='awrc'>6,272</td><td align="right" class='awrc'>1.20</td><td align="right" class='awrc'>873</td><td align="right" class='awrc'>41,633</td><td align="right" class='awrc'>230,234</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>5,380</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>6,854</td></tr>
<tr><td align="right" scope="row" class='awrnc'>6,400</td><td align="right" class='awrnc'>1.22</td><td align="right" class='awrnc'>873</td><td align="right" class='awrnc'>41,633</td><td align="right" class='awrnc'>230,234</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>5,380</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>6,854</td></tr>
<tr><td align="right" scope="row" class='awrc'>6,528</td><td align="right" class='awrc'>1.24</td><td align="right" class='awrc'>873</td><td align="right" class='awrc'>41,633</td><td align="right" class='awrc'>230,234</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>5,380</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>6,854</td></tr>
<tr><td align="right" scope="row" class='awrnc'>7,168</td><td align="right" class='awrnc'>1.37</td><td align="right" class='awrnc'>873</td><td align="right" class='awrnc'>41,633</td><td align="right" class='awrnc'>230,234</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>5,380</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>6,854</td></tr>
<tr><td align="right" scope="row" class='awrc'>7,808</td><td align="right" class='awrc'>1.49</td><td align="right" class='awrc'>873</td><td align="right" class='awrc'>41,633</td><td align="right" class='awrc'>230,234</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>5,380</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>6,854</td></tr>
<tr><td align="right" scope="row" class='awrnc'>8,448</td><td align="right" class='awrnc'>1.61</td><td align="right" class='awrnc'>873</td><td align="right" class='awrnc'>41,633</td><td align="right" class='awrnc'>230,234</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>5,380</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>6,854</td></tr>
<tr><td align="right" scope="row" class='awrc'>9,088</td><td align="right" class='awrc'>1.73</td><td align="right" class='awrc'>873</td><td align="right" class='awrc'>41,633</td><td align="right" class='awrc'>230,234</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>5,380</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>6,854</td></tr>
<tr><td align="right" scope="row" class='awrnc'>9,728</td><td align="right" class='awrnc'>1.85</td><td align="right" class='awrnc'>873</td><td align="right" class='awrnc'>41,633</td><td align="right" class='awrnc'>230,234</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>5,380</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>6,854</td></tr>
<tr><td align="right" scope="row" class='awrc'>10,368</td><td align="right" class='awrc'>1.98</td><td align="right" class='awrc'>873</td><td align="right" class='awrc'>41,633</td><td align="right" class='awrc'>230,234</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>5,380</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>6,854</td></tr>
<tr><td align="right" scope="row" class='awrnc'>11,008</td><td align="right" class='awrnc'>2.10</td><td align="right" class='awrnc'>873</td><td align="right" class='awrnc'>41,633</td><td align="right" class='awrnc'>230,234</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>5,380</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>6,854</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6900"></a>
<h3 class="awr">SGA Target Advisory</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA target advisory for different SGA target sizes. It displays SGA size factor, estimated DB time and estimated physical reads for different SGA target sizes."><tr><th class="awrbg" scope="col">SGA Target Size (M)</th><th class="awrbg" scope="col">SGA Size Factor</th><th class="awrbg" scope="col">Est DB Time (s)</th><th class="awrbg" scope="col">Est Physical Reads</th></tr>
<tr><td align="right" scope="row" class='awrc'>10,240</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>264,750</td><td align="right" class='awrc'>176,877,469</td></tr>
<tr><td align="right" scope="row" class='awrnc'>15,360</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>249,234</td><td align="right" class='awrnc'>161,895,131</td></tr>
<tr><td align="right" scope="row" class='awrc'>20,480</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>248,323</td><td align="right" class='awrc'>161,020,366</td></tr>
<tr><td align="right" scope="row" class='awrnc'>25,600</td><td align="right" class='awrnc'>0.63</td><td align="right" class='awrnc'>247,584</td><td align="right" class='awrnc'>160,304,650</td></tr>
<tr><td align="right" scope="row" class='awrc'>30,720</td><td align="right" class='awrc'>0.75</td><td align="right" class='awrc'>247,239</td><td align="right" class='awrc'>159,970,648</td></tr>
<tr><td align="right" scope="row" class='awrnc'>35,840</td><td align="right" class='awrnc'>0.88</td><td align="right" class='awrnc'>246,575</td><td align="right" class='awrnc'>159,334,456</td></tr>
<tr><td align="right" scope="row" class='awrc'>40,960</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>246,279</td><td align="right" class='awrc'>159,048,169</td></tr>
<tr><td align="right" scope="row" class='awrnc'>46,080</td><td align="right" class='awrnc'>1.13</td><td align="right" class='awrnc'>245,713</td><td align="right" class='awrnc'>158,507,405</td></tr>
<tr><td align="right" scope="row" class='awrc'>51,200</td><td align="right" class='awrc'>1.25</td><td align="right" class='awrc'>245,466</td><td align="right" class='awrc'>158,268,833</td></tr>
<tr><td align="right" scope="row" class='awrnc'>56,320</td><td align="right" class='awrnc'>1.38</td><td align="right" class='awrnc'>244,949</td><td align="right" class='awrnc'>157,775,784</td></tr>
<tr><td align="right" scope="row" class='awrc'>61,440</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>244,481</td><td align="right" class='awrc'>157,314,544</td></tr>
<tr><td align="right" scope="row" class='awrnc'>66,560</td><td align="right" class='awrnc'>1.63</td><td align="right" class='awrnc'>244,260</td><td align="right" class='awrnc'>157,091,877</td></tr>
<tr><td align="right" scope="row" class='awrc'>71,680</td><td align="right" class='awrc'>1.75</td><td align="right" class='awrc'>243,792</td><td align="right" class='awrc'>156,662,446</td></tr>
<tr><td align="right" scope="row" class='awrnc'>76,800</td><td align="right" class='awrnc'>1.88</td><td align="right" class='awrnc'>243,792</td><td align="right" class='awrnc'>156,662,446</td></tr>
<tr><td align="right" scope="row" class='awrc'>81,920</td><td align="right" class='awrc'>2.00</td><td align="right" class='awrc'>243,792</td><td align="right" class='awrc'>156,662,446</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7100"></a>
<h3 class="awr">Streams Pool Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5700"></a>
<h3 class="awr">Java Pool Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="27"></a>
<h2 class="awr">
Wait Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#2300">Buffer Wait Statistics</a></li>
<li class="awr"><a class="awr" href="#3000">Enqueue Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2300"></a>
<h3 class="awr">Buffer Wait Statistics</h3>
<ul>
<li class="awr"> ordered by wait time desc, waits desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays buffer wait statistics. Statistics include waits, total wait time and average time for each class of buffer wait."><tr><th class="awrbg" scope="col">Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg Time (ms)</th></tr>
<tr><td scope="row" class='awrc'>file header block</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>445</td></tr>
<tr><td scope="row" class='awrnc'>undo header</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>48</td></tr>
<tr><td scope="row" class='awrc'>data block</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>40</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#27">Back to Wait Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3000"></a>
<h3 class="awr">Enqueue Activity</h3>
<ul>
<li class="awr"> only enqueues with requests are shown	</li>
<li class="awr"> Enqueue stats gathered prior to 10g should not be compared with 10g data </li>
<li class="awr"> ordered by Wait Time desc, Waits desc, Requests desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays enqueue activity statistics. Requests, success gets, failed gets, waits, wait time and average wait time are displayed for each enqueue type."><tr><th class="awrbg" scope="col">Enqueue Type (Request Reason)</th><th class="awrbg" scope="col">Requests</th><th class="awrbg" scope="col">Succ Gets</th><th class="awrbg" scope="col">Failed Gets</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Wt Time (s)</th><th class="awrbg" scope="col">Av Wt Time(ms)</th></tr>
<tr><td scope="row" class='awrc'>CR-Reuse Block Range (block range reuse ckpt)</td>
<td align="right" class='awrc'>1,058</td><td align="right" class='awrc'>1,058</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>236</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>72.37</td></tr>
<tr><td scope="row" class='awrnc'>TM-DML</td>
<td align="right" class='awrnc'>41,094</td><td align="right" class='awrnc'>41,094</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>104</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>138.60</td></tr>
<tr><td scope="row" class='awrc'>RO-Multiple Object Reuse (fast object reuse)</td>
<td align="right" class='awrc'>456</td><td align="right" class='awrc'>456</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>174</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>34.54</td></tr>
<tr><td scope="row" class='awrnc'>CF-Controlfile Transaction</td>
<td align="right" class='awrnc'>1,715</td><td align="right" class='awrnc'>1,715</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>32.41</td></tr>
<tr><td scope="row" class='awrc'>TO-Temp Object</td>
<td align="right" class='awrc'>123</td><td align="right" class='awrc'>123</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>38.07</td></tr>
<tr><td scope="row" class='awrnc'>WF-AWR Flush</td>
<td align="right" class='awrnc'>34</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>27.68</td></tr>
<tr><td scope="row" class='awrc'>TA-Instance Undo</td>
<td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>253.00</td></tr>
<tr><td scope="row" class='awrnc'>DW-In memory Dispenser</td>
<td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>170.00</td></tr>
<tr><td scope="row" class='awrc'>PS-PX Process Reservation</td>
<td align="right" class='awrc'>178</td><td align="right" class='awrc'>177</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>105</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.97</td></tr>
<tr><td scope="row" class='awrnc'>TT-Tablespace</td>
<td align="right" class='awrnc'>710</td><td align="right" class='awrnc'>710</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.81</td></tr>
<tr><td scope="row" class='awrc'>FB-Format Block</td>
<td align="right" class='awrc'>33</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.96</td></tr>
<tr><td scope="row" class='awrnc'>HW-Segment High Water Mark</td>
<td align="right" class='awrnc'>1,100</td><td align="right" class='awrnc'>1,100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.07</td></tr>
<tr><td scope="row" class='awrc'>PW-Buffer Cache PreWarm (flush prewarm buffers)</td>
<td align="right" class='awrc'>56</td><td align="right" class='awrc'>56</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.56</td></tr>
<tr><td scope="row" class='awrnc'>US-Undo Segment</td>
<td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.44</td></tr>
<tr><td scope="row" class='awrc'>WT-AWR CDB-Wide Table Lock</td>
<td align="right" class='awrc'>22</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.20</td></tr>
<tr><td scope="row" class='awrnc'>AF-Advisor Framework (task serialization)</td>
<td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.00</td></tr>
<tr><td scope="row" class='awrc'>TX-Transaction</td>
<td align="right" class='awrc'>41,054</td><td align="right" class='awrc'>41,053</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JG-Job Scheduler1</td>
<td align="right" class='awrnc'>2,751</td><td align="right" class='awrnc'>2,751</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JG-Job Scheduler1 (queue lock)</td>
<td align="right" class='awrc'>2,751</td><td align="right" class='awrc'>2,751</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DD-ASM Local Disk Group</td>
<td align="right" class='awrnc'>536</td><td align="right" class='awrnc'>536</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SJ-KTSJ Slave Task Cancel (Slave Task Cancel)</td>
<td align="right" class='awrc'>492</td><td align="right" class='awrc'>494</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CU-Cursor</td>
<td align="right" class='awrnc'>278</td><td align="right" class='awrnc'>278</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JG-Job Scheduler1 (q mem clnup lck)</td>
<td align="right" class='awrc'>262</td><td align="right" class='awrc'>262</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>BU-Buddy Instance Context (recovery set construct)</td>
<td align="right" class='awrnc'>215</td><td align="right" class='awrnc'>215</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IS-Instance State</td>
<td align="right" class='awrc'>197</td><td align="right" class='awrc'>197</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>FP-File Object (global fob contention)</td>
<td align="right" class='awrnc'>159</td><td align="right" class='awrnc'>159</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SE-Session Migration</td>
<td align="right" class='awrc'>109</td><td align="right" class='awrc'>109</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SH-Active Session History Flushing</td>
<td align="right" class='awrnc'>106</td><td align="right" class='awrnc'>105</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>XR-Quiesce / Force Logging (database force logging)</td>
<td align="right" class='awrc'>56</td><td align="right" class='awrc'>56</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IT-In-Mem Temp Table Meta Creation</td>
<td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MR-Media Recovery</td>
<td align="right" class='awrc'>14</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DA-Instance DP Array (Slave Process Array)</td>
<td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQ-Sequence Cache</td>
<td align="right" class='awrc'>13</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TH-Threshold Chain (metric threshold evaluation)</td>
<td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PR-Process Startup</td>
<td align="right" class='awrc'>4</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AE-Edition Lock (lock)</td>
<td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PV-KSV slave startup (syncstart)</td>
<td align="right" class='awrc'>3</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>RA-Real-Time ADDM Flood Control (RT ADDM flood control)</td>
<td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TD-KTF map table enqueue (KTF dump entries)</td>
<td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#27">Back to Wait Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="28"></a>
<h2 class="awr">
Undo Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#3300">Undo Segment Summary</a></li>
<li class="awr"><a class="awr" href="#3400">Undo Segment Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3300"></a>
<h3 class="awr">Undo Segment Summary</h3>
<ul>
<li class="awr"> Min/Max TR (mins) - Min and Max Tuned Retention (minutes) </li>
<li class="awr"> STO - Snapshot Too Old count,	OOS - Out of Space count </li>
<li class="awr"> Undo segment block stats: </li>
<li class="awr"> uS - unexpired Stolen,   uR - unexpired Released,   uU - unexpired reUsed </li>
<li class="awr"> eS - expired	Stolen,   eR - expired	 Released,   eU - expired   reUsed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays undo segment summary. It displays undo tablespace number, number of undo blocks, number of transactions, max query length, etc."><tr><th class="awrbg" scope="col">Undo TS#</th><th class="awrbg" scope="col">Num Undo Blocks (K)</th><th class="awrbg" scope="col">Number of Transactions</th><th class="awrbg" scope="col">Max Qry Len (s)</th><th class="awrbg" scope="col">Max Tx Concurcy</th><th class="awrbg" scope="col">Min/Max TR (mins)</th><th class="awrbg" scope="col">STO/ OOS</th><th class="awrbg" scope="col">	uS/uR/uU/    eS/eR/eU</th></tr>
<tr><td align="right" scope="row" class='awrc'>2</td><td align="right" class='awrc'>57.87</td><td align="right" class='awrc'>21,746</td><td align="right" class='awrc'>1,639</td><td align="right" class='awrc'>231</td><td class='awrc'>38.3/38.3</td><td class='awrc'>38/0</td><td class='awrc'>0/0/0/0/0/0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#28">Back to Undo Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3400"></a>
<h3 class="awr">Undo Segment Stats</h3>
<ul>
<li class="awr"> Most recent 35 Undostat rows, ordered by Time desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the 35 most recent Undostat rows."><tr><th class="awrbg" scope="col">End Time</th><th class="awrbg" scope="col">Num Undo Blocks</th><th class="awrbg" scope="col">Number of Transactions</th><th class="awrbg" scope="col">Max Qry Len (s)</th><th class="awrbg" scope="col">Max Tx Concy</th><th class="awrbg" scope="col">Tun Ret (mins)</th><th class="awrbg" scope="col">STO/ OOS</th><th class="awrbg" scope="col">  uS/uR/uU/   eS/eR/eU</th></tr>
<tr><td scope="row" class='awrc'>14-Feb 08:37</td><td align="right" class='awrc'>57,868</td><td align="right" class='awrc'>21,746</td><td align="right" class='awrc'>1,639</td><td align="right" class='awrc'>231</td><td align="right" class='awrc'>38</td><td class='awrc'>38/0</td><td class='awrc'>0/0/0/0/0/0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#28">Back to Undo Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="29"></a>
<h2 class="awr">
Latch Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#3500">Latch Activity</a></li>
<li class="awr"><a class="awr" href="#3600">Latch Sleep Breakdown</a></li>
<li class="awr"><a class="awr" href="#3700">Latch Miss Sources</a></li>
<li class="awr"><a class="awr" href="#7500">Mutex Sleep Summary</a></li>
<li class="awr"><a class="awr" href="#3800">Parent Latch Statistics</a></li>
<li class="awr"><a class="awr" href="#3900">Child Latch Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3500"></a>
<h3 class="awr">Latch Activity</h3>
<ul>
<li class="awr"> &quot;Get Requests&quot;, &quot;Pct Get Miss&quot; and &quot;Avg Slps/Miss&quot; are statistics for	 willing-to-wait latch get requests </li>
<li class="awr"> &quot;NoWait Requests&quot;, &quot;Pct NoWait Miss&quot; are for no-wait latch get requests </li>
<li class="awr"> &quot;Pct Misses&quot; for both should be very close to 0.0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch statistics. Get requests, % get miss, wait time, noWait requests are displayed for each latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Get Miss</th><th class="awrbg" scope="col">Avg Slps /Miss</th><th class="awrbg" scope="col">Wait Time (s)</th><th class="awrbg" scope="col">NoWait Requests</th><th class="awrbg" scope="col">Pct NoWait Miss</th></tr>
<tr><td scope="row" class='awrc'>AQ Background: interrupt command latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>AQ Coord jobx_kwsbgsgn latch</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AQ Message drive state object latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AQ Sharded master pool latch</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AQ deq hash table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AQ dequeue txn counter latch</td><td align="right" class='awrnc'>132</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM Keyed state latch</td><td align="right" class='awrc'>258</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM allocation</td><td align="right" class='awrnc'>39,942</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM connection state latch</td><td align="right" class='awrc'>5,424</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM db client latch</td><td align="right" class='awrnc'>1,063</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM map headers</td><td align="right" class='awrc'>1,120</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM map load waiting list</td><td align="right" class='awrnc'>320</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM map operation freelist</td><td align="right" class='awrc'>15,468</td><td align="right" class='awrc'>0.21</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM map operation hash table</td><td align="right" class='awrnc'>35,654,202</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM network background latch</td><td align="right" class='awrc'>5,498</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM network state latch</td><td align="right" class='awrnc'>330</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM remote client latch</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AWR Alerted Metric Element list</td><td align="right" class='awrnc'>9,388</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Autotask management</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Change Notification Hash table latch</td><td align="right" class='awrnc'>319</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Column stats entry latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Consistent RBA</td><td align="right" class='awrnc'>21,694</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DML lock allocation</td><td align="right" class='awrc'>82,632</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Event Group Locks</td><td align="right" class='awrnc'>111</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>FIB s.o chain latch</td><td align="right" class='awrc'>320</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>FOB consolidated s.o list latch</td><td align="right" class='awrnc'>320</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>File State Object Pool Parent Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCS logfile block</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCS logfile write queue</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Hang Manager wait event statistics</td><td align="right" class='awrnc'>43</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7,732</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>I/O Staticstics latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ILM Stats Stripe Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ILM Stats main anchor latch</td><td align="right" class='awrc'>1,021</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ILM access tracking extent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ILM activity tracking latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM Global dictionary latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM Global dictionary queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM Global dictionary rw latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM area sb latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM area scb latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM emb latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM seg hdr latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMFS defer write list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IMXT hash table latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC other latch</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC stats buffer allocation latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>In memory undo latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS Sh mem access</td><td align="right" class='awrnc'>132</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS broadcast add buf latch</td><td align="right" class='awrc'>150</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS broadcast drop buf latch</td><td align="right" class='awrnc'>150</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS broadcast load blnc latch</td><td align="right" class='awrc'>150</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS queue access latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS queue state obj latch</td><td align="right" class='awrc'>5,502</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS slv state obj latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KCNIBR - invalid block range tree</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDCStatHash latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDFI Buffer Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDFI Hash Bucket Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDFI Hash Elem Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDMADO action list latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDMADO bll latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDMADO latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFC FX Hash Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFC Hash Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFCL LE Freelist</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS client latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS cluster latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS endpoint latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS node latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS process latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFK SGA Libload latch</td><td align="right" class='awrnc'>13,486</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFMD SGA</td><td align="right" class='awrc'>377</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KGNFS-NFS:SHM structure</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KGNFS-NFS:SVR LIST</td><td align="right" class='awrc'>220</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KJC message pool KGH calls</td><td align="right" class='awrnc'>15,382</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KJC message pool free list</td><td align="right" class='awrc'>897,564</td><td align="right" class='awrc'>0.32</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,779,468</td><td align="right" class='awrc'>2.42</td></tr>
<tr><td scope="row" class='awrnc'>KJC message pool pending avail list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KJCT flow control latch</td><td align="right" class='awrc'>6,645,595</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KMG MMAN ready and startup request latch</td><td align="right" class='awrnc'>219</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS OFS ctx level parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS OFS req layer parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS OFS sess layer parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS Receive and Send Queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS id table parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS ksfs_node latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFSD name cache parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSGL LS Segment latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSGL SGA anchor latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSIPC ASPC anchor latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSIPC SGA allocation parent latch</td><td align="right" class='awrc'>1,028</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSIPCGSN Hash Table latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSIPCGSN Namespace latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSK PDB IO STAT</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSRMA SGA anchor latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSRMF SGA anchor latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSWL SGA anchor latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSXR hang analysis phase 1 latch</td><td align="right" class='awrnc'>566</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KSXR hang analysis phase 2 latch</td><td align="right" class='awrc'>352</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSXR large replies</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KTF sga latch</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>263</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KTILM latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KTU in-memory txn table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KTURMA ODPSCN latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KTURMA SGA allocation parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KWQMN job cache list latch</td><td align="right" class='awrnc'>98</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Latch for NonceHistory</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Locator state objects pool parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Lost write change tracking</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Lsod array latch</td><td align="right" class='awrnc'>272</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MGA asr alloc latch</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MGA heap latch</td><td align="right" class='awrnc'>513</td><td align="right" class='awrnc'>6.82</td><td align="right" class='awrnc'>0.69</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MGA shared context latch</td><td align="right" class='awrc'>3,279</td><td align="right" class='awrc'>2.26</td><td align="right" class='awrc'>0.46</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MGA shared context root latch</td><td align="right" class='awrnc'>527</td><td align="right" class='awrnc'>23.72</td><td align="right" class='awrnc'>0.65</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MQL Tracking Latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Memory Management Latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>219</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue Message Subscriber #1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue Message Subscriber #2</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue Message Subscriber #3</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue Message Subscriber #4</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue Subscriber</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Message cache latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MinActiveScn Latch</td><td align="right" class='awrnc'>33</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Mutex</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Mutex Stats</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Nologging Standby SCN Time Map cache</td><td align="right" class='awrc'>212</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>OS process</td><td align="right" class='awrnc'>1,334</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>OS process allocation</td><td align="right" class='awrc'>1,582</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>OS process: request allocation</td><td align="right" class='awrnc'>258</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PDB Hash Table Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PDB LRU structure</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PL/SQL warning settings</td><td align="right" class='awrc'>107</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX hash array latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Parent latch for dependency tracking</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Parent latch for query hash table access</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Parent latch for segments scanning</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>QMT</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Real-time descriptor latch</td><td align="right" class='awrc'>68,620</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Report Request stats latch</td><td align="right" class='awrnc'>58</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Report Request struct latch</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Request holder compeltion list latch</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Retry Ht elm latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Retry bkt latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA Blackbox latch</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA IO buffer pool latch</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SGA Logging Bkt Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA Logging Log Latch</td><td align="right" class='awrnc'>11,935</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA blob parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA bucket locks</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA heap locks</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA pool locks</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SO private so latch</td><td align="right" class='awrc'>767</td><td align="right" class='awrc'>0.26</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>32</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SQL memory manager latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>219</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SQL memory manager workarea list latch</td><td align="right" class='awrc'>16,350</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SR Stats Stripe Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Sched IM Job latch</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Sched InMem Job Cache</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Shared B-Tree</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Streams Generic</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Subscriber Ht elm latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Testing</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Token Manager</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Txn Ht elm latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Txn bkt latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>UM object latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>WCR: sync</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Write State Object Pool Parent Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>X$KSFQP</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>XDB NFS Security Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>XDB unused session pool</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>XDB used session pool</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>active checkpoint queue latch</td><td align="right" class='awrc'>256,717</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>active service list</td><td align="right" class='awrnc'>4,353</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3,821</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>archive destination</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>begin backup scn array</td><td align="right" class='awrnc'>108</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>buffer pool</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>business card</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cache buffer handles</td><td align="right" class='awrc'>224</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cache buffers chains</td><td align="right" class='awrnc'>85,406,212</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>27,858,158</td><td align="right" class='awrnc'>0.30</td></tr>
<tr><td scope="row" class='awrc'>cache buffers lru chain</td><td align="right" class='awrc'>18,089,948</td><td align="right" class='awrc'>0.49</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>17,853,212</td><td align="right" class='awrc'>0.82</td></tr>
<tr><td scope="row" class='awrnc'>cache table scan latch</td><td align="right" class='awrnc'>33</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>33</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>call allocation</td><td align="right" class='awrc'>2,064</td><td align="right" class='awrc'>0.97</td><td align="right" class='awrc'>0.75</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>change notification client cache latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>channel handle pool latch</td><td align="right" class='awrc'>519</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>channel operations parent latch</td><td align="right" class='awrnc'>4,290</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>checkpoint queue latch</td><td align="right" class='awrc'>8,629,183</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2,628,625</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>client/application info</td><td align="right" class='awrnc'>161</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>compile environment latch</td><td align="right" class='awrc'>118</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>corrupted undo seg latch</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp handoff latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp pool latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp server hash latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp sga latch</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp srv type state latch</td><td align="right" class='awrc'>661</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp srv type wait latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cr slave free list</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>cvmap freelist lock</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>deferred cleanup latch</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dispatcher info</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>dml lock allocation</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>done queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>dtp latch</td><td align="right" class='awrc'>258</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dummy allocation</td><td align="right" class='awrnc'>467</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>eighth spare latch - X parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>eleventh spare latch - children</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enqueue freelist latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>25,463</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enqueue hash chains</td><td align="right" class='awrnc'>284,518</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>68</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enqueues</td><td align="right" class='awrc'>275</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>error message lists</td><td align="right" class='awrnc'>68</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>fast space usage latch</td><td align="right" class='awrc'>47</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>fifteenth spare latch - children</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>file cache latch</td><td align="right" class='awrc'>822</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>flash file access latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>flashback copy</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>fourteenth spare latch - children</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>fourth Audit Vault latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc element</td><td align="right" class='awrnc'>54,683,162</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>1,772,045</td><td align="right" class='awrnc'>0.25</td></tr>
<tr><td scope="row" class='awrc'>gc xid list</td><td align="right" class='awrc'>237</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcr global ctx</td><td align="right" class='awrnc'>166</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs commit scn state</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs nodemap pool</td><td align="right" class='awrnc'>34,291</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs opaque info freelist</td><td align="right" class='awrc'>42,851</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs partitioned table hash</td><td align="right" class='awrnc'>32,589,402</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>98,859</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gcs pcm hashed value bucket hash</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs remaster request queue</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs resource freelist</td><td align="right" class='awrc'>14,139,904</td><td align="right" class='awrc'>0.41</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>7,420,703</td><td align="right" class='awrc'>0.62</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource hash</td><td align="right" class='awrnc'>56,974,896</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.23</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>46,163</td><td align="right" class='awrnc'>0.07</td></tr>
<tr><td scope="row" class='awrc'>gcs resource scan list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource timerq list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs resource validate list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs shadows freelist</td><td align="right" class='awrnc'>6,700,609</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges DFS wait callback info</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges cached resource lists</td><td align="right" class='awrnc'>73,067</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>54,336</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>ges deadlock list</td><td align="right" class='awrc'>468</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges domain table</td><td align="right" class='awrnc'>187,509</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges enqueue table freelist</td><td align="right" class='awrc'>90,880</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.33</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges group table</td><td align="right" class='awrnc'>189,772</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges process hash list</td><td align="right" class='awrc'>23,499</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.67</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges process parent latch</td><td align="right" class='awrnc'>381,380</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges process table freelist</td><td align="right" class='awrc'>258</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges remote lock freelist</td><td align="right" class='awrnc'>6,258</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ges resource hash list</td><td align="right" class='awrc'>264,549</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.40</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>22,528</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges resource scan list</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges resource table freelist</td><td align="right" class='awrc'>44,282</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges s-lock bitvec freelist</td><td align="right" class='awrnc'>2,296</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges timeout list</td><td align="right" class='awrc'>363</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>75</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges value block free list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>global tx hash mapping</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>granule from data transfer cache</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gws:Sharding global descriptor latch</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>hash table Sql Plan Finding latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>69</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>hash table column usage latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>21,414</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>hash table expression usage tracking latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hash table sql contorl latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>heartbeat check</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>396</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>heartbeat structure management</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>329</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>imc buf hdl lat</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>imc cr clone buf</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>imc hash lat</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>imc sj lat</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>imc srchsp lat</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>imc-txn-wrk-lat</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>in-memory area latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>in-memory columnar segment hash table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>in-memory columnar ts extent map chunk latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>in-memory global pool latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>internal temp table object number allocation latch</td><td align="right" class='awrnc'>115</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>interrupt manipulation</td><td align="right" class='awrc'>432</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>intra txn parallel recovery</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>io pool granule list</td><td align="right" class='awrc'>94</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>io pool granule metadata list</td><td align="right" class='awrnc'>189</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>job workq parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>job_queue_processes parameter latch</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>k2q global data latch</td><td align="right" class='awrc'>438</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>k2q lock allocation</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kKCN Cqn SGA</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kcb DW scan objtemp hash table latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kcn buffer chains</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kdlx hb parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kgb parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kgnfs mount latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjbr roi instance map</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjci objects freelist latch</td><td align="right" class='awrnc'>10,363</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.33</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjci process context latch</td><td align="right" class='awrc'>5,853</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>84,025</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>kjci process list latch</td><td align="right" class='awrnc'>5,321</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>kjci request sequence latch</td><td align="right" class='awrc'>114</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjcipctx state object freelist latch</td><td align="right" class='awrnc'>254</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjoedcso state object freelist latch</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjoeq omni enqueue hash bucket latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjoer owner hash bucket</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjpm my inst data</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsc Request obj freelist latch</td><td align="right" class='awrc'>504</td><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjsc Ring Buffer obj freelist latch</td><td align="right" class='awrnc'>252</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsc protect control request queue</td><td align="right" class='awrc'>252</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6,656</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>kjsc protect warm up context</td><td align="right" class='awrnc'>493</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsca pkey obj freelist latch</td><td align="right" class='awrc'>296</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjsca protect pkey hash table bucket</td><td align="right" class='awrnc'>18,031</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsca protect service hash table bucket</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjscpss state object freelist latch</td><td align="right" class='awrnc'>252</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kokc descriptor allocation latch</td><td align="right" class='awrc'>80</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kpoxft latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>249</td><td align="right" class='awrnc'>0.40</td></tr>
<tr><td scope="row" class='awrc'>krso process</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksbxic instance latch</td><td align="right" class='awrnc'>55</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksevn object root latch</td><td align="right" class='awrc'>219</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksfv messages</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksi resource reuse count</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksim group membership cache</td><td align="right" class='awrnc'>999</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksim membership request latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>329</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ksns object latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kss move lock</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksuosstats global area</td><td align="right" class='awrnc'>70</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>252</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ksutcpistat latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksv allocation latch</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksv class latch</td><td align="right" class='awrc'>17,794</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ksv msg queue latch</td><td align="right" class='awrnc'>534</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>533</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ksxp shared latch</td><td align="right" class='awrc'>258</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksxp so latch</td><td align="right" class='awrnc'>258</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksz_so allocation latch</td><td align="right" class='awrc'>258</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktfbn latch</td><td align="right" class='awrnc'>131</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg jrnls</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg lookuptable level 1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg lookuptable level 2</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg space</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg stages</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg worklink</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm global data</td><td align="right" class='awrc'>106</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm prv jrnls</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktmpj HT ls</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwqbsn:qsga</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwslbmdl: metadata latch</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwslbql: queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwslbutl: uncommitted txn latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwsptQcachLt: queue cache latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwsptTrncTsksLt: trunc task latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwsptjobAdPtLt: AdPt list latch</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwsslLat: skiplist latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kxfxscanrate_latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lgwr LWN SCN</td><td align="right" class='awrc'>22,113</td><td align="right" class='awrc'>0.28</td><td align="right" class='awrc'>0.21</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>list of block allocation</td><td align="right" class='awrnc'>162,545</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.60</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>loader state object freelist</td><td align="right" class='awrc'>246</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lob segment dispenser latch</td><td align="right" class='awrnc'>243</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lob segment hash table latch</td><td align="right" class='awrc'>164</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lob segment query latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lock DBA buffer during media recovery</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log write info</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>131,256</td><td align="right" class='awrnc'>2.91</td></tr>
<tr><td scope="row" class='awrc'>log write worker phase</td><td align="right" class='awrc'>6,575</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>logical standby cache</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>logminer context allocation</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>logminer local</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>logminer work area</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>longop free list parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>managed standby</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>message bitmap latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>message pool operations parent latch</td><td align="right" class='awrc'>1,621</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>messages</td><td align="right" class='awrnc'>671,349</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>msg queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>multiblock read objects</td><td align="right" class='awrnc'>446,730</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.35</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service memory objects</td><td align="right" class='awrc'>313</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service namespace bucket</td><td align="right" class='awrnc'>3,708</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service pending queue</td><td align="right" class='awrc'>136</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service request</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service request queue</td><td align="right" class='awrc'>7,093</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ncodef allocation latch</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ninth spare latch - X parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>object queue header freelist</td><td align="right" class='awrnc'>26,286</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>object queue header operation</td><td align="right" class='awrc'>38,161,014</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>798,544</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>object queue memory</td><td align="right" class='awrnc'>211</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>object stats modification</td><td align="right" class='awrc'>296</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>parallel query alloc buffer</td><td align="right" class='awrnc'>763</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>400</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>parallel query stats</td><td align="right" class='awrc'>147</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>parallel txn reco latch</td><td align="right" class='awrnc'>1,754</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>parameter table management</td><td align="right" class='awrc'>1,408</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pdb enqueue hash chains</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>peshm</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pesom_free_list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pesom_hash_node</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pkey global statistics</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pmon dead latch</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>post/wait queue</td><td align="right" class='awrnc'>48,821</td><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>48,884</td><td align="right" class='awrnc'>0.13</td></tr>
<tr><td scope="row" class='awrc'>process allocation</td><td align="right" class='awrc'>3,526</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>process group creation</td><td align="right" class='awrnc'>258</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>process memory detail</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>process pkey statistics list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>process queue</td><td align="right" class='awrc'>370</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>process queue reference</td><td align="right" class='awrnc'>8,015</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,336</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>qmn task queue latch</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>quarantine object</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>query server freelists</td><td align="right" class='awrc'>307</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>query server process</td><td align="right" class='awrnc'>633</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>queued dump request</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>queuing load statistics</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>read-moslty lock queue under pkey</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>recovery domain hash bucket</td><td align="right" class='awrnc'>393</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>redo allocation</td><td align="right" class='awrc'>99,008</td><td align="right" class='awrc'>13.36</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>2,845,754</td><td align="right" class='awrc'>3.85</td></tr>
<tr><td scope="row" class='awrnc'>redo copy</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2,858,305</td><td align="right" class='awrnc'>0.26</td></tr>
<tr><td scope="row" class='awrc'>redo transport task</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>redo writing</td><td align="right" class='awrnc'>342,955</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>remote tool request latch</td><td align="right" class='awrc'>359</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr group change latch</td><td align="right" class='awrnc'>208</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:active threads</td><td align="right" class='awrc'>484</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:actses change group</td><td align="right" class='awrnc'>107</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:actses change state</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:free threads list</td><td align="right" class='awrnc'>466</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:plan CPU method</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:plan change alloc latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:plan change latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:resource group CPU method</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:schema config</td><td align="right" class='awrc'>31</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:session queuing</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>row cache objects</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>rt rmv count latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>329</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>second Audit Vault latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>segmented array pool</td><td align="right" class='awrnc'>320</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sequence cache</td><td align="right" class='awrc'>416</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>service drain list</td><td align="right" class='awrnc'>657</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session allocation</td><td align="right" class='awrc'>30,998</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>30,212</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>session idle bit</td><td align="right" class='awrnc'>65,274</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>session state list latch</td><td align="right" class='awrnc'>516</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session statistics</td><td align="right" class='awrc'>467</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>session switching</td><td align="right" class='awrnc'>267</td><td align="right" class='awrnc'>0.37</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session timer</td><td align="right" class='awrc'>220</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>seventh spare latch - X parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sga hash table parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shard latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>shardgroup list latch</td><td align="right" class='awrc'>273</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shared pool</td><td align="right" class='awrnc'>122,643</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.72</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,053</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>shared pool sim alloc</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shared pool simulator</td><td align="right" class='awrnc'>11,277</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>shared server configuration</td><td align="right" class='awrc'>220</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>sim partition latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>simulator hash latch</td><td align="right" class='awrc'>3,701,249</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>simulator lru latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2,068,148</td><td align="right" class='awrnc'>0.08</td></tr>
<tr><td scope="row" class='awrc'>sixth spare latch - X parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>sort extent pool</td><td align="right" class='awrnc'>725</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>space background state object latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>space background task latch</td><td align="right" class='awrnc'>1,916</td><td align="right" class='awrnc'>54.80</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>473</td><td align="right" class='awrnc'>2.75</td></tr>
<tr><td scope="row" class='awrc'>state object free list</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>statistics aggregation</td><td align="right" class='awrnc'>145</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>subscriber Ht bkt</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>tablespace key chain</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>temp lob duration state obj allocation</td><td align="right" class='awrc'>114</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>temporary table state object allocation</td><td align="right" class='awrnc'>80</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>tenth spare latch - X parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test excl. parent l0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test excl. parent2 l0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test excl. parent2 lmid cln</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test mixed exclusive</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test mode exclusive</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test open exclusive</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test pdb exclusive</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test shared parent2 lmid</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>thirteenth spare latch - children</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>threshold alerts latch</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>trace latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>transaction allocation</td><td align="right" class='awrc'>853</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twelfth spare latch - children</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twenty-fifth spare latch - S par</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twenty-first spare latch - S par</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twenty-fourth spare latch - S par</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twenty-second spare latch - S par</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twenty-third spare latch - S par</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>undo global data</td><td align="right" class='awrnc'>253,319</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>virtual circuit buffers</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>virtual circuit holder</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>virtual circuit queues</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3600"></a>
<h3 class="awr">Latch Sleep Breakdown</h3>
<ul>
<li class="awr"> ordered by misses desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch sleep statistics. Get requests, misses, sleeps, spin gets are displayed for each latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Misses</th><th class="awrbg" scope="col">Sleeps</th><th class="awrbg" scope="col">Spin Gets</th></tr>
<tr><td scope="row" class='awrc'>cache buffers lru chain</td><td align="right" class='awrc'>18,089,948</td><td align="right" class='awrc'>89,207</td><td align="right" class='awrc'>2,036</td><td align="right" class='awrc'>87,290</td></tr>
<tr><td scope="row" class='awrnc'>gc element</td><td align="right" class='awrnc'>54,683,162</td><td align="right" class='awrnc'>68,644</td><td align="right" class='awrnc'>6,598</td><td align="right" class='awrnc'>62,487</td></tr>
<tr><td scope="row" class='awrc'>gcs resource freelist</td><td align="right" class='awrc'>14,139,904</td><td align="right" class='awrc'>58,434</td><td align="right" class='awrc'>4,317</td><td align="right" class='awrc'>54,456</td></tr>
<tr><td scope="row" class='awrnc'>redo allocation</td><td align="right" class='awrnc'>99,008</td><td align="right" class='awrnc'>13,225</td><td align="right" class='awrnc'>4,008</td><td align="right" class='awrnc'>9,505</td></tr>
<tr><td scope="row" class='awrc'>KJCT flow control latch</td><td align="right" class='awrc'>6,645,595</td><td align="right" class='awrc'>7,917</td><td align="right" class='awrc'>767</td><td align="right" class='awrc'>7,227</td></tr>
<tr><td scope="row" class='awrnc'>object queue header operation</td><td align="right" class='awrnc'>38,161,014</td><td align="right" class='awrnc'>4,010</td><td align="right" class='awrnc'>411</td><td align="right" class='awrnc'>3,630</td></tr>
<tr><td scope="row" class='awrc'>gcs resource hash</td><td align="right" class='awrc'>56,974,896</td><td align="right" class='awrc'>3,241</td><td align="right" class='awrc'>737</td><td align="right" class='awrc'>2,561</td></tr>
<tr><td scope="row" class='awrnc'>KJC message pool free list</td><td align="right" class='awrnc'>897,564</td><td align="right" class='awrnc'>2,846</td><td align="right" class='awrnc'>376</td><td align="right" class='awrnc'>2,486</td></tr>
<tr><td scope="row" class='awrc'>cache buffers chains</td><td align="right" class='awrc'>85,406,212</td><td align="right" class='awrc'>2,231</td><td align="right" class='awrc'>207</td><td align="right" class='awrc'>2,043</td></tr>
<tr><td scope="row" class='awrnc'>ASM map operation hash table</td><td align="right" class='awrnc'>35,654,202</td><td align="right" class='awrnc'>1,549</td><td align="right" class='awrnc'>290</td><td align="right" class='awrnc'>1,278</td></tr>
<tr><td scope="row" class='awrc'>messages</td><td align="right" class='awrc'>671,349</td><td align="right" class='awrc'>1,324</td><td align="right" class='awrc'>49</td><td align="right" class='awrc'>1,279</td></tr>
<tr><td scope="row" class='awrnc'>space background task latch</td><td align="right" class='awrnc'>1,916</td><td align="right" class='awrnc'>1,050</td><td align="right" class='awrnc'>1,030</td><td align="right" class='awrnc'>165</td></tr>
<tr><td scope="row" class='awrc'>active checkpoint queue latch</td><td align="right" class='awrc'>256,717</td><td align="right" class='awrc'>580</td><td align="right" class='awrc'>97</td><td align="right" class='awrc'>487</td></tr>
<tr><td scope="row" class='awrnc'>checkpoint queue latch</td><td align="right" class='awrnc'>8,629,183</td><td align="right" class='awrnc'>469</td><td align="right" class='awrnc'>58</td><td align="right" class='awrnc'>416</td></tr>
<tr><td scope="row" class='awrc'>redo writing</td><td align="right" class='awrc'>342,955</td><td align="right" class='awrc'>353</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>292</td></tr>
<tr><td scope="row" class='awrnc'>ges resource hash list</td><td align="right" class='awrnc'>264,549</td><td align="right" class='awrnc'>289</td><td align="right" class='awrnc'>117</td><td align="right" class='awrnc'>183</td></tr>
<tr><td scope="row" class='awrc'>multiblock read objects</td><td align="right" class='awrc'>446,730</td><td align="right" class='awrc'>246</td><td align="right" class='awrc'>86</td><td align="right" class='awrc'>165</td></tr>
<tr><td scope="row" class='awrnc'>MGA shared context root latch</td><td align="right" class='awrnc'>527</td><td align="right" class='awrnc'>125</td><td align="right" class='awrnc'>81</td><td align="right" class='awrnc'>60</td></tr>
<tr><td scope="row" class='awrc'>shared pool</td><td align="right" class='awrc'>122,643</td><td align="right" class='awrc'>79</td><td align="right" class='awrc'>57</td><td align="right" class='awrc'>68</td></tr>
<tr><td scope="row" class='awrnc'>MGA shared context latch</td><td align="right" class='awrnc'>3,279</td><td align="right" class='awrnc'>74</td><td align="right" class='awrnc'>34</td><td align="right" class='awrnc'>42</td></tr>
<tr><td scope="row" class='awrc'>post/wait queue</td><td align="right" class='awrc'>48,821</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>63</td></tr>
<tr><td scope="row" class='awrnc'>lgwr LWN SCN</td><td align="right" class='awrnc'>22,113</td><td align="right" class='awrnc'>61</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>49</td></tr>
<tr><td scope="row" class='awrc'>undo global data</td><td align="right" class='awrc'>253,319</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>35</td></tr>
<tr><td scope="row" class='awrnc'>enqueue hash chains</td><td align="right" class='awrnc'>284,518</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>31</td></tr>
<tr><td scope="row" class='awrc'>MGA heap latch</td><td align="right" class='awrc'>513</td><td align="right" class='awrc'>35</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>17</td></tr>
<tr><td scope="row" class='awrnc'>ges cached resource lists</td><td align="right" class='awrnc'>73,067</td><td align="right" class='awrnc'>23</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>20</td></tr>
<tr><td scope="row" class='awrc'>call allocation</td><td align="right" class='awrc'>2,064</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>5</td></tr>
<tr><td scope="row" class='awrnc'>gcs shadows freelist</td><td align="right" class='awrnc'>6,700,609</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>18</td></tr>
<tr><td scope="row" class='awrc'>ksv class latch</td><td align="right" class='awrc'>17,794</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>9</td></tr>
<tr><td scope="row" class='awrnc'>Consistent RBA</td><td align="right" class='awrnc'>21,694</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>6</td></tr>
<tr><td scope="row" class='awrc'>ges enqueue table freelist</td><td align="right" class='awrc'>90,880</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>4</td></tr>
<tr><td scope="row" class='awrnc'>kjci objects freelist latch</td><td align="right" class='awrnc'>10,363</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>4</td></tr>
<tr><td scope="row" class='awrc'>list of block allocation</td><td align="right" class='awrc'>162,545</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>2</td></tr>
<tr><td scope="row" class='awrnc'>ges process hash list</td><td align="right" class='awrnc'>23,499</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1</td></tr>
<tr><td scope="row" class='awrc'>gcs nodemap pool</td><td align="right" class='awrc'>34,291</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>object queue header freelist</td><td align="right" class='awrnc'>26,286</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3700"></a>
<h3 class="awr">Latch Miss Sources</h3>
<ul>
<li class="awr"> only latches with sleeps are shown </li>
<li class="awr"> ordered by name, sleeps desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch miss sources. Place where latch was requested, no-wait misses, sleeps, waiter sleeps are displayed for each missed latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Where</th><th class="awrbg" scope="col">NoWait Misses</th><th class="awrbg" scope="col">   Sleeps</th><th class="awrbg" scope="col">Waiter Sleeps</th></tr>
<tr><td class='awrc'>ASM map operation hash table</td><td class='awrc'>kffmTranslate</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>177</td><td align="right" class='awrc'>146</td></tr>
<tr><td class='awrnc'>ASM map operation hash table</td><td class='awrnc'>kffmDoDone_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>113</td><td align="right" class='awrnc'>144</td></tr>
<tr><td class='awrc'>KJC message pool free list</td><td class='awrc'>kjcsmpav: allocate a msg buffer</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>224</td><td align="right" class='awrc'>373</td></tr>
<tr><td class='awrnc'>KJC message pool free list</td><td class='awrnc'>kjcspfmbq: free vector of msg buffers</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>152</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjctcsnd: send normal message</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>350</td><td align="right" class='awrc'>440</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjcts_sedeqv3: dequeue a vector of msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>169</td><td align="right" class='awrnc'>28</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjcts_sqenq: queue a message</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>145</td><td align="right" class='awrc'>210</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjctr_updatetkt: update ticket info</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>34</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjcts_adjtkt: adjust send tickets</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>42</td><td align="right" class='awrc'>14</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjcts_sqenq2: queue a message</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>40</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjctr_releasetkt: change ticket allocation</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>MGA pid alloc latch</td><td class='awrnc'>ksm_mga_sctx_rtrcv_do_whr2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>26</td></tr>
<tr><td class='awrc'>MGA shared context latch</td><td class='awrc'>ksm_mga_detach_whr2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>5</td></tr>
<tr><td class='awrnc'>MGA shared context latch</td><td class='awrnc'>ksm_mga_sync_whr1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>5</td></tr>
<tr><td class='awrc'>MGA shared context root latch</td><td class='awrc'>ksm_mga_detach_whr1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>81</td><td align="right" class='awrc'>81</td></tr>
<tr><td class='awrnc'>active checkpoint queue latch</td><td class='awrnc'>kcbbacq: scan active checkpoints</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>88</td><td align="right" class='awrnc'>97</td></tr>
<tr><td class='awrc'>active checkpoint queue latch</td><td class='awrc'>kcbk_add_rbr_ckpt: Add rbr ckpt 3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>active checkpoint queue latch</td><td class='awrnc'>kcbkcpa: Checkpoint post-processing 2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbzacrb: convert latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>84</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgtcr: convert latch 4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>64</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbzgb: scan from tail nowait</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbzibmlt: multi-block read: nowait</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgtcr: fast path exam</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>157</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgtcr: slow path excl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>13</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbchg: change complete</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgcur: slow path</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>6</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbchg: rollback</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgtcr: fast path pin</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>21</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbzibmlt: finish free bufs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>22</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgcur: fast path excl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbbic1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbchg: aux pin</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbnlc</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>3</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbrls: fast pin release</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbrls: pin release</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>8</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kclrwrite_3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers lru chain</td><td class='awrc'>kcbzgb_2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,774</td><td align="right" class='awrc'>1,141</td></tr>
<tr><td class='awrnc'>cache buffers lru chain</td><td class='awrnc'>kcbzgws</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>223</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers lru chain</td><td class='awrc'>kcbbic2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>629</td></tr>
<tr><td class='awrnc'>cache buffers lru chain</td><td class='awrnc'>kcbbxsv: move to being written</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers lru chain</td><td class='awrc'>kcbbwlru</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>252</td></tr>
<tr><td class='awrnc'>call allocation</td><td class='awrnc'>ksuxds</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>9</td></tr>
<tr><td class='awrc'>call allocation</td><td class='awrc'>ksudlp: top call</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>6</td></tr>
<tr><td class='awrnc'>checkpoint queue latch</td><td class='awrnc'>kcbklbc_cql</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>checkpoint queue latch</td><td class='awrc'>kcbkubc_4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>26</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclnfndnewm</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4,326</td><td align="right" class='awrnc'>1,815</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclulb</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,046</td><td align="right" class='awrc'>2,624</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>KCLUNLNK</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>488</td><td align="right" class='awrnc'>1,811</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclplz</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>308</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclrwrite</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>170</td><td align="right" class='awrnc'>214</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclfwrite1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>131</td><td align="right" class='awrc'>137</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclplz_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>109</td><td align="right" class='awrnc'>11</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclrwrite_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclhngcbk1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>23</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclebs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>32</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclrlstp</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclbla</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclnfndx</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>2</td></tr>
<tr><td class='awrc'>gcs nodemap pool</td><td class='awrc'>kjbrnmapalloc_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>gcs resource freelist</td><td class='awrnc'>kjbralc: check freelist nowait</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2,978</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs resource freelist</td><td class='awrc'>kjbralc add resource</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>511</td><td align="right" class='awrc'>3,620</td></tr>
<tr><td class='awrnc'>gcs resource freelist</td><td class='awrnc'>kjbrfr_bg2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>471</td><td align="right" class='awrnc'>587</td></tr>
<tr><td class='awrc'>gcs resource freelist</td><td class='awrc'>kjbrralc: reserve allocation</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>357</td><td align="right" class='awrc'>110</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbcropen</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>329</td><td align="right" class='awrnc'>248</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbopen</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>107</td><td align="right" class='awrc'>49</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kclfwrite1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>106</td><td align="right" class='awrnc'>44</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbclose_remaster</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>61</td><td align="right" class='awrc'>166</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbmpopen</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>64</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbmpclose</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>49</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjblpast</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>53</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kclrwrite</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>44</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbralc: reacquire</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbmpflushpi</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>13</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbconvert</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>3</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjblocalobj_nolock</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>3</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbrdowncvt</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs shadows freelist</td><td class='awrc'>kjblralc: allocate reserve</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>ges cached resource lists</td><td class='awrnc'>kjruch: cached obj cleanup</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>ges enqueue table freelist</td><td class='awrc'>kjlfr: remove lock from parent object</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>ges process hash list</td><td class='awrnc'>kjakiqa: set inquiry response</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>ges resource hash list</td><td class='awrc'>kjlrlr: remove lock from resource queue</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>107</td><td align="right" class='awrc'>110</td></tr>
<tr><td class='awrnc'>ges resource hash list</td><td class='awrnc'>kjrmas1: lookup master node</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>ges resource hash list</td><td class='awrc'>kjlmfnd: search for lockp by rename and inst id</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>ges resource hash list</td><td class='awrnc'>kjakcai: search for resp by resname</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>5</td></tr>
<tr><td class='awrc'>ges resource hash list</td><td class='awrc'>kjucvl: lock convert request</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>kjci objects freelist latch</td><td class='awrnc'>kjcibal (get)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>4</td></tr>
<tr><td class='awrc'>kjci objects freelist latch</td><td class='awrc'>kjcibfr_cln (free)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>ksv class latch</td><td class='awrnc'>ksvclsl: rdp - recycle</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>list of block allocation</td><td class='awrc'>ktlabl</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>3</td></tr>
<tr><td class='awrnc'>list of block allocation</td><td class='awrnc'>ktlbbl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>messages</td><td class='awrc'>ksarcv</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>35</td><td align="right" class='awrc'>6</td></tr>
<tr><td class='awrnc'>messages</td><td class='awrnc'>ksaamb: after wakeup</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>36</td></tr>
<tr><td class='awrc'>messages</td><td class='awrc'>ksarcv: after wait</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>7</td></tr>
<tr><td class='awrnc'>mostly latch-free SCN</td><td class='awrnc'>kcs024</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>mostly latch-free SCN</td><td class='awrc'>kcslcu3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>13</td></tr>
<tr><td class='awrnc'>mostly latch-free SCN</td><td class='awrnc'>kcsnew_scn_rba</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>multiblock read objects</td><td class='awrc'>kcbzibmlt: normal mbr free</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>47</td><td align="right" class='awrc'>41</td></tr>
<tr><td class='awrnc'>multiblock read objects</td><td class='awrnc'>kcbzibmlt</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>45</td></tr>
<tr><td class='awrc'>object queue header freelist</td><td class='awrc'>kcbo_unlink_q</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>object queue header operation</td><td class='awrnc'>kcbo_unlink_q</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>337</td><td align="right" class='awrnc'>272</td></tr>
<tr><td class='awrc'>object queue header operation</td><td class='awrc'>kcbo_link_q</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>72</td></tr>
<tr><td class='awrnc'>object queue header operation</td><td class='awrnc'>kcbo_switch_cq</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>43</td></tr>
<tr><td class='awrc'>object queue header operation</td><td class='awrc'>kcbo_switch_q_bg</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>11</td></tr>
<tr><td class='awrnc'>object queue header operation</td><td class='awrnc'>kcbo_switch_mq_bg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>14</td></tr>
<tr><td class='awrc'>object queue header operation</td><td class='awrc'>kclbufs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>post/wait queue</td><td class='awrnc'>ksliwat:add:nowait</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>post/wait queue</td><td class='awrc'>ksliwat:remove</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>3</td></tr>
<tr><td class='awrnc'>post/wait queue</td><td class='awrnc'>kslpstevent:get</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>redo allocation</td><td class='awrc'>kcrfw_redo_gen: redo allocation 1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2,828</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>redo allocation</td><td class='awrnc'>kcrfw_redo_gen: redo allocation 3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>657</td><td align="right" class='awrnc'>3,443</td></tr>
<tr><td class='awrc'>redo allocation</td><td class='awrc'>kcrfw_redo_gen: redo allocation 2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>393</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>redo allocation</td><td class='awrnc'>kcrfw_redo_write: before write</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>71</td><td align="right" class='awrnc'>308</td></tr>
<tr><td class='awrc'>redo allocation</td><td class='awrc'>kcrfw_post: more space</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>58</td><td align="right" class='awrc'>256</td></tr>
<tr><td class='awrnc'>redo writing</td><td class='awrnc'>kcrfwcr</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>53</td></tr>
<tr><td class='awrc'>redo writing</td><td class='awrc'>kcrfw_post: rba scn pair</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>redo writing</td><td class='awrnc'>kcrfw_cal_target_rba</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>10</td></tr>
<tr><td class='awrc'>redo writing</td><td class='awrc'>kcrfw_post: after write</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>space background task latch</td><td class='awrnc'>ktsj_grab_task</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>749</td><td align="right" class='awrnc'>960</td></tr>
<tr><td class='awrc'>space background task latch</td><td class='awrc'>ktsj_detach_task</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>153</td><td align="right" class='awrc'>70</td></tr>
<tr><td class='awrnc'>space background task latch</td><td class='awrnc'>ktsj_smco_purgeexpired</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>121</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>space background task latch</td><td class='awrc'>ktsj_smco_movetasks</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>undo global data</td><td class='awrnc'>ktusmupst: KSLBEGIN</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>9</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>kghfrunp: alloc: wait</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>45</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>kghfre</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>30</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>ksqgtl3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>kghfrunp: batch min scan</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>ksqcmi: if lk mode requested</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>ksqrcl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>7</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>kghalo</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>kghupr1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>50</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7500"></a>
<h3 class="awr">Mutex Sleep Summary</h3>
<ul>
<li class="awr"> ordered by number of sleeps desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the mutex sleep summary. Location, sleeps and wait time are displayed for each mutex type"><tr><th class="awrbg" scope="col">Mutex Type</th><th class="awrbg" scope="col">Location</th><th class="awrbg" scope="col">Sleeps</th><th class="awrbg" scope="col">Wait    Time (ms)</th></tr>
<tr><td class='awrc'>Row Cache</td><td class='awrc'>[19] kqrpre</td><td align="right" class='awrc'>206</td><td align="right" class='awrc'>111</td></tr>
<tr><td class='awrnc'>Library Cache</td><td class='awrnc'>kglhdgh1  64</td><td align="right" class='awrnc'>31</td><td align="right" class='awrnc'>26</td></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kgllkdl1  85</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>32</td></tr>
<tr><td class='awrnc'>Row Cache</td><td class='awrnc'>[06] kqrGetClusterLock</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>10</td></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kglhdgh3     161</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>Library Cache</td><td class='awrnc'>kglget2   2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kglhdgn2 106</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>Library Cache</td><td class='awrnc'>kglpndl1  95</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3800"></a>
<h3 class="awr">Parent Latch Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3900"></a>
<h3 class="awr">Child Latch Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="30"></a>
<h2 class="awr">
Segment Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4000">Segments by Logical Reads</a></li>
<li class="awr"><a class="awr" href="#4100">Segments by Physical Reads</a></li>
<li class="awr"><a class="awr" href="#4104">Segments by Physical Read Requests</a></li>
<li class="awr"><a class="awr" href="#4108">Segments by UnOptimized Reads</a></li>
<li class="awr"><a class="awr" href="#4106">Segments by Optimized Reads</a></li>
<li class="awr"><a class="awr" href="#4110">Segments by Direct Physical Reads</a></li>
<li class="awr"><a class="awr" href="#4120">Segments by Physical Writes</a></li>
<li class="awr"><a class="awr" href="#4124">Segments by Physical Write Requests</a></li>
<li class="awr"><a class="awr" href="#4130">Segments by Direct Physical Writes</a></li>
<li class="awr"><a class="awr" href="#4140">Segments by Table Scans</a></li>
<li class="awr"><a class="awr" href="#4150">Segments by DB Blocks Changes</a></li>
<li class="awr"><a class="awr" href="#4200">Segments by Row Lock Waits</a></li>
<li class="awr"><a class="awr" href="#4300">Segments by ITL Waits</a></li>
<li class="awr"><a class="awr" href="#4400">Segments by Buffer Busy Waits</a></li>
<li class="awr"><a class="awr" href="#4450">Segments by Global Cache Buffer Busy</a></li>
<li class="awr"><a class="awr" href="#4500">Segments by CR Blocks Received</a></li>
<li class="awr"><a class="awr" href="#4600">Segments by Current Blocks Received</a></li>
<li class="awr"><a class="awr" href="#4605">Segments by Global Cache Remote Grants</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4000"></a>
<h3 class="awr">Segments by Logical Reads</h3>
<ul>
<li class="awr">Total Logical Reads:	  17,727,484</li>
<li class="awr">Captured Segments account for	16.0% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by logical reads. Owner, tablespace name, object type, logical read, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Logical Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER165</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78848</td><td align="right" class='awrc'>78845</td><td align="right" class='awrc'>79,216</td><td align="right" class='awrc'>0.45</td></tr>
<tr><td class='awrnc'>USER52</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78287</td><td align="right" class='awrnc'>78289</td><td align="right" class='awrnc'>76,048</td><td align="right" class='awrnc'>0.43</td></tr>
<tr><td class='awrc'>USER250</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>79275</td><td align="right" class='awrc'>79279</td><td align="right" class='awrc'>75,552</td><td align="right" class='awrc'>0.43</td></tr>
<tr><td class='awrnc'>USER170</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78854</td><td align="right" class='awrnc'>78881</td><td align="right" class='awrnc'>75,328</td><td align="right" class='awrnc'>0.42</td></tr>
<tr><td class='awrc'>USER249</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>79267</td><td align="right" class='awrc'>79270</td><td align="right" class='awrc'>74,640</td><td align="right" class='awrc'>0.42</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4100"></a>
<h3 class="awr">Segments by Physical Reads</h3>
<ul>
<li class="awr">Total Physical Reads:	   14,932,774</li>
<li class="awr">Captured Segments account for	16.5% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical reads. Owner, tablespace name, object type, physical reads, etc. are displayed for each segment "><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	 Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER165</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78848</td><td align="right" class='awrc'>78845</td><td align="right" class='awrc'>67,579</td><td align="right" class='awrc'>0.45</td></tr>
<tr><td class='awrnc'>USER444</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80246</td><td align="right" class='awrnc'>80248</td><td align="right" class='awrnc'>67,539</td><td align="right" class='awrnc'>0.45</td></tr>
<tr><td class='awrc'>USER471</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80377</td><td align="right" class='awrc'>80379</td><td align="right" class='awrc'>66,652</td><td align="right" class='awrc'>0.45</td></tr>
<tr><td class='awrnc'>USER462</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80324</td><td align="right" class='awrnc'>80338</td><td align="right" class='awrnc'>65,937</td><td align="right" class='awrnc'>0.44</td></tr>
<tr><td class='awrc'>USER52</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78287</td><td align="right" class='awrc'>78289</td><td align="right" class='awrc'>65,449</td><td align="right" class='awrc'>0.44</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4104"></a>
<h3 class="awr">Segments by Physical Read Requests</h3>
<ul>
<li class="awr">Total Physical Read Requests:	   14,932,644</li>
<li class="awr">Captured Segments account for	16.5% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical read requests. Owner, tablespace name, object type, physical read requests, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Phys Read Requests</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER165</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78848</td><td align="right" class='awrc'>78845</td><td align="right" class='awrc'>67,579</td><td align="right" class='awrc'>0.45</td></tr>
<tr><td class='awrnc'>USER444</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80246</td><td align="right" class='awrnc'>80248</td><td align="right" class='awrnc'>67,539</td><td align="right" class='awrnc'>0.45</td></tr>
<tr><td class='awrc'>USER471</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80377</td><td align="right" class='awrc'>80379</td><td align="right" class='awrc'>66,652</td><td align="right" class='awrc'>0.45</td></tr>
<tr><td class='awrnc'>USER462</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80324</td><td align="right" class='awrnc'>80338</td><td align="right" class='awrnc'>65,937</td><td align="right" class='awrnc'>0.44</td></tr>
<tr><td class='awrc'>USER52</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78287</td><td align="right" class='awrc'>78289</td><td align="right" class='awrc'>65,449</td><td align="right" class='awrc'>0.44</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4108"></a>
<h3 class="awr">Segments by UnOptimized Reads</h3>
<ul>
<li class="awr">Total UnOptimized Read Requests:      14,932,644</li>
<li class="awr">Captured Segments account for	16.5% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by unoptimized reads. Owner, tablespace name, object type, unoptimized reads, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">UnOptimized Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER165</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78848</td><td align="right" class='awrc'>78845</td><td align="right" class='awrc'>67,579</td><td align="right" class='awrc'>0.45</td></tr>
<tr><td class='awrnc'>USER444</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80246</td><td align="right" class='awrnc'>80248</td><td align="right" class='awrnc'>67,539</td><td align="right" class='awrnc'>0.45</td></tr>
<tr><td class='awrc'>USER471</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80377</td><td align="right" class='awrc'>80379</td><td align="right" class='awrc'>66,652</td><td align="right" class='awrc'>0.45</td></tr>
<tr><td class='awrnc'>USER462</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80324</td><td align="right" class='awrnc'>80338</td><td align="right" class='awrnc'>65,937</td><td align="right" class='awrnc'>0.44</td></tr>
<tr><td class='awrc'>USER52</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78287</td><td align="right" class='awrc'>78289</td><td align="right" class='awrc'>65,449</td><td align="right" class='awrc'>0.44</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4106"></a>
<h3 class="awr">Segments by Optimized Reads</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4110"></a>
<h3 class="awr">Segments by Direct Physical Reads</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4120"></a>
<h3 class="awr">Segments by Physical Writes</h3>
<ul>
<li class="awr">Total Physical Writes:	     2,553,257</li>
<li class="awr">Captured Segments account for	16.1% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical writes. Owner, tablespace name, object type, physical writes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER165</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78848</td><td align="right" class='awrc'>78845</td><td align="right" class='awrc'>11,583</td><td align="right" class='awrc'>0.45</td></tr>
<tr><td class='awrnc'>USER50</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78277</td><td align="right" class='awrnc'>78281</td><td align="right" class='awrnc'>11,454</td><td align="right" class='awrnc'>0.45</td></tr>
<tr><td class='awrc'>USER462</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80324</td><td align="right" class='awrc'>80338</td><td align="right" class='awrc'>11,279</td><td align="right" class='awrc'>0.44</td></tr>
<tr><td class='awrnc'>USER170</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78854</td><td align="right" class='awrnc'>78881</td><td align="right" class='awrnc'>11,134</td><td align="right" class='awrnc'>0.44</td></tr>
<tr><td class='awrc'>USER174</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78897</td><td align="right" class='awrc'>78901</td><td align="right" class='awrc'>11,059</td><td align="right" class='awrc'>0.43</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4124"></a>
<h3 class="awr">Segments by Physical Write Requests</h3>
<ul>
<li class="awr">Total Physical Write Requests:	     2,383,820</li>
<li class="awr">Captured Segments account for	16.7% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical write requests. Owner, tablespace name, object type, physical write requests, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Phys Write Requests</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER165</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78848</td><td align="right" class='awrc'>78845</td><td align="right" class='awrc'>11,217</td><td align="right" class='awrc'>0.47</td></tr>
<tr><td class='awrnc'>USER50</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78277</td><td align="right" class='awrnc'>78281</td><td align="right" class='awrnc'>11,140</td><td align="right" class='awrnc'>0.47</td></tr>
<tr><td class='awrc'>USER462</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80324</td><td align="right" class='awrc'>80338</td><td align="right" class='awrc'>10,938</td><td align="right" class='awrc'>0.46</td></tr>
<tr><td class='awrnc'>USER170</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78854</td><td align="right" class='awrnc'>78881</td><td align="right" class='awrnc'>10,797</td><td align="right" class='awrnc'>0.45</td></tr>
<tr><td class='awrc'>USER174</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78897</td><td align="right" class='awrc'>78901</td><td align="right" class='awrc'>10,694</td><td align="right" class='awrc'>0.45</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4130"></a>
<h3 class="awr">Segments by Direct Physical Writes</h3>
<ul>
<li class="awr">Total Direct Physical Writes:		1,116</li>
<li class="awr">Captured Segments account for	71.3% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by direct physical writes. Owner, tablespace name, object type, direct writes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Direct Writes</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_3889879926_119</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>84156</td><td align="right" class='awrc'>84156</td><td align="right" class='awrc'>796</td><td align="right" class='awrc'>71.33</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4140"></a>
<h3 class="awr">Segments by Table Scans</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4150"></a>
<h3 class="awr">Segments by DB Blocks Changes</h3>
<ul>
<li class="awr"> % of Capture shows % of DB Block Changes for each top segment compared  </li>
<li class="awr"> with total DB Block Changes for all segments captured by the Snapshot </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by DB blocks changes. Owner, tablespace name, object type, db block changes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">DB Block Changes</th><th class="awrbg" scope="col">% of Capture</th></tr>
<tr><td class='awrc'>USER52</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78287</td><td align="right" class='awrc'>78289</td><td align="right" class='awrc'>11,584</td><td align="right" class='awrc'>2.76</td></tr>
<tr><td class='awrnc'>USER165</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78848</td><td align="right" class='awrnc'>78845</td><td align="right" class='awrnc'>11,328</td><td align="right" class='awrnc'>2.70</td></tr>
<tr><td class='awrc'>USER250</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>79275</td><td align="right" class='awrc'>79279</td><td align="right" class='awrc'>11,248</td><td align="right" class='awrc'>2.68</td></tr>
<tr><td class='awrnc'>USER170</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78854</td><td align="right" class='awrnc'>78881</td><td align="right" class='awrnc'>11,216</td><td align="right" class='awrnc'>2.67</td></tr>
<tr><td class='awrc'>USER28</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78167</td><td align="right" class='awrc'>78171</td><td align="right" class='awrc'>11,104</td><td align="right" class='awrc'>2.64</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4200"></a>
<h3 class="awr">Segments by Row Lock Waits</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4300"></a>
<h3 class="awr">Segments by ITL Waits</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4400"></a>
<h3 class="awr">Segments by Buffer Busy Waits</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4450"></a>
<h3 class="awr">Segments by Global Cache Buffer Busy</h3>
<ul>
<li class="awr"> % of Capture shows % of GC Buffer Busy for each top segment compared  </li>
<li class="awr"> with GC Buffer Busy for all segments captured by the Snapshot </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by global cache buffer busy waits. Owner, tablespace name, object type, GC buffer busy waits, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">GC Buffer Busy</th><th class="awrbg" scope="col">% of Capture</th></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_PK</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_3889879926_119</td><td class='awrc'>INDEX PARTITION</td><td align="right" class='awrc'>84158</td><td align="right" class='awrc'>84160</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>100.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4500"></a>
<h3 class="awr">Segments by CR Blocks Received</h3>
<ul>
<li class="awr">Total CR Blocks Received:	   26,767</li>
<li class="awr">Captured Segments account for	 8.2% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by CR blocks received. Owner, tablespace name, object type, CR blocks received, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">CR    Blocks  Received</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER144</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78744</td><td align="right" class='awrc'>78748</td><td align="right" class='awrc'>452</td><td align="right" class='awrc'>1.69</td></tr>
<tr><td class='awrnc'>USER7</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78058</td><td align="right" class='awrnc'>78054</td><td align="right" class='awrnc'>253</td><td align="right" class='awrnc'>0.95</td></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_3889879926_119</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>84156</td><td align="right" class='awrc'>84156</td><td align="right" class='awrc'>248</td><td align="right" class='awrc'>0.93</td></tr>
<tr><td class='awrnc'>USER165</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78848</td><td align="right" class='awrnc'>78845</td><td align="right" class='awrnc'>224</td><td align="right" class='awrnc'>0.84</td></tr>
<tr><td class='awrc'>USER56</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78306</td><td align="right" class='awrc'>78310</td><td align="right" class='awrc'>146</td><td align="right" class='awrc'>0.55</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4600"></a>
<h3 class="awr">Segments by Current Blocks Received</h3>
<ul>
<li class="awr">Total Current Blocks Received:		23,633</li>
<li class="awr">Captured Segments account for	11.7% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by current blocks received. Owner, tablespace name, object type, Current blocks received, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Current Blocks  Received</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER144</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78744</td><td align="right" class='awrc'>78748</td><td align="right" class='awrc'>415</td><td align="right" class='awrc'>1.76</td></tr>
<tr><td class='awrnc'>USER7</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78058</td><td align="right" class='awrnc'>78054</td><td align="right" class='awrnc'>266</td><td align="right" class='awrnc'>1.13</td></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_3889879926_119</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>84156</td><td align="right" class='awrc'>84156</td><td align="right" class='awrc'>253</td><td align="right" class='awrc'>1.07</td></tr>
<tr><td class='awrnc'>USER52</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78287</td><td align="right" class='awrnc'>78289</td><td align="right" class='awrnc'>216</td><td align="right" class='awrnc'>0.91</td></tr>
<tr><td class='awrc'>USER165</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78848</td><td align="right" class='awrc'>78845</td><td align="right" class='awrc'>215</td><td align="right" class='awrc'>0.91</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4605"></a>
<h3 class="awr">Segments by Global Cache Remote Grants</h3>
<ul>
<li class="awr">Total Global Cache Remote Grants:	7,567,240</li>
<li class="awr">Captured Segments account for	16.5% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by gc remote grants. Owner, tablespace name, object type, gc remote grants, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">GC Remote Grants</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER444</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80246</td><td align="right" class='awrc'>80248</td><td align="right" class='awrc'>34,157</td><td align="right" class='awrc'>0.45</td></tr>
<tr><td class='awrnc'>USER165</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78848</td><td align="right" class='awrnc'>78845</td><td align="right" class='awrnc'>34,107</td><td align="right" class='awrnc'>0.45</td></tr>
<tr><td class='awrc'>USER471</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80377</td><td align="right" class='awrc'>80379</td><td align="right" class='awrc'>33,811</td><td align="right" class='awrc'>0.45</td></tr>
<tr><td class='awrnc'>USER462</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80324</td><td align="right" class='awrnc'>80338</td><td align="right" class='awrnc'>33,386</td><td align="right" class='awrnc'>0.44</td></tr>
<tr><td class='awrc'>USER52</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78287</td><td align="right" class='awrc'>78289</td><td align="right" class='awrc'>33,167</td><td align="right" class='awrc'>0.44</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="31"></a>
<h2 class="awr">
Dictionary Cache Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4700">Dictionary Cache Stats</a></li>
<li class="awr"><a class="awr" href="#4800">Dictionary Cache Stats (RAC)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4700"></a>
<h3 class="awr">Dictionary Cache Stats</h3>
<ul>
<li class="awr"> &quot;Pct Misses&quot;  should be very low (&lt; 2% in most cases) </li>
<li class="awr"> &quot;Final Usage&quot; is the number of cache entries being used</li>
</ul>
<table border="0" class="tdiff" summary="This table displays dictionary cache statistics. Get requests, % misses, scan requests, final usage, etc. are displayed for each cache"><tr><th class="awrbg" scope="col">Cache</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Scan Reqs</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Mod Reqs</th><th class="awrbg" scope="col">Final Usage</th></tr>
<tr><td scope="row" class='awrc'>dc_awr_control</td><td align="right" class='awrc'>241</td><td align="right" class='awrc'>0.83</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>1</td></tr>
<tr><td scope="row" class='awrnc'>dc_global_oids</td><td align="right" class='awrnc'>5,183</td><td align="right" class='awrnc'>7.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>981</td></tr>
<tr><td scope="row" class='awrc'>dc_histogram_data</td><td align="right" class='awrc'>8,417</td><td align="right" class='awrc'>6.80</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,793</td></tr>
<tr><td scope="row" class='awrnc'>dc_histogram_defs</td><td align="right" class='awrnc'>10,353</td><td align="right" class='awrnc'>10.25</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>363</td><td align="right" class='awrnc'>9,500</td></tr>
<tr><td scope="row" class='awrc'>dc_objects</td><td align="right" class='awrc'>8,736</td><td align="right" class='awrc'>3.02</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>3,799</td></tr>
<tr><td scope="row" class='awrnc'>dc_props</td><td align="right" class='awrnc'>795</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td></tr>
<tr><td scope="row" class='awrc'>dc_rollback_segments</td><td align="right" class='awrc'>12,692</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>879</td></tr>
<tr><td scope="row" class='awrnc'>dc_segments</td><td align="right" class='awrnc'>1,067</td><td align="right" class='awrnc'>34.68</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>1,597</td></tr>
<tr><td scope="row" class='awrc'>dc_sequences</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>20.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>4</td></tr>
<tr><td scope="row" class='awrnc'>dc_tablespaces</td><td align="right" class='awrnc'>547</td><td align="right" class='awrnc'>0.55</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7</td></tr>
<tr><td scope="row" class='awrc'>dc_users</td><td align="right" class='awrc'>191</td><td align="right" class='awrc'>30.37</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,027</td></tr>
<tr><td scope="row" class='awrnc'>outstanding_alerts</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#31">Back to Dictionary Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4800"></a>
<h3 class="awr">Dictionary Cache Stats (RAC)</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#31">Back to Dictionary Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="32"></a>
<h2 class="awr">
Library Cache Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4900">Library Cache Activity</a></li>
<li class="awr"><a class="awr" href="#5000">Library Cache Activity (RAC)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4900"></a>
<h3 class="awr">Library Cache Activity</h3>
<ul>
<li class="awr"> &quot;Pct Misses&quot;  should be very low  </li>
</ul>
<table border="0" class="tdiff" summary="This table displays library cache statistics. Get requests, % misses, pin request, % miss, reloads, etc. are displayed for each library cache namespace"><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Pin Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Reloads</th><th class="awrbg" scope="col">Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>408</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>1,043</td><td align="right" class='awrc'>0.77</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>CLUSTER</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>EDITION</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>HINTSET OBJECT</td><td align="right" class='awrnc'>53</td><td align="right" class='awrnc'>5.66</td><td align="right" class='awrnc'>53</td><td align="right" class='awrnc'>5.66</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>INDEX</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>16.67</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>OBJECT ID</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>QUEUE</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SCHEMA</td><td align="right" class='awrnc'>155</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA</td><td align="right" class='awrc'>2,523</td><td align="right" class='awrc'>13.67</td><td align="right" class='awrc'>287,155</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrc'>46</td><td align="right" class='awrc'>29</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA BUILD</td><td align="right" class='awrnc'>236</td><td align="right" class='awrnc'>69.92</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA STATS</td><td align="right" class='awrc'>236</td><td align="right" class='awrc'>98.73</td><td align="right" class='awrc'>236</td><td align="right" class='awrc'>98.73</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TABLE/PROCEDURE</td><td align="right" class='awrnc'>1,338</td><td align="right" class='awrnc'>5.53</td><td align="right" class='awrnc'>7,997</td><td align="right" class='awrnc'>5.64</td><td align="right" class='awrnc'>161</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TRANSFORMATION</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TRIGGER</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>33.33</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>33.33</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#32">Back to Library Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5000"></a>
<h3 class="awr">Library Cache Activity (RAC)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays library cache statistics. Ges lock requests, GES pin requests, GES pin releases, etc. are displayed for each library cache namespace"><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">GES Lock Requests</th><th class="awrbg" scope="col">GES Pin Requests</th><th class="awrbg" scope="col">GES Pin Releases</th><th class="awrbg" scope="col">GES Inval Requests</th><th class="awrbg" scope="col">GES Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>133</td><td align="right" class='awrc'>994</td><td align="right" class='awrc'>994</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>CLUSTER</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>EDITION</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>HINTSET OBJECT</td><td align="right" class='awrnc'>53</td><td align="right" class='awrnc'>53</td><td align="right" class='awrnc'>53</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>INDEX</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>QUEUE</td><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SCHEMA</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TABLE/PROCEDURE</td><td align="right" class='awrnc'>2,677</td><td align="right" class='awrnc'>5,643</td><td align="right" class='awrnc'>5,643</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TRANSFORMATION</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TRIGGER</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#32">Back to Library Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="33"></a>
<h2 class="awr">
Memory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#8500">Memory Dynamic Components</a></li>
<li class="awr"><a class="awr" href="#8600">Memory Resize Operations Summary</a></li>
<li class="awr"><a class="awr" href="#8650">Memory Resize Ops</a></li>
<li class="awr"><a class="awr" href="#7300">Process Memory Summary</a></li>
<li class="awr"><a class="awr" href="#5900">SGA Memory Summary</a></li>
<li class="awr"><a class="awr" href="#6100">SGA breakdown difference by Pool and Name</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8500"></a>
<h3 class="awr">Memory Dynamic Components</h3>
<ul>
<li class="awr"> Min/Max sizes since instance startup </li>
<li class="awr"> Oper Types/Modes: INItializing,GROw,SHRink,STAtic/IMMediate,DEFerred </li>
<li class="awr"> ordered by Component </li>
</ul>
<table border="0" class="tdiff" summary="This table displays memory dynamic component statistics. Begin snap size, current size, min size, etc. are displayed for each component"><tr><th class="awrbg" scope="col">Component</th><th class="awrbg" scope="col">Begin Snap Size (Mb)</th><th class="awrbg" scope="col">Current Size (Mb)</th><th class="awrbg" scope="col">Min Size (Mb)</th><th class="awrbg" scope="col">Max Size (Mb)</th><th class="awrbg" scope="col">Oper Count</th><th class="awrbg" scope="col">Last Op Typ/Mod</th></tr>
<tr><td scope="row" class='awrc'>ASM Buffer Cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 16K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT 2K buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 32K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT 4K buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 8K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT buffer cache</td><td align="right" class='awrc'>35,072.00</td><td align="right" class='awrc'>35,072.00</td><td align="right" class='awrc'>35,072.00</td><td align="right" class='awrc'>35,200.00</td><td align="right" class='awrc'>0</td><td class='awrc'>SHR/IMM</td></tr>
<tr><td scope="row" class='awrnc'>Data Transfer Cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>In Memory RO Extension Area</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>In Memory RW Extension Area</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>In-Memory Area</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>KEEP buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>PGA Target</td><td align="right" class='awrc'>3,328.00</td><td align="right" class='awrc'>3,328.00</td><td align="right" class='awrc'>3,328.00</td><td align="right" class='awrc'>3,328.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>RECYCLE buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>SGA Target</td><td align="right" class='awrc'>40,960.00</td><td align="right" class='awrc'>40,960.00</td><td align="right" class='awrc'>40,960.00</td><td align="right" class='awrc'>40,960.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>Shared IO Pool</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>java pool</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>large pool</td><td align="right" class='awrnc'>384.00</td><td align="right" class='awrnc'>384.00</td><td align="right" class='awrnc'>384.00</td><td align="right" class='awrnc'>384.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>memoptimize buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>shared pool</td><td align="right" class='awrnc'>5,248.00</td><td align="right" class='awrnc'>5,248.00</td><td align="right" class='awrnc'>1,536.00</td><td align="right" class='awrnc'>5,248.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>GRO/IMM</td></tr>
<tr><td scope="row" class='awrc'>streams pool</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>unified pga pool</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8600"></a>
<h3 class="awr">Memory Resize Operations Summary</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8650"></a>
<h3 class="awr">Memory Resize Ops</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7300"></a>
<h3 class="awr">Process Memory Summary</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap  </li>
<li class="awr"> All rows below contain absolute values (i.e. not diffed over the interval) </li>
<li class="awr"> Max Alloc is Maximum PGA Allocation size at snapshot time  </li>
<li class="awr"> Hist Max Alloc is the Historical Max Allocation for still-connected processes </li>
<li class="awr"> ordered by Begin/End snapshot, Alloc (MB) desc </li>
<li class="awr"> Top 10 containers by Alloc (MB) at end snapshot time are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays process memory summary. Allocation, used, average allocation, etc. are displayed for different category of process memory."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Category</th><th class="awrbg" scope="col">Alloc (MB)</th><th class="awrbg" scope="col">Used (MB)</th><th class="awrbg" scope="col">Avg Alloc (MB)</th><th class="awrbg" scope="col">Std Dev Alloc (MB)</th><th class="awrbg" scope="col">Max Alloc (MB)</th><th class="awrbg" scope="col">Hist Max Alloc (MB)</th><th class="awrbg" scope="col">Num Proc</th><th class="awrbg" scope="col">Num Alloc</th></tr>
<tr><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>530.69</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.91</td><td align="right" class='awrc'>2.39</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>278</td><td align="right" class='awrc'>278</td></tr>
<tr><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>2,357.83</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>5.31</td><td align="right" class='awrnc'>4.41</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>444</td><td align="right" class='awrnc'>444</td></tr>
<tr><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>124.28</td><td align="right" class='awrc'>117.63</td><td align="right" class='awrc'>0.28</td><td align="right" class='awrc'>0.26</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>442</td><td align="right" class='awrc'>378</td></tr>
<tr><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>60.18</td><td align="right" class='awrnc'>45.81</td><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>0.32</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>383</td><td align="right" class='awrnc'>295</td></tr>
<tr><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>3,072.97</td><td align="right" class='awrc'>163.43</td><td align="right" class='awrc'>7.66</td><td align="right" class='awrc'>7.38</td><td align="right" class='awrc'>70</td><td align="right" class='awrc'>68</td><td align="right" class='awrc'>1,547</td><td align="right" class='awrc'>1,395</td></tr>
<tr><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>169.44</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2.73</td><td align="right" class='awrnc'>6.56</td><td align="right" class='awrnc'>43</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>62</td></tr>
<tr><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>992.57</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5.14</td><td align="right" class='awrc'>6.72</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>193</td><td align="right" class='awrc'>193</td></tr>
<tr><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>6.68</td><td align="right" class='awrnc'>1.91</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>191</td><td align="right" class='awrnc'>127</td></tr>
<tr><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>7.37</td><td align="right" class='awrc'>5.81</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>133</td><td align="right" class='awrc'>60</td></tr>
<tr><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>1,176.06</td><td align="right" class='awrnc'>7.72</td><td align="right" class='awrnc'>7.97</td><td align="right" class='awrnc'>13.64</td><td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>70</td><td align="right" class='awrnc'>579</td><td align="right" class='awrnc'>442</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5900"></a>
<h3 class="awr">SGA Memory Summary</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA memory summary. For each SGA region, begin size and end size is displayed."><tr><th class="awrbg" scope="col">SGA regions</th><th class="awrbg" scope="col">Begin Size (Bytes)</th><th class="awrbg" scope="col">End Size (Bytes) (if different)</th></tr>
<tr><td scope="row" class='awrc'>Database Buffers</td><td align="right" class='awrc'>36,909,875,200</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Fixed Size</td><td align="right" class='awrnc'>30,210,816</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Redo Buffers</td><td align="right" class='awrc'>104,005,632</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Variable Size</td><td align="right" class='awrnc'>199,179,108,352</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6100"></a>
<h3 class="awr">SGA breakdown difference by Pool and Name</h3>
<ul>
<li class="awr"> ordered by Pool, Name	</li>
<li class="awr"> N/A value for Begin MB or End MB indicates the size of that Pool/Name was    insignificant, or zero in that snapshot</li>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA breakdown difference. For each pool name, begin and end size are displayed."><tr><th class="awrbg" scope="col">Pool</th><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Begin MB</th><th class="awrbg" scope="col">End MB</th><th class="awrbg" scope="col">% Diff</th></tr>
<tr><td class='awrc'>large</td><td class='awrc'>PX msg pool</td><td align="right" class='awrc'>204.00</td><td align="right" class='awrc'>204.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>large</td><td class='awrnc'>free memory</td><td align="right" class='awrnc'>179.62</td><td align="right" class='awrnc'>179.62</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>ASH buffers</td><td align="right" class='awrc'>64.00</td><td align="right" class='awrc'>64.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>KCRAHT Free Blocks</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>60.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>KGLH0</td><td align="right" class='awrc'>157.25</td><td align="right" class='awrc'>94.61</td><td align="right" class='awrc'>-39.83</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>KJSC rnb slots</td><td align="right" class='awrnc'>124.37</td><td align="right" class='awrnc'>61.58</td><td align="right" class='awrnc'>-50.48</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>SQLA</td><td align="right" class='awrc'>335.51</td><td align="right" class='awrc'>228.04</td><td align="right" class='awrc'>-32.03</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>db_block_hash_buckets</td><td align="right" class='awrnc'>256.00</td><td align="right" class='awrnc'>256.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>free memory</td><td align="right" class='awrc'>974.19</td><td align="right" class='awrc'>1,279.61</td><td align="right" class='awrc'>31.35</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>gc name table</td><td align="right" class='awrnc'>192.00</td><td align="right" class='awrnc'>192.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>gcs resources</td><td align="right" class='awrc'>1,314.71</td><td align="right" class='awrc'>1,314.71</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>gcs resv res hash bucket</td><td align="right" class='awrnc'>288.00</td><td align="right" class='awrnc'>288.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>gcs shadows</td><td align="right" class='awrc'>717.11</td><td align="right" class='awrc'>717.11</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>row cache</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>&#160;</td><td class='awrc'>buffer_cache</td><td align="right" class='awrc'>35,072.00</td><td align="right" class='awrc'>35,072.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>&#160;</td><td class='awrnc'>fixed_sga</td><td align="right" class='awrnc'>28.81</td><td align="right" class='awrnc'>28.81</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>&#160;</td><td class='awrc'>log_buffer</td><td align="right" class='awrc'>99.19</td><td align="right" class='awrc'>99.19</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>&#160;</td><td class='awrnc'>shared_io_pool</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="39"></a>
<h2 class="awr">
Replication Statistics (GoldenGate, XStream)
</h2>
<ul>
<li class="awr"><a class="awr" href="#9000">Replication System Resource Usage</a></li>
<li class="awr"><a class="awr" href="#9010">Replication SGA Usage</a></li>
<li class="awr"><a class="awr" href="#9020">GoldenGate Capture</a></li>
<li class="awr"><a class="awr" href="#9030">GoldenGate Capture Rate</a></li>
<li class="awr"><a class="awr" href="#9040">GoldenGate Apply Reader</a></li>
<li class="awr"><a class="awr" href="#9041">GoldenGate Apply Coordinator</a></li>
<li class="awr"><a class="awr" href="#9042">GoldenGate Apply Server</a></li>
<li class="awr"><a class="awr" href="#9051">GoldenGate Apply Coordinator Rate</a></li>
<li class="awr"><a class="awr" href="#9050">GoldenGate Apply Reader and Server Rate</a></li>
<li class="awr"><a class="awr" href="#9060">XStream Capture</a></li>
<li class="awr"><a class="awr" href="#9070">XStream Capture Rate</a></li>
<li class="awr"><a class="awr" href="#9080">XStream Apply Reader</a></li>
<li class="awr"><a class="awr" href="#9081">XStream Apply Coordinator</a></li>
<li class="awr"><a class="awr" href="#9082">XStream Apply Server</a></li>
<li class="awr"><a class="awr" href="#9091">XStream Apply Coordinator Rate</a></li>
<li class="awr"><a class="awr" href="#9090">XStream Apply Reader and Server Rate</a></li>
<li class="awr"><a class="awr" href="#9100">Table Statistics by DML Operations</a></li>
<li class="awr"><a class="awr" href="#9110">Table Statistics by Conflict Resolutions</a></li>
<li class="awr"><a class="awr" href="#9120">Replication Large Transaction Statistics</a></li>
<li class="awr"><a class="awr" href="#9130">Replication Long Running Transaction Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9000"></a>
<h3 class="awr">Replication System Resource Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9010"></a>
<h3 class="awr">Replication SGA Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9020"></a>
<h3 class="awr">GoldenGate Capture</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9030"></a>
<h3 class="awr">GoldenGate Capture Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9040"></a>
<h3 class="awr">GoldenGate Apply Reader</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9041"></a>
<h3 class="awr">GoldenGate Apply Coordinator</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9042"></a>
<h3 class="awr">GoldenGate Apply Server</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9051"></a>
<h3 class="awr">GoldenGate Apply Coordinator Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9050"></a>
<h3 class="awr">GoldenGate Apply Reader and Server Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9060"></a>
<h3 class="awr">XStream Capture</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9070"></a>
<h3 class="awr">XStream Capture Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9080"></a>
<h3 class="awr">XStream Apply Reader</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9081"></a>
<h3 class="awr">XStream Apply Coordinator</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9082"></a>
<h3 class="awr">XStream Apply Server</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9091"></a>
<h3 class="awr">XStream Apply Coordinator Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9090"></a>
<h3 class="awr">XStream Apply Reader and Server Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9100"></a>
<h3 class="awr">Table Statistics by DML Operations</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9110"></a>
<h3 class="awr">Table Statistics by Conflict Resolutions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9120"></a>
<h3 class="awr">Replication Large Transaction Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9130"></a>
<h3 class="awr">Replication Long Running Transaction Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="34"></a>
<h2 class="awr">
Advanced Queuing
</h2>
<ul>
<li class="awr"><a class="awr" href="#6150">Advanced Queue CPU/IO Usage</a></li>
<li class="awr"><a class="awr" href="#6400">Buffered Queues</a></li>
<li class="awr"><a class="awr" href="#6500">Buffered Queue Subscribers</a></li>
<li class="awr"><a class="awr" href="#6600">Rule Set</a></li>
<li class="awr"><a class="awr" href="#7600">Persistent Queues</a></li>
<li class="awr"><a class="awr" href="#7610">Persistent Queues Rate</a></li>
<li class="awr"><a class="awr" href="#7700">Persistent Queue Subscribers</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6150"></a>
<h3 class="awr">Advanced Queue CPU/IO Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6400"></a>
<h3 class="awr">Buffered Queues</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6500"></a>
<h3 class="awr">Buffered Queue Subscribers</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6600"></a>
<h3 class="awr">Rule Set</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7600"></a>
<h3 class="awr">Persistent Queues</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7610"></a>
<h3 class="awr">Persistent Queues Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7700"></a>
<h3 class="awr">Persistent Queue Subscribers</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="6700"></a>
<h3 class="awr">Resource Limit Stats</h3>
<ul>
<li class="awr"> Only rows with Current or Maximum Utilization &gt; 80% of Limit are shown  </li>
<li class="awr"> For &quot;UNLIMITED&quot; resources, rows whose Current or Maximum Utilization    exceeds 2*Initial Allocation are shown </li>
<li class="awr"> Ordered by Resource Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays resource limit statistics. Current utilization, maximum utilization, initial allocation and limit are displayed for each resource name"><tr><th class="awrbg" scope="col">Resource Name</th><th class="awrbg" scope="col">Current	 Utilization</th><th class="awrbg" scope="col">Maximum	 Utilization</th><th class="awrbg" scope="col">  Initial Allocation</th><th class="awrbg" scope="col">	Limit</th></tr>
<tr><td scope="row" class='awrc'>ges_big_msgs</td><td align="right" class='awrc'>70</td><td align="right" class='awrc'>7,950</td><td class='awrc'>3310</td><td class='awrc'>UNLIMITED</td></tr>
<tr><td scope="row" class='awrnc'>ges_cache_ress</td><td align="right" class='awrnc'>3,621</td><td align="right" class='awrnc'>5,320</td><td class='awrnc'>0</td><td class='awrnc'>UNLIMITED</td></tr>
<tr><td scope="row" class='awrc'>ges_reg_msgs</td><td align="right" class='awrc'>225</td><td align="right" class='awrc'>7,764</td><td class='awrc'>3310</td><td class='awrc'>UNLIMITED</td></tr>
<tr><td scope="row" class='awrnc'>smartio_overhead_memory</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>171,032</td><td class='awrnc'>0</td><td class='awrnc'>UNLIMITED</td></tr>
<tr><td scope="row" class='awrc'>smartio_sessions</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td class='awrc'>0</td><td class='awrc'>UNLIMITED</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="37"></a>
<h2 class="awr">
Shared Server Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#8710">Shared Servers Activity</a></li>
<li class="awr"><a class="awr" href="#8720">Shared Servers Rates</a></li>
<li class="awr"><a class="awr" href="#8730">Shared Servers Utilization</a></li>
<li class="awr"><a class="awr" href="#8740">Shared Servers Common Queue</a></li>
<li class="awr"><a class="awr" href="#8750">Shared Servers Dispatchers</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8710"></a>
<h3 class="awr">Shared Servers Activity</h3>
<ul>
<li class="awr"> Values represent averages for all samples</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers activity statistics. It displays average total connections, average active connections, average total shared servers, etc."><tr><th class="awrbg" scope="col">Avg Total Connections</th><th class="awrbg" scope="col">Avg Active Connections</th><th class="awrbg" scope="col">Avg Total Shared Srvrs</th><th class="awrbg" scope="col">Avg Active Shared Srvrs</th><th class="awrbg" scope="col">Avg Total Dispatchers</th><th class="awrbg" scope="col">Avg Active Dispatchers</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8720"></a>
<h3 class="awr">Shared Servers Rates</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers rate statistics. It displays common queue per second, disp queue per second, server messages per second, common queue total, etc."><tr><th class="awrbg" scope="col">Common Queue Per Sec</th><th class="awrbg" scope="col">Disp Queue Per Sec</th><th class="awrbg" scope="col">Server Msgs/Sec</th><th class="awrbg" scope="col">Server KB/Sec</th><th class="awrbg" scope="col">Common Queue Total</th><th class="awrbg" scope="col">Disp Queue Total</th><th class="awrbg" scope="col">Server Total Msgs</th><th class="awrbg" scope="col">Server Total(KB)</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8730"></a>
<h3 class="awr">Shared Servers Utilization</h3>
<ul>
<li class="awr"> Statistics are combined for all servers </li>
<li class="awr"> Incoming and Outgoing Net % are included in %Busy</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers utilization statistics. It displays total server time second, % busy, % idle, incoming net %, outgoing net %, etc."><tr><th class="awrbg" scope="col">Total Server Time (s)</th><th class="awrbg" scope="col">%Busy</th><th class="awrbg" scope="col">%Idle</th><th class="awrbg" scope="col">Incoming Net %</th><th class="awrbg" scope="col">Outgoing Net %</th></tr>
<tr><td align="right" class='awrc'>654</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8740"></a>
<h3 class="awr">Shared Servers Common Queue</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8750"></a>
<h3 class="awr">Shared Servers Dispatchers</h3>
<ul>
<li class="awr"> Ordered by %Busy, descending </li>
<li class="awr"> Total Queued, Total Queue Wait and Avg Queue Wait are for dispatcher queue </li>
<li class="awr"> Name suffixes:       &quot;(N)&quot; - dispatcher started between begin and end snapshots	&quot;(R)&quot; - dispatcher re-started between begin and end snapshots</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers dispatcher statistics. Average connections, total dispatch time, % busy, % idle, total queued, total queued wait, etc. are displayed for each dispatcher"><tr><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Avg Conns</th><th class="awrbg" scope="col">Total Disp Time (s)</th><th class="awrbg" scope="col">%Busy</th><th class="awrbg" scope="col">%Idle</th><th class="awrbg" scope="col">Total Queued</th><th class="awrbg" scope="col">Total Queue Wait (s)</th><th class="awrbg" scope="col">Avg Queue Wait (ms)</th></tr>
<tr><td scope="row" class='awrc'>D000</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>654</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="36"></a>
<h2 class="awr">
Initialization Parameters
</h2>
<ul>
<li class="awr"><a class="awr" href="#6800">Modified Parameters</a></li>
<li class="awr"><a class="awr" href="#6850">Modified Multi-Valued Parameters</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6800"></a>
<h3 class="awr">Modified Parameters</h3>
<ul>
<li class="awr"> This section shows all the modified initialization parameters that  were in effect during the entire snapshot interval </li>
<li class="awr"> End Value is displayed only if the parameter value was modified within the snapshot interval</li>
</ul>
<table border="0" class="tdiff" summary="This table displays name and value of the modified initialization parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>_ipddb_enable</td><td class='awrc'>TRUE</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>audit_file_dest</td><td class='awrnc'>/u01/app/oracle/admin/p60sdb/adump</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>audit_trail</td><td class='awrc'>DB</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cluster_database</td><td class='awrnc'>TRUE</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>compatible</td><td class='awrc'>19.0.0</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control_files</td><td class='awrnc'>+P60S/P60SDB/CONTROLFILE/current.267.1031675639,	+FRA/P60SDB/CONTROLFILE/current.270.1031675639</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_block_size</td><td class='awrc'>8192</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_create_file_dest</td><td class='awrnc'>+P60S</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_domain</td><td class='awrc'>example.com</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_name</td><td class='awrnc'>p60sdb</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_recovery_file_dest</td><td class='awrc'>+FRA</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_recovery_file_dest_size</td><td class='awrnc'>137438953472</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>diagnostic_dest</td><td class='awrc'>/u01/app/oracle</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dispatchers</td><td class='awrnc'>(PROTOCOL=TCP) (SERVICE=p60sdbXDB)</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>instance_number</td><td class='awrc'>1</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>listener_networks</td><td class='awrnc'>&#160;&#160;</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>local_listener</td><td class='awrc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.11)(PORT=1522))</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>nls_language</td><td class='awrnc'>AMERICAN</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>nls_territory</td><td class='awrc'>AMERICA</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>open_cursors</td><td class='awrnc'>300</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>pga_aggregate_target</td><td class='awrc'>3371171840</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>processes</td><td class='awrnc'>640</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>remote_listener</td><td class='awrc'>mcracpoc-scan.example.com:1521</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>remote_login_passwordfile</td><td class='awrnc'>EXCLUSIVE</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>sga_max_size</td><td class='awrc'>236223201280</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>sga_target</td><td class='awrnc'>42949672960</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>thread</td><td class='awrc'>1</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>undo_tablespace</td><td class='awrnc'>UNDOTBS1</td><td class='awrnc'>&#160;&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#36">Back to Initialization Parameters</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6850"></a>
<h3 class="awr">Modified Multi-Valued Parameters</h3>
<ul>
<li class="awr"> This section only displays parameters that have more than one value </li>
<li class="awr">'(NULL)' indicates a missing parameter value </li>
<li class="awr"> A blank in the 'End Snapshot' indicates the same value as the 'Begin Snapshot'</li>
</ul>
<table border="0" class="tdiff" summary="This table displays name and value of multi-valued parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>control_files</td><td class='awrc'>+FRA/P60SDB/CONTROLFILE/current.270.1031675639</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">control_files</div></td><td class='awrnc'>+P60S/P60SDB/CONTROLFILE/current.267.1031675639</td><td class='awrnc'>&#160;&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#36">Back to Initialization Parameters</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="42"></a>
<h2 class="awr">
Active Session History (ASH) Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#9990">Top SQL with Top Events</a></li>
<li class="awr"><a class="awr" href="#9989">Top SQL with Top Row Sources</a></li>
<li class="awr"><a class="awr" href="#9993">Top Sessions</a></li>
<li class="awr"><a class="awr" href="#9992">Top Blocking Sessions</a></li>
<li class="awr"><a class="awr" href="#9991">Top PL/SQL Procedures</a></li>
<li class="awr"><a class="awr" href="#9988">Top Events</a></li>
<li class="awr"><a class="awr" href="#9994">Top Event P1/P2/P3 Values</a></li>
<li class="awr"><a class="awr" href="#9987">Top DB Objects</a></li>
<li class="awr"><a class="awr" href="#9986">Activity Over Time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9990"></a>
<h3 class="awr">Top SQL with Top Events</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top events by DB Time	 for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event that the SQL is	   waiting on. </li>
<li class="awr"> % Row Source is the percentage of DB Time due to the row source for the     SQL waiting on the event. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top SQL by Top Wait Events"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">Top Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrc'>203653710</td><td align="right" class='awrc'>7850</td><td align="right" class='awrc'>57.28</td>
<td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>51.18</td><td class='awrc'>UPDATE</td><td align="right" class='awrc'>51.18</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrnc'><div class="hidden">203653710</div></td><td align="right" class='awrnc'><div class="hidden">7850</div></td><td align="right" class='awrnc'><div class="hidden">57.27965179542981501632208922742110990207</div></td>
<td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>4.74</td><td class='awrnc'>UPDATE</td><td align="right" class='awrnc'>4.70</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrc'>1497866750</td><td align="right" class='awrc'>5481</td><td align="right" class='awrc'>39.76</td>
<td class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>26.12</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>26.12</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">5481</div></td><td align="right" class='awrnc'><div class="hidden">39.76060935799782372143634385201305767138</div></td>
<td class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>10.40</td><td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>9.47</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">5481</div></td><td align="right" class='awrc'><div class="hidden">39.76060935799782372143634385201305767138</div></td>
<td class='awrc'>db file parallel read</td><td align="right" class='awrc'>1.83</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>1.83</td>
<td class='awrc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9989"></a>
<h3 class="awr">Top SQL with Top Row Sources</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top row sources by DB Time    for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Row Source is the percentage of DB Time spent on the row source by	   that SQL. </li>
<li class="awr"> % Event is the percentage of DB Time spent on the event by the      SQL executing the row source. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table display the Top SQLs with Top Row Sources"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">Top Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrc'>203653710</td><td align="right" class='awrc'>7850</td><td align="right" class='awrc'>57.28</td>
<td class='awrc'>UPDATE</td><td align="right" class='awrc'>56.73</td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>51.18</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrnc'>1497866750</td><td align="right" class='awrnc'>5481</td><td align="right" class='awrnc'>39.76</td>
<td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>38.73</td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>26.12</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">5481</div></td><td align="right" class='awrc'><div class="hidden">39.76060935799782372143634385201305767138</div></td>
<td class='awrc'>INDEX - RANGE SCAN</td><td align="right" class='awrc'>1.02</td><td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>0.93</td>
<td class='awrc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9993"></a>
<h3 class="awr">Top Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9992"></a>
<h3 class="awr">Top Blocking Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9991"></a>
<h3 class="awr">Top PL/SQL Procedures</h3>
<ul>
<li class="awr"> 'PL/SQL entry subprogram' represents the application's top-level	 entry-point (procedure, function, trigger, package initialization	 or RPC call) into PL/SQL. </li>
<li class="awr"> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed	    at the point of sampling . If the value is 'SQL', it represents	   the percentage of time spent executing SQL for the particular	PL/SQL entry subprogram</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top PL/SQL procedures"><tr><th class="awrbg" scope="col">PL/SQL Entry Subprogram</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">PL/SQL Current Subprogram</th><th class="awrbg" scope="col">% Current</th></tr>
<tr><td scope="row" class='awrc'>USER1.SLOBUPDATE</td><td align="right" class='awrc'>57.74</td>
<td class='awrc'>SQL</td><td align="right" class='awrc'>57.74</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9988"></a>
<h3 class="awr">Top Events</h3>
<ul>
<li class="awr"> Top Events by DB Time </li>
<li class="awr"> % Activity is the percentage of DB Time due to the event</li>
</ul>
<table border="0" class="tdiff" summary="This table shows the top events"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Class</th><th class="awrbg" scope="col">Session Type</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>51.19</td><td align="right" class='awrc'>106.75</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block request</td><td class='awrnc'>Cluster</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>26.12</td><td align="right" class='awrnc'>54.46</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>10.56</td><td align="right" class='awrc'>22.03</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td class='awrnc'>User I/O</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>5.72</td><td align="right" class='awrnc'>11.92</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td class='awrc'>User I/O</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>1.83</td><td align="right" class='awrc'>3.81</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9994"></a>
<h3 class="awr">Top Event P1/P2/P3 Values</h3>
<ul>
<li class="awr"> Top Events by DB Time and the top P1/P2/P3 values for those events. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event	</li>
<li class="awr"> % Activity is the percentage of DB Time due to the event with the given     P1,P2,P3 Values.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top event P1/P2/P3 values"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">P1, P2, P3 Values</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Parameter 1</th><th class="awrbg" scope="col">Parameter 2</th><th class="awrbg" scope="col">Parameter 3</th></tr>
<tr><td scope="row" class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>26.12</td><td align="right" class='awrc'>&quot;9&quot;,&quot;31186282&quot;,&quot;1&quot;</td><td align="right" class='awrc'>0.01</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>class#</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>5.72</td><td align="right" class='awrnc'>&quot;9&quot;,&quot;13187649&quot;,&quot;1&quot;</td><td align="right" class='awrnc'>0.01</td>
<td class='awrnc'>file#</td><td class='awrnc'>block#</td><td class='awrnc'>blocks</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>1.83</td><td align="right" class='awrc'>&quot;1&quot;,&quot;61&quot;,&quot;61&quot;</td><td align="right" class='awrc'>1.58</td>
<td class='awrc'>files</td><td class='awrc'>blocks</td><td class='awrc'>requests</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9987"></a>
<h3 class="awr">Top DB Objects</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9986"></a>
<h3 class="awr">Activity Over Time</h3>
<ul>
<li class="awr"> Analysis period is divided into smaller time slots as indicated    in the 'Slot Time (Duration)'. </li>
<li class="awr"> Top 3 events are reported in each of those slots </li>
<li class="awr"> 'Slot Count' shows the number of ASH samples in that slot </li>
<li class="awr"> 'Event Count' shows the number of ASH samples waiting for    that event in that slot </li>
<li class="awr"> '% Event' is 'Event Count' over all ASH samples in the analysis period</li>
</ul>
<table border="0" class="tdiff" summary="This table show the activity in ASH over time"><tr><th class="awrbg" scope="col">Slot Time (Duration)</th><th class="awrbg" scope="col">Slot Count</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Count</th><th class="awrbg" scope="col">% Event</th></tr>
<tr><td align="right" class='awrc'>08:34:03   (57 secs)</td><td align="right" class='awrc'>765</td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>383</td><td align="right" class='awrc'>2.78</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">08:34:03   (57 secs)</div></td><td align="right" class='awrnc'><div class="hidden">765</div></td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>220</td><td align="right" class='awrnc'>1.60</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">08:34:03   (57 secs)</div></td><td align="right" class='awrc'><div class="hidden">765</div></td><td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>71</td><td align="right" class='awrc'>0.52</td></tr>
<tr><td align="right" class='awrnc'>08:35:00   (5.0 min)</td><td align="right" class='awrnc'>7,405</td><td class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>3,685</td><td align="right" class='awrnc'>26.73</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">08:35:00   (5.0 min)</div></td><td align="right" class='awrc'><div class="hidden">7405</div></td><td class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>1,973</td><td align="right" class='awrc'>14.31</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">08:35:00   (5.0 min)</div></td><td align="right" class='awrnc'><div class="hidden">7405</div></td><td class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>772</td><td align="right" class='awrnc'>5.60</td></tr>
<tr><td align="right" class='awrc'>08:40:00   (5.0 min)</td><td align="right" class='awrc'>5,615</td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>2,988</td><td align="right" class='awrc'>21.68</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">08:40:00   (5.0 min)</div></td><td align="right" class='awrnc'><div class="hidden">5615</div></td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>1,407</td><td align="right" class='awrnc'>10.21</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">08:40:00   (5.0 min)</div></td><td align="right" class='awrc'><div class="hidden">5615</div></td><td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>613</td><td align="right" class='awrc'>4.45</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="99995"></a>
<h2>ADDM Task ADDM:3889879926_1_136</h2>
<pre>
	  ADDM Report for Task &apos;ADDM:3889879926_1_136&apos;
	  --------------------------------------------

Analysis Period
---------------
AWR snapshot range from 135 to 136.
Time period starts at 14-FEB-20 08.34.04 AM
Time period ends at 14-FEB-20 08.45.04 AM

Analysis Target
---------------
Database &apos;P60SDB&apos; with DB ID 3889879926.
Database version 19.0.0.0.0.
ADDM performed an analysis of instance p60sdb1, numbered 1 and hosted at
mcracpoc1.example.com.

Activity During the Analysis Period
-----------------------------------
Total database time was 140700 seconds.
The average number of active sessions was 213.18.

Summary of Findings
-------------------
   Description		      Active Sessions	   Recommendations
			      Percent of Activity
   -------------------------  -------------------  ---------------
1  Interconnect Latency       213.18 | 100	   1
2  Top SQL Statements	      212.01 | 99.45	   2
3  Global Cache Messaging     191 | 89.6	   1
4  Buffer Busy - Hot Objects  135.52 | 63.57	   0
5  &quot;User I/O&quot; wait Class	20.34 | 9.54	     0
6  Undersized SGA	      3.04 | 1.43	   1


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 212.86 active sessions, 100% of total activity.
---------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time on this instance.
The instance was consuming 75068 kilo bits per second of interconnect
bandwidth.
3% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 96% for database lock management.
The average latency for 8K interconnect messages was 75358 microseconds.
The instance is using the private interconnect device &quot;fg-priv:1&quot; with IP
address 169.254.22.248 and source &quot;??&quot;.

   Recommendation 1: Host Configuration
   Estimated benefit is 213.18 active sessions, 100% of total activity.
   --------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle&apos;s recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
      Impact is 191 active sessions, 89.6% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 191 active sessions, 89.6% of total activity.


Finding 2: Top SQL Statements
Impact is 211.69 active sessions, 99.45% of total activity.
-----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

   Recommendation 1: SQL Tuning
   Estimated benefit is 124.44 active sessions, 58.37% of total activity.
   ----------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      &quot;35dumc2tpr9dv&quot;.
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 ))
	 AND (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 99% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.

   Recommendation 2: SQL Tuning
   Estimated benefit is 86.84 active sessions, 40.73% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      &quot;bhdvtsvjhgvrh&quot;.
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND
	 (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 99% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.


Finding 3: Global Cache Messaging
Impact is 190.72 active sessions, 89.6% of total activity.
----------------------------------------------------------
Inter-instance messaging was consuming significant database time on this
instance.

   Recommendation 1: Application Analysis
   Estimated benefit is 191 active sessions, 89.6% of total activity.
   ------------------------------------------------------------------
   Action
      Look at the &quot;Top SQL Statements&quot; finding for SQL statements consuming
      significant time on Cluster waits. For example, the UPDATE statement
      with SQL_ID &quot;35dumc2tpr9dv&quot; is responsible for 59% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Cluster&quot; was consuming significant database time.
      Impact is 191 active sessions, 89.6% of total activity.


Finding 4: Buffer Busy - Hot Objects
Impact is 135.32 active sessions, 63.57% of total activity.
-----------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 135.52 active sessions, 63.57% of total activity.
	 Inter-instance messaging was consuming significant database time on
	 this instance.
	 Impact is 191 active sessions, 89.6% of total activity.
	    Wait class &quot;Cluster&quot; was consuming significant database time.
	    Impact is 191 active sessions, 89.6% of total activity.


Finding 5: &quot;User I/O&quot; wait Class
Impact is 20.31 active sessions, 9.54% of total activity.
---------------------------------------------------------
Wait class &quot;User I/O&quot; was consuming significant database time.
Waits for I/O to temporary tablespaces were not consuming significant database
time.
The throughput of the I/O subsystem was not significantly lower than expected.

   No recommendations are available.


Finding 6: Undersized SGA
Impact is 3.04 active sessions, 1.43% of total activity.
--------------------------------------------------------
The SGA was inadequately sized, causing additional I/O or hard parses.
The value of parameter &quot;sga_target&quot; was &quot;40960 M&quot; during the analysis period.

   Recommendation 1: Database Configuration
   Estimated benefit is .73 active sessions, .34% of total activity.
   -----------------------------------------------------------------
   Action
      Increase the size of the SGA by setting the parameter &quot;sga_target&quot; to
      46080 M.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;User I/O&quot; was consuming significant database time.
      Impact is 20.34 active sessions, 9.54% of total activity.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Miscellaneous Information
-------------------------
Wait class &quot;Application&quot; was not consuming significant database time.
Wait class &quot;Commit&quot; was not consuming significant database time.
Wait class &quot;Concurrency&quot; was not consuming significant database time.
Wait class &quot;Configuration&quot; was not consuming significant database time.
CPU was not a bottleneck for the instance.
Wait class &quot;Network&quot; was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.
Hard parsing of SQL statements was not consuming significant database time.

</pre>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="9997"></a>
<a class="awr" name="9997"></a><h3 class="awr">RAC Statistics</h3>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays information about RAC instances">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th><th class="awrnobg" scope="col"></th></tr>
<tr><td scope="row" class='awrnc'>Number of Instances:</td><td align="right" class='awrnc'>    2</td><td align="right" class='awrnc'>	 2</td></tr>
<tr><td scope="row" class='awrc'>Number of LMS's:</td><td align="right" class='awrc'>	 3</td><td align="right" class='awrc'>	  3</td></tr>
<tr><td scope="row" class='awrnc'>Number of realtime LMS's:</td><td align="right" class='awrnc'>    3</td><td align="right" class='awrnc'>    3</td><td class='awrnc'> (0 priority changes)</td></tr>
</table><p />
Global Cache Load Profile
<p />
<table border="0" width="600" class="tdiff" summary="This table displays information about global cache load
		     profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Per Second</th><th class="awrbg" scope="col">Per Transaction</th></tr>
<tr><td scope="row" class='awrnc'>Global Cache blocks received:</td><td align="right" class='awrnc'>		    76.27</td><td align="right" class='awrnc'>		       1.24</td></tr>
<tr><td scope="row" class='awrc'>Global Cache blocks served:</td><td align="right" class='awrc'>		77.43</td><td align="right" class='awrc'>		  1.26</td></tr>
<tr><td scope="row" class='awrnc'>GCS/GES messages received:</td><td align="right" class='awrnc'>	     32,237.32</td><td align="right" class='awrnc'>		  525.87</td></tr>
<tr><td scope="row" class='awrc'>GCS/GES messages sent:</td><td align="right" class='awrc'>	       34,421.00</td><td align="right" class='awrc'>		   561.49</td></tr>
<tr><td scope="row" class='awrnc'>DBWR Fusion writes:</td><td align="right" class='awrnc'>		   0.34</td><td align="right" class='awrnc'>		     0.01</td></tr>
<tr><td scope="row" class='awrc'>Estd Interconnect traffic (KB)</td><td align="right" class='awrc'>	       14,248.80</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
Global Cache Efficiency Percentages (Target local+remote 100%)
<p />
<table border="0" width="600" class="tdiff" summary="This table displays global cache efficiency percentages">
<tr><td scope="row" class='awrnc'>Buffer access -  local cache %:</td><td align="right" class='awrnc'>	15.48</td></tr>
<tr><td scope="row" class='awrc'>Buffer access - remote cache %:</td><td align="right" class='awrc'>   0.28</td></tr>
<tr><td scope="row" class='awrnc'>Buffer access -	  disk %:</td><td align="right" class='awrnc'>	84.24</td></tr>
<tr><td scope="row" class='awrc'>Global Cache Locality	      %:</td><td align="right" class='awrc'>  50.29</td></tr>
</table><p />
Global Cache and Enqueue Services - Workload Characteristics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays workload characteristics for global
		    cache and enqueue services">
<tr><td scope="row" class='awrnc'>Avg global cache cr block receive time (us):</td><td align="right" class='awrnc'>	   63,811.8</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache current block receive time (us):</td><td align="right" class='awrc'>	      26,178.6</td></tr>
<tr><td scope="row" class='awrnc'>Avg LMS process busy %:</td><td align="right" class='awrnc'>		  32.5</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache cr block build time (us):</td><td align="right" class='awrc'> 	   63.7</td></tr>
<tr><td scope="row" class='awrnc'>Global cache log flushes for cr blocks served %:</td><td align="right" class='awrnc'> 	    0.1</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache cr block flush time (us):</td><td align="right" class='awrc'>        42,307.7</td></tr>
<tr><td scope="row" class='awrnc'>Avg global cache current block pin time (us):</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Global cache log flushes for current blocks served %:</td><td align="right" class='awrc'>	       0.1</td></tr>
<tr><td scope="row" class='awrnc'>Avg global cache current block flush time (us):</td><td align="right" class='awrnc'>	      60,000.0</td></tr>
<tr><td scope="row" class='awrc'>Avg global enqueue get time (us):</td><td align="right" class='awrc'>	       4,136.6</td></tr>
</table><p />
Global Cache and Enqueue Services - Messaging Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays messaging statistics for Global Cache
		    and Enqueue Services">
<tr><td scope="row" class='awrnc'>Avg message sent queue time (us):</td><td align="right" class='awrnc'>	 4,804.6</td></tr>
<tr><td scope="row" class='awrc'>Avg message sent queue time on ksxp (us):</td><td align="right" class='awrc'>	      57,603.6</td></tr>
<tr><td scope="row" class='awrnc'>Avg message received kernel queue time (us):</td><td align="right" class='awrnc'>	      125.5</td></tr>
<tr><td scope="row" class='awrc'>Avg message received queue time (us):</td><td align="right" class='awrc'>	      71.8</td></tr>
<tr><td scope="row" class='awrnc'>Avg GCS message process time (us):</td><td align="right" class='awrnc'>	     21.7</td></tr>
<tr><td scope="row" class='awrc'>Avg GES message process time (us):</td><td align="right" class='awrc'> 	   25.3</td></tr>
<tr><td scope="row" class='awrnc'>% of direct sent messages:</td><td align="right" class='awrnc'>   14.65</td></tr>
<tr><td scope="row" class='awrc'>% of indirect sent messages:</td><td align="right" class='awrc'>   85.33</td></tr>
<tr><td scope="row" class='awrnc'>% of flow controlled messages:</td><td align="right" class='awrnc'>	 0.02</td></tr>
</table><p />
<hr />
<p />Cluster Interconnect<p />
<ul>
<li class="awr"> if Public/Source at End snap is different a '*' is displayed</li>
</ul>
<table border="0" class="tdiff" summary="Cluster Interconnect. . if Public/Source at End snap is different a '*' is displayed"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Begin">Begin</th>
<th class="awrbg" colspan=" 2" id="End">End</th>
</tr><tr>
<th class="awrbg" scope="col">Interface</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Src">Src</th></tr>
<tr><td class='awrc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrclb'>169.254.22.248</td><td headers="Begin Pub" class='awrc'>N</td><td headers="Begin Source" class='awrc'>&#160;</td><td headers="End Pub" class='awrclb'>&#160;</td><td headers="End Src" class='awrcrb'>&#160;</td></tr>
</table><p />
<a class="awr" name="top"></a>
<h2 class="awr">
RAC Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#9997">RAC Report Summary</a></li>
<li class="awr"><a class="awr" href="#5100">Global Messaging Statistics</a></li>
<li class="awr"><a class="awr" href="#5200">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#5300">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#7">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#8">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#8790">Dynamic Remastering Statistics</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5100"></a>
<h3 class="awr">Global Messaging Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays global messaging statistics. Total, per second, per transaction values are displayed for each statistics"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>Cluster reconfiguration count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Domain reconfiguration count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim Broadcasts sent</td><td align="right" class='awrc'>164</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Global Enqueue S-optim S-lock gets</td><td align="right" class='awrnc'>45,697</td><td align="right" class='awrnc'>69.16</td><td align="right" class='awrnc'>1.13</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim anti-locks crea</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA local message waits</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA local messages received</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA messages received actual</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA messages received logical</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA requests failed</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA requests succeeded</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Pseudo reconfiguration count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Pseudo rm reconfig count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>acks for commit broadcast(actual)</td><td align="right" class='awrnc'>2,205</td><td align="right" class='awrnc'>3.34</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>acks for commit broadcast(logical)</td><td align="right" class='awrc'>12,213</td><td align="right" class='awrc'>18.48</td><td align="right" class='awrc'>0.30</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(actual)</td><td align="right" class='awrnc'>13,572</td><td align="right" class='awrnc'>20.54</td><td align="right" class='awrnc'>0.34</td></tr>
<tr><td scope="row" class='awrc'>broadcast msgs on commit(logical)</td><td align="right" class='awrc'>21,421</td><td align="right" class='awrc'>32.42</td><td align="right" class='awrc'>0.53</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(wasted)</td><td align="right" class='awrnc'>9,842</td><td align="right" class='awrnc'>14.89</td><td align="right" class='awrnc'>0.24</td></tr>
<tr><td scope="row" class='awrc'>dynamically allocated gcs resources</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>dynamically allocated gcs shadows</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>flow control messages received</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>flow control messages sent</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs assume cvt</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs assume no cvt</td><td align="right" class='awrnc'>8,955</td><td align="right" class='awrnc'>13.55</td><td align="right" class='awrnc'>0.22</td></tr>
<tr><td scope="row" class='awrc'>gcs ast to fg</td><td align="right" class='awrc'>34,024</td><td align="right" class='awrc'>51.49</td><td align="right" class='awrc'>0.84</td></tr>
<tr><td scope="row" class='awrnc'>gcs ast xid</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs bidless ast to lms</td><td align="right" class='awrc'>1,947</td><td align="right" class='awrc'>2.95</td><td align="right" class='awrc'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>gcs blocked converts</td><td align="right" class='awrnc'>22,409</td><td align="right" class='awrnc'>33.91</td><td align="right" class='awrnc'>0.55</td></tr>
<tr><td scope="row" class='awrc'>gcs blocked cr converts</td><td align="right" class='awrc'>30,204</td><td align="right" class='awrc'>45.71</td><td align="right" class='awrc'>0.75</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible basts</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs compatible cr basts (global)</td><td align="right" class='awrc'>110</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible cr basts (local)</td><td align="right" class='awrnc'>1,330</td><td align="right" class='awrnc'>2.01</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>gcs cr basts to PIs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs cr requests to slave</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs cr serve without current lock</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs dbwr flush pi msgs</td><td align="right" class='awrnc'>1,217,035</td><td align="right" class='awrnc'>1,841.80</td><td align="right" class='awrnc'>30.04</td></tr>
<tr><td scope="row" class='awrc'>gcs dbwr write request msgs</td><td align="right" class='awrc'>225</td><td align="right" class='awrc'>0.34</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gcs error msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs flash read serve requests to slave</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs force cr block only</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs force cr grant</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs force cr no current</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs forward cr to pinged instance</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs grant ast</td><td align="right" class='awrnc'>35,971</td><td align="right" class='awrnc'>54.44</td><td align="right" class='awrnc'>0.89</td></tr>
<tr><td scope="row" class='awrc'>gcs grant request in partial open</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate (compatible) converts</td><td align="right" class='awrnc'>177,675</td><td align="right" class='awrnc'>268.89</td><td align="right" class='awrnc'>4.39</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate (null) converts</td><td align="right" class='awrc'>2,051,826</td><td align="right" class='awrc'>3,105.14</td><td align="right" class='awrc'>50.65</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate cr (compatible) converts</td><td align="right" class='awrnc'>99,061</td><td align="right" class='awrnc'>149.91</td><td align="right" class='awrnc'>2.45</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate cr (null) converts</td><td align="right" class='awrc'>11,565,960</td><td align="right" class='awrc'>17,503.39</td><td align="right" class='awrc'>285.52</td></tr>
<tr><td scope="row" class='awrnc'>gcs lms flush pi msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs lms write request msgs</td><td align="right" class='awrc'>161</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs msgs process time(ms)</td><td align="right" class='awrnc'>462,270</td><td align="right" class='awrnc'>699.58</td><td align="right" class='awrnc'>11.41</td></tr>
<tr><td scope="row" class='awrc'>gcs msgs received</td><td align="right" class='awrc'>21,268,705</td><td align="right" class='awrc'>32,187.08</td><td align="right" class='awrc'>525.05</td></tr>
<tr><td scope="row" class='awrnc'>gcs new served by master</td><td align="right" class='awrnc'>438</td><td align="right" class='awrnc'>0.66</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gcs out-of-order msgs</td><td align="right" class='awrc'>12,707</td><td align="right" class='awrc'>19.23</td><td align="right" class='awrc'>0.31</td></tr>
<tr><td scope="row" class='awrnc'>gcs pings refused</td><td align="right" class='awrnc'>8,749</td><td align="right" class='awrnc'>13.24</td><td align="right" class='awrnc'>0.22</td></tr>
<tr><td scope="row" class='awrc'>gcs pkey conflicts retry</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs queued converts</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly failure unmount db</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass N-&gt;Xw ping local</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass N-&gt;Xw ping remote</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass grant X on assume</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass grant ast</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass grant fg ast</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass grant immediate</td><td align="right" class='awrc'>636</td><td align="right" class='awrc'>0.96</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gcs recovery claim msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs refuse xid</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs refuse xid to fg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs refuse xid to lms</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs refuse xid to master</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs regular cr</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs resources for dynamic sga</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs retry convert request</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs shadows for dynamic sga</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs share recovery bast</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs side channel msgs actual</td><td align="right" class='awrnc'>3,806</td><td align="right" class='awrnc'>5.76</td><td align="right" class='awrnc'>0.09</td></tr>
<tr><td scope="row" class='awrc'>gcs side channel msgs logical</td><td align="right" class='awrc'>65,895</td><td align="right" class='awrc'>99.72</td><td align="right" class='awrc'>1.63</td></tr>
<tr><td scope="row" class='awrnc'>gcs stale cr</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs undo cr</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs write notification msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs writes refused</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges msgs process time(ms)</td><td align="right" class='awrnc'>545</td><td align="right" class='awrnc'>0.82</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ges msgs received</td><td align="right" class='awrc'>21,541</td><td align="right" class='awrc'>32.60</td><td align="right" class='awrc'>0.53</td></tr>
<tr><td scope="row" class='awrnc'>ges remote lock allocation</td><td align="right" class='awrnc'>-150</td><td align="right" class='awrnc'>-0.23</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global posts dropped</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>global posts queue time</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global posts queued</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>global posts requested</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global posts sent</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>implicit batch messages received</td><td align="right" class='awrnc'>202,501</td><td align="right" class='awrnc'>306.46</td><td align="right" class='awrnc'>5.00</td></tr>
<tr><td scope="row" class='awrc'>implicit batch messages sent</td><td align="right" class='awrc'>205,126</td><td align="right" class='awrc'>310.43</td><td align="right" class='awrc'>5.06</td></tr>
<tr><td scope="row" class='awrnc'>lmd msg send time(ms)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>lms(s) msg send time(ms)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>messages flow controlled</td><td align="right" class='awrnc'>2,102</td><td align="right" class='awrnc'>3.18</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>messages queue sent actual</td><td align="right" class='awrc'>1,344,786</td><td align="right" class='awrc'>2,035.14</td><td align="right" class='awrc'>33.20</td></tr>
<tr><td scope="row" class='awrnc'>messages queue sent logical</td><td align="right" class='awrnc'>2,044,270</td><td align="right" class='awrnc'>3,093.70</td><td align="right" class='awrnc'>50.47</td></tr>
<tr><td scope="row" class='awrc'>messages received actual</td><td align="right" class='awrc'>3,073,012</td><td align="right" class='awrc'>4,650.55</td><td align="right" class='awrc'>75.86</td></tr>
<tr><td scope="row" class='awrnc'>messages received logical</td><td align="right" class='awrnc'>21,290,246</td><td align="right" class='awrnc'>32,219.68</td><td align="right" class='awrnc'>525.58</td></tr>
<tr><td scope="row" class='awrc'>messages sent directly</td><td align="right" class='awrc'>1,497,260</td><td align="right" class='awrc'>2,265.88</td><td align="right" class='awrc'>36.96</td></tr>
<tr><td scope="row" class='awrnc'>messages sent indirectly</td><td align="right" class='awrnc'>8,722,126</td><td align="right" class='awrnc'>13,199.66</td><td align="right" class='awrnc'>215.32</td></tr>
<tr><td scope="row" class='awrc'>messages sent not implicit batched</td><td align="right" class='awrc'>67,813</td><td align="right" class='awrc'>102.63</td><td align="right" class='awrc'>1.67</td></tr>
<tr><td scope="row" class='awrnc'>messages sent pbatched</td><td align="right" class='awrnc'>19,930,667</td><td align="right" class='awrnc'>30,162.15</td><td align="right" class='awrnc'>492.02</td></tr>
<tr><td scope="row" class='awrc'>msgs causing lmd to send msgs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>msgs causing lms(s) to send msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>msgs received kernel queue time (ns)</td><td align="right" class='awrc'>2,671,495,894,949</td><td align="right" class='awrc'>4,042,918,555.76</td><td align="right" class='awrc'>65,949,834.48</td></tr>
<tr><td scope="row" class='awrnc'>msgs received queue time (ms)</td><td align="right" class='awrnc'>1,527,960</td><td align="right" class='awrnc'>2,312.34</td><td align="right" class='awrnc'>37.72</td></tr>
<tr><td scope="row" class='awrc'>msgs received queued</td><td align="right" class='awrc'>21,290,244</td><td align="right" class='awrc'>32,219.67</td><td align="right" class='awrc'>525.58</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queue time (ms)</td><td align="right" class='awrnc'>11,841,379</td><td align="right" class='awrnc'>17,920.20</td><td align="right" class='awrnc'>292.32</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queue time on ksxp (ms)</td><td align="right" class='awrc'>201,759,316</td><td align="right" class='awrc'>305,333.23</td><td align="right" class='awrc'>4,980.73</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queued</td><td align="right" class='awrnc'>2,464,576</td><td align="right" class='awrnc'>3,729.78</td><td align="right" class='awrnc'>60.84</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queued on ksxp</td><td align="right" class='awrc'>3,502,547</td><td align="right" class='awrc'>5,300.59</td><td align="right" class='awrc'>86.47</td></tr>
<tr><td scope="row" class='awrnc'>number of broadcasted resources</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of directly freed master res</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of ges deadlock detected</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of lock borrowed by LMD</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of received ODPS messages</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of received RBA messages</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of resource borrowed by LMD</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of sent ODPS messages</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of sent RBA messages</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>process batch messages received</td><td align="right" class='awrc'>1,597,069</td><td align="right" class='awrc'>2,416.93</td><td align="right" class='awrc'>39.43</td></tr>
<tr><td scope="row" class='awrnc'>process batch messages sent</td><td align="right" class='awrnc'>1,888,012</td><td align="right" class='awrnc'>2,857.23</td><td align="right" class='awrnc'>46.61</td></tr>
<tr><td scope="row" class='awrc'>receiver cycle time</td><td align="right" class='awrc'>800,088</td><td align="right" class='awrc'>1,210.82</td><td align="right" class='awrc'>19.75</td></tr>
<tr><td scope="row" class='awrnc'>receiver loop count</td><td align="right" class='awrnc'>1,829,449</td><td align="right" class='awrnc'>2,768.60</td><td align="right" class='awrnc'>45.16</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5200"></a>
<h3 class="awr">Global CR Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays global CR served statistics. For each statistics, total value is shown"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th></tr>
<tr><td scope="row" class='awrc'>CR Block Requests</td><td align="right" class='awrc'>33,371</td></tr>
<tr><td scope="row" class='awrnc'>CURRENT Block Requests</td><td align="right" class='awrnc'>81</td></tr>
<tr><td scope="row" class='awrc'>Data Block Requests</td><td align="right" class='awrc'>33,371</td></tr>
<tr><td scope="row" class='awrnc'>Undo Block Requests</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TX Block Requests</td><td align="right" class='awrc'>12</td></tr>
<tr><td scope="row" class='awrnc'>Current Results</td><td align="right" class='awrnc'>33,425</td></tr>
<tr><td scope="row" class='awrc'>Private results</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>Zero Results</td><td align="right" class='awrnc'>14</td></tr>
<tr><td scope="row" class='awrc'>Disk Read Results</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>Fail Results</td><td align="right" class='awrnc'>3</td></tr>
<tr><td scope="row" class='awrc'>Fairness Down Converts</td><td align="right" class='awrc'>33,228</td></tr>
<tr><td scope="row" class='awrnc'>Light Works</td><td align="right" class='awrnc'>18,343</td></tr>
<tr><td scope="row" class='awrc'>Flushes</td><td align="right" class='awrc'>26</td></tr>
<tr><td scope="row" class='awrnc'>Builds</td><td align="right" class='awrnc'>33,349</td></tr>
<tr><td scope="row" class='awrc'>Errors</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5300"></a>
<h3 class="awr">Global Current Server Statistics</h3>
<ul>
<li class="awr"> Pins	 = CURRENT Block Pin Operations </li>
<li class="awr"> Flushes = Redo Flush before CURRENT Block Served Operations</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global current served statistics"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th></tr>
<tr><td scope="row" class='awrc'>Pins</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Flushes</td><td align="right" class='awrnc'>23</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>52.17</td><td align="right" class='awrnc'>39.13</td><td align="right" class='awrnc'>8.70</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="7"></a>
<h2 class="awr">
Global Cache Transfer Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#5400">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#5450">Global Cache Transfer Times (us)</a></li>
<li class="awr"><a class="awr" href="#5460">Global Cache Transfer (Immediate)</a></li>
<li class="awr"><a class="awr" href="#5470">Global Cache Times (Immediate)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5400"></a>
<h3 class="awr">Global Cache Transfer Statistics</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> Busy	     (Busy) - Block Transfer impacted by Remote Contention </li>
<li class="awr"> Congested (Congst) - Block Transfer impacted by Remote System Load </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer stats. CR, blocks received, % immediate, % busy, % congestion are displayed for each instance and block class"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CR">CR</th>
<th class="awrbg" colspan=" 4" id="Current">Current</th>
</tr><tr>
<th class="awrbg" scope="col">Inst No</th><th class="awrbg" scope="col">Block	Class  </th><th class="awrbg" scope="col" id="Blocks|Received">Blocks Received</th><th class="awrbg" scope="col" id="%|Immed">% Immed</th><th class="awrbg" scope="col" id="%|Busy">% Busy</th><th class="awrbg" scope="col" id="%|Congst">% Congst</th><th class="awrbg" scope="col" id="Blocks|Received">Blocks Received</th><th class="awrbg" scope="col" id="%|Immed">% Immed</th><th class="awrbg" scope="col" id="%|Busy">% Busy</th><th class="awrbg" scope="col" id="%|Congst">% Congst</th></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>data block</td><td align="right" headers="CR Blocks|Received" class='awrclb'>23,451</td><td align="right" headers="CR %|Immed" class='awrc'>91.87</td><td align="right" headers="CR %|Busy" class='awrc'>0.39</td><td align="right" headers="CR %|Congst" class='awrc'>7.74</td><td align="right" headers="Current Blocks|Received" class='awrclb'>23,197</td><td align="right" headers="Current %|Immed" class='awrc'>7.21</td><td align="right" headers="Current %|Busy" class='awrc'>75.77</td><td align="right" headers="Current %|Congst" class='awrcrb'>17.02</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>undo header</td><td align="right" headers="CR Blocks|Received" class='awrnclb'>2,998</td><td align="right" headers="CR %|Immed" class='awrnc'>89.03</td><td align="right" headers="CR %|Busy" class='awrnc'>2.70</td><td align="right" headers="CR %|Congst" class='awrnc'>8.27</td><td align="right" headers="Current Blocks|Received" class='awrnclb'>66</td><td align="right" headers="Current %|Immed" class='awrnc'>0.00</td><td align="right" headers="Current %|Busy" class='awrnc'>86.36</td><td align="right" headers="Current %|Congst" class='awrncrb'>13.64</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>Others</td><td align="right" headers="CR Blocks|Received" class='awrclb'>85</td><td align="right" headers="CR %|Immed" class='awrc'>77.65</td><td align="right" headers="CR %|Busy" class='awrc'>0.00</td><td align="right" headers="CR %|Congst" class='awrc'>22.35</td><td align="right" headers="Current Blocks|Received" class='awrclb'>249</td><td align="right" headers="Current %|Immed" class='awrc'>9.24</td><td align="right" headers="Current %|Busy" class='awrc'>75.90</td><td align="right" headers="Current %|Congst" class='awrcrb'>14.86</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5450"></a>
<h3 class="awr">Global Cache Transfer Times (us)</h3>
<ul>
<li class="awr"> Avg Time - average time of all blocks (Immed,Busy,Congst) in us </li>
<li class="awr"> Immed, Busy, Congst -	Average times in us </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer time statistics"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 4" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col">Inst No</th><th class="awrbg" scope="col">Block	Class  </th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Congst">Congst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Congst">Congst</th></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>data block</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>69047</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>69813</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>74378</td><td align="right" headers="CRAvgTime(us) Congst" class='awrc'>59699</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>26155</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>67195</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>22869</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrcrb'>23395</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>undo header</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>18051</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>14700</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>92584</td><td align="right" headers="CRAvgTime(us) Congst" class='awrnc'>29778</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>61842</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>67390</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrncrb'>26704</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>others</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>15112</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>17003</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Congst" class='awrc'>8543</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>20706</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>7803</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>24684</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrcrb'>8405</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>undo block</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Congst" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5460"></a>
<h3 class="awr">Global Cache Transfer (Immediate)</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> % of Blocks Received requiring 2 or 3 hops </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer (immediate) statistics"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="CR">CR</th>
<th class="awrbg" colspan=" 3" id="Current">Current</th>
</tr><tr>
<th class="awrbg" scope="col">Src Inst#</th><th class="awrbg" scope="col">Block   Class  </th><th class="awrbg" scope="col">Blocks Lost</th><th class="awrbg" scope="col" id="ImmedBlks|Received">Immed Blks Received</th><th class="awrbg" scope="col" id="%|2hop">% 2hop</th><th class="awrbg" scope="col" id="%|3hop">% 3hop</th><th class="awrbg" scope="col" id="ImmedBlks|Received">Immed Blks Received</th><th class="awrbg" scope="col" id="%|2hop">% 2hop</th><th class="awrbg" scope="col" id="%|3hop">% 3hop</th></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>data block</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrclb'>21,544</td><td align="right" headers="CR %|2hop" class='awrc'>100.00</td><td align="right" headers="CR %|3hop" class='awrc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrclb'>1,673</td><td align="right" headers="Current %|2hop" class='awrc'>100.00</td><td align="right" headers="Current %|3hop" class='awrcrb'>0.00</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>undo header</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrnclb'>2,669</td><td align="right" headers="CR %|2hop" class='awrnc'>100.00</td><td align="right" headers="CR %|3hop" class='awrnc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrnclb'>&#160;</td><td align="right" headers="Current %|2hop" class='awrnc'>&#160;</td><td align="right" headers="Current %|3hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>others</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrclb'>66</td><td align="right" headers="CR %|2hop" class='awrc'>100.00</td><td align="right" headers="CR %|3hop" class='awrc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrclb'>23</td><td align="right" headers="Current %|2hop" class='awrc'>100.00</td><td align="right" headers="Current %|3hop" class='awrcrb'>0.00</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>undo block</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrnclb'>&#160;</td><td align="right" headers="CR %|2hop" class='awrnc'>&#160;</td><td align="right" headers="CR %|3hop" class='awrnc'>&#160;</td><td align="right" headers="Current ImmedBlks|Received" class='awrnclb'>&#160;</td><td align="right" headers="Current %|2hop" class='awrnc'>&#160;</td><td align="right" headers="Current %|3hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5470"></a>
<h3 class="awr">Global Cache Times (Immediate)</h3>
<ul>
<li class="awr"> Blocks Lost, 2-hop and 3-hop Average times in (us) </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache times (immediate) statistics"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 3" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col">Src Inst#</th><th class="awrbg" scope="col">Block   Class  </th><th class="awrbg" scope="col">Lost Time</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="2hop">2hop</th><th class="awrbg" scope="col" id="3hop">3hop</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="2hop">2hop</th><th class="awrbg" scope="col" id="3hop">3hop</th></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>data block</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrclb'>69813</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrc'>69813</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrclb'>67195</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrc'>67195</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>undo header</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnclb'>14700</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrnc'>14700</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>others</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrclb'>17003</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrc'>17003</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrclb'>7803</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrc'>7803</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>undo block</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnclb'>&#160;</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="8"></a>
<h2 class="awr">
Interconnect Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#7800">Interconnect Latency Stats</a></li>
<li class="awr"><a class="awr" href="#7900">Interconnect Throughput by Client</a></li>
<li class="awr"><a class="awr" href="#8000">Interconnect Device Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7800"></a>
<h3 class="awr">Interconnect Ping Latency Statistics</h3>
<ul>
<li class="awr"> Ping latency of the roundtrip of a message from this instance to </li>
<li class="awr"> target instances.  </li>
<li class="awr"> The target instance is identified by an instance number. </li>
<li class="awr"> Average and standard deviation of ping latency is given in microseconds </li>
<li class="awr"> for message sizes of 500 bytes and 8K. </li>
<li class="awr"> Note that latency of a message from the instance to itself is used as </li>
<li class="awr"> control, since message latency can include wait for CPU</li>
</ul>
<table border="0" class="tdiff" summary="This table displays IC ping latency statistics"><tr><th class="awrbg" scope="col">Target Instance</th><th class="awrbg" scope="col">500B Ping Count</th><th class="awrbg" scope="col">Avg Latency 500B msg</th><th class="awrbg" scope="col">Stddev 500B msg</th><th class="awrbg" scope="col">8K Ping Count</th><th class="awrbg" scope="col">Avg Latency 8K msg</th><th class="awrbg" scope="col">Stddev 8K msg</th></tr>
<tr><td align="right" class='awrc'>1</td><td align="right" class='awrc'>59</td><td align="right" class='awrc'>690</td><td align="right" class='awrc'>0.47</td><td align="right" class='awrc'>65</td><td align="right" class='awrc'>676</td><td align="right" class='awrc'>0.45</td></tr>
<tr><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>59</td><td align="right" class='awrnc'>2033</td><td align="right" class='awrnc'>2.08</td><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>372652</td><td align="right" class='awrnc'>1,121.36</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7900"></a>
<h3 class="awr">Interconnect Throughput by Client</h3>
<ul>
<li class="awr"> Throughput of interconnect usage by major consumers </li>
<li class="awr"> All throughput numbers are megabytes per second</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Interconnect throughput by client statistics"><tr><th class="awrbg" scope="col">Used By</th><th class="awrbg" scope="col">Send Mbytes/sec</th><th class="awrbg" scope="col">Receive Mbytes/sec</th></tr>
<tr><td scope="row" class='awrc'>Global Cache</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>0.31</td></tr>
<tr><td scope="row" class='awrnc'>Parallel Query</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>DB Locks</td><td align="right" class='awrc'>8.80</td><td align="right" class='awrc'>7.98</td></tr>
<tr><td scope="row" class='awrnc'>DB Streams</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.01</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8000"></a>
<h3 class="awr">Interconnect Device Statistics</h3>
<ul>
<li class="awr"> Throughput and errors of interconnect devices (at OS level) </li>
<li class="awr"> All throughput numbers are megabytes per second</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Interconnect device statistics. IP address, public, source, etc. are displayed for each device"><tr><th class="awrbg" scope="col">Device Name</th><th class="awrbg" scope="col">IP Address</th><th class="awrbg" scope="col">Public</th><th class="awrbg" scope="col">Source</th><th class="awrbg" scope="col">Send Mbytes/sec</th><th class="awrbg" scope="col">Send Errors</th><th class="awrbg" scope="col">Send Dropped</th><th class="awrbg" scope="col">Send Buffer Overrun</th><th class="awrbg" scope="col">Send Carrier Lost</th><th class="awrbg" scope="col">Receive Mbytes/sec</th><th class="awrbg" scope="col">Receive Errors</th><th class="awrbg" scope="col">Receive Dropped</th><th class="awrbg" scope="col">Receive Buffer Overrun</th><th class="awrbg" scope="col">Receive Frame Errors</th></tr>
<tr><td scope="row" class='awrc'>fg-priv:1</td><td class='awrc'>169.254.22.248</td><td class='awrc'>NO</td><td class='awrc'>&#160;</td>
<td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td>
<td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="8790"></a>
<h3 class="awr">Dynamic Remastering Statistics</h3>
<ul>
<li class="awr"> Times are in seconds </li>
<li class="awr"> Affinity objects - Affinity objects mastered at the begin/end snapshot </li>
<li class="awr"> Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot</li>
</ul>
<table border="0" class="tdiff" summary="Dynamic Remastering Statistics. . Times are in seconds. Affinity objects - Affinity objects mastered at the begin/end snapshot. Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot"><tr><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Remaster Op</th><th class="awrbg" scope="col">Begin Snap</th><th class="awrbg" scope="col">End Snap</th></tr>
<tr><td scope="row" class='awrc'>affinity objects</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td scope="row" class='awrnc'>read-mostly objects</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>affinity objects (other inst)</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td scope="row" class='awrnc'>read-mostly objects (persistent)</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<p />
End of Report
</body></html>
Report written to awr.html
SQL> Disconnected from Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

WORKLOAD REPOSITORY REPORT (RAC)

Database Summary
~~~~~~~~~~~~~~~~
				   Database					   Snapshot Ids     Number of Instances     Number of Hosts	Report Total (minutes)
-----------------------------------------------------------------------------	-----------------   ------------------	 ------------------   ------------------------
	 Id Name      Unique Name Role		   Edition RAC CDB Block Size	   Begin      End   In Report	 Total	 In Report    Total	  DB time Elapsed time
----------- --------- ----------- ---------------- ------- --- --- ----------	-------- --------   --------- --------	 --------- --------   ----------- ------------
 3889879926 P60SDB    p60sdb	  PRIMARY	   EE	   YES NO	 8192	     135      136	    2	     2		 2	  2	 4,804.82	 11.01
Database Instances Included In Report
-> Listed in order of instance number, I#
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
																      Avg Active
  I# Instance  Host	  Startup	  Begin Snap Time End Snap Time   Release	  Elapsed Time(min) DB time(min) Up Time(hrs)	Sessions Platform
---- --------- ---------- --------------- --------------- --------------- --------------- ----------------- ------------ ------------ ---------- ---------------
   1 p60sdb1   mcracpoc1. 13-Feb-20 14:57 14-Feb-20 08:34 14-Feb-20 08:45 19.0.0.0.0		      11.02	2,345.01	17.79	  212.86 Linux x86 64-bi
   2 p60sdb2   mcracpoc2. 13-Feb-20 14:57 14-Feb-20 08:34 14-Feb-20 08:45 19.0.0.0.0		      11.02	2,459.81	17.79	  223.28 Linux x86 64-bi

Top ADDM Findings by Average Active Sessions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Finding Name				 Avg act Percen Task Name		       Begin Snap Time End Snap Time
---------------------------------------- ------- ------ ------------------------------ --------------- ---------------
Interconnect Latency			  436.14 1.E+02 ADDM:3889879926_136	       14-Feb-20 08:34 14-Feb-20 08:45
Top SQL Statements			  436.14  99.41 ADDM:3889879926_136	       14-Feb-20 08:34 14-Feb-20 08:45
Global Cache Messaging			  436.14  90.79 ADDM:3889879926_136	       14-Feb-20 08:34 14-Feb-20 08:45
Buffer Busy - Hot Objects		  436.14  64.48 ADDM:3889879926_136	       14-Feb-20 08:34 14-Feb-20 08:45
"User I/O" wait Class			  436.14   8.51 ADDM:3889879926_136	       14-Feb-20 08:34 14-Feb-20 08:45
Cache Sizes
-> All values are in Megabytes
-> Listed in order of instance number, I#
-> End values displayed only if different from Begin values
~~~~~~~~~~~
	 Memory Target	       Sga Target	    DB Cache	      Shared Pool	   Large Pool	       Java Pool	  Streams Pool	       PGA Target
       -----------------   -----------------   -----------------   -----------------   -----------------   -----------------   -----------------   -----------------
  I#	  Begin      End      Begin	 End	  Begin      End      Begin	 End	  Begin      End      Begin	 End	  Begin      End      Begin	 End   Log Buffer
----   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   ----------
   1			     40,960		 35,072 	      5,248		    384 						      3,328		     96.1
   2			     40,960		 35,072 	      5,248		    384 						      3,328		     96.1
 ~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~
 Avg			     40,960		 35,072 	      5,248		    384 						      3,328		     96.1
 Min			     40,960		 35,072 	      5,248		    384 						      3,328		     96.1
 Max			     40,960		 35,072 	      5,248		    384 						      3,328		     96.1

OS Statistics By Instance	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Listed in order of instance number, I#
-> End values are diplayed only if different from begin values

	      CPU		Load			  % CPU 				  Time (s)			 Memory 	    End Values
       -----------------   -------------   ----------------------------------	--------------------------------------------   ----------   -------------------------
  I#   #CPUs #Core #Sckt    Begin    End   % Busy  % Usr  % Sys  % WIO	% Idl		  Busy		 Idle	       Total	       MB   #CPU #Cor #Sck Memory (M)
----   ----- ----- -----   ------ ------   ------ ------ ------ ------ ------	-------------- -------------- --------------   ----------   ---- ---- ---- ----------
   1	  32	16     1     32.2    9.5     25.0    7.1   11.6   17.4	 75.0	       4,891.2	     14,662.6	    19,553.8	257,947.8
   2	  32	16     1      8.8    7.9     26.9    7.7   12.1   14.2	 73.1	       5,206.9	     14,127.8	    19,334.7	257,947.8
 ~~~										~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum										      10,098.1	     28,790.3	    38,888.4
			  --------------------------------------------------------------------------------------------------------------------


Time Model			       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

					 SQL Exec		     Hard Parse
  I#	DB time (s)	DB CPU (s)	  Ela (s)  Parse Ela (s)	Ela (s) PL/SQL Ela (s)	 Java Ela (s)	 bg time (s)	 bg CPU (s)
---- -------------- -------------- -------------- -------------- -------------- -------------- -------------- -------------- --------------
   1	  140,700.4	   2,660.0	140,688.0	     7.3	    6.8 	  28.0		  0.0	     3,502.4	    1,337.8
   2	  147,588.6	   2,757.5	147,576.9	    24.7	   24.5 	  16.6		  0.0	     3,372.6	    1,476.7
 ~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum	  288,289.0	   5,417.5	288,264.9	    32.0	   31.3 	  44.6		  0.0	     6,875.0	    2,814.5
 Avg	  144,144.5	   2,708.7	144,132.5	    16.0	   15.7 	  22.3		  0.0	     3,437.5	    1,407.3
 Std	    4,870.7	      68.9	  4,871.2	    12.3	   12.5 	   8.0		  0.0		91.8	       98.2
			  --------------------------------------------------------------------------------------------------------------------

Time Model - % of DB time	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]

							      % DB time 							      % bg time
		      ----------------------------------------------------------------------------------------- 		   --------------
	    % Total													 % Total
  I#	    DB time	      DB CPU   SQL Exec Ela	 Parse Ela     Hard Parse     PL/SQL Ela       Java Ela 	 bg time	   bg CPU
---- --------------   -------------- -------------- -------------- -------------- -------------- --------------   --------------   --------------
   1	       48.8		 1.9	      100.0	       0.0	      0.0	     0.0	    0.0 	    50.9	     38.2
   2	       51.2		 1.9	      100.0	       0.0	      0.0	     0.0	    0.0 	    49.1	     43.8
 ~~~ ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~
 Avg	       50.0		 1.9	      100.0	       0.0	      0.0	     0.0	    0.0 	    50.0	     41.0
			  --------------------------------------------------------------------------------------------------------------------


Foreground Wait Classes -  % of Total DB timeDB/Inst: P60SDB/p60sdb1  Snaps: 1
-> Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time

	  User I/O	 Sys I/O	 Other	      Applic	    Commit	 Network      Concurcy	      Config	   Cluster	   Admin     Scheduler	      DB CPU
---- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- -------------
	       8.5	     0.0	   0.7		 0.0	       0.0	     0.0	   0.0		 0.0	      90.8	     N/A	   N/A		 1.9
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Classes 	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

  I#   User I/O(s)    Sys I/O(s)      Other(s)	  Applic (s)	Commit (s)   Network (s)  Concurcy (s)	  Config (s)   Cluster (s)     Admin (s) Scheduler (s)	  DB CPU (s)	    DB time
---- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- --------------
   1	  13,425.4	     0.0       1,132.9		 0.0	       3.2	     0.0	   9.2		13.3	 126,063.2	     N/A	   N/A	     2,660.0	  140,700.4
   2	  11,109.7	     0.0       1,006.9		 0.0	       4.1	     0.0	  72.1		 0.2	 135,669.4	     N/A	   N/A	     2,757.5	  147,588.6
 ~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum	  24,535.1	     0.0       2,139.8		 0.0	       7.3	     0.0	  81.3		13.5	 261,732.6	     0.0	   0.0	     5,417.5	  288,289.0
 Avg	  12,267.6	     0.0       1,069.9		 0.0	       3.7	     0.0	  40.7		 6.7	 130,866.3	     N/A	   N/A	     2,708.7	  144,144.5
 Std	   1,637.4	     0.0	  89.1		 0.0	       0.6	     0.0	  44.4		 9.2	   6,792.6	     N/A	   N/A		68.9	    4,870.7
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Classes -  % of DB time DB/Inst: P60SDB/p60sdb1  Snaps: 135-13
-> % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time

										      % DB time
       -----------------------------------------------------------------------------------------------------------------------------------------------------------------------
																						       % Total
  I#	    User I/O	   Sys I/O	   Other	Applic	      Commit	   Network	Concurcy	Config	     Cluster	     Admin     Scheduler	DB CPU	       DB time
----   ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- -------------	 -------------
   1		 9.5	       0.0	     0.8	   0.0		 0.0	       0.0	     0.0	   0.0		89.6	       N/A	     N/A	   1.9		  48.8
   2		 7.5	       0.0	     0.7	   0.0		 0.0	       0.0	     0.0	   0.0		91.9	       N/A	     N/A	   1.9		  51.2
 ~~~   ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~
 Avg		 8.5	       0.0	     0.7	   0.0		 0.0	       0.0	     0.0	   0.0		90.8	       N/A	     N/A	   1.9
			  --------------------------------------------------------------------------------------------------------------------


Top Timed Events		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time '	       : Per-instance 'Wait Time Avg ' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *   Cluster	  gc current grant busy 			2,208,790	0.0	 153,207.99  69.36ms	53.14	   70.52ms    60.07ms	 80.97ms    14.78ms    2
       Cluster	  gc cr multi block grant			  408,568	0.0	  70,901.03 173.54ms	24.59	  175.15ms   156.96ms	193.34ms    25.72ms    2
       Cluster	  gc cr grant busy				  434,780	0.0	  32,080.35  73.79ms	11.13	   74.72ms    64.67ms	 84.77ms    14.21ms    2
       User I/O   db file sequential read			5,008,789	0.0	  17,849.33   3.56ms	 6.19	    3.56ms     3.55ms	  3.57ms    17.44us    2
       User I/O   db file parallel read 			  411,868	0.0	   6,688.19  16.24ms	 2.32	   16.26ms    16.03ms	 16.49ms   322.94us    2
		  DB CPU					      N/A	N/A	   5,417.50		 1.88						       2
       Other	  KJC: Wait for msg sends to complete		   39,995      77.9	   2,084.82  52.13ms	 0.72	   60.20ms    39.61ms	 80.80ms    29.12ms    2
       Cluster	  gc current block lost 			    3,152	0.0	   2,038.79 646.83ms	 0.71	  643.12ms   635.53ms	650.71ms    10.73ms    2
       System I/O db file parallel write			  445,529	0.0	   1,816.05   4.08ms	 0.63	    4.08ms     4.04ms	  4.12ms    54.94us    2
       Cluster	  gc cr multi block mixed			    2,747	0.0	   1,208.55 439.95ms	 0.42	  440.37ms   351.72ms	529.03ms   125.38ms    2

   1   Cluster	  gc current grant busy 			1,226,493	0.0	  73,671.43  60.07ms	52.36
       Cluster	  gc cr multi block grant			  222,450	0.0	  34,916.85 156.96ms	24.82
       Cluster	  gc cr grant busy				  237,640	0.0	  15,368.53  64.67ms	10.92
       User I/O   db file sequential read			2,750,701	0.0	   9,832.98   3.57ms	 6.99
       User I/O   db file parallel read 			  224,166	0.0	   3,593.50  16.03ms	 2.55
		  DB CPU					      N/A	N/A	   2,660.00		 1.89
       Other	  KJC: Wait for msg sends to complete		   27,841      84.4	   1,102.81  39.61ms	 0.78
       System I/O db file parallel write			  231,810	0.0	     936.26   4.04ms	 0.67
       System I/O log file parallel write			   21,771	0.0	     516.58  23.73ms	 0.37
       Cluster	  gc current block lost 			      806	0.0	     512.24 635.53ms	 0.36

   2   Cluster	  gc current grant busy 			  982,297	0.0	  79,536.55  80.97ms	53.89
       Cluster	  gc cr multi block grant			  186,118	0.0	  35,984.18 193.34ms	24.38
       Cluster	  gc cr grant busy				  197,140	0.0	  16,711.82  84.77ms	11.32
       User I/O   db file sequential read			2,258,088	0.0	   8,016.35   3.55ms	 5.43
       User I/O   db file parallel read 			  187,702	0.0	   3,094.69  16.49ms	 2.10
		  DB CPU					      N/A	N/A	   2,757.50		 1.87
       Cluster	  gc current block lost 			    2,346	0.0	   1,526.56 650.71ms	 1.03
       Other	  KJC: Wait for msg sends to complete		   12,154      63.1	     982.01  80.80ms	 0.67
       System I/O db file parallel write			  213,719	0.0	     879.79   4.12ms	 0.60
       Cluster	  gc cr multi block mixed			    1,367	0.0	     723.18 529.03ms	 0.49
			  --------------------------------------------------------------------------------------------------------------------

Top Timed Foreground Events	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Foreground Activity is captured in release 11g and above
-> For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time'	      : Per-instance 'Wait Time Avg' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *   Cluster	  gc current grant busy 			2,208,270	0.0	 153,177.24  69.37ms	53.13	   70.52ms    60.07ms	 80.97ms    14.78ms    2
       Cluster	  gc cr multi block grant			  408,562	0.0	  70,900.90 173.54ms	24.59	  175.16ms   156.96ms	193.35ms    25.73ms    2
       Cluster	  gc cr grant busy				  434,423	0.0	  32,060.35  73.80ms	11.12	   74.75ms    64.66ms	 84.83ms    14.26ms    2
       User I/O   db file sequential read			5,007,098	0.0	  17,846.87   3.56ms	 6.19	    3.56ms     3.55ms	  3.57ms    16.60us    2
       User I/O   db file parallel read 			  411,864	0.0	   6,688.19  16.24ms	 2.32	   16.26ms    16.03ms	 16.49ms   323.18us    2
		  DB CPU					      N/A	N/A	   5,417.50		 1.88						       2
       Other	  KJC: Wait for msg sends to complete		    8,577	0.0	   2,069.70 241.31ms	 0.72	  241.73ms   222.37ms	261.09ms    27.38ms    2
       Cluster	  gc current block lost 			    3,127	0.0	   2,018.87 645.62ms	 0.70	  642.32ms   635.56ms	649.07ms     9.55ms    2
       Cluster	  gc cr multi block mixed			    2,736	0.0	   1,208.40 441.67ms	 0.42	  442.46ms   351.72ms	533.21ms   128.33ms    2
       Cluster	  gc current grant 2-way			   33,453	0.0	     657.35  19.65ms	 0.23	   22.62ms    16.68ms	 28.56ms     8.40ms    2

   1   Cluster	  gc current grant busy 			1,226,319	0.0	  73,664.03  60.07ms	52.36
       Cluster	  gc cr multi block grant			  222,450	0.0	  34,916.85 156.96ms	24.82
       Cluster	  gc cr grant busy				  237,614	0.0	  15,365.19  64.66ms	10.92
       User I/O   db file sequential read			2,750,245	0.0	   9,831.83   3.57ms	 6.99
       User I/O   db file parallel read 			  224,166	0.0	   3,593.50  16.03ms	 2.55
		  DB CPU					      N/A	N/A	   2,660.00		 1.89
       Other	  KJC: Wait for msg sends to complete		    4,195	0.0	   1,095.29 261.09ms	 0.78
       Cluster	  gc current block lost 			      798	0.0	     507.18 635.56ms	 0.36
       Cluster	  gc cr multi block mixed			    1,380	0.0	     485.37 351.72ms	 0.34
       Cluster	  gc current block busy 			   18,051	0.0	     407.97  22.60ms	 0.29

   2   Cluster	  gc current grant busy 			  981,951	0.0	  79,513.21  80.97ms	53.87
       Cluster	  gc cr multi block grant			  186,112	0.0	  35,984.05 193.35ms	24.38
       Cluster	  gc cr grant busy				  196,809	0.0	  16,695.16  84.83ms	11.31
       User I/O   db file sequential read			2,256,853	0.0	   8,015.03   3.55ms	 5.43
       User I/O   db file parallel read 			  187,698	0.0	   3,094.69  16.49ms	 2.10
		  DB CPU					      N/A	N/A	   2,757.50		 1.87
       Cluster	  gc current block lost 			    2,329	0.0	   1,511.69 649.07ms	 1.02
       Other	  KJC: Wait for msg sends to complete		    4,382	0.0	     974.42 222.37ms	 0.66
       Cluster	  gc cr multi block mixed			    1,356	0.0	     723.03 533.21ms	 0.49
       Cluster	  gc current grant 2-way			   25,083	0.0	     418.33  16.68ms	 0.28
			  --------------------------------------------------------------------------------------------------------------------

Top Timed Background Events	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> % of bg time: % of background elapsed time
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time'	      : Per-instance 'Wait Time Avg' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *		  background cpu time				      N/A	N/A	   2,814.51		40.94						       2
       System I/O db file parallel write			  445,522	0.0	   1,816.01   4.08ms	26.41	    4.08ms     4.04ms	  4.12ms    54.90us    2
       System I/O log file parallel write			   42,951	0.0	   1,131.35  26.34ms	16.46	   26.37ms    23.75ms	 28.99ms     3.70ms    2
       Other	  LGWR any worker group 			   17,856	0.0	     315.06  17.64ms	 4.58	   17.41ms    16.23ms	 18.60ms     1.67ms    2
       Other	  LGWR worker group ordering			    8,464	0.0	      74.35   8.78ms	 1.08	    8.74ms     8.55ms	  8.93ms   269.89us    2
       Cluster	  gc cr block 2-way				    2,917	0.0	      45.98  15.76ms	 0.67	   19.68ms    15.01ms	 24.35ms     6.61ms    2
       Other	  LGWR all worker groups			      779	0.0	      35.99  46.21ms	 0.52	   46.21ms    46.16ms	 46.27ms    76.14us    2
       Cluster	  gc current grant busy 			      521	0.0	      30.62  58.78ms	 0.45	   54.60ms    40.92ms	 68.28ms    19.35ms    2
       Other	  DLM cross inst call completion		    4,784	0.0	      26.74   5.59ms	 0.39	    3.17ms   673.60us	  5.66ms     3.52ms    2
       Applicatio enq: TM - contention				      210	0.0	      26.63 126.79ms	 0.39	  126.79ms   125.12ms	128.46ms     2.36ms    2

   1		  background cpu time				      N/A	N/A	   1,337.80		38.20
       System I/O db file parallel write			  231,809	0.0	     936.25   4.04ms	26.73
       System I/O log file parallel write			   21,690	0.0	     515.09  23.75ms	14.71
       Other	  LGWR any worker group 			    7,198	0.0	     116.83  16.23ms	 3.34
       Cluster	  gc cr block 2-way				    2,682	0.0	      40.26  15.01ms	 1.15
       Other	  LGWR worker group ordering			    3,287	0.0	      28.11   8.55ms	 0.80
       Other	  enq: CR - block range reuse ckpt		      318	0.0	      17.67  55.57ms	 0.50
       Other	  LGWR all worker groups			      348	0.0	      16.10  46.27ms	 0.46
       Applicatio enq: TM - contention				      105	0.0	      13.49 128.46ms	 0.39
       Cluster	  gc cr block lost				       16	0.0	      11.58 723.50ms	 0.33

   2		  background cpu time				      N/A	N/A	   1,476.70		43.79
       System I/O db file parallel write			  213,713	0.0	     879.76   4.12ms	26.09
       System I/O log file parallel write			   21,261	0.0	     616.25  28.99ms	18.27
       Other	  LGWR any worker group 			   10,658	0.0	     198.23  18.60ms	 5.88
       Other	  LGWR worker group ordering			    5,177	0.0	      46.24   8.93ms	 1.37
       Other	  DLM cross inst call completion		    4,719	0.0	      26.70   5.66ms	 0.79
       Cluster	  gc current grant busy 			      340	0.0	      23.22  68.28ms	 0.69
       Other	  LGWR all worker groups			      431	0.0	      19.89  46.16ms	 0.59
       Cluster	  gc cr grant busy				      331	0.0	      16.66  50.34ms	 0.49
       User I/O   Disk file Mirror Read 			      903	0.0	      15.21  16.85ms	 0.45
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Events (Global)        DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %DB time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Cluster    gc current grant busy			 2,208,270	 0.0	  153,177.24  69.37ms	 53.13	    70.52ms    60.07ms	  80.97ms    14.78ms
Cluster    gc cr multi block grant			   408,562	 0.0	   70,900.90 173.54ms	 24.59	   175.16ms   156.96ms	 193.35ms    25.73ms
Cluster    gc cr grant busy				   434,423	 0.0	   32,060.35  73.80ms	 11.12	    74.75ms    64.66ms	  84.83ms    14.26ms
User I/O   db file sequential read			 5,007,098	 0.0	   17,846.87   3.56ms	  6.19	     3.56ms	3.55ms	   3.57ms    16.60us
User I/O   db file parallel read			   411,864	 0.0	    6,688.19  16.24ms	  2.32	    16.26ms    16.03ms	  16.49ms   323.18us
Other	   KJC: Wait for msg sends to complete		     8,577	 0.0	    2,069.70 241.31ms	  0.72	   241.73ms   222.37ms	 261.09ms    27.38ms
Cluster    gc current block lost			     3,127	 0.0	    2,018.87 645.62ms	  0.70	   642.32ms   635.56ms	 649.07ms     9.55ms
Cluster    gc cr multi block mixed			     2,736	 0.0	    1,208.40 441.67ms	  0.42	   442.46ms   351.72ms	 533.21ms   128.33ms
Cluster    gc current grant 2-way			    33,453	 0.0	      657.35  19.65ms	  0.23	    22.62ms    16.68ms	  28.56ms     8.40ms
Cluster    gc current block busy			    32,709	 0.0	      624.07  19.08ms	  0.22	    18.67ms    14.74ms	  22.60ms     5.56ms
Cluster    gc cr block lost				       777	 0.0	      509.25 655.40ms	  0.18	   653.20ms   646.69ms	 659.70ms     9.20ms
Cluster    gc current grant congested			     6,634	 0.0	      197.05  29.70ms	  0.07	    29.49ms    28.81ms	  30.17ms      .97ms
Cluster    gc cr grant 2-way				     4,728	 0.0	      131.06  27.72ms	  0.05	    33.35ms    21.18ms	  45.53ms    17.21ms
Cluster    gc current block congested			     5,462	 0.0	      108.16  19.80ms	  0.04	    17.46ms    12.96ms	  21.97ms     6.37ms
Cluster    gc cr block 2-way				     2,607	 0.0	       80.53  30.89ms	  0.03	    29.68ms    25.17ms	  34.19ms     6.38ms
Concurrenc cursor: pin S wait on X			       474	 0.0	       35.94  75.83ms	  0.01	    75.83ms    75.83ms	  75.83ms
Cluster    gc cr grant congested			       921	 0.0	       28.68  31.14ms	  0.01	    30.89ms    29.76ms	  32.03ms     1.60ms
Other	   latch: gc element				    12,288	 0.0	       22.53   1.83ms	  0.01	     1.83ms	1.72ms	   1.93ms   147.19us
Concurrenc buffer busy waits					14	 0.0	       18.85 1346.36m	  0.01	  1316.58ms  1108.16ms	1525.00ms   294.75ms
Cluster    gc current block 2-way			       430	 0.0	       14.36  33.40ms	  0.00	    20.80ms	2.84ms	  38.75ms    25.39ms
Cluster    gc cr block congested			       686	 0.0	       13.90  20.27ms	  0.00	    15.04ms	6.70ms	  23.38ms    11.79ms
Configurat undo segment extension				40     100.0	       13.08 326.90ms	  0.00	   326.90ms   326.90ms	 326.90ms
Other	   latch free					     9,800	 0.0	       10.51   1.07ms	  0.00	     1.07ms	1.05ms	   1.09ms    33.96us
Other	   reliable message					 1	 0.0	       10.41  10.41 s	  0.00	    10.41 s    10.41 s	  10.41 s
Other	   latch: redo allocation			     6,963	 0.0	       10.16   1.46ms	  0.00	     1.44ms	1.27ms	   1.62ms   244.65us
Concurrenc library cache lock				       514	 0.0		7.88  15.33ms	  0.00	     9.54ms	2.15ms	  16.94ms    10.46ms
Commit	   log file sync				       295	 0.0		7.34  24.87ms	  0.00	    24.79ms    23.03ms	  26.55ms     2.49ms
Concurrenc cursor: mutex X				     2,744	 0.0		7.27   2.65ms	  0.00	     2.65ms	2.65ms	   2.65ms
Concurrenc library cache pin				       414	 0.0		7.13  17.23ms	  0.00	    25.04ms    14.34ms	  35.73ms    15.13ms
Other	   IPC send completion sync			       336	 0.0		6.51  19.38ms	  0.00	    11.45ms   873.07us	  22.03ms    14.96ms
Other	   PX Deq: Slave Session Stats			       205	 0.0		4.33  21.11ms	  0.00	    21.42ms   533.22us	  42.31ms    29.54ms
Concurrenc library cache: mutex X			       981	 0.0		2.41   2.46ms	  0.00	     2.84ms	2.45ms	   3.24ms   558.94us
Cluster    gc cr block busy					28	 0.0		1.73  61.81ms	  0.00	    61.81ms    61.81ms	  61.81ms
Concurrenc cursor: mutex S				       859	 0.0		1.17   1.36ms	  0.00	     1.36ms	1.36ms	   1.36ms
Other	   latch: object queue header operation 	       807	 0.0		1.15   1.43ms	  0.00	     1.41ms	1.26ms	   1.56ms   212.82us
Other	   enq: TO - contention 				13	 0.0		1.04  80.13ms	  0.00	   129.23ms	1.58ms	 256.88ms   180.52ms
Other	   latch: cache buffers lru chain		     2,180	 0.0		0.66 304.75us	  0.00	   305.62us   246.09us	 365.16us    84.19us
Other	   kksfbc child completion				13	92.3		0.60  45.97ms	  0.00	    45.97ms    45.97ms	  45.97ms
Other	   latch: gcs resource hash			       663	 0.0		0.53 799.64us	  0.00	   787.34us   704.99us	 869.69us   116.46us
Other	   enq: WF - contention 				14	 0.0		0.52  36.99ms	  0.00	    28.94ms   733.20us	  57.14ms    39.88ms
Cluster    gc buffer busy release				 7	 0.0		0.38  54.26ms	  0.00	    37.99ms    33.50us	  75.96ms    53.68ms
Configurat enq: HW - contention 				 7	 0.0		0.36  51.78ms	  0.00	   102.04ms    31.68ms	 172.41ms    99.51ms
Concurrenc latch: cache buffers chains			       137	 0.0		0.27   1.97ms	  0.00	     1.93ms	1.69ms	   2.17ms   336.71us
Cluster    gc current multi block request			14	 0.0		0.24  17.08ms	  0.00	    17.08ms    17.08ms	  17.08ms
Other	   PGA memory operation 			     2,180	 0.0		0.23 106.30us	  0.00	   105.75us   100.97us	 110.52us     6.76us
Concurrenc row cache lock					26	96.2		0.21   8.15ms	  0.00	     4.88ms	1.02ms	   8.74ms     5.46ms
Other	   DLM cross inst call completion			55	 0.0		0.19   3.39ms	  0.00	     2.32ms   946.83us	   3.69ms     1.94ms
Other	   enq: PS - contention 			       105	 0.0		0.18   1.75ms	  0.00	     1.40ms   928.36us	   1.88ms   671.80us
Other	   lock deadlock retry				     3,120	99.8		0.17  55.19us	  0.00	    51.70us    44.61us	  58.78us    10.01us
Concurrenc latch: shared pool					56	 0.0		0.12   2.10ms	  0.00	     3.81ms   614.28us	   7.01ms     4.53ms
Other	   latch: ges resource hash list		       191	 0.0		0.10 502.99us	  0.00	   502.63us   432.59us	 572.67us    99.05us
Other	   PX Deq: reap credit				     2,680     100.0		0.09  34.53us	  0.00	    32.00us    27.93us	  36.07us     5.76us
Cluster    gc buffer busy acquire				 1	 0.0		0.08  79.41ms	  0.00	    79.41ms    79.41ms	  79.41ms
Concurrenc row cache mutex					 7	 0.0		0.05   7.05ms	  0.00	     7.05ms	7.05ms	   7.05ms
Other	   latch: undo global data				26	 0.0		0.03   1.31ms	  0.00	     1.15ms   615.56us	   1.68ms   750.64us
System I/O control file sequential read 		       151	 0.0		0.03 225.31us	  0.00	   218.12us   195.00us	 241.23us    32.69us
Concurrenc cursor: pin S					17	 0.0		0.03   1.58ms	  0.00	     1.58ms	1.58ms	   1.58ms
User I/O   direct path write					 7	 0.0		0.03   3.77ms	  0.00	     3.77ms	3.77ms	   3.77ms
User I/O   Disk file Mirror Read				38	 0.0		0.02 601.21us	  0.00	   749.89us   279.08us	   1.22ms   665.82us
Other	   latch: call allocation				23	 0.0		0.02	.98ms	  0.00	   816.58us    49.22us	   1.58ms     1.09ms
Foreground Wait Events (Global)        DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %DB time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Configurat latch: redo copy					 3	 0.0		0.02   7.03ms	  0.00	     7.03ms	7.03ms	   7.03ms
Other	   wait list latch free 				15	 0.0		0.02   1.39ms	  0.00	     1.29ms	1.13ms	   1.45ms   226.27us
Other	   enq: FB - contention 				14	 0.0		0.02   1.34ms	  0.00	     1.34ms	1.34ms	   1.34ms
Other	   latch: enqueue hash chains				15	 0.0		0.02   1.12ms	  0.00	     1.15ms   666.25us	   1.63ms   680.16us
Other	   latch: messages					11	 0.0		0.01   1.32ms	  0.00	     1.42ms   328.17us	   2.51ms     1.54ms
Network    SQL*Net message to client			     1,165	 0.0		0.01  11.28us	  0.00	    11.43us	9.69us	  13.17us     2.46us
Applicatio SQL*Net break/reset to client		       132	 0.0		0.01  99.50us	  0.00	    99.50us    99.50us	  99.50us
Other	   enq: WT - contention 				12	 0.0		0.01   1.09ms	  0.00	      .98ms   646.00us	   1.32ms   473.67us
Other	   CSS initialization					 2	 0.0		0.01   4.75ms	  0.00	     4.75ms	4.75ms	   4.75ms
Other	   enq: TT - contention 				 4	 0.0		0.01   1.62ms	  0.00	     1.62ms	1.62ms	   1.62ms
Other	   enq: AF - task serialization 			 1	 0.0		0.00   3.08ms	  0.00	     3.08ms	3.08ms	   3.08ms
Other	   CSS operation: action				 2	 0.0		0.00   1.30ms	  0.00	     1.30ms	1.30ms	   1.30ms
Other	   name-service call wait				 4	 0.0		0.00 630.25us	  0.00	   630.25us   596.50us	 664.00us    47.73us
User I/O   Disk file operations I/O				51	 0.0		0.00  36.06us	  0.00	    30.80us    20.08us	  41.53us    15.17us
User I/O   ASM IO for non-blocking poll 			45	 0.0		0.00  33.07us	  0.00	    27.69us	9.06us	  46.31us    26.34us
User I/O   direct path read					 8	 0.0		0.00 185.00us	  0.00	   185.00us   185.00us	 185.00us
Other	   CSS operation: query 				 6	 0.0		0.00 229.67us	  0.00	   229.67us   229.67us	 229.67us
Network    IPC group service call				49	 0.0		0.00  15.47us	  0.00	    15.14us    14.75us	  15.53us   553.90ns
Other	   buffer deadlock					 5     100.0		0.00  34.00us	  0.00	    34.00us    34.00us	  34.00us
Other	   PX qref latch					 3     100.0		0.00  21.33us	  0.00	    21.33us    21.33us	  21.33us
Other	   AWR Flush						 6	 0.0		0.00   5.00us	  0.00	     5.00us	5.00us	   5.00us      .00ns
Other	   ges resource directory to be unfrozen		 3	 0.0		0.00   4.67us	  0.00	     5.00us	4.00us	   6.00us     1.41us
Other	   asynch descriptor resize				 1     100.0		0.00  11.00us	  0.00	    11.00us    11.00us	  11.00us
Idle	   watchdog main loop				     2,195	 0.0	    6,585.16 3000.07m	  2.28	  3000.07ms  3000.05ms	3000.09ms    33.53us
Idle	   SQL*Net message from client			     1,166	 0.0	      661.51 567.34ms	  0.23	   523.52ms	2.15ms	1044.88ms   737.32ms
Idle	   PX Deq: Execution Msg			       622	 0.0	       19.11  30.73ms	  0.01	    31.05ms    10.78ms	  51.33ms    28.67ms
Idle	   PX Deq: Msg Fragment 			       789	 0.0		4.83   6.12ms	  0.00	     6.12ms	5.01ms	   7.22ms     1.56ms
Idle	   PX Deq Credit: send blkd			       357	 0.0		3.86  10.81ms	  0.00	    10.51ms	9.65ms	  11.36ms     1.21ms
Idle	   PX Deq Credit: need buffer				33	 0.0		0.08   2.41ms	  0.00	     2.41ms	2.41ms	   2.41ms
			  --------------------------------------------------------------------------------------------------------------------

Background Wait Events (Global)        DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
System I/O db file parallel write			   445,522	 0.0	    1,816.01   4.08ms	  0.26	     4.08ms	4.04ms	   4.12ms    54.90us
System I/O log file parallel write			    42,951	 0.0	    1,131.35  26.34ms	  0.16	    26.37ms    23.75ms	  28.99ms     3.70ms
Other	   LGWR any worker group			    17,856	 0.0	      315.06  17.64ms	  0.05	    17.41ms    16.23ms	  18.60ms     1.67ms
Other	   LGWR worker group ordering			     8,464	 0.0	       74.35   8.78ms	  0.01	     8.74ms	8.55ms	   8.93ms   269.89us
Cluster    gc cr block 2-way				     2,917	 0.0	       45.98  15.76ms	  0.01	    19.68ms    15.01ms	  24.35ms     6.61ms
Other	   LGWR all worker groups			       779	 0.0	       35.99  46.21ms	  0.01	    46.21ms    46.16ms	  46.27ms    76.14us
Cluster    gc current grant busy			       521	 0.0	       30.62  58.78ms	  0.00	    54.60ms    40.92ms	  68.28ms    19.35ms
Other	   DLM cross inst call completion		     4,784	 0.0	       26.74   5.59ms	  0.00	     3.17ms   673.60us	   5.66ms     3.52ms
Applicatio enq: TM - contention 			       210	 0.0	       26.63 126.79ms	  0.00	   126.79ms   125.12ms	 128.46ms     2.36ms
Cluster    gc current block busy			       892	 0.0	       22.12  24.80ms	  0.00	    26.80ms    19.73ms	  33.87ms    10.00ms
Other	   enq: CR - block range reuse ckpt		       515	 0.0	       20.80  40.39ms	  0.00	    35.72ms    15.88ms	  55.57ms    28.06ms
Cluster    gc cr grant busy				       357	 0.0	       20.00  56.02ms	  0.00	    89.38ms    50.34ms	 128.43ms    55.22ms
Cluster    gc current block lost				25	 0.0	       19.93 797.08ms	  0.00	   753.49ms   632.42ms	 874.57ms   171.23ms
System I/O control file parallel write			       643	 0.0	       19.71  30.65ms	  0.00	    30.45ms    27.58ms	  33.33ms     4.07ms
Cluster    gc cr block lost					23	 0.0	       16.36 711.48ms	  0.00	   703.76ms   684.02ms	 723.50ms    27.92ms
Other	   reliable message				       356	 0.0	       16.31  45.82ms	  0.00	    45.62ms    40.58ms	  50.66ms     7.13ms
User I/O   Disk file Mirror Read			     1,788	 0.0	       15.94   8.92ms	  0.00	     8.84ms   827.49us	  16.85ms    11.33ms
Other	   KJC: Wait for msg sends to complete		    31,418	99.1	       15.12 481.25us	  0.00	   647.65us   318.31us	    .98ms   465.75us
Applicatio enq: RO - fast object reuse			       395	 0.0	       13.39  33.90ms	  0.00	    33.85ms    33.27ms	  34.43ms   818.11us
Cluster    gc current grant 2-way			       217	 0.0	       12.81  59.04ms	  0.00	    59.21ms    55.95ms	  62.46ms     4.60ms
Other	   IMR slave acknowledgement msg		     3,948	 0.0	       11.38   2.88ms	  0.00	     2.89ms   457.22us	   5.32ms     3.44ms
User I/O   ASM IO for non-blocking poll 		   454,794	 0.0	       11.09  24.38us	  0.00	    24.44us    23.30us	  25.57us     1.60us
Cluster    gc current grant congested				86	 0.0	       10.16 118.15ms	  0.00	   118.31ms   117.85ms	 118.76ms   642.10us
Cluster    gc current multi block request			40	 0.0		9.75 243.65ms	  0.00	   302.25ms   185.05ms	 419.46ms   165.75ms
Cluster    gc cr block busy				       102	 0.0		8.80  86.23ms	  0.00	    75.86ms    56.28ms	  95.44ms    27.69ms
Other	   DFS lock handle				     1,365     100.0		8.71   6.38ms	  0.00	     6.31ms	5.97ms	   6.64ms   477.00us
Other	   gcs log flush sync				    14,583	 0.0		7.87 539.99us	  0.00	   593.41us   516.15us	 670.68us   109.27us
Other	   PX Deq: Join ACK				       200	 0.0		7.01  35.03ms	  0.00	    21.19ms	2.23ms	  40.15ms    26.81ms
Cluster    gc cr block congested			       285	 0.0		6.74  23.64ms	  0.00	    17.91ms    10.45ms	  25.36ms    10.54ms
User I/O   direct path write				       139	 0.0		5.46  39.28ms	  0.00	    40.60ms    23.99ms	  57.20ms    23.48ms
Other	   KSV master wait				     2,571	47.7		5.37   2.09ms	  0.00	     2.09ms	1.78ms	   2.40ms   439.56us
Other	   ASM file metadata operation			     5,874	 0.0		4.78 814.21us	  0.00	   814.33us   724.91us	 903.76us   126.46us
Cluster    gc current block congested			       124	 0.0		4.69  37.79ms	  0.00	    34.61ms    12.73ms	  56.49ms    30.94ms
Other	   IPC send completion sync			     1,434	91.6		4.27   2.98ms	  0.00	     2.90ms	1.52ms	   4.28ms     1.95ms
Configurat undo segment extension				11     100.0		4.27 388.19ms	  0.00	   388.19ms   388.19ms	 388.19ms
Concurrenc library cache lock				       884	 3.1		3.48   3.94ms	  0.00	     2.96ms	1.94ms	   3.98ms     1.45ms
Other	   PX Deq: Signal ACK EXT			       202	 0.0		3.37  16.66ms	  0.00	     9.67ms   120.26us	  19.21ms    13.50ms
Other	   enq: CF - contention 			       100	49.0		3.19  31.88ms	  0.00	    31.73ms    31.16ms	  32.30ms   806.89us
System I/O control file sequential read 		     7,686	 0.0		2.88 374.92us	  0.00	   374.96us   362.45us	 387.46us    17.68us
Other	   PX Deq: reap credit				    93,054     100.0		2.73  29.34us	  0.00	    29.27us    27.12us	  31.42us     3.04us
Other	   Sync ASM rebalance				       108	 0.0		2.46  22.76ms	  0.00	    22.76ms    21.67ms	  23.85ms     1.54ms
System I/O db file async I/O submit			   333,793	 0.0		2.41   7.22us	  0.00	     7.27us	6.56us	   7.97us     1.00us
User I/O   db file sequential read			     1,650	 0.0		2.34   1.42ms	  0.00	     1.74ms	1.00ms	   2.49ms     1.05ms
Other	   latch free					     4,692	 0.0		2.24 478.28us	  0.00	   476.36us   460.34us	 492.38us    22.66us
Concurrenc library cache pin				       898	 0.0		1.84   2.05ms	  0.00	     1.70ms	1.32ms	   2.07ms   525.21us
Cluster    gc current block 2-way			       207	 0.0		1.53   7.41ms	  0.00	     6.14ms	3.18ms	   9.10ms     4.18ms
User I/O   direct path write temp			       153	 0.0		1.50   9.83ms	  0.00	    10.22ms	7.12ms	  13.32ms     4.38ms
Other	   latch: cache buffers lru chain		     1,737	 0.0		1.31 756.58us	  0.00	   751.57us   667.13us	 836.00us   119.41us
Concurrenc row cache lock				       107	99.1		1.30  12.16ms	  0.00	    11.02ms	6.13ms	  15.90ms     6.91ms
System I/O log file sequential read			       935	 0.0		1.27   1.36ms	  0.00	     1.35ms	1.27ms	   1.43ms   113.72us
Other	   latch: gc element				       803	 0.0		1.16   1.45ms	  0.00	     1.43ms	1.28ms	   1.58ms   211.82us
Other	   latch: redo allocation			     1,364	 0.0		1.13 831.57us	  0.00	   827.14us   791.66us	 862.63us    50.19us
Other	   PX Deq: Slave Session Stats			       202	 0.0		1.06   5.26ms	  0.00	     3.17ms   322.81us	   6.03ms     4.03ms
Other	   ges inquiry response 			       238	 0.0		0.67   2.80ms	  0.00	     2.92ms	2.50ms	   3.33ms   589.95us
Other	   latch: gcs resource hash			       960	 0.0		0.66 686.84us	  0.00	   677.90us   625.60us	 730.21us    73.97us
Other	   LGWR wait for redo copy			       660	 0.0		0.55 828.32us	  0.00	   859.29us   670.02us	   1.05ms   267.67us
Other	   enq: WF - contention 				20	 0.0		0.53  26.57ms	  0.00	    24.24ms   894.11us	  47.58ms    33.01ms
Other	   enq: TO - contention 				20	 0.0		0.53  26.27ms	  0.00	    43.02ms	1.14ms	  84.91ms    59.23ms
Other	   enq: TA - contention 				 3	 0.0		0.51 168.66ms	  0.00	   126.68ms   743.00us	 252.61ms   178.10ms
Other	   AQ: RAC AQ Network				    13,107     100.0		0.41  31.00us	  0.00	    31.01us    28.48us	  33.54us     3.58us
Background Wait Events (Global)        DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Other	   CGS wait for IPC msg 			    13,638     100.0		0.39  28.92us	  0.00	    28.94us    26.65us	  31.23us     3.23us
Other	   enq: PS - contention 			       138	11.6		0.38   2.77ms	  0.00	     2.12ms	1.15ms	   3.09ms     1.37ms
Other	   enq: DW - contention 				 3     100.0		0.34 113.62ms	  0.00	    86.67ms	5.83ms	 167.51ms   114.33ms
Other	   ges message buffer allocation			17	 0.0		0.31  18.01ms	  0.00	    12.32ms	1.56ms	  23.07ms    15.21ms
Concurrenc latch: MGA shared context root latch 	       143	 0.0		0.30   2.10ms	  0.00	     2.01ms   619.00us	   3.41ms     1.97ms
User I/O   Disk file operations I/O			       915	 0.0		0.28 306.38us	  0.00	   305.71us   282.86us	 328.55us    32.31us
Other	   PGA memory operation 			     1,111	 0.0		0.22 200.67us	  0.00	   201.94us   196.81us	 207.07us     7.26us
Other	   oracle thread bootstrap				 8	 0.0		0.22  27.49ms	  0.00	    27.26ms    26.36ms	  28.16ms     1.27ms
Cluster    gc buffer busy acquire				 3	 0.0		0.20  66.65ms	  0.00	    98.01ms	3.93ms	 192.10ms   133.05ms
Cluster    gc cr disk read					 4	 0.0		0.16  39.56ms	  0.00	    39.56ms    39.56ms	  39.56ms
Configurat latch: redo writing				       167	 0.0		0.15 899.81us	  0.00	   915.69us   856.75us	    .97ms    83.36us
Cluster    gc cr multi block mixed				11	 0.0		0.15  13.54ms	  0.00	    13.54ms    13.54ms	  13.54ms
Cluster    gc cr multi block grant				 6	 0.0		0.13  21.43ms	  0.00	    21.43ms    21.43ms	  21.43ms
Concurrenc latch: MGA shared context latch			84	 0.0		0.12   1.42ms	  0.00	     1.20ms   316.28us	   2.09ms     1.26ms
Other	   ksxr poll remote instances			     3,059     100.0		0.11  36.00us	  0.00	    36.22us    30.42us	  42.02us     8.21us
Concurrenc row cache mutex					69	 0.0		0.09   1.37ms	  0.00	     1.51ms	1.29ms	   1.73ms   310.42us
Cluster    gc current retry					 2	 0.0		0.09  46.02ms	  0.00	    46.02ms    35.05ms	  56.98ms    15.51ms
Concurrenc libcache interrupt action by LCK		    15,467	 0.0		0.09   5.68us	  0.00	     5.70us	5.64us	   5.76us    85.14ns
Network    IPC group service call			     1,008	 0.0		0.08  81.46us	  0.00	    81.46us    74.02us	  88.89us    10.51us
Other	   latch: checkpoint queue latch		       112	 0.0		0.07 640.56us	  0.00	   632.32us   478.55us	 786.10us   217.47us
Other	   latch: object queue header operation 		59	 0.0		0.07   1.21ms	  0.00	     1.23ms	1.15ms	   1.31ms   116.86us
Other	   CSS operation: data query				40	 0.0		0.06   1.48ms	  0.00	     1.48ms	1.26ms	   1.70ms   314.73us
Other	   latch: messages					88	 0.0		0.06 633.80us	  0.00	   587.39us   179.05us	   1.00ms   577.48us
Other	   CSS operation: data update				44	 0.0		0.05   1.23ms	  0.00	     1.23ms   899.23us	   1.55ms   461.16us
Concurrenc latch: cache buffers chains			       222	 0.0		0.05 231.64us	  0.00	   268.62us    97.58us	 439.66us   241.89us
Cluster    gc cr grant 2-way					60	 0.0		0.05 759.05us	  0.00	     3.33ms   575.14us	   6.09ms     3.90ms
Other	   ges DFS hang analysis phase 2 acks			 1	 0.0		0.04  36.80ms	  0.00	    36.80ms    36.80ms	  36.80ms
User I/O   db file scattered read				82	 0.0		0.04 438.10us	  0.00	   407.57us   251.12us	 564.02us   221.25us
Other	   enq: US - contention 				21	 0.0		0.03   1.62ms	  0.00	     1.63ms	1.36ms	   1.89ms   375.09us
Other	   os thread creation					 8	 0.0		0.03   3.35ms	  0.00	     3.41ms	3.16ms	   3.66ms   357.14us
Configurat enq: HW - contention 				22	 0.0		0.03   1.21ms	  0.00	     1.13ms	 .96ms	   1.30ms   243.35us
Concurrenc library cache: bucket mutex X			10	 0.0		0.03   2.57ms	  0.00	     2.57ms	2.57ms	   2.57ms
Other	   enq: TT - contention 				14	28.6		0.02   1.67ms	  0.00	     1.69ms	1.66ms	   1.71ms    31.35us
Other	   enq: CO - master slave det				11     100.0		0.02   1.96ms	  0.00	     1.96ms	1.96ms	   1.96ms
Other	   enq: FB - contention 				12	 0.0		0.02   1.40ms	  0.00	     1.35ms	1.04ms	   1.65ms   434.63us
Other	   enq: SM -  contention				 3	 0.0		0.02   5.18ms	  0.00	     6.05ms	3.44ms	   8.65ms     3.68ms
Commit	   log file sync					 1	 0.0		0.01  14.72ms	  0.00	    14.72ms    14.72ms	  14.72ms
Cluster    gc buffer busy release				 1	 0.0		0.01  11.33ms	  0.00	    11.33ms    11.33ms	  11.33ms
Other	   latch: ges resource hash list			35	 0.0		0.01 315.09us	  0.00	   352.58us   206.77us	 498.38us   206.20us
Applicatio enq: PW - flush prewarm buffers			 9     100.0		0.01   1.21ms	  0.00	     1.21ms	1.21ms	   1.21ms
Concurrenc cursor: pin S wait on X				 2	 0.0		0.01   5.24ms	  0.00	     5.24ms	5.24ms	   5.24ms
Other	   enq: WT - contention 				 7	 0.0		0.01   1.33ms	  0.00	     1.15ms   719.50us	   1.58ms   605.78us
Other	   asynch descriptor resize			       520     100.0		0.01  15.03us	  0.00	    14.93us    10.98us	  18.87us     5.58us
Concurrenc latch: MGA heap latch				46	 0.0		0.01 134.57us	  0.00	   132.42us   120.05us	 144.78us    17.48us
Network    SQL*Net message to client			       515	 0.0		0.00   8.71us	  0.00	     8.74us	7.52us	   9.97us     1.74us
Other	   latch: call allocation				 9	 0.0		0.00 493.78us	  0.00	   666.83us   147.67us	   1.19ms   734.21us
System I/O kfk: async disk IO					11	 0.0		0.00 221.09us	  0.00	   221.09us   221.09us	 221.09us
User I/O   db file parallel read				 4	 0.0		0.00 552.00us	  0.00	   552.00us   552.00us	 552.00us
Other	   enq: TD - KTF dump entries				 2	 0.0		0.00 902.50us	  0.00	   902.50us   902.50us	 902.50us
Other	   name-service call wait				 2	 0.0		0.00 837.00us	  0.00	   837.00us   835.00us	 839.00us     2.83us
Other	   latch: kjci process context latch			13	 0.0		0.00 122.00us	  0.00	   122.00us   122.00us	 122.00us
Concurrenc buffer busy waits					 4	 0.0		0.00 378.25us	  0.00	   403.17us   353.33us	 453.00us    70.47us
Other	   wait list latch free 				 1	 0.0		0.00   1.13ms	  0.00	     1.13ms	1.13ms	   1.13ms
Concurrenc library cache: mutex X				 1	 0.0		0.00   1.09ms	  0.00	     1.09ms	1.09ms	   1.09ms
Other	   lock deadlock retry					21     100.0		0.00  45.19us	  0.00	    51.48us    25.08us	  77.88us    37.33us
Other	   GCR CSS group query					40	 0.0		0.00  23.63us	  0.00	    23.63us    16.60us	  30.65us     9.93us
Other	   enq: RA - RT ADDM flood control			 1     100.0		0.00 746.00us	  0.00	   746.00us   746.00us	 746.00us
Other	   GCR CSS group update 				40	 0.0		0.00  17.70us	  0.00	    17.70us    14.10us	  21.30us     5.09us
Other	   CSS operation: action				 2	 0.0		0.00 299.50us	  0.00	   299.50us   299.50us	 299.50us
Concurrenc latch: shared pool					 2	 0.0		0.00 255.00us	  0.00	   255.00us   255.00us	 255.00us
Background Wait Events (Global)        DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Other	   latch: enqueue hash chains				 1	 0.0		0.00 102.00us	  0.00	   102.00us   102.00us	 102.00us
Other	   ges resource directory to be unfrozen		15	 0.0		0.00   5.60us	  0.00	     5.64us	5.44us	   5.83us   274.99ns
Other	   buffer deadlock					 4     100.0		0.00  17.50us	  0.00	    17.50us    17.50us	  17.50us
Other	   AWR Flush						 4	 0.0		0.00   7.00us	  0.00	     6.33us	5.00us	   7.67us     1.89us
Other	   undo_retention publish retry 			 4	 0.0		0.00   6.25us	  0.00	     6.25us	6.00us	   6.50us   353.55ns
Idle	   PX Idle Wait 				       207	 0.0	   86,023.29 415.57 s	 12.51	   415.65 s   410.33 s	 420.97 s  7526.30ms
Idle	   Space Manager: slave idle wait		    12,994	 0.0	   56,291.63 4332.12m	  8.19	  4332.08ms  4330.34ms	4333.83ms     2.47ms
Idle	   rdbms ipc message				   131,866	18.6	   30,184.29 228.90ms	  4.39	   228.91ms   224.00ms	 233.83ms     6.95ms
Idle	   class slave wait				    16,948	76.3	    9,873.32 582.57ms	  1.44	   582.62ms   510.66ms	 654.57ms   101.76ms
Idle	   wait for unread message on broadcast cha	     2,016     100.0	    3,945.31 1957.00m	  0.57	  1957.00ms  1956.08ms	1957.93ms     1.31ms
Idle	   LMS CR slave timer				   391,738	 0.0	    3,937.37  10.05ms	  0.57	    10.05ms    10.03ms	  10.07ms    27.35us
Idle	   gcs yield cpu				   139,466	99.8	    3,871.10  27.76ms	  0.56	    27.76ms    27.56ms	  27.96ms   281.76us
Idle	   pmon timer					       877     100.0	    2,630.92 2999.91m	  0.38	  2999.91ms  2999.89ms	2999.93ms    25.77us
Idle	   ges remote message				    61,360	 0.0	    2,625.17  42.78ms	  0.38	    42.85ms    41.22ms	  44.48ms     2.31ms
Idle	   GCR sleep					     8,735	 0.0	    2,624.55 300.46ms	  0.38	   300.46ms   300.40ms	 300.53ms    96.74us
Idle	   DIAG idle wait				    20,693	71.1	    2,619.15 126.57ms	  0.38	   126.57ms   126.47ms	 126.67ms   143.48us
Idle	   gcs remote message				 3,381,974	 0.0	    2,548.39 753.52us	  0.37	   754.38us   741.40us	 767.35us    18.35us
Idle	   shared server idle wait				 0	 N/A	    1,320.23		  0.19
Idle	   dispatcher timer					22     100.0	    1,320.12  60.01 s	  0.19	    60.01 s    60.01 s	  60.01 s   396.04us
Idle	   VKRM Idle						 0	 N/A	    1,320.10		  0.19
Idle	   AQPC idle						44     100.0	    1,320.02  30.00 s	  0.19	    30.00 s    30.00 s	  30.00 s   166.33us
Idle	   Data Guard: Gap Manager				22	 0.0	    1,320.01  60.00 s	  0.19	    60.00 s    60.00 s	  60.00 s   369.62us
Idle	   pman timer					       439     100.0	    1,316.88 2999.72m	  0.19	  2999.72ms  2999.70ms	2999.74ms    29.38us
Idle	   Streams AQ: qmn coordinator idle wait		97	 0.0	    1,316.04  13.57 s	  0.19	    13.57 s    13.42 s	  13.71 s   210.46ms
Idle	   Streams AQ: qmn slave idle wait			49	 0.0	    1,316.04  26.86 s	  0.19	    26.86 s    26.83 s	  26.88 s    32.98ms
Idle	   heartbeat redo informer			     1,315	 0.0	    1,315.25 1000.19m	  0.19	  1000.19ms  1000.18ms	1000.20ms    14.70us
Idle	   Streams AQ: waiting for time management		 0	 N/A	    1,315.02		  0.19
Idle	   ASM background timer 			     4,487	 0.0	    1,314.43 292.94ms	  0.19	   292.95ms   290.89ms	 295.02ms     2.91ms
Idle	   REPL Capture/Apply: RAC AQ qmn coordinat		22     100.0	    1,314.40  59.75 s	  0.19	    59.75 s    59.66 s	  59.83 s   115.84ms
Idle	   OFS idle					       438     100.0	    1,314.04 3000.08m	  0.19	  3000.08ms  3000.03ms	3000.14ms    71.49us
Idle	   ASM cluster membership changes		       751	85.1	    1,313.35 1748.80m	  0.19	  1748.79ms  1747.20ms	1750.39ms     2.26ms
Idle	   lreg timer					       437     100.0	    1,312.18 3002.71m	  0.19	  3002.71ms  3002.63ms	3002.79ms   111.42us
Idle	   SCM slave idle				    13,242	 0.0	    1,307.06  98.71ms	  0.19	    98.71ms    98.44ms	  98.98ms   383.50us
Idle	   PING 					     1,232	18.0	    1,300.58 1055.67m	  0.19	  1055.95ms  1038.83ms	1073.07ms    24.21ms
Idle	   Data Guard: Timer					 2	 0.0	    1,200.00 600.00 s	  0.17	   600.00 s   600.00 s	 600.00 s   625.79us
Idle	   smon timer						40	 5.0	    1,030.25  25.76 s	  0.15	    26.56 s    21.18 s	  31.95 s  7619.26ms
Idle	   LGWR worker group idle			    27,353	 0.0	      952.55  34.82ms	  0.14	    34.27ms    26.63ms	  41.91ms    10.80ms
Idle	   PX Deq: Parse Reply				       202	 0.0		7.47  36.96ms	  0.00	    38.11ms    36.55ms	  39.66ms     2.20ms
Idle	   PX Deq: Execute Reply			       678	 0.0		5.01   7.39ms	  0.00	    29.25ms	5.50ms	  53.01ms    33.59ms
Idle	   PX Deq Credit: send blkd			       404	 0.0		1.99   4.94ms	  0.00	     4.57ms	3.37ms	   5.77ms     1.70ms
Idle	   SQL*Net message from client			       516	 0.0		0.56   1.09ms	  0.00	     1.07ms   335.46us	   1.80ms     1.03ms
Idle	   RMA: IPC0 completion sync			     1,422	 0.0		0.03  24.53us	  0.00	    24.54us    22.93us	  26.16us     2.29us
Idle	   heartbeat monitor sleep			       102	 0.0		0.03 304.59us	  0.00	   329.90us	7.20us	 652.60us   456.36us
			  --------------------------------------------------------------------------------------------------------------------

Wait Event Histogram (Global)	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
AQ: RAC AQ Network	     13K					 0.0(5)     88.5      6.3      3.4	1.2	 0.3	  0.1	   0.1	 0.0(5)
ASM IO for non-blocking p 454.9K			      0.0(143)	   79.9     10.8      3.8      2.3	2.0	 0.8	  0.2	   0.1 0.0(108)  0.0(31)   0.0(2)
ASM file metadata operati   5813			  0.1	  27.0	    1.5     23.2     21.2      4.8	5.8	 4.6	  0.9	   0.9	    3.0      4.9      1.7      0.2	0.3	       0.0(1)
AWR Flush		      10				  90.0	   10.0
CGS wait for IPC msg	   13.5K					    6.3     83.3      5.4      3.2	1.0	 0.4	  0.1	   0.1	 0.0(6)
CSS initialization	       2						    50.0									     50.0
CSS operation: action	       4					   25.0 						 50.0	  25.0
CSS operation: data query     40											17.5	 22.5	  40.0	   20.0
CSS operation: data updat     44												 56.8	  36.4	    4.5 	      2.3
CSS operation: query	       6				  66.7	   16.7 							  16.7
DFS lock handle 	    1365							      0.1      0.3	0.1	16.8	 31.5	  29.1	   17.1      3.2      0.3			 0.1	  0.7	   0.4	    0.2
DLM cross inst call compl   5123						     1.2      0.2      0.2	0.3	12.8	 71.8	   8.5	    3.8      0.8      0.1			 0.1			    0.1      0.2
Disk file Mirror Read	    1807								       0.3     29.4	13.2	  5.6	  14.1	    9.1      9.5      9.0      5.2	2.4	 0.7	  1.3	   0.2	    0.1
Disk file operations I/O     961				   0.3	    4.1     13.7     15.0      2.9     36.2	16.6	  6.8	   2.6	    1.7 	      0.1
GCR CSS group query	      40					   67.5     25.0      2.5      2.5		 2.5
GCR CSS group update	      40					   90.0 	      7.5		2.5
IMR slave acknowledgement   3909					   11.1     11.4      4.2     17.6     16.4	17.5	  5.0	   4.8	    2.9      3.1      2.8      1.6	0.8	 0.2	  0.5	0.0(1)	 0.0(1)
IPC group service call	    1051				   1.5	    4.5     17.8     31.2     35.7	6.3	 1.9	  0.9	   0.3
IPC send completion sync    1735						    69.0      4.9      2.0	2.7	 5.0	  6.0	   5.8	    2.4      1.3      0.3			 0.1			    0.6
KJC: Wait for msg sends t  39.9K					   16.5     22.2     11.5     15.7	7.4	 4.6	  3.0	   2.2	    2.0      1.3      0.3      0.1				  11.3	    1.8      0.1
KSV master wait 	    2548					   10.6     21.1      5.5     10.1     17.4	 4.9	  1.3	   1.5	    7.3     14.4      4.6      0.6	0.6	       0.0(1)
LGWR all worker groups	     771													   0.1	    1.4      4.2     24.5     30.1     25.7	 7.7	  3.0	   3.2	    0.1
LGWR any worker group	   17.6K					    0.1   0.0(2)      0.1      0.6	1.1	 2.1	  3.6	   7.5	   19.7     20.6     21.2     14.3	5.0	 1.0	  2.6	   0.3	    0.1
LGWR wait for redo copy      652				  16.0	    4.8      1.1      4.1     10.0     13.8	16.3	 13.3	  10.3	    6.4      2.6      1.2      0.2
LGWR worker group orderin   8347				   0.9	    0.9      0.8      2.5      5.1	3.6	 2.9	  3.8	   7.8	   34.4     19.7      7.9      6.2	2.0	 0.4	  0.9	   0.2	 0.0(4)
PGA memory operation	    3229				  17.4	   28.2     18.3      3.9      4.8     12.6	10.1	  3.1	   0.9	    0.5      0.1
PX Deq: Join ACK	     184								       0.5			 25.5	  22.8	   22.8     16.3      8.7      1.1	0.5		  1.6
PX Deq: Signal ACK EXT	     186					    1.1     60.8      9.7      4.3	8.1	 7.0	  4.3	   1.6	    0.5 	      0.5					   0.5	    1.6
PX Deq: Slave Session Sta    378					    7.1     10.3      2.9     11.6     15.9	15.9	 13.5	   9.3	    8.7      2.4      1.1						    1.3
PX Deq: reap credit	   94.4K					    3.0     87.0      5.5      2.9	1.0	 0.3	  0.2	   0.1	0.0(20)   0.0(7)   0.0(4)
PX qref latch		       3						   100.0
SQL*Net break/reset to cl    130				  29.2	   20.0 	      0.8     25.4     18.5	 3.8	  1.5		    0.8
SQL*Net message to client   1679			  0.1	  87.2	    8.2      1.1      2.0      0.6	0.5	 0.3	  0.1	   0.1
Sync ASM rebalance	     108					   38.0      2.8      1.9      0.9	2.8	 4.6	 10.2	   5.6			      1.9      9.3	4.6	16.7	  0.9
asynch descriptor resize     522				  77.8	   16.7      1.7      2.1      1.1	0.2		  0.2		    0.2
buffer busy waits	      16								       6.3		18.8									 6.3			   25.0     43.8
buffer deadlock 	       9					   11.1     77.8	      11.1
control file parallel wri    638														   14.9     43.9     14.9      9.7	6.3	 3.8	  4.9	   1.4	    0.3
control file sequential r   7747					    8.5     12.9      0.9      1.6     34.8	27.6	  8.6	   3.2	    1.3      0.5      0.1      0.1   0.0(1)
cursor: mutex S 	     859													  91.7	    7.0      1.2      0.1
cursor: mutex X 	    2751				   7.7	   26.1     11.7     20.1      5.7	2.4	 1.0	  0.4	   0.4	    0.3      0.1     22.5      1.7   0.0(1)
cursor: pin S		      17													  82.4	   11.8      5.9
cursor: pin S wait on X      476													  24.2	   36.6     10.3      9.0      3.8	1.5	 1.9	  2.5	   6.5	    2.9      0.8
db file async I/O submit  333.8K			  0.5	  95.0	    1.8      0.7      1.1      0.6	0.2	 0.1  0.0(88)  0.0(47)	0.0(21)   0.0(2)
db file parallel read	  403.6K									     0.0(3)	 0.2	  0.7	   2.2	    5.4     39.4     19.5     16.3     15.0	 1.3	  0.1	0.0(3)
db file parallel write	  445.6K					0.0(57)      0.7      2.6      2.8	4.3	 7.1	 13.9	  22.5	   31.0      9.6      3.1      1.0	0.4	 0.3	  0.6  0.0(65)	0.0(14)
db file scattered read	      80									       66.3	17.5	  8.8	   5.0	    1.3      1.3
db file sequential read     4.9M								   0.0(48)	0.8	21.9	  8.5	   4.3	   47.0     11.8      2.6      2.3	0.8 0.0(2005 0.0(244)	0.0(1)
direct path read	       8							     12.5     50.0     12.5	25.0
direct path write	     145												  0.7	   2.1	   13.1     18.6     32.4     10.3	9.0	 9.0	  2.1	   1.4	    1.4
direct path write temp	     150														   50.0     40.0      4.0      1.3	2.0	 1.3	  1.3
enq: AF - task serializat      1														  100.0
enq: CF - contention	     100											 2.0	 41.0	  23.0	   20.0      5.0	       1.0	1.0	 1.0		   6.0
enq: CO - master slave de     11												 18.2	  45.5	   27.3      9.1
enq: CR - block range reu    378								       0.3		 9.8	 21.4	  30.4	   18.0      5.3      0.8      1.6	0.8	 1.1	  1.9	   4.8	    3.7      0.3
enq: DW - contention	       3															    33.3					 66.7
enq: FB - contention	      24											12.5	 54.2	  16.7	   16.7
enq: HW - contention	      22											13.6	 18.2	  50.0	    9.1      4.5					  4.5
enq: PS - contention	     227						     0.4	       0.9	2.2	 9.7	 37.9	  24.2	   17.6      4.0      2.6				  0.4
enq: PW - flush prewarm b      9											11.1		  88.9
Wait Event Histogram (Global)	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
enq: RA - RT ADDM flood c      1												100.0
enq: RO - fast object reu    385											19.0	 34.5	  17.9	   13.2      6.5      0.3      0.3	0.3	 1.6	  2.9	   2.3	    0.8      0.5
enq: SM -  contention	       3												 33.3			    33.3     33.3
enq: TA - contention	       3												 33.3		   33.3 							  33.3
enq: TD - KTF dump entrie      2												 50.0	  50.0
enq: TM - contention	     207											 3.9	 18.8	  30.0	   24.2      6.3      1.0      1.0	1.0		  3.9	   3.4	    2.4      4.3
enq: TO - contention	      31											 3.2	 45.2	  16.1	   22.6      3.2						   9.7
enq: TT - contention	      17											23.5	 11.8	  41.2	   17.6      5.9
enq: US - contention	      17												 35.3	  52.9	    5.9      5.9
enq: WF - contention	      34											 5.9	 47.1	  23.5	   17.6 							   5.9
enq: WT - contention	      19											 5.3	 52.6	  31.6	   10.5
gc buffer busy acquire	       4													  25.0		    25.0				25.0	 25.0
gc buffer busy release	      11					    9.1      9.1      9.1		9.1			  18.2		     9.1     18.2      9.1				   9.1
gc cr block 2-way	    5429							   0.0(2)      0.1	0.3	20.0	 18.9	  23.3	   23.0     10.1      1.9      0.3   0.0(2)	 0.1	  0.1	   0.1	    1.6      0.2
gc cr block busy	     132													   1.5	    2.3      6.1     21.2     22.7     25.8	 4.5	  9.8	   3.8	    0.8      1.5
gc cr block congested	     891													   0.1	   17.4     44.0     31.4      5.3	0.6	 0.1		   0.1	    0.8      0.2
gc cr block lost	     792																						  24.7	   71.6      3.7
gc cr disk read 	       4														   25.0     25.0		       25.0	25.0
gc cr grant 2-way	    4801							      0.1      0.2	0.3	 4.6	 12.4	  26.6	   34.7     16.1      2.7      0.2	      0.0(1)			    2.0      0.2
gc cr grant busy	  425.2K						 0.0(17)  0.0(11)  0.0(20)  0.0(55)	 0.3	  2.6	   6.7	   13.6     20.0     18.2      9.2	6.9	11.8	  6.4	   1.0	    2.3      1.0
gc cr grant congested	     921													   0.3	   16.3     53.4     26.1      2.0					    1.7      0.2
gc cr multi block grant   400.3K						  0.0(1)	    0.0(1)   0.0(2)  0.0(16)	  0.1	   0.8	    2.5      7.3     13.6     10.7     10.8	25.2	 18.4	   3.1	    3.7      3.8
gc cr multi block mixed     2646												  0.2	   0.3	    1.5      3.7      8.4      6.3	5.9	13.9	  9.8	   6.8	   36.4      6.8
gc current block 2-way	     714										0.8	26.1	 16.5	  19.0	   21.3      9.8      3.1      1.1		 0.1	  0.1		    2.0
gc current block busy	   32.7K							      0.1      0.2	0.2	12.8	 23.1	  27.8	   23.0      9.1      1.8      0.3  0.0(13)	 0.1	  0.1	0.0(5)	    1.3      0.2
gc current block congeste   5272							   0.0(1)		      0.0(1)		   1.0	   20.4     45.8     26.8      4.3	0.2	 0.1	  0.1	0.0(1)	    0.9      0.2
gc current block lost	    3141																						  25.9	   70.5      3.5
gc current grant 2-way	   33.7K							      0.1      0.3	0.5	10.6	 17.6	  27.3	   26.1     11.4      2.3      0.6	0.5	 0.7	  0.5	   0.1	    1.1      0.2
gc current grant busy	    2.2M					 0.0(7) 0.0(100)  0.0(46) 0.0(127) 0.0(315)	 0.7	  4.1	   8.4	   15.1     19.8     16.9      8.3	6.1	10.7	  6.0	   0.9	    2.1      1.0
gc current grant congeste   6694								    0.0(1)		       0.0(3)	   1.0	   16.6     47.9     23.6      3.2	1.4	 2.3	  2.0	   0.5	    1.2      0.3
gc current multi block re     46											 2.2	 30.4	  10.9	    4.3     10.9      4.3      6.5	4.3	 6.5	  8.7	   4.3	    2.2      4.3
gc current retry	       2																		      100.0
gcs log flush sync	   14.2K					    1.3      2.8     11.8     18.0     18.9	19.6	 15.5	   7.7	    3.0      1.0      0.3      0.2
ges DFS hang analysis pha      1																		      100.0
ges inquiry response	     185											 8.6	 42.7	  28.6	   14.1      3.8      1.1				  1.1
ges message buffer alloca     17					   76.5     11.8								     5.9						   5.9
ges resource directory to     19				  94.7	    5.3
kfk: async disk IO	      11					    9.1 	      9.1     18.2     45.5	 9.1	  9.1
kksfbc child completion       13					    7.7 												       92.3
ksxr poll remote instance   2832						    85.1      7.0      5.0	2.0	 0.5	  0.4		    0.1
latch free		   14.1K					   10.9      2.5      3.2     12.5     17.9	19.5	 13.3	   9.7	    6.0      2.9      1.5      0.1
latch: MGA heap latch	      46					   23.9     10.9     15.2     15.2     15.2	15.2	  2.2	   2.2
latch: MGA shared context     84					    7.1      7.1      4.8     15.5     22.6	13.1	 11.9	   9.5		     2.4      2.4      3.6
latch: MGA shared context    143					    6.3      4.2	       7.0     21.0	12.6	 17.5	  13.3	    6.3      3.5      7.0      1.4
latch: cache buffers chai    350					   31.4      1.7      4.3     13.1     10.3	 8.6	  9.1	   8.0	    6.9      4.9      1.4      0.3
latch: cache buffers lru    3873					   24.3      2.6      3.7     16.3     19.0	12.4	  8.6	   7.3	    3.9      1.6      0.4
latch: call allocation	      32					   28.1 		      15.6     12.5	 3.1	  9.4	  15.6	   15.6
latch: checkpoint queue l    112					   20.5      0.9      5.4     20.5     14.3	13.4	 10.7	   7.1	    5.4      0.9	       0.9
latch: enqueue hash chain     16							     12.5     25.0     12.5	18.8	  6.3	  12.5	    6.3      6.3
latch: gc element	   12.9K					    2.3      0.8      1.4      5.4	9.9	16.2	 19.4	  19.2	   14.1      7.7      2.9      0.6   0.0(1)
latch: gcs resource hash    1587					   10.5      2.0      3.2     14.4     19.2	16.1	 14.7	  10.8	    6.3      2.5      0.3      0.1
latch: ges resource hash     226					   11.5      5.3      2.2     15.5     15.5	23.5	 12.8	   8.4	    5.3
latch: kjci process conte     13					   15.4 	     15.4     38.5	7.7	23.1
latch: messages 	      94					    7.4      6.4      1.1     27.7     18.1	16.0	  8.5	   7.4	    3.2      2.1      2.1
latch: object queue heade    852					    4.6      1.5      2.1      7.3     12.0	15.6	 20.7	  17.5	   10.8      6.1      1.3      0.6
latch: redo allocation	    8219					    7.8      1.7      2.4     11.2     16.0	16.6	 13.8	  12.8	    8.7      5.5      2.9      0.6
latch: redo copy	       3														   33.3     33.3     33.3
latch: redo writing	     159					    8.2 	      0.6     11.9     17.0	22.6	 16.4	  11.3	    6.3      5.0      0.6
latch: shared pool	      58					   15.5      3.4      5.2     10.3     27.6	17.2	  5.2	   1.7	    1.7      1.7      5.2      5.2
latch: undo global data       26					    7.7 	      3.8      7.7     15.4	23.1	 15.4	  15.4	    3.8      3.8      3.8
Wait Event Histogram (Global)	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
libcache interrupt action  15.9K			  1.5	  96.4	    0.7      0.4      0.7      0.3   0.0(7)   0.0(2)   0.0(2)	0.0(2)
library cache lock	    1450					    0.1 		       0.1	0.1	23.3	 39.9	  17.0	   11.7      4.4      1.3      0.8	0.1		  0.4	   0.6	    0.1      0.1
library cache pin	    1367										0.1	27.0	 43.5	  16.0	    8.9      2.5      0.1      0.2	0.1	 0.1	  0.7	   0.7	    0.1
library cache: bucket mut     10													  30.0	   70.0
library cache: mutex X	     984				   9.1	   24.2     12.6     20.3      5.2	2.9	 1.0	  0.4	   0.3	    0.2 	     23.3      0.4
lock deadlock retry	    3126					    4.1     78.8      7.4      4.6	2.4	 1.2	  0.8	   0.5	    0.1 	      0.1
log file parallel write    42.5K														    2.3     12.6     43.4     23.2     13.8	 1.7	  2.3	   0.6	    0.1   0.0(1)
log file sequential read     926						     0.4     29.4      2.3	7.1	11.7	 13.3	   7.9	   22.6      4.0      0.6      0.8
log file sync		     296														    1.7     11.8     26.4     35.1     20.9	 4.1
name-service call wait	       6												100.0
oracle thread bootstrap        9																	      77.8     22.2
os thread creation	       9														   88.9     11.1
reliable message	     308												  9.7	  13.0	   27.9     31.5      9.4      0.6	0.6	 0.3	  2.3	   1.3	    1.9      1.3
row cache lock		     130											 0.8	 14.6	  36.2	   37.7      7.7					  2.3		    0.8
row cache mutex 	      76				   9.2	   22.4     10.5     11.8      5.3     14.5	 5.3	  5.3	   3.9			      9.2      1.3	1.3
undo segment extension	      42					    9.5 										      9.5      9.5	9.5	 9.5	  9.5	   9.5	   33.3
undo_retention publish re      4				  75.0	   25.0
wait list latch free	      16													  87.5	   12.5
			  --------------------------------------------------------------------------------------------------------------------


System Statistics		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	       Reads	    Reads	Writes	   Size (k)	 Changes	Calls	     Execs	 Parses     Logons	   Txns
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ---------- ------------
   1	  17,727,484   14,932,774    2,553,257	  2,022,043    5,286,019	2,138	   279,199	 11,400        105	 40,508
   2	  14,774,155   12,450,491    2,091,508	  1,657,486    4,340,673	2,060	   244,986	 10,502 	99	 33,348
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	  32,501,639   27,383,265    4,644,765	  3,679,529    9,626,692	4,198	   524,185	 21,902        204	 73,856
 Avg	  16,250,820   13,691,633    2,322,383	  1,839,765    4,813,346	2,099	   262,093	 10,951        102	 36,928
 Std	   2,088,319	1,755,239      326,506	    257,781	 668,461	   55	    24,192	    635 	 4	  5,063
			  --------------------------------------------------------------------------------------------------------------------

System Statistics - Per Second	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	     Reads/s	  Reads/s     Writes/s	 Size (k)/s    Changes/s      Calls/s	   Execs/s     Parses/s   Logons/s	 Txns/s
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ---------- ------------
   1	   26,827.96	 22,598.6      3,864.0	    3,060.1	 7,999.6	  3.2	     422.5	   17.3       0.16	   61.3
   2	   22,360.15	 18,843.4      3,165.4	    2,508.5	 6,569.5	  3.1	     370.8	   15.9       0.15	   50.5
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	   49,188.10	 41,441.9      7,029.4	    5,568.6	14,569.1	  6.4	     793.3	   33.1       0.31	  111.8
 Avg	   24,594.05	 20,721.0      3,514.7	    2,784.3	 7,284.5	  3.2	     396.7	   16.6       0.15	   55.9
 Std	    3,159.22	  2,655.3	 494.0	      390.0	 1,011.3	  0.1	      36.6	    1.0       0.01	    7.7
			  --------------------------------------------------------------------------------------------------------------------

System Statistics - Per Transaction    DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	    Reads/tx	 Reads/tx    Writes/tx	Size (k)/tx   Changes/tx     Calls/tx	  Execs/tx    Parses/tx  Logons/tx
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ----------
   1	      437.63	    368.6	  63.0	       49.9	   130.5	  0.1	       6.9	    0.3       0.00
   2	      443.03	    373.4	  62.7	       49.7	   130.2	  0.1	       7.3	    0.3       0.00
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~
 Avg	      440.33	    371.0	  62.9	       49.8	   130.3	  0.1	       7.1	    0.3       0.00
			  --------------------------------------------------------------------------------------------------------------------


SysStat and Global Messaging  - RAC    DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

	   Blocks Received	      Blocks Served	       CPU (seconds)						Messages				       GC Blks	   GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   -------	 --------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent   GES Sent   Sent Direct  Sent Indir	  Lost	  Failure
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   -------	 --------
   1	    23,633	26,767	      17,638	  33,524	  N/A	       0       21,280,364	  21,541     22,733,090      11,756    1,497,260   8,722,126	 4,191		0
   2	    16,924	24,848	      23,164	  28,910	  N/A	       0       22,453,045	  11,455     21,120,714      21,315    1,234,316   7,233,442	10,959		0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~	 ~~~~~~~~
 Sum	    40,557	51,615	      40,802	  62,434	    0	       0       43,733,409	  32,996     43,853,804      33,071    2,731,576  15,955,568	15,150		0
 Avg	    20,279	25,808	      20,401	  31,217	  N/A	       0       21,866,705	  16,498     21,926,902      16,536    1,365,788   7,977,784	 7,575		0
 Std	     4,744	 1,357	       3,907	   3,263	  N/A	       0	  829,211	   7,132      1,140,122       6,759	 185,929   1,052,659	 4,786		0
			  --------------------------------------------------------------------------------------------------------------------

SysStat and Global Messaging (per Sec)- RACDB/Inst: P60SDB/p60sdb1  Snaps: 135

     Blocks Received Per Second   Blocks Served per Second   CPU seconds per Second				     Messages Per Second				  GC Blks     GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   -------	 --------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent    GES Sent  Sent Direct  Sent Indir	Lost/s	   Fail/s
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   -------	 --------
   1	     35.77	 40.51	       26.69	   50.73	  N/A	    0.00	32,204.72	   32.60      34,403.21       17.79	 2,265.9   13,199.66	     6		0
   2	     25.61	 37.61	       35.06	   43.75	  N/A	    0.00	33,981.87	   17.34      31,965.44       32.26	 1,868.1   10,947.55	    17		0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~	 ~~~~~~~~
 Sum	     61.38	 78.11	       61.75	   94.49	 0.00	    0.00	66,186.59	   49.94      66,368.64       50.05	 4,134.0   24,147.22	    23		0
 Avg	     30.69	 39.06	       30.88	   47.24	  N/A	    0.00	33,093.30	   24.97      33,184.32       25.03	 2,067.0   12,073.61	    11		0
 Std	      7.18	  2.05		5.92	    4.94	  N/A	    0.00	 1,256.63	   10.79       1,723.77       10.23	   281.3    1,592.48	     7		0
			  --------------------------------------------------------------------------------------------------------------------

SysStat and Global Messaging (per Tx)- RACDB/Inst: P60SDB/p60sdb1  Snaps: 135-

	Blocks Received per Tx	      Blocks Served	    CPU (seconds) per Tx				Messages per Transaction			       GC Blks	   GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   ------	--------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent   GES Sent   Sent Direct  Sent Indir   Lost/T	 Fail/Tx
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   ------	--------
   1	      0.58	  0.66		0.44	    0.83	  N/A	    0.00	   525.34	    0.53	 561.20        0.29	    37.0      215.32	  0.1	     0.0
   2	      0.51	  0.75		0.69	    0.87	  N/A	    0.00	   673.30	    0.34	 633.34        0.64	    37.0      216.91	  0.3	     0.0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~	~~~~~~~~
 Avg	      0.55	  0.70		0.57	    0.85	  N/A	    0.00	   599.32	    0.44	 597.27        0.46	    37.0      216.11	  0.2	     0.0
			  --------------------------------------------------------------------------------------------------------------------


Global Cache Efficiency Percentages    DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

	       Buffer Access
       -----------------------------
  I#	   Local % Remote %   Disk %	Locality %
----   ----------- -------- --------   -----------
   1	     15.48     0.28    84.24	     50.29
   2	     15.43     0.28    84.28	     50.26
			  --------------------------------------------------------------------------------------------------------------------

Global Latency Characteristics	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

				CR Blocks				  CU Blocks
		 ---------------------------------------   ---------------------------------------
	GE Get	   Receive     Build	 Flush Log Flush     Receive	   Pin	   Flush Log Flush
  I# Time (us)	 Time (us) Time (us) Time (us) CR Srvd %   Time (us) Time (us) Time (us) CU Srvd %
---- ---------	 --------- --------- --------- ---------   --------- --------- --------- ---------
   1	  4137	     63812	  64	 42308	     0.1       26179	   N/A	   60000       0.1
   2	   484	     35598	  99	 60632	     0.6       15231	  2000	   56875       0.1
			  --------------------------------------------------------------------------------------------------------------------

Global Messaging Statistics	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

	     Queue Time (us)	    Process Time (us)	      % Messages Sent
       --------------------------   -----------------	--------------------------
  I#	   Sent  on ksxp Received   GCS msgs GES msgs	  Direct Indirect Flow Ctr
----   -------- -------- --------   -------- --------	-------- -------- --------
   1	   4805    57604       72	  22	   25	    14.6     85.3      0.0
   2	   2952    31973      135	  24	   46	    14.6     85.3      0.1
			  --------------------------------------------------------------------------------------------------------------------


Global CR Server Statistics	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

			   Block Requests					   Results			 Fairness      Light		   Total
       -----------------------------------------------------   ----------------------------------------------	----------   --------	--------------------------
  I#		CR	    CU	      Data     Undo	  TX	   Current Private	 Zero  Dsk Rd	 Fail	 Down Conv	Works	   Flushes     Builds Erro
----   ----------- ----------- ----------- -------- --------   ----------- ------- ---------- ------- -------	----------   --------	---------- ---------- ----
   1	    33,371	    81	    33,371	  0	  12	    33,425	 0	   14	    0	    3	    33,228     18,343		26     33,349	 0
   2	    25,615	 3,022	    25,615	  0    2,957	    28,634	 1	    0	    5	    0	    25,403     20,364	       174     25,620	 0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~~ ~~~~~~~ ~~~~~~~~~~ ~~~~~~~ ~~~~~~~	~~~~~~~~~~   ~~~~~~~~	~~~~~~~~~~ ~~~~~~~~~~ ~~~~
 Sum	    58,986	 3,103	    58,986	  0    2,969	    62,059	 1	   14	    5	    3	    58,631     38,707	       200     58,969	 0
 Avg	    29,493	 1,552	    29,493	  0    1,485	    31,030	 1	    7	    3	    2	    29,316     19,354	       100     29,485	 0
 Std	     5,484	 2,080	     5,484	  0    2,082	     3,388	 1	   10	    4	    2	     5,533	1,429	       105	5,465	 0
			  --------------------------------------------------------------------------------------------------------------------

Global Current Server Statistics       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

  I#	    Pins % <100us   % <1ms  % <10ms % <100ms	% <1s	% <10s	   Flushes % <100us   % <1ms  % <10ms % <100ms	  % <1s   % <10s
---- ----------- -------- -------- -------- -------- -------- -------- ----------- -------- -------- -------- -------- -------- --------
   1	       0     0.00     0.00     0.00	0.00	 0.00	  0.00		23     0.00	0.00	52.17	 39.13	   8.70     0.00
   2	       5     0.00    80.00    20.00	0.00	 0.00	  0.00		32     0.00	0.00	43.75	 43.75	  12.50     0.00
 ~~~ ~~~~~~~~~~~						       ~~~~~~~~~~~
 Sum	       5								55
 Avg	       3								28
 Std	       4								 6
			  --------------------------------------------------------------------------------------------------------------------


Global Cache Transfer Statistics       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
-> Busy        (Busy) - Block Transfer impacted by Remote Contention
-> Congested  (Cngst) - Block Transfer impacted by Remote System Load
-> All - average time of All blocks (Immed,Busy,Cngst) in us
-> Ordered by instance_number, CR + Current Blocks Received desc

Instance#	Block		       CR Blocks		       Current Blocks		       CR Avg Time (us) 	  Current Avg Time (us)
---------   ------------   --------------------------------   --------------------------------	 ---------------------------   ---------------------------
Dest  Src   Class	      Received %Immed  %Busy %Cngst	 Received %Immed  %Busy %Cngst	    All  Immed	 Busy  Cngst	  All  Immed   Busy  Cngst
---- ----   ------------   ----------- ------ ------ ------   ----------- ------ ------ ------	 ------ ------ ------ ------   ------ ------ ------ ------
   1	2   data block		23,451	 91.9	 0.4	7.7	   23,197    7.2   75.8   17.0	  69047  69813	74378  59699	26155  67195  22869  23395
	2   undo header 	 2,998	 89.0	 2.7	8.3	       66    0.0   86.4   13.6	  18051  14700	92584  29778	61842	 N/A  67390  26704
	2   others		    85	 77.6	 0.0   22.4	      249    9.2   75.9   14.9	  15112  17003	  N/A	8543	20706	7803  24684   8405

   2	1   data block		24,720	 94.4	 0.1	5.5	   16,617    3.3   88.6    8.1	  35744  35571	37909  38692	15254  20553  15045  15393
	1   others		    57	 89.5	 1.8	8.8	      228    4.8   85.1   10.1	  11789   1753 5.E+05	7129	15891	1974  17118  12200
	1   undo header 	     9	 88.9	 0.0   11.1	       61    1.6   91.8    6.6	  37398  41722	  N/A	2809	16607 1.E+05  15796   4513
			  --------------------------------------------------------------------------------------------------------------------

Global Cache Transfer (Immediate)      DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Ordered by instance_number, CR + Current Blocks Received desc

Instance#	Block	     Lost Blocks	 Immediate CR Blocks	     Immediate Current Blocks	   Immed CR Avg Time (us)   Immed Current Avg Time (us)
---------   ------------   --------------   ----------------------------   ----------------------------   -----------------------   -----------------------
Dest  Src   Class	     Count Time(u      Received  %2-hop   %3-hop      Received	%2-hop	 %3-hop     Total   2-hop   3-hop     Total   2-hop   3-hop
---- ----   ------------   ------- ------   ----------- ------- --------   ----------- ------- --------   ------- ------- -------   ------- ------- -------
   1	2   data block		 0    N/A	 21,544   100.0      0.0	 1,673	 100.0	    0.0     69813   69813     N/A     67195   67195	N/A
	2   undo header 	 0    N/A	  2,669   100.0      0.0	     0	   N/A	    N/A     14700   14700     N/A	N/A	N/A	N/A
	2   others		 0    N/A	     66   100.0      0.0	    23	 100.0	    0.0     17003   17003     N/A      7803    7803	N/A
	2   undo block		 0    N/A	      0     N/A      N/A	     0	   N/A	    N/A       N/A     N/A     N/A	N/A	N/A	N/A

   2	1   data block		 0    N/A	 23,346   100.0      0.0	   547	 100.0	    0.0     35571   35571     N/A     20553   20553	N/A
	1   others		 0    N/A	     51   100.0      0.0	    11	 100.0	    0.0      1753    1753     N/A      1974    1974	N/A
	1   undo header 	 0    N/A	      8   100.0      0.0	     1	 100.0	    0.0     41722   41722     N/A    110384  110384	N/A
	1   undo block		 0    N/A	      0     N/A      N/A	     0	   N/A	    N/A       N/A     N/A     N/A	N/A	N/A	N/A
			  --------------------------------------------------------------------------------------------------------------------


Cluster Interconnect		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

					 Begin					  End (if different from Begin)
		  --------------------------------------------------   --------------------------------------------------
  I# NAME	  IP Address	  Pub Source			       IP Address      Pub Source
---- ----------   --------------- --- ------------------------------   --------------- --- ------------------------------
   1 fg-priv:1	  169.254.22.248  N
   2 fg-priv:1	  169.254.31.173  N
			  --------------------------------------------------------------------------------------------------------------------

Ping Statistics 		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Latency of the roundtrip of a message from  Src Instance to the Target instances

 Instance#	       500 bytes		    8 Kbytes
-----------   --------------------------   --------------------------
		    Ping    Avg      Std	 Ping	 Avg	  Std
 Src Target	   Count Time(us)    Dev	Count Time(us)	  Dev
---- ------   ---------- -------- ------   ---------- -------- ------
   1	  1	      59      690    0.5	   65	   676	  0.4
	  2	      59     2033    2.1	   65	372652 1.E+03

   2	  1	      58     2430    2.7	   64	 31469	129.2
	  2	      58      642    0.9	   64	   572	  0.8
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Client Statistics	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

				   Sent (MB)							     Received (MB)
       -----------------------------------------------------------------   -----------------------------------------------------------------
  I#	    Total      Cache	    IPQ        DLM	  PNG	    Misc	Total	   Cache	IPQ	   DLM	      PNG	Misc
----   ---------- ---------- ---------- ---------- ---------- ----------   ---------- ---------- ---------- ---------- ---------- ----------
   1	  6,057.1      197.1	    7.6    5,817.4	  1.1	    34.0      5,528.6	   203.1	5.5    5,276.8	      1.1	42.1
   2	  5,441.8      211.5	    5.4    5,182.3	  1.1	    41.5      5,937.8	   159.3	7.3    5,736.9	      1.1	33.2
 ~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~
 Sum	 11,498.9      408.6	   13.0   10,999.7	  2.2	    75.4     11,466.4	   362.4       12.9   11,013.7	      2.2	75.3
 Avg	  5,749.5      204.3	    6.5    5,499.9	  1.1	    37.7      5,733.2	   181.2	6.4    5,506.8	      1.1	37.7
 Std	    435.1	10.2	    1.6      449.1	  0.0	     5.3	289.3	    31.0	1.3	 325.4	      0.0	 6.3
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Client Statistics (per Second)DB/Inst: P60SDB/p60sdb1  Snaps: 135

				  Sent (MB/s)							    Received (MB/s)
       -----------------------------------------------------------------   -----------------------------------------------------------------
  I#	    Total      Cache	    IPQ        DLM	  PNG	    Misc	Total	   Cache	IPQ	   DLM	      PNG	Misc
----   ---------- ---------- ---------- ---------- ---------- ----------   ---------- ---------- ---------- ---------- ---------- ----------
   1	      9.2	 0.3	    0.0        8.8	  0.0	     0.1	  8.4	     0.3	0.0	   8.0	      0.0	 0.1
   2	      8.2	 0.3	    0.0        7.8	  0.0	     0.1	  9.0	     0.2	0.0	   8.7	      0.0	 0.1
 ~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~
 Sum	     17.4	 0.6	    0.0       16.6	  0.0	     0.1	 17.4	     0.5	0.0	  16.7	      0.0	 0.1
 Avg	      8.7	 0.3	    0.0        8.3	  0.0	     0.1	  8.7	     0.3	0.0	   8.3	      0.0	 0.1
 Std	      0.7	 0.0	    0.0        0.7	  0.0	     0.0	  0.4	     0.0	0.0	   0.5	      0.0	 0.0
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Device Statistics	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs
-> null means begin value > end value

			Interface					       Sent							  Received
       ------------------------------------------   ----------------------------------------------------------	 ----------------------------------------------------------
										       Packets	Buffer Carrier					    Packets  Buffer   Frame
  I#   NAME	  IP Address	  IP Mask		   MBytes      Packets	Errors Dropped	Ovrrun	  Lost		MBytes	    Packets  Errors Dropped  Ovrrun  Errors
----   ---------- --------------- ---------------   ------------- ------------ ------- ------- ------- -------	 ------------- ------------ ------- ------- ------- -------
   1   eth0	  10.1.5.5	  255.255.255.0 	 32,241.0   16,337,066	     0	     0	     0	     0	      26,827.9	 14,888,064	  0	  0	  0	  0
       fg-priv	  192.168.2.1	  255.255.255.0 	  8,502.6    7,153,712	     0	     0	     0	     0	       7,601.5	 10,283,374	  0	  0	  0	  0
       fg-priv:1  169.254.22.248  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.1	  255.255.255.0 	      4.8	11,394	     0	     0	     0	     0		   2.2	      9,859	  0	  0	  0	  0
       fg-pub:1   192.168.1.21	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.11	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.1	  255.255.255.0 	      2.2	 3,915	     0	     0	     0	     0		   2.2	      3,929	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		    140.2    2,641,912	     0	     0	     0	     0		 140.2	  2,641,912	  0	  0	  0	  0
   2   eth0	  10.1.5.4	  255.255.255.0 	 27,043.0   15,319,999	     0	     0	     0	     0	      32,001.0	 15,717,465	  0	  0	  0	  0
       fg-priv	  192.168.2.2	  255.255.255.0 	  7,534.6    6,772,093	     0	     0	     0	     0	       8,578.2	 11,115,975	  0	  0	  0	  0
       fg-priv:1  169.254.31.173  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.2	  255.255.255.0 	      2.2	 9,858	     0	     0	     0	     0		   4.8	     11,370	  0	  0	  0	  0
       fg-pub:1   192.168.1.23	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.12	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:4   192.168.1.22	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.2	  255.255.255.0 	      3.2	 3,817	     0	     0	     0	     0		   1.2	      3,899	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		    134.7    2,138,109	     0	     0	     0	     0		 134.7	  2,138,109	  0	  0	  0	  0
 ~~~						    ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~	 ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~
 Sum							 75,608.3   50,391,875	     0	     0	     0	     0	      75,293.8	 56,813,956	  0	  0	  0	  0
 Avg							  4,447.5    2,964,228	     0	     0	     0	     0	       4,429.0	  3,341,997	  0	  0	  0	  0
 Std							  9,885.7    5,366,664	     0	     0	     0	     0	       9,816.2	  5,699,151	  0	  0	  0	  0
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Device Statistics (per Second)DB/Inst: P60SDB/p60sdb1  Snaps: 135
-> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs
-> Blank  means begin value > end value

			Interface					       Sent							  Received
       ------------------------------------------   ----------------------------------------------------------	 ----------------------------------------------------------
										       Packets	Buffer Carrier					    Packets  Buffer   Frame
  I#   NAME	  IP Address	  IP Mask		   MBytes      Packets	Errors Dropped	Ovrrun	  Lost		MBytes	    Packets  Errors Dropped  Ovrrun  Errors
----   ---------- --------------- ---------------   ------------- ------------ ------- ------- ------- -------	 ------------- ------------ ------- ------- ------- -------
   1   eth0	  10.1.5.5	  255.255.255.0 	     48.8	24,724	     0	     0	     0	     0		  40.6	     22,531	  0	  0	  0	  0
       fg-priv	  192.168.2.1	  255.255.255.0 	     12.9	10,826	     0	     0	     0	     0		  11.5	     15,562	  0	  0	  0	  0
       fg-priv:1  169.254.22.248  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.1	  255.255.255.0 	      0.0	    17	     0	     0	     0	     0		   0.0		 15	  0	  0	  0	  0
       fg-pub:1   192.168.1.21	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.11	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.1	  255.255.255.0 	      0.0	     6	     0	     0	     0	     0		   0.0		  6	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		      0.2	 3,998	     0	     0	     0	     0		   0.2	      3,998	  0	  0	  0	  0
   2   eth0	  10.1.5.4	  255.255.255.0 	     40.9	23,186	     0	     0	     0	     0		  48.4	     23,788	  0	  0	  0	  0
       fg-priv	  192.168.2.2	  255.255.255.0 	     11.4	10,249	     0	     0	     0	     0		  13.0	     16,824	  0	  0	  0	  0
       fg-priv:1  169.254.31.173  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.2	  255.255.255.0 	      0.0	    15	     0	     0	     0	     0		   0.0		 17	  0	  0	  0	  0
       fg-pub:1   192.168.1.23	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.12	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:4   192.168.1.22	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.2	  255.255.255.0 	      0.0	     6	     0	     0	     0	     0		   0.0		  6	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		      0.2	 3,236	     0	     0	     0	     0		   0.2	      3,236	  0	  0	  0	  0
 ~~~						    ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~	 ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~
 Sum							    114.4	76,263	     0	     0	     0	     0		 114.0	     85,983	  0	  0	  0	  0
 Avg							      6.7	 4,486	     0	     0	     0	     0		   6.7	      5,058	  0	  0	  0	  0
 Std							     15.0	 8,122	     0	     0	     0	     0		  14.9	      8,625	  0	  0	  0	  0
			  --------------------------------------------------------------------------------------------------------------------

Dynamic Remastering Statistics	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Affinity Objects - Affinity objects remastered at the begin/end snapshot
-> Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot

				   Counts per Ops					 Time per Ops (seconds) 			 Affinity Objects		  Read Mostly Objects
		---------------------------------------------------   -----------------------------------------------------------   -------------------------	--------------------------------------
     Remaster	  Remastered Replay Locks Replay Locks	  Resources														    Begin
  I#	  Ops	     Objects	 Received	  Sent	    Cleaned    Remaster    Freeze   Cleanup    Replay  Fixwrite      Sync	   Begin	  End	       Begin (persistent)	   End
---- --------	------------ ------------ ------------ ------------   --------- --------- --------- --------- --------- ---------   ------------ ------------	------------ ------------ ------------
   1	    0		 N/A	      N/A	   N/A		N/A	    N/A       N/A	N/A	  N/A	    N/A       N/A	       1	    1		   0		0	     0
   2	    0		 N/A	      N/A	   N/A		N/A	    N/A       N/A	N/A	  N/A	    N/A       N/A	       1	    1		   0		0	     0
 ~~~ ~~~~~~~~	~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~   ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~   ~~~~~~~~~~~~ ~~~~~~~~~~~~	~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~
 Avg	    0		 N/A	      N/A	   N/A		N/A	    N/A       N/A	N/A	  N/A	    N/A       N/A	       1	    1		   0		0	     0
 Max				      N/A	   N/A		N/A	    N/A       N/A	N/A	  N/A	    N/A       N/A	       1	    1		   0		0	     0
			  --------------------------------------------------------------------------------------------------------------------


SQL ordered by Elapsed Time (Global)   DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Captured SQL account for   92.7% of Total DB Time (s):	  288,289
-> Captured PL/SQL account for	 19.3% of Total DB Time (s):	     288,289

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	  Elapsed (s)	  CPU (s)  IOWait (s)		Gets	    Reads	  Rows Cluster (s)	  Execs     Elapsed (s)     CPU (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	DB time   DB CPU  IO Wait     Gets    Reads  Cluster	Execs
-------------	------------- ----------- ----------- -------------- ------------ ------------ ----------- ------------   ------------- ----------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
35dumc2tpr9dv	   160,512.52	 2,386.84	  N/A		 N/A	      N/A	   N/A	       N/A	    N/A 	    N/A 	N/A	    N/A 	   N/A		N/A	     N/A	 N/A	   55.7     44.1      N/A      N/A	N/A	 N/A	  N/A
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

bhdvtsvjhgvrh	   106,429.49	 2,495.60	  N/A		 N/A	      N/A	   N/A	       N/A	    N/A 	    N/A 	N/A	    N/A 	   N/A		N/A	     N/A	 N/A	   36.9     46.1      N/A      N/A	N/A	 N/A	  N/A
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

fpx8qau059b6k	       546.76	    10.48	51.86	      69,224	   60,242	     1	    486.40	      1 	 546.76       10.48	  51.86       69,224.0	   60,242.0	     1.0      486.40	    0.2      0.2      0.0      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '25'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

dpgskpjbnxu8n	       546.60	     9.97	54.92	      64,552	   55,821	     1	    483.89	      1 	 546.60        9.97	  54.92       64,552.0	   55,821.0	     1.0      483.89	    0.2      0.2      0.0      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '32'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

58vuprsfnw7af	       546.58	     9.75	47.36	      64,385	   54,726	     1	    492.13	      1 	 546.58        9.75	  47.36       64,385.0	   54,726.0	     1.0      492.13	    0.2      0.2      0.0      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '65'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

dk7wndm4trmxm	       545.82	    10.16	53.87	      65,542	   56,839	     1	    483.62	      1 	 545.82       10.16	  53.87       65,542.0	   56,839.0	     1.0      483.62	    0.2      0.2      0.0      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '262'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

59u1h8q0dn7kr	       545.81	    10.08	49.72	      68,350	   56,196	     1	    487.46	      1 	 545.81       10.08	  49.72       68,350.0	   56,196.0	     1.0      487.46	    0.2      0.2      0.0      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

bp4mjh3dc1y4y	       545.77	    10.52	50.03	      69,785	   59,593	     1	    486.74	      1 	 545.77       10.52	  50.03       69,785.0	   59,593.0	     1.0      486.74	    0.2      0.2      0.0      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '15'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

dnznjspycqrhh	       545.67	    10.50	43.96	      73,536	   57,750	     1	    494.31	      1 	 545.67       10.50	  43.96       73,536.0	   57,750.0	     1.0      494.31	    0.2      0.2      0.0      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '174'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

grnj9m41xzwyv	       545.42	    10.72	54.20	      72,123	   61,766	     1	    485.19	      1 	 545.42       10.72	  54.20       72,123.0	   61,766.0	     1.0      485.19	    0.2      0.2      0.0      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by CPU Time (Global)       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Captured SQL account for   90.7% of Total CPU Time (s):	     5,417
-> Captured PL/SQL account for	 19.6% of Total CPU Time (s):		5,417

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	    CPU (s)   Elapsed (s)  IOWait (s)		Gets	    Reads	  Rows Cluster (s)	  Execs       CPU (s)	Elapsed (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	 DB CPU  DB time  IO Wait     Gets    Reads  Cluster	Execs
-------------	----------- ------------- ----------- -------------- ------------ ------------ ----------- ------------   ----------- ------------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	   2,495.60    106,429.49	  N/A		 N/A	      N/A	   N/A	       N/A	    N/A 	  N/A		N/A	    N/A 	   N/A		N/A	     N/A	 N/A	   46.1     36.9      N/A      N/A	N/A	 N/A	  N/A
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	   2,386.84    160,512.52	  N/A		 N/A	      N/A	   N/A	       N/A	    N/A 	  N/A		N/A	    N/A 	   N/A		N/A	     N/A	 N/A	   44.1     55.7      N/A      N/A	N/A	 N/A	  N/A
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

9yv5dwv8k0awg	      21.08	    30.22	 1.64	      56,996	      658	    21	      0.14	     21 	 1.00	       1.44	   0.08        2,714.1	       31.3	     1.0	0.01	    0.4      0.0      0.0      0.2	0.0	 0.0	  0.0
WITH MONITOR_DATA AS (SELECT INST_ID, KEY, NVL2(PX_QCSID, NULL, STATUS) STATUS,
FIRST_REFRESH_TIME, LAST_REFRESH_TIME, REFRESH_COUNT, PROCESS_NAME, SID, SQL_ID,
 SQL_EXEC_START, SQL_EXEC_ID, DBOP_NAME, DBOP_EXEC_ID, SQL_PLAN_HASH_VALUE, SQL_
FULL_PLAN_HASH_VALUE, SESSION_SERIAL#, SQL_TEXT, PX_SERVER#, PX_SERVER_GROUP, PX

b2a4zdu00qd3v	      11.23	   544.30	50.71	      77,143	   63,951	     1	    484.51	      1 	11.23	     544.30	  50.71       77,143.0	   63,951.0	     1.0      484.51	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '249'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

3ga2c5w22k8p4	      11.23	   543.37	50.32	      77,938	   63,773	     1	    487.71	      1 	11.23	     543.37	  50.32       77,938.0	   63,773.0	     1.0      487.71	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

gta39sva2c0pj	      11.21	   543.16	48.02	      79,495	   64,150	     1	    485.04	      1 	11.21	     543.16	  48.02       79,495.0	   64,150.0	     1.0      485.04	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '165'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

f737cjs9htn1t	      11.15	   544.91	42.43	      77,813	   67,077	     1	    497.57	      1 	11.15	     544.91	  42.43       77,813.0	   67,077.0	     1.0      497.57	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '444'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

1hh6k5cdprk6r	      11.13	   544.09	41.87	      73,931	   63,304	     1	    494.52	      1 	11.13	     544.09	  41.87       73,931.0	   63,304.0	     1.0      494.52	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '471'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

1ksjxx805vj29	      11.11	   543.24	50.36	      74,720	   62,879	     1	    485.42	      1 	11.11	     543.24	  50.36       74,720.0	   62,879.0	     1.0      485.42	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '168'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

cnvn60d4ys1ym	      11.08	   544.81	46.96	      74,111	   62,960	     1	    488.22	      1 	11.08	     544.81	  46.96       74,111.0	   62,960.0	     1.0      488.22	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '462'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by User I/O Time (Global)  DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Captured SQL account for    0.0% of Total User I/O Wait Time (s):	      24,572
-> Captured PL/SQL account for	 18.8% of Total User I/O Wait Time (s): 	 24,572

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	 IOWait (s)   Elapsed (s)     CPU (s)		Gets	    Reads	  Rows Cluster (s)	  Execs    IOWait (s)	Elapsed (s)	CPU (s) 	  Gets	      Reads	    Rows Cluster (s)	IO Wait  DB time   DB CPU     Gets    Reads  Cluster	Execs
-------------	----------- ------------- ----------- -------------- ------------ ------------ ----------- ------------   ----------- ------------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
35dumc2tpr9dv		N/A    160,512.52    2,386.84		 N/A	      N/A	   N/A	       N/A	    N/A 	  N/A		N/A	    N/A 	   N/A		N/A	     N/A	 N/A	    N/A     55.7     44.1      N/A	N/A	 N/A	  N/A
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

bhdvtsvjhgvrh		N/A    106,429.49    2,495.60		 N/A	      N/A	   N/A	       N/A	    N/A 	  N/A		N/A	    N/A 	   N/A		N/A	     N/A	 N/A	    N/A     36.9     46.1      N/A	N/A	 N/A	  N/A
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

b2a4zdu00qd3v	      50.71	   544.30	11.23	      77,143	   63,951	     1	    484.51	      1 	50.71	     544.30	  11.23       77,143.0	   63,951.0	     1.0      484.51	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '249'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

1ksjxx805vj29	      50.36	   543.24	11.11	      74,720	   62,879	     1	    485.42	      1 	50.36	     543.24	  11.11       74,720.0	   62,879.0	     1.0      485.42	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '168'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

3ga2c5w22k8p4	      50.32	   543.37	11.23	      77,938	   63,773	     1	    487.71	      1 	50.32	     543.37	  11.23       77,938.0	   63,773.0	     1.0      487.71	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

gta39sva2c0pj	      48.02	   543.16	11.21	      79,495	   64,150	     1	    485.04	      1 	48.02	     543.16	  11.21       79,495.0	   64,150.0	     1.0      485.04	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '165'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

cnvn60d4ys1ym	      46.96	   544.81	11.08	      74,111	   62,960	     1	    488.22	      1 	46.96	     544.81	  11.08       74,111.0	   62,960.0	     1.0      488.22	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '462'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

f737cjs9htn1t	      42.43	   544.91	11.15	      77,813	   67,077	     1	    497.57	      1 	42.43	     544.91	  11.15       77,813.0	   67,077.0	     1.0      497.57	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '444'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

1hh6k5cdprk6r	      41.87	   544.09	11.13	      73,931	   63,304	     1	    494.52	      1 	41.87	     544.09	  11.13       73,931.0	   63,304.0	     1.0      494.52	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '471'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

9yv5dwv8k0awg	       1.64	    30.22	21.08	      56,996	      658	    21	      0.14	     21 	 0.08	       1.44	   1.00        2,714.1	       31.3	     1.0	0.01	    0.0      0.0      0.4      0.2	0.0	 0.0	  0.0
WITH MONITOR_DATA AS (SELECT INST_ID, KEY, NVL2(PX_QCSID, NULL, STATUS) STATUS,
FIRST_REFRESH_TIME, LAST_REFRESH_TIME, REFRESH_COUNT, PROCESS_NAME, SID, SQL_ID,
 SQL_EXEC_START, SQL_EXEC_ID, DBOP_NAME, DBOP_EXEC_ID, SQL_PLAN_HASH_VALUE, SQL_
FULL_PLAN_HASH_VALUE, SESSION_SERIAL#, SQL_TEXT, PX_SERVER#, PX_SERVER_GROUP, PX

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Gets (Global)	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Total Buffer Gets:	   32,501,639
-> Captured SQL account for    0.6% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id		  Gets	      Reads   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)	  Execs 	    Gets	Reads	Elapsed (s)	CPU (s)  IOWait (s)	    Rows Cluster (s)	   Gets    Reads  DB time   DB CPU  IO Wait  Cluster	Execs
-------------	-------------- ------------ ------------- ----------- ----------- ------------ ----------- ------------   -------------- ------------ ------------- ----------- ----------- ------------ -----------   -------- -------- -------- -------- -------- -------- --------
35dumc2tpr9dv		   N/A		N/A    160,512.52    2,386.84	      N/A	   N/A	       N/A	    N/A 	     N/A	  N/A		N/A	    N/A 	N/A	     N/A	 N/A	    N/A      N/A     55.7     44.1	N/A	 N/A	  N/A
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

3q5nfyq3x1gu4		   N/A		N/A	     0.00	 0.00	      N/A	   N/A	       N/A	    N/A 	     N/A	  N/A		N/A	    N/A 	N/A	     N/A	 N/A	    N/A      N/A      0.0      0.0	N/A	 N/A	  N/A
INSERT /*+ APPEND */ INTO cf2 SELECT * FROM user1.cf2 ORDER BY DBMS_RANDOM.VALUE
()

bhdvtsvjhgvrh		   N/A		N/A    106,429.49    2,495.60	      N/A	   N/A	       N/A	    N/A 	     N/A	  N/A		N/A	    N/A 	N/A	     N/A	 N/A	    N/A      N/A     36.9     46.1	N/A	 N/A	  N/A
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

cytuv95rat5h1		   N/A		N/A	     0.00	 0.00	      N/A	   N/A	       N/A	    N/A 	     N/A	  N/A		N/A	    N/A 	N/A	     N/A	 N/A	    N/A      N/A      0.0      0.0	N/A	 N/A	  N/A
LOCK TABLE "CF1" IN EXCLUSIVE MODE NOWAIT

gta39sva2c0pj		79,495	     64,150	   543.16	11.21	    48.02	     1	    485.04	      1 	79,495.0     64,150.0	     543.16	  11.21       48.02	     1.0      485.04	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '165'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

3ga2c5w22k8p4		77,938	     63,773	   543.37	11.23	    50.32	     1	    487.71	      1 	77,938.0     63,773.0	     543.37	  11.23       50.32	     1.0      487.71	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

f737cjs9htn1t		77,813	     67,077	   544.91	11.15	    42.43	     1	    497.57	      1 	77,813.0     67,077.0	     544.91	  11.15       42.43	     1.0      497.57	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '444'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

b2a4zdu00qd3v		77,143	     63,951	   544.30	11.23	    50.71	     1	    484.51	      1 	77,143.0     63,951.0	     544.30	  11.23       50.71	     1.0      484.51	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '249'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

5v7mdgpz8yna4		76,953	     61,898	   543.85	10.77	    48.28	     1	    489.04	      1 	76,953.0     61,898.0	     543.85	  10.77       48.28	     1.0      489.04	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '250'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

f1g58g2a3cyvm		76,091	     62,377	   543.57	10.87	    50.55	     1	    484.53	      1 	76,091.0     62,377.0	     543.57	  10.87       50.55	     1.0      484.53	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '28'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Reads (Global)	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Total Disk Reads:	  27,383,265
-> Captured SQL account for    0.0% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	       Reads	       Gets   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)	  Execs 	 Reads		 Gets	Elapsed (s)	CPU (s)  IOWait (s)	    Rows Cluster (s)	  Reads     Gets  DB time   DB CPU  IO Wait  Cluster	Execs
-------------	------------ -------------- ------------- ----------- ----------- ------------ ----------- ------------   ------------ -------------- ------------- ----------- ----------- ------------ -----------   -------- -------- -------- -------- -------- -------- --------
35dumc2tpr9dv		 N/A		N/A    160,512.52    2,386.84	      N/A	   N/A	       N/A	    N/A 	   N/A		  N/A		N/A	    N/A 	N/A	     N/A	 N/A	    N/A      N/A     55.7     44.1	N/A	 N/A	  N/A
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

3q5nfyq3x1gu4		 N/A		N/A	     0.00	 0.00	      N/A	   N/A	       N/A	    N/A 	   N/A		  N/A		N/A	    N/A 	N/A	     N/A	 N/A	    N/A      N/A      0.0      0.0	N/A	 N/A	  N/A
INSERT /*+ APPEND */ INTO cf2 SELECT * FROM user1.cf2 ORDER BY DBMS_RANDOM.VALUE
()

bhdvtsvjhgvrh		 N/A		N/A    106,429.49    2,495.60	      N/A	   N/A	       N/A	    N/A 	   N/A		  N/A		N/A	    N/A 	N/A	     N/A	 N/A	    N/A      N/A     36.9     46.1	N/A	 N/A	  N/A
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

cytuv95rat5h1		 N/A		N/A	     0.00	 0.00	      N/A	   N/A	       N/A	    N/A 	   N/A		  N/A		N/A	    N/A 	N/A	     N/A	 N/A	    N/A      N/A      0.0      0.0	N/A	 N/A	  N/A
LOCK TABLE "CF1" IN EXCLUSIVE MODE NOWAIT

f737cjs9htn1t	      67,077	     77,813	   544.91	11.15	    42.43	     1	    497.57	      1       67,077.0	     77,813.0	     544.91	  11.15       42.43	     1.0      497.57	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '444'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

gta39sva2c0pj	      64,150	     79,495	   543.16	11.21	    48.02	     1	    485.04	      1       64,150.0	     79,495.0	     543.16	  11.21       48.02	     1.0      485.04	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '165'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

b2a4zdu00qd3v	      63,951	     77,143	   544.30	11.23	    50.71	     1	    484.51	      1       63,951.0	     77,143.0	     544.30	  11.23       50.71	     1.0      484.51	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '249'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

3ga2c5w22k8p4	      63,773	     77,938	   543.37	11.23	    50.32	     1	    487.71	      1       63,773.0	     77,938.0	     543.37	  11.23       50.32	     1.0      487.71	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

gdsqn03xtayhg	      63,337	     73,447	   544.18	11.03	    60.62	     1	    477.51	      1       63,337.0	     73,447.0	     544.18	  11.03       60.62	     1.0      477.51	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '347'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

1hh6k5cdprk6r	      63,304	     73,931	   544.09	11.13	    41.87	     1	    494.52	      1       63,304.0	     73,931.0	     544.09	  11.13       41.87	     1.0      494.52	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '471'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by UnOptimized Read Requests (Global)DB/Inst: P60SDB/p60sdb1  Snap
-> Total Physical Read Requests:      27,382,135
-> Captured SQL account for    0.0% of Total
-> Total UnOptimized Read Requests:	 27,382,135
-> Captured SQL account for    0.0% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total

								       Total													 Per Execution									    Percentage of Total
		------------------------------------------------------------------------------------------------------------------   -----------------------------------------------------------------------------------------------------   -----------------------------------------------------------------
   SQL Id	 UnOptimized	 Requests	 Reads	 Elapsed (s)	 CPU (s)  IOWait (s)	     Rows Cluster (s)	     Execs    UnOptimized     Requests	      Reads   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)   UnOptimized Requests  Reads DB time DB CPU IO Wait Cluster  Execs
-------------	------------ ------------ ------------ ------------- ----------- ----------- ------------ ----------- ------------   ------------ ------------ ------------ ------------- ----------- ----------- ------------ -----------   ----------- -------- ------ ------- ------ ------- ------- ------
35dumc2tpr9dv		 N/A	      N/A	   N/A	  160,512.52	2,386.84	 N/A	      N/A	  N/A	       N/A	      N/A	   N/A		N/A	      N/A	  N/A	      N/A	   N/A	       N/A	     N/A      N/A    N/A    55.7   44.1     N/A     N/A    N/A
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

3q5nfyq3x1gu4		 N/A	      N/A	   N/A		0.00	    0.00	 N/A	      N/A	  N/A	       N/A	      N/A	   N/A		N/A	      N/A	  N/A	      N/A	   N/A	       N/A	     N/A      N/A    N/A     0.0    0.0     N/A     N/A    N/A
INSERT /*+ APPEND */ INTO cf2 SELECT * FROM user1.cf2 ORDER BY DBMS_RANDOM.VALUE
()

bhdvtsvjhgvrh		 N/A	      N/A	   N/A	  106,429.49	2,495.60	 N/A	      N/A	  N/A	       N/A	      N/A	   N/A		N/A	      N/A	  N/A	      N/A	   N/A	       N/A	     N/A      N/A    N/A    36.9   46.1     N/A     N/A    N/A
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

cytuv95rat5h1		 N/A	      N/A	   N/A		0.00	    0.00	 N/A	      N/A	  N/A	       N/A	      N/A	   N/A		N/A	      N/A	  N/A	      N/A	   N/A	       N/A	     N/A      N/A    N/A     0.0    0.0     N/A     N/A    N/A
LOCK TABLE "CF1" IN EXCLUSIVE MODE NOWAIT

f737cjs9htn1t	      67,077	   67,077	67,077	      544.91	   11.15       42.43		1      497.57		 1	 67,077.0     67,077.0	   67,077.0	   544.91	11.15	    42.43	   1.0	    497.57	     0.2      0.2    0.2     0.2    0.2     0.2     0.2    0.0
DECLARE v_default_schema_number PLS_INTEGER := '444'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

gta39sva2c0pj	      64,150	   64,150	64,150	      543.16	   11.21       48.02		1      485.04		 1	 64,150.0     64,150.0	   64,150.0	   543.16	11.21	    48.02	   1.0	    485.04	     0.2      0.2    0.2     0.2    0.2     0.2     0.2    0.0
DECLARE v_default_schema_number PLS_INTEGER := '165'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

b2a4zdu00qd3v	      63,951	   63,951	63,951	      544.30	   11.23       50.71		1      484.51		 1	 63,951.0     63,951.0	   63,951.0	   544.30	11.23	    50.71	   1.0	    484.51	     0.2      0.2    0.2     0.2    0.2     0.2     0.2    0.0
DECLARE v_default_schema_number PLS_INTEGER := '249'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

3ga2c5w22k8p4	      63,773	   63,773	63,773	      543.37	   11.23       50.32		1      487.71		 1	 63,773.0     63,773.0	   63,773.0	   543.37	11.23	    50.32	   1.0	    487.71	     0.2      0.2    0.2     0.2    0.2     0.2     0.2    0.0
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

gdsqn03xtayhg	      63,337	   63,337	63,337	      544.18	   11.03       60.62		1      477.51		 1	 63,337.0     63,337.0	   63,337.0	   544.18	11.03	    60.62	   1.0	    477.51	     0.2      0.2    0.2     0.2    0.2     0.2     0.2    0.0
DECLARE v_default_schema_number PLS_INTEGER := '347'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

1hh6k5cdprk6r	      63,304	   63,304	63,304	      544.09	   11.13       41.87		1      494.52		 1	 63,304.0     63,304.0	   63,304.0	   544.09	11.13	    41.87	   1.0	    494.52	     0.2      0.2    0.2     0.2    0.2     0.2     0.2    0.0
DECLARE v_default_schema_number PLS_INTEGER := '471'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Executions (Global)     DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Total Executions:	     524,185
-> Captured SQL account for    5.7% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	       Execs   Elapsed (s)     CPU (s)	IOWait (s)	     Gets	 Reads	       Rows Cluster (s)     Elapsed (s)     CPU (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	  Execs  DB time   DB CPU  IO Wait     Gets    Reads  Cluster
-------------	------------ ------------- ----------- ----------- -------------- ------------ ------------ -----------   ------------- ----------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
35dumc2tpr9dv		 N/A	160,512.52    2,386.84	       N/A	      N/A	   N/A		N/A	    N/A 	    N/A 	N/A	    N/A 	   N/A		N/A	     N/A	 N/A	    N/A     55.7     44.1      N/A	N/A	 N/A	  N/A
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

3q5nfyq3x1gu4		 N/A	      0.00	  0.00	       N/A	      N/A	   N/A		N/A	    N/A 	    N/A 	N/A	    N/A 	   N/A		N/A	     N/A	 N/A	    N/A      0.0      0.0      N/A	N/A	 N/A	  N/A
INSERT /*+ APPEND */ INTO cf2 SELECT * FROM user1.cf2 ORDER BY DBMS_RANDOM.VALUE
()

bhdvtsvjhgvrh		 N/A	106,429.49    2,495.60	       N/A	      N/A	   N/A		N/A	    N/A 	    N/A 	N/A	    N/A 	   N/A		N/A	     N/A	 N/A	    N/A     36.9     46.1      N/A	N/A	 N/A	  N/A
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

cytuv95rat5h1		 N/A	      0.00	  0.00	       N/A	      N/A	   N/A		N/A	    N/A 	    N/A 	N/A	    N/A 	   N/A		N/A	     N/A	 N/A	    N/A      0.0      0.0      N/A	N/A	 N/A	  N/A
LOCK TABLE "CF1" IN EXCLUSIVE MODE NOWAIT

24djtk7r8fz33	       5,120	      0.40	  0.38	      0.00	   15,266	     0	      4,857	   0.00 	   0.00        0.00	   0.00 	   3.0		0.0	     0.9	0.00	    1.0      0.0      0.0      0.0	0.0	 0.0	  0.0
update svcobj_access$ set accesses = :5, inc_no = :6 where name = :1 AND pdb = :
2 AND tsn = :3 AND objid = :4

0sbbcuruzd66f	       4,109	      0.51	  0.23	      0.04	   12,105	    15	      3,815	   0.25 	   0.00        0.00	   0.00 	   2.9		0.0	     0.9	0.00	    0.8      0.0      0.0      0.0	0.0	 0.0	  0.0
select /*+ rule */ bucket_cnt, row_cnt, cache_cnt, null_cnt, timestamp#, sample_
size, minimum, maximum, distcnt, lowval, hival, density, col#, spare1, spare2, a
vgcln, minimum_enc, maximum_enc from hist_head$ where obj#=:1 and intcol#=:2

2p9fv35c7zxtg	       3,558	      0.29	  0.28	      0.00	   18,123	     2		 23	   0.01 	   0.00        0.00	   0.00 	   5.1		0.0	     0.0	0.00	    0.7      0.0      0.0      0.0	0.1	 0.0	  0.0
select /* KSXM:LOAD_DML_INF *//*+ leading(o) index(m) use_nl(m) */ nv
l(m.inserts, 0) ins, nvl(m.updates, 0) upd, nvl(m.deletes, 0) del, nvl(
m.drop_segments, 0) dropseg, nvl(m.flags, 0) flags, nvl(ro
wcnt, 0) rowcnt, o.pobjn pobjn from

87gaftwrm2h68	       3,058	      0.16	  0.17	      0.00	    6,888	     0		635	   0.00 	   0.00        0.00	   0.00 	   2.3		0.0	     0.2	0.00	    0.6      0.0      0.0      0.0	0.0	 0.0	  0.0
select o.owner#,o.name,o.namespace,o.remoteowner,o.linkname,o.subname from obj$
o where o.obj#=:1

9tgj4g8y4rwy8	       1,323	      0.33	  0.21	      0.00	    4,042	     4	      1,314	   0.08 	   0.00        0.00	   0.00 	   3.1		0.0	     1.0	0.00	    0.3      0.0      0.0      0.0	0.0	 0.0	  0.0
select type#,blocks,extents,minexts,maxexts,extsize,extpct,user#,iniexts,NVL(lis
ts,65535),NVL(groups,65535),cachehint,hwmincr, NVL(spare1,0),NVL(scanhint,0),NVL
(bitmapranges,0) from seg$ where ts#=:1 and file#=:2 and block#=:3

acmvv4fhdc9zh	       1,213	      0.23	  0.15	      0.00	    5,471	     6	      1,138	   0.08 	   0.00        0.00	   0.00 	   4.5		0.0	     0.9	0.00	    0.2      0.0      0.0      0.0	0.0	 0.0	  0.0
select obj#,type#,ctime,mtime,stime, status, dataobj#, flags, oid$, spare1, spar
e2, spare3, signature, spare7, spare8, spare9, nvl(dflcollid, 16382), creappid,
creverid, modappid, modverid, crepatchid, modpatchid from obj$ where owner#=:1 a
nd name=:2 and namespace=:3 and remoteowner is null and linkname is null and sub

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Cluster Wait Time (Global)DB/Inst: P60SDB/p60sdb1  Snaps: 135-1
-> Total Cluster Wait Time (s): 	261,944
-> Captured SQL account for    0.0% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	Cluster (s)   Elapsed (s)     CPU (s)  IOWait (s)	    Gets	Reads	      Rows	  Execs   Cluster (s)	Elapsed (s)	CPU (s)  IOWait (s)	      Gets	  Reads 	Rows	Cluster  DB time   DB CPU     Gets  IO Wait    Reads	Execs
-------------	----------- ------------- ----------- ----------- -------------- ------------ ------------ ------------   ----------- ------------- ----------- ----------- -------------- ------------ ------------   -------- -------- -------- -------- -------- -------- --------
35dumc2tpr9dv		N/A    160,512.52    2,386.84	      N/A	     N/A	  N/A	       N/A	    N/A 	  N/A		N/A	    N/A 	N/A	       N/A	    N/A 	 N/A	    N/A     55.7     44.1      N/A	N/A	 N/A	  N/A
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

3q5nfyq3x1gu4		N/A	     0.00	 0.00	      N/A	     N/A	  N/A	       N/A	    N/A 	  N/A		N/A	    N/A 	N/A	       N/A	    N/A 	 N/A	    N/A      0.0      0.0      N/A	N/A	 N/A	  N/A
INSERT /*+ APPEND */ INTO cf2 SELECT * FROM user1.cf2 ORDER BY DBMS_RANDOM.VALUE
()

bhdvtsvjhgvrh		N/A    106,429.49    2,495.60	      N/A	     N/A	  N/A	       N/A	    N/A 	  N/A		N/A	    N/A 	N/A	       N/A	    N/A 	 N/A	    N/A     36.9     46.1      N/A	N/A	 N/A	  N/A
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

cytuv95rat5h1		N/A	     0.00	 0.00	      N/A	     N/A	  N/A	       N/A	    N/A 	  N/A		N/A	    N/A 	N/A	       N/A	    N/A 	 N/A	    N/A      0.0      0.0      N/A	N/A	 N/A	  N/A
LOCK TABLE "CF1" IN EXCLUSIVE MODE NOWAIT

fxm9n9b0fbh2s	     529.94	   534.79	 5.31	     2.35	  38,044	9,075		 1	      1        529.94	     534.79	   5.31        2.35	  38,044.0	9,075.0 	 1.0	    0.2      0.2      0.1      0.0	0.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

f737cjs9htn1t	     497.57	   544.91	11.15	    42.43	  77,813       67,077		 1	      1        497.57	     544.91	  11.15       42.43	  77,813.0     67,077.0 	 1.0	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '444'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

96mhm2vpjm2m8	     496.59	   544.53	10.70	    40.07	  72,363       61,619		 1	      1        496.59	     544.53	  10.70       40.07	  72,363.0     61,619.0 	 1.0	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '454'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

gtppqnamwkfvz	     496.41	   534.18	10.41	    31.61	  55,613       47,884		 1	      1        496.41	     534.18	  10.41       31.61	  55,613.0     47,884.0 	 1.0	    0.2      0.2      0.2      0.1	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '501'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

bch1n63zxk221	     495.46	   543.99	10.89	    41.13	  72,292       62,011		 1	      1        495.46	     543.99	  10.89       41.13	  72,292.0     62,011.0 	 1.0	    0.2      0.2      0.2      0.2	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '475'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

dft6xuag41agd	     495.27	   531.62	10.36	    28.26	  58,025       49,588		 1	      1        495.27	     531.62	  10.36       28.26	  58,025.0     49,588.0 	 1.0	    0.2      0.2      0.2      0.1	0.2	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '489'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '131072'; v_work_unit PLS_INTEGER := '64' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  --------------------------------------------------------------------------------------------------------------------


System Statistics (Global)	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
ASSM bg: segment fix monitor						      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM cbk:blocks examined						  1,850 	   2.8		0.0		1.4	      0.4	    1.1 	  1.7
ASSM cbk:blocks marked full						    525 	   0.8		0.0		0.4	      0.1	    0.3 	  0.5
ASSM gsp:L1 bitmaps examined						  1,474 	   2.2		0.0		1.1	      0.3	    0.9 	  1.3
ASSM gsp:L2 bitmap full 						     49 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:L2 bitmaps examined						    384 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
ASSM gsp:Search all							     56 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:Search hint							     67 	   0.1		0.0		0.1	      0.0	    0.0 	  0.1
ASSM gsp:Search steal							     18 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:bump HWM							     18 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:get free block 						  1,325 	   2.0		0.0		1.0	      0.3	    0.8 	  1.2
ASSM gsp:get free data block						    933 	   1.4		0.0		0.7	      0.2	    0.6 	  0.8
ASSM gsp:get free index block						    392 	   0.6		0.0		0.3	      0.1	    0.2 	  0.4
ASSM gsp:good hint							  1,214 	   1.8		0.0		0.9	      0.2	    0.8 	  1.1
ASSM wasted db state change						      3 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
Batched IO (bound) vector count 					    755 	   1.1		0.0		0.6	      0.5	    0.2 	  0.9
Batched IO block miss count					     22,439,166       33,959.5	      303.8	   16,979.8	  2,167.8      15,446.9      18,512.7
Batched IO double miss count						420,502 	 636.4		5.7	      318.2	     35.2	  293.3 	343.1
Batched IO same unit count						  1,490 	   2.3		0.0		1.1	      1.0	    0.4 	  1.8
Batched IO single block count						  1,905 	   2.9		0.0		1.4	      0.6	    1.1 	  1.8
Batched IO vector block count					     22,446,754       33,971.0	      303.9	   16,985.5	  2,161.0      15,457.4      18,513.6
Batched IO vector read count						405,399 	 613.5		5.5	      306.8	     39.9	  278.6 	335.0
Block Cleanout Optim referenced 					     39 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
CCursor + sql area evicted						  4,324 	   6.5		0.1		3.3	      0.9	    2.6 	  3.9
CPU used by this session						759,788        1,149.9	       10.3	      574.9	     25.0	  557.3 	592.6
CPU used when call started						604,004 	 914.1		8.2	      457.1	      5.7	  453.0 	461.1
CR blocks created							 17,418 	  26.4		0.2	       13.2	      5.0	    9.6 	 16.7
Cached Commit SCN referenced					     26,032,715       39,398.0	      352.5	   19,699.0	  2,624.1      17,843.5      21,554.5
Client Advertised Receive Window					  3,591 	   5.4		0.0		2.7	      0.1	    2.6 	  2.8
Client Advertised Send Window						  3,591 	   5.4		0.0		2.7	      0.1	    2.6 	  2.8
Client Path Maximum Transmission Unit(MTU)			     16,765,100       25,371.6	      227.0	   12,685.8	 17,124.2	  577.2      24,794.4
Client Send Congestion Window						  5,114 	   7.7		0.1		3.9	      0.1	    3.8 	  4.0
Client Time (usec) Last Ack Received					    364 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
Client Time (usec) Last Data Received					    251 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
Client Time (usec) Last Data Sent					  2,064 	   3.1		0.0		1.6	      0.5	    1.2 	  1.9
Client Time (usec) Round Trip Time				      2,384,349        3,608.5	       32.3	    1,804.2	    113.0	1,724.4       1,884.1
Client Time (usec) Round Trip Time Variance			      3,123,739        4,727.4	       42.3	    2,363.7	    997.7	1,658.2       3,069.2
Client Total Bytes Acked					      8,108,343       12,271.2	      109.8	    6,135.6	    232.6	5,971.2       6,300.1
Client Total Bytes Received					      3,137,005        4,747.6	       42.5	    2,373.8	     86.4	2,312.7       2,434.9
Client Total Number of Retransmitted Packets				     33 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
Commit SCN cached							    392 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
DB time 							     30,780,845       46,584.0	      416.8	   23,292.0	    894.6      22,659.5      23,924.6
DBWR checkpoint buffers written 					451,034 	 682.6		6.1	      341.3	     27.0	  322.2 	360.4
DBWR checkpoints							    426 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
DBWR fusion writes							    426 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
DBWR object drop buffers written					     95 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1
DBWR transaction table writes						  1,120 	   1.7		0.0		0.8	      0.0	    0.8 	  0.9
DBWR undo block writes							206,776 	 312.9		2.8	      156.5	     22.5	  140.6 	172.4
DFO trees parallelized							     66 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
Effective IO time							  2,771 	   4.2		0.0		4.2	      N/A	    4.2 	  4.2
HSC Heap Segment Block Changes					      4,602,783        6,965.9	       62.3	    3,482.9	    484.4	3,140.4       3,825.4
Heap Segment Array Inserts						    382 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
Heap Segment Array Updates						     19 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
KTFB alloc req								    978 	   1.5		0.0		0.7	      0.1	    0.6 	  0.8
KTFB alloc space (block)					  1,008,795,648    1,526,712.2	   13,659.0	  763,356.1	156,006.3     653,043.0     873,669.2
KTFB alloc time (ms)						     21,361,035       32,328.3	      289.2	   16,164.2	  7,160.6      11,100.8      21,227.5
KTFB apply req								  1,091 	   1.7		0.0		0.8	      0.3	    0.6 	  1.0
KTFB apply time (ms)							 54,848 	  83.0		0.7	       41.5	      7.4	   36.3 	 46.7
KTFB free req								    146 	   0.2		0.0		0.1	      0.1	    0.0 	  0.2
KTFB free space (block) 						  3,328 	   5.0		0.0		2.5	      1.7	    1.3 	  3.8

System Statistics (Global)	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
KTFB free time (ms)							  1,461 	   2.2		0.0		1.1	      0.0	    1.1 	  1.1
PX local messages recv'd						  1,008 	   1.5		0.0		0.8	      0.7	    0.3 	  1.3
PX local messages sent							  1,021 	   1.5		0.0		0.8	      0.7	    0.3 	  1.3
PX remote messages recv'd						  1,000 	   1.5		0.0		0.8	      0.1	    0.7 	  0.8
PX remote messages sent 						  1,022 	   1.5		0.0		0.8	      0.1	    0.7 	  0.9
Parallel operations not downgraded					     95 	   0.1		0.0		0.1	      0.1	    0.0 	  0.1
Requests to/from client 						  1,677 	   2.5		0.0		1.3	      0.1	    1.2 	  1.3
SMON posted for undo segment shrink					     32 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
SQL*Net roundtrips to/from client					  1,165 	   1.8		0.0		0.9	      0.1	    0.8 	  1.0
active txn count during cleanout					    719 	   1.1		0.0		0.5	      0.1	    0.4 	  0.6
application wait time							  4,001 	   6.1		0.1		3.0	      0.1	    2.9 	  3.1
background timeouts							 12,770 	  19.3		0.2		9.7	      0.0	    9.6 	  9.7
blocks cleaned out using minact 					422,536 	 639.5		5.7	      319.7	     73.2	  268.0 	371.5
branch node splits							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
buffer is not pinned count					     71,624,772      108,397.2	      969.8	   54,198.6	  6,956.7      49,279.5      59,117.7
buffer is pinned count						     30,471,961       46,116.4	      412.6	   23,058.2	  3,390.7      20,660.6      25,455.8
bytes received via SQL*Net from client					918,330        1,389.8	       12.4	      694.9	    420.7	  397.4 	992.4
bytes sent via SQL*Net to client					295,572 	 447.3		4.0	      223.7	     12.6	  214.7 	232.6
calls to get snapshot scn: kcmgss					646,180 	 977.9		8.7	      489.0	     30.9	  467.1 	510.8
calls to kcmgas 							124,591 	 188.6		1.7	       94.3	      3.6	   91.7 	 96.9
calls to kcmgcs 							 14,244 	  21.6		0.2	       10.8	      1.0	   10.1 	 11.5
cell physical IO interconnect bytes				311,583,538,176  471,551,692.8	4,218,797.9   2.3577585E+08  30,689,470.8 2.1407511E+08 2.5747658E+08
change write time							 15,355 	  23.2		0.2	       11.6	      0.8	   11.1 	 12.2
cleanout - number of ktugct calls					 40,244 	  60.9		0.5	       30.5	      2.2	   28.9 	 32.0
cleanouts and rollbacks - consistent read gets				     13 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
cleanouts only - consistent read gets					    541 	   0.8		0.0		0.4	      0.0	    0.4 	  0.4
cluster key scan block gets						  8,305 	  12.6		0.1		6.3	      5.1	    2.7 	  9.9
cluster key scans							  6,244 	   9.4		0.1		4.7	      3.7	    2.1 	  7.3
cluster wait time						     25,965,343       39,296.2	      351.6	   19,648.1	    959.3      18,969.8      20,326.4
commit batch/immediate performed					     47 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
commit batch/immediate requested					     47 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
commit cleanout failures: block lost					      6 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit cleanout failures: buffer being written				    278 	   0.4		0.0		0.2	      0.1	    0.1 	  0.3
commit cleanout failures: callback failure				     89 	   0.1		0.0		0.1	      0.1	    0.0 	  0.1
commit cleanout failures: cannot pin					      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
commit cleanouts						      4,611,032        6,978.4	       62.4	    3,489.2	    487.6	3,144.4       3,833.9
commit cleanouts successfully completed 			      4,610,658        6,977.8	       62.4	    3,488.9	    487.4	3,144.3       3,833.5
commit immediate performed						     47 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
commit immediate requested						     47 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
commit txn count during cleanout					  1,036 	   1.6		0.0		0.8	      0.1	    0.7 	  0.9
concurrency wait time							  8,732 	  13.2		0.1		6.6	      7.3	    1.5 	 11.8
consistent changes							 55,769 	  84.4		0.8	       42.2	      5.9	   38.1 	 46.3
consistent gets 						     27,240,576       41,226.0	      368.8	   20,613.0	  2,625.9      18,756.2      22,469.8
consistent gets examination						611,251 	 925.1		8.3	      462.5	     26.0	  444.2 	480.9
consistent gets examination (fastpath)					610,532 	 924.0		8.3	      462.0	     26.0	  443.6 	480.4
consistent gets from cache					     27,240,571       41,226.0	      368.8	   20,613.0	  2,625.9      18,756.2      22,469.8
consistent gets pin						     26,629,320       40,300.9	      360.6	   20,150.5	  2,599.9      18,312.0      21,988.9
consistent gets pin (fastpath)					     25,309,990       38,304.2	      342.7	   19,152.1	  2,475.8      17,401.4      20,902.8
cursor authentications							    544 	   0.8		0.0		0.4	      0.3	    0.2 	  0.6
cursor reload failures							    631 	   1.0		0.0		0.5	      0.7	    0.0 	  1.0
data blocks consistent reads - undo records applied			    108 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
db block changes						      9,626,692       14,569.1	      130.3	    7,284.5	  1,011.3	6,569.5       7,999.6
db block gets							      5,260,987        7,962.0	       71.2	    3,981.0	    533.5	3,603.8       4,358.2
db block gets direct							  2,849 	   4.3		0.0		2.2	      0.9	    1.5 	  2.8
db block gets from cache					      5,258,138        7,957.7	       71.2	    3,978.8	    534.4	3,601.0       4,356.7
db block gets from cache (fastpath)					528,695 	 800.1		7.2	      400.1	     44.6	  368.5 	431.6
deferred (CURRENT) block cleanout applications				439,376 	 665.0		5.9	      332.5	     80.1	  275.8 	389.1
dirty buffers inspected 					      3,918,961        5,931.0	       53.1	    2,965.5	    422.4	2,666.8       3,264.1
enqueue conversions							  2,451 	   3.7		0.0		1.9	      0.1	    1.8 	  2.0
enqueue releases							181,360 	 274.5		2.5	      137.2	     10.4	  129.9 	144.6

System Statistics (Global)	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
enqueue requests							180,418 	 273.0		2.4	      136.5	     10.2	  129.3 	143.7
enqueue timeouts							     30 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
enqueue waits								  1,573 	   2.4		0.0		1.2	      0.2	    1.1 	  1.3
exchange deadlocks							      9 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
execute count								524,185 	 793.3		7.1	      396.7	     36.6	  370.8 	422.5
file io service time						    909,723,791    1,376,776.9	   12,317.5	  688,388.5	137,948.7     590,844.0     785,932.9
file io wait time					      1,754,601,530,554 2.65539479E+09 2.375706E+07   1.3276974E+09 6.7383832E+08 8.5122174E+08 1.8041730E+09
free buffer inspected						     28,301,566       42,831.7	      383.2	   21,415.8	  2,784.5      19,446.9      23,384.8
free buffer requested						     27,638,891       41,828.8	      374.2	   20,914.4	  2,722.0      18,989.6      22,839.2
gc blocks compressed							100,556 	 152.2		1.4	       76.1	      0.3	   75.9 	 76.3
gc blocks lost								 15,150 	  22.9		0.2	       11.5	      7.2	    6.3 	 16.6
gc cleanout saved							      6 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc cr block build time							    470 	   0.7		0.0		0.4	      0.0	    0.3 	  0.4
gc cr block flush time							  1,165 	   1.8		0.0		0.9	      1.0	    0.2 	  1.6
gc cr block receive time						259,258 	 392.4		3.5	      196.2	     88.1	  133.9 	258.5
gc cr blocks built							 59,335 	  89.8		0.8	       44.9	      8.1	   39.2 	 50.6
gc cr blocks flushed							    198 	   0.3		0.0		0.1	      0.2	    0.0 	  0.3
gc cr blocks received							 51,615 	  78.1		0.7	       39.1	      2.1	   37.6 	 40.5
gc cr blocks served							 62,434 	  94.5		0.8	       47.2	      4.9	   43.8 	 50.7
gc cr multiblock grant time					     99,994,074      151,331.6	    1,353.9	   75,665.8	  6,610.5      70,991.5      80,340.1
gc cr multiblock grants received				     22,381,768       33,872.7	      303.0	   16,936.3	  2,166.2      15,404.6      18,468.0
gc current block flush time						    320 	   0.5		0.0		0.2	      0.0	    0.2 	  0.3
gc current block pin time						      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gc current block receive time						 87,645 	 132.6		1.2	       66.3	     38.6	   39.0 	 93.6
gc current blocks flushed						     48 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
gc current blocks pinned						      5 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gc current blocks received						 40,557 	  61.4		0.5	       30.7	      7.2	   25.6 	 35.8
gc current blocks served						 40,802 	  61.8		0.6	       30.9	      5.9	   26.7 	 35.1
gc force cr read cr							     10 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc kbytes saved 							419,770 	 635.3		5.7	      317.6	     12.9	  308.5 	326.8
gc kbytes sent								406,118 	 614.6		5.5	      307.3	     20.7	  292.6 	322.0
gc local grants 						     14,012,996       21,207.3	      189.7	   10,603.7	  1,386.3	9,623.4      11,583.9
gc merge pi fg								    464 	   0.7		0.0		0.4	      0.0	    0.3 	  0.4
gc no change made							    913 	   1.4		0.0		0.7	      0.9	    0.1 	  1.3
gc reader bypass grants 						  2,553 	   3.9		0.0		1.9	      1.4	    1.0 	  2.9
gc reader bypass waits							    100 	   0.2		0.0		0.1	      0.0	    0.0 	  0.1
gc remote grants						     13,860,112       20,975.9	      187.7	   10,488.0	  1,363.2	9,524.0      11,451.9
gc status messages received						 43,321 	  65.6		0.6	       32.8	     21.4	   17.6 	 47.9
gc status messages sent 						 46,234 	  70.0		0.6	       35.0	     23.4	   18.4 	 51.5
gcs affinity lock grants						167,936 	 254.2		2.3	      127.1	     30.2	  105.7 	148.4
gcs data block access records					     27,474,214       41,579.6	      372.0	   20,789.8	  2,658.8      18,909.7      22,669.9
gcs messages sent						     43,807,570       66,298.7	      593.1	   33,149.3	  1,700.4      31,947.0      34,351.7
ges messages sent							 33,071 	  50.1		0.4	       25.0	     10.2	   17.8 	 32.3
global enqueue get time 						 72,194 	 109.3		1.0	       54.6	      5.2	   50.9 	 58.3
global enqueue gets sync						788,920        1,194.0	       10.7	      597.0	    644.9	  141.0       1,053.0
global enqueue releases 						794,820        1,202.9	       10.8	      601.5	    644.9	  145.4       1,057.5
heap block compress							  1,063 	   1.6		0.0		0.8	      0.3	    0.6 	  1.0
hot buffers moved to head of LRU				      2,155,344        3,261.9	       29.2	    1,631.0	    259.0	1,447.8       1,814.1
immediate (CR) block cleanout applications				    554 	   0.8		0.0		0.4	      0.0	    0.4 	  0.4
immediate (CURRENT) block cleanout applications 			  1,148 	   1.7		0.0		0.9	      0.4	    0.6 	  1.1
in call idle wait time						     14,986,784       22,681.1	      202.9	   11,340.6	     23.0      11,324.3      11,356.8
index crx upgrade (positioned)						     65 	   0.1		0.0		0.1	      N/A	    0.1 	  0.1
index fast full scans (full)						     16 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
index fetch by key							 41,412 	  62.7		0.6	       31.3	      8.0	   25.7 	 37.0
index range scans							528,809 	 800.3		7.2	      400.2	     70.5	  350.3 	450.0
index reclamation/extension switch					      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
leaf node 90-10 splits							     83 	   0.1		0.0		0.1	      0.1	    0.0 	  0.1
leaf node splits							    391 	   0.6		0.0		0.3	      0.1	    0.2 	  0.3
lob reads								  1,608 	   2.4		0.0		1.2	      0.9	    0.6 	  1.9
lob writes								 14,720 	  22.3		0.2	       11.1	      1.2	   10.3 	 12.0

System Statistics (Global)	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
lob writes unaligned							 14,719 	  22.3		0.2	       11.1	      1.2	   10.3 	 12.0
logical read bytes from cache					266,229,424,128  402,912,624.0	3,604,709.5   2.0145631E+08  25,889,160.7 1.8314991E+08 2.1976271E+08
logons cumulative							    204 	   0.3		0.0		0.2	      0.0	    0.1 	  0.2
max cf enq hold time							  1,960 	   3.0		0.0		1.5	      1.5	    0.4 	  2.5
messages received							535,864 	 811.0		7.3	      405.5	     23.1	  389.2 	421.8
messages sent								535,864 	 811.0		7.3	      405.5	     23.1	  389.2 	421.8
min active SCN optimization applied on CR				  1,074 	   1.6		0.0		0.8	      1.0	    0.1 	  1.5
no work - consistent read gets					     26,486,336       40,084.5	      358.6	   20,042.3	  2,635.1      18,178.9      21,905.6
non-idle wait count						     13,334,430       20,180.4	      180.5	   10,090.2	  1,216.8	9,229.8      10,950.6
non-idle wait time						     28,979,866       43,858.4	      392.4	   21,929.2	    733.4      21,410.6      22,447.8
opened cursors cumulative						598,842 	 906.3		8.1	      453.1	     43.6	  422.3 	484.0
parse count (describe)							     26 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
parse count (failures)							      5 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
parse count (hard)							  2,276 	   3.4		0.0		1.7	      1.7	    0.5 	  2.9
parse count (total)							 21,902 	  33.1		0.3	       16.6	      1.0	   15.9 	 17.3
parse time cpu								    362 	   0.5		0.0		0.3	      0.2	    0.2 	  0.4
parse time elapsed							    855 	   1.3		0.0		0.6	      0.0	    0.6 	  0.7
physical read IO requests					     27,382,135       41,440.2	      370.8	   20,720.1	  2,656.3      18,841.9      22,598.4
physical read bytes						224,323,690,496  339,492,330.3	3,037,311.7   1.6974617E+08  21,752,463.3 1.5436485E+08 1.8512748E+08
physical read total IO requests 				     27,393,221       41,457.0	      370.9	   20,728.5	  2,656.4      18,850.2      22,606.8
physical read total bytes					227,592,718,336  344,439,705.1	3,081,573.9   1.7221985E+08  21,767,138.7 1.5682816E+08 1.8761154E+08
physical read total multi block requests				  3,005 	   4.5		0.0		2.3	      0.0	    2.3 	  2.3
physical reads							     27,383,265       41,441.9	      370.8	   20,721.0	  2,655.3      18,843.4      22,598.6
physical reads cache						     27,383,256       41,441.9	      370.8	   20,721.0	  2,655.3      18,843.4      22,598.6
physical reads cache prefetch					     21,981,726       33,267.2	      297.6	   16,633.6	  2,126.9      15,129.7      18,137.6
physical reads direct							      8 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
physical reads direct (lob)						      8 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
physical write IO requests					      4,341,711        6,570.8	       58.8	    3,285.4	    455.6	2,963.2       3,607.6
physical write bytes						 38,049,914,880   57,584,868.2	  515,190.6    28,792,434.1   4,046,489.9  25,931,133.7  31,653,734.6
physical write total IO requests				      4,425,130        6,697.0	       59.9	    3,348.5	    457.7	3,024.9       3,672.1
physical write total bytes					 41,984,936,448   63,540,143.3	  568,470.2    31,770,071.6   4,460,355.5  28,616,124.0  34,924,019.3
physical write total multi block requests				 15,714 	  23.8		0.2	       11.9	      2.1	   10.4 	 13.4
physical writes 						      4,644,765        7,029.4	       62.9	    3,514.7	    494.0	3,165.4       3,864.0
physical writes direct							  3,138 	   4.7		0.0		2.4	      1.0	    1.7 	  3.1
physical writes direct (lob)						    289 	   0.4		0.0		0.2	      0.1	    0.2 	  0.3
physical writes direct temporary tablespace				  1,191 	   1.8		0.0		0.9	      0.9	    0.3 	  1.5
physical writes from cache					      4,641,627        7,024.7	       62.8	    3,512.3	    494.9	3,162.4       3,862.3
physical writes non checkpoint					      4,570,158        6,916.5	       61.9	    3,458.2	    503.0	3,102.6       3,813.9
pinned buffers inspected						 41,387 	  62.6		0.6	       31.3	      6.0	   27.1 	 35.6
process last non-idle time						  1,309 	   2.0		0.0		1.0	      0.0	    1.0 	  1.0
recursive calls 							852,029        1,289.5	       11.5	      644.7	     65.7	  598.3 	691.2
recursive cpu usage							747,450        1,131.2	       10.1	      565.6	     24.0	  548.6 	582.6
redo KB read							      1,806,336        2,733.7	       24.5	    1,366.9	     22.0	1,351.3       1,382.4
redo blocks checksummed by FG (exclusive)			      2,767,960        4,189.0	       37.5	    2,094.5	    310.9	1,874.7       2,314.4
redo blocks written						      7,642,503       11,566.2	      103.5	    5,783.1	    807.6	5,212.1       6,354.1
redo blocks written (group 0)					      4,101,744        6,207.6	       55.5	    3,103.8	    294.8	2,895.4       3,312.3
redo blocks written (group 1)					      2,074,398        3,139.4	       28.1	    1,569.7	    460.8	1,243.9       1,895.6
redo entries							      5,183,351        7,844.5	       70.2	    3,922.3	    524.0	3,551.7       4,292.8
redo size							  3,767,838,020    5,702,258.7	   51,016.0	2,851,129.4	399,344.9   2,568,749.9   3,133,508.8
redo size for direct writes						  7,736 	  11.7		0.1		5.9	      0.4	    5.6 	  6.1
redo subscn max counts							    787 	   1.2		0.0		0.6	      0.1	    0.5 	  0.7
redo synch time 							    771 	   1.2		0.0		0.6	      0.1	    0.5 	  0.6
redo synch time (usec)						      7,358,800       11,136.9	       99.6	    5,568.5	    919.7	4,918.1       6,218.8
redo synch time overhead (usec) 					 67,544 	 102.2		0.9	       51.1	     15.7	   40.0 	 62.2
redo synch time overhead count (  2ms)					    291 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
redo synch time overhead count (  8ms)					      4 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
redo synch writes							    516 	   0.8		0.0		0.4	      0.0	    0.4 	  0.4
redo wastage							     19,879,716       30,086.1	      269.2	   15,043.1	    490.8      14,696.0      15,390.1
redo write active strands						 81,934 	 124.0		1.1	       62.0	      1.9	   60.6 	 63.4
redo write broadcast ack count						     62 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0

System Statistics (Global)	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
redo write broadcast ack time						742,100        1,123.1	       10.0	      561.5	     61.6	  518.0 	605.1
redo write finish time						  1,202,367,262    1,819,679.7	   16,279.9	  909,839.9	126,628.4     820,300.0     999,379.7
redo write gather time						     74,466,598      112,699.3	    1,008.3	   56,349.7	 18,131.3      43,528.9      69,170.4
redo write info find							    296 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
redo write info find fail						      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
redo write schedule time					     75,278,797      113,928.5	    1,019.3	   56,964.3	 18,217.5      44,082.5      69,846.0
redo write size count (   4KB)						  2,456 	   3.7		0.0		1.9	      1.2	    1.0 	  2.7
redo write size count (   8KB)						  1,545 	   2.3		0.0		1.2	      0.2	    1.0 	  1.3
redo write size count (  16KB)						  3,328 	   5.0		0.0		2.5	      0.3	    2.3 	  2.7
redo write size count (  32KB)						  6,330 	   9.6		0.1		4.8	      0.1	    4.7 	  4.8
redo write size count ( 128KB)						 21,453 	  32.5		0.3	       16.2	      1.7	   15.0 	 17.4
redo write size count ( 256KB)						  5,489 	   8.3		0.1		4.2	      0.0	    4.1 	  4.2
redo write size count ( 512KB)						  1,102 	   1.7		0.0		0.8	      0.2	    0.7 	  1.0
redo write size count (1024KB)						    488 	   0.7		0.0		0.4	      0.1	    0.3 	  0.5
redo write size count (inf)						    299 	   0.5		0.0		0.2	      0.1	    0.2 	  0.3
redo write time 							120,439 	 182.3		1.6	       91.1	     12.7	   82.2 	100.1
redo write time (usec)						  1,204,379,042    1,822,724.4	   16,307.1	  911,362.2	127,020.4     821,545.2   1,001,179.2
redo write total time						  1,281,194,767    1,938,979.0	   17,347.2	  969,489.5	146,832.6     865,663.2   1,073,315.8
redo write worker delay (usec)					     69,403,659      105,037.0	      939.7	   52,518.5	 17,883.0      39,873.3      65,163.7
redo write worker delay count						 37,601 	  56.9		0.5	       28.5	      4.8	   25.1 	 31.8
redo writes								 42,488 	  64.3		0.6	       32.2	      0.4	   31.9 	 32.4
redo writes (group 0)							 21,434 	  32.4		0.3	       16.2	      2.3	   14.6 	 17.9
redo writes (group 1)							 16,167 	  24.5		0.2	       12.2	      2.4	   10.5 	 14.0
redo writes adaptive all						 42,488 	  64.3		0.6	       32.2	      0.4	   31.9 	 32.4
redo writes adaptive worker						 37,601 	  56.9		0.5	       28.5	      4.8	   25.1 	 31.8
rollback changes - undo records applied 				      4 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
rollbacks only - consistent read gets					     59 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
root node splits							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
rows fetched via callback						 11,063 	  16.7		0.1		8.4	      3.4	    6.0 	 10.8
securefile allocation bytes					      2,367,488        3,583.0	       32.1	    1,791.5	    412.1	1,500.1       2,082.9
securefile allocation chunks						    108 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
securefile bytes non-transformed				      1,999,934        3,026.7	       27.1	    1,513.4	    351.9	1,264.5       1,762.2
securefile direct read bytes						 65,536 	  99.2		0.9	       99.2	      N/A	   99.2 	 99.2
securefile direct read ops						      8 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
securefile direct write bytes					      2,367,488        3,583.0	       32.1	    1,791.5	    412.1	1,500.1       2,082.9
securefile direct write ops						    108 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
securefile number of non-transformed flushes				    108 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
segment chunks allocation from dispenser				    108 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
segment dispenser allocations						    107 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
segment prealloc ops							      4 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
segment prealloc time (ms)						  1,811 	   2.7		0.0		1.4	      0.7	    0.9 	  1.8
session connect time							    712 	   1.1		0.0		1.1	      N/A	    1.1 	  1.1
session cursor cache hits						590,835 	 894.2		8.0	      447.1	     47.0	  413.8 	480.3
session logical reads						     32,501,639       49,188.1	      440.1	   24,594.1	  3,159.2      22,360.1      26,828.0
shared hash latch upgrades - no wait				      4,403,516        6,664.3	       59.6	    3,332.2	    317.8	3,107.4       3,556.9
shared hash latch upgrades - wait					    235 	   0.4		0.0		0.2	      0.0	    0.1 	  0.2
shared io pool buffer get success					    115 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
sorts (memory)								  7,087 	  10.7		0.1		5.4	      3.9	    2.6 	  8.1
sorts (rows)							      1,405,245        2,126.8	       19.0	    1,063.4	  1,131.6	  263.2       1,863.5
sql area evicted							  5,247 	   7.9		0.1		4.0	      0.2	    3.8 	  4.1
sql area purged 							     64 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
summed dirty queue length					     46,615,478       70,547.8	      631.2	   35,273.9	 10,080.4      28,145.9      42,401.8
switch current caused by our pin					    829 	   1.3		0.0		0.6	      0.8	    0.1 	  1.2
switch current to new buffer						    833 	   1.3		0.0		0.6	      0.8	    0.1 	  1.2
table fetch by rowid						     48,484,827       73,377.1	      656.5	   36,688.6	  4,904.7      33,220.4      40,156.7
table fetch continued row						    639 	   1.0		0.0		0.5	      0.4	    0.2 	  0.8
table scan blocks gotten						 28,323 	  42.9		0.4	       21.4	      2.2	   19.9 	 23.0
table scan disk non-IMC rows gotten				      1,108,708        1,678.0	       15.0	      839.0	    477.5	  501.3       1,176.6
table scan rows gotten						      1,108,708        1,678.0	       15.0	      839.0	    477.5	  501.3       1,176.6
table scans (short tables)						  2,462 	   3.7		0.0		1.9	      1.2	    1.0 	  2.7

System Statistics (Global)	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
temp space allocated (bytes)					      2,097,152        3,174.0	       28.4	    3,174.0	      N/A	3,174.0       3,174.0
total cf enq hold time							  9,049 	  13.7		0.1		6.8	      2.4	    5.1 	  8.6
total number of cf enq holders						    509 	   0.8		0.0		0.4	      0.0	    0.4 	  0.4
total number of times SMON posted					     32 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
transaction rollbacks							     34 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
transaction tables consistent reads - undo records applied		 34,992 	  53.0		0.5	       26.5	     10.1	   19.3 	 33.6
undo change vector size 					  1,575,452,412    2,384,295.0	   21,331.4	1,192,147.5	167,291.2   1,073,854.7   1,310,440.3
user I/O wait time						      2,432,974        3,682.1	       32.9	    1,841.0	    239.1	1,672.0       2,010.1
user calls								  4,198 	   6.4		0.1		3.2	      0.1	    3.1 	  3.2
user commits								 73,856 	 111.8		1.0	       55.9	      7.7	   50.5 	 61.3
user logons cumulative							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
user logouts cumulative 						    513 	   0.8		0.0		0.4	      0.0	    0.4 	  0.4
workarea executions - optimal						  4,404 	   6.7		0.1		3.3	      1.6	    2.2 	  4.5
write clones created in foreground					    287 	   0.4		0.0		0.2	      0.1	    0.1 	  0.3
			  --------------------------------------------------------------------------------------------------------------------


Global Messaging Statistics (Global)   DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
Global Enqueue S-optim Broadcasts sent					    260 	   0.4		0.0		0.2	      0.1	    0.1 	  0.2
Global Enqueue S-optim S-lock gets					685,841        1,038.0		9.3	      519.0	    636.2	   69.2 	968.8
Global Enqueue S-optim anti-locks crea					    126 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
acks for commit broadcast(actual)					  4,697 	   7.1		0.1		3.6	      0.3	    3.3 	  3.8
acks for commit broadcast(logical)					 25,578 	  38.7		0.3	       19.4	      1.2	   18.5 	 20.2
broadcast msgs on commit(actual)					 25,718 	  38.9		0.3	       19.5	      1.5	   18.4 	 20.5
broadcast msgs on commit(logical)					 42,437 	  64.2		0.6	       32.1	      0.4	   31.8 	 32.4
broadcast msgs on commit(wasted)					 19,195 	  29.0		0.3	       14.5	      0.5	   14.2 	 14.9
flow control messages received						     45 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
flow control messages sent						     45 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
gcs assume no cvt							 20,661 	  31.3		0.3	       15.6	      2.9	   13.6 	 17.7
gcs ast to fg								 46,185 	  69.9		0.6	       34.9	     23.4	   18.4 	 51.5
gcs bidless ast to lms							  2,703 	   4.1		0.0		2.0	      1.3	    1.1 	  2.9
gcs blocked converts							 44,570 	  67.5		0.6	       33.7	      0.3	   33.5 	 33.9
gcs blocked cr converts 						 62,255 	  94.2		0.8	       47.1	      2.0	   45.7 	 48.5
gcs compatible basts							     26 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gcs compatible cr basts (global)					    229 	   0.3		0.0		0.2	      0.0	    0.2 	  0.2
gcs compatible cr basts (local) 					  2,486 	   3.8		0.0		1.9	      0.2	    1.7 	  2.0
gcs cr requests to slave						      5 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs dbwr flush pi msgs						      2,213,817        3,350.4	       30.0	    1,675.2	    235.6	1,508.6       1,841.8
gcs dbwr write request msgs						    425 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
gcs force cr block only 						      5 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gcs grant ast								 48,888 	  74.0		0.7	       37.0	     24.7	   19.5 	 54.4
gcs immediate (compatible) converts					353,526 	 535.0		4.8	      267.5	      1.9	  266.1 	268.9
gcs immediate (null) converts					      4,077,266        6,170.6	       55.2	    3,085.3	     28.1	3,065.4       3,105.1
gcs immediate cr (compatible) converts					193,463 	 292.8		2.6	      146.4	      5.0	  142.9 	149.9
gcs immediate cr (null) converts				     23,012,595       34,827.5	      311.6	   17,413.7	    126.8      17,324.1      17,503.4
gcs lms write request msgs						    233 	   0.4		0.0		0.2	      0.1	    0.1 	  0.2
gcs msgs process time(ms)						991,481        1,500.5	       13.4	      750.3	     71.7	  699.6 	800.9
gcs msgs received						     43,690,088       66,121.0	      591.6	   33,060.5	  1,235.2      32,187.1      33,934.0
gcs new served by master						    669 	   1.0		0.0		0.5	      0.2	    0.3 	  0.7
gcs out-of-order msgs							 17,863 	  27.0		0.2	       13.5	      8.1	    7.8 	 19.2
gcs pings refused							 19,742 	  29.9		0.3	       14.9	      2.4	   13.2 	 16.6
gcs queued converts							      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gcs reader bypass grant immediate					  2,545 	   3.9		0.0		1.9	      1.4	    1.0 	  2.9
gcs side channel msgs actual						  7,280 	  11.0		0.1		5.5	      0.4	    5.3 	  5.8
gcs side channel msgs logical						150,210 	 227.3		2.0	      113.7	     19.7	   99.7 	127.6
gcs stale cr								      5 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs undo cr								    104 	   0.2		0.0		0.1	      0.1	    0.0 	  0.2
gcs write notification msgs						      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs writes refused							      4 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ges msgs process time(ms)						  1,071 	   1.6		0.0		0.8	      0.0	    0.8 	  0.8
ges msgs received							 32,996 	  49.9		0.4	       25.0	     10.8	   17.3 	 32.6
implicit batch messages received					407,435 	 616.6		5.5	      308.3	      2.6	  306.5 	310.2
implicit batch messages sent						407,341 	 616.5		5.5	      308.2	      3.1	  306.0 	310.4
messages flow controlled						 13,472 	  20.4		0.2	       10.2	      9.9	    3.2 	 17.2
messages queue sent actual					      2,609,024        3,948.5	       35.3	    1,974.3	     86.1	1,913.4       2,035.1
messages queue sent logical					      4,031,635        6,101.5	       54.6	    3,050.8	     60.7	3,007.8       3,093.7
messages received actual					      6,533,030        9,887.2	       88.5	    4,943.6	    414.4	4,650.6       5,236.6
messages received logical					     43,723,084       66,171.0	      592.0	   33,085.5	  1,224.4      32,219.7      33,951.3
messages sent directly						      2,731,576        4,134.0	       37.0	    2,067.0	    281.3	1,868.1       2,265.9
messages sent indirectly					     15,955,568       24,147.2	      216.0	   12,073.6	  1,592.5      10,947.6      13,199.7
messages sent not implicit batched					143,153 	 216.6		1.9	      108.3	      8.1	  102.6 	114.0
messages sent pbatched						     38,706,098       58,578.1	      524.1	   29,289.0	  1,234.8      28,415.9      30,162.2
msgs received kernel queue time (ns)			      7,457,947,991,751 1.12870404E+10 1.009796E+08   5.6435202E+09 2.2635926E+09 4.0429186E+09 7.2441219E+09
msgs received queue time (ms)					      4,565,301        6,909.2	       61.8	    3,454.6	  1,615.4	2,312.3       4,596.9
msgs received queued						     43,723,081       66,171.0	      592.0	   33,085.5	  1,224.4      32,219.7      33,951.3
msgs sent queue time (ms)					     18,329,803       27,740.2	      248.2	   13,870.1	  5,727.7	9,820.0      17,920.2
msgs sent queue time on ksxp (ms)				    299,102,950      452,659.3	    4,049.8	  226,329.6	111,727.9     147,326.1     305,333.2
msgs sent queued						      4,662,810        7,056.7	       63.1	    3,528.4	    284.8	3,326.9       3,729.8

Global Messaging Statistics (Global)   DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
msgs sent queued on ksxp					      6,547,134        9,908.5	       88.6	    4,954.2	    489.8	4,607.9       5,300.6
process batch messages received 				      3,345,435        5,063.0	       45.3	    2,531.5	    162.0	2,416.9       2,646.1
process batch messages sent					      3,597,986        5,445.2	       48.7	    2,722.6	    190.4	2,588.0       2,857.2
receiver cycle time						      1,676,346        2,537.0	       22.7	    1,268.5	     81.6	1,210.8       1,326.2
receiver loop count						      3,450,554        5,222.1	       46.7	    2,611.0	    222.8	2,453.5       2,768.6
			  --------------------------------------------------------------------------------------------------------------------


System Statistics (Absolute Values)    DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

	    Sessions		   Open Cursors 	    Session Cached Cursors
       -----------------   ---------------------------	 ---------------------------
  I#	  Begin      End	    Begin	   End		  Begin 	 End
----   -------- --------   -------------- ------------	 -------------- ------------
   1	    377      126	    1,304	   169		331,622      332,176
   2	    389      126	    1,352	   159		330,142      332,392
 ~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~	 ~~~~~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	    766      252	    2,656	   328		661,764      664,568
 Avg	    383      126	    1,328	   164		330,882      332,284
 Std	      8        0	       34	     7		  1,047 	 153
			  --------------------------------------------------------------------------------------------------------------------

IO Profile (Global)		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

Statistic			  Read+Write/s	      Reads/s	    Writes/s
------------------------------ --------------- -------------- --------------
Total Requests			     48,152.42	    41,455.64	    6,696.79
Database Requests		     48,009.40	    41,438.86	    6,570.54
Optimized Requests			  0.00		 0.00		0.00
Redo Requests				 64.30		  N/A	       64.30
Total (MB)				389.07	       328.47	       60.59
Database (MB)				378.67	       323.75	       54.92
Optimized Total (MB)			  0.00		 0.00		0.00
Redo (MB)				  5.44		  N/A		5.44
Database (blocks)		     48,469.74	    41,440.57	    7,029.17
Via Buffer Cache (blocks)	     48,464.98	    41,440.56	    7,024.42
Direct (blocks) 			  4.76		 0.01		4.75
			  --------------------------------------------------------------------------------------------------------------------

IOStat by Function		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

					   Requests						 MB
		       ------------------------------------------------   ------------------------------------------------
															      Waits:	Avg
  I# Function Name	      Total	  IOs/s     Reads/s    Writes/s 	 Total	   IO MB/s   Read MB/s	Write MB/s     Count	Time
---- ---------------   ------------ ----------- ----------- -----------   ------------ ----------- ----------- -----------   ------- --------
   * Total		 31,079,877   47,034.85   40,345.70    6,689.15        251,229	    380.20	319.76	     60.43	5.3M   4.67ms
     Buffer Cache Re	 26,648,847   40,329.13   40,329.13	   0.00        208,219	    315.11	315.11	      0.00	5.3M   4.49ms
     DBWR		  4,337,816    6,564.65        0.00    6,564.65 	36,234	     54.83	  0.00	     54.83	   0
     LGWR		     80,634	 122.03        0.00	 122.03 	 3,661	      5.54	  0.00	      5.54     41.9K  26.44ms
     Others		     12,453	  18.85       16.52	   2.32 	 3,112	      4.71	  4.66	      0.05	6808   3.31ms
     Direct Writes		101	   0.15        0.00	   0.15 	     3	      0.00	  0.00	      0.00	   0
     Direct Reads		 26	   0.04        0.04	   0.00 	     0	      0.00	  0.00	      0.00	   0

   1 Total		 17,167,924   25,981.14   22,313.99    3,667.16        138,677	    209.87	176.66	     33.21	2.9M   4.69ms
     Buffer Cache Re	 14,739,143   22,305.54   22,305.54	   0.00        115,162	    174.28	174.28	      0.00	2.9M   4.55ms
     DBWR		  2,380,752    3,602.92        0.00    3,602.92 	19,915	     30.14	  0.00	     30.14	   0
     LGWR		     41,590	  62.94        0.00	  62.94 	 2,011	      3.04	  0.00	      3.04     21.4K  23.68ms
     Others		      6,377	   9.65        8.42	   1.23 	 1,588	      2.40	  2.38	      0.03	3500   3.68ms
     Direct Writes		 44	   0.07        0.00	   0.07 	     1	      0.00	  0.00	      0.00	   0
     Direct Reads		 18	   0.03        0.03	   0.00 	     0	      0.00	  0.00	      0.00	   0

   2 Total		 13,911,953   21,053.71   18,031.71    3,022.00        112,552	    170.33	143.11	     27.22	2.4M   4.64ms
     Buffer Cache Re	 11,909,704   18,023.60   18,023.60	   0.00 	93,057	    140.83	140.83	      0.00	2.4M   4.42ms
     DBWR		  1,957,064    2,961.73        0.00    2,961.73 	16,319	     24.70	  0.00	     24.70	   0
     LGWR		     39,044	  59.09        0.00	  59.09 	 1,650	      2.50	  0.00	      2.50     20.5K  29.32ms
     Others		      6,076	   9.20        8.10	   1.09 	 1,524	      2.31	  2.28	      0.03	3308   2.92ms
     Direct Writes		 57	   0.09        0.00	   0.09 	     2	      0.00	  0.00	      0.00	   0
     Direct Reads		  8	   0.01        0.01	   0.00 	     0	      0.00	  0.00	      0.00	   0
			  --------------------------------------------------------------------------------------------------------------------

IOStat by File Type		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

					   Requests						 MB				Service Time
		       ------------------------------------------------   ------------------------------------------------   -----------------
																Small	 Large
  I# Filetype Name	      Total	  IOs/s     Reads/s    Writes/s 	 Total	   IO MB/s   Read MB/s	Write MB/s	 Read	  Read
---- ---------------   ------------ ----------- ----------- -----------   ------------ ----------- ----------- -----------   -------- --------
   * Total		 31,074,271   47,026.37   40,336.99    6,689.38        251,190	    380.14	319.70	     60.44   584.89us 1730.53m
     Data File		 30,980,976   46,885.18   40,320.11    6,565.07        244,419	    369.89	315.03	     54.86   585.03us
     Log File		     83,900	 126.97        4.94	 122.03 	 6,618	     10.02	  4.47	      5.54   261.44us 1734.04m
     Control File	      8,904	  13.47       11.57	   1.90 	   139	      0.21	  0.18	      0.03   122.12us
     Temp File			491	   0.74        0.37	   0.37 	    14	      0.02	  0.01	      0.01    21.01us	1.00ms

   1 Total		 17,163,727   25,974.79   22,307.59    3,667.20        138,646	    209.82	176.61	     33.22   595.74us 1721.36m
     Data File		 17,115,661   25,902.05   22,299.00    3,603.05        135,050	    204.38	174.23	     30.15   595.88us
     Log File		     43,265	  65.48        2.52	  62.95 	 3,520	      5.33	  2.28	      3.04   289.31us 1721.36m
     Control File	      4,579	   6.93        5.90	   1.03 	    72	      0.11	  0.09	      0.02   117.27us
     Temp File			222	   0.34        0.17	   0.17 	     4	      0.01	  0.00	      0.00     9.01us

   2 Total		 13,910,544   21,051.58   18,029.40    3,022.18        112,544	    170.32	143.09	     27.23   571.46us 1740.04m
     Data File		 13,865,315   20,983.13   18,021.11    2,962.02        109,369	    165.51	140.80	     24.71   571.61us
     Log File		     40,635	  61.50        2.41	  59.08 	 3,098	      4.69	  2.19	      2.50   231.29us 1747.25m
     Control File	      4,325	   6.55        5.68	   0.87 	    67	      0.10	  0.09	      0.01   127.17us
     Temp File			269	   0.41        0.20	   0.21 	    10	      0.02	  0.01	      0.01    31.50us	1.00ms
			  --------------------------------------------------------------------------------------------------------------------


Segment Statistics (Global)	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> % Total shows % of statistic for each segment compared to the global cluster-wide total
   (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants)
-> % Capture shows % of statistic for each segment compared to the  total captured
   by AWR for all segments during the snapshot interval
-> Captured Segments account for   15.5% of Total Logical Reads:      32,501,639
-> Captured Segments account for   16.1% of Total Physical Reads:      27,383,265
-> Captured Segments account for   16.1% of Total Physical Read Requests:      27,382,135
-> Captured Segments account for   16.1% of Total UnOptimized Read Requests:	  27,382,135
-> Captured Segments account for    0.0% of Total Optimized  Read Requests:		  1
-> Captured Segments account for    0.0% of Total Direct Physical Reads:	       8
-> Captured Segments account for   15.9% of Total Physical Writes:	 4,644,765
-> Captured Segments account for   16.5% of Total Physical Write Requests:	 4,341,711
-> Captured Segments account for   51.5% of Total Direct Physical Writes:	    3,138
-> Captured Segments account for    0.0% of Total Table Scans:		    16
-> Captured Segments account for    7.4% of Total CR Blocks Received:	       51,615
-> Captured Segments account for   11.3% of Total Current Blocks Received:	    40,557
-> Captured Segments account for    6.2% of Total CR Blocks Served:	     62,434
-> Captured Segments account for   11.2% of Total Current Blocks Served:	  40,802
-> Captured Segments account for   16.1% of Total Global Cache Remote Grants:	   13,860,112
-> When ** MISSING ** occurs, some of the object attributes may not be available

				    Tablespace Object		    Subobject  Obj.
Statistic		 Owner	    Name       Name		    Name       Type	   Obj#   Dataobj#	  Value %Total %Capture
------------------------ ---------- ---------- -------------------- ---------- ----- ---------- ---------- ------------ ------ --------
db block changes	 USER52     IOPS       CF1			       TABLE	  78287      78289	 11,584    N/A	   20.5
			 USER165    IOPS       CF1			       TABLE	  78848      78845	 11,328    N/A	   20.1
			 USER250    IOPS       CF1			       TABLE	  79275      79279	 11,248    N/A	   19.9
			 USER170    IOPS       CF1			       TABLE	  78854      78881	 11,216    N/A	   19.9
			 USER28     IOPS       CF1			       TABLE	  78167      78171	 11,104    N/A	   19.7
gc buffer busy		 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 879926_119 INDEX	  84158      84160	      2    N/A	  100.0
gc cr blocks received	 USER144    IOPS       CF1			       TABLE	  78744      78748	    452    0.9	   26.1
			 USER33     IOPS       CF1			       TABLE	  78187      78191	    426    0.8	   24.6
			 USER58     IOPS       CF1			       TABLE	  78314      78318	    331    0.6	   19.1
			 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 879926_119 TABLE	  84156      84156	    270    0.5	   15.6
			 USER7	    IOPS       CF1			       TABLE	  78058      78054	    253    0.5	   14.6
gc cr blocks served	 USER144    IOPS       CF1			       TABLE	  78744      78748	    452    0.7	   26.1
			 USER33     IOPS       CF1			       TABLE	  78187      78191	    426    0.7	   24.6
			 USER58     IOPS       CF1			       TABLE	  78314      78318	    331    0.5	   19.1
			 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 879926_119 TABLE	  84156      84156	    270    0.4	   15.6
			 USER7	    IOPS       CF1			       TABLE	  78058      78054	    253    0.4	   14.6
gc cu blocks received	 USER33     IOPS       CF1			       TABLE	  78187      78191	    501    1.2	   28.1
			 USER144    IOPS       CF1			       TABLE	  78744      78748	    415    1.0	   23.3
			 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 879926_119 TABLE	  84156      84156	    386    1.0	   21.6
			 USER7	    IOPS       CF1			       TABLE	  78058      78054	    266    0.7	   14.9
			 USER52     IOPS       CF1			       TABLE	  78287      78289	    216    0.5	   12.1
gc cu blocks served	 USER33     IOPS       CF1			       TABLE	  78187      78191	    501    1.2	   28.1
			 USER144    IOPS       CF1			       TABLE	  78744      78748	    415    1.0	   23.3
			 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 879926_119 TABLE	  84156      84156	    386    0.9	   21.6
			 USER7	    IOPS       CF1			       TABLE	  78058      78054	    266    0.7	   14.9
			 USER52     IOPS       CF1			       TABLE	  78287      78289	    216    0.5	   12.1
gc remote grants	 USER444    IOPS       CF1			       TABLE	  80246      80248	 34,157    0.2	   20.3
			 USER165    IOPS       CF1			       TABLE	  78848      78845	 34,107    0.2	   20.2
			 USER471    IOPS       CF1			       TABLE	  80377      80379	 33,811    0.2	   20.1
			 USER462    IOPS       CF1			       TABLE	  80324      80338	 33,386    0.2	   19.8
			 USER52     IOPS       CF1			       TABLE	  78287      78289	 33,167    0.2	   19.7
logical reads		 USER165    IOPS       CF1			       TABLE	  78848      78845	 79,216    0.2	   20.8
			 USER52     IOPS       CF1			       TABLE	  78287      78289	 76,048    0.2	   20.0
			 USER250    IOPS       CF1			       TABLE	  79275      79279	 75,552    0.2	   19.8
			 USER170    IOPS       CF1			       TABLE	  78854      78881	 75,328    0.2	   19.8
			 USER249    IOPS       CF1			       TABLE	  79267      79270	 74,640    0.2	   19.6
physical reads		 USER165    IOPS       CF1			       TABLE	  78848      78845	 67,579    0.2	   20.3
			 USER444    IOPS       CF1			       TABLE	  80246      80248	 67,539    0.2	   20.3
			 USER471    IOPS       CF1			       TABLE	  80377      80379	 66,652    0.2	   20.0
			 USER462    IOPS       CF1			       TABLE	  80324      80338	 65,937    0.2	   19.8
			 USER52     IOPS       CF1			       TABLE	  78287      78289	 65,449    0.2	   19.6
physical read requests	 USER165    IOPS       CF1			       TABLE	  78848      78845	 67,579    0.2	   20.3
			 USER444    IOPS       CF1			       TABLE	  80246      80248	 67,539    0.2	   20.3
			 USER471    IOPS       CF1			       TABLE	  80377      80379	 66,652    0.2	   20.0
			 USER462    IOPS       CF1			       TABLE	  80324      80338	 65,937    0.2	   19.8
			 USER52     IOPS       CF1			       TABLE	  78287      78289	 65,449    0.2	   19.6
physical writes 	 USER165    IOPS       CF1			       TABLE	  78848      78845	 11,583    N/A	   20.5
			 USER50     IOPS       CF1			       TABLE	  78277      78281	 11,454    N/A	   20.3
			 USER462    IOPS       CF1			       TABLE	  80324      80338	 11,279    N/A	   20.0
			 USER170    IOPS       CF1			       TABLE	  78854      78881	 11,134    N/A	   19.7
			 USER174    IOPS       CF1			       TABLE	  78897      78901	 11,059    N/A	   19.6
physical writes direct	 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 879926_119 TABLE	  84156      84156	  1,616    N/A	  100.0
physical write requests  USER165    IOPS       CF1			       TABLE	  78848      78845	 11,217    0.3	   20.5
			 USER50     IOPS       CF1			       TABLE	  78277      78281	 11,140    0.3	   20.3
			 USER462    IOPS       CF1			       TABLE	  80324      80338	 10,938    0.3	   20.0
			 USER170    IOPS       CF1			       TABLE	  78854      78881	 10,797    0.2	   19.7
			 USER174    IOPS       CF1			       TABLE	  78897      78901	 10,694    0.2	   19.5
			  --------------------------------------------------------------------------------------------------------------------

Library Cache Activity		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Summarized for all instances in the report
-> "Pct Misses"  should be very low

			 Get	Pct	       Pin    Pct	      Invali-	  GES Lock	GES Pin      GES Pin   GES Inval GES Invali-
Namespace	    Requests   Miss	  Requests   Miss    Reloads  dations	  Requests     Requests     Releases	Requests     dations
--------------- ------------ ------ -------------- ------ ---------- -------- ------------ ------------ ------------ ----------- -----------
ACCOUNT_STATUS		   4   25.0		 0    N/A	   0	    0		 4	      0 	   0	       0	   0
AUDIT POLICY		   2  100.0		 2  100.0	   0	    0		 2	      2 	   2	       0	   0
BODY			 850	0.7	     2,359    1.9	  36	    0	       449	  2,263        2,263	       0	   0
CLUSTER 		 275	0.7	       287    0.7	   0	    0	       287	    287 	 287	       0	   0
DBLINK			   4   25.0		 0    N/A	   0	    0		 4	      0 	   0	       0	   0
EDITION 		   6	0.0		12    0.0	   0	    0		 6	      6 	   6	       0	   0
HINTSET OBJECT		 173   10.4	       173   11.6	   0	    0	       173	    173 	 173	       0	   0
INDEX			  90	4.4		94   26.6	  21	    0		94	     94 	  94	       0	   0
OBJECT ID		  55  100.0		 0    N/A	   0	    0		 0	      0 	   0	       0	   0
QUEUE			  66	0.0		66    0.0	   0	    0		66	     66 	  66	       0	   0
SCHEMA			 652	0.0		 0    N/A	   0	    0		56	      0 	   0	       0	   0
SQL AREA	       8,773   20.3	   821,437    0.5      1,218	   66		 0	      0 	   0	       0	   0
SQL AREA BUILD	       1,986   34.1		 0    N/A	   0	    0		 0	      0 	   0	       0	   0
SQL AREA STATS		 929   99.2	       929   99.2	   0	    0		 0	      0 	   0	       0	   0
TABLE/PROCEDURE      282,810	0.1	    30,395    9.0	 831	    0	   289,227	 21,062       21,062	       0	   0
TRANSFORMATION		  66	1.5		66    1.5	   0	    0		66	     66 	  66	       0	   0
TRIGGER 		  10   40.0		10   40.0	   0	    0		 0	     10 	  10	       0	   0
			  --------------------------------------------------------------------------------------------------------------------


PGA Aggregate Target Statistics        DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> all stats are reported in MegaBytes

	  PGA Aggr Target	   Auto PGA Target	      PGA Mem Alloc		Auto Workareas		 Manual Workarea	   Global Mem Bound
       ---------------------   -----------------------	 -----------------------   -----------------------   -----------------------   -----------------------
  I#	    Begin	 End	      Begin	   End		Begin	     End	  Begin        End	    Begin	 End	      Begin	   End
----   ---------- ----------   ------------ ----------	 ------------ ----------   ------------ ----------   ------------ ----------   ------------ ----------
   1	  3,215.0    3,215.0	      200.9    1,197.9	      4,096.4	 2,197.1	    0.0        0.0	      0.0	 0.0	      321.5	 321.5
   2	  3,215.0    3,215.0	      200.9    1,123.1	      4,190.8	 2,327.2	    0.0        0.0	      0.0	 0.0	      321.5	 321.5
			  --------------------------------------------------------------------------------------------------------------------


Process Memory Summary		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> B: Begin Snap   E: End Snap I#: Instance number
-> Max Alloc is Maximum PGA allocation size at snapshot time
-> Hist Max Alloc is the Historical Max Allocation for still-connected processes
-> ordered by instance, Begin/End snapshot, Alloc (MB)

							     Hist
					Avg Std Dev    Max    Max
		     Alloc     Used   Alloc   Alloc  Alloc  Alloc   Num   Num
  I#   Category       (MB)     (MB)    (MB)    (MB)   (MB)   (MB)  Proc Alloc
---- - ---------- -------- -------- ------- ------- ------ ------ ----- -----
   1 B Freeable      530.7	 .0	1.9	2.4	20    N/A   278   278
       Other	    2357.8	N/A	5.3	4.4	46     46   444   444
       PL/SQL	     124.3    117.6	 .3	 .3	 2	3   442   378
       SQL	      60.2     45.8	 .2	 .3	 1     19   383   295
       Total	    3073.0    163.4	7.7	7.4	70     68  1547  1395
     E Freeable      169.4	 .0	2.7	6.6	43    N/A    62    62
       Other	     992.6	N/A	5.1	6.7	48     48   193   193
       PL/SQL	       6.7	1.9	 .0	 .2	 2	3   191   127
       SQL	       7.4	5.8	 .1	 .2	 1     19   133    60
       Total	    1176.1	7.7	8.0    13.6	94     70   579   442
   2 B Freeable      559.9	 .0	2.0	3.2	27    N/A   282   282
       Other	    2323.0	N/A	5.1	4.9	46     46   455   455
       PL/SQL	     138.0    128.8	 .3	 .3	 3	4   453   389
       SQL	     136.7    125.2	 .3	 .5	 1     21   394   316
       Total	    3157.6    253.9	7.7	8.9	78     71  1584  1442
     E Freeable      200.3	 .0	3.1	6.9	43    N/A    65    65
       Other	    1082.2	N/A	5.6	7.8	51     51   193   193
       PL/SQL	      13.1	5.4	 .1	 .4	 3	4   191   127
       SQL	       7.7	5.4	 .1	 .2	 1     21   132    56
       Total	    1303.2     10.9	8.8    15.2	98     76   581   441
			  --------------------------------------------------------------------------------------------------------------------


init.ora Parameters		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> '*' indicates same value across all instances

Parameter Name		      I#  Begin value						End value (if different)
----------------------------- --- ----------------------------------------------------- ------------------------
_ipddb_enable			* TRUE
audit_file_dest 		* /u01/app/oracle/admin/p60sdb/adump
audit_trail			* DB
cluster_database		* TRUE
compatible			* 19.0.0
control_files			* +P60S/P60SDB/CONTROLFILE/current.267.1031675639, +FRA
db_block_size			* 8192
db_create_file_dest		* +P60S
db_domain			* example.com
db_name 			* p60sdb
db_recovery_file_dest		* +FRA
db_recovery_file_dest_size	* 137438953472
diagnostic_dest 		* /u01/app/oracle
dispatchers			* (PROTOCOL=TCP) (SERVICE=p60sdbXDB)
instance_number 		1 1
				2 2
listener_networks		*
local_listener			1  (ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.11)(PORT=1522
				2  (ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.12)(PORT=1522
nls_language			* AMERICAN
nls_territory			* AMERICA
open_cursors			* 300
pga_aggregate_target		* 3371171840
processes			* 640
remote_listener 		*  mcracpoc-scan.example.com:1521
remote_login_passwordfile	* EXCLUSIVE
sga_max_size			* 236223201280
sga_target			* 42949672960
thread				1 1
				2 2
undo_tablespace 		1 UNDOTBS1
				2 UNDOTBS2
			  --------------------------------------------------------------------------------------------------------------------


init.ora Multi-valued Parameters       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> This section only displays parameters that have more one value
-> '*' indicates same value across all instances
-> '(NULL)' indicates that the	parameter value was not set
-> A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot

Parameter Name		      I#  Begin value						End value (if different)
----------------------------- --- ----------------------------------------------------- ------------------------
control_files			* +FRA/P60SDB/CONTROLFILE/current.270.1031675639
				* +P60S/P60SDB/CONTROLFILE/current.267.1031675639
			  --------------------------------------------------------------------------------------------------------------------

Top SQL with Top Events 	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Top SQL statements by DB Time along with the top events by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Event is the percentage of DB Time due to the event that the SQL is
   waiting on.
-> % Row Source is the percentage of DB Time due to the row source for the
   SQL waiting on the event.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
									   % Row
Event			       % Event Top Row Source			  Source
------------------------------ ------- --------------------------------- -------
	  35dumc2tpr9dv 	   203653710		    16547	   58.50
gc current grant busy		 53.02 UPDATE				   53.02
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


db file sequential read 	  4.24 UPDATE				    4.21

	  bhdvtsvjhgvrh 	  1497866750		    10963	   38.60
gc cr multi block request	 24.83 TABLE ACCESS - BY INDEX ROWID BAT   24.83
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


gc cr grant busy		 10.76 TABLE ACCESS - BY INDEX ROWID BAT    9.87


db file parallel read		  1.74 TABLE ACCESS - BY INDEX ROWID BAT    1.74

			  --------------------------------------------------------------------------------------------------------------------

Top SQL with Top Row Sources	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Top SQL statements by DB Time along with the top row sources by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Row Source is the percentage of DB Time spent on the row source by
   that SQL.
-> % Event is the percentage of DB Time spent on the event by the
   SQL executing the row source.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
					   % Row
Row Source				  Source Top Event		 % Event
---------------------------------------- ------- ----------------------- -------
	  35dumc2tpr9dv 	   203653710		    16547	   58.50
UPDATE					   58.06 gc current grant busy	   53.02
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

	  bhdvtsvjhgvrh 	  1497866750		    10963	   38.60
TABLE ACCESS - BY INDEX ROWID BATCHED	   37.61 gc cr multi block reque   24.83
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

			  --------------------------------------------------------------------------------------------------------------------

Top Sessions			       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
			  --------------------------------------------------------------------------------------------------------------------

Top Blocking Sessions		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
			  --------------------------------------------------------------------------------------------------------------------

Top PL/SQL Procedures		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> 'PL/SQL entry subprogram' represents the application's top-level
      entry-point (procedure, function, trigger, package initialization
      or RPC call) into PL/SQL.
-> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed
      at the point of sampling . If the value is 'SQL', it represents
      the percentage of time spent executing SQL for the particular
      PL/SQL entry subprogram

PL/SQL Entry Subprogram 					  % Activity
----------------------------------------------------------------- ----------
PL/SQL Current Subprogram					   % Current
----------------------------------------------------------------- ----------
USER1.SLOBUPDATE						       58.97
   SQL								       58.97
			  --------------------------------------------------------------------------------------------------------------------

Top Events			       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Top Events by DB Time
-> % Activity is the percentage of DB Time due to the event

Event				    Event Class     Session Type
----------------------------------- --------------- ---------------
	   Avg Active
% Activity   Sessions
---------- ----------
gc current grant busy		    Cluster	    FOREGROUND
     53.03     227.87
gc cr multi block request	    Cluster	    FOREGROUND
     24.83     106.69
gc cr grant busy		    Cluster	    FOREGROUND
     10.90	46.84
db file sequential read 	    User I/O	    FOREGROUND
      5.08	21.83
db file parallel read		    User I/O	    FOREGROUND
      1.74	 7.47
			  --------------------------------------------------------------------------------------------------------------------

Top Event P1/P2/P3 Values	       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Top Events by DB Time and the top P1/P2/P3 values for those events.
-> % Event is the percentage of DB Time due to the event
-> % Activity is the percentage of DB Time due to the event with the given
   P1,P2,P3 Values.

Event			       % Event		   P1, P2, P3 Values % Activity
------------------------------ ------- ----------------------------- ----------
Parameter 1		   Parameter 2		      Parameter 3
-------------------------- -------------------------- --------------------------
gc cr multi block request	 24.83		  "9","15262594","1"	   0.01
file#			   block#		      class#

db file sequential read 	  5.08		   "9","2390727","1"	   0.00
file#			   block#		      blocks

db file parallel read		  1.74		       "1","61","61"	   1.49
files			   blocks		      requests

			  --------------------------------------------------------------------------------------------------------------------

Top DB Objects			       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136

		  No data exists for this section of the report.
			  --------------------------------------------------------------------------------------------------------------------

Activity Over Time		       DB/Inst: P60SDB/p60sdb1	Snaps: 135-136
-> Analysis period is divided into smaller time slots as indicated
   in the 'Slot Time (Duration)'.
-> Top 3 events are reported in each of those slots
-> 'Slot Count' shows the number of ASH samples in that slot
-> 'Event Count' shows the number of ASH samples waiting for
   that event in that slot
-> '% Event' is 'Event Count' over all ASH samples in the analysis period

			 Slot					Event
Slot Time (Duration)	Count Event				Count % Event
-------------------- -------- ------------------------------ -------- -------
08:34:03   (57 secs)	1,572 gc current grant busy		  922	 3.25
			      gc cr multi block request 	  325	 1.14
			      gc cr grant busy			  142	 0.50
08:35:00   (5.0 min)   15,456 gc current grant busy		7,959	28.02
			      gc cr multi block request 	3,892	13.70
			      gc cr grant busy			1,745	 6.14
08:40:00   (5.0 min)   11,377 gc current grant busy		6,181	21.76
			      gc cr multi block request 	2,835	 9.98
			      gc cr grant busy			1,212	 4.27
			  --------------------------------------------------------------------------------------------------------------------



	  ADDM Report for Task 'ADDM:3889879926_136'
	  ------------------------------------------

Analysis Period
---------------
AWR snapshot range from 135 to 136.
Time period starts at 14-FEB-20 08.34.04 AM
Time period ends at 14-FEB-20 08.45.04 AM

Analysis Target
---------------
Database 'P60SDB' with DB ID 3889879926.
Database version 19.0.0.0.0.
ADDM performed an analysis of all instances.

Activity During the Analysis Period
-----------------------------------
Total database time was 288289 seconds.
The average number of active sessions was 436.8.

Summary of Findings
-------------------
   Description		      Active Sessions	   Recommendations
			      Percent of Activity
   -------------------------  -------------------  ---------------
1  Interconnect Latency       436.8 | 100	   1
2  Top SQL Statements	      434.2 | 99.41	   2
3  Global Cache Messaging     396.56 | 90.79	   1
4  Buffer Busy - Hot Objects  281.64 | 64.48	   0
5  "User I/O" wait Class      37.17 | 8.51	   0


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 436.14 active sessions, 100% of total activity.
---------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time.
The database was consuming 142509 kilo bits per second of interconnect
bandwidth.
3% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 95% for database lock management.
The average latency for 8K interconnect messages was 79799 microseconds.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p60sdb2  51.19	     ADDM:3889879926_2_136
    1	    p60sdb1  48.81	     ADDM:3889879926_1_136

   Recommendation 1: Host Configuration
   Estimated benefit is 436.8 active sessions, 100% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle's recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS's socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter "db_file_multiblock_read_count" may be decreased as a
      workaround.
   Action
      Look at the instance level ADDM tasks for a list of interconnect devices
      used by a specific instance.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 396.56 active sessions, 90.79% of total activity.
	 Wait class "Cluster" was consuming significant database time.
	 Impact is 396.56 active sessions, 90.79% of total activity.


Finding 2: Top SQL Statements
Impact is 433.55 active sessions, 99.41% of total activity.
-----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p60sdb2  51.51	     ADDM:3889879926_2_136
    1	    p60sdb1  48.49	     ADDM:3889879926_1_136

   Recommendation 1: SQL Tuning
   Estimated benefit is 260.43 active sessions, 59.62% of total activity.
   ----------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      "35dumc2tpr9dv".
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 ))
	 AND (CUSTID < :B1 )
   Rationale
      The SQL spent 99% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.

   Recommendation 2: SQL Tuning
   Estimated benefit is 172.53 active sessions, 39.5% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      "bhdvtsvjhgvrh".
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND
	 (CUSTID < :B1 )
   Rationale
      The SQL spent 99% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.


Finding 3: Global Cache Messaging
Impact is 395.96 active sessions, 90.79% of total activity.
-----------------------------------------------------------
Inter-instance messaging was consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p60sdb2  51.95	     ADDM:3889879926_2_136
    1	    p60sdb1  48.05	     ADDM:3889879926_1_136

   Recommendation 1: Application Analysis
   Estimated benefit is 396.56 active sessions, 90.79% of total activity.
   ----------------------------------------------------------------------
   Action
      Look at the "Top SQL Statements" finding for SQL statements consuming
      significant time on Cluster waits. For example, the UPDATE statement
      with SQL_ID "35dumc2tpr9dv" is responsible for 60% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "Cluster" was consuming significant database time.
      Impact is 396.56 active sessions, 90.79% of total activity.


Finding 4: Buffer Busy - Hot Objects
Impact is 281.21 active sessions, 64.48% of total activity.
-----------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p60sdb2  100	     ADDM:3889879926_2_136

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 281.64 active sessions, 64.48% of total activity.
	 Inter-instance messaging was consuming significant database time.
	 Impact is 396.56 active sessions, 90.79% of total activity.
	    Wait class "Cluster" was consuming significant database time.
	    Impact is 396.56 active sessions, 90.79% of total activity.


Finding 5: "User I/O" wait Class
Impact is 37.12 active sessions, 8.51% of total activity.
---------------------------------------------------------
Wait class "User I/O" was consuming significant database time.
The throughput of the I/O subsystem was not significantly lower than expected.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  54.72	     ADDM:3889879926_1_136
    2	    p60sdb2  45.28	     ADDM:3889879926_2_136

   No recommendations are available.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Instances that were analyzed:
-----------------------------
    Number  Name     Host Name		    Active Sessions  Percent of Activity
    ------  -------  ---------------------  ---------------  -------------------
    2	    p60sdb2  mcracpoc2.example.com  223.28	     51.19
    1	    p60sdb1  mcracpoc1.example.com  212.86	     48.81

Miscellaneous Information
-------------------------
Wait class "Application" was not consuming significant database time.
Wait class "Commit" was not consuming significant database time.
Wait class "Concurrency" was not consuming significant database time.
Wait class "Configuration" was not consuming significant database time.
Wait class "Network" was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.

End of Report
Report written to awr_rac.txt
SQL> SQL> SQL> SQL> SQL> SQL> 




Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt.  Default value is 'html'.

'html'		HTML format (default)
'text'		Text format
'active-html'	Includes Performance Hub active report


Type Specified:  html







Current Database
~~~~~~~~~~~~~~~~
DB Id	       DB Name	      Container Name
-------------- -------------- --------------
 3889879926	P60SDB	       p60sdb











Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
* 3889879926	 1	P60SDB	     p60sdb1	  mcracpoc1.ex
* 3889879926	 2	P60SDB	     p60sdb2	  mcracpoc2.ex

Using 3889879926 for database Id
Using instances ALL (default 'ALL')


Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.


Enter value for num_days: 
Listing all Completed Snapshots
DB Name      Snap Id	   Snap Started    Snap Level
------------ ---------- ------------------ ----------

P60SDB		     1	06 Feb 2020 18:00    1
		     2	06 Feb 2020 19:00    1
		     3	06 Feb 2020 20:00    1
		     4	06 Feb 2020 21:00    1
		     5	06 Feb 2020 22:00    1
		     6	06 Feb 2020 23:00    1
		     7	07 Feb 2020 00:00    1
		     8	07 Feb 2020 01:00    1
		     9	07 Feb 2020 02:00    1
		    10	07 Feb 2020 03:00    1
		    11	07 Feb 2020 04:00    1
		    12	07 Feb 2020 05:00    1
		    13	07 Feb 2020 06:00    1
		    14	07 Feb 2020 07:00    1
		    15	07 Feb 2020 08:00    1
		    16	07 Feb 2020 21:41    1
		    17	07 Feb 2020 23:00    1
		    18	08 Feb 2020 00:00    1
		    19	08 Feb 2020 01:00    1
		    20	08 Feb 2020 02:00    1
		    21	08 Feb 2020 03:00    1
		    22	08 Feb 2020 04:00    1
		    23	08 Feb 2020 05:00    1
		    24	08 Feb 2020 06:00    1
		    25	08 Feb 2020 07:00    1
		    26	10 Feb 2020 21:32    1
		    27	11 Feb 2020 08:57    1
		    28	11 Feb 2020 09:07    1
		    29	11 Feb 2020 09:10    1
		    30	11 Feb 2020 09:20    1
		    31	11 Feb 2020 09:51    1
		    32	11 Feb 2020 10:01    1
		    33	11 Feb 2020 10:11    1
		    34	11 Feb 2020 10:14    1
		    35	11 Feb 2020 10:16    1
		    36	11 Feb 2020 10:27    1
		    37	11 Feb 2020 10:30    1
		    38	11 Feb 2020 10:33    1
		    39	11 Feb 2020 10:43    1
		    40	11 Feb 2020 10:58    1
		    41	11 Feb 2020 11:02    1
		    42	11 Feb 2020 11:05    1
		    43	11 Feb 2020 11:07    1
		    44	11 Feb 2020 11:11    1
		    45	11 Feb 2020 11:21    1
		    46	11 Feb 2020 11:31    1
		    47	11 Feb 2020 11:41    1
		    48	12 Feb 2020 09:57    1
		    49	12 Feb 2020 09:59    1
		    50	12 Feb 2020 10:10    1
		    51	12 Feb 2020 10:14    1
		    52	12 Feb 2020 10:24    1
		    53	12 Feb 2020 12:13    1
		    54	12 Feb 2020 12:24    1
		    55	12 Feb 2020 12:34    1
		    56	12 Feb 2020 12:44    1
DB Name      Snap Id	   Snap Started    Snap Level
------------ ---------- ------------------ ----------

P60SDB		    57	12 Feb 2020 12:46    1
		    58	12 Feb 2020 12:50    1
		    59	12 Feb 2020 12:56    1
		    60	12 Feb 2020 13:09    1
		    61	12 Feb 2020 13:51    1
		    62	12 Feb 2020 14:03    1
		    63	12 Feb 2020 14:12    1
		    64	12 Feb 2020 14:31    1
		    65	12 Feb 2020 14:42    1
		    66	12 Feb 2020 14:56    1
		    67	12 Feb 2020 15:11    1
		    68	12 Feb 2020 16:00    1
		    69	12 Feb 2020 17:00    1
		    70	12 Feb 2020 18:00    1
		    71	12 Feb 2020 19:00    1
		    72	12 Feb 2020 20:00    1
		    73	12 Feb 2020 21:00    1
		    74	12 Feb 2020 22:00    1
		    75	12 Feb 2020 23:00    1
		    76	13 Feb 2020 00:00    1
		    77	13 Feb 2020 01:00    1
		    78	13 Feb 2020 02:00    1
		    79	13 Feb 2020 03:00    1
		    80	13 Feb 2020 04:00    1
		    81	13 Feb 2020 05:00    1
		    82	13 Feb 2020 06:00    1
		    83	13 Feb 2020 07:00    1
		    84	13 Feb 2020 08:00    1
		    85	13 Feb 2020 09:06    1
		    86	13 Feb 2020 09:18    1
		    87	13 Feb 2020 09:21    1
		    88	13 Feb 2020 09:33    1
		    89	13 Feb 2020 09:40    1
		    90	13 Feb 2020 09:59    1
		    91	13 Feb 2020 10:34    1
		    92	13 Feb 2020 11:30    1
		    93	13 Feb 2020 11:42    1
		    94	13 Feb 2020 12:09    1
		    95	13 Feb 2020 12:14    1
		    96	13 Feb 2020 12:17    1
		    97	13 Feb 2020 12:27    1
		    98	13 Feb 2020 13:00    1
		    99	13 Feb 2020 13:53    1
		   100	13 Feb 2020 13:59    1
		   101	13 Feb 2020 14:04    1
		   102	13 Feb 2020 14:16    1
		   103	13 Feb 2020 14:18    1
		   104	13 Feb 2020 14:31    1
		   105	13 Feb 2020 14:33    1
		   106	13 Feb 2020 14:42    1
		   107	13 Feb 2020 14:44    1
		   108	13 Feb 2020 14:49    1
		   109	13 Feb 2020 14:51    1
		   110	13 Feb 2020 15:00    1
		   111	13 Feb 2020 15:01    1
		   112	13 Feb 2020 16:00    1
DB Name      Snap Id	   Snap Started    Snap Level
------------ ---------- ------------------ ----------

P60SDB		   113	13 Feb 2020 17:00    1
		   114	13 Feb 2020 18:00    1
		   115	13 Feb 2020 19:00    1
		   116	13 Feb 2020 20:00    1
		   117	13 Feb 2020 21:00    1
		   118	13 Feb 2020 22:00    1
		   119	13 Feb 2020 23:00    1
		   120	14 Feb 2020 00:00    1
		   121	14 Feb 2020 01:00    1
		   122	14 Feb 2020 02:00    1
		   123	14 Feb 2020 03:00    1
		   124	14 Feb 2020 04:00    1
		   125	14 Feb 2020 05:00    1
		   126	14 Feb 2020 06:00    1
		   127	14 Feb 2020 07:00    1
		   128	14 Feb 2020 07:42    1
		   129	14 Feb 2020 07:44    1
		   130	14 Feb 2020 07:48    1
		   131	14 Feb 2020 07:50    1
		   132	14 Feb 2020 07:56    1
		   133	14 Feb 2020 07:58    1
		   134	14 Feb 2020 08:01    1
		   135	14 Feb 2020 08:34    1
		   136	14 Feb 2020 08:45    1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 135

End   Snapshot Id specified: 136



Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_rac_135_136.html.  To use this name,
press <return> to continue, otherwise enter an alternative.


Using the report name awr_rac.html

<html lang="en"><head><title>AWR RAC Report for DB: P60SDB, Snaps: 135-136</title>
<style type="text/css">
body.awr {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black; background:White;}
pre.awr  {font:8pt Courier;color:black; background:White;}
pre_sqltext.awr  {white-space: pre-wrap;}
h1.awr	 {font:bold 20pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;border-bottom:1px solid #cccc99;margin-top:0pt; margin-bottom:0pt;padding:0px 0px 0px 0px;}
h2.awr	 {font:bold 18pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
h3.awr {font:bold 16pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
li.awr {font: 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;}
th.awrnobg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;padding-left:4px; padding-right:4px;padding-bottom:2px}
th.awrbg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#0066CC;padding-left:4px; padding-right:4px;padding-bottom:2px}
td.awrnc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;}
td.awrc    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;}
td.awrncbb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
td.awrncrb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-right: thin solid black;}
td.awrcrb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-right: thin solid black;}
td.awrclb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;}
td.awrcbb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
a.awr {font:bold 8pt Arial,Helvetica,sans-serif;color:#663300; vertical-align:top;margin-top:0pt; margin-bottom:0pt;}
td.awrnct {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:White;vertical-align:top;}
td.awrct   {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrncbbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;border-top: thin solid black;}
td.awrncrbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrcrbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrclbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrcbbt   {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;border-right: thin solid black;}
table.tdiff {  border_collapse: collapse; }
table.tscl {width: 600;}
table.tscl tbody, table.tscl thead { display: block; }
table.tscl thead tr th {height: 12px;line-height: 12px;}
table.tscl tbody { height: 100px;overflow-y: auto; overflow-x: hidden;}
table.tscl tbody td, thead th {width: 200;}
.hidden   {position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden;}
.pad   {margin-left:17px;}
.doublepad {margin-left:34px;}
</style></head><body class="awr">
<h1 class="awr">
WORKLOAD REPOSITORY REPORT (RAC)

</h1>
<p />Database Summary<p />
<ul>
</ul>
<table border="0" class="tdiff" summary="Database Summary"><tr>
<th class="awrbg" colspan=" 8" id="Database">Database</th>
<th class="awrbg" colspan=" 2" id="SnapshotIds">Snapshot Ids</th>
<th class="awrbg" colspan=" 2" id="NumberofInstances">Number of Instances</th>
<th class="awrbg" colspan=" 2" id="NumberofHosts">Number of Hosts</th>
<th class="awrbg" colspan=" 2" id="ReportTotal(minutes)">Report Total (minutes)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Id">Id</th><th class="awrbg" scope="col" id="Name">Name</th><th class="awrbg" scope="col" id="UniqueName">Unique Name</th><th class="awrbg" scope="col" id="Role">Role</th><th class="awrbg" scope="col" id="Edition">Edition</th><th class="awrbg" scope="col" id="RAC">RAC</th><th class="awrbg" scope="col" id="CDB">CDB</th><th class="awrbg" scope="col" id="BlockSize">Block Size</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="InReport">In Report</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="InReport">In Report</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="Elapsedtime">Elapsed time</th></tr>
<tr><td align="right" headers="Database Id" class='awrclb'>3889879926</td><td headers="Database Name" class='awrc'>P60SDB</td><td headers="Database UniqueName" class='awrc'>p60sdb</td><td headers="Database Role" class='awrc'>PRIMARY</td><td headers="Database Edition" class='awrc'>EE</td><td headers="Database RAC" class='awrc'>YES</td><td headers="Database CDB" class='awrc'>NO</td><td align="right" headers="Database BlockSize" class='awrc'>8192</td><td align="right" headers="SnapshotIds Begin" class='awrclb'>135</td><td align="right" headers="SnapshotIds End" class='awrc'>136</td><td align="right" headers="NumberofInstances InReport" class='awrclb'>2</td><td align="right" headers="NumberofInstances Total" class='awrc'>2</td><td align="right" headers="NumberofHosts InReport" class='awrclb'>2</td><td align="right" headers="NumberofHosts Total" class='awrc'>2</td><td align="right" headers="ReportTotal(minutes) DBtime" class='awrclb'>4,804.82</td><td align="right" headers="ReportTotal(minutes) Elapsedtime" class='awrcrb'>11.01</td></tr>
</table><p />
<p />Database Instances Included In Report<p />
<ul>
<li class="awr"> Listed in order of instance number, I#</li>
</ul>
<table border="0" class="tdiff" summary="Database Instances Included In Report. . Listed in order of instance number, I#"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Instance</th><th class="awrbg" scope="col">Host</th><th class="awrbg" scope="col">Startup</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th><th class="awrbg" scope="col">Release</th><th class="awrbg" scope="col">Elapsed Time(min)</th><th class="awrbg" scope="col">DB time(min)</th><th class="awrbg" scope="col">Up Time(hrs)</th><th class="awrbg" scope="col">Avg Active Sessions</th><th class="awrbg" scope="col">Platform</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td class='awrc'>p60sdb1</td><td class='awrc'>mcracpoc1.example.com</td><td class='awrc'>13-Feb-20 14:57</td><td class='awrc'>14-Feb-20 08:34</td><td class='awrc'>14-Feb-20 08:45</td><td class='awrc'>19.0.0.0.0</td><td align="right" class='awrc'>11.02</td><td align="right" class='awrc'>2,345.01</td><td align="right" class='awrc'>17.79</td><td align="right" class='awrc'>212.86</td><td class='awrc'>Linux x86 64-bit</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td class='awrnc'>p60sdb2</td><td class='awrnc'>mcracpoc2.example.com</td><td class='awrnc'>13-Feb-20 14:57</td><td class='awrnc'>14-Feb-20 08:34</td><td class='awrnc'>14-Feb-20 08:45</td><td class='awrnc'>19.0.0.0.0</td><td align="right" class='awrnc'>11.02</td><td align="right" class='awrnc'>2,459.81</td><td align="right" class='awrnc'>17.79</td><td align="right" class='awrnc'>223.28</td><td class='awrnc'>Linux x86 64-bit</td></tr>
</table><p />
<h3 class="awr"><a class="awr" name="99999"></a>Report Summary</h3>
<p />Top ADDM Findings by Average Active Sessions<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top ADDM findings by average active sessions"><tr><th class="awrbg" scope="col">Finding Name</th><th class="awrbg" scope="col">Avg active sessions of the task</th><th class="awrbg" scope="col">Percent active sessions of finding</th><th class="awrbg" scope="col">Task Name</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th></tr>
<tr><td class='awrc'>Interconnect Latency</td><td align="right" class='awrc'>436.14</td><td align="right" class='awrc'>1.0E+02</td><td scope="row" class='awrc'>ADDM:3889879926_136</td><td class='awrc'>14-Feb-20 08:34</td><td class='awrc'>14-Feb-20 08:45</td></tr>
<tr><td class='awrnc'>Top SQL Statements</td><td align="right" class='awrnc'>436.14</td><td align="right" class='awrnc'>99.41</td><td scope="row" class='awrnc'>ADDM:3889879926_136</td><td class='awrnc'>14-Feb-20 08:34</td><td class='awrnc'>14-Feb-20 08:45</td></tr>
<tr><td class='awrc'>Global Cache Messaging</td><td align="right" class='awrc'>436.14</td><td align="right" class='awrc'>90.79</td><td scope="row" class='awrc'>ADDM:3889879926_136</td><td class='awrc'>14-Feb-20 08:34</td><td class='awrc'>14-Feb-20 08:45</td></tr>
<tr><td class='awrnc'>Buffer Busy - Hot Objects</td><td align="right" class='awrnc'>436.14</td><td align="right" class='awrnc'>64.48</td><td scope="row" class='awrnc'>ADDM:3889879926_136</td><td class='awrnc'>14-Feb-20 08:34</td><td class='awrnc'>14-Feb-20 08:45</td></tr>
<tr><td class='awrc'>&quot;User I/O&quot; wait Class</td><td align="right" class='awrc'>436.14</td><td align="right" class='awrc'>8.51</td><td scope="row" class='awrc'>ADDM:3889879926_136</td><td class='awrc'>14-Feb-20 08:34</td><td class='awrc'>14-Feb-20 08:45</td></tr>
</table><p />
<p />Cache Sizes<p />
<ul>
<li class="awr"> All values are in Megabytes </li>
<li class="awr"> Listed in order of instance number, I# </li>
<li class="awr"> End values displayed only if different from Begin values</li>
</ul>
<table border="0" class="tdiff" summary="Cache Sizes. . All values are in Megabytes. Listed in order of instance number, I#. End values displayed only if different from Begin values"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="MemoryTarget">Memory Target</th>
<th class="awrbg" colspan=" 2" id="SgaTarget">Sga Target</th>
<th class="awrbg" colspan=" 2" id="DBCache">DB Cache</th>
<th class="awrbg" colspan=" 2" id="SharedPool">Shared Pool</th>
<th class="awrbg" colspan=" 2" id="LargePool">Large Pool</th>
<th class="awrbg" colspan=" 2" id="JavaPool">Java Pool</th>
<th class="awrbg" colspan=" 2" id="StreamsPool">Streams Pool</th>
<th class="awrbg" colspan=" 2" id="PGATarget">PGA Target</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col">Log Buffer</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="MemoryTarget Begin" class='awrclb'>&#160;</td><td align="right" headers="MemoryTarget End" class='awrc'>&#160;</td><td align="right" headers="SgaTarget Begin" class='awrclb'>40,960</td><td align="right" headers="SgaTarget End" class='awrc'>&#160;</td><td align="right" headers="DBCache Begin" class='awrclb'>35,072</td><td align="right" headers="DBCache End" class='awrc'>&#160;</td><td align="right" headers="SharedPool Begin" class='awrclb'>5,248</td><td align="right" headers="SharedPool End" class='awrc'>&#160;</td><td align="right" headers="LargePool Begin" class='awrclb'>384</td><td align="right" headers="LargePool End" class='awrc'>&#160;</td><td align="right" headers="JavaPool Begin" class='awrclb'>&#160;</td><td align="right" headers="JavaPool End" class='awrc'>&#160;</td><td align="right" headers="StreamsPool Begin" class='awrclb'>&#160;</td><td align="right" headers="StreamsPool End" class='awrc'>&#160;</td><td align="right" headers="PGATarget Begin" class='awrclb'>3,328</td><td align="right" headers="PGATarget End" class='awrcrb'>&#160;</td><td align="right" class='awrc'>96.09</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="MemoryTarget Begin" class='awrnclb'>&#160;</td><td align="right" headers="MemoryTarget End" class='awrnc'>&#160;</td><td align="right" headers="SgaTarget Begin" class='awrnclb'>40,960</td><td align="right" headers="SgaTarget End" class='awrnc'>&#160;</td><td align="right" headers="DBCache Begin" class='awrnclb'>35,072</td><td align="right" headers="DBCache End" class='awrnc'>&#160;</td><td align="right" headers="SharedPool Begin" class='awrnclb'>5,248</td><td align="right" headers="SharedPool End" class='awrnc'>&#160;</td><td align="right" headers="LargePool Begin" class='awrnclb'>384</td><td align="right" headers="LargePool End" class='awrnc'>&#160;</td><td align="right" headers="JavaPool Begin" class='awrnclb'>&#160;</td><td align="right" headers="JavaPool End" class='awrnc'>&#160;</td><td align="right" headers="StreamsPool Begin" class='awrnclb'>&#160;</td><td align="right" headers="StreamsPool End" class='awrnc'>&#160;</td><td align="right" headers="PGATarget Begin" class='awrnclb'>3,328</td><td align="right" headers="PGATarget End" class='awrncrb'>&#160;</td><td align="right" class='awrnc'>96.09</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>40,960</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>35,072</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>5,248</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>384</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>3,328</td><td align="right" class='awrcrbt'>&#160;</td><td align="right" class='awrct'>96.09</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Min</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>40,960</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>35,072</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>5,248</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>384</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>3,328</td><td align="right" class='awrncrb'>&#160;</td><td align="right" class='awrnc'>96.09</td></tr>
<tr><td align="right" scope="row" class='awrc'>Max</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>40,960</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>35,072</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>5,248</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>384</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>3,328</td><td align="right" class='awrcrb'>&#160;</td><td align="right" class='awrc'>96.09</td></tr>
</table><p />

<a class="awr" name="top"></a>
<h2 class="awr">
Main Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#99999">Report Summary</a></li>
<li class="awr"><a class="awr" href="#12010">OS Statistics</a></li>
<li class="awr"><a class="awr" href="#629">Time Model Statistics</a></li>
<li class="awr"><a class="awr" href="#621">Wait Events Statistics</a></li>
<li class="awr"><a class="awr" href="#639">Global Activity Load Profile</a></li>
<li class="awr"><a class="awr" href="#605">Global Cache and Enqueue Statistics Summary</a></li>
<li class="awr"><a class="awr" href="#12033">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#12034">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#607">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#608">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#622">SQL Statistics</a></li>
<li class="awr"><a class="awr" href="#623">Global Activity Statistics</a></li>
<li class="awr"><a class="awr" href="#630">I/O Statistics</a></li>
<li class="awr"><a class="awr" href="#12083">Library Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#633">Memory Statistics</a></li>
<li class="awr"><a class="awr" href="#638">Supplemental Information</a></li>
<li class="awr"><a class="awr" href="#43">Active Session History(ASH) Report</a></li>
<li class="awr"><a class="awr" href="#99994">ADDM Reports</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<a class="awr" name="12010"></a>
<h3 class="awr">OS Statistics By Instance</h3>
<ul>
<li class="awr"> Listed in order of instance number, I# </li>
<li class="awr"> End values are diplayed only if different from begin values</li>
</ul>
<table border="0" class="tdiff" summary="OS Statistics By Instance. . Listed in order of instance number, I#. End values are diplayed only if different from begin values"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="CPU">CPU</th>
<th class="awrbg" colspan=" 2" id="Load">Load</th>
<th class="awrbg" colspan=" 5" id="%CPU">% CPU</th>
<th class="awrbg" colspan=" 3" id="Time(s)">Time (s)</th>
<th class="awrbg" colspan=" 1" id="Memory">Memory</th>
<th class="awrbg" colspan=" 4" id="EndValues">End Values</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="#CPUs">#CPUs</th><th class="awrbg" scope="col" id="#Cores">#Cores</th><th class="awrbg" scope="col" id="#Sckts">#Sckts</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="%Busy">% Busy</th><th class="awrbg" scope="col" id="%Usr">% Usr</th><th class="awrbg" scope="col" id="%Sys">% Sys</th><th class="awrbg" scope="col" id="%WIO">% WIO</th><th class="awrbg" scope="col" id="%Idl">% Idl</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Idle">Idle</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="MB">MB</th><th class="awrbg" scope="col" id="#CPUs">#CPUs</th><th class="awrbg" scope="col" id="#Cores">#Cores</th><th class="awrbg" scope="col" id="#Sckts">#Sckts</th><th class="awrbg" scope="col" id="Memory(M)">Memory (M)</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="CPU #CPUs" class='awrclb'>32</td><td align="right" headers="CPU #Cores" class='awrc'>16</td><td align="right" headers="CPU #Sckts" class='awrc'>1</td><td align="right" headers="Load Begin" class='awrclb'>32.16</td><td align="right" headers="Load End" class='awrc'>9.52</td><td align="right" headers="%CPU %Busy" class='awrclb'>25.01</td><td align="right" headers="%CPU %Usr" class='awrc'>7.10</td><td align="right" headers="%CPU %Sys" class='awrc'>11.61</td><td align="right" headers="%CPU %WIO" class='awrc'>17.37</td><td align="right" headers="%CPU %Idl" class='awrc'>74.99</td><td align="right" headers="Time(s) Busy" class='awrclb'>4,891.19</td><td align="right" headers="Time(s) Idle" class='awrc'>14,662.59</td><td align="right" headers="Time(s) Total" class='awrc'>19,553.78</td><td align="right" headers="Memory MB" class='awrclb'>257,947.84</td><td align="right" headers="EndValues #CPUs" class='awrclb'>&#160;</td><td align="right" headers="EndValues #Cores" class='awrc'>&#160;</td><td align="right" headers="EndValues #Sckts" class='awrc'>&#160;</td><td align="right" headers="EndValues Memory(M)" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="CPU #CPUs" class='awrnclb'>32</td><td align="right" headers="CPU #Cores" class='awrnc'>16</td><td align="right" headers="CPU #Sckts" class='awrnc'>1</td><td align="right" headers="Load Begin" class='awrnclb'>8.81</td><td align="right" headers="Load End" class='awrnc'>7.94</td><td align="right" headers="%CPU %Busy" class='awrnclb'>26.93</td><td align="right" headers="%CPU %Usr" class='awrnc'>7.70</td><td align="right" headers="%CPU %Sys" class='awrnc'>12.13</td><td align="right" headers="%CPU %WIO" class='awrnc'>14.17</td><td align="right" headers="%CPU %Idl" class='awrnc'>73.07</td><td align="right" headers="Time(s) Busy" class='awrnclb'>5,206.91</td><td align="right" headers="Time(s) Idle" class='awrnc'>14,127.75</td><td align="right" headers="Time(s) Total" class='awrnc'>19,334.66</td><td align="right" headers="Memory MB" class='awrnclb'>257,947.84</td><td align="right" headers="EndValues #CPUs" class='awrnclb'>&#160;</td><td align="right" headers="EndValues #Cores" class='awrnc'>&#160;</td><td align="right" headers="EndValues #Sckts" class='awrnc'>&#160;</td><td align="right" headers="EndValues Memory(M)" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclbt'>10,098.10</td><td align="right" class='awrct'>28,790.34</td><td align="right" class='awrct'>38,888.44</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="629"></a>
<h2 class="awr">
Time Model Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12014">Time Model</a></li>
<li class="awr"><a class="awr" href="#12015">Time Model - % of DB time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12014"></a>
<h3 class="awr">Time Model</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Time Model"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">DB time (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">SQL Exec Ela (s)</th><th class="awrbg" scope="col">Parse Ela (s)</th><th class="awrbg" scope="col">Hard Parse Ela (s)</th><th class="awrbg" scope="col">PL/SQL Ela (s)</th><th class="awrbg" scope="col">Java Ela (s)</th><th class="awrbg" scope="col">bg time (s)</th><th class="awrbg" scope="col">bg CPU (s)</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>140,700.39</td><td align="right" class='awrc'>2,660.00</td><td align="right" class='awrc'>140,688.02</td><td align="right" class='awrc'>7.28</td><td align="right" class='awrc'>6.84</td><td align="right" class='awrc'>27.96</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>3,502.43</td><td align="right" class='awrc'>1,337.80</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>147,588.57</td><td align="right" class='awrnc'>2,757.50</td><td align="right" class='awrnc'>147,576.91</td><td align="right" class='awrnc'>24.74</td><td align="right" class='awrnc'>24.48</td><td align="right" class='awrnc'>16.61</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>3,372.61</td><td align="right" class='awrnc'>1,476.70</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>288,288.96</td><td align="right" class='awrct'>5,417.50</td><td align="right" class='awrct'>288,264.94</td><td align="right" class='awrct'>32.01</td><td align="right" class='awrct'>31.32</td><td align="right" class='awrct'>44.57</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>6,875.04</td><td align="right" class='awrct'>2,814.51</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>144,144.48</td><td align="right" class='awrnc'>2,708.75</td><td align="right" class='awrnc'>144,132.47</td><td align="right" class='awrnc'>16.01</td><td align="right" class='awrnc'>15.66</td><td align="right" class='awrnc'>22.29</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>3,437.52</td><td align="right" class='awrnc'>1,407.25</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>4,870.68</td><td align="right" class='awrc'>68.94</td><td align="right" class='awrc'>4,871.18</td><td align="right" class='awrc'>12.35</td><td align="right" class='awrc'>12.47</td><td align="right" class='awrc'>8.03</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>91.80</td><td align="right" class='awrc'>98.21</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#629">Back to Time Model Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12015"></a>
<h3 class="awr">Time Model - % of DB time</h3>
<ul>
<li class="awr"> % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]</li>
</ul>
<table border="0" class="tdiff" summary="Time Model - % of DB time. . % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 6" id="%DBtime">% DB time</th>
<td>&#160;</td><th class="awrbg" colspan=" 1" id="%bgtime">% bg time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">% Total DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="SQLExecEla">SQL Exec Ela</th><th class="awrbg" scope="col" id="ParseEla">Parse Ela</th><th class="awrbg" scope="col" id="HardParse">Hard Parse</th><th class="awrbg" scope="col" id="PL/SQLEla">PL/SQL Ela</th><th class="awrbg" scope="col" id="JavaEla">Java Ela</th><th class="awrbg" scope="col">% Total bg time</th><th class="awrbg" scope="col" id="bgCPU">bg CPU</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>48.81</td><td align="right" headers="%DBtime DBCPU" class='awrclb'>1.89</td><td align="right" headers="%DBtime SQLExecEla" class='awrc'>99.99</td><td align="right" headers="%DBtime ParseEla" class='awrc'>0.01</td><td align="right" headers="%DBtime HardParse" class='awrc'>0.00</td><td align="right" headers="%DBtime PL/SQLEla" class='awrc'>0.00</td><td align="right" headers="%DBtime JavaEla" class='awrc'>0.00</td><td align="right" class='awrc'>50.94</td><td align="right" headers="%bgtime bgCPU" class='awrcbb'>38.20</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>51.19</td><td align="right" headers="%DBtime DBCPU" class='awrnclb'>1.87</td><td align="right" headers="%DBtime SQLExecEla" class='awrnc'>99.99</td><td align="right" headers="%DBtime ParseEla" class='awrnc'>0.02</td><td align="right" headers="%DBtime HardParse" class='awrnc'>0.02</td><td align="right" headers="%DBtime PL/SQLEla" class='awrnc'>0.00</td><td align="right" headers="%DBtime JavaEla" class='awrnc'>0.00</td><td align="right" class='awrnc'>49.06</td><td align="right" headers="%bgtime bgCPU" class='awrncbb'>43.79</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>50.00</td><td align="right" class='awrclbt'>1.88</td><td align="right" class='awrct'>99.99</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>50.00</td><td align="right" class='awrcbbt'>40.99</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#629">Back to Time Model Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="621"></a>
<h2 class="awr">
Wait Events Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12011">Foreground Wait Classes -	% of Total DB time</a></li>
<li class="awr"><a class="awr" href="#12012">Foreground Wait Classes</a></li>
<li class="awr"><a class="awr" href="#12013">Foreground Wait Classes -	% of DB time </a></li>
<li class="awr"><a class="awr" href="#12050">Top Timed Events</a></li>
<li class="awr"><a class="awr" href="#12051">Top Timed Foreground Events</a></li>
<li class="awr"><a class="awr" href="#12052">Top Timed Background Events</a></li>
<li class="awr"><a class="awr" href="#12053">Foreground Wait Events (Global)</a></li>
<li class="awr"><a class="awr" href="#12054">Background Wait Events (Global)</a></li>
<li class="awr"><a class="awr" href="#12055">Wait Event Histogram (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12011"></a>
<h3 class="awr">Foreground Wait Classes -  % of Total DB time</h3>
<ul>
<li class="awr"> Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time</li>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes -  % of Total DB time. . Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time"><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">User I/O</th><th class="awrbg" scope="col">Sys I/O</th><th class="awrbg" scope="col">Other</th><th class="awrbg" scope="col">Applic</th><th class="awrbg" scope="col">Commit</th><th class="awrbg" scope="col">Network</th><th class="awrbg" scope="col">Concurcy</th><th class="awrbg" scope="col">Config</th><th class="awrbg" scope="col">Cluster</th><th class="awrbg" scope="col">Admin</th><th class="awrbg" scope="col">Scheduler</th><th class="awrbg" scope="col">DB CPU</th></tr>
<tr><td class='awrc'>&#160;</td><td align="right" class='awrc'>8.51</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.74</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>90.79</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1.88</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12012"></a>
<h3 class="awr">Foreground Wait Classes</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">User I/O(s)</th><th class="awrbg" scope="col">Sys I/O(s)</th><th class="awrbg" scope="col">Other(s)</th><th class="awrbg" scope="col">Applic (s)</th><th class="awrbg" scope="col">Commit (s)</th><th class="awrbg" scope="col">Network (s)</th><th class="awrbg" scope="col">Concurcy (s)</th><th class="awrbg" scope="col">Config (s)</th><th class="awrbg" scope="col">Cluster (s)</th><th class="awrbg" scope="col">Admin (s)</th><th class="awrbg" scope="col">Scheduler (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">DB time</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>13,425.37</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>1,132.92</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>3.25</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>9.25</td><td align="right" class='awrc'>13.27</td><td align="right" class='awrc'>126,063.18</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2,660.00</td><td align="right" class='awrc'>140,700.39</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>11,109.74</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>1,006.87</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4.09</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>72.08</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>135,669.41</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2,757.50</td><td align="right" class='awrnc'>147,588.57</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>24,535.11</td><td align="right" class='awrct'>0.03</td><td align="right" class='awrct'>2,139.79</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>7.34</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>81.33</td><td align="right" class='awrct'>13.46</td><td align="right" class='awrct'>261,732.59</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>5,417.50</td><td align="right" class='awrct'>288,288.96</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>12,267.55</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>1,069.90</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>3.67</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>40.66</td><td align="right" class='awrnc'>6.73</td><td align="right" class='awrnc'>130,866.30</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2,708.75</td><td align="right" class='awrnc'>144,144.48</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>1,637.40</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>89.13</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.60</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>44.43</td><td align="right" class='awrc'>9.24</td><td align="right" class='awrc'>6,792.63</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>68.94</td><td align="right" class='awrc'>4,870.68</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12013"></a>
<h3 class="awr">Foreground Wait Classes -  % of DB time </h3>
<ul>
<li class="awr"> % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time</li>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes -  % of DB time . . % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 12" id="%DBtime">% DB time</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="UserI/O">User I/O</th><th class="awrbg" scope="col" id="SysI/O">Sys I/O</th><th class="awrbg" scope="col" id="Other">Other</th><th class="awrbg" scope="col" id="Applic">Applic</th><th class="awrbg" scope="col" id="Commit">Commit</th><th class="awrbg" scope="col" id="Network">Network</th><th class="awrbg" scope="col" id="Concurcy">Concurcy</th><th class="awrbg" scope="col" id="Config">Config</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Admin">Admin</th><th class="awrbg" scope="col" id="Scheduler">Scheduler</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col">% Total DB time</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="%DBtime UserI/O" class='awrclb'>9.54</td><td align="right" headers="%DBtime SysI/O" class='awrc'>0.00</td><td align="right" headers="%DBtime Other" class='awrc'>0.81</td><td align="right" headers="%DBtime Applic" class='awrc'>0.00</td><td align="right" headers="%DBtime Commit" class='awrc'>0.00</td><td align="right" headers="%DBtime Network" class='awrc'>0.00</td><td align="right" headers="%DBtime Concurcy" class='awrc'>0.01</td><td align="right" headers="%DBtime Config" class='awrc'>0.01</td><td align="right" headers="%DBtime Cluster" class='awrc'>89.60</td><td align="right" headers="%DBtime Admin" class='awrc'>&#160;</td><td align="right" headers="%DBtime Scheduler" class='awrc'>&#160;</td><td align="right" headers="%DBtime DBCPU" class='awrcrb'>1.89</td><td align="right" class='awrc'>48.81</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="%DBtime UserI/O" class='awrnclb'>7.53</td><td align="right" headers="%DBtime SysI/O" class='awrnc'>0.00</td><td align="right" headers="%DBtime Other" class='awrnc'>0.68</td><td align="right" headers="%DBtime Applic" class='awrnc'>0.00</td><td align="right" headers="%DBtime Commit" class='awrnc'>0.00</td><td align="right" headers="%DBtime Network" class='awrnc'>0.00</td><td align="right" headers="%DBtime Concurcy" class='awrnc'>0.05</td><td align="right" headers="%DBtime Config" class='awrnc'>0.00</td><td align="right" headers="%DBtime Cluster" class='awrnc'>91.92</td><td align="right" headers="%DBtime Admin" class='awrnc'>&#160;</td><td align="right" headers="%DBtime Scheduler" class='awrnc'>&#160;</td><td align="right" headers="%DBtime DBCPU" class='awrncrb'>1.87</td><td align="right" class='awrnc'>51.19</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>8.53</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.74</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.03</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>90.76</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrcrbt'>1.88</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12050"></a>
<h3 class="awr">Top Timed Events</h3>
<ul>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time ' 	     : Per-instance 'Wait Time Avg ' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Events. . Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time ' : Per-instance 'Wait Time Avg ' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>2,208,790</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>153,207.99</td><td align="right" headers="WaitTime AvgWait" class='awrc'>69.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>53.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>70.52ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>60.07ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>80.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>14.78ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrnclb'>408,568</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>70,901.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>173.54ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>24.59</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>175.15ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>156.96ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>193.34ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>25.72ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>434,780</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>32,080.35</td><td align="right" headers="WaitTime AvgWait" class='awrc'>73.79ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>11.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>74.72ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>64.67ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>84.77ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>14.21ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>5,008,789</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>17,849.33</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.56ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>6.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.56ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.55ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.57ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>17.44us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>411,868</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>6,688.19</td><td align="right" headers="WaitTime AvgWait" class='awrc'>16.24ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.32</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>16.26ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>16.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>16.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>322.94us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>&#160;</td><td headers="Wait Event" class='awrnc'>DB CPU</td><td align="right" headers="Event Waits" class='awrnclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>5,417.50</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.88</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrclb'>39,995</td><td align="right" headers="Event %Timeouts" class='awrc'>77.88</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,084.82</td><td align="right" headers="WaitTime AvgWait" class='awrc'>52.13ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.72</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>60.20ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>39.61ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>80.80ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>29.12ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrnclb'>3,152</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,038.79</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>646.83ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.71</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>643.12ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>635.53ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>650.71ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>10.73ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>445,529</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,816.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.08ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.63</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.12ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>54.94us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrnclb'>2,747</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,208.55</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>439.95ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.42</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>440.37ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>351.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>529.03ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>125.38ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>Cluster</td><td headers="Wait Event" class='awrct'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclbt'>1,226,493</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>73,671.43</td><td align="right" headers="WaitTime AvgWait" class='awrct'>60.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>52.36</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrnclb'>222,450</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>34,916.85</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>156.96ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>24.82</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>237,640</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>15,368.53</td><td align="right" headers="WaitTime AvgWait" class='awrc'>64.67ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>10.92</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>2,750,701</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>9,832.98</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.57ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>6.99</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>224,166</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3,593.50</td><td align="right" headers="WaitTime AvgWait" class='awrc'>16.03ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.55</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>&#160;</td><td headers="Wait Event" class='awrnc'>DB CPU</td><td align="right" headers="Event Waits" class='awrnclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,660.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.89</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrclb'>27,841</td><td align="right" headers="Event %Timeouts" class='awrc'>84.35</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,102.81</td><td align="right" headers="WaitTime AvgWait" class='awrc'>39.61ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>231,810</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>936.26</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.04ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.67</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>21,771</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>516.58</td><td align="right" headers="WaitTime AvgWait" class='awrc'>23.73ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.37</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrnclb'>806</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>512.24</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>635.53ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.36</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>Cluster</td><td headers="Wait Event" class='awrct'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclbt'>982,297</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>79,536.55</td><td align="right" headers="WaitTime AvgWait" class='awrct'>80.97ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>53.89</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrnclb'>186,118</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>35,984.18</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>193.34ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>24.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>197,140</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>16,711.82</td><td align="right" headers="WaitTime AvgWait" class='awrc'>84.77ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>11.32</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>2,258,088</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>8,016.35</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.55ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>5.43</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>187,702</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3,094.69</td><td align="right" headers="WaitTime AvgWait" class='awrc'>16.49ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.10</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>&#160;</td><td headers="Wait Event" class='awrnc'>DB CPU</td><td align="right" headers="Event Waits" class='awrnclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,757.50</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.87</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrclb'>2,346</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,526.56</td><td align="right" headers="WaitTime AvgWait" class='awrc'>650.71ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.03</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrnclb'>12,154</td><td align="right" headers="Event %Timeouts" class='awrnc'>63.06</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>982.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>80.80ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.67</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>213,719</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>879.79</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.12ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.60</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrnclb'>1,367</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>723.18</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>529.03ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.49</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12051"></a>
<h3 class="awr">Top Timed Foreground Events</h3>
<ul>
<li class="awr"> Foreground Activity is captured in release 11g and above </li>
<li class="awr"> For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity </li>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time'		    : Per-instance 'Wait Time Avg' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Foreground Events. . Foreground Activity is captured in release 11g and above. For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity. Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time' : Per-instance 'Wait Time Avg' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>2,208,270</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>153,177.24</td><td align="right" headers="WaitTime AvgWait" class='awrc'>69.37ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>53.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>70.52ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>60.07ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>80.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>14.78ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrnclb'>408,562</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>70,900.90</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>173.54ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>24.59</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>175.16ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>156.96ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>193.35ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>25.73ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>434,423</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>32,060.35</td><td align="right" headers="WaitTime AvgWait" class='awrc'>73.80ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>11.12</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>74.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>64.66ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>84.83ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>14.26ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>5,007,098</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>17,846.87</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.56ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>6.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.56ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.55ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.57ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>16.60us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>411,864</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>6,688.19</td><td align="right" headers="WaitTime AvgWait" class='awrc'>16.24ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.32</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>16.26ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>16.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>16.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>323.18us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>&#160;</td><td headers="Wait Event" class='awrnc'>DB CPU</td><td align="right" headers="Event Waits" class='awrnclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>5,417.50</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.88</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrclb'>8,577</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,069.70</td><td align="right" headers="WaitTime AvgWait" class='awrc'>241.31ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.72</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>241.73ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>222.37ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>261.09ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>27.38ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrnclb'>3,127</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,018.87</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>645.62ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.70</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>642.32ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>635.56ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>649.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>9.55ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrclb'>2,736</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,208.40</td><td align="right" headers="WaitTime AvgWait" class='awrc'>441.67ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.42</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>442.46ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>351.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>533.21ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>128.33ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>33,453</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>657.35</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>19.65ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.23</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>22.62ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>16.68ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>28.56ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>8.40ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>Cluster</td><td headers="Wait Event" class='awrct'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclbt'>1,226,319</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>73,664.03</td><td align="right" headers="WaitTime AvgWait" class='awrct'>60.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>52.36</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrnclb'>222,450</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>34,916.85</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>156.96ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>24.82</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>237,614</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>15,365.19</td><td align="right" headers="WaitTime AvgWait" class='awrc'>64.66ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>10.92</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>2,750,245</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>9,831.83</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.57ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>6.99</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>224,166</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3,593.50</td><td align="right" headers="WaitTime AvgWait" class='awrc'>16.03ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.55</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>&#160;</td><td headers="Wait Event" class='awrnc'>DB CPU</td><td align="right" headers="Event Waits" class='awrnclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,660.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.89</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrclb'>4,195</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,095.29</td><td align="right" headers="WaitTime AvgWait" class='awrc'>261.09ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrnclb'>798</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>507.18</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>635.56ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.36</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrclb'>1,380</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>485.37</td><td align="right" headers="WaitTime AvgWait" class='awrc'>351.72ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.34</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block busy</td><td align="right" headers="Event Waits" class='awrnclb'>18,051</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>407.97</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>22.60ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.29</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>Cluster</td><td headers="Wait Event" class='awrct'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclbt'>981,951</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>79,513.21</td><td align="right" headers="WaitTime AvgWait" class='awrct'>80.97ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>53.87</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrnclb'>186,112</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>35,984.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>193.35ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>24.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>196,809</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>16,695.16</td><td align="right" headers="WaitTime AvgWait" class='awrc'>84.83ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>11.31</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>2,256,853</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>8,015.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.55ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>5.43</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>187,698</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3,094.69</td><td align="right" headers="WaitTime AvgWait" class='awrc'>16.49ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.10</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>&#160;</td><td headers="Wait Event" class='awrnc'>DB CPU</td><td align="right" headers="Event Waits" class='awrnclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,757.50</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.87</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrclb'>2,329</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,511.69</td><td align="right" headers="WaitTime AvgWait" class='awrc'>649.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrnclb'>4,382</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>974.42</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>222.37ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.66</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrclb'>1,356</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>723.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>533.21ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.49</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>25,083</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>418.33</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>16.68ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.28</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12052"></a>
<h3 class="awr">Top Timed Background Events</h3>
<ul>
<li class="awr"> % of bg time: % of background elapsed time </li>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time'		    : Per-instance 'Wait Time Avg' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Background Events. . % of bg time: % of background elapsed time. Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time' : Per-instance 'Wait Time Avg' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>background cpu time</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,814.51</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>40.94</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>445,522</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,816.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.08ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>26.41</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.12ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>54.90us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>42,951</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,131.35</td><td align="right" headers="WaitTime AvgWait" class='awrc'>26.34ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>16.46</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>26.37ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>23.75ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>28.99ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>3.70ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR any worker group</td><td align="right" headers="Event Waits" class='awrnclb'>17,856</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>315.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>17.64ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>4.58</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>17.41ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>16.23ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>18.60ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>1.67ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR worker group ordering</td><td align="right" headers="Event Waits" class='awrclb'>8,464</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>74.35</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.78ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.08</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>8.74ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>8.55ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>8.93ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>269.89us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>2,917</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>45.98</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>15.76ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.67</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>19.68ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>15.01ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>24.35ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>6.61ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR all worker groups</td><td align="right" headers="Event Waits" class='awrclb'>779</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>35.99</td><td align="right" headers="WaitTime AvgWait" class='awrc'>46.21ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.52</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>46.21ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>46.16ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>46.27ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>76.14us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>521</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>30.62</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>58.78ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.45</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>54.60ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>40.92ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>68.28ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>19.35ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>DLM cross inst call completion</td><td align="right" headers="Event Waits" class='awrclb'>4,784</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>26.74</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.59ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.39</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.17ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>673.60us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>3.52ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>enq: TM - contention</td><td align="right" headers="Event Waits" class='awrnclb'>210</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>26.63</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>126.79ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.39</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>126.79ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>125.12ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>128.46ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>2.36ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>&#160;</td><td headers="Wait Event" class='awrct'>background cpu time</td><td align="right" headers="Event Waits" class='awrclbt'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrct'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>1,337.80</td><td align="right" headers="WaitTime AvgWait" class='awrct'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrct'>38.20</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>231,809</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>936.25</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.04ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>26.73</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>21,690</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>515.09</td><td align="right" headers="WaitTime AvgWait" class='awrc'>23.75ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>14.71</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR any worker group</td><td align="right" headers="Event Waits" class='awrnclb'>7,198</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>116.83</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>16.23ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>3.34</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block 2-way</td><td align="right" headers="Event Waits" class='awrclb'>2,682</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>40.26</td><td align="right" headers="WaitTime AvgWait" class='awrc'>15.01ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.15</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR worker group ordering</td><td align="right" headers="Event Waits" class='awrnclb'>3,287</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>28.11</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.55ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.80</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" headers="Event Waits" class='awrclb'>318</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>17.67</td><td align="right" headers="WaitTime AvgWait" class='awrc'>55.57ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.50</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR all worker groups</td><td align="right" headers="Event Waits" class='awrnclb'>348</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>16.10</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>46.27ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.46</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Application</td><td headers="Wait Event" class='awrc'>enq: TM - contention</td><td align="right" headers="Event Waits" class='awrclb'>105</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>13.49</td><td align="right" headers="WaitTime AvgWait" class='awrc'>128.46ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.39</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrnclb'>16</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>11.58</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>723.50ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.33</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>&#160;</td><td headers="Wait Event" class='awrct'>background cpu time</td><td align="right" headers="Event Waits" class='awrclbt'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrct'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>1,476.70</td><td align="right" headers="WaitTime AvgWait" class='awrct'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrct'>43.79</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>213,713</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>879.76</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.12ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>26.09</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>21,261</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>616.25</td><td align="right" headers="WaitTime AvgWait" class='awrc'>28.99ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>18.27</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR any worker group</td><td align="right" headers="Event Waits" class='awrnclb'>10,658</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>198.23</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>18.60ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>5.88</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR worker group ordering</td><td align="right" headers="Event Waits" class='awrclb'>5,177</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>46.24</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.93ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.37</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>DLM cross inst call completion</td><td align="right" headers="Event Waits" class='awrnclb'>4,719</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>26.70</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.66ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.79</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>340</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>23.22</td><td align="right" headers="WaitTime AvgWait" class='awrc'>68.28ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.69</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR all worker groups</td><td align="right" headers="Event Waits" class='awrnclb'>431</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>19.89</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>46.16ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.59</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>331</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>16.66</td><td align="right" headers="WaitTime AvgWait" class='awrc'>50.34ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.49</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrnclb'>903</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>15.21</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>16.85ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.45</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12053"></a>
<h3 class="awr">Foreground Wait Events (Global)</h3>
<ul>
<li class="awr"> s - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]  </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
</ul>
<table border="0" class="tdiff" summary="This table displays foreground wait event information"><tr>
<th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 4" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>2,208,270</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>153,177.24</td><td align="right" headers="WaitTime AvgWait" class='awrc'>69.37ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>53.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>70.52ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>60.07ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>80.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>14.78ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrnclb'>408,562</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>70,900.90</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>173.54ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>24.59</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>175.16ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>156.96ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>193.35ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>25.73ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>434,423</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>32,060.35</td><td align="right" headers="WaitTime AvgWait" class='awrc'>73.80ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>11.12</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>74.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>64.66ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>84.83ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>14.26ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>5,007,098</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>17,846.87</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.56ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>6.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.56ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.55ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.57ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>16.60us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>411,864</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>6,688.19</td><td align="right" headers="WaitTime AvgWait" class='awrc'>16.24ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.32</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>16.26ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>16.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>16.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>323.18us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrnclb'>8,577</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,069.70</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>241.31ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.72</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>241.73ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>222.37ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>261.09ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>27.38ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrclb'>3,127</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,018.87</td><td align="right" headers="WaitTime AvgWait" class='awrc'>645.62ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.70</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>642.32ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>635.56ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>649.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>9.55ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrnclb'>2,736</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,208.40</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>441.67ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.42</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>442.46ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>351.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>533.21ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>128.33ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>33,453</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>657.35</td><td align="right" headers="WaitTime AvgWait" class='awrc'>19.65ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.23</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>22.62ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>16.68ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>28.56ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>8.40ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block busy</td><td align="right" headers="Event Waits" class='awrnclb'>32,709</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>624.07</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>19.08ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.22</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>18.67ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>14.74ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>22.60ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>5.56ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrclb'>777</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>509.25</td><td align="right" headers="WaitTime AvgWait" class='awrc'>655.40ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.18</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>653.20ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>646.69ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>659.70ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>9.20ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant congested</td><td align="right" headers="Event Waits" class='awrnclb'>6,634</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>197.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>29.70ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.07</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>29.49ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>28.81ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>30.17ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>.97ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>4,728</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>131.06</td><td align="right" headers="WaitTime AvgWait" class='awrc'>27.72ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>33.35ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>21.18ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>45.53ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>17.21ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block congested</td><td align="right" headers="Event Waits" class='awrnclb'>5,462</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>108.16</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>19.80ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.04</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>17.46ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>12.96ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>21.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>6.37ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block 2-way</td><td align="right" headers="Event Waits" class='awrclb'>2,607</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>80.53</td><td align="right" headers="WaitTime AvgWait" class='awrc'>30.89ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.03</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>29.68ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>25.17ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>34.19ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>6.38ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>cursor: pin S wait on X</td><td align="right" headers="Event Waits" class='awrnclb'>474</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>35.94</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>75.83ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>75.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>75.83ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>75.83ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant congested</td><td align="right" headers="Event Waits" class='awrclb'>921</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>28.68</td><td align="right" headers="WaitTime AvgWait" class='awrc'>31.14ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>30.89ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>29.76ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>32.03ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.60ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: gc element</td><td align="right" headers="Event Waits" class='awrnclb'>12,288</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>22.53</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.83ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.93ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>147.19us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>buffer busy waits</td><td align="right" headers="Event Waits" class='awrclb'>14</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>18.85</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1346.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1316.58ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1108.16ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1525.00ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>294.75ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>430</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>14.36</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>33.40ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>20.80ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.84ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>38.75ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>25.39ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block congested</td><td align="right" headers="Event Waits" class='awrclb'>686</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>13.90</td><td align="right" headers="WaitTime AvgWait" class='awrc'>20.27ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>15.04ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.70ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>23.38ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>11.79ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>undo segment extension</td><td align="right" headers="Event Waits" class='awrnclb'>40</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>13.08</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>326.90ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>326.90ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>326.90ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>326.90ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch free</td><td align="right" headers="Event Waits" class='awrclb'>9,800</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>10.51</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.07ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.05ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.09ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>33.96us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>reliable message</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>10.41</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.41 s</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.41 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>10.41 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.41 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: redo allocation</td><td align="right" headers="Event Waits" class='awrclb'>6,963</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>10.16</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.46ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.44ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.27ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.62ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>244.65us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache lock</td><td align="right" headers="Event Waits" class='awrnclb'>514</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>7.88</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>15.33ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.54ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.15ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>16.94ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>10.46ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Commit</td><td headers="Wait Event" class='awrc'>log file sync</td><td align="right" headers="Event Waits" class='awrclb'>295</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>7.34</td><td align="right" headers="WaitTime AvgWait" class='awrc'>24.87ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>24.79ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>23.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>26.55ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.49ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>cursor: mutex X</td><td align="right" headers="Event Waits" class='awrnclb'>2,744</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>7.27</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.65ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.65ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.65ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.65ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>library cache pin</td><td align="right" headers="Event Waits" class='awrclb'>414</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>7.13</td><td align="right" headers="WaitTime AvgWait" class='awrc'>17.23ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>25.04ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>14.34ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>35.73ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>15.13ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>IPC send completion sync</td><td align="right" headers="Event Waits" class='awrnclb'>336</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6.51</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>19.38ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>11.45ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>873.07us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>22.03ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>14.96ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" headers="Event Waits" class='awrclb'>205</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4.33</td><td align="right" headers="WaitTime AvgWait" class='awrc'>21.11ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>21.42ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>533.22us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>42.31ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>29.54ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache: mutex X</td><td align="right" headers="Event Waits" class='awrnclb'>981</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.41</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.46ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.84ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.45ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.24ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>558.94us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block busy</td><td align="right" headers="Event Waits" class='awrclb'>28</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.73</td><td align="right" headers="WaitTime AvgWait" class='awrc'>61.81ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>61.81ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>61.81ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>61.81ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>cursor: mutex S</td><td align="right" headers="Event Waits" class='awrnclb'>859</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.17</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.36ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.36ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.36ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: object queue header operation</td><td align="right" headers="Event Waits" class='awrclb'>807</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.15</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.43ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.41ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.26ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.56ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>212.82us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: TO - contention</td><td align="right" headers="Event Waits" class='awrnclb'>13</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>80.13ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>129.23ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.58ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>256.88ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>180.52ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: cache buffers lru chain</td><td align="right" headers="Event Waits" class='awrclb'>2,180</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.66</td><td align="right" headers="WaitTime AvgWait" class='awrc'>304.75us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>305.62us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>246.09us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>365.16us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>84.19us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>kksfbc child completion</td><td align="right" headers="Event Waits" class='awrnclb'>13</td><td align="right" headers="Event %Timeouts" class='awrnc'>92.31</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.60</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>45.97ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>45.97ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>45.97ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>45.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: gcs resource hash</td><td align="right" headers="Event Waits" class='awrclb'>663</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.53</td><td align="right" headers="WaitTime AvgWait" class='awrc'>799.64us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>787.34us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>704.99us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>869.69us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>116.46us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: WF - contention</td><td align="right" headers="Event Waits" class='awrnclb'>14</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.52</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>36.99ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>28.94ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>733.20us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>57.14ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>39.88ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc buffer busy release</td><td align="right" headers="Event Waits" class='awrclb'>7</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.38</td><td align="right" headers="WaitTime AvgWait" class='awrc'>54.26ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>37.99ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>33.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>75.96ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>53.68ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrnclb'>7</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.36</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>51.78ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>102.04ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>31.68ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>172.41ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>99.51ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: cache buffers chains</td><td align="right" headers="Event Waits" class='awrclb'>137</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.27</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.97ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.93ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.69ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.17ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>336.71us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current multi block request</td><td align="right" headers="Event Waits" class='awrnclb'>14</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.24</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>17.08ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>17.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>17.08ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>17.08ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PGA memory operation</td><td align="right" headers="Event Waits" class='awrclb'>2,180</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.23</td><td align="right" headers="WaitTime AvgWait" class='awrc'>106.30us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>105.75us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>100.97us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>110.52us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>6.76us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>row cache lock</td><td align="right" headers="Event Waits" class='awrnclb'>26</td><td align="right" headers="Event %Timeouts" class='awrnc'>96.15</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.21</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.15ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.88ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>8.74ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>5.46ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>DLM cross inst call completion</td><td align="right" headers="Event Waits" class='awrclb'>55</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.19</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.39ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.32ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>946.83us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.69ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.94ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: PS - contention</td><td align="right" headers="Event Waits" class='awrnclb'>105</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.18</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.75ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.40ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>928.36us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.88ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>671.80us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>lock deadlock retry</td><td align="right" headers="Event Waits" class='awrclb'>3,120</td><td align="right" headers="Event %Timeouts" class='awrc'>99.84</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.17</td><td align="right" headers="WaitTime AvgWait" class='awrc'>55.19us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>51.70us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>44.61us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>58.78us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>10.01us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: shared pool</td><td align="right" headers="Event Waits" class='awrnclb'>56</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.12</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.10ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.81ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>614.28us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.01ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4.53ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: ges resource hash list</td><td align="right" headers="Event Waits" class='awrclb'>191</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.10</td><td align="right" headers="WaitTime AvgWait" class='awrc'>502.99us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>502.63us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>432.59us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>572.67us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>99.05us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: reap credit</td><td align="right" headers="Event Waits" class='awrnclb'>2,680</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.09</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>34.53us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>32.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>27.93us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>36.07us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>5.76us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc buffer busy acquire</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>79.41ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>79.41ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>79.41ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>79.41ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>row cache mutex</td><td align="right" headers="Event Waits" class='awrnclb'>7</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.05ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.05ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.05ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.05ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: undo global data</td><td align="right" headers="Event Waits" class='awrclb'>26</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.31ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.15ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>615.56us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.68ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>750.64us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>151</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>225.31us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>218.12us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>195.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>241.23us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>32.69us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>cursor: pin S</td><td align="right" headers="Event Waits" class='awrclb'>17</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.58ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.58ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.58ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.58ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>direct path write</td><td align="right" headers="Event Waits" class='awrnclb'>7</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.77ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.77ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.77ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.77ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrclb'>38</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>601.21us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>749.89us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>279.08us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.22ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>665.82us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: call allocation</td><td align="right" headers="Event Waits" class='awrnclb'>23</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>.98ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>816.58us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>49.22us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.58ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.09ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>latch: redo copy</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.03ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.03ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.03ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>wait list latch free</td><td align="right" headers="Event Waits" class='awrnclb'>15</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.39ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.29ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.13ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.45ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>226.27us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: FB - contention</td><td align="right" headers="Event Waits" class='awrclb'>14</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.34ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.34ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.34ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.34ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: enqueue hash chains</td><td align="right" headers="Event Waits" class='awrnclb'>15</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.12ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.15ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>666.25us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.63ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>680.16us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: messages</td><td align="right" headers="Event Waits" class='awrclb'>11</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.32ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.42ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>328.17us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.51ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.54ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Network</td><td headers="Wait Event" class='awrnc'>SQL*Net message to client</td><td align="right" headers="Event Waits" class='awrnclb'>1,165</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>11.28us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>11.43us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>9.69us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>13.17us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.46us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Application</td><td headers="Wait Event" class='awrc'>SQL*Net break/reset to client</td><td align="right" headers="Event Waits" class='awrclb'>132</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>99.50us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>99.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>99.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>99.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: WT - contention</td><td align="right" headers="Event Waits" class='awrnclb'>12</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.09ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>646.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.32ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>473.67us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS initialization</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.75ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.75ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.75ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: TT - contention</td><td align="right" headers="Event Waits" class='awrnclb'>4</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.62ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.62ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.62ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.62ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: AF - task serialization</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.08ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.08ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.08ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS operation: action</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.30ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.30ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.30ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.30ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>name-service call wait</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>630.25us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>630.25us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>596.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>664.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>47.73us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>Disk file operations I/O</td><td align="right" headers="Event Waits" class='awrnclb'>51</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>36.06us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>30.80us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>20.08us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>41.53us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>15.17us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>ASM IO for non-blocking poll</td><td align="right" headers="Event Waits" class='awrclb'>45</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>33.07us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>27.69us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.06us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>46.31us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>26.34us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>direct path read</td><td align="right" headers="Event Waits" class='awrnclb'>8</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>185.00us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>185.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>185.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>185.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS operation: query</td><td align="right" headers="Event Waits" class='awrclb'>6</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>229.67us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>229.67us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>229.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>229.67us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Network</td><td headers="Wait Event" class='awrnc'>IPC group service call</td><td align="right" headers="Event Waits" class='awrnclb'>49</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>15.47us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>15.14us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>14.75us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>15.53us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>553.90ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>buffer deadlock</td><td align="right" headers="Event Waits" class='awrclb'>5</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>34.00us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>34.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>34.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>34.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX qref latch</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>21.33us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>21.33us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>21.33us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>21.33us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>AWR Flush</td><td align="right" headers="Event Waits" class='awrclb'>6</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.00us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>.00ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges resource directory to be unfrozen</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.67us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.41us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>asynch descriptor resize</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>11.00us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>11.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>11.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>11.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>watchdog main loop</td><td align="right" headers="Event Waits" class='awrnclb'>2,195</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6,585.16</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3000.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.28</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3000.07ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3000.05ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3000.09ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>33.53us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>SQL*Net message from client</td><td align="right" headers="Event Waits" class='awrclb'>1,166</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>661.51</td><td align="right" headers="WaitTime AvgWait" class='awrc'>567.34ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.23</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>523.52ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.15ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1044.88ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>737.32ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq: Execution Msg</td><td align="right" headers="Event Waits" class='awrnclb'>622</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>19.11</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>30.73ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>31.05ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>10.78ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>51.33ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>28.67ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq: Msg Fragment</td><td align="right" headers="Event Waits" class='awrclb'>789</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4.83</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.12ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.12ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.01ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.22ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.56ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq Credit: send blkd</td><td align="right" headers="Event Waits" class='awrnclb'>357</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3.86</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.81ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.51ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>9.65ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>11.36ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.21ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq Credit: need buffer</td><td align="right" headers="Event Waits" class='awrclb'>33</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.41ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.41ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.41ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.41ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12054"></a>
<h3 class="awr">Background Wait Events (Global)</h3>
<ul>
<li class="awr"> s - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]  </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
</ul>
<table border="0" class="tdiff" summary="This table displays background wait event information"><tr>
<th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 4" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%bgtime">%bg time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>445,522</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,816.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.08ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.26</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.12ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>54.90us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>42,951</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,131.35</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>26.34ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.16</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>26.37ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>23.75ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>28.99ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.70ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR any worker group</td><td align="right" headers="Event Waits" class='awrclb'>17,856</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>315.06</td><td align="right" headers="WaitTime AvgWait" class='awrc'>17.64ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>17.41ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>16.23ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>18.60ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.67ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR worker group ordering</td><td align="right" headers="Event Waits" class='awrnclb'>8,464</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>74.35</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.78ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>8.74ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.55ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>8.93ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>269.89us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block 2-way</td><td align="right" headers="Event Waits" class='awrclb'>2,917</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>45.98</td><td align="right" headers="WaitTime AvgWait" class='awrc'>15.76ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>19.68ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>15.01ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>24.35ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>6.61ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR all worker groups</td><td align="right" headers="Event Waits" class='awrnclb'>779</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>35.99</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>46.21ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>46.21ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>46.16ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>46.27ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>76.14us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>521</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>30.62</td><td align="right" headers="WaitTime AvgWait" class='awrc'>58.78ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>54.60ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>40.92ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>68.28ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>19.35ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>DLM cross inst call completion</td><td align="right" headers="Event Waits" class='awrnclb'>4,784</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>26.74</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.59ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.17ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>673.60us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.52ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Application</td><td headers="Wait Event" class='awrc'>enq: TM - contention</td><td align="right" headers="Event Waits" class='awrclb'>210</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>26.63</td><td align="right" headers="WaitTime AvgWait" class='awrc'>126.79ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>126.79ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>125.12ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>128.46ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.36ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block busy</td><td align="right" headers="Event Waits" class='awrnclb'>892</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>22.12</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>24.80ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>26.80ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>19.73ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>33.87ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>10.00ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" headers="Event Waits" class='awrclb'>515</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>20.80</td><td align="right" headers="WaitTime AvgWait" class='awrc'>40.39ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>35.72ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>15.88ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>55.57ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>28.06ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>357</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>20.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>56.02ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>89.38ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>50.34ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>128.43ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>55.22ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrclb'>25</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>19.93</td><td align="right" headers="WaitTime AvgWait" class='awrc'>797.08ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>753.49ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>632.42ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>874.57ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>171.23ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>643</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>19.71</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>30.65ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>30.45ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>27.58ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>33.33ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4.07ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrclb'>23</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>16.36</td><td align="right" headers="WaitTime AvgWait" class='awrc'>711.48ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>703.76ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>684.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>723.50ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>27.92ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>reliable message</td><td align="right" headers="Event Waits" class='awrnclb'>356</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>16.31</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>45.82ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>45.62ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>40.58ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>50.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>7.13ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrclb'>1,788</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>15.94</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.92ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>8.84ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>827.49us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>16.85ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>11.33ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrnclb'>31,418</td><td align="right" headers="Event %Timeouts" class='awrnc'>99.14</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>15.12</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>481.25us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>647.65us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>318.31us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>.98ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>465.75us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Application</td><td headers="Wait Event" class='awrc'>enq: RO - fast object reuse</td><td align="right" headers="Event Waits" class='awrclb'>395</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>13.39</td><td align="right" headers="WaitTime AvgWait" class='awrc'>33.90ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>33.85ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>33.27ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>34.43ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>818.11us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>217</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>12.81</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>59.04ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>59.21ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>55.95ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>62.46ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4.60ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>IMR slave acknowledgement msg</td><td align="right" headers="Event Waits" class='awrclb'>3,948</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>11.38</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.88ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.89ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>457.22us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.32ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.44ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" headers="Event Waits" class='awrnclb'>454,794</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>11.09</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>24.38us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>24.44us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>23.30us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>25.57us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.60us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant congested</td><td align="right" headers="Event Waits" class='awrclb'>86</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>10.16</td><td align="right" headers="WaitTime AvgWait" class='awrc'>118.15ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>118.31ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>117.85ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>118.76ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>642.10us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current multi block request</td><td align="right" headers="Event Waits" class='awrnclb'>40</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>9.75</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>243.65ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>302.25ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>185.05ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>419.46ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>165.75ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block busy</td><td align="right" headers="Event Waits" class='awrclb'>102</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>8.80</td><td align="right" headers="WaitTime AvgWait" class='awrc'>86.23ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>75.86ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>56.28ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>95.44ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>27.69ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>DFS lock handle</td><td align="right" headers="Event Waits" class='awrnclb'>1,365</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>8.71</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.38ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.31ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.97ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.64ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>477.00us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>gcs log flush sync</td><td align="right" headers="Event Waits" class='awrclb'>14,583</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>7.87</td><td align="right" headers="WaitTime AvgWait" class='awrc'>539.99us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>593.41us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>516.15us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>670.68us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>109.27us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: Join ACK</td><td align="right" headers="Event Waits" class='awrnclb'>200</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>7.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>35.03ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>21.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.23ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>40.15ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>26.81ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block congested</td><td align="right" headers="Event Waits" class='awrclb'>285</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>6.74</td><td align="right" headers="WaitTime AvgWait" class='awrc'>23.64ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>17.91ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>10.45ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>25.36ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>10.54ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>direct path write</td><td align="right" headers="Event Waits" class='awrnclb'>139</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>5.46</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>39.28ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>40.60ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>23.99ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>57.20ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>23.48ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KSV master wait</td><td align="right" headers="Event Waits" class='awrclb'>2,571</td><td align="right" headers="Event %Timeouts" class='awrc'>47.69</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>5.37</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.09ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.09ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.78ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.40ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>439.56us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ASM file metadata operation</td><td align="right" headers="Event Waits" class='awrnclb'>5,874</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4.78</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>814.21us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>814.33us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>724.91us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>903.76us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>126.46us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block congested</td><td align="right" headers="Event Waits" class='awrclb'>124</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4.69</td><td align="right" headers="WaitTime AvgWait" class='awrc'>37.79ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>34.61ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>12.73ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>56.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>30.94ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>IPC send completion sync</td><td align="right" headers="Event Waits" class='awrnclb'>1,434</td><td align="right" headers="Event %Timeouts" class='awrnc'>91.56</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4.27</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.98ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.90ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.52ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.28ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.95ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>undo segment extension</td><td align="right" headers="Event Waits" class='awrclb'>11</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4.27</td><td align="right" headers="WaitTime AvgWait" class='awrc'>388.19ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>388.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>388.19ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>388.19ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache lock</td><td align="right" headers="Event Waits" class='awrnclb'>884</td><td align="right" headers="Event %Timeouts" class='awrnc'>3.05</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3.48</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.94ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.96ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.94ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.98ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.45ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" headers="Event Waits" class='awrclb'>202</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3.37</td><td align="right" headers="WaitTime AvgWait" class='awrc'>16.66ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.67ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>120.26us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>19.21ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>13.50ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: CF - contention</td><td align="right" headers="Event Waits" class='awrnclb'>100</td><td align="right" headers="Event %Timeouts" class='awrnc'>49.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3.19</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>31.88ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>31.73ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>31.16ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>32.30ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>806.89us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>7,686</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.88</td><td align="right" headers="WaitTime AvgWait" class='awrc'>374.92us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>374.96us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>362.45us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>387.46us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>17.68us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: reap credit</td><td align="right" headers="Event Waits" class='awrnclb'>93,054</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.73</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>29.34us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>29.27us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>27.12us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>31.42us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.04us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>Sync ASM rebalance</td><td align="right" headers="Event Waits" class='awrclb'>108</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.46</td><td align="right" headers="WaitTime AvgWait" class='awrc'>22.76ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>22.76ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>21.67ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>23.85ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.54ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file async I/O submit</td><td align="right" headers="Event Waits" class='awrnclb'>333,793</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.41</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.22us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.27us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.56us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.97us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.00us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>1,650</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.34</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.42ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.74ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.00ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.05ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch free</td><td align="right" headers="Event Waits" class='awrnclb'>4,692</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.24</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>478.28us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>476.36us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>460.34us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>492.38us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>22.66us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>library cache pin</td><td align="right" headers="Event Waits" class='awrclb'>898</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.84</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.05ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.70ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.32ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>525.21us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>207</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.53</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.41ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.14ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.18ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.10ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4.18ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>direct path write temp</td><td align="right" headers="Event Waits" class='awrclb'>153</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.50</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.83ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.22ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.12ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.32ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.38ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: cache buffers lru chain</td><td align="right" headers="Event Waits" class='awrnclb'>1,737</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.31</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>756.58us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>751.57us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>667.13us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>836.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>119.41us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>row cache lock</td><td align="right" headers="Event Waits" class='awrclb'>107</td><td align="right" headers="Event %Timeouts" class='awrc'>99.07</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.30</td><td align="right" headers="WaitTime AvgWait" class='awrc'>12.16ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>11.02ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.13ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>15.90ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>6.91ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>log file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>935</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.27</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.36ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.35ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.27ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.43ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>113.72us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: gc element</td><td align="right" headers="Event Waits" class='awrclb'>803</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.16</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.45ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.43ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.28ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.58ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>211.82us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: redo allocation</td><td align="right" headers="Event Waits" class='awrnclb'>1,364</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.13</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>831.57us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>827.14us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>791.66us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>862.63us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>50.19us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" headers="Event Waits" class='awrclb'>202</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.06</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.26ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.17ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>322.81us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>6.03ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.03ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges inquiry response</td><td align="right" headers="Event Waits" class='awrnclb'>238</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.67</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.80ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.92ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.50ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.33ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>589.95us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: gcs resource hash</td><td align="right" headers="Event Waits" class='awrclb'>960</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.66</td><td align="right" headers="WaitTime AvgWait" class='awrc'>686.84us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>677.90us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>625.60us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>730.21us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>73.97us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR wait for redo copy</td><td align="right" headers="Event Waits" class='awrnclb'>660</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.55</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>828.32us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>859.29us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>670.02us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.05ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>267.67us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: WF - contention</td><td align="right" headers="Event Waits" class='awrclb'>20</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.53</td><td align="right" headers="WaitTime AvgWait" class='awrc'>26.57ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>24.24ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>894.11us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>47.58ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>33.01ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: TO - contention</td><td align="right" headers="Event Waits" class='awrnclb'>20</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.53</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>26.27ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>43.02ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.14ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>84.91ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>59.23ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: TA - contention</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.51</td><td align="right" headers="WaitTime AvgWait" class='awrc'>168.66ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>126.68ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>743.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>252.61ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>178.10ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>AQ: RAC AQ Network</td><td align="right" headers="Event Waits" class='awrnclb'>13,107</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.41</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>31.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>31.01us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>28.48us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>33.54us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.58us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CGS wait for IPC msg</td><td align="right" headers="Event Waits" class='awrclb'>13,638</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.39</td><td align="right" headers="WaitTime AvgWait" class='awrc'>28.92us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>28.94us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>26.65us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>31.23us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.23us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: PS - contention</td><td align="right" headers="Event Waits" class='awrnclb'>138</td><td align="right" headers="Event %Timeouts" class='awrnc'>11.59</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.38</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.77ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.12ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.15ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.09ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.37ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: DW - contention</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.34</td><td align="right" headers="WaitTime AvgWait" class='awrc'>113.62ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>86.67ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.83ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>167.51ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>114.33ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges message buffer allocation</td><td align="right" headers="Event Waits" class='awrnclb'>17</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.31</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>18.01ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>12.32ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.56ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>23.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>15.21ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: MGA shared context root latch</td><td align="right" headers="Event Waits" class='awrclb'>143</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.30</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.10ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.01ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>619.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.41ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.97ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>Disk file operations I/O</td><td align="right" headers="Event Waits" class='awrnclb'>915</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.28</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>306.38us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>305.71us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>282.86us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>328.55us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>32.31us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PGA memory operation</td><td align="right" headers="Event Waits" class='awrclb'>1,111</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.22</td><td align="right" headers="WaitTime AvgWait" class='awrc'>200.67us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>201.94us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>196.81us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>207.07us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>7.26us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>oracle thread bootstrap</td><td align="right" headers="Event Waits" class='awrnclb'>8</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.22</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>27.49ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>27.26ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>26.36ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>28.16ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.27ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc buffer busy acquire</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.20</td><td align="right" headers="WaitTime AvgWait" class='awrc'>66.65ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>98.01ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.93ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>192.10ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>133.05ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr disk read</td><td align="right" headers="Event Waits" class='awrnclb'>4</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.16</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>39.56ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>39.56ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>39.56ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>39.56ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>latch: redo writing</td><td align="right" headers="Event Waits" class='awrclb'>167</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.15</td><td align="right" headers="WaitTime AvgWait" class='awrc'>899.81us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>915.69us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>856.75us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>83.36us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrnclb'>11</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.15</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>13.54ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>13.54ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>13.54ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>13.54ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>6</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.13</td><td align="right" headers="WaitTime AvgWait" class='awrc'>21.43ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>21.43ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>21.43ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>21.43ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: MGA shared context latch</td><td align="right" headers="Event Waits" class='awrnclb'>84</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.12</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.42ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.20ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>316.28us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.09ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.26ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ksxr poll remote instances</td><td align="right" headers="Event Waits" class='awrclb'>3,059</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.11</td><td align="right" headers="WaitTime AvgWait" class='awrc'>36.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>36.22us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>30.42us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>42.02us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>8.21us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>row cache mutex</td><td align="right" headers="Event Waits" class='awrnclb'>69</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.09</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.37ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.51ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.29ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.73ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>310.42us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current retry</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.09</td><td align="right" headers="WaitTime AvgWait" class='awrc'>46.02ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>46.02ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>35.05ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>56.98ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>15.51ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>libcache interrupt action by LCK</td><td align="right" headers="Event Waits" class='awrnclb'>15,467</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.09</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.68us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.70us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.64us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.76us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>85.14ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Network</td><td headers="Wait Event" class='awrc'>IPC group service call</td><td align="right" headers="Event Waits" class='awrclb'>1,008</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>81.46us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>81.46us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>74.02us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>88.89us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>10.51us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: checkpoint queue latch</td><td align="right" headers="Event Waits" class='awrnclb'>112</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.07</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>640.56us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>632.32us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>478.55us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>786.10us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>217.47us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: object queue header operation</td><td align="right" headers="Event Waits" class='awrclb'>59</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.07</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.21ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.23ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.15ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.31ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>116.86us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS operation: data query</td><td align="right" headers="Event Waits" class='awrnclb'>40</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.48ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.48ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.26ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.70ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>314.73us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: messages</td><td align="right" headers="Event Waits" class='awrclb'>88</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrc'>633.80us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>587.39us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>179.05us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.00ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>577.48us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS operation: data update</td><td align="right" headers="Event Waits" class='awrnclb'>44</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.23ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.23ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>899.23us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.55ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>461.16us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: cache buffers chains</td><td align="right" headers="Event Waits" class='awrclb'>222</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>231.64us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>268.62us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>97.58us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>439.66us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>241.89us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>60</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>759.05us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.33ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>575.14us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.09ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.90ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges DFS hang analysis phase 2 acks</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>36.80ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>36.80ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>36.80ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>36.80ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file scattered read</td><td align="right" headers="Event Waits" class='awrnclb'>82</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>438.10us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>407.57us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>251.12us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>564.02us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>221.25us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: US - contention</td><td align="right" headers="Event Waits" class='awrclb'>21</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.62ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.63ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.36ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.89ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>375.09us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>os thread creation</td><td align="right" headers="Event Waits" class='awrnclb'>8</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.35ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.41ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.16ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>357.14us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrclb'>22</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.21ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.13ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>.96ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.30ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>243.35us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache: bucket mutex X</td><td align="right" headers="Event Waits" class='awrnclb'>10</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.57ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.57ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.57ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.57ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: TT - contention</td><td align="right" headers="Event Waits" class='awrclb'>14</td><td align="right" headers="Event %Timeouts" class='awrc'>28.57</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.67ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.69ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.66ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.71ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>31.35us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: CO - master slave det</td><td align="right" headers="Event Waits" class='awrnclb'>11</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.96ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.96ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.96ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.96ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: FB - contention</td><td align="right" headers="Event Waits" class='awrclb'>12</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.40ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.35ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.65ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>434.63us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: SM -  contention</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.18ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.05ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.44ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>8.65ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.68ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Commit</td><td headers="Wait Event" class='awrc'>log file sync</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.72ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>14.72ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>14.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>14.72ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc buffer busy release</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>11.33ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>11.33ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>11.33ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>11.33ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: ges resource hash list</td><td align="right" headers="Event Waits" class='awrclb'>35</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>315.09us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>352.58us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>206.77us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>498.38us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>206.20us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>enq: PW - flush prewarm buffers</td><td align="right" headers="Event Waits" class='awrnclb'>9</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.21ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.21ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.21ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.21ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>cursor: pin S wait on X</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.24ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.24ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.24ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.24ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: WT - contention</td><td align="right" headers="Event Waits" class='awrnclb'>7</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.33ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.15ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>719.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.58ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>605.78us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>asynch descriptor resize</td><td align="right" headers="Event Waits" class='awrclb'>520</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>15.03us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>14.93us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>10.98us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>18.87us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>5.58us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: MGA heap latch</td><td align="right" headers="Event Waits" class='awrnclb'>46</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>134.57us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>132.42us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>120.05us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>144.78us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>17.48us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Network</td><td headers="Wait Event" class='awrc'>SQL*Net message to client</td><td align="right" headers="Event Waits" class='awrclb'>515</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.71us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>8.74us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.52us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.97us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.74us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: call allocation</td><td align="right" headers="Event Waits" class='awrnclb'>9</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>493.78us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>666.83us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>147.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.19ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>734.21us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>kfk: async disk IO</td><td align="right" headers="Event Waits" class='awrclb'>11</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>221.09us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>221.09us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>221.09us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>221.09us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>4</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>552.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>552.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>552.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>552.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: TD - KTF dump entries</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>902.50us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>902.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>902.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>902.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>name-service call wait</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>837.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>837.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>835.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>839.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.83us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: kjci process context latch</td><td align="right" headers="Event Waits" class='awrclb'>13</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>122.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>122.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>122.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>122.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>buffer busy waits</td><td align="right" headers="Event Waits" class='awrnclb'>4</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>378.25us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>403.17us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>353.33us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>453.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>70.47us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>wait list latch free</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.13ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.13ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.13ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.13ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache: mutex X</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.09ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.09ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.09ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.09ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>lock deadlock retry</td><td align="right" headers="Event Waits" class='awrclb'>21</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>45.19us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>51.48us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>25.08us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>77.88us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>37.33us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>GCR CSS group query</td><td align="right" headers="Event Waits" class='awrnclb'>40</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>23.63us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>23.63us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>16.60us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>30.65us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>9.93us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: RA - RT ADDM flood control</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>746.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>746.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>746.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>746.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>GCR CSS group update</td><td align="right" headers="Event Waits" class='awrnclb'>40</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>17.70us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>17.70us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>14.10us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>21.30us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>5.09us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS operation: action</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>299.50us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>299.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>299.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>299.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: shared pool</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>255.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>255.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>255.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>255.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: enqueue hash chains</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>102.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>102.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>102.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>102.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges resource directory to be unfrozen</td><td align="right" headers="Event Waits" class='awrnclb'>15</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.60us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.64us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.44us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.83us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>274.99ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>buffer deadlock</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>17.50us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>17.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>17.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>17.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>AWR Flush</td><td align="right" headers="Event Waits" class='awrnclb'>4</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.33us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.67us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.89us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>undo_retention publish retry</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.25us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.25us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>6.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>353.55ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Idle Wait</td><td align="right" headers="Event Waits" class='awrnclb'>207</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>86,023.29</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>415.57 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>12.51</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>415.65 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>410.33 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>420.97 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>7526.30ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>Space Manager: slave idle wait</td><td align="right" headers="Event Waits" class='awrclb'>12,994</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>56,291.63</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4332.12ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>8.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4332.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4330.34ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4333.83ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.47ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>rdbms ipc message</td><td align="right" headers="Event Waits" class='awrnclb'>131,866</td><td align="right" headers="Event %Timeouts" class='awrnc'>18.59</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>30,184.29</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>228.90ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>4.39</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>228.91ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>224.00ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>233.83ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>6.95ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>class slave wait</td><td align="right" headers="Event Waits" class='awrclb'>16,948</td><td align="right" headers="Event %Timeouts" class='awrc'>76.27</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>9,873.32</td><td align="right" headers="WaitTime AvgWait" class='awrc'>582.57ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>1.44</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>582.62ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>510.66ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>654.57ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>101.76ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>wait for unread message on broadcast channel</td><td align="right" headers="Event Waits" class='awrnclb'>2,016</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3,945.31</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1957.00ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.57</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1957.00ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1956.08ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1957.93ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.31ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>LMS CR slave timer</td><td align="right" headers="Event Waits" class='awrclb'>391,738</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3,937.37</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.05ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.57</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.05ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>10.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>10.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>27.35us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>gcs yield cpu</td><td align="right" headers="Event Waits" class='awrnclb'>139,466</td><td align="right" headers="Event %Timeouts" class='awrnc'>99.82</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3,871.10</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>27.76ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.56</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>27.76ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>27.56ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>27.96ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>281.76us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>pmon timer</td><td align="right" headers="Event Waits" class='awrclb'>877</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,630.92</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2999.91ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2999.91ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2999.89ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2999.93ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>25.77us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>ges remote message</td><td align="right" headers="Event Waits" class='awrnclb'>61,360</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,625.17</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>42.78ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>42.85ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>41.22ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>44.48ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.31ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>GCR sleep</td><td align="right" headers="Event Waits" class='awrclb'>8,735</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,624.55</td><td align="right" headers="WaitTime AvgWait" class='awrc'>300.46ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>300.46ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>300.40ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>300.53ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>96.74us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>DIAG idle wait</td><td align="right" headers="Event Waits" class='awrnclb'>20,693</td><td align="right" headers="Event %Timeouts" class='awrnc'>71.14</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,619.15</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>126.57ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>126.57ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>126.47ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>126.67ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>143.48us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>gcs remote message</td><td align="right" headers="Event Waits" class='awrclb'>3,381,974</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,548.39</td><td align="right" headers="WaitTime AvgWait" class='awrc'>753.52us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.37</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>754.38us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>741.40us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>767.35us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>18.35us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>shared server idle wait</td><td align="right" headers="Event Waits" class='awrnclb'>0</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,320.23</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>dispatcher timer</td><td align="right" headers="Event Waits" class='awrclb'>22</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,320.12</td><td align="right" headers="WaitTime AvgWait" class='awrc'>60.01 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>60.01 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>60.01 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>60.01 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>396.04us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>VKRM Idle</td><td align="right" headers="Event Waits" class='awrnclb'>0</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,320.10</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>AQPC idle</td><td align="right" headers="Event Waits" class='awrclb'>44</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,320.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>30.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>166.33us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Data Guard: Gap Manager</td><td align="right" headers="Event Waits" class='awrnclb'>22</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,320.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>60.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>369.62us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>pman timer</td><td align="right" headers="Event Waits" class='awrclb'>439</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,316.88</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2999.72ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2999.72ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2999.70ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2999.74ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>29.38us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Streams AQ: qmn coordinator idle wait</td><td align="right" headers="Event Waits" class='awrnclb'>97</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,316.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>13.57 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>13.57 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>13.42 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>13.71 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>210.46ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>Streams AQ: qmn slave idle wait</td><td align="right" headers="Event Waits" class='awrclb'>49</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,316.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>26.86 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>26.86 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>26.83 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>26.88 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>32.98ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>heartbeat redo informer</td><td align="right" headers="Event Waits" class='awrnclb'>1,315</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,315.25</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1000.19ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1000.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1000.18ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1000.20ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>14.70us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>Streams AQ: waiting for time management or cleanup tasks</td><td align="right" headers="Event Waits" class='awrclb'>0</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,315.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>ASM background timer</td><td align="right" headers="Event Waits" class='awrnclb'>4,487</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,314.43</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>292.94ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>292.95ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>290.89ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>295.02ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.91ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" headers="Event Waits" class='awrclb'>22</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,314.40</td><td align="right" headers="WaitTime AvgWait" class='awrc'>59.75 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>59.75 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>59.66 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>59.83 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>115.84ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>OFS idle</td><td align="right" headers="Event Waits" class='awrnclb'>438</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,314.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3000.08ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3000.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3000.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3000.14ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>71.49us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>ASM cluster membership changes</td><td align="right" headers="Event Waits" class='awrclb'>751</td><td align="right" headers="Event %Timeouts" class='awrc'>85.09</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,313.35</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1748.80ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1748.79ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1747.20ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1750.39ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.26ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>lreg timer</td><td align="right" headers="Event Waits" class='awrnclb'>437</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,312.18</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3002.71ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3002.71ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3002.63ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3002.79ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>111.42us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>SCM slave idle</td><td align="right" headers="Event Waits" class='awrclb'>13,242</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,307.06</td><td align="right" headers="WaitTime AvgWait" class='awrc'>98.71ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>98.71ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>98.44ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>98.98ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>383.50us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PING</td><td align="right" headers="Event Waits" class='awrnclb'>1,232</td><td align="right" headers="Event %Timeouts" class='awrnc'>18.02</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,300.58</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1055.67ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1055.95ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1038.83ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1073.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>24.21ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>Data Guard: Timer</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,200.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>600.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.17</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>600.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>600.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>600.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>625.79us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>smon timer</td><td align="right" headers="Event Waits" class='awrnclb'>40</td><td align="right" headers="Event %Timeouts" class='awrnc'>5.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,030.25</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>25.76 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.15</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>26.56 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>21.18 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>31.95 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>7619.26ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>LGWR worker group idle</td><td align="right" headers="Event Waits" class='awrclb'>27,353</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>952.55</td><td align="right" headers="WaitTime AvgWait" class='awrc'>34.82ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>34.27ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>26.63ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>41.91ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>10.80ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq: Parse Reply</td><td align="right" headers="Event Waits" class='awrnclb'>202</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>7.47</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>36.96ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>38.11ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>36.55ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>39.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.20ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq: Execute Reply</td><td align="right" headers="Event Waits" class='awrclb'>678</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>5.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.39ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>29.25ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.50ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>53.01ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>33.59ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq Credit: send blkd</td><td align="right" headers="Event Waits" class='awrnclb'>404</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.99</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.94ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.57ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.37ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.77ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.70ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>SQL*Net message from client</td><td align="right" headers="Event Waits" class='awrclb'>516</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.56</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.09ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.07ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>335.46us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.80ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.03ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>RMA: IPC0 completion sync</td><td align="right" headers="Event Waits" class='awrnclb'>1,422</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>24.53us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>24.54us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>22.93us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>26.16us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.29us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>heartbeat monitor sleep</td><td align="right" headers="Event Waits" class='awrclb'>102</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>304.59us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>329.90us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.20us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>652.60us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>456.36us</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12055"></a>
<h3 class="awr">Wait Event Histogram (Global)</h3>
<ul>
<li class="awr"> When % of Total Waits is  0.0 the count is displayed in parenthesis</li>
</ul>
<table border="0" class="tdiff" summary="This table displays wait event histogram information"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 22" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col" id="&lt;1us"> &lt;1us</th><th class="awrbg" scope="col" id="&lt;2us"> &lt;2us</th><th class="awrbg" scope="col" id="&lt;4us"> &lt;4us</th><th class="awrbg" scope="col" id="&lt;8us"> &lt;8us</th><th class="awrbg" scope="col" id="&lt;16us"> &lt;16us</th><th class="awrbg" scope="col" id="&lt;32us"> &lt;32us</th><th class="awrbg" scope="col" id="&lt;64us"> &lt;64us</th><th class="awrbg" scope="col" id="&lt;128us"> &lt;128us</th><th class="awrbg" scope="col" id="&lt;256us"> &lt;256us</th><th class="awrbg" scope="col" id="&lt;512us"> &lt;512us</th><th class="awrbg" scope="col" id="&lt;1ms"> &lt;1ms</th><th class="awrbg" scope="col" id="&lt;2ms"> &lt;2ms</th><th class="awrbg" scope="col" id="&lt;4ms"> &lt;4ms</th><th class="awrbg" scope="col" id="&lt;8ms"> &lt;8ms</th><th class="awrbg" scope="col" id="&lt;16ms"> &lt;16ms</th><th class="awrbg" scope="col" id="&lt;32ms"> &lt;32ms</th><th class="awrbg" scope="col" id="&lt;64ms"> &lt;64ms</th><th class="awrbg" scope="col" id="&lt;128ms"> &lt;128ms</th><th class="awrbg" scope="col" id="&lt;256ms"> &lt;256ms</th><th class="awrbg" scope="col" id="&lt;512ms"> &lt;512ms</th><th class="awrbg" scope="col" id="&lt;1s"> &lt;1s</th><th class="awrbg" scope="col" id="&gt;=1s"> &gt;=1s</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>13K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.0(5)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>88.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.0(5)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>454.9K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>0.0(143)</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>79.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.0(108)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.0(31)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>5813</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>27.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>23.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>21.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AWR Flush</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>90.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>13.5K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>83.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.0(6)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS initialization</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: action</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data query</td><td align="right" class='awrnc'>40</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>17.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>22.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data update</td><td align="right" class='awrc'>44</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>56.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>36.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: query</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DFS lock handle</td><td align="right" class='awrc'>1365</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>16.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>31.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>29.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>17.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>5123</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>71.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.2</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>1807</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>29.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>961</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>13.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>15.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>36.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group query</td><td align="right" class='awrc'>40</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>67.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group update</td><td align="right" class='awrnc'>40</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>90.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>3909</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>17.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>1051</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>17.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>31.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>35.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>1735</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>69.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>39.9K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>15.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.1</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>2548</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>21.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>17.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR all worker groups</td><td align="right" class='awrnc'>771</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>24.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>30.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>25.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR any worker group</td><td align="right" class='awrc'>17.6K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>19.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>20.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>21.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>652</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>13.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR worker group ordering</td><td align="right" class='awrc'>8347</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>34.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>19.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.0(4)</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PGA memory operation</td><td align="right" class='awrnc'>3229</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>17.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>28.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>18.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Join ACK</td><td align="right" class='awrc'>184</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>25.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>22.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>22.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>186</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>60.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>378</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>15.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>15.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>13.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>94.4K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>87.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.0(20)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.0(7)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.0(4)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX qref latch</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net break/reset to client</td><td align="right" class='awrnc'>130</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>29.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>25.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>18.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message to client</td><td align="right" class='awrc'>1679</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>87.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>108</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>38.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>asynch descriptor resize</td><td align="right" class='awrc'>522</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>77.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>16</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>43.8</td></tr>
<tr><td scope="row" class='awrc'>buffer deadlock</td><td align="right" class='awrc'>9</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>77.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>638</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>43.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>7747</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>12.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>34.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>27.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cursor: mutex S</td><td align="right" class='awrnc'>859</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>91.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cursor: mutex X</td><td align="right" class='awrc'>2751</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>26.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>20.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>22.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cursor: pin S</td><td align="right" class='awrnc'>17</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>82.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cursor: pin S wait on X</td><td align="right" class='awrc'>476</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>24.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>36.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.8</td></tr>
<tr><td scope="row" class='awrnc'>db file async I/O submit</td><td align="right" class='awrnc'>333.8K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>95.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.0(88)</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.0(47)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.0(21)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>403.6K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>39.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>19.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>15.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>445.6K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.0(57)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>22.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>31.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.0(65)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.0(14)</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file scattered read</td><td align="right" class='awrc'>80</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>66.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>17.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>4.9M</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(48)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>21.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>47.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.0(2005)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.0(244)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>direct path read</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path write</td><td align="right" class='awrnc'>145</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>13.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>18.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>32.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>direct path write temp</td><td align="right" class='awrc'>150</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: AF - task serialization</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CF - contention</td><td align="right" class='awrc'>100</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>41.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>23.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: CO - master slave det</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>45.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>378</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>30.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>18.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.3</td></tr>
<tr><td scope="row" class='awrnc'>enq: DW - contention</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>24</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>54.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>22</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>227</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>37.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>24.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: PW - flush prewarm buffers</td><td align="right" class='awrnc'>9</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>88.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: RA - RT ADDM flood control</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: RO - fast object reuse</td><td align="right" class='awrnc'>385</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>34.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.5</td></tr>
<tr><td scope="row" class='awrc'>enq: SM -  contention</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TA - contention</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TD - KTF dump entries</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TM - contention</td><td align="right" class='awrnc'>207</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>30.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>24.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>4.3</td></tr>
<tr><td scope="row" class='awrc'>enq: TO - contention</td><td align="right" class='awrc'>31</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>45.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>22.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TT - contention</td><td align="right" class='awrnc'>17</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>23.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>41.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: US - contention</td><td align="right" class='awrc'>17</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>35.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>52.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: WF - contention</td><td align="right" class='awrnc'>34</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>47.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>23.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: WT - contention</td><td align="right" class='awrc'>19</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>52.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>31.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy acquire</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>5429</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>23.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>23.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.2</td></tr>
<tr><td scope="row" class='awrc'>gc cr block busy</td><td align="right" class='awrc'>132</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>21.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>22.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>25.8</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>1.5</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block congested</td><td align="right" class='awrnc'>891</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>17.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>44.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>31.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.2</td></tr>
<tr><td scope="row" class='awrc'>gc cr block lost</td><td align="right" class='awrc'>792</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>24.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>71.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>3.7</td></tr>
<tr><td scope="row" class='awrnc'>gc cr disk read</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>4801</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>12.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>26.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>34.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.2</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>425.2K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.0(17)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.0(11)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(20)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.0(55)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>9.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>1.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant congested</td><td align="right" class='awrc'>921</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>53.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>26.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.2</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>400.3K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.0(16)</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>25.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>18.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>3.8</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>2646</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>36.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>6.8</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>714</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>26.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>16.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>21.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>32.7K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>27.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>23.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.0(13)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.0(5)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.2</td></tr>
<tr><td scope="row" class='awrnc'>gc current block congested</td><td align="right" class='awrnc'>5272</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>20.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>45.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>26.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.2</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>3141</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>25.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>70.5</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>3.5</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>33.7K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>26.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.2</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>2.2M</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.0(7)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.0(100)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.0(46)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.0(127)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.0(315)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>19.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>16.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>1.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>6694</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>16.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>47.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>23.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.3</td></tr>
<tr><td scope="row" class='awrc'>gc current multi block request</td><td align="right" class='awrc'>46</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>30.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>4.3</td></tr>
<tr><td scope="row" class='awrnc'>gc current retry</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs log flush sync</td><td align="right" class='awrc'>14.2K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>18.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges DFS hang analysis phase 2 acks</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges inquiry response</td><td align="right" class='awrc'>185</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>42.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges message buffer allocation</td><td align="right" class='awrnc'>17</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>76.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges resource directory to be unfrozen</td><td align="right" class='awrc'>19</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>94.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kfk: async disk IO</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>45.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kksfbc child completion</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>92.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksxr poll remote instances</td><td align="right" class='awrnc'>2832</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>85.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch free</td><td align="right" class='awrc'>14.1K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>19.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA heap latch</td><td align="right" class='awrnc'>46</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>23.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context latch</td><td align="right" class='awrc'>84</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>22.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>13.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context root latch</td><td align="right" class='awrnc'>143</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>21.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>17.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>350</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>31.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>13.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers lru chain</td><td align="right" class='awrnc'>3873</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>24.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>12.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: call allocation</td><td align="right" class='awrc'>32</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>28.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: checkpoint queue latch</td><td align="right" class='awrnc'>112</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: enqueue hash chains</td><td align="right" class='awrc'>16</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>12.9K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>19.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>1587</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: ges resource hash list</td><td align="right" class='awrnc'>226</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>23.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: kjci process context latch</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>38.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>94</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>27.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>18.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>852</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>17.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo allocation</td><td align="right" class='awrnc'>8219</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>13.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: redo copy</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo writing</td><td align="right" class='awrnc'>159</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>17.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>22.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: shared pool</td><td align="right" class='awrc'>58</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>27.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>17.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: undo global data</td><td align="right" class='awrnc'>26</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>libcache interrupt action by LCK</td><td align="right" class='awrc'>15.9K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>96.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.0(7)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache lock</td><td align="right" class='awrnc'>1450</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>23.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>39.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>17.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.1</td></tr>
<tr><td scope="row" class='awrc'>library cache pin</td><td align="right" class='awrc'>1367</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>27.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>43.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache: bucket mutex X</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>30.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>70.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache: mutex X</td><td align="right" class='awrc'>984</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>24.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>20.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>23.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lock deadlock retry</td><td align="right" class='awrnc'>3126</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>78.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>42.5K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>43.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>23.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>13.8</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.0(1)</td></tr>
<tr><td scope="row" class='awrnc'>log file sequential read</td><td align="right" class='awrnc'>926</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>29.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>22.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file sync</td><td align="right" class='awrc'>296</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>26.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>35.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>20.9</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service call wait</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>oracle thread bootstrap</td><td align="right" class='awrc'>9</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>77.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>os thread creation</td><td align="right" class='awrnc'>9</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>88.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>308</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>27.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>31.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>1.3</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>130</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>14.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>36.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>37.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>row cache mutex</td><td align="right" class='awrc'>76</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>9.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>22.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>14.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>9.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>undo segment extension</td><td align="right" class='awrnc'>42</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>undo_retention publish retry</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>75.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>wait list latch free</td><td align="right" class='awrnc'>16</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>87.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="639"></a>
<h2 class="awr">
Global Activity Load Profile
</h2>
<ul>
<li class="awr"><a class="awr" href="#12016">System Statistics</a></li>
<li class="awr"><a class="awr" href="#12017">System Statistics - Per Second</a></li>
<li class="awr"><a class="awr" href="#12018">System Statistics - Per Transaction</a></li>
<li class="awr"><a class="awr" href="#12030">SysStat and Global Messaging  - RAC</a></li>
<li class="awr"><a class="awr" href="#12031">SysStat and Global Messaging (per Sec)- RAC</a></li>
<li class="awr"><a class="awr" href="#12032">SysStat and Global Messaging (per Tx)- RAC</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12016"></a>
<h3 class="awr">System Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">Redo Size (k)</th><th class="awrbg" scope="col">Block Changes</th><th class="awrbg" scope="col">User Calls</th><th class="awrbg" scope="col">Execs</th><th class="awrbg" scope="col">Parses</th><th class="awrbg" scope="col">Logons</th><th class="awrbg" scope="col">Txns</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>17,727,484</td><td align="right" class='awrc'>14,932,774</td><td align="right" class='awrc'>2,553,257</td><td align="right" class='awrc'>2,022,043</td><td align="right" class='awrc'>5,286,019</td><td align="right" class='awrc'>2,138</td><td align="right" class='awrc'>279,199</td><td align="right" class='awrc'>11,400</td><td align="right" class='awrc'>105</td><td align="right" class='awrc'>40,508</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>14,774,155</td><td align="right" class='awrnc'>12,450,491</td><td align="right" class='awrnc'>2,091,508</td><td align="right" class='awrnc'>1,657,486</td><td align="right" class='awrnc'>4,340,673</td><td align="right" class='awrnc'>2,060</td><td align="right" class='awrnc'>244,986</td><td align="right" class='awrnc'>10,502</td><td align="right" class='awrnc'>99</td><td align="right" class='awrnc'>33,348</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>32,501,639</td><td align="right" class='awrct'>27,383,265</td><td align="right" class='awrct'>4,644,765</td><td align="right" class='awrct'>3,679,529</td><td align="right" class='awrct'>9,626,692</td><td align="right" class='awrct'>4,198</td><td align="right" class='awrct'>524,185</td><td align="right" class='awrct'>21,902</td><td align="right" class='awrct'>204</td><td align="right" class='awrct'>73,856</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>16,250,820</td><td align="right" class='awrnc'>13,691,633</td><td align="right" class='awrnc'>2,322,383</td><td align="right" class='awrnc'>1,839,765</td><td align="right" class='awrnc'>4,813,346</td><td align="right" class='awrnc'>2,099</td><td align="right" class='awrnc'>262,093</td><td align="right" class='awrnc'>10,951</td><td align="right" class='awrnc'>102</td><td align="right" class='awrnc'>36,928</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>2,088,319</td><td align="right" class='awrc'>1,755,239</td><td align="right" class='awrc'>326,506</td><td align="right" class='awrc'>257,781</td><td align="right" class='awrc'>668,461</td><td align="right" class='awrc'>55</td><td align="right" class='awrc'>24,192</td><td align="right" class='awrc'>635</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>5,063</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12017"></a>
<h3 class="awr">System Statistics - Per Second</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics - Per Second"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads/s</th><th class="awrbg" scope="col">Physical Reads/s</th><th class="awrbg" scope="col">Physical Writes/s</th><th class="awrbg" scope="col">Redo Size (k)/s</th><th class="awrbg" scope="col">Block Changes/s</th><th class="awrbg" scope="col">User Calls/s</th><th class="awrbg" scope="col">Execs/s</th><th class="awrbg" scope="col">Parses/s</th><th class="awrbg" scope="col">Logons/s</th><th class="awrbg" scope="col">Txns/s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>26,827.96</td><td align="right" class='awrc'>22,598.57</td><td align="right" class='awrc'>3,863.98</td><td align="right" class='awrc'>3,060.07</td><td align="right" class='awrc'>7,999.62</td><td align="right" class='awrc'>3.24</td><td align="right" class='awrc'>422.53</td><td align="right" class='awrc'>17.25</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>61.30</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>22,360.15</td><td align="right" class='awrnc'>18,843.37</td><td align="right" class='awrnc'>3,165.42</td><td align="right" class='awrnc'>2,508.54</td><td align="right" class='awrnc'>6,569.45</td><td align="right" class='awrnc'>3.12</td><td align="right" class='awrnc'>370.78</td><td align="right" class='awrnc'>15.89</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>50.47</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>49,188.10</td><td align="right" class='awrct'>41,441.94</td><td align="right" class='awrct'>7,029.40</td><td align="right" class='awrct'>5,568.61</td><td align="right" class='awrct'>14,569.07</td><td align="right" class='awrct'>6.35</td><td align="right" class='awrct'>793.30</td><td align="right" class='awrct'>33.15</td><td align="right" class='awrct'>0.31</td><td align="right" class='awrct'>111.77</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>24,594.05</td><td align="right" class='awrnc'>20,720.97</td><td align="right" class='awrnc'>3,514.70</td><td align="right" class='awrnc'>2,784.31</td><td align="right" class='awrnc'>7,284.53</td><td align="right" class='awrnc'>3.18</td><td align="right" class='awrnc'>396.65</td><td align="right" class='awrnc'>16.57</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>55.89</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>3,159.22</td><td align="right" class='awrc'>2,655.33</td><td align="right" class='awrc'>493.96</td><td align="right" class='awrc'>389.99</td><td align="right" class='awrc'>1,011.28</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>36.59</td><td align="right" class='awrc'>0.96</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>7.66</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12018"></a>
<h3 class="awr">System Statistics - Per Transaction</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics - Per Transaction"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads/tx</th><th class="awrbg" scope="col">Physical Reads/tx</th><th class="awrbg" scope="col">Physical Writes/tx</th><th class="awrbg" scope="col">Redo Size (k)/tx</th><th class="awrbg" scope="col">Block Changes/tx</th><th class="awrbg" scope="col">User Calls/tx</th><th class="awrbg" scope="col">Execs/tx</th><th class="awrbg" scope="col">Parses/tx</th><th class="awrbg" scope="col">Logons/tx</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>437.63</td><td align="right" class='awrc'>368.64</td><td align="right" class='awrc'>63.03</td><td align="right" class='awrc'>49.92</td><td align="right" class='awrc'>130.49</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>6.89</td><td align="right" class='awrc'>0.28</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>443.03</td><td align="right" class='awrnc'>373.35</td><td align="right" class='awrnc'>62.72</td><td align="right" class='awrnc'>49.70</td><td align="right" class='awrnc'>130.16</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>7.35</td><td align="right" class='awrnc'>0.31</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>440.33</td><td align="right" class='awrct'>370.99</td><td align="right" class='awrct'>62.87</td><td align="right" class='awrct'>49.81</td><td align="right" class='awrct'>130.33</td><td align="right" class='awrct'>0.06</td><td align="right" class='awrct'>7.12</td><td align="right" class='awrct'>0.30</td><td align="right" class='awrct'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12030"></a>
<h3 class="awr">SysStat and Global Messaging  - RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging  - RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceived">Blocks Received</th>
<th class="awrbg" colspan=" 2" id="BlocksServed">Blocks Served</th>
<th class="awrbg" colspan=" 2" id="CPU(seconds)">CPU (seconds)</th>
<th class="awrbg" colspan=" 6" id="Messages">Messages</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent </th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost">Lost</th><th class="awrbg" scope="col" id="Failure">Failure</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceived GCCurrent" class='awrclb'>23,633</td><td align="right" headers="BlocksReceived GCCR" class='awrc'>26,767</td><td align="right" headers="BlocksServed GCCurrent" class='awrclb'>17,638</td><td align="right" headers="BlocksServed GCCR" class='awrc'>33,524</td><td align="right" headers="CPU(seconds) GC" class='awrclb'>&#160;</td><td align="right" headers="CPU(seconds) IPC" class='awrc'>0</td><td align="right" headers="Messages GCSReceived" class='awrclb'>21,280,364</td><td align="right" headers="Messages GESReceived" class='awrc'>21,541</td><td align="right" headers="Messages GCSSent" class='awrc'>22,733,090</td><td align="right" headers="Messages GESSent" class='awrc'>11,756</td><td align="right" headers="Messages SentDirect" class='awrc'>1,497,260</td><td align="right" headers="Messages SentIndir" class='awrc'>8,722,126</td><td align="right" headers="GCBlks Lost" class='awrclb'>4,191</td><td align="right" headers="GCCR Failure" class='awrcbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceived GCCurrent" class='awrnclb'>16,924</td><td align="right" headers="BlocksReceived GCCR" class='awrnc'>24,848</td><td align="right" headers="BlocksServed GCCurrent" class='awrnclb'>23,164</td><td align="right" headers="BlocksServed GCCR" class='awrnc'>28,910</td><td align="right" headers="CPU(seconds) GC" class='awrnclb'>&#160;</td><td align="right" headers="CPU(seconds) IPC" class='awrnc'>0</td><td align="right" headers="Messages GCSReceived" class='awrnclb'>22,453,045</td><td align="right" headers="Messages GESReceived" class='awrnc'>11,455</td><td align="right" headers="Messages GCSSent" class='awrnc'>21,120,714</td><td align="right" headers="Messages GESSent" class='awrnc'>21,315</td><td align="right" headers="Messages SentDirect" class='awrnc'>1,234,316</td><td align="right" headers="Messages SentIndir" class='awrnc'>7,233,442</td><td align="right" headers="GCBlks Lost" class='awrnclb'>10,959</td><td align="right" headers="GCCR Failure" class='awrncbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>40,557</td><td align="right" class='awrct'>51,615</td><td align="right" class='awrclbt'>40,802</td><td align="right" class='awrct'>62,434</td><td align="right" class='awrclbt'>0</td><td align="right" class='awrct'>0</td><td align="right" class='awrclbt'>43,733,409</td><td align="right" class='awrct'>32,996</td><td align="right" class='awrct'>43,853,804</td><td align="right" class='awrct'>33,071</td><td align="right" class='awrct'>2,731,576</td><td align="right" class='awrct'>15,955,568</td><td align="right" class='awrclbt'>15,150</td><td align="right" class='awrcbbt'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>20,279</td><td align="right" class='awrnc'>25,808</td><td align="right" class='awrnclb'>20,401</td><td align="right" class='awrnc'>31,217</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>21,866,705</td><td align="right" class='awrnc'>16,498</td><td align="right" class='awrnc'>21,926,902</td><td align="right" class='awrnc'>16,536</td><td align="right" class='awrnc'>1,365,788</td><td align="right" class='awrnc'>7,977,784</td><td align="right" class='awrnclb'>7,575</td><td align="right" class='awrncbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>4,744</td><td align="right" class='awrc'>1,357</td><td align="right" class='awrclb'>3,907</td><td align="right" class='awrc'>3,263</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>829,211</td><td align="right" class='awrc'>7,132</td><td align="right" class='awrc'>1,140,122</td><td align="right" class='awrc'>6,759</td><td align="right" class='awrc'>185,929</td><td align="right" class='awrc'>1,052,659</td><td align="right" class='awrclb'>4,786</td><td align="right" class='awrcbb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12031"></a>
<h3 class="awr">SysStat and Global Messaging (per Sec)- RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging (per Sec)- RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceivedPerSecond">Blocks Received Per Second</th>
<th class="awrbg" colspan=" 2" id="BlocksServedperSecond">Blocks Served per Second</th>
<th class="awrbg" colspan=" 2" id="CPUsecondsperSecond">CPU seconds per Second</th>
<th class="awrbg" colspan=" 6" id="MessagesPerSecond">Messages Per Second</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent</th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost/s">Lost/s</th><th class="awrbg" scope="col" id="Fail/s">Fail/s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceivedPerSecond GCCurrent" class='awrclb'>35.77</td><td align="right" headers="BlocksReceivedPerSecond GCCR" class='awrc'>40.51</td><td align="right" headers="BlocksServedperSecond GCCurrent" class='awrclb'>26.69</td><td align="right" headers="BlocksServedperSecond GCCR" class='awrc'>50.73</td><td align="right" headers="CPUsecondsperSecond GC" class='awrclb'>&#160;</td><td align="right" headers="CPUsecondsperSecond IPC" class='awrc'>0.00</td><td align="right" headers="MessagesPerSecond GCSReceived" class='awrclb'>32,204.72</td><td align="right" headers="MessagesPerSecond GESReceived" class='awrc'>32.60</td><td align="right" headers="MessagesPerSecond GCSSent" class='awrc'>34,403.21</td><td align="right" headers="MessagesPerSecond GESSent" class='awrc'>17.79</td><td align="right" headers="MessagesPerSecond SentDirect" class='awrc'>2,265.88</td><td align="right" headers="MessagesPerSecond SentIndir" class='awrc'>13,199.66</td><td align="right" headers="GCBlks Lost/s" class='awrclb'>6</td><td align="right" headers="GCCR Fail/s" class='awrcbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceivedPerSecond GCCurrent" class='awrnclb'>25.61</td><td align="right" headers="BlocksReceivedPerSecond GCCR" class='awrnc'>37.61</td><td align="right" headers="BlocksServedperSecond GCCurrent" class='awrnclb'>35.06</td><td align="right" headers="BlocksServedperSecond GCCR" class='awrnc'>43.75</td><td align="right" headers="CPUsecondsperSecond GC" class='awrnclb'>&#160;</td><td align="right" headers="CPUsecondsperSecond IPC" class='awrnc'>0.00</td><td align="right" headers="MessagesPerSecond GCSReceived" class='awrnclb'>33,981.87</td><td align="right" headers="MessagesPerSecond GESReceived" class='awrnc'>17.34</td><td align="right" headers="MessagesPerSecond GCSSent" class='awrnc'>31,965.44</td><td align="right" headers="MessagesPerSecond GESSent" class='awrnc'>32.26</td><td align="right" headers="MessagesPerSecond SentDirect" class='awrnc'>1,868.09</td><td align="right" headers="MessagesPerSecond SentIndir" class='awrnc'>10,947.55</td><td align="right" headers="GCBlks Lost/s" class='awrnclb'>17</td><td align="right" headers="GCCR Fail/s" class='awrncbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>61.38</td><td align="right" class='awrct'>78.11</td><td align="right" class='awrclbt'>61.75</td><td align="right" class='awrct'>94.49</td><td align="right" class='awrclbt'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>66,186.59</td><td align="right" class='awrct'>49.94</td><td align="right" class='awrct'>66,368.64</td><td align="right" class='awrct'>50.05</td><td align="right" class='awrct'>4,133.98</td><td align="right" class='awrct'>24,147.22</td><td align="right" class='awrclbt'>23</td><td align="right" class='awrcbbt'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>30.69</td><td align="right" class='awrnc'>39.06</td><td align="right" class='awrnclb'>30.88</td><td align="right" class='awrnc'>47.24</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnclb'>33,093.30</td><td align="right" class='awrnc'>24.97</td><td align="right" class='awrnc'>33,184.32</td><td align="right" class='awrnc'>25.03</td><td align="right" class='awrnc'>2,066.99</td><td align="right" class='awrnc'>12,073.61</td><td align="right" class='awrnclb'>11</td><td align="right" class='awrncbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>7.18</td><td align="right" class='awrc'>2.05</td><td align="right" class='awrclb'>5.92</td><td align="right" class='awrc'>4.94</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrclb'>1,256.63</td><td align="right" class='awrc'>10.79</td><td align="right" class='awrc'>1,723.77</td><td align="right" class='awrc'>10.23</td><td align="right" class='awrc'>281.28</td><td align="right" class='awrc'>1,592.48</td><td align="right" class='awrclb'>7</td><td align="right" class='awrcbb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12032"></a>
<h3 class="awr">SysStat and Global Messaging (per Tx)- RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging (per Tx)- RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceivedperTx">Blocks Received per Tx</th>
<th class="awrbg" colspan=" 2" id="BlocksServed">Blocks Served</th>
<th class="awrbg" colspan=" 2" id="CPU(seconds)perTx">CPU (seconds) per Tx</th>
<th class="awrbg" colspan=" 6" id="MessagesperTransaction">Messages per Transaction</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent </th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost/Tx">Lost/Tx</th><th class="awrbg" scope="col" id="Fail/Tx">Fail/Tx</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceivedperTx GCCurrent" class='awrclb'>0.58</td><td align="right" headers="BlocksReceivedperTx GCCR" class='awrc'>0.66</td><td align="right" headers="BlocksServed GCCurrent" class='awrclb'>0.44</td><td align="right" headers="BlocksServed GCCR" class='awrc'>0.83</td><td align="right" headers="CPU(seconds)perTx GC" class='awrclb'>&#160;</td><td align="right" headers="CPU(seconds)perTx IPC" class='awrc'>0.00</td><td align="right" headers="MessagesperTransaction GCSReceived" class='awrclb'>525.34</td><td align="right" headers="MessagesperTransaction GESReceived" class='awrc'>0.53</td><td align="right" headers="MessagesperTransaction GCSSent" class='awrc'>561.20</td><td align="right" headers="MessagesperTransaction GESSent" class='awrc'>0.29</td><td align="right" headers="MessagesperTransaction SentDirect" class='awrc'>36.96</td><td align="right" headers="MessagesperTransaction SentIndir" class='awrc'>215.32</td><td align="right" headers="GCBlks Lost/Tx" class='awrclb'>0.10</td><td align="right" headers="GCCR Fail/Tx" class='awrcbb'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceivedperTx GCCurrent" class='awrnclb'>0.51</td><td align="right" headers="BlocksReceivedperTx GCCR" class='awrnc'>0.75</td><td align="right" headers="BlocksServed GCCurrent" class='awrnclb'>0.69</td><td align="right" headers="BlocksServed GCCR" class='awrnc'>0.87</td><td align="right" headers="CPU(seconds)perTx GC" class='awrnclb'>&#160;</td><td align="right" headers="CPU(seconds)perTx IPC" class='awrnc'>0.00</td><td align="right" headers="MessagesperTransaction GCSReceived" class='awrnclb'>673.30</td><td align="right" headers="MessagesperTransaction GESReceived" class='awrnc'>0.34</td><td align="right" headers="MessagesperTransaction GCSSent" class='awrnc'>633.34</td><td align="right" headers="MessagesperTransaction GESSent" class='awrnc'>0.64</td><td align="right" headers="MessagesperTransaction SentDirect" class='awrnc'>37.01</td><td align="right" headers="MessagesperTransaction SentIndir" class='awrnc'>216.91</td><td align="right" headers="GCBlks Lost/Tx" class='awrnclb'>0.33</td><td align="right" headers="GCCR Fail/Tx" class='awrncbb'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>0.55</td><td align="right" class='awrct'>0.70</td><td align="right" class='awrclbt'>0.57</td><td align="right" class='awrct'>0.85</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>599.32</td><td align="right" class='awrct'>0.44</td><td align="right" class='awrct'>597.27</td><td align="right" class='awrct'>0.46</td><td align="right" class='awrct'>36.99</td><td align="right" class='awrct'>216.11</td><td align="right" class='awrclbt'>0.22</td><td align="right" class='awrcbbt'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="605"></a>
<h2 class="awr">
Global Cache and Enqueue Statistics Summary
</h2>
<ul>
<li class="awr"><a class="awr" href="#12019">Global Cache Efficiency Percentages</a></li>
<li class="awr"><a class="awr" href="#12020">Global Latency Characteristics</a></li>
<li class="awr"><a class="awr" href="#12021">Global Messaging Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12019"></a>
<h3 class="awr">Global Cache Efficiency Percentages</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Cache Efficiency Percentages"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="BufferAccess">Buffer Access</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Local%">Local %</th><th class="awrbg" scope="col" id="Remote%">Remote %</th><th class="awrbg" scope="col" id="Disk%">Disk %</th><th class="awrbg" scope="col">Locality %</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BufferAccess Local%" class='awrclb'>15.48</td><td align="right" headers="BufferAccess Remote%" class='awrc'>0.28</td><td align="right" headers="BufferAccess Disk%" class='awrcrb'>84.24</td><td align="right" class='awrc'>50.29</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BufferAccess Local%" class='awrnclb'>15.43</td><td align="right" headers="BufferAccess Remote%" class='awrnc'>0.28</td><td align="right" headers="BufferAccess Disk%" class='awrncrb'>84.28</td><td align="right" class='awrnc'>50.26</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12020"></a>
<h3 class="awr">Global Latency Characteristics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Latency Characteristics"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CRBlocks">CR Blocks</th>
<th class="awrbg" colspan=" 4" id="CUBlocks">CU Blocks</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">GE Get Time (us)</th><th class="awrbg" scope="col" id="Receive|Time(us)">Receive Time (us)</th><th class="awrbg" scope="col" id="Build|Time(us)">Build Time (us)</th><th class="awrbg" scope="col" id="Flush|Time(us)">Flush Time (us)</th><th class="awrbg" scope="col" id="LogFlush|CRSrvd%">Log Flush CR Srvd %</th><th class="awrbg" scope="col" id="Receive|Time(us)">Receive Time (us)</th><th class="awrbg" scope="col" id="Pin|Time(us)">Pin Time (us)</th><th class="awrbg" scope="col" id="Flush|Time(us)">Flush Time (us)</th><th class="awrbg" scope="col" id="LogFlush|CUSrvd%">Log Flush CU Srvd %</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>4137</td><td align="right" headers="CRBlocks Receive|Time(us)" class='awrclb'>63812</td><td align="right" headers="CRBlocks Build|Time(us)" class='awrc'>64</td><td align="right" headers="CRBlocks Flush|Time(us)" class='awrc'>42308</td><td align="right" headers="CRBlocks LogFlush|CRSrvd%" class='awrc'>0.08</td><td align="right" headers="CUBlocks Receive|Time(us)" class='awrclb'>26179</td><td align="right" headers="CUBlocks Pin|Time(us)" class='awrc'>&#160;</td><td align="right" headers="CUBlocks Flush|Time(us)" class='awrc'>60000</td><td align="right" headers="CUBlocks LogFlush|CUSrvd%" class='awrcrb'>0.13</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>484</td><td align="right" headers="CRBlocks Receive|Time(us)" class='awrnclb'>35598</td><td align="right" headers="CRBlocks Build|Time(us)" class='awrnc'>99</td><td align="right" headers="CRBlocks Flush|Time(us)" class='awrnc'>60632</td><td align="right" headers="CRBlocks LogFlush|CRSrvd%" class='awrnc'>0.60</td><td align="right" headers="CUBlocks Receive|Time(us)" class='awrnclb'>15231</td><td align="right" headers="CUBlocks Pin|Time(us)" class='awrnc'>2000</td><td align="right" headers="CUBlocks Flush|Time(us)" class='awrnc'>56875</td><td align="right" headers="CUBlocks LogFlush|CUSrvd%" class='awrncrb'>0.14</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12021"></a>
<h3 class="awr">Global Messaging Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Messaging Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="QueueTime(us)">Queue Time (us)</th>
<th class="awrbg" colspan=" 2" id="ProcessTime(us)">Process Time (us)</th>
<th class="awrbg" colspan=" 3" id="%MessagesSent">% Messages Sent</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Sent">Sent</th><th class="awrbg" scope="col" id="onksxp">on ksxp</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="GCSmsgs">GCS msgs</th><th class="awrbg" scope="col" id="GESmsgs">GES msgs</th><th class="awrbg" scope="col" id="Direct">Direct</th><th class="awrbg" scope="col" id="Indirect">Indirect</th><th class="awrbg" scope="col" id="FlowCtrl">Flow Ctrl</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="QueueTime(us) Sent" class='awrclb'>4805</td><td align="right" headers="QueueTime(us) onksxp" class='awrc'>57604</td><td align="right" headers="QueueTime(us) Received" class='awrc'>72</td><td align="right" headers="ProcessTime(us) GCSmsgs" class='awrclb'>22</td><td align="right" headers="ProcessTime(us) GESmsgs" class='awrc'>25</td><td align="right" headers="%MessagesSent Direct" class='awrclb'>14.65</td><td align="right" headers="%MessagesSent Indirect" class='awrc'>85.33</td><td align="right" headers="%MessagesSent FlowCtrl" class='awrcrb'>0.02</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="QueueTime(us) Sent" class='awrnclb'>2952</td><td align="right" headers="QueueTime(us) onksxp" class='awrnc'>31973</td><td align="right" headers="QueueTime(us) Received" class='awrnc'>135</td><td align="right" headers="ProcessTime(us) GCSmsgs" class='awrnclb'>24</td><td align="right" headers="ProcessTime(us) GESmsgs" class='awrnc'>46</td><td align="right" headers="%MessagesSent Direct" class='awrnclb'>14.56</td><td align="right" headers="%MessagesSent Indirect" class='awrnc'>85.31</td><td align="right" headers="%MessagesSent FlowCtrl" class='awrncrb'>0.13</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12033"></a>
<h3 class="awr">Global CR Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global CR Server Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 5" id="BlockRequests">Block Requests</th>
<th class="awrbg" colspan=" 5" id="Results">Results</th>
<th class="awrbg" colspan=" 1" id="Fairness">Fairness</th>
<th class="awrbg" colspan=" 1" id="Light">Light</th>
<th class="awrbg" colspan=" 3" id="Total">Total</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="CR">CR</th><th class="awrbg" scope="col" id="CU">CU</th><th class="awrbg" scope="col" id="Data">Data</th><th class="awrbg" scope="col" id="Undo">Undo</th><th class="awrbg" scope="col" id="TX">TX</th><th class="awrbg" scope="col" id="Current">Current</th><th class="awrbg" scope="col" id="Private">Private</th><th class="awrbg" scope="col" id="Zero">Zero</th><th class="awrbg" scope="col" id="DskRd">Dsk Rd</th><th class="awrbg" scope="col" id="Fail">Fail</th><th class="awrbg" scope="col" id="DownConv">Down Conv</th><th class="awrbg" scope="col" id="Works">Works</th><th class="awrbg" scope="col" id="Flushes">Flushes</th><th class="awrbg" scope="col" id="Builds">Builds</th><th class="awrbg" scope="col" id="Errors">Errors</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlockRequests CR" class='awrclb'>33,371</td><td align="right" headers="BlockRequests CU" class='awrc'>81</td><td align="right" headers="BlockRequests Data" class='awrc'>33,371</td><td align="right" headers="BlockRequests Undo" class='awrc'>0</td><td align="right" headers="BlockRequests TX" class='awrc'>12</td><td align="right" headers="Results Current" class='awrclb'>33,425</td><td align="right" headers="Results Private" class='awrc'>0</td><td align="right" headers="Results Zero" class='awrc'>14</td><td align="right" headers="Results DskRd" class='awrc'>0</td><td align="right" headers="Results Fail" class='awrc'>3</td><td align="right" headers="Fairness DownConv" class='awrclb'>33,228</td><td align="right" headers="Light Works" class='awrclb'>18,343</td><td align="right" headers="Total Flushes" class='awrclb'>26</td><td align="right" headers="Total Builds" class='awrc'>33,349</td><td align="right" headers="Total Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlockRequests CR" class='awrnclb'>25,615</td><td align="right" headers="BlockRequests CU" class='awrnc'>3,022</td><td align="right" headers="BlockRequests Data" class='awrnc'>25,615</td><td align="right" headers="BlockRequests Undo" class='awrnc'>0</td><td align="right" headers="BlockRequests TX" class='awrnc'>2,957</td><td align="right" headers="Results Current" class='awrnclb'>28,634</td><td align="right" headers="Results Private" class='awrnc'>1</td><td align="right" headers="Results Zero" class='awrnc'>0</td><td align="right" headers="Results DskRd" class='awrnc'>5</td><td align="right" headers="Results Fail" class='awrnc'>0</td><td align="right" headers="Fairness DownConv" class='awrnclb'>25,403</td><td align="right" headers="Light Works" class='awrnclb'>20,364</td><td align="right" headers="Total Flushes" class='awrnclb'>174</td><td align="right" headers="Total Builds" class='awrnc'>25,620</td><td align="right" headers="Total Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>58,986</td><td align="right" class='awrct'>3,103</td><td align="right" class='awrct'>58,986</td><td align="right" class='awrct'>0</td><td align="right" class='awrct'>2,969</td><td align="right" class='awrclbt'>62,059</td><td align="right" class='awrct'>1</td><td align="right" class='awrct'>14</td><td align="right" class='awrct'>5</td><td align="right" class='awrct'>3</td><td align="right" class='awrclbt'>58,631</td><td align="right" class='awrclbt'>38,707</td><td align="right" class='awrclbt'>200</td><td align="right" class='awrct'>58,969</td><td align="right" class='awrcrbt'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>29,493</td><td align="right" class='awrnc'>1,552</td><td align="right" class='awrnc'>29,493</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,485</td><td align="right" class='awrnclb'>31,030</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnclb'>29,316</td><td align="right" class='awrnclb'>19,354</td><td align="right" class='awrnclb'>100</td><td align="right" class='awrnc'>29,485</td><td align="right" class='awrncrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>5,484</td><td align="right" class='awrc'>2,080</td><td align="right" class='awrc'>5,484</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2,082</td><td align="right" class='awrclb'>3,388</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>2</td><td align="right" class='awrclb'>5,533</td><td align="right" class='awrclb'>1,429</td><td align="right" class='awrclb'>105</td><td align="right" class='awrc'>5,465</td><td align="right" class='awrcrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12034"></a>
<h3 class="awr">Global Current Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Current Server Statistics"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Pins</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th><th class="awrbg" scope="col">Flushes</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>52.17</td><td align="right" class='awrc'>39.13</td><td align="right" class='awrc'>8.70</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>80.00</td><td align="right" class='awrnc'>20.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>43.75</td><td align="right" class='awrnc'>43.75</td><td align="right" class='awrnc'>12.50</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>5</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrct'>55</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="607"></a>
<h2 class="awr">
Global Cache Transfer Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12035">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#12036">Global Cache Transfer (Immediate)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12035"></a>
<h3 class="awr">Global Cache Transfer Statistics</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> Busy	     (Busy) - Block Transfer impacted by Remote Contention </li>
<li class="awr"> Congested  (Cngst) - Block Transfer impacted by Remote System Load </li>
<li class="awr"> All - average time of All blocks (Immed,Busy,Cngst) in us </li>
<li class="awr"> Ordered by instance_number, CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="Global Cache Transfer Statistics. . Immediate (Immed) - Block Transfer NOT impacted by Remote Processing Delays. Busy (Busy) - Block Transfer impacted by Remote Contention. Congested (Cngst) - Block Transfer impacted by Remote System Load. All - average time of All blocks (Immed,Busy,Cngst) in us. Ordered by instance_number, CR + Current Blocks Received desc"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 1" id="Block">Block</th>
<th class="awrbg" colspan=" 4" id="CRBlocks">CR Blocks</th>
<th class="awrbg" colspan=" 4" id="CurrentBlocks">Current Blocks</th>
<th class="awrbg" colspan=" 4" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 4" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Dest">Dest</th><th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%Immed">%Immed</th><th class="awrbg" scope="col" id="%Busy">%Busy</th><th class="awrbg" scope="col" id="%Cngst">%Cngst</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%Immed">%Immed</th><th class="awrbg" scope="col" id="%Busy">%Busy</th><th class="awrbg" scope="col" id="%Cngst">%Cngst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Cngst">Cngst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Cngst">Cngst</th></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'>1</td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>data block</td><td align="right" headers="CRBlocks Received" class='awrclb'>23,451</td><td align="right" headers="CRBlocks %Immed" class='awrc'>91.87</td><td align="right" headers="CRBlocks %Busy" class='awrc'>0.39</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>7.74</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>23,197</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>7.21</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>75.77</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>17.02</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>69047</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>69813</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>74378</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>59699</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>26155</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>67195</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>22869</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>23395</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo header</td><td align="right" headers="CRBlocks Received" class='awrnclb'>2,998</td><td align="right" headers="CRBlocks %Immed" class='awrnc'>89.03</td><td align="right" headers="CRBlocks %Busy" class='awrnc'>2.70</td><td align="right" headers="CRBlocks %Cngst" class='awrnc'>8.27</td><td align="right" headers="CurrentBlocks Received" class='awrnclb'>66</td><td align="right" headers="CurrentBlocks %Immed" class='awrnc'>0.00</td><td align="right" headers="CurrentBlocks %Busy" class='awrnc'>86.36</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnc'>13.64</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>18051</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>14700</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>92584</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnc'>29778</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>61842</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>67390</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrb'>26704</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>others</td><td align="right" headers="CRBlocks Received" class='awrclb'>85</td><td align="right" headers="CRBlocks %Immed" class='awrc'>77.65</td><td align="right" headers="CRBlocks %Busy" class='awrc'>0.00</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>22.35</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>249</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>9.24</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>75.90</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>14.86</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>15112</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>17003</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>8543</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>20706</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>7803</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>24684</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>8405</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclbt'>2</td><td align="right" headers="Instance# Src" class='awrnct'>1</td><td headers="Block Class" class='awrnclbt'>data block</td><td align="right" headers="CRBlocks Received" class='awrnclbt'>24,720</td><td align="right" headers="CRBlocks %Immed" class='awrnct'>94.44</td><td align="right" headers="CRBlocks %Busy" class='awrnct'>0.10</td><td align="right" headers="CRBlocks %Cngst" class='awrnct'>5.46</td><td align="right" headers="CurrentBlocks Received" class='awrnclbt'>16,617</td><td align="right" headers="CurrentBlocks %Immed" class='awrnct'>3.29</td><td align="right" headers="CurrentBlocks %Busy" class='awrnct'>88.62</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnct'>8.09</td><td align="right" headers="CRAvgTime(us) All" class='awrnclbt'>35744</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnct'>35571</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnct'>37909</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnct'>38692</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclbt'>15254</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnct'>20553</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnct'>15045</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrbt'>15393</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrc'>1</td><td headers="Block Class" class='awrclb'>others</td><td align="right" headers="CRBlocks Received" class='awrclb'>57</td><td align="right" headers="CRBlocks %Immed" class='awrc'>89.47</td><td align="right" headers="CRBlocks %Busy" class='awrc'>1.75</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>8.77</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>228</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>4.82</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>85.09</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>10.09</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>11789</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>1753</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>546914</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>7129</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>15891</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>1974</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>17118</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>12200</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>undo header</td><td align="right" headers="CRBlocks Received" class='awrnclb'>9</td><td align="right" headers="CRBlocks %Immed" class='awrnc'>88.89</td><td align="right" headers="CRBlocks %Busy" class='awrnc'>0.00</td><td align="right" headers="CRBlocks %Cngst" class='awrnc'>11.11</td><td align="right" headers="CurrentBlocks Received" class='awrnclb'>61</td><td align="right" headers="CurrentBlocks %Immed" class='awrnc'>1.64</td><td align="right" headers="CurrentBlocks %Busy" class='awrnc'>91.80</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnc'>6.56</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>37398</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>41722</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnc'>2809</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>16607</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>110384</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>15796</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrb'>4513</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#607">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12036"></a>
<h3 class="awr">Global Cache Transfer (Immediate)</h3>
<ul>
<li class="awr"> Ordered by instance_number, CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="Global Cache Transfer (Immediate). . Ordered by instance_number, CR + Current Blocks Received desc"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 1" id="Block">Block</th>
<th class="awrbg" colspan=" 2" id="LostBlocks">Lost Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmediateCRBlocks">Immediate CR Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmediateCurrentBlocks">Immediate Current Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmedCRAvgTime(us)">Immed CR Avg Time (us)</th>
<th class="awrbg" colspan=" 3" id="ImmedCurrentAvgTime(us)">Immed Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Dest">Dest</th><th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Count">Count</th><th class="awrbg" scope="col" id="Time(us)">Time(us)</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%2-hop">%2-hop</th><th class="awrbg" scope="col" id="%3-hop">%3-hop</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%2-hop">%2-hop</th><th class="awrbg" scope="col" id="%3-hop">%3-hop</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="2-hop">2-hop</th><th class="awrbg" scope="col" id="3-hop">3-hop</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="2-hop">2-hop</th><th class="awrbg" scope="col" id="3-hop">3-hop</th></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'>1</td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>data block</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>21,544</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>1,673</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>69813</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>69813</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>67195</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>67195</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo header</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>2,669</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>14700</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>14700</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>others</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>66</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>23</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>17003</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>17003</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>7803</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>7803</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo block</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclbt'>2</td><td align="right" headers="Instance# Src" class='awrct'>1</td><td headers="Block Class" class='awrclbt'>data block</td><td align="right" headers="LostBlocks Count" class='awrclbt'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrct'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclbt'>23,346</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrct'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrct'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclbt'>547</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrct'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrct'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclbt'>35571</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrct'>35571</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrct'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclbt'>20553</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrct'>20553</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>others</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>51</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>11</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>1753</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>1753</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>1974</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>1974</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrc'>1</td><td headers="Block Class" class='awrclb'>undo header</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>8</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>1</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>41722</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>41722</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>110384</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>110384</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>undo block</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#607">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="608"></a>
<h2 class="awr">
Interconnect Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12040">Cluster Interconnect</a></li>
<li class="awr"><a class="awr" href="#12045">Ping Statistics</a></li>
<li class="awr"><a class="awr" href="#12041">Interconnect Client Statistics</a></li>
<li class="awr"><a class="awr" href="#12042">Interconnect Client Statistics (per Second)</a></li>
<li class="awr"><a class="awr" href="#12043">Interconnect Device Statistics</a></li>
<li class="awr"><a class="awr" href="#12044">Interconnect Device Statistics (per Second)</a></li>
<li class="awr"><a class="awr" href="#12078">Dynamic Remastering Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12040"></a>
<h3 class="awr">Cluster Interconnect</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Cluster Interconnect"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="Begin">Begin</th>
<th class="awrbg" colspan=" 3" id="End(ifdifferentfromBegin)">End (if different from Begin)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td class='awrc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrclb'>169.254.22.248</td><td headers="Begin Pub" class='awrc'>N</td><td headers="Begin Source" class='awrc'>&#160;</td><td headers="End(ifdifferentfromBegin) IPAddress" class='awrclb'>&#160;</td><td headers="End(ifdifferentfromBegin) Pub" class='awrc'>&#160;</td><td headers="End(ifdifferentfromBegin) Source" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td class='awrnc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrnclb'>169.254.31.173</td><td headers="Begin Pub" class='awrnc'>N</td><td headers="Begin Source" class='awrnc'>&#160;</td><td headers="End(ifdifferentfromBegin) IPAddress" class='awrnclb'>&#160;</td><td headers="End(ifdifferentfromBegin) Pub" class='awrnc'>&#160;</td><td headers="End(ifdifferentfromBegin) Source" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12045"></a>
<h3 class="awr">Ping Statistics</h3>
<ul>
<li class="awr"> Latency of the roundtrip of a message from  Src Instance to the Target instances</li>
</ul>
<table border="0" class="tdiff" summary="Ping Statistics. . Latency of the roundtrip of a message from Src Instance to the Target instances"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 3" id="500bytes">500 bytes</th>
<th class="awrbg" colspan=" 3" id="8Kbytes">8 Kbytes</th>
</tr><tr>
<th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Target">Target</th><th class="awrbg" scope="col" id="Ping|Count">Ping Count</th><th class="awrbg" scope="col" id="Avg|Time(us)">Avg   Time(us)</th><th class="awrbg" scope="col" id="Std|Dev">Std Dev</th><th class="awrbg" scope="col" id="Ping|Count">Ping Count</th><th class="awrbg" scope="col" id="Avg|Time(us)">Avg   Time(us)</th><th class="awrbg" scope="col" id="Std|Dev">Std Dev</th></tr>
<tr><td align="right" headers="Instance# Src" class='awrclb'>1</td><td align="right" headers="Instance# Target" class='awrc'>1</td><td align="right" headers="500bytes Ping|Count" class='awrclb'>59</td><td align="right" headers="500bytes Avg|Time(us)" class='awrc'>690</td><td align="right" headers="500bytes Std|Dev" class='awrc'>0.47</td><td align="right" headers="8Kbytes Ping|Count" class='awrclb'>65</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrc'>676</td><td align="right" headers="8Kbytes Std|Dev" class='awrcrb'>0.45</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Target" class='awrnc'>2</td><td align="right" headers="500bytes Ping|Count" class='awrnclb'>59</td><td align="right" headers="500bytes Avg|Time(us)" class='awrnc'>2033</td><td align="right" headers="500bytes Std|Dev" class='awrnc'>2.08</td><td align="right" headers="8Kbytes Ping|Count" class='awrnclb'>65</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrnc'>372652</td><td align="right" headers="8Kbytes Std|Dev" class='awrncrb'>1121.36</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrclbt'>2</td><td align="right" headers="Instance# Target" class='awrct'>1</td><td align="right" headers="500bytes Ping|Count" class='awrclbt'>58</td><td align="right" headers="500bytes Avg|Time(us)" class='awrct'>2430</td><td align="right" headers="500bytes Std|Dev" class='awrct'>2.67</td><td align="right" headers="8Kbytes Ping|Count" class='awrclbt'>64</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrct'>31469</td><td align="right" headers="8Kbytes Std|Dev" class='awrcrbt'>129.21</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Target" class='awrnc'>2</td><td align="right" headers="500bytes Ping|Count" class='awrnclb'>58</td><td align="right" headers="500bytes Avg|Time(us)" class='awrnc'>642</td><td align="right" headers="500bytes Std|Dev" class='awrnc'>0.89</td><td align="right" headers="8Kbytes Ping|Count" class='awrnclb'>64</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrnc'>572</td><td align="right" headers="8Kbytes Std|Dev" class='awrncrb'>0.82</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12041"></a>
<h3 class="awr">Interconnect Client Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Interconnect Client Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 6" id="Sent(MB)">Sent (MB)</th>
<th class="awrbg" colspan=" 6" id="Received(MB)">Received (MB)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sent(MB) Total" class='awrclb'>6,057.13</td><td align="right" headers="Sent(MB) Cache" class='awrc'>197.06</td><td align="right" headers="Sent(MB) IPQ" class='awrc'>7.61</td><td align="right" headers="Sent(MB) DLM" class='awrc'>5,817.41</td><td align="right" headers="Sent(MB) PNG" class='awrc'>1.09</td><td align="right" headers="Sent(MB) Misc" class='awrc'>33.96</td><td align="right" headers="Received(MB) Total" class='awrclb'>5,528.63</td><td align="right" headers="Received(MB) Cache" class='awrc'>203.12</td><td align="right" headers="Received(MB) IPQ" class='awrc'>5.50</td><td align="right" headers="Received(MB) DLM" class='awrc'>5,276.78</td><td align="right" headers="Received(MB) PNG" class='awrc'>1.09</td><td align="right" headers="Received(MB) Misc" class='awrcrb'>42.14</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sent(MB) Total" class='awrnclb'>5,441.77</td><td align="right" headers="Sent(MB) Cache" class='awrnc'>211.54</td><td align="right" headers="Sent(MB) IPQ" class='awrnc'>5.36</td><td align="right" headers="Sent(MB) DLM" class='awrnc'>5,182.33</td><td align="right" headers="Sent(MB) PNG" class='awrnc'>1.08</td><td align="right" headers="Sent(MB) Misc" class='awrnc'>41.46</td><td align="right" headers="Received(MB) Total" class='awrnclb'>5,937.80</td><td align="right" headers="Received(MB) Cache" class='awrnc'>159.28</td><td align="right" headers="Received(MB) IPQ" class='awrnc'>7.35</td><td align="right" headers="Received(MB) DLM" class='awrnc'>5,736.90</td><td align="right" headers="Received(MB) PNG" class='awrnc'>1.08</td><td align="right" headers="Received(MB) Misc" class='awrncrb'>33.19</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>11,498.90</td><td align="right" class='awrct'>408.60</td><td align="right" class='awrct'>12.98</td><td align="right" class='awrct'>10,999.74</td><td align="right" class='awrct'>2.17</td><td align="right" class='awrct'>75.42</td><td align="right" class='awrclbt'>11,466.43</td><td align="right" class='awrct'>362.40</td><td align="right" class='awrct'>12.85</td><td align="right" class='awrct'>11,013.69</td><td align="right" class='awrct'>2.17</td><td align="right" class='awrcrbt'>75.33</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>5,749.45</td><td align="right" class='awrnc'>204.30</td><td align="right" class='awrnc'>6.49</td><td align="right" class='awrnc'>5,499.87</td><td align="right" class='awrnc'>1.08</td><td align="right" class='awrnc'>37.71</td><td align="right" class='awrnclb'>5,733.22</td><td align="right" class='awrnc'>181.20</td><td align="right" class='awrnc'>6.43</td><td align="right" class='awrnc'>5,506.84</td><td align="right" class='awrnc'>1.08</td><td align="right" class='awrncrb'>37.66</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>435.13</td><td align="right" class='awrc'>10.24</td><td align="right" class='awrc'>1.59</td><td align="right" class='awrc'>449.07</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>5.31</td><td align="right" class='awrclb'>289.32</td><td align="right" class='awrc'>31.00</td><td align="right" class='awrc'>1.31</td><td align="right" class='awrc'>325.35</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrcrb'>6.33</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12042"></a>
<h3 class="awr">Interconnect Client Statistics (per Second)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Interconnect Client Statistics (per Second)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 6" id="Sent(MB/s)">Sent (MB/s)</th>
<th class="awrbg" colspan=" 6" id="Received(MB/s)">Received (MB/s)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sent(MB/s) Total" class='awrclb'>9.17</td><td align="right" headers="Sent(MB/s) Cache" class='awrc'>0.30</td><td align="right" headers="Sent(MB/s) IPQ" class='awrc'>0.01</td><td align="right" headers="Sent(MB/s) DLM" class='awrc'>8.80</td><td align="right" headers="Sent(MB/s) PNG" class='awrc'>0.00</td><td align="right" headers="Sent(MB/s) Misc" class='awrc'>0.05</td><td align="right" headers="Received(MB/s) Total" class='awrclb'>8.37</td><td align="right" headers="Received(MB/s) Cache" class='awrc'>0.31</td><td align="right" headers="Received(MB/s) IPQ" class='awrc'>0.01</td><td align="right" headers="Received(MB/s) DLM" class='awrc'>7.99</td><td align="right" headers="Received(MB/s) PNG" class='awrc'>0.00</td><td align="right" headers="Received(MB/s) Misc" class='awrcrb'>0.06</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sent(MB/s) Total" class='awrnclb'>8.24</td><td align="right" headers="Sent(MB/s) Cache" class='awrnc'>0.32</td><td align="right" headers="Sent(MB/s) IPQ" class='awrnc'>0.01</td><td align="right" headers="Sent(MB/s) DLM" class='awrnc'>7.84</td><td align="right" headers="Sent(MB/s) PNG" class='awrnc'>0.00</td><td align="right" headers="Sent(MB/s) Misc" class='awrnc'>0.06</td><td align="right" headers="Received(MB/s) Total" class='awrnclb'>8.99</td><td align="right" headers="Received(MB/s) Cache" class='awrnc'>0.24</td><td align="right" headers="Received(MB/s) IPQ" class='awrnc'>0.01</td><td align="right" headers="Received(MB/s) DLM" class='awrnc'>8.68</td><td align="right" headers="Received(MB/s) PNG" class='awrnc'>0.00</td><td align="right" headers="Received(MB/s) Misc" class='awrncrb'>0.05</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>17.40</td><td align="right" class='awrct'>0.62</td><td align="right" class='awrct'>0.02</td><td align="right" class='awrct'>16.65</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.11</td><td align="right" class='awrclbt'>17.35</td><td align="right" class='awrct'>0.55</td><td align="right" class='awrct'>0.02</td><td align="right" class='awrct'>16.67</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrcrbt'>0.11</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>8.70</td><td align="right" class='awrnc'>0.31</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>8.32</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnclb'>8.68</td><td align="right" class='awrnc'>0.27</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>8.33</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrncrb'>0.06</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>0.66</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.68</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrclb'>0.44</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.49</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrcrb'>0.01</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12043"></a>
<h3 class="awr">Interconnect Device Statistics</h3>
<ul>
<li class="awr"> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs </li>
<li class="awr"> null means begin value &gt; end value</li>
</ul>
<table border="0" class="tdiff" summary="Interconnect Device Statistics. . Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs. null means begin value &gt; end value"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Interface">Interface</th>
<th class="awrbg" colspan=" 6" id="Sent">Sent</th>
<th class="awrbg" colspan=" 6" id="Received">Received</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="NAME">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="IPMask">IP Mask</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Carrier|Lost">Carrier Lost</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Frame|Errors">Frame Errors</th></tr>
<tr><td align="right" class='awrc'>1</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.5</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>32,240.99</td><td align="right" headers="Sent Packets" class='awrc'>16,337,066</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>26,827.91</td><td align="right" headers="Received Packets" class='awrc'>14,888,064</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>8,502.55</td><td align="right" headers="Sent Packets" class='awrnc'>7,153,712</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>7,601.49</td><td align="right" headers="Received Packets" class='awrnc'>10,283,374</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.22.248</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>4.75</td><td align="right" headers="Sent Packets" class='awrnc'>11,394</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>2.16</td><td align="right" headers="Received Packets" class='awrnc'>9,859</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.21</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.11</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-storage</td><td headers="Interface IPAddress" class='awrc'>192.168.3.1</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>2.23</td><td align="right" headers="Sent Packets" class='awrc'>3,915</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>2.18</td><td align="right" headers="Received Packets" class='awrc'>3,929</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>lo</td><td headers="Interface IPAddress" class='awrnc'>127.0.0.1</td><td headers="Interface IPMask" class='awrnc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>140.21</td><td align="right" headers="Sent Packets" class='awrnc'>2,641,912</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>140.21</td><td align="right" headers="Received Packets" class='awrnc'>2,641,912</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'>2</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.4</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>27,042.99</td><td align="right" headers="Sent Packets" class='awrc'>15,319,999</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>32,001.00</td><td align="right" headers="Received Packets" class='awrc'>15,717,465</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>7,534.58</td><td align="right" headers="Sent Packets" class='awrnc'>6,772,093</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>8,578.18</td><td align="right" headers="Received Packets" class='awrnc'>11,115,975</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.31.173</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>2.16</td><td align="right" headers="Sent Packets" class='awrnc'>9,858</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>4.75</td><td align="right" headers="Received Packets" class='awrnc'>11,370</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.23</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.12</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:4</td><td headers="Interface IPAddress" class='awrc'>192.168.1.22</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-storage</td><td headers="Interface IPAddress" class='awrnc'>192.168.3.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>3.18</td><td align="right" headers="Sent Packets" class='awrnc'>3,817</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>1.22</td><td align="right" headers="Received Packets" class='awrnc'>3,899</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>lo</td><td headers="Interface IPAddress" class='awrc'>127.0.0.1</td><td headers="Interface IPMask" class='awrc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrclb'>134.67</td><td align="right" headers="Sent Packets" class='awrc'>2,138,109</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>134.67</td><td align="right" headers="Received Packets" class='awrc'>2,138,109</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnct'>Sum</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclbt'>75,608.31</td><td align="right" class='awrnct'>50,391,875</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnclbt'>75,293.78</td><td align="right" class='awrnct'>56,813,956</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrncrbt'>0</td></tr>
<tr><td align="right" class='awrc'>Avg</td><td class='awrclb'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td align="right" class='awrclb'>4,447.55</td><td align="right" class='awrc'>2,964,228</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>4,429.05</td><td align="right" class='awrc'>3,341,997</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'>Std</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclb'>9,885.70</td><td align="right" class='awrnc'>5,366,664</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>9,816.21</td><td align="right" class='awrnc'>5,699,151</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrncrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12044"></a>
<h3 class="awr">Interconnect Device Statistics (per Second)</h3>
<ul>
<li class="awr"> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs </li>
<li class="awr"> Blank	means begin value &gt; end value</li>
</ul>
<table border="0" class="tdiff" summary="Interconnect Device Statistics (per Second). . Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs. Blank means begin value &gt; end value"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Interface">Interface</th>
<th class="awrbg" colspan=" 6" id="Sent">Sent</th>
<th class="awrbg" colspan=" 6" id="Received">Received</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="NAME">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="IPMask">IP Mask</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Carrier|Lost">Carrier Lost</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Frame|Errors">Frame Errors</th></tr>
<tr><td align="right" class='awrc'>1</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.5</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>48.79</td><td align="right" headers="Sent Packets" class='awrc'>24,724</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>40.60</td><td align="right" headers="Received Packets" class='awrc'>22,531</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>12.87</td><td align="right" headers="Sent Packets" class='awrnc'>10,826</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>11.50</td><td align="right" headers="Received Packets" class='awrnc'>15,562</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.22.248</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.01</td><td align="right" headers="Sent Packets" class='awrnc'>17</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>15</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.21</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.11</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-storage</td><td headers="Interface IPAddress" class='awrc'>192.168.3.1</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>6</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>6</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>lo</td><td headers="Interface IPAddress" class='awrnc'>127.0.0.1</td><td headers="Interface IPMask" class='awrnc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.21</td><td align="right" headers="Sent Packets" class='awrnc'>3,998</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.21</td><td align="right" headers="Received Packets" class='awrnc'>3,998</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'>2</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.4</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>40.93</td><td align="right" headers="Sent Packets" class='awrc'>23,186</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>48.43</td><td align="right" headers="Received Packets" class='awrc'>23,788</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>11.40</td><td align="right" headers="Sent Packets" class='awrnc'>10,249</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>12.98</td><td align="right" headers="Received Packets" class='awrnc'>16,824</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.31.173</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>15</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.01</td><td align="right" headers="Received Packets" class='awrnc'>17</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.23</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.12</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:4</td><td headers="Interface IPAddress" class='awrc'>192.168.1.22</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-storage</td><td headers="Interface IPAddress" class='awrnc'>192.168.3.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>6</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>6</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>lo</td><td headers="Interface IPAddress" class='awrc'>127.0.0.1</td><td headers="Interface IPMask" class='awrc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.20</td><td align="right" headers="Sent Packets" class='awrc'>3,236</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.20</td><td align="right" headers="Received Packets" class='awrc'>3,236</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnct'>Sum</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclbt'>114.43</td><td align="right" class='awrnct'>76,263</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnclbt'>113.95</td><td align="right" class='awrnct'>85,983</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrncrbt'>0</td></tr>
<tr><td align="right" class='awrc'>Avg</td><td class='awrclb'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td align="right" class='awrclb'>6.73</td><td align="right" class='awrc'>4,486</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>6.70</td><td align="right" class='awrc'>5,058</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'>Std</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclb'>14.96</td><td align="right" class='awrnc'>8,122</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>14.86</td><td align="right" class='awrnc'>8,625</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrncrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12078"></a>
<h3 class="awr">Dynamic Remastering Statistics</h3>
<ul>
<li class="awr"> Affinity Objects - Affinity objects remastered at the begin/end snapshot  </li>
<li class="awr"> Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot</li>
</ul>
<table border="0" class="tdiff" summary="Dynamic Remastering Statistics. . Affinity Objects - Affinity objects remastered at the begin/end snapshot . Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CountsperOps">Counts per Ops</th>
<th class="awrbg" colspan=" 6" id="TimeperOps(seconds)">Time per Ops (seconds)</th>
<th class="awrbg" colspan=" 2" id="AffinityObjects">Affinity Objects</th>
<th class="awrbg" colspan=" 3" id="ReadMostlyObjects">Read Mostly Objects</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Remaster Ops</th><th class="awrbg" scope="col" id="Remastered|Objects">Remastered Objects</th><th class="awrbg" scope="col" id="ReplayLocks|Received">Replay Locks Received</th><th class="awrbg" scope="col" id="ReplayLocks|Sent">Replay Locks Sent</th><th class="awrbg" scope="col" id="Resources|Cleaned">Resources Cleaned</th><th class="awrbg" scope="col" id="Remaster">Remaster</th><th class="awrbg" scope="col" id="Freeze">Freeze</th><th class="awrbg" scope="col" id="Cleanup">Cleanup</th><th class="awrbg" scope="col" id="Replay">Replay</th><th class="awrbg" scope="col" id="Fixwrite">Fixwrite</th><th class="awrbg" scope="col" id="Sync">Sync</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="Begin|(persistent)">Begin (persistent)</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" headers="CountsperOps Remastered|Objects" class='awrclb'>&#160;</td><td align="right" headers="CountsperOps ReplayLocks|Received" class='awrc'>&#160;</td><td align="right" headers="CountsperOps ReplayLocks|Sent" class='awrc'>&#160;</td><td align="right" headers="CountsperOps Resources|Cleaned" class='awrc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Remaster" class='awrclb'>&#160;</td><td align="right" headers="TimeperOps(seconds) Freeze" class='awrc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Cleanup" class='awrc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Replay" class='awrc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Fixwrite" class='awrc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Sync" class='awrc'>&#160;</td><td align="right" headers="AffinityObjects Begin" class='awrclb'>1</td><td align="right" headers="AffinityObjects End" class='awrc'>1</td><td align="right" headers="ReadMostlyObjects Begin" class='awrclb'>0</td><td align="right" headers="ReadMostlyObjects Begin|(persistent)" class='awrc'>0</td><td align="right" headers="ReadMostlyObjects End" class='awrcrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" headers="CountsperOps Remastered|Objects" class='awrnclb'>&#160;</td><td align="right" headers="CountsperOps ReplayLocks|Received" class='awrnc'>&#160;</td><td align="right" headers="CountsperOps ReplayLocks|Sent" class='awrnc'>&#160;</td><td align="right" headers="CountsperOps Resources|Cleaned" class='awrnc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Remaster" class='awrnclb'>&#160;</td><td align="right" headers="TimeperOps(seconds) Freeze" class='awrnc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Cleanup" class='awrnc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Replay" class='awrnc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Fixwrite" class='awrnc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Sync" class='awrnc'>&#160;</td><td align="right" headers="AffinityObjects Begin" class='awrnclb'>1</td><td align="right" headers="AffinityObjects End" class='awrnc'>1</td><td align="right" headers="ReadMostlyObjects Begin" class='awrnclb'>0</td><td align="right" headers="ReadMostlyObjects Begin|(persistent)" class='awrnc'>0</td><td align="right" headers="ReadMostlyObjects End" class='awrncrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>0</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>1</td><td align="right" class='awrct'>1</td><td align="right" class='awrclbt'>0</td><td align="right" class='awrct'>0</td><td align="right" class='awrcrbt'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Max</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnclb'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrncrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="622"></a>
<h2 class="awr">
SQL Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12060">SQL ordered by Elapsed Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12061">SQL ordered by CPU Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12066">SQL ordered by User I/O Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12062">SQL ordered by Gets (Global)</a></li>
<li class="awr"><a class="awr" href="#12063">SQL ordered by Reads (Global)</a></li>
<li class="awr"><a class="awr" href="#12081">SQL ordered by UnOptimized Read Requests (Global)</a></li>
<li class="awr"><a class="awr" href="#12065">SQL ordered by Executions (Global)</a></li>
<li class="awr"><a class="awr" href="#12064">SQL ordered by Cluster Wait Time (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12060"></a>
<h3 class="awr">SQL ordered by Elapsed Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   92.7% of Total DB Time (s):	       288,289</li>
<li class="awr">Captured PL/SQL account for   19.3% of Total DB Time (s):	  288,289</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Elapsed Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>160,512.52</td><td align="right" headers="Total CPU(s)" class='awrc'>2,386.84</td><td align="right" headers="Total IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="Total Gets" class='awrc'>&#160;</td><td align="right" headers="Total Reads" class='awrc'>&#160;</td><td align="right" headers="Total Rows" class='awrc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="Total Execs" class='awrc'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>55.68</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>44.06</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>&#160;</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>106,429.49</td><td align="right" headers="Total CPU(s)" class='awrnc'>2,495.60</td><td align="right" headers="Total IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="Total Gets" class='awrnc'>&#160;</td><td align="right" headers="Total Reads" class='awrnc'>&#160;</td><td align="right" headers="Total Rows" class='awrnc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrnc'>&#160;</td><td align="right" headers="Total Execs" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>36.92</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>46.07</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>&#160;</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#fpx8qau059b6k">fpx8qau059b6k</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>546.76</td><td align="right" headers="Total CPU(s)" class='awrc'>10.48</td><td align="right" headers="Total IOWait(s)" class='awrc'>51.86</td><td align="right" headers="Total Gets" class='awrc'>69,224</td><td align="right" headers="Total Reads" class='awrc'>60,242</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>486.40</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>546.76</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>10.48</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>51.86</td><td align="right" headers="PerExecution Gets" class='awrc'>69,224.00</td><td align="right" headers="PerExecution Reads" class='awrc'>60,242.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>486.40</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.21</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.22</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#dpgskpjbnxu8n">dpgskpjbnxu8n</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>546.60</td><td align="right" headers="Total CPU(s)" class='awrnc'>9.97</td><td align="right" headers="Total IOWait(s)" class='awrnc'>54.92</td><td align="right" headers="Total Gets" class='awrnc'>64,552</td><td align="right" headers="Total Reads" class='awrnc'>55,821</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>483.89</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>546.60</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>9.97</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>54.92</td><td align="right" headers="PerExecution Gets" class='awrnc'>64,552.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>55,821.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>483.89</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.20</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.20</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.18</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#58vuprsfnw7af">58vuprsfnw7af</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>546.58</td><td align="right" headers="Total CPU(s)" class='awrc'>9.75</td><td align="right" headers="Total IOWait(s)" class='awrc'>47.36</td><td align="right" headers="Total Gets" class='awrc'>64,385</td><td align="right" headers="Total Reads" class='awrc'>54,726</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>492.13</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>546.58</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>9.75</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>47.36</td><td align="right" headers="PerExecution Gets" class='awrc'>64,385.00</td><td align="right" headers="PerExecution Reads" class='awrc'>54,726.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>492.13</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.20</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.20</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#dk7wndm4trmxm">dk7wndm4trmxm</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>545.82</td><td align="right" headers="Total CPU(s)" class='awrnc'>10.16</td><td align="right" headers="Total IOWait(s)" class='awrnc'>53.87</td><td align="right" headers="Total Gets" class='awrnc'>65,542</td><td align="right" headers="Total Reads" class='awrnc'>56,839</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>483.62</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>545.82</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>10.16</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>53.87</td><td align="right" headers="PerExecution Gets" class='awrnc'>65,542.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>56,839.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>483.62</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.20</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.21</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.18</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#59u1h8q0dn7kr">59u1h8q0dn7kr</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>545.81</td><td align="right" headers="Total CPU(s)" class='awrc'>10.08</td><td align="right" headers="Total IOWait(s)" class='awrc'>49.72</td><td align="right" headers="Total Gets" class='awrc'>68,350</td><td align="right" headers="Total Reads" class='awrc'>56,196</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>487.46</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>545.81</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>10.08</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>49.72</td><td align="right" headers="PerExecution Gets" class='awrc'>68,350.00</td><td align="right" headers="PerExecution Reads" class='awrc'>56,196.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>487.46</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.21</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.21</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bp4mjh3dc1y4y">bp4mjh3dc1y4y</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>545.77</td><td align="right" headers="Total CPU(s)" class='awrnc'>10.52</td><td align="right" headers="Total IOWait(s)" class='awrnc'>50.03</td><td align="right" headers="Total Gets" class='awrnc'>69,785</td><td align="right" headers="Total Reads" class='awrnc'>59,593</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>486.74</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>545.77</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>10.52</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>50.03</td><td align="right" headers="PerExecution Gets" class='awrnc'>69,785.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>59,593.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>486.74</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.21</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.22</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#dnznjspycqrhh">dnznjspycqrhh</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>545.67</td><td align="right" headers="Total CPU(s)" class='awrc'>10.50</td><td align="right" headers="Total IOWait(s)" class='awrc'>43.96</td><td align="right" headers="Total Gets" class='awrc'>73,536</td><td align="right" headers="Total Reads" class='awrc'>57,750</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>494.31</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>545.67</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>10.50</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>43.96</td><td align="right" headers="PerExecution Gets" class='awrc'>73,536.00</td><td align="right" headers="PerExecution Reads" class='awrc'>57,750.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>494.31</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.21</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#grnj9m41xzwyv">grnj9m41xzwyv</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>545.42</td><td align="right" headers="Total CPU(s)" class='awrnc'>10.72</td><td align="right" headers="Total IOWait(s)" class='awrnc'>54.20</td><td align="right" headers="Total Gets" class='awrnc'>72,123</td><td align="right" headers="Total Reads" class='awrnc'>61,766</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>485.19</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>545.42</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>10.72</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>54.20</td><td align="right" headers="PerExecution Gets" class='awrnc'>72,123.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>61,766.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>485.19</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.20</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.22</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12061"></a>
<h3 class="awr">SQL ordered by CPU Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   90.7% of Total CPU Time (s): 	  5,417</li>
<li class="awr">Captured PL/SQL account for   19.6% of Total CPU Time (s):	     5,417</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by CPU Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>2,495.60</td><td align="right" headers="Total Elapsed(s)" class='awrc'>106,429.49</td><td align="right" headers="Total IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="Total Gets" class='awrc'>&#160;</td><td align="right" headers="Total Reads" class='awrc'>&#160;</td><td align="right" headers="Total Rows" class='awrc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="Total Execs" class='awrc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>46.07</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>36.92</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>&#160;</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>2,386.84</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>160,512.52</td><td align="right" headers="Total IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="Total Gets" class='awrnc'>&#160;</td><td align="right" headers="Total Reads" class='awrnc'>&#160;</td><td align="right" headers="Total Rows" class='awrnc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrnc'>&#160;</td><td align="right" headers="Total Execs" class='awrnc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>44.06</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>55.68</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>&#160;</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#9yv5dwv8k0awg">9yv5dwv8k0awg</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>21.08</td><td align="right" headers="Total Elapsed(s)" class='awrc'>30.22</td><td align="right" headers="Total IOWait(s)" class='awrc'>1.64</td><td align="right" headers="Total Gets" class='awrc'>56,996</td><td align="right" headers="Total Reads" class='awrc'>658</td><td align="right" headers="Total Rows" class='awrc'>21</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.14</td><td align="right" headers="Total Execs" class='awrc'>21</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>1.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>1.44</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.08</td><td align="right" headers="PerExecution Gets" class='awrc'>2,714.10</td><td align="right" headers="PerExecution Reads" class='awrc'>31.33</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>0.39</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.18</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>WITH MONITOR_DATA AS (SELECT I...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#b2a4zdu00qd3v">b2a4zdu00qd3v</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>11.23</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>544.30</td><td align="right" headers="Total IOWait(s)" class='awrnc'>50.71</td><td align="right" headers="Total Gets" class='awrnc'>77,143</td><td align="right" headers="Total Reads" class='awrnc'>63,951</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>484.51</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>11.23</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>544.30</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>50.71</td><td align="right" headers="PerExecution Gets" class='awrnc'>77,143.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>63,951.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>484.51</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>0.21</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.21</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.24</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.18</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#3ga2c5w22k8p4">3ga2c5w22k8p4</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>11.23</td><td align="right" headers="Total Elapsed(s)" class='awrc'>543.37</td><td align="right" headers="Total IOWait(s)" class='awrc'>50.32</td><td align="right" headers="Total Gets" class='awrc'>77,938</td><td align="right" headers="Total Reads" class='awrc'>63,773</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>487.71</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>11.23</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>543.37</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>50.32</td><td align="right" headers="PerExecution Gets" class='awrc'>77,938.00</td><td align="right" headers="PerExecution Reads" class='awrc'>63,773.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>487.71</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>0.21</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.20</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.24</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#gta39sva2c0pj">gta39sva2c0pj</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>11.21</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>543.16</td><td align="right" headers="Total IOWait(s)" class='awrnc'>48.02</td><td align="right" headers="Total Gets" class='awrnc'>79,495</td><td align="right" headers="Total Reads" class='awrnc'>64,150</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>485.04</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>11.21</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>543.16</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>48.02</td><td align="right" headers="PerExecution Gets" class='awrnc'>79,495.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>64,150.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>485.04</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>0.21</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.20</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.24</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#f737cjs9htn1t">f737cjs9htn1t</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>11.15</td><td align="right" headers="Total Elapsed(s)" class='awrc'>544.91</td><td align="right" headers="Total IOWait(s)" class='awrc'>42.43</td><td align="right" headers="Total Gets" class='awrc'>77,813</td><td align="right" headers="Total Reads" class='awrc'>67,077</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>497.57</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>11.15</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>544.91</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>42.43</td><td align="right" headers="PerExecution Gets" class='awrc'>77,813.00</td><td align="right" headers="PerExecution Reads" class='awrc'>67,077.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>497.57</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>0.21</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.17</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.24</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.24</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#1hh6k5cdprk6r">1hh6k5cdprk6r</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>11.13</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>544.09</td><td align="right" headers="Total IOWait(s)" class='awrnc'>41.87</td><td align="right" headers="Total Gets" class='awrnc'>73,931</td><td align="right" headers="Total Reads" class='awrnc'>63,304</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>494.52</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>11.13</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>544.09</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>41.87</td><td align="right" headers="PerExecution Gets" class='awrnc'>73,931.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>63,304.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>494.52</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>0.21</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.17</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#1ksjxx805vj29">1ksjxx805vj29</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>11.11</td><td align="right" headers="Total Elapsed(s)" class='awrc'>543.24</td><td align="right" headers="Total IOWait(s)" class='awrc'>50.36</td><td align="right" headers="Total Gets" class='awrc'>74,720</td><td align="right" headers="Total Reads" class='awrc'>62,879</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>485.42</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>11.11</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>543.24</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>50.36</td><td align="right" headers="PerExecution Gets" class='awrc'>74,720.00</td><td align="right" headers="PerExecution Reads" class='awrc'>62,879.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>485.42</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>0.21</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.20</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#cnvn60d4ys1ym">cnvn60d4ys1ym</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>11.08</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>544.81</td><td align="right" headers="Total IOWait(s)" class='awrnc'>46.96</td><td align="right" headers="Total Gets" class='awrnc'>74,111</td><td align="right" headers="Total Reads" class='awrnc'>62,960</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>488.22</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>11.08</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>544.81</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>46.96</td><td align="right" headers="PerExecution Gets" class='awrnc'>74,111.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>62,960.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>488.22</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>0.20</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12066"></a>
<h3 class="awr">SQL ordered by User I/O Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for    0.0% of Total User I/O Wait Time (s):	   24,572</li>
<li class="awr">Captured PL/SQL account for   18.8% of Total User I/O Wait Time (s):	      24,572</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by User I/O Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrc'>160,512.52</td><td align="right" headers="Total CPU(s)" class='awrc'>2,386.84</td><td align="right" headers="Total Gets" class='awrc'>&#160;</td><td align="right" headers="Total Reads" class='awrc'>&#160;</td><td align="right" headers="Total Rows" class='awrc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="Total Execs" class='awrc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>55.68</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>44.06</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>&#160;</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>106,429.49</td><td align="right" headers="Total CPU(s)" class='awrnc'>2,495.60</td><td align="right" headers="Total Gets" class='awrnc'>&#160;</td><td align="right" headers="Total Reads" class='awrnc'>&#160;</td><td align="right" headers="Total Rows" class='awrnc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrnc'>&#160;</td><td align="right" headers="Total Execs" class='awrnc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>36.92</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>46.07</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>&#160;</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#b2a4zdu00qd3v">b2a4zdu00qd3v</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>50.71</td><td align="right" headers="Total Elapsed(s)" class='awrc'>544.30</td><td align="right" headers="Total CPU(s)" class='awrc'>11.23</td><td align="right" headers="Total Gets" class='awrc'>77,143</td><td align="right" headers="Total Reads" class='awrc'>63,951</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>484.51</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>50.71</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>544.30</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>11.23</td><td align="right" headers="PerExecution Gets" class='awrc'>77,143.00</td><td align="right" headers="PerExecution Reads" class='awrc'>63,951.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>484.51</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.21</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.21</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.24</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.18</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#1ksjxx805vj29">1ksjxx805vj29</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>50.36</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>543.24</td><td align="right" headers="Total CPU(s)" class='awrnc'>11.11</td><td align="right" headers="Total Gets" class='awrnc'>74,720</td><td align="right" headers="Total Reads" class='awrnc'>62,879</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>485.42</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>50.36</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>543.24</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>11.11</td><td align="right" headers="PerExecution Gets" class='awrnc'>74,720.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>62,879.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>485.42</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.20</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.21</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#3ga2c5w22k8p4">3ga2c5w22k8p4</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>50.32</td><td align="right" headers="Total Elapsed(s)" class='awrc'>543.37</td><td align="right" headers="Total CPU(s)" class='awrc'>11.23</td><td align="right" headers="Total Gets" class='awrc'>77,938</td><td align="right" headers="Total Reads" class='awrc'>63,773</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>487.71</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>50.32</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>543.37</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>11.23</td><td align="right" headers="PerExecution Gets" class='awrc'>77,938.00</td><td align="right" headers="PerExecution Reads" class='awrc'>63,773.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>487.71</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.20</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.21</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.24</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#gta39sva2c0pj">gta39sva2c0pj</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>48.02</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>543.16</td><td align="right" headers="Total CPU(s)" class='awrnc'>11.21</td><td align="right" headers="Total Gets" class='awrnc'>79,495</td><td align="right" headers="Total Reads" class='awrnc'>64,150</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>485.04</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>48.02</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>543.16</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>11.21</td><td align="right" headers="PerExecution Gets" class='awrnc'>79,495.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>64,150.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>485.04</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.20</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.21</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.24</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#cnvn60d4ys1ym">cnvn60d4ys1ym</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>46.96</td><td align="right" headers="Total Elapsed(s)" class='awrc'>544.81</td><td align="right" headers="Total CPU(s)" class='awrc'>11.08</td><td align="right" headers="Total Gets" class='awrc'>74,111</td><td align="right" headers="Total Reads" class='awrc'>62,960</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>488.22</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>46.96</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>544.81</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>11.08</td><td align="right" headers="PerExecution Gets" class='awrc'>74,111.00</td><td align="right" headers="PerExecution Reads" class='awrc'>62,960.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>488.22</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.19</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.20</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#f737cjs9htn1t">f737cjs9htn1t</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>42.43</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>544.91</td><td align="right" headers="Total CPU(s)" class='awrnc'>11.15</td><td align="right" headers="Total Gets" class='awrnc'>77,813</td><td align="right" headers="Total Reads" class='awrnc'>67,077</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>497.57</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>42.43</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>544.91</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>11.15</td><td align="right" headers="PerExecution Gets" class='awrnc'>77,813.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>67,077.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>497.57</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.17</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.21</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.24</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.24</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#1hh6k5cdprk6r">1hh6k5cdprk6r</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>41.87</td><td align="right" headers="Total Elapsed(s)" class='awrc'>544.09</td><td align="right" headers="Total CPU(s)" class='awrc'>11.13</td><td align="right" headers="Total Gets" class='awrc'>73,931</td><td align="right" headers="Total Reads" class='awrc'>63,304</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>494.52</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>41.87</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>544.09</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>11.13</td><td align="right" headers="PerExecution Gets" class='awrc'>73,931.00</td><td align="right" headers="PerExecution Reads" class='awrc'>63,304.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>494.52</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.17</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.21</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#9yv5dwv8k0awg">9yv5dwv8k0awg</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>1.64</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>30.22</td><td align="right" headers="Total CPU(s)" class='awrnc'>21.08</td><td align="right" headers="Total Gets" class='awrnc'>56,996</td><td align="right" headers="Total Reads" class='awrnc'>658</td><td align="right" headers="Total Rows" class='awrnc'>21</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.14</td><td align="right" headers="Total Execs" class='awrnc'>21</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>0.08</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>1.44</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>1.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>2,714.10</td><td align="right" headers="PerExecution Reads" class='awrnc'>31.33</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.01</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.39</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.18</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>WITH MONITOR_DATA AS (SELECT I...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12062"></a>
<h3 class="awr">SQL ordered by Gets (Global)</h3>
<ul>
<li class="awr">Total Buffer Gets:	32,501,639</li>
<li class="awr">Captured SQL account for    0.6% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Gets (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Gets" class='awrclb'>&#160;</td><td align="right" headers="Total Reads" class='awrc'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrc'>160,512.52</td><td align="right" headers="Total CPU(s)" class='awrc'>2,386.84</td><td align="right" headers="Total IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="Total Rows" class='awrc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="Total Execs" class='awrc'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrclb'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrc'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>55.68</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>44.06</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>&#160;</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3q5nfyq3x1gu4">3q5nfyq3x1gu4</a></td><td align="right" headers="Total Gets" class='awrnclb'>&#160;</td><td align="right" headers="Total Reads" class='awrnc'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.00</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.00</td><td align="right" headers="Total IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="Total Rows" class='awrnc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrnc'>&#160;</td><td align="right" headers="Total Execs" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrnclb'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>&#160;</td>
<td class='awrnc'>INSERT /*+ APPEND */ INTO cf2 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Gets" class='awrclb'>&#160;</td><td align="right" headers="Total Reads" class='awrc'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrc'>106,429.49</td><td align="right" headers="Total CPU(s)" class='awrc'>2,495.60</td><td align="right" headers="Total IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="Total Rows" class='awrc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="Total Execs" class='awrc'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrclb'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrc'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>36.92</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>46.07</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>&#160;</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#cytuv95rat5h1">cytuv95rat5h1</a></td><td align="right" headers="Total Gets" class='awrnclb'>&#160;</td><td align="right" headers="Total Reads" class='awrnc'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.00</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.00</td><td align="right" headers="Total IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="Total Rows" class='awrnc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrnc'>&#160;</td><td align="right" headers="Total Execs" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrnclb'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>&#160;</td>
<td class='awrnc'>LOCK TABLE &quot;CF1&quot; IN EXCLUSIVE ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#gta39sva2c0pj">gta39sva2c0pj</a></td><td align="right" headers="Total Gets" class='awrclb'>79,495</td><td align="right" headers="Total Reads" class='awrc'>64,150</td><td align="right" headers="Total Elapsed(s)" class='awrc'>543.16</td><td align="right" headers="Total CPU(s)" class='awrc'>11.21</td><td align="right" headers="Total IOWait(s)" class='awrc'>48.02</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>485.04</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Gets" class='awrclb'>79,495.00</td><td align="right" headers="PerExecution Reads" class='awrc'>64,150.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>543.16</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>11.21</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>48.02</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>485.04</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>0.24</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.21</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.20</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3ga2c5w22k8p4">3ga2c5w22k8p4</a></td><td align="right" headers="Total Gets" class='awrnclb'>77,938</td><td align="right" headers="Total Reads" class='awrnc'>63,773</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>543.37</td><td align="right" headers="Total CPU(s)" class='awrnc'>11.23</td><td align="right" headers="Total IOWait(s)" class='awrnc'>50.32</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>487.71</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>77,938.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>63,773.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>543.37</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>11.23</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>50.32</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>487.71</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>0.24</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.21</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.20</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#f737cjs9htn1t">f737cjs9htn1t</a></td><td align="right" headers="Total Gets" class='awrclb'>77,813</td><td align="right" headers="Total Reads" class='awrc'>67,077</td><td align="right" headers="Total Elapsed(s)" class='awrc'>544.91</td><td align="right" headers="Total CPU(s)" class='awrc'>11.15</td><td align="right" headers="Total IOWait(s)" class='awrc'>42.43</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>497.57</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Gets" class='awrclb'>77,813.00</td><td align="right" headers="PerExecution Reads" class='awrc'>67,077.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>544.91</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>11.15</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>42.43</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>497.57</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>0.24</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.24</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.21</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.17</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#b2a4zdu00qd3v">b2a4zdu00qd3v</a></td><td align="right" headers="Total Gets" class='awrnclb'>77,143</td><td align="right" headers="Total Reads" class='awrnc'>63,951</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>544.30</td><td align="right" headers="Total CPU(s)" class='awrnc'>11.23</td><td align="right" headers="Total IOWait(s)" class='awrnc'>50.71</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>484.51</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>77,143.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>63,951.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>544.30</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>11.23</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>50.71</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>484.51</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>0.24</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.21</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.21</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.18</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#5v7mdgpz8yna4">5v7mdgpz8yna4</a></td><td align="right" headers="Total Gets" class='awrclb'>76,953</td><td align="right" headers="Total Reads" class='awrc'>61,898</td><td align="right" headers="Total Elapsed(s)" class='awrc'>543.85</td><td align="right" headers="Total CPU(s)" class='awrc'>10.77</td><td align="right" headers="Total IOWait(s)" class='awrc'>48.28</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>489.04</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Gets" class='awrclb'>76,953.00</td><td align="right" headers="PerExecution Reads" class='awrc'>61,898.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>543.85</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>10.77</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>48.28</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>489.04</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>0.24</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.20</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.20</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#f1g58g2a3cyvm">f1g58g2a3cyvm</a></td><td align="right" headers="Total Gets" class='awrnclb'>76,091</td><td align="right" headers="Total Reads" class='awrnc'>62,377</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>543.57</td><td align="right" headers="Total CPU(s)" class='awrnc'>10.87</td><td align="right" headers="Total IOWait(s)" class='awrnc'>50.55</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>484.53</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>76,091.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>62,377.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>543.57</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>10.87</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>50.55</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>484.53</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>0.23</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.20</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.21</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.18</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12063"></a>
<h3 class="awr">SQL ordered by Reads (Global)</h3>
<ul>
<li class="awr">Total Disk Reads:      27,383,265</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Reads (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Reads" class='awrclb'>&#160;</td><td align="right" headers="Total Gets" class='awrc'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrc'>160,512.52</td><td align="right" headers="Total CPU(s)" class='awrc'>2,386.84</td><td align="right" headers="Total IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="Total Rows" class='awrc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="Total Execs" class='awrc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrclb'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrc'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>&#160;</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>55.68</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>44.06</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>&#160;</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3q5nfyq3x1gu4">3q5nfyq3x1gu4</a></td><td align="right" headers="Total Reads" class='awrnclb'>&#160;</td><td align="right" headers="Total Gets" class='awrnc'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.00</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.00</td><td align="right" headers="Total IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="Total Rows" class='awrnc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrnc'>&#160;</td><td align="right" headers="Total Execs" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrnclb'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>&#160;</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>&#160;</td>
<td class='awrnc'>INSERT /*+ APPEND */ INTO cf2 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Reads" class='awrclb'>&#160;</td><td align="right" headers="Total Gets" class='awrc'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrc'>106,429.49</td><td align="right" headers="Total CPU(s)" class='awrc'>2,495.60</td><td align="right" headers="Total IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="Total Rows" class='awrc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="Total Execs" class='awrc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrclb'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrc'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>&#160;</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>36.92</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>46.07</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>&#160;</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#cytuv95rat5h1">cytuv95rat5h1</a></td><td align="right" headers="Total Reads" class='awrnclb'>&#160;</td><td align="right" headers="Total Gets" class='awrnc'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.00</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.00</td><td align="right" headers="Total IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="Total Rows" class='awrnc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrnc'>&#160;</td><td align="right" headers="Total Execs" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrnclb'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>&#160;</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>&#160;</td>
<td class='awrnc'>LOCK TABLE &quot;CF1&quot; IN EXCLUSIVE ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#f737cjs9htn1t">f737cjs9htn1t</a></td><td align="right" headers="Total Reads" class='awrclb'>67,077</td><td align="right" headers="Total Gets" class='awrc'>77,813</td><td align="right" headers="Total Elapsed(s)" class='awrc'>544.91</td><td align="right" headers="Total CPU(s)" class='awrc'>11.15</td><td align="right" headers="Total IOWait(s)" class='awrc'>42.43</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>497.57</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>67,077.00</td><td align="right" headers="PerExecution Gets" class='awrc'>77,813.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>544.91</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>11.15</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>42.43</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>497.57</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>0.24</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.24</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.21</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.17</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#gta39sva2c0pj">gta39sva2c0pj</a></td><td align="right" headers="Total Reads" class='awrnclb'>64,150</td><td align="right" headers="Total Gets" class='awrnc'>79,495</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>543.16</td><td align="right" headers="Total CPU(s)" class='awrnc'>11.21</td><td align="right" headers="Total IOWait(s)" class='awrnc'>48.02</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>485.04</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>64,150.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>79,495.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>543.16</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>11.21</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>48.02</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>485.04</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>0.23</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.24</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.21</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.20</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#b2a4zdu00qd3v">b2a4zdu00qd3v</a></td><td align="right" headers="Total Reads" class='awrclb'>63,951</td><td align="right" headers="Total Gets" class='awrc'>77,143</td><td align="right" headers="Total Elapsed(s)" class='awrc'>544.30</td><td align="right" headers="Total CPU(s)" class='awrc'>11.23</td><td align="right" headers="Total IOWait(s)" class='awrc'>50.71</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>484.51</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>63,951.00</td><td align="right" headers="PerExecution Gets" class='awrc'>77,143.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>544.30</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>11.23</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>50.71</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>484.51</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>0.23</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.24</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.21</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.21</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.18</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3ga2c5w22k8p4">3ga2c5w22k8p4</a></td><td align="right" headers="Total Reads" class='awrnclb'>63,773</td><td align="right" headers="Total Gets" class='awrnc'>77,938</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>543.37</td><td align="right" headers="Total CPU(s)" class='awrnc'>11.23</td><td align="right" headers="Total IOWait(s)" class='awrnc'>50.32</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>487.71</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>63,773.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>77,938.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>543.37</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>11.23</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>50.32</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>487.71</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>0.23</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.24</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.21</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.20</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#gdsqn03xtayhg">gdsqn03xtayhg</a></td><td align="right" headers="Total Reads" class='awrclb'>63,337</td><td align="right" headers="Total Gets" class='awrc'>73,447</td><td align="right" headers="Total Elapsed(s)" class='awrc'>544.18</td><td align="right" headers="Total CPU(s)" class='awrc'>11.03</td><td align="right" headers="Total IOWait(s)" class='awrc'>60.62</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>477.51</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>63,337.00</td><td align="right" headers="PerExecution Gets" class='awrc'>73,447.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>544.18</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>11.03</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>60.62</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>477.51</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>0.23</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.20</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.25</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.18</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#1hh6k5cdprk6r">1hh6k5cdprk6r</a></td><td align="right" headers="Total Reads" class='awrnclb'>63,304</td><td align="right" headers="Total Gets" class='awrnc'>73,931</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>544.09</td><td align="right" headers="Total CPU(s)" class='awrnc'>11.13</td><td align="right" headers="Total IOWait(s)" class='awrnc'>41.87</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>494.52</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>63,304.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>73,931.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>544.09</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>11.13</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>41.87</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>494.52</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>0.23</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.21</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.17</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12081"></a>
<h3 class="awr">SQL ordered by UnOptimized Read Requests (Global)</h3>
<ul>
<li class="awr">Total Physical Read Requests:	   27,382,135</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
<li class="awr">Total UnOptimized Read Requests:      27,382,135</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
<li class="awr">Total Optimized Read Requests:		     1</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by UnOptimized Read Requests (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 9" id="Total">Total</th>
<th class="awrbg" colspan=" 8" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 8" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>&#160;</td><td align="right" headers="Total Requests" class='awrc'>&#160;</td><td align="right" headers="Total Reads" class='awrc'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrc'>160,512.52</td><td align="right" headers="Total CPU(s)" class='awrc'>2,386.84</td><td align="right" headers="Total IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="Total Rows" class='awrc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="Total Execs" class='awrc'>&#160;</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>&#160;</td><td align="right" headers="PerExecution Requests" class='awrc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrc'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>&#160;</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>55.68</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>44.06</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>&#160;</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3q5nfyq3x1gu4">3q5nfyq3x1gu4</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>&#160;</td><td align="right" headers="Total Requests" class='awrnc'>&#160;</td><td align="right" headers="Total Reads" class='awrnc'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.00</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.00</td><td align="right" headers="Total IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="Total Rows" class='awrnc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrnc'>&#160;</td><td align="right" headers="Total Execs" class='awrnc'>&#160;</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>&#160;</td><td align="right" headers="PerExecution Requests" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>&#160;</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>&#160;</td>
<td class='awrnc'>INSERT /*+ APPEND */ INTO cf2 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>&#160;</td><td align="right" headers="Total Requests" class='awrc'>&#160;</td><td align="right" headers="Total Reads" class='awrc'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrc'>106,429.49</td><td align="right" headers="Total CPU(s)" class='awrc'>2,495.60</td><td align="right" headers="Total IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="Total Rows" class='awrc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="Total Execs" class='awrc'>&#160;</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>&#160;</td><td align="right" headers="PerExecution Requests" class='awrc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrc'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>&#160;</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>36.92</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>46.07</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>&#160;</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#cytuv95rat5h1">cytuv95rat5h1</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>&#160;</td><td align="right" headers="Total Requests" class='awrnc'>&#160;</td><td align="right" headers="Total Reads" class='awrnc'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.00</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.00</td><td align="right" headers="Total IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="Total Rows" class='awrnc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrnc'>&#160;</td><td align="right" headers="Total Execs" class='awrnc'>&#160;</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>&#160;</td><td align="right" headers="PerExecution Requests" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>&#160;</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>&#160;</td>
<td class='awrnc'>LOCK TABLE &quot;CF1&quot; IN EXCLUSIVE ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#f737cjs9htn1t">f737cjs9htn1t</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>67,077</td><td align="right" headers="Total Requests" class='awrc'>67,077</td><td align="right" headers="Total Reads" class='awrc'>67,077</td><td align="right" headers="Total Elapsed(s)" class='awrc'>544.91</td><td align="right" headers="Total CPU(s)" class='awrc'>11.15</td><td align="right" headers="Total IOWait(s)" class='awrc'>42.43</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>497.57</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>67,077.00</td><td align="right" headers="PerExecution Requests" class='awrc'>67,077.00</td><td align="right" headers="PerExecution Reads" class='awrc'>67,077.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>544.91</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>11.15</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>42.43</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>497.57</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>0.24</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>0.24</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.24</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.21</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.17</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#gta39sva2c0pj">gta39sva2c0pj</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>64,150</td><td align="right" headers="Total Requests" class='awrnc'>64,150</td><td align="right" headers="Total Reads" class='awrnc'>64,150</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>543.16</td><td align="right" headers="Total CPU(s)" class='awrnc'>11.21</td><td align="right" headers="Total IOWait(s)" class='awrnc'>48.02</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>485.04</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>64,150.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>64,150.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>64,150.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>543.16</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>11.21</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>48.02</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>485.04</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>0.23</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.21</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.20</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#b2a4zdu00qd3v">b2a4zdu00qd3v</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>63,951</td><td align="right" headers="Total Requests" class='awrc'>63,951</td><td align="right" headers="Total Reads" class='awrc'>63,951</td><td align="right" headers="Total Elapsed(s)" class='awrc'>544.30</td><td align="right" headers="Total CPU(s)" class='awrc'>11.23</td><td align="right" headers="Total IOWait(s)" class='awrc'>50.71</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>484.51</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>63,951.00</td><td align="right" headers="PerExecution Requests" class='awrc'>63,951.00</td><td align="right" headers="PerExecution Reads" class='awrc'>63,951.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>544.30</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>11.23</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>50.71</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>484.51</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>0.23</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.21</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.21</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.18</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3ga2c5w22k8p4">3ga2c5w22k8p4</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>63,773</td><td align="right" headers="Total Requests" class='awrnc'>63,773</td><td align="right" headers="Total Reads" class='awrnc'>63,773</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>543.37</td><td align="right" headers="Total CPU(s)" class='awrnc'>11.23</td><td align="right" headers="Total IOWait(s)" class='awrnc'>50.32</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>487.71</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>63,773.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>63,773.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>63,773.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>543.37</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>11.23</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>50.32</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>487.71</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>0.23</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.21</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.20</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#gdsqn03xtayhg">gdsqn03xtayhg</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>63,337</td><td align="right" headers="Total Requests" class='awrc'>63,337</td><td align="right" headers="Total Reads" class='awrc'>63,337</td><td align="right" headers="Total Elapsed(s)" class='awrc'>544.18</td><td align="right" headers="Total CPU(s)" class='awrc'>11.03</td><td align="right" headers="Total IOWait(s)" class='awrc'>60.62</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>477.51</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>63,337.00</td><td align="right" headers="PerExecution Requests" class='awrc'>63,337.00</td><td align="right" headers="PerExecution Reads" class='awrc'>63,337.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>544.18</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>11.03</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>60.62</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>477.51</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>0.23</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.20</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.25</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.18</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#1hh6k5cdprk6r">1hh6k5cdprk6r</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>63,304</td><td align="right" headers="Total Requests" class='awrnc'>63,304</td><td align="right" headers="Total Reads" class='awrnc'>63,304</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>544.09</td><td align="right" headers="Total CPU(s)" class='awrnc'>11.13</td><td align="right" headers="Total IOWait(s)" class='awrnc'>41.87</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>494.52</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>63,304.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>63,304.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>63,304.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>544.09</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>11.13</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>41.87</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>494.52</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>0.23</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.21</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.17</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12065"></a>
<h3 class="awr">SQL ordered by Executions (Global)</h3>
<ul>
<li class="awr">Total Executions:	  524,185</li>
<li class="awr">Captured SQL account for    5.7% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Executions (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Execs" class='awrclb'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrc'>160,512.52</td><td align="right" headers="Total CPU(s)" class='awrc'>2,386.84</td><td align="right" headers="Total IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="Total Gets" class='awrc'>&#160;</td><td align="right" headers="Total Reads" class='awrc'>&#160;</td><td align="right" headers="Total Rows" class='awrc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>55.68</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>44.06</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>&#160;</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3q5nfyq3x1gu4">3q5nfyq3x1gu4</a></td><td align="right" headers="Total Execs" class='awrnclb'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.00</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.00</td><td align="right" headers="Total IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="Total Gets" class='awrnc'>&#160;</td><td align="right" headers="Total Reads" class='awrnc'>&#160;</td><td align="right" headers="Total Rows" class='awrnc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>&#160;</td>
<td class='awrnc'>INSERT /*+ APPEND */ INTO cf2 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Execs" class='awrclb'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrc'>106,429.49</td><td align="right" headers="Total CPU(s)" class='awrc'>2,495.60</td><td align="right" headers="Total IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="Total Gets" class='awrc'>&#160;</td><td align="right" headers="Total Reads" class='awrc'>&#160;</td><td align="right" headers="Total Rows" class='awrc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>36.92</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>46.07</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>&#160;</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#cytuv95rat5h1">cytuv95rat5h1</a></td><td align="right" headers="Total Execs" class='awrnclb'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.00</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.00</td><td align="right" headers="Total IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="Total Gets" class='awrnc'>&#160;</td><td align="right" headers="Total Reads" class='awrnc'>&#160;</td><td align="right" headers="Total Rows" class='awrnc'>&#160;</td><td align="right" headers="Total Cluster(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>&#160;</td>
<td class='awrnc'>LOCK TABLE &quot;CF1&quot; IN EXCLUSIVE ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#24djtk7r8fz33">24djtk7r8fz33</a></td><td align="right" headers="Total Execs" class='awrclb'>5,120</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.40</td><td align="right" headers="Total CPU(s)" class='awrc'>0.38</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.00</td><td align="right" headers="Total Gets" class='awrc'>15,266</td><td align="right" headers="Total Reads" class='awrc'>0</td><td align="right" headers="Total Rows" class='awrc'>4,857</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>2.98</td><td align="right" headers="PerExecution Reads" class='awrc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrc'>0.95</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.98</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.05</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>update svcobj_access$ set acce...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#0sbbcuruzd66f">0sbbcuruzd66f</a></td><td align="right" headers="Total Execs" class='awrnclb'>4,109</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.51</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.23</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.04</td><td align="right" headers="Total Gets" class='awrnc'>12,105</td><td align="right" headers="Total Reads" class='awrnc'>15</td><td align="right" headers="Total Rows" class='awrnc'>3,815</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.25</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>2.95</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>0.93</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.78</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.04</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>select /*+ rule */ bucket_cnt,...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#2p9fv35c7zxtg">2p9fv35c7zxtg</a></td><td align="right" headers="Total Execs" class='awrclb'>3,558</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.29</td><td align="right" headers="Total CPU(s)" class='awrc'>0.28</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.00</td><td align="right" headers="Total Gets" class='awrc'>18,123</td><td align="right" headers="Total Reads" class='awrc'>2</td><td align="right" headers="Total Rows" class='awrc'>23</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>5.09</td><td align="right" headers="PerExecution Reads" class='awrc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrc'>0.01</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.68</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.06</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>select /* KSXM:LOAD_DML_INF */...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#87gaftwrm2h68">87gaftwrm2h68</a></td><td align="right" headers="Total Execs" class='awrnclb'>3,058</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.16</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.17</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="Total Gets" class='awrnc'>6,888</td><td align="right" headers="Total Reads" class='awrnc'>0</td><td align="right" headers="Total Rows" class='awrnc'>635</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>2.25</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>0.21</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.58</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.02</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>select o.owner#, o.name, o.nam...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#9tgj4g8y4rwy8">9tgj4g8y4rwy8</a></td><td align="right" headers="Total Execs" class='awrclb'>1,323</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.33</td><td align="right" headers="Total CPU(s)" class='awrc'>0.21</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.00</td><td align="right" headers="Total Gets" class='awrc'>4,042</td><td align="right" headers="Total Reads" class='awrc'>4</td><td align="right" headers="Total Rows" class='awrc'>1,314</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.08</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>3.06</td><td align="right" headers="PerExecution Reads" class='awrc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrc'>0.99</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.25</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>select type#, blocks, extents,...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#acmvv4fhdc9zh">acmvv4fhdc9zh</a></td><td align="right" headers="Total Execs" class='awrnclb'>1,213</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.23</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.15</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="Total Gets" class='awrnc'>5,471</td><td align="right" headers="Total Reads" class='awrnc'>6</td><td align="right" headers="Total Rows" class='awrnc'>1,138</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.08</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>4.51</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>0.94</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.23</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.02</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>select obj#, type#, ctime, mti...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12064"></a>
<h3 class="awr">SQL ordered by Cluster Wait Time (Global)</h3>
<ul>
<li class="awr">Total Cluster Wait Time (s):	     261,944</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Cluster Wait Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrc'>160,512.52</td><td align="right" headers="Total CPU(s)" class='awrc'>2,386.84</td><td align="right" headers="Total IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="Total Gets" class='awrc'>&#160;</td><td align="right" headers="Total Reads" class='awrc'>&#160;</td><td align="right" headers="Total Rows" class='awrc'>&#160;</td><td align="right" headers="Total Execs" class='awrc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>55.68</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>44.06</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>&#160;</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3q5nfyq3x1gu4">3q5nfyq3x1gu4</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.00</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.00</td><td align="right" headers="Total IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="Total Gets" class='awrnc'>&#160;</td><td align="right" headers="Total Reads" class='awrnc'>&#160;</td><td align="right" headers="Total Rows" class='awrnc'>&#160;</td><td align="right" headers="Total Execs" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>&#160;</td>
<td class='awrnc'>INSERT /*+ APPEND */ INTO cf2 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrc'>106,429.49</td><td align="right" headers="Total CPU(s)" class='awrc'>2,495.60</td><td align="right" headers="Total IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="Total Gets" class='awrc'>&#160;</td><td align="right" headers="Total Reads" class='awrc'>&#160;</td><td align="right" headers="Total Rows" class='awrc'>&#160;</td><td align="right" headers="Total Execs" class='awrc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>36.92</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>46.07</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>&#160;</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#cytuv95rat5h1">cytuv95rat5h1</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>&#160;</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.00</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.00</td><td align="right" headers="Total IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="Total Gets" class='awrnc'>&#160;</td><td align="right" headers="Total Reads" class='awrnc'>&#160;</td><td align="right" headers="Total Rows" class='awrnc'>&#160;</td><td align="right" headers="Total Execs" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>&#160;</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Gets" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Reads" class='awrnc'>&#160;</td><td align="right" headers="PerExecution Rows" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>&#160;</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>&#160;</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>&#160;</td>
<td class='awrnc'>LOCK TABLE &quot;CF1&quot; IN EXCLUSIVE ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#fxm9n9b0fbh2s">fxm9n9b0fbh2s</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>529.94</td><td align="right" headers="Total Elapsed(s)" class='awrc'>534.79</td><td align="right" headers="Total CPU(s)" class='awrc'>5.31</td><td align="right" headers="Total IOWait(s)" class='awrc'>2.35</td><td align="right" headers="Total Gets" class='awrc'>38,044</td><td align="right" headers="Total Reads" class='awrc'>9,075</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>529.94</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>534.79</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>5.31</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>2.35</td><td align="right" headers="PerExecution Gets" class='awrc'>38,044.00</td><td align="right" headers="PerExecution Reads" class='awrc'>9,075.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>0.20</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.10</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.12</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.03</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#f737cjs9htn1t">f737cjs9htn1t</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>497.57</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>544.91</td><td align="right" headers="Total CPU(s)" class='awrnc'>11.15</td><td align="right" headers="Total IOWait(s)" class='awrnc'>42.43</td><td align="right" headers="Total Gets" class='awrnc'>77,813</td><td align="right" headers="Total Reads" class='awrnc'>67,077</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>497.57</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>544.91</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>11.15</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>42.43</td><td align="right" headers="PerExecution Gets" class='awrnc'>77,813.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>67,077.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.19</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.21</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.17</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.24</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.24</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#96mhm2vpjm2m8">96mhm2vpjm2m8</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>496.59</td><td align="right" headers="Total Elapsed(s)" class='awrc'>544.53</td><td align="right" headers="Total CPU(s)" class='awrc'>10.70</td><td align="right" headers="Total IOWait(s)" class='awrc'>40.07</td><td align="right" headers="Total Gets" class='awrc'>72,363</td><td align="right" headers="Total Reads" class='awrc'>61,619</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>496.59</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>544.53</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>10.70</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>40.07</td><td align="right" headers="PerExecution Gets" class='awrc'>72,363.00</td><td align="right" headers="PerExecution Reads" class='awrc'>61,619.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>0.19</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.20</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.16</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.22</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#gtppqnamwkfvz">gtppqnamwkfvz</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>496.41</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>534.18</td><td align="right" headers="Total CPU(s)" class='awrnc'>10.41</td><td align="right" headers="Total IOWait(s)" class='awrnc'>31.61</td><td align="right" headers="Total Gets" class='awrnc'>55,613</td><td align="right" headers="Total Reads" class='awrnc'>47,884</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>496.41</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>534.18</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>10.41</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>31.61</td><td align="right" headers="PerExecution Gets" class='awrnc'>55,613.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>47,884.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.19</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.13</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.17</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.17</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bch1n63zxk221">bch1n63zxk221</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>495.46</td><td align="right" headers="Total Elapsed(s)" class='awrc'>543.99</td><td align="right" headers="Total CPU(s)" class='awrc'>10.89</td><td align="right" headers="Total IOWait(s)" class='awrc'>41.13</td><td align="right" headers="Total Gets" class='awrc'>72,292</td><td align="right" headers="Total Reads" class='awrc'>62,011</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>495.46</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>543.99</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>10.89</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>41.13</td><td align="right" headers="PerExecution Gets" class='awrc'>72,292.00</td><td align="right" headers="PerExecution Reads" class='awrc'>62,011.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>0.19</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.20</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.17</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.22</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#dft6xuag41agd">dft6xuag41agd</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>495.27</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>531.62</td><td align="right" headers="Total CPU(s)" class='awrnc'>10.36</td><td align="right" headers="Total IOWait(s)" class='awrnc'>28.26</td><td align="right" headers="Total Gets" class='awrnc'>58,025</td><td align="right" headers="Total Reads" class='awrnc'>49,588</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>495.27</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>531.62</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>10.36</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>28.26</td><td align="right" headers="PerExecution Gets" class='awrnc'>58,025.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>49,588.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.19</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.18</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.12</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.18</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.18</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="623"></a>
<h2 class="awr">
Global Activity Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12071">System Statistics (Global)</a></li>
<li class="awr"><a class="awr" href="#12072">Global Messaging Statistics (Global)</a></li>
<li class="awr"><a class="awr" href="#12073">System Statistics (Absolute Values)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12071"></a>
<h3 class="awr">System Statistics (Global)</h3>
<ul>
<li class="awr"> per Second Average - average of per-instance per Second rates </li>
<li class="awr"> per Second Std Dev - standard deviation of per-instance per Second rates </li>
<li class="awr"> per Second Min     - minimum of per-instance per Second rates </li>
<li class="awr"> per Second Max     - maximum of per-instance per Second rates</li>
</ul>
<table border="0" class="tdiff" summary="System Statistics (Global). . per Second Average - average of per-instance per Second rates. per Second Std Dev - standard deviation of per-instance per Second rates. per Second Min - minimum of per-instance per Second rates. per Second Max - maximum of per-instance per Second rates"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="perSecond">per Second</th>
</tr><tr>
<th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th><th class="awrbg" scope="col" id="Average">Average</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th></tr>
<tr><td scope="row" class='awrc'>ASSM bg: segment fix monitor</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM cbk:blocks examined</td><td align="right" class='awrnc'>1,850</td><td align="right" class='awrnc'>2.80</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>1.40</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.37</td><td align="right" headers="perSecond Min" class='awrnc'>1.14</td><td align="right" headers="perSecond Max" class='awrncrb'>1.66</td></tr>
<tr><td scope="row" class='awrc'>ASSM cbk:blocks marked full</td><td align="right" class='awrc'>525</td><td align="right" class='awrc'>0.79</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.40</td><td align="right" headers="perSecond StdDev" class='awrc'>0.09</td><td align="right" headers="perSecond Min" class='awrc'>0.33</td><td align="right" headers="perSecond Max" class='awrcrb'>0.46</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L1 bitmaps examined</td><td align="right" class='awrnc'>1,474</td><td align="right" class='awrnc'>2.23</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>1.12</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.28</td><td align="right" headers="perSecond Min" class='awrnc'>0.91</td><td align="right" headers="perSecond Max" class='awrncrb'>1.32</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:L2 bitmap full</td><td align="right" class='awrc'>49</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L2 bitmaps examined</td><td align="right" class='awrnc'>384</td><td align="right" class='awrnc'>0.58</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.29</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.29</td><td align="right" headers="perSecond Max" class='awrncrb'>0.29</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search all</td><td align="right" class='awrc'>56</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:Search hint</td><td align="right" class='awrnc'>67</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.05</td><td align="right" headers="perSecond Max" class='awrncrb'>0.05</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search steal</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:bump HWM</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free block</td><td align="right" class='awrc'>1,325</td><td align="right" class='awrc'>2.01</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>1.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.27</td><td align="right" headers="perSecond Min" class='awrc'>0.81</td><td align="right" headers="perSecond Max" class='awrcrb'>1.20</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:get free data block</td><td align="right" class='awrnc'>933</td><td align="right" class='awrnc'>1.41</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.71</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.19</td><td align="right" headers="perSecond Min" class='awrnc'>0.57</td><td align="right" headers="perSecond Max" class='awrncrb'>0.84</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free index block</td><td align="right" class='awrc'>392</td><td align="right" class='awrc'>0.59</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.30</td><td align="right" headers="perSecond StdDev" class='awrc'>0.08</td><td align="right" headers="perSecond Min" class='awrc'>0.24</td><td align="right" headers="perSecond Max" class='awrcrb'>0.35</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:good hint</td><td align="right" class='awrnc'>1,214</td><td align="right" class='awrnc'>1.84</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.92</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.23</td><td align="right" headers="perSecond Min" class='awrnc'>0.76</td><td align="right" headers="perSecond Max" class='awrncrb'>1.08</td></tr>
<tr><td scope="row" class='awrc'>ASSM wasted db state change</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO (bound) vector count</td><td align="right" class='awrnc'>755</td><td align="right" class='awrnc'>1.14</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.57</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.49</td><td align="right" headers="perSecond Min" class='awrnc'>0.22</td><td align="right" headers="perSecond Max" class='awrncrb'>0.92</td></tr>
<tr><td scope="row" class='awrc'>Batched IO block miss count</td><td align="right" class='awrc'>22,439,166</td><td align="right" class='awrc'>33,959.52</td><td align="right" class='awrc'>303.82</td><td align="right" headers="perSecond Average" class='awrclb'>16,979.76</td><td align="right" headers="perSecond StdDev" class='awrc'>2,167.83</td><td align="right" headers="perSecond Min" class='awrc'>15,446.87</td><td align="right" headers="perSecond Max" class='awrcrb'>18,512.65</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO double miss count</td><td align="right" class='awrnc'>420,502</td><td align="right" class='awrnc'>636.39</td><td align="right" class='awrnc'>5.69</td><td align="right" headers="perSecond Average" class='awrnclb'>318.19</td><td align="right" headers="perSecond StdDev" class='awrnc'>35.17</td><td align="right" headers="perSecond Min" class='awrnc'>293.33</td><td align="right" headers="perSecond Max" class='awrncrb'>343.06</td></tr>
<tr><td scope="row" class='awrc'>Batched IO same unit count</td><td align="right" class='awrc'>1,490</td><td align="right" class='awrc'>2.25</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>1.13</td><td align="right" headers="perSecond StdDev" class='awrc'>0.96</td><td align="right" headers="perSecond Min" class='awrc'>0.45</td><td align="right" headers="perSecond Max" class='awrcrb'>1.81</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO single block count</td><td align="right" class='awrnc'>1,905</td><td align="right" class='awrnc'>2.88</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>1.44</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.55</td><td align="right" headers="perSecond Min" class='awrnc'>1.05</td><td align="right" headers="perSecond Max" class='awrncrb'>1.83</td></tr>
<tr><td scope="row" class='awrc'>Batched IO vector block count</td><td align="right" class='awrc'>22,446,754</td><td align="right" class='awrc'>33,971.00</td><td align="right" class='awrc'>303.93</td><td align="right" headers="perSecond Average" class='awrclb'>16,985.50</td><td align="right" headers="perSecond StdDev" class='awrc'>2,161.01</td><td align="right" headers="perSecond Min" class='awrc'>15,457.44</td><td align="right" headers="perSecond Max" class='awrcrb'>18,513.57</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO vector read count</td><td align="right" class='awrnc'>405,399</td><td align="right" class='awrnc'>613.53</td><td align="right" class='awrnc'>5.49</td><td align="right" headers="perSecond Average" class='awrnclb'>306.77</td><td align="right" headers="perSecond StdDev" class='awrnc'>39.89</td><td align="right" headers="perSecond Min" class='awrnc'>278.56</td><td align="right" headers="perSecond Max" class='awrncrb'>334.97</td></tr>
<tr><td scope="row" class='awrc'>Block Cleanout Optim referenced</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>CCursor + sql area evicted</td><td align="right" class='awrnc'>4,324</td><td align="right" class='awrnc'>6.54</td><td align="right" class='awrnc'>0.06</td><td align="right" headers="perSecond Average" class='awrnclb'>3.27</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.89</td><td align="right" headers="perSecond Min" class='awrnc'>2.64</td><td align="right" headers="perSecond Max" class='awrncrb'>3.90</td></tr>
<tr><td scope="row" class='awrc'>CPU used by this session</td><td align="right" class='awrc'>759,788</td><td align="right" class='awrc'>1,149.87</td><td align="right" class='awrc'>10.29</td><td align="right" headers="perSecond Average" class='awrclb'>574.94</td><td align="right" headers="perSecond StdDev" class='awrc'>24.98</td><td align="right" headers="perSecond Min" class='awrc'>557.27</td><td align="right" headers="perSecond Max" class='awrcrb'>592.60</td></tr>
<tr><td scope="row" class='awrnc'>CPU used when call started</td><td align="right" class='awrnc'>604,004</td><td align="right" class='awrnc'>914.11</td><td align="right" class='awrnc'>8.18</td><td align="right" headers="perSecond Average" class='awrnclb'>457.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>5.69</td><td align="right" headers="perSecond Min" class='awrnc'>453.03</td><td align="right" headers="perSecond Max" class='awrncrb'>461.07</td></tr>
<tr><td scope="row" class='awrc'>CR blocks created</td><td align="right" class='awrc'>17,418</td><td align="right" class='awrc'>26.36</td><td align="right" class='awrc'>0.24</td><td align="right" headers="perSecond Average" class='awrclb'>13.18</td><td align="right" headers="perSecond StdDev" class='awrc'>5.02</td><td align="right" headers="perSecond Min" class='awrc'>9.63</td><td align="right" headers="perSecond Max" class='awrcrb'>16.73</td></tr>
<tr><td scope="row" class='awrnc'>Cached Commit SCN referenced</td><td align="right" class='awrnc'>26,032,715</td><td align="right" class='awrnc'>39,398.01</td><td align="right" class='awrnc'>352.48</td><td align="right" headers="perSecond Average" class='awrnclb'>19,699.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>2,624.13</td><td align="right" headers="perSecond Min" class='awrnc'>17,843.46</td><td align="right" headers="perSecond Max" class='awrncrb'>21,554.54</td></tr>
<tr><td scope="row" class='awrc'>Client Advertised Receive Window</td><td align="right" class='awrc'>3,591</td><td align="right" class='awrc'>5.43</td><td align="right" class='awrc'>0.05</td><td align="right" headers="perSecond Average" class='awrclb'>2.72</td><td align="right" headers="perSecond StdDev" class='awrc'>0.10</td><td align="right" headers="perSecond Min" class='awrc'>2.65</td><td align="right" headers="perSecond Max" class='awrcrb'>2.79</td></tr>
<tr><td scope="row" class='awrnc'>Client Advertised Send Window</td><td align="right" class='awrnc'>3,591</td><td align="right" class='awrnc'>5.43</td><td align="right" class='awrnc'>0.05</td><td align="right" headers="perSecond Average" class='awrnclb'>2.72</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.10</td><td align="right" headers="perSecond Min" class='awrnc'>2.65</td><td align="right" headers="perSecond Max" class='awrncrb'>2.79</td></tr>
<tr><td scope="row" class='awrc'>Client Path Maximum Transmission Unit(MTU)</td><td align="right" class='awrc'>16,765,100</td><td align="right" class='awrc'>25,371.57</td><td align="right" class='awrc'>227.00</td><td align="right" headers="perSecond Average" class='awrclb'>12,685.79</td><td align="right" headers="perSecond StdDev" class='awrc'>17,124.18</td><td align="right" headers="perSecond Min" class='awrc'>577.16</td><td align="right" headers="perSecond Max" class='awrcrb'>24,794.41</td></tr>
<tr><td scope="row" class='awrnc'>Client Send Congestion Window</td><td align="right" class='awrnc'>5,114</td><td align="right" class='awrnc'>7.74</td><td align="right" class='awrnc'>0.07</td><td align="right" headers="perSecond Average" class='awrnclb'>3.87</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.12</td><td align="right" headers="perSecond Min" class='awrnc'>3.78</td><td align="right" headers="perSecond Max" class='awrncrb'>3.96</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Last Ack Received</td><td align="right" class='awrc'>364</td><td align="right" class='awrc'>0.55</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.28</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.27</td><td align="right" headers="perSecond Max" class='awrcrb'>0.28</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Data Received</td><td align="right" class='awrnc'>251</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.19</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.18</td><td align="right" headers="perSecond Max" class='awrncrb'>0.20</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Last Data Sent</td><td align="right" class='awrc'>2,064</td><td align="right" class='awrc'>3.12</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>1.56</td><td align="right" headers="perSecond StdDev" class='awrc'>0.54</td><td align="right" headers="perSecond Min" class='awrc'>1.18</td><td align="right" headers="perSecond Max" class='awrcrb'>1.95</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Round Trip Time</td><td align="right" class='awrnc'>2,384,349</td><td align="right" class='awrnc'>3,608.49</td><td align="right" class='awrnc'>32.28</td><td align="right" headers="perSecond Average" class='awrnclb'>1,804.24</td><td align="right" headers="perSecond StdDev" class='awrnc'>112.96</td><td align="right" headers="perSecond Min" class='awrnc'>1,724.37</td><td align="right" headers="perSecond Max" class='awrncrb'>1,884.12</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Round Trip Time Variance</td><td align="right" class='awrc'>3,123,739</td><td align="right" class='awrc'>4,727.44</td><td align="right" class='awrc'>42.29</td><td align="right" headers="perSecond Average" class='awrclb'>2,363.72</td><td align="right" headers="perSecond StdDev" class='awrc'>997.75</td><td align="right" headers="perSecond Min" class='awrc'>1,658.21</td><td align="right" headers="perSecond Max" class='awrcrb'>3,069.23</td></tr>
<tr><td scope="row" class='awrnc'>Client Total Bytes Acked</td><td align="right" class='awrnc'>8,108,343</td><td align="right" class='awrnc'>12,271.25</td><td align="right" class='awrnc'>109.79</td><td align="right" headers="perSecond Average" class='awrnclb'>6,135.62</td><td align="right" headers="perSecond StdDev" class='awrnc'>232.58</td><td align="right" headers="perSecond Min" class='awrnc'>5,971.16</td><td align="right" headers="perSecond Max" class='awrncrb'>6,300.09</td></tr>
<tr><td scope="row" class='awrc'>Client Total Bytes Received</td><td align="right" class='awrc'>3,137,005</td><td align="right" class='awrc'>4,747.58</td><td align="right" class='awrc'>42.47</td><td align="right" headers="perSecond Average" class='awrclb'>2,373.79</td><td align="right" headers="perSecond StdDev" class='awrc'>86.39</td><td align="right" headers="perSecond Min" class='awrc'>2,312.70</td><td align="right" headers="perSecond Max" class='awrcrb'>2,434.87</td></tr>
<tr><td scope="row" class='awrnc'>Client Total Number of Retransmitted Packets</td><td align="right" class='awrnc'>33</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.05</td><td align="right" headers="perSecond Max" class='awrncrb'>0.05</td></tr>
<tr><td scope="row" class='awrc'>Commit SCN cached</td><td align="right" class='awrc'>392</td><td align="right" class='awrc'>0.59</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.30</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.28</td><td align="right" headers="perSecond Max" class='awrcrb'>0.31</td></tr>
<tr><td scope="row" class='awrnc'>DB time</td><td align="right" class='awrnc'>30,780,845</td><td align="right" class='awrnc'>46,584.05</td><td align="right" class='awrnc'>416.77</td><td align="right" headers="perSecond Average" class='awrnclb'>23,292.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>894.59</td><td align="right" headers="perSecond Min" class='awrnc'>22,659.45</td><td align="right" headers="perSecond Max" class='awrncrb'>23,924.59</td></tr>
<tr><td scope="row" class='awrc'>DBWR checkpoint buffers written</td><td align="right" class='awrc'>451,034</td><td align="right" class='awrc'>682.60</td><td align="right" class='awrc'>6.11</td><td align="right" headers="perSecond Average" class='awrclb'>341.30</td><td align="right" headers="perSecond StdDev" class='awrc'>26.96</td><td align="right" headers="perSecond Min" class='awrc'>322.23</td><td align="right" headers="perSecond Max" class='awrcrb'>360.36</td></tr>
<tr><td scope="row" class='awrnc'>DBWR checkpoints</td><td align="right" class='awrnc'>426</td><td align="right" class='awrnc'>0.64</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.32</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>0.30</td><td align="right" headers="perSecond Max" class='awrncrb'>0.35</td></tr>
<tr><td scope="row" class='awrc'>DBWR fusion writes</td><td align="right" class='awrc'>426</td><td align="right" class='awrc'>0.64</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.32</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.30</td><td align="right" headers="perSecond Max" class='awrcrb'>0.34</td></tr>
<tr><td scope="row" class='awrnc'>DBWR object drop buffers written</td><td align="right" class='awrnc'>95</td><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.07</td><td align="right" headers="perSecond Max" class='awrncrb'>0.08</td></tr>
<tr><td scope="row" class='awrc'>DBWR transaction table writes</td><td align="right" class='awrc'>1,120</td><td align="right" class='awrc'>1.70</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>0.85</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.84</td><td align="right" headers="perSecond Max" class='awrcrb'>0.86</td></tr>
<tr><td scope="row" class='awrnc'>DBWR undo block writes</td><td align="right" class='awrnc'>206,776</td><td align="right" class='awrnc'>312.94</td><td align="right" class='awrnc'>2.80</td><td align="right" headers="perSecond Average" class='awrnclb'>156.47</td><td align="right" headers="perSecond StdDev" class='awrnc'>22.47</td><td align="right" headers="perSecond Min" class='awrnc'>140.58</td><td align="right" headers="perSecond Max" class='awrncrb'>172.36</td></tr>
<tr><td scope="row" class='awrc'>DFO trees parallelized</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.04</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>Effective IO time</td><td align="right" class='awrnc'>2,771</td><td align="right" class='awrnc'>4.19</td><td align="right" class='awrnc'>0.04</td><td align="right" headers="perSecond Average" class='awrnclb'>4.19</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>4.19</td><td align="right" headers="perSecond Max" class='awrncrb'>4.19</td></tr>
<tr><td scope="row" class='awrc'>HSC Heap Segment Block Changes</td><td align="right" class='awrc'>4,602,783</td><td align="right" class='awrc'>6,965.87</td><td align="right" class='awrc'>62.32</td><td align="right" headers="perSecond Average" class='awrclb'>3,482.93</td><td align="right" headers="perSecond StdDev" class='awrc'>484.37</td><td align="right" headers="perSecond Min" class='awrc'>3,140.43</td><td align="right" headers="perSecond Max" class='awrcrb'>3,825.44</td></tr>
<tr><td scope="row" class='awrnc'>Heap Segment Array Inserts</td><td align="right" class='awrnc'>382</td><td align="right" class='awrnc'>0.58</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.29</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.28</td><td align="right" headers="perSecond Max" class='awrncrb'>0.29</td></tr>
<tr><td scope="row" class='awrc'>Heap Segment Array Updates</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc req</td><td align="right" class='awrnc'>978</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.74</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.15</td><td align="right" headers="perSecond Min" class='awrnc'>0.63</td><td align="right" headers="perSecond Max" class='awrncrb'>0.85</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc space (block)</td><td align="right" class='awrc'>1,008,795,648</td><td align="right" class='awrc'>1,526,712.20</td><td align="right" class='awrc'>13,658.95</td><td align="right" headers="perSecond Average" class='awrclb'>763,356.10</td><td align="right" headers="perSecond StdDev" class='awrc'>156,006.27</td><td align="right" headers="perSecond Min" class='awrc'>653,043.01</td><td align="right" headers="perSecond Max" class='awrcrb'>873,669.19</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc time (ms)</td><td align="right" class='awrnc'>21,361,035</td><td align="right" class='awrnc'>32,328.35</td><td align="right" class='awrnc'>289.23</td><td align="right" headers="perSecond Average" class='awrnclb'>16,164.17</td><td align="right" headers="perSecond StdDev" class='awrnc'>7,160.65</td><td align="right" headers="perSecond Min" class='awrnc'>11,100.83</td><td align="right" headers="perSecond Max" class='awrncrb'>21,227.52</td></tr>
<tr><td scope="row" class='awrc'>KTFB apply req</td><td align="right" class='awrc'>1,091</td><td align="right" class='awrc'>1.65</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.83</td><td align="right" headers="perSecond StdDev" class='awrc'>0.27</td><td align="right" headers="perSecond Min" class='awrc'>0.63</td><td align="right" headers="perSecond Max" class='awrcrb'>1.02</td></tr>
<tr><td scope="row" class='awrnc'>KTFB apply time (ms)</td><td align="right" class='awrnc'>54,848</td><td align="right" class='awrnc'>83.01</td><td align="right" class='awrnc'>0.74</td><td align="right" headers="perSecond Average" class='awrnclb'>41.50</td><td align="right" headers="perSecond StdDev" class='awrnc'>7.35</td><td align="right" headers="perSecond Min" class='awrnc'>36.30</td><td align="right" headers="perSecond Max" class='awrncrb'>46.70</td></tr>
<tr><td scope="row" class='awrc'>KTFB free req</td><td align="right" class='awrc'>146</td><td align="right" class='awrc'>0.22</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.11</td><td align="right" headers="perSecond StdDev" class='awrc'>0.12</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.20</td></tr>
<tr><td scope="row" class='awrnc'>KTFB free space (block)</td><td align="right" class='awrnc'>3,328</td><td align="right" class='awrnc'>5.04</td><td align="right" class='awrnc'>0.05</td><td align="right" headers="perSecond Average" class='awrnclb'>2.52</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.75</td><td align="right" headers="perSecond Min" class='awrnc'>1.28</td><td align="right" headers="perSecond Max" class='awrncrb'>3.75</td></tr>
<tr><td scope="row" class='awrc'>KTFB free time (ms)</td><td align="right" class='awrc'>1,461</td><td align="right" class='awrc'>2.21</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>1.11</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>1.10</td><td align="right" headers="perSecond Max" class='awrcrb'>1.11</td></tr>
<tr><td scope="row" class='awrnc'>PX local messages recv'd</td><td align="right" class='awrnc'>1,008</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.76</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.69</td><td align="right" headers="perSecond Min" class='awrnc'>0.28</td><td align="right" headers="perSecond Max" class='awrncrb'>1.25</td></tr>
<tr><td scope="row" class='awrc'>PX local messages sent</td><td align="right" class='awrc'>1,021</td><td align="right" class='awrc'>1.55</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.77</td><td align="right" headers="perSecond StdDev" class='awrc'>0.70</td><td align="right" headers="perSecond Min" class='awrc'>0.28</td><td align="right" headers="perSecond Max" class='awrcrb'>1.27</td></tr>
<tr><td scope="row" class='awrnc'>PX remote messages recv'd</td><td align="right" class='awrnc'>1,000</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.76</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.07</td><td align="right" headers="perSecond Min" class='awrnc'>0.71</td><td align="right" headers="perSecond Max" class='awrncrb'>0.81</td></tr>
<tr><td scope="row" class='awrc'>PX remote messages sent</td><td align="right" class='awrc'>1,022</td><td align="right" class='awrc'>1.55</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.77</td><td align="right" headers="perSecond StdDev" class='awrc'>0.13</td><td align="right" headers="perSecond Min" class='awrc'>0.68</td><td align="right" headers="perSecond Max" class='awrcrb'>0.87</td></tr>
<tr><td scope="row" class='awrnc'>Parallel operations not downgraded</td><td align="right" class='awrnc'>95</td><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.07</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.12</td></tr>
<tr><td scope="row" class='awrc'>Requests to/from client</td><td align="right" class='awrc'>1,677</td><td align="right" class='awrc'>2.54</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>1.27</td><td align="right" headers="perSecond StdDev" class='awrc'>0.09</td><td align="right" headers="perSecond Min" class='awrc'>1.20</td><td align="right" headers="perSecond Max" class='awrcrb'>1.33</td></tr>
<tr><td scope="row" class='awrnc'>SMON posted for undo segment shrink</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net roundtrips to/from client</td><td align="right" class='awrc'>1,165</td><td align="right" class='awrc'>1.76</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>0.88</td><td align="right" headers="perSecond StdDev" class='awrc'>0.10</td><td align="right" headers="perSecond Min" class='awrc'>0.81</td><td align="right" headers="perSecond Max" class='awrcrb'>0.95</td></tr>
<tr><td scope="row" class='awrnc'>active txn count during cleanout</td><td align="right" class='awrnc'>719</td><td align="right" class='awrnc'>1.09</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.54</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.15</td><td align="right" headers="perSecond Min" class='awrnc'>0.44</td><td align="right" headers="perSecond Max" class='awrncrb'>0.65</td></tr>
<tr><td scope="row" class='awrc'>application wait time</td><td align="right" class='awrc'>4,001</td><td align="right" class='awrc'>6.06</td><td align="right" class='awrc'>0.05</td><td align="right" headers="perSecond Average" class='awrclb'>3.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.11</td><td align="right" headers="perSecond Min" class='awrc'>2.95</td><td align="right" headers="perSecond Max" class='awrcrb'>3.11</td></tr>
<tr><td scope="row" class='awrnc'>background timeouts</td><td align="right" class='awrnc'>12,770</td><td align="right" class='awrnc'>19.33</td><td align="right" class='awrnc'>0.17</td><td align="right" headers="perSecond Average" class='awrnclb'>9.66</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>9.65</td><td align="right" headers="perSecond Max" class='awrncrb'>9.68</td></tr>
<tr><td scope="row" class='awrc'>blocks cleaned out using minact</td><td align="right" class='awrc'>422,536</td><td align="right" class='awrc'>639.47</td><td align="right" class='awrc'>5.72</td><td align="right" headers="perSecond Average" class='awrclb'>319.73</td><td align="right" headers="perSecond StdDev" class='awrc'>73.19</td><td align="right" headers="perSecond Min" class='awrc'>267.98</td><td align="right" headers="perSecond Max" class='awrcrb'>371.48</td></tr>
<tr><td scope="row" class='awrnc'>branch node splits</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>buffer is not pinned count</td><td align="right" class='awrc'>71,624,772</td><td align="right" class='awrc'>108,397.20</td><td align="right" class='awrc'>969.79</td><td align="right" headers="perSecond Average" class='awrclb'>54,198.60</td><td align="right" headers="perSecond StdDev" class='awrc'>6,956.72</td><td align="right" headers="perSecond Min" class='awrc'>49,279.46</td><td align="right" headers="perSecond Max" class='awrcrb'>59,117.75</td></tr>
<tr><td scope="row" class='awrnc'>buffer is pinned count</td><td align="right" class='awrnc'>30,471,961</td><td align="right" class='awrnc'>46,116.36</td><td align="right" class='awrnc'>412.59</td><td align="right" headers="perSecond Average" class='awrnclb'>23,058.18</td><td align="right" headers="perSecond StdDev" class='awrnc'>3,390.74</td><td align="right" headers="perSecond Min" class='awrnc'>20,660.57</td><td align="right" headers="perSecond Max" class='awrncrb'>25,455.79</td></tr>
<tr><td scope="row" class='awrc'>bytes received via SQL*Net from client</td><td align="right" class='awrc'>918,330</td><td align="right" class='awrc'>1,389.79</td><td align="right" class='awrc'>12.43</td><td align="right" headers="perSecond Average" class='awrclb'>694.89</td><td align="right" headers="perSecond StdDev" class='awrc'>420.71</td><td align="right" headers="perSecond Min" class='awrc'>397.40</td><td align="right" headers="perSecond Max" class='awrcrb'>992.38</td></tr>
<tr><td scope="row" class='awrnc'>bytes sent via SQL*Net to client</td><td align="right" class='awrnc'>295,572</td><td align="right" class='awrnc'>447.32</td><td align="right" class='awrnc'>4.00</td><td align="right" headers="perSecond Average" class='awrnclb'>223.66</td><td align="right" headers="perSecond StdDev" class='awrnc'>12.63</td><td align="right" headers="perSecond Min" class='awrnc'>214.73</td><td align="right" headers="perSecond Max" class='awrncrb'>232.59</td></tr>
<tr><td scope="row" class='awrc'>calls to get snapshot scn: kcmgss</td><td align="right" class='awrc'>646,180</td><td align="right" class='awrc'>977.93</td><td align="right" class='awrc'>8.75</td><td align="right" headers="perSecond Average" class='awrclb'>488.97</td><td align="right" headers="perSecond StdDev" class='awrc'>30.89</td><td align="right" headers="perSecond Min" class='awrc'>467.12</td><td align="right" headers="perSecond Max" class='awrcrb'>510.81</td></tr>
<tr><td scope="row" class='awrnc'>calls to kcmgas</td><td align="right" class='awrnc'>124,591</td><td align="right" class='awrnc'>188.56</td><td align="right" class='awrnc'>1.69</td><td align="right" headers="perSecond Average" class='awrnclb'>94.28</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.65</td><td align="right" headers="perSecond Min" class='awrnc'>91.70</td><td align="right" headers="perSecond Max" class='awrncrb'>96.86</td></tr>
<tr><td scope="row" class='awrc'>calls to kcmgcs</td><td align="right" class='awrc'>14,244</td><td align="right" class='awrc'>21.56</td><td align="right" class='awrc'>0.19</td><td align="right" headers="perSecond Average" class='awrclb'>10.78</td><td align="right" headers="perSecond StdDev" class='awrc'>1.00</td><td align="right" headers="perSecond Min" class='awrc'>10.07</td><td align="right" headers="perSecond Max" class='awrcrb'>11.49</td></tr>
<tr><td scope="row" class='awrnc'>cell physical IO interconnect bytes</td><td align="right" class='awrnc'>311,583,538,176</td><td align="right" class='awrnc'>471,551,692.81</td><td align="right" class='awrnc'>4,218,797.91</td><td align="right" headers="perSecond Average" class='awrnclb'>235,775,846.40</td><td align="right" headers="perSecond StdDev" class='awrnc'>30,689,470.76</td><td align="right" headers="perSecond Min" class='awrnc'>214,075,113.52</td><td align="right" headers="perSecond Max" class='awrncrb'>257,476,579.29</td></tr>
<tr><td scope="row" class='awrc'>change write time</td><td align="right" class='awrc'>15,355</td><td align="right" class='awrc'>23.24</td><td align="right" class='awrc'>0.21</td><td align="right" headers="perSecond Average" class='awrclb'>11.62</td><td align="right" headers="perSecond StdDev" class='awrc'>0.77</td><td align="right" headers="perSecond Min" class='awrc'>11.08</td><td align="right" headers="perSecond Max" class='awrcrb'>12.16</td></tr>
<tr><td scope="row" class='awrnc'>cleanout - number of ktugct calls</td><td align="right" class='awrnc'>40,244</td><td align="right" class='awrnc'>60.91</td><td align="right" class='awrnc'>0.54</td><td align="right" headers="perSecond Average" class='awrnclb'>30.45</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.24</td><td align="right" headers="perSecond Min" class='awrnc'>28.87</td><td align="right" headers="perSecond Max" class='awrncrb'>32.03</td></tr>
<tr><td scope="row" class='awrc'>cleanouts and rollbacks - consistent read gets</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>cleanouts only - consistent read gets</td><td align="right" class='awrnc'>541</td><td align="right" class='awrnc'>0.82</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.41</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.40</td><td align="right" headers="perSecond Max" class='awrncrb'>0.42</td></tr>
<tr><td scope="row" class='awrc'>cluster key scan block gets</td><td align="right" class='awrc'>8,305</td><td align="right" class='awrc'>12.57</td><td align="right" class='awrc'>0.11</td><td align="right" headers="perSecond Average" class='awrclb'>6.28</td><td align="right" headers="perSecond StdDev" class='awrc'>5.10</td><td align="right" headers="perSecond Min" class='awrc'>2.68</td><td align="right" headers="perSecond Max" class='awrcrb'>9.89</td></tr>
<tr><td scope="row" class='awrnc'>cluster key scans</td><td align="right" class='awrnc'>6,244</td><td align="right" class='awrnc'>9.45</td><td align="right" class='awrnc'>0.08</td><td align="right" headers="perSecond Average" class='awrnclb'>4.72</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.69</td><td align="right" headers="perSecond Min" class='awrnc'>2.11</td><td align="right" headers="perSecond Max" class='awrncrb'>7.34</td></tr>
<tr><td scope="row" class='awrc'>cluster wait time</td><td align="right" class='awrc'>25,965,343</td><td align="right" class='awrc'>39,296.23</td><td align="right" class='awrc'>351.57</td><td align="right" headers="perSecond Average" class='awrclb'>19,648.11</td><td align="right" headers="perSecond StdDev" class='awrc'>959.29</td><td align="right" headers="perSecond Min" class='awrc'>18,969.79</td><td align="right" headers="perSecond Max" class='awrcrb'>20,326.44</td></tr>
<tr><td scope="row" class='awrnc'>commit batch/immediate performed</td><td align="right" class='awrnc'>47</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.06</td></tr>
<tr><td scope="row" class='awrc'>commit batch/immediate requested</td><td align="right" class='awrc'>47</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: block lost</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: buffer being written</td><td align="right" class='awrc'>278</td><td align="right" class='awrc'>0.42</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.21</td><td align="right" headers="perSecond StdDev" class='awrc'>0.13</td><td align="right" headers="perSecond Min" class='awrc'>0.12</td><td align="right" headers="perSecond Max" class='awrcrb'>0.30</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: callback failure</td><td align="right" class='awrnc'>89</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.06</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.11</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: cannot pin</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanouts</td><td align="right" class='awrnc'>4,611,032</td><td align="right" class='awrnc'>6,978.35</td><td align="right" class='awrnc'>62.43</td><td align="right" headers="perSecond Average" class='awrnclb'>3,489.18</td><td align="right" headers="perSecond StdDev" class='awrnc'>487.57</td><td align="right" headers="perSecond Min" class='awrnc'>3,144.41</td><td align="right" headers="perSecond Max" class='awrncrb'>3,833.94</td></tr>
<tr><td scope="row" class='awrc'>commit cleanouts successfully completed</td><td align="right" class='awrc'>4,610,658</td><td align="right" class='awrc'>6,977.79</td><td align="right" class='awrc'>62.43</td><td align="right" headers="perSecond Average" class='awrclb'>3,488.89</td><td align="right" headers="perSecond StdDev" class='awrc'>487.37</td><td align="right" headers="perSecond Min" class='awrc'>3,144.27</td><td align="right" headers="perSecond Max" class='awrcrb'>3,833.52</td></tr>
<tr><td scope="row" class='awrnc'>commit immediate performed</td><td align="right" class='awrnc'>47</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.06</td></tr>
<tr><td scope="row" class='awrc'>commit immediate requested</td><td align="right" class='awrc'>47</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>commit txn count during cleanout</td><td align="right" class='awrnc'>1,036</td><td align="right" class='awrnc'>1.57</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.78</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.15</td><td align="right" headers="perSecond Min" class='awrnc'>0.68</td><td align="right" headers="perSecond Max" class='awrncrb'>0.89</td></tr>
<tr><td scope="row" class='awrc'>concurrency wait time</td><td align="right" class='awrc'>8,732</td><td align="right" class='awrc'>13.22</td><td align="right" class='awrc'>0.12</td><td align="right" headers="perSecond Average" class='awrclb'>6.61</td><td align="right" headers="perSecond StdDev" class='awrc'>7.28</td><td align="right" headers="perSecond Min" class='awrc'>1.46</td><td align="right" headers="perSecond Max" class='awrcrb'>11.76</td></tr>
<tr><td scope="row" class='awrnc'>consistent changes</td><td align="right" class='awrnc'>55,769</td><td align="right" class='awrnc'>84.40</td><td align="right" class='awrnc'>0.76</td><td align="right" headers="perSecond Average" class='awrnclb'>42.20</td><td align="right" headers="perSecond StdDev" class='awrnc'>5.86</td><td align="right" headers="perSecond Min" class='awrnc'>38.05</td><td align="right" headers="perSecond Max" class='awrncrb'>46.35</td></tr>
<tr><td scope="row" class='awrc'>consistent gets</td><td align="right" class='awrc'>27,240,576</td><td align="right" class='awrc'>41,225.99</td><td align="right" class='awrc'>368.83</td><td align="right" headers="perSecond Average" class='awrclb'>20,613.00</td><td align="right" headers="perSecond StdDev" class='awrc'>2,625.88</td><td align="right" headers="perSecond Min" class='awrc'>18,756.22</td><td align="right" headers="perSecond Max" class='awrcrb'>22,469.78</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets examination</td><td align="right" class='awrnc'>611,251</td><td align="right" class='awrnc'>925.07</td><td align="right" class='awrnc'>8.28</td><td align="right" headers="perSecond Average" class='awrnclb'>462.54</td><td align="right" headers="perSecond StdDev" class='awrnc'>25.95</td><td align="right" headers="perSecond Min" class='awrnc'>444.18</td><td align="right" headers="perSecond Max" class='awrncrb'>480.89</td></tr>
<tr><td scope="row" class='awrc'>consistent gets examination (fastpath)</td><td align="right" class='awrc'>610,532</td><td align="right" class='awrc'>923.98</td><td align="right" class='awrc'>8.27</td><td align="right" headers="perSecond Average" class='awrclb'>461.99</td><td align="right" headers="perSecond StdDev" class='awrc'>25.97</td><td align="right" headers="perSecond Min" class='awrc'>443.63</td><td align="right" headers="perSecond Max" class='awrcrb'>480.35</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets from cache</td><td align="right" class='awrnc'>27,240,571</td><td align="right" class='awrnc'>41,225.99</td><td align="right" class='awrnc'>368.83</td><td align="right" headers="perSecond Average" class='awrnclb'>20,612.99</td><td align="right" headers="perSecond StdDev" class='awrnc'>2,625.90</td><td align="right" headers="perSecond Min" class='awrnc'>18,756.20</td><td align="right" headers="perSecond Max" class='awrncrb'>22,469.78</td></tr>
<tr><td scope="row" class='awrc'>consistent gets pin</td><td align="right" class='awrc'>26,629,320</td><td align="right" class='awrc'>40,300.91</td><td align="right" class='awrc'>360.56</td><td align="right" headers="perSecond Average" class='awrclb'>20,150.46</td><td align="right" headers="perSecond StdDev" class='awrc'>2,599.94</td><td align="right" headers="perSecond Min" class='awrc'>18,312.02</td><td align="right" headers="perSecond Max" class='awrcrb'>21,988.90</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets pin (fastpath)</td><td align="right" class='awrnc'>25,309,990</td><td align="right" class='awrnc'>38,304.23</td><td align="right" class='awrnc'>342.69</td><td align="right" headers="perSecond Average" class='awrnclb'>19,152.12</td><td align="right" headers="perSecond StdDev" class='awrnc'>2,475.84</td><td align="right" headers="perSecond Min" class='awrnc'>17,401.43</td><td align="right" headers="perSecond Max" class='awrncrb'>20,902.80</td></tr>
<tr><td scope="row" class='awrc'>cursor authentications</td><td align="right" class='awrc'>544</td><td align="right" class='awrc'>0.82</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.41</td><td align="right" headers="perSecond StdDev" class='awrc'>0.34</td><td align="right" headers="perSecond Min" class='awrc'>0.17</td><td align="right" headers="perSecond Max" class='awrcrb'>0.65</td></tr>
<tr><td scope="row" class='awrnc'>cursor reload failures</td><td align="right" class='awrnc'>631</td><td align="right" class='awrnc'>0.95</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.48</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.67</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.95</td></tr>
<tr><td scope="row" class='awrc'>data blocks consistent reads - undo records applied</td><td align="right" class='awrc'>108</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>db block changes</td><td align="right" class='awrnc'>9,626,692</td><td align="right" class='awrnc'>14,569.07</td><td align="right" class='awrnc'>130.34</td><td align="right" headers="perSecond Average" class='awrnclb'>7,284.53</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,011.28</td><td align="right" headers="perSecond Min" class='awrnc'>6,569.45</td><td align="right" headers="perSecond Max" class='awrncrb'>7,999.62</td></tr>
<tr><td scope="row" class='awrc'>db block gets</td><td align="right" class='awrc'>5,260,987</td><td align="right" class='awrc'>7,962.00</td><td align="right" class='awrc'>71.23</td><td align="right" headers="perSecond Average" class='awrclb'>3,981.00</td><td align="right" headers="perSecond StdDev" class='awrc'>533.48</td><td align="right" headers="perSecond Min" class='awrc'>3,603.77</td><td align="right" headers="perSecond Max" class='awrcrb'>4,358.23</td></tr>
<tr><td scope="row" class='awrnc'>db block gets direct</td><td align="right" class='awrnc'>2,849</td><td align="right" class='awrnc'>4.31</td><td align="right" class='awrnc'>0.04</td><td align="right" headers="perSecond Average" class='awrnclb'>2.16</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.92</td><td align="right" headers="perSecond Min" class='awrnc'>1.51</td><td align="right" headers="perSecond Max" class='awrncrb'>2.81</td></tr>
<tr><td scope="row" class='awrc'>db block gets from cache</td><td align="right" class='awrc'>5,258,138</td><td align="right" class='awrc'>7,957.68</td><td align="right" class='awrc'>71.19</td><td align="right" headers="perSecond Average" class='awrclb'>3,978.84</td><td align="right" headers="perSecond StdDev" class='awrc'>534.40</td><td align="right" headers="perSecond Min" class='awrc'>3,600.96</td><td align="right" headers="perSecond Max" class='awrcrb'>4,356.72</td></tr>
<tr><td scope="row" class='awrnc'>db block gets from cache (fastpath)</td><td align="right" class='awrnc'>528,695</td><td align="right" class='awrnc'>800.13</td><td align="right" class='awrnc'>7.16</td><td align="right" headers="perSecond Average" class='awrnclb'>400.06</td><td align="right" headers="perSecond StdDev" class='awrnc'>44.62</td><td align="right" headers="perSecond Min" class='awrnc'>368.51</td><td align="right" headers="perSecond Max" class='awrncrb'>431.62</td></tr>
<tr><td scope="row" class='awrc'>deferred (CURRENT) block cleanout applications</td><td align="right" class='awrc'>439,376</td><td align="right" class='awrc'>664.95</td><td align="right" class='awrc'>5.95</td><td align="right" headers="perSecond Average" class='awrclb'>332.48</td><td align="right" headers="perSecond StdDev" class='awrc'>80.14</td><td align="right" headers="perSecond Min" class='awrc'>275.81</td><td align="right" headers="perSecond Max" class='awrcrb'>389.14</td></tr>
<tr><td scope="row" class='awrnc'>dirty buffers inspected</td><td align="right" class='awrnc'>3,918,961</td><td align="right" class='awrnc'>5,930.97</td><td align="right" class='awrnc'>53.06</td><td align="right" headers="perSecond Average" class='awrnclb'>2,965.48</td><td align="right" headers="perSecond StdDev" class='awrnc'>422.36</td><td align="right" headers="perSecond Min" class='awrnc'>2,666.83</td><td align="right" headers="perSecond Max" class='awrncrb'>3,264.14</td></tr>
<tr><td scope="row" class='awrc'>enqueue conversions</td><td align="right" class='awrc'>2,451</td><td align="right" class='awrc'>3.71</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>1.85</td><td align="right" headers="perSecond StdDev" class='awrc'>0.14</td><td align="right" headers="perSecond Min" class='awrc'>1.76</td><td align="right" headers="perSecond Max" class='awrcrb'>1.95</td></tr>
<tr><td scope="row" class='awrnc'>enqueue releases</td><td align="right" class='awrnc'>181,360</td><td align="right" class='awrnc'>274.47</td><td align="right" class='awrnc'>2.46</td><td align="right" headers="perSecond Average" class='awrnclb'>137.24</td><td align="right" headers="perSecond StdDev" class='awrnc'>10.38</td><td align="right" headers="perSecond Min" class='awrnc'>129.89</td><td align="right" headers="perSecond Max" class='awrncrb'>144.58</td></tr>
<tr><td scope="row" class='awrc'>enqueue requests</td><td align="right" class='awrc'>180,418</td><td align="right" class='awrc'>273.05</td><td align="right" class='awrc'>2.44</td><td align="right" headers="perSecond Average" class='awrclb'>136.52</td><td align="right" headers="perSecond StdDev" class='awrc'>10.21</td><td align="right" headers="perSecond Min" class='awrc'>129.31</td><td align="right" headers="perSecond Max" class='awrcrb'>143.74</td></tr>
<tr><td scope="row" class='awrnc'>enqueue timeouts</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>enqueue waits</td><td align="right" class='awrc'>1,573</td><td align="right" class='awrc'>2.38</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>1.19</td><td align="right" headers="perSecond StdDev" class='awrc'>0.17</td><td align="right" headers="perSecond Min" class='awrc'>1.07</td><td align="right" headers="perSecond Max" class='awrcrb'>1.31</td></tr>
<tr><td scope="row" class='awrnc'>exchange deadlocks</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>execute count</td><td align="right" class='awrc'>524,185</td><td align="right" class='awrc'>793.30</td><td align="right" class='awrc'>7.10</td><td align="right" headers="perSecond Average" class='awrclb'>396.65</td><td align="right" headers="perSecond StdDev" class='awrc'>36.59</td><td align="right" headers="perSecond Min" class='awrc'>370.78</td><td align="right" headers="perSecond Max" class='awrcrb'>422.53</td></tr>
<tr><td scope="row" class='awrnc'>file io service time</td><td align="right" class='awrnc'>909,723,791</td><td align="right" class='awrnc'>1,376,776.91</td><td align="right" class='awrnc'>12,317.53</td><td align="right" headers="perSecond Average" class='awrnclb'>688,388.45</td><td align="right" headers="perSecond StdDev" class='awrnc'>137,948.65</td><td align="right" headers="perSecond Min" class='awrnc'>590,844.03</td><td align="right" headers="perSecond Max" class='awrncrb'>785,932.88</td></tr>
<tr><td scope="row" class='awrc'>file io wait time</td><td align="right" class='awrc'>1,754,601,530,554</td><td align="right" class='awrc'>2,655,394,787.40</td><td align="right" class='awrc'>23,757,061.45</td><td align="right" headers="perSecond Average" class='awrclb'>1,327,697,393.70</td><td align="right" headers="perSecond StdDev" class='awrc'>673,838,324.66</td><td align="right" headers="perSecond Min" class='awrc'>851,221,744.91</td><td align="right" headers="perSecond Max" class='awrcrb'>1,804,173,042.49</td></tr>
<tr><td scope="row" class='awrnc'>free buffer inspected</td><td align="right" class='awrnc'>28,301,566</td><td align="right" class='awrnc'>42,831.70</td><td align="right" class='awrnc'>383.20</td><td align="right" headers="perSecond Average" class='awrnclb'>21,415.85</td><td align="right" headers="perSecond StdDev" class='awrnc'>2,784.50</td><td align="right" headers="perSecond Min" class='awrnc'>19,446.91</td><td align="right" headers="perSecond Max" class='awrncrb'>23,384.79</td></tr>
<tr><td scope="row" class='awrc'>free buffer requested</td><td align="right" class='awrc'>27,638,891</td><td align="right" class='awrc'>41,828.80</td><td align="right" class='awrc'>374.23</td><td align="right" headers="perSecond Average" class='awrclb'>20,914.40</td><td align="right" headers="perSecond StdDev" class='awrc'>2,722.02</td><td align="right" headers="perSecond Min" class='awrc'>18,989.64</td><td align="right" headers="perSecond Max" class='awrcrb'>22,839.16</td></tr>
<tr><td scope="row" class='awrnc'>gc blocks compressed</td><td align="right" class='awrnc'>100,556</td><td align="right" class='awrnc'>152.18</td><td align="right" class='awrnc'>1.36</td><td align="right" headers="perSecond Average" class='awrnclb'>76.09</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.28</td><td align="right" headers="perSecond Min" class='awrnc'>75.89</td><td align="right" headers="perSecond Max" class='awrncrb'>76.29</td></tr>
<tr><td scope="row" class='awrc'>gc blocks lost</td><td align="right" class='awrc'>15,150</td><td align="right" class='awrc'>22.93</td><td align="right" class='awrc'>0.21</td><td align="right" headers="perSecond Average" class='awrclb'>11.46</td><td align="right" headers="perSecond StdDev" class='awrc'>7.24</td><td align="right" headers="perSecond Min" class='awrc'>6.34</td><td align="right" headers="perSecond Max" class='awrcrb'>16.59</td></tr>
<tr><td scope="row" class='awrnc'>gc cleanout saved</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc cr block build time</td><td align="right" class='awrc'>470</td><td align="right" class='awrc'>0.71</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.36</td><td align="right" headers="perSecond StdDev" class='awrc'>0.05</td><td align="right" headers="perSecond Min" class='awrc'>0.32</td><td align="right" headers="perSecond Max" class='awrcrb'>0.39</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block flush time</td><td align="right" class='awrnc'>1,165</td><td align="right" class='awrnc'>1.76</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.88</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.17</td><td align="right" headers="perSecond Max" class='awrncrb'>1.60</td></tr>
<tr><td scope="row" class='awrc'>gc cr block receive time</td><td align="right" class='awrc'>259,258</td><td align="right" class='awrc'>392.36</td><td align="right" class='awrc'>3.51</td><td align="right" headers="perSecond Average" class='awrclb'>196.18</td><td align="right" headers="perSecond StdDev" class='awrc'>88.12</td><td align="right" headers="perSecond Min" class='awrc'>133.87</td><td align="right" headers="perSecond Max" class='awrcrb'>258.49</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks built</td><td align="right" class='awrnc'>59,335</td><td align="right" class='awrnc'>89.80</td><td align="right" class='awrnc'>0.80</td><td align="right" headers="perSecond Average" class='awrnclb'>44.90</td><td align="right" headers="perSecond StdDev" class='awrnc'>8.09</td><td align="right" headers="perSecond Min" class='awrnc'>39.18</td><td align="right" headers="perSecond Max" class='awrncrb'>50.62</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks flushed</td><td align="right" class='awrc'>198</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.15</td><td align="right" headers="perSecond StdDev" class='awrc'>0.16</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.26</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks received</td><td align="right" class='awrnc'>51,615</td><td align="right" class='awrnc'>78.11</td><td align="right" class='awrnc'>0.70</td><td align="right" headers="perSecond Average" class='awrnclb'>39.06</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.05</td><td align="right" headers="perSecond Min" class='awrnc'>37.61</td><td align="right" headers="perSecond Max" class='awrncrb'>40.51</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks served</td><td align="right" class='awrc'>62,434</td><td align="right" class='awrc'>94.49</td><td align="right" class='awrc'>0.85</td><td align="right" headers="perSecond Average" class='awrclb'>47.24</td><td align="right" headers="perSecond StdDev" class='awrc'>4.94</td><td align="right" headers="perSecond Min" class='awrc'>43.75</td><td align="right" headers="perSecond Max" class='awrcrb'>50.73</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multiblock grant time</td><td align="right" class='awrnc'>99,994,074</td><td align="right" class='awrnc'>151,331.57</td><td align="right" class='awrnc'>1,353.91</td><td align="right" headers="perSecond Average" class='awrnclb'>75,665.79</td><td align="right" headers="perSecond StdDev" class='awrnc'>6,610.50</td><td align="right" headers="perSecond Min" class='awrnc'>70,991.45</td><td align="right" headers="perSecond Max" class='awrncrb'>80,340.12</td></tr>
<tr><td scope="row" class='awrc'>gc cr multiblock grants received</td><td align="right" class='awrc'>22,381,768</td><td align="right" class='awrc'>33,872.65</td><td align="right" class='awrc'>303.05</td><td align="right" headers="perSecond Average" class='awrclb'>16,936.33</td><td align="right" headers="perSecond StdDev" class='awrc'>2,166.17</td><td align="right" headers="perSecond Min" class='awrc'>15,404.62</td><td align="right" headers="perSecond Max" class='awrcrb'>18,468.04</td></tr>
<tr><td scope="row" class='awrnc'>gc current block flush time</td><td align="right" class='awrnc'>320</td><td align="right" class='awrnc'>0.48</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.24</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.05</td><td align="right" headers="perSecond Min" class='awrnc'>0.21</td><td align="right" headers="perSecond Max" class='awrncrb'>0.28</td></tr>
<tr><td scope="row" class='awrc'>gc current block pin time</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current block receive time</td><td align="right" class='awrnc'>87,645</td><td align="right" class='awrnc'>132.64</td><td align="right" class='awrnc'>1.19</td><td align="right" headers="perSecond Average" class='awrnclb'>66.32</td><td align="right" headers="perSecond StdDev" class='awrnc'>38.62</td><td align="right" headers="perSecond Min" class='awrnc'>39.01</td><td align="right" headers="perSecond Max" class='awrncrb'>93.63</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks flushed</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks pinned</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks received</td><td align="right" class='awrc'>40,557</td><td align="right" class='awrc'>61.38</td><td align="right" class='awrc'>0.55</td><td align="right" headers="perSecond Average" class='awrclb'>30.69</td><td align="right" headers="perSecond StdDev" class='awrc'>7.18</td><td align="right" headers="perSecond Min" class='awrc'>25.61</td><td align="right" headers="perSecond Max" class='awrcrb'>35.77</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks served</td><td align="right" class='awrnc'>40,802</td><td align="right" class='awrnc'>61.75</td><td align="right" class='awrnc'>0.55</td><td align="right" headers="perSecond Average" class='awrnclb'>30.88</td><td align="right" headers="perSecond StdDev" class='awrnc'>5.92</td><td align="right" headers="perSecond Min" class='awrnc'>26.69</td><td align="right" headers="perSecond Max" class='awrncrb'>35.06</td></tr>
<tr><td scope="row" class='awrc'>gc force cr read cr</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc kbytes saved</td><td align="right" class='awrnc'>419,770</td><td align="right" class='awrnc'>635.28</td><td align="right" class='awrnc'>5.68</td><td align="right" headers="perSecond Average" class='awrnclb'>317.64</td><td align="right" headers="perSecond StdDev" class='awrnc'>12.90</td><td align="right" headers="perSecond Min" class='awrnc'>308.52</td><td align="right" headers="perSecond Max" class='awrncrb'>326.76</td></tr>
<tr><td scope="row" class='awrc'>gc kbytes sent</td><td align="right" class='awrc'>406,118</td><td align="right" class='awrc'>614.62</td><td align="right" class='awrc'>5.50</td><td align="right" headers="perSecond Average" class='awrclb'>307.31</td><td align="right" headers="perSecond StdDev" class='awrc'>20.74</td><td align="right" headers="perSecond Min" class='awrc'>292.64</td><td align="right" headers="perSecond Max" class='awrcrb'>321.98</td></tr>
<tr><td scope="row" class='awrnc'>gc local grants</td><td align="right" class='awrnc'>14,012,996</td><td align="right" class='awrnc'>21,207.32</td><td align="right" class='awrnc'>189.73</td><td align="right" headers="perSecond Average" class='awrnclb'>10,603.66</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,386.25</td><td align="right" headers="perSecond Min" class='awrnc'>9,623.43</td><td align="right" headers="perSecond Max" class='awrncrb'>11,583.89</td></tr>
<tr><td scope="row" class='awrc'>gc merge pi fg</td><td align="right" class='awrc'>464</td><td align="right" class='awrc'>0.70</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.35</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.33</td><td align="right" headers="perSecond Max" class='awrcrb'>0.38</td></tr>
<tr><td scope="row" class='awrnc'>gc no change made</td><td align="right" class='awrnc'>913</td><td align="right" class='awrnc'>1.38</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.69</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.87</td><td align="right" headers="perSecond Min" class='awrnc'>0.08</td><td align="right" headers="perSecond Max" class='awrncrb'>1.30</td></tr>
<tr><td scope="row" class='awrc'>gc reader bypass grants</td><td align="right" class='awrc'>2,553</td><td align="right" class='awrc'>3.86</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>1.93</td><td align="right" headers="perSecond StdDev" class='awrc'>1.35</td><td align="right" headers="perSecond Min" class='awrc'>0.97</td><td align="right" headers="perSecond Max" class='awrcrb'>2.89</td></tr>
<tr><td scope="row" class='awrnc'>gc reader bypass waits</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>0.04</td><td align="right" headers="perSecond Max" class='awrncrb'>0.11</td></tr>
<tr><td scope="row" class='awrc'>gc remote grants</td><td align="right" class='awrc'>13,860,112</td><td align="right" class='awrc'>20,975.95</td><td align="right" class='awrc'>187.66</td><td align="right" headers="perSecond Average" class='awrclb'>10,487.97</td><td align="right" headers="perSecond StdDev" class='awrc'>1,363.22</td><td align="right" headers="perSecond Min" class='awrc'>9,524.03</td><td align="right" headers="perSecond Max" class='awrcrb'>11,451.91</td></tr>
<tr><td scope="row" class='awrnc'>gc status messages received</td><td align="right" class='awrnc'>43,321</td><td align="right" class='awrnc'>65.56</td><td align="right" class='awrnc'>0.59</td><td align="right" headers="perSecond Average" class='awrnclb'>32.78</td><td align="right" headers="perSecond StdDev" class='awrnc'>21.41</td><td align="right" headers="perSecond Min" class='awrnc'>17.64</td><td align="right" headers="perSecond Max" class='awrncrb'>47.92</td></tr>
<tr><td scope="row" class='awrc'>gc status messages sent</td><td align="right" class='awrc'>46,234</td><td align="right" class='awrc'>69.97</td><td align="right" class='awrc'>0.63</td><td align="right" headers="perSecond Average" class='awrclb'>34.98</td><td align="right" headers="perSecond StdDev" class='awrc'>23.40</td><td align="right" headers="perSecond Min" class='awrc'>18.44</td><td align="right" headers="perSecond Max" class='awrcrb'>51.53</td></tr>
<tr><td scope="row" class='awrnc'>gcs affinity lock grants</td><td align="right" class='awrnc'>167,936</td><td align="right" class='awrnc'>254.15</td><td align="right" class='awrnc'>2.27</td><td align="right" headers="perSecond Average" class='awrnclb'>127.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>30.17</td><td align="right" headers="perSecond Min" class='awrnc'>105.74</td><td align="right" headers="perSecond Max" class='awrncrb'>148.41</td></tr>
<tr><td scope="row" class='awrc'>gcs data block access records</td><td align="right" class='awrc'>27,474,214</td><td align="right" class='awrc'>41,579.58</td><td align="right" class='awrc'>372.00</td><td align="right" headers="perSecond Average" class='awrclb'>20,789.79</td><td align="right" headers="perSecond StdDev" class='awrc'>2,658.81</td><td align="right" headers="perSecond Min" class='awrc'>18,909.72</td><td align="right" headers="perSecond Max" class='awrcrb'>22,669.86</td></tr>
<tr><td scope="row" class='awrnc'>gcs messages sent</td><td align="right" class='awrnc'>43,807,570</td><td align="right" class='awrnc'>66,298.67</td><td align="right" class='awrnc'>593.15</td><td align="right" headers="perSecond Average" class='awrnclb'>33,149.34</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,700.37</td><td align="right" headers="perSecond Min" class='awrnc'>31,947.00</td><td align="right" headers="perSecond Max" class='awrncrb'>34,351.68</td></tr>
<tr><td scope="row" class='awrc'>ges messages sent</td><td align="right" class='awrc'>33,071</td><td align="right" class='awrc'>50.05</td><td align="right" class='awrc'>0.45</td><td align="right" headers="perSecond Average" class='awrclb'>25.03</td><td align="right" headers="perSecond StdDev" class='awrc'>10.23</td><td align="right" headers="perSecond Min" class='awrc'>17.79</td><td align="right" headers="perSecond Max" class='awrcrb'>32.26</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue get time</td><td align="right" class='awrnc'>72,194</td><td align="right" class='awrnc'>109.26</td><td align="right" class='awrnc'>0.98</td><td align="right" headers="perSecond Average" class='awrnclb'>54.63</td><td align="right" headers="perSecond StdDev" class='awrnc'>5.22</td><td align="right" headers="perSecond Min" class='awrnc'>50.94</td><td align="right" headers="perSecond Max" class='awrncrb'>58.32</td></tr>
<tr><td scope="row" class='awrc'>global enqueue gets sync</td><td align="right" class='awrc'>788,920</td><td align="right" class='awrc'>1,193.99</td><td align="right" class='awrc'>10.68</td><td align="right" headers="perSecond Average" class='awrclb'>597.00</td><td align="right" headers="perSecond StdDev" class='awrc'>644.90</td><td align="right" headers="perSecond Min" class='awrc'>140.98</td><td align="right" headers="perSecond Max" class='awrcrb'>1,053.01</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue releases</td><td align="right" class='awrnc'>794,820</td><td align="right" class='awrnc'>1,202.92</td><td align="right" class='awrnc'>10.76</td><td align="right" headers="perSecond Average" class='awrnclb'>601.46</td><td align="right" headers="perSecond StdDev" class='awrnc'>644.93</td><td align="right" headers="perSecond Min" class='awrnc'>145.43</td><td align="right" headers="perSecond Max" class='awrncrb'>1,057.49</td></tr>
<tr><td scope="row" class='awrc'>heap block compress</td><td align="right" class='awrc'>1,063</td><td align="right" class='awrc'>1.61</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.80</td><td align="right" headers="perSecond StdDev" class='awrc'>0.26</td><td align="right" headers="perSecond Min" class='awrc'>0.62</td><td align="right" headers="perSecond Max" class='awrcrb'>0.99</td></tr>
<tr><td scope="row" class='awrnc'>hot buffers moved to head of LRU</td><td align="right" class='awrnc'>2,155,344</td><td align="right" class='awrnc'>3,261.90</td><td align="right" class='awrnc'>29.18</td><td align="right" headers="perSecond Average" class='awrnclb'>1,630.95</td><td align="right" headers="perSecond StdDev" class='awrnc'>258.98</td><td align="right" headers="perSecond Min" class='awrnc'>1,447.82</td><td align="right" headers="perSecond Max" class='awrncrb'>1,814.08</td></tr>
<tr><td scope="row" class='awrc'>immediate (CR) block cleanout applications</td><td align="right" class='awrc'>554</td><td align="right" class='awrc'>0.84</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.42</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.41</td><td align="right" headers="perSecond Max" class='awrcrb'>0.43</td></tr>
<tr><td scope="row" class='awrnc'>immediate (CURRENT) block cleanout applications</td><td align="right" class='awrnc'>1,148</td><td align="right" class='awrnc'>1.74</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.87</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.36</td><td align="right" headers="perSecond Min" class='awrnc'>0.62</td><td align="right" headers="perSecond Max" class='awrncrb'>1.12</td></tr>
<tr><td scope="row" class='awrc'>in call idle wait time</td><td align="right" class='awrc'>14,986,784</td><td align="right" class='awrc'>22,681.13</td><td align="right" class='awrc'>202.92</td><td align="right" headers="perSecond Average" class='awrclb'>11,340.57</td><td align="right" headers="perSecond StdDev" class='awrc'>22.96</td><td align="right" headers="perSecond Min" class='awrc'>11,324.33</td><td align="right" headers="perSecond Max" class='awrcrb'>11,356.80</td></tr>
<tr><td scope="row" class='awrnc'>index crx upgrade (positioned)</td><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.10</td><td align="right" headers="perSecond Max" class='awrncrb'>0.10</td></tr>
<tr><td scope="row" class='awrc'>index fast full scans (full)</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>index fetch by key</td><td align="right" class='awrnc'>41,412</td><td align="right" class='awrnc'>62.67</td><td align="right" class='awrnc'>0.56</td><td align="right" headers="perSecond Average" class='awrnclb'>31.34</td><td align="right" headers="perSecond StdDev" class='awrnc'>7.98</td><td align="right" headers="perSecond Min" class='awrnc'>25.70</td><td align="right" headers="perSecond Max" class='awrncrb'>36.98</td></tr>
<tr><td scope="row" class='awrc'>index range scans</td><td align="right" class='awrc'>528,809</td><td align="right" class='awrc'>800.30</td><td align="right" class='awrc'>7.16</td><td align="right" headers="perSecond Average" class='awrclb'>400.15</td><td align="right" headers="perSecond StdDev" class='awrc'>70.46</td><td align="right" headers="perSecond Min" class='awrc'>350.33</td><td align="right" headers="perSecond Max" class='awrcrb'>449.97</td></tr>
<tr><td scope="row" class='awrnc'>index reclamation/extension switch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>leaf node 90-10 splits</td><td align="right" class='awrc'>83</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrc'>0.08</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.12</td></tr>
<tr><td scope="row" class='awrnc'>leaf node splits</td><td align="right" class='awrnc'>391</td><td align="right" class='awrnc'>0.59</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.30</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.07</td><td align="right" headers="perSecond Min" class='awrnc'>0.24</td><td align="right" headers="perSecond Max" class='awrncrb'>0.35</td></tr>
<tr><td scope="row" class='awrc'>lob reads</td><td align="right" class='awrc'>1,608</td><td align="right" class='awrc'>2.43</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>1.22</td><td align="right" headers="perSecond StdDev" class='awrc'>0.91</td><td align="right" headers="perSecond Min" class='awrc'>0.57</td><td align="right" headers="perSecond Max" class='awrcrb'>1.86</td></tr>
<tr><td scope="row" class='awrnc'>lob writes</td><td align="right" class='awrnc'>14,720</td><td align="right" class='awrnc'>22.28</td><td align="right" class='awrnc'>0.20</td><td align="right" headers="perSecond Average" class='awrnclb'>11.14</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.24</td><td align="right" headers="perSecond Min" class='awrnc'>10.26</td><td align="right" headers="perSecond Max" class='awrncrb'>12.01</td></tr>
<tr><td scope="row" class='awrc'>lob writes unaligned</td><td align="right" class='awrc'>14,719</td><td align="right" class='awrc'>22.28</td><td align="right" class='awrc'>0.20</td><td align="right" headers="perSecond Average" class='awrclb'>11.14</td><td align="right" headers="perSecond StdDev" class='awrc'>1.24</td><td align="right" headers="perSecond Min" class='awrc'>10.26</td><td align="right" headers="perSecond Max" class='awrcrb'>12.01</td></tr>
<tr><td scope="row" class='awrnc'>logical read bytes from cache</td><td align="right" class='awrnc'>266,229,424,128</td><td align="right" class='awrnc'>402,912,623.98</td><td align="right" class='awrnc'>3,604,709.49</td><td align="right" headers="perSecond Average" class='awrnclb'>201,456,311.99</td><td align="right" headers="perSecond StdDev" class='awrnc'>25,889,160.72</td><td align="right" headers="perSecond Min" class='awrnc'>183,149,910.89</td><td align="right" headers="perSecond Max" class='awrncrb'>219,762,713.09</td></tr>
<tr><td scope="row" class='awrc'>logons cumulative</td><td align="right" class='awrc'>204</td><td align="right" class='awrc'>0.31</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.15</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.15</td><td align="right" headers="perSecond Max" class='awrcrb'>0.16</td></tr>
<tr><td scope="row" class='awrnc'>max cf enq hold time</td><td align="right" class='awrnc'>1,960</td><td align="right" class='awrnc'>2.97</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>1.48</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.49</td><td align="right" headers="perSecond Min" class='awrnc'>0.43</td><td align="right" headers="perSecond Max" class='awrncrb'>2.53</td></tr>
<tr><td scope="row" class='awrc'>messages received</td><td align="right" class='awrc'>535,864</td><td align="right" class='awrc'>810.98</td><td align="right" class='awrc'>7.26</td><td align="right" headers="perSecond Average" class='awrclb'>405.49</td><td align="right" headers="perSecond StdDev" class='awrc'>23.05</td><td align="right" headers="perSecond Min" class='awrc'>389.19</td><td align="right" headers="perSecond Max" class='awrcrb'>421.79</td></tr>
<tr><td scope="row" class='awrnc'>messages sent</td><td align="right" class='awrnc'>535,864</td><td align="right" class='awrnc'>810.98</td><td align="right" class='awrnc'>7.26</td><td align="right" headers="perSecond Average" class='awrnclb'>405.49</td><td align="right" headers="perSecond StdDev" class='awrnc'>23.05</td><td align="right" headers="perSecond Min" class='awrnc'>389.19</td><td align="right" headers="perSecond Max" class='awrncrb'>421.79</td></tr>
<tr><td scope="row" class='awrc'>min active SCN optimization applied on CR</td><td align="right" class='awrc'>1,074</td><td align="right" class='awrc'>1.63</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.81</td><td align="right" headers="perSecond StdDev" class='awrc'>1.01</td><td align="right" headers="perSecond Min" class='awrc'>0.10</td><td align="right" headers="perSecond Max" class='awrcrb'>1.53</td></tr>
<tr><td scope="row" class='awrnc'>no work - consistent read gets</td><td align="right" class='awrnc'>26,486,336</td><td align="right" class='awrnc'>40,084.52</td><td align="right" class='awrnc'>358.62</td><td align="right" headers="perSecond Average" class='awrnclb'>20,042.26</td><td align="right" headers="perSecond StdDev" class='awrnc'>2,635.15</td><td align="right" headers="perSecond Min" class='awrnc'>18,178.93</td><td align="right" headers="perSecond Max" class='awrncrb'>21,905.59</td></tr>
<tr><td scope="row" class='awrc'>non-idle wait count</td><td align="right" class='awrc'>13,334,430</td><td align="right" class='awrc'>20,180.38</td><td align="right" class='awrc'>180.55</td><td align="right" headers="perSecond Average" class='awrclb'>10,090.19</td><td align="right" headers="perSecond StdDev" class='awrc'>1,216.81</td><td align="right" headers="perSecond Min" class='awrc'>9,229.78</td><td align="right" headers="perSecond Max" class='awrcrb'>10,950.60</td></tr>
<tr><td scope="row" class='awrnc'>non-idle wait time</td><td align="right" class='awrnc'>28,979,866</td><td align="right" class='awrnc'>43,858.42</td><td align="right" class='awrnc'>392.38</td><td align="right" headers="perSecond Average" class='awrnclb'>21,929.21</td><td align="right" headers="perSecond StdDev" class='awrnc'>733.37</td><td align="right" headers="perSecond Min" class='awrnc'>21,410.64</td><td align="right" headers="perSecond Max" class='awrncrb'>22,447.78</td></tr>
<tr><td scope="row" class='awrc'>opened cursors cumulative</td><td align="right" class='awrc'>598,842</td><td align="right" class='awrc'>906.29</td><td align="right" class='awrc'>8.11</td><td align="right" headers="perSecond Average" class='awrclb'>453.15</td><td align="right" headers="perSecond StdDev" class='awrc'>43.58</td><td align="right" headers="perSecond Min" class='awrc'>422.33</td><td align="right" headers="perSecond Max" class='awrcrb'>483.96</td></tr>
<tr><td scope="row" class='awrnc'>parse count (describe)</td><td align="right" class='awrnc'>26</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>parse count (failures)</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>parse count (hard)</td><td align="right" class='awrnc'>2,276</td><td align="right" class='awrnc'>3.44</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>1.72</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.72</td><td align="right" headers="perSecond Min" class='awrnc'>0.51</td><td align="right" headers="perSecond Max" class='awrncrb'>2.94</td></tr>
<tr><td scope="row" class='awrc'>parse count (total)</td><td align="right" class='awrc'>21,902</td><td align="right" class='awrc'>33.15</td><td align="right" class='awrc'>0.30</td><td align="right" headers="perSecond Average" class='awrclb'>16.57</td><td align="right" headers="perSecond StdDev" class='awrc'>0.96</td><td align="right" headers="perSecond Min" class='awrc'>15.89</td><td align="right" headers="perSecond Max" class='awrcrb'>17.25</td></tr>
<tr><td scope="row" class='awrnc'>parse time cpu</td><td align="right" class='awrnc'>362</td><td align="right" class='awrnc'>0.55</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.27</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.15</td><td align="right" headers="perSecond Min" class='awrnc'>0.17</td><td align="right" headers="perSecond Max" class='awrncrb'>0.38</td></tr>
<tr><td scope="row" class='awrc'>parse time elapsed</td><td align="right" class='awrc'>855</td><td align="right" class='awrc'>1.29</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.65</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.63</td><td align="right" headers="perSecond Max" class='awrcrb'>0.66</td></tr>
<tr><td scope="row" class='awrnc'>physical read IO requests</td><td align="right" class='awrnc'>27,382,135</td><td align="right" class='awrnc'>41,440.23</td><td align="right" class='awrnc'>370.75</td><td align="right" headers="perSecond Average" class='awrnclb'>20,720.11</td><td align="right" headers="perSecond StdDev" class='awrnc'>2,656.26</td><td align="right" headers="perSecond Min" class='awrnc'>18,841.85</td><td align="right" headers="perSecond Max" class='awrncrb'>22,598.37</td></tr>
<tr><td scope="row" class='awrc'>physical read bytes</td><td align="right" class='awrc'>224,323,690,496</td><td align="right" class='awrc'>339,492,330.34</td><td align="right" class='awrc'>3,037,311.67</td><td align="right" headers="perSecond Average" class='awrclb'>169,746,165.17</td><td align="right" headers="perSecond StdDev" class='awrc'>21,752,463.34</td><td align="right" headers="perSecond Min" class='awrc'>154,364,850.83</td><td align="right" headers="perSecond Max" class='awrcrb'>185,127,479.50</td></tr>
<tr><td scope="row" class='awrnc'>physical read total IO requests</td><td align="right" class='awrnc'>27,393,221</td><td align="right" class='awrnc'>41,457.01</td><td align="right" class='awrnc'>370.90</td><td align="right" headers="perSecond Average" class='awrnclb'>20,728.50</td><td align="right" headers="perSecond StdDev" class='awrnc'>2,656.37</td><td align="right" headers="perSecond Min" class='awrnc'>18,850.17</td><td align="right" headers="perSecond Max" class='awrncrb'>22,606.84</td></tr>
<tr><td scope="row" class='awrc'>physical read total bytes</td><td align="right" class='awrc'>227,592,718,336</td><td align="right" class='awrc'>344,439,705.09</td><td align="right" class='awrc'>3,081,573.85</td><td align="right" headers="perSecond Average" class='awrclb'>172,219,852.54</td><td align="right" headers="perSecond StdDev" class='awrc'>21,767,138.68</td><td align="right" headers="perSecond Min" class='awrc'>156,828,161.18</td><td align="right" headers="perSecond Max" class='awrcrb'>187,611,543.91</td></tr>
<tr><td scope="row" class='awrnc'>physical read total multi block requests</td><td align="right" class='awrnc'>3,005</td><td align="right" class='awrnc'>4.55</td><td align="right" class='awrnc'>0.04</td><td align="right" headers="perSecond Average" class='awrnclb'>2.27</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>2.27</td><td align="right" headers="perSecond Max" class='awrncrb'>2.28</td></tr>
<tr><td scope="row" class='awrc'>physical reads</td><td align="right" class='awrc'>27,383,265</td><td align="right" class='awrc'>41,441.94</td><td align="right" class='awrc'>370.77</td><td align="right" headers="perSecond Average" class='awrclb'>20,720.97</td><td align="right" headers="perSecond StdDev" class='awrc'>2,655.33</td><td align="right" headers="perSecond Min" class='awrc'>18,843.37</td><td align="right" headers="perSecond Max" class='awrcrb'>22,598.57</td></tr>
<tr><td scope="row" class='awrnc'>physical reads cache</td><td align="right" class='awrnc'>27,383,256</td><td align="right" class='awrnc'>41,441.92</td><td align="right" class='awrnc'>370.77</td><td align="right" headers="perSecond Average" class='awrnclb'>20,720.96</td><td align="right" headers="perSecond StdDev" class='awrnc'>2,655.34</td><td align="right" headers="perSecond Min" class='awrnc'>18,843.35</td><td align="right" headers="perSecond Max" class='awrncrb'>22,598.57</td></tr>
<tr><td scope="row" class='awrc'>physical reads cache prefetch</td><td align="right" class='awrc'>21,981,726</td><td align="right" class='awrc'>33,267.23</td><td align="right" class='awrc'>297.63</td><td align="right" headers="perSecond Average" class='awrclb'>16,633.61</td><td align="right" headers="perSecond StdDev" class='awrc'>2,126.91</td><td align="right" headers="perSecond Min" class='awrc'>15,129.66</td><td align="right" headers="perSecond Max" class='awrcrb'>18,137.57</td></tr>
<tr><td scope="row" class='awrnc'>physical reads direct</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>physical reads direct (lob)</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>physical write IO requests</td><td align="right" class='awrnc'>4,341,711</td><td align="right" class='awrnc'>6,570.76</td><td align="right" class='awrnc'>58.79</td><td align="right" headers="perSecond Average" class='awrnclb'>3,285.38</td><td align="right" headers="perSecond StdDev" class='awrnc'>455.64</td><td align="right" headers="perSecond Min" class='awrnc'>2,963.20</td><td align="right" headers="perSecond Max" class='awrncrb'>3,607.56</td></tr>
<tr><td scope="row" class='awrc'>physical write bytes</td><td align="right" class='awrc'>38,049,914,880</td><td align="right" class='awrc'>57,584,868.24</td><td align="right" class='awrc'>515,190.57</td><td align="right" headers="perSecond Average" class='awrclb'>28,792,434.12</td><td align="right" headers="perSecond StdDev" class='awrc'>4,046,489.90</td><td align="right" headers="perSecond Min" class='awrc'>25,931,133.67</td><td align="right" headers="perSecond Max" class='awrcrb'>31,653,734.57</td></tr>
<tr><td scope="row" class='awrnc'>physical write total IO requests</td><td align="right" class='awrnc'>4,425,130</td><td align="right" class='awrnc'>6,697.01</td><td align="right" class='awrnc'>59.92</td><td align="right" headers="perSecond Average" class='awrnclb'>3,348.50</td><td align="right" headers="perSecond StdDev" class='awrnc'>457.67</td><td align="right" headers="perSecond Min" class='awrnc'>3,024.88</td><td align="right" headers="perSecond Max" class='awrncrb'>3,672.13</td></tr>
<tr><td scope="row" class='awrc'>physical write total bytes</td><td align="right" class='awrc'>41,984,936,448</td><td align="right" class='awrc'>63,540,143.26</td><td align="right" class='awrc'>568,470.22</td><td align="right" headers="perSecond Average" class='awrclb'>31,770,071.63</td><td align="right" headers="perSecond StdDev" class='awrc'>4,460,355.54</td><td align="right" headers="perSecond Min" class='awrc'>28,616,123.98</td><td align="right" headers="perSecond Max" class='awrcrb'>34,924,019.27</td></tr>
<tr><td scope="row" class='awrnc'>physical write total multi block requests</td><td align="right" class='awrnc'>15,714</td><td align="right" class='awrnc'>23.78</td><td align="right" class='awrnc'>0.21</td><td align="right" headers="perSecond Average" class='awrnclb'>11.89</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.07</td><td align="right" headers="perSecond Min" class='awrnc'>10.42</td><td align="right" headers="perSecond Max" class='awrncrb'>13.36</td></tr>
<tr><td scope="row" class='awrc'>physical writes</td><td align="right" class='awrc'>4,644,765</td><td align="right" class='awrc'>7,029.40</td><td align="right" class='awrc'>62.89</td><td align="right" headers="perSecond Average" class='awrclb'>3,514.70</td><td align="right" headers="perSecond StdDev" class='awrc'>493.96</td><td align="right" headers="perSecond Min" class='awrc'>3,165.42</td><td align="right" headers="perSecond Max" class='awrcrb'>3,863.98</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct</td><td align="right" class='awrnc'>3,138</td><td align="right" class='awrnc'>4.75</td><td align="right" class='awrnc'>0.04</td><td align="right" headers="perSecond Average" class='awrnclb'>2.37</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.97</td><td align="right" headers="perSecond Min" class='awrnc'>1.69</td><td align="right" headers="perSecond Max" class='awrncrb'>3.06</td></tr>
<tr><td scope="row" class='awrc'>physical writes direct (lob)</td><td align="right" class='awrc'>289</td><td align="right" class='awrc'>0.44</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.22</td><td align="right" headers="perSecond StdDev" class='awrc'>0.05</td><td align="right" headers="perSecond Min" class='awrc'>0.18</td><td align="right" headers="perSecond Max" class='awrcrb'>0.25</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct temporary tablespace</td><td align="right" class='awrnc'>1,191</td><td align="right" class='awrnc'>1.80</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.90</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.88</td><td align="right" headers="perSecond Min" class='awrnc'>0.28</td><td align="right" headers="perSecond Max" class='awrncrb'>1.52</td></tr>
<tr><td scope="row" class='awrc'>physical writes from cache</td><td align="right" class='awrc'>4,641,627</td><td align="right" class='awrc'>7,024.65</td><td align="right" class='awrc'>62.85</td><td align="right" headers="perSecond Average" class='awrclb'>3,512.33</td><td align="right" headers="perSecond StdDev" class='awrc'>494.93</td><td align="right" headers="perSecond Min" class='awrc'>3,162.36</td><td align="right" headers="perSecond Max" class='awrcrb'>3,862.29</td></tr>
<tr><td scope="row" class='awrnc'>physical writes non checkpoint</td><td align="right" class='awrnc'>4,570,158</td><td align="right" class='awrnc'>6,916.49</td><td align="right" class='awrnc'>61.88</td><td align="right" headers="perSecond Average" class='awrnclb'>3,458.25</td><td align="right" headers="perSecond StdDev" class='awrnc'>502.98</td><td align="right" headers="perSecond Min" class='awrnc'>3,102.59</td><td align="right" headers="perSecond Max" class='awrncrb'>3,813.91</td></tr>
<tr><td scope="row" class='awrc'>pinned buffers inspected</td><td align="right" class='awrc'>41,387</td><td align="right" class='awrc'>62.64</td><td align="right" class='awrc'>0.56</td><td align="right" headers="perSecond Average" class='awrclb'>31.32</td><td align="right" headers="perSecond StdDev" class='awrc'>6.01</td><td align="right" headers="perSecond Min" class='awrc'>27.07</td><td align="right" headers="perSecond Max" class='awrcrb'>35.56</td></tr>
<tr><td scope="row" class='awrnc'>process last non-idle time</td><td align="right" class='awrnc'>1,309</td><td align="right" class='awrnc'>1.98</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.99</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.99</td><td align="right" headers="perSecond Max" class='awrncrb'>0.99</td></tr>
<tr><td scope="row" class='awrc'>recursive calls</td><td align="right" class='awrc'>852,029</td><td align="right" class='awrc'>1,289.46</td><td align="right" class='awrc'>11.54</td><td align="right" headers="perSecond Average" class='awrclb'>644.73</td><td align="right" headers="perSecond StdDev" class='awrc'>65.72</td><td align="right" headers="perSecond Min" class='awrc'>598.26</td><td align="right" headers="perSecond Max" class='awrcrb'>691.20</td></tr>
<tr><td scope="row" class='awrnc'>recursive cpu usage</td><td align="right" class='awrnc'>747,450</td><td align="right" class='awrnc'>1,131.20</td><td align="right" class='awrnc'>10.12</td><td align="right" headers="perSecond Average" class='awrnclb'>565.60</td><td align="right" headers="perSecond StdDev" class='awrnc'>23.99</td><td align="right" headers="perSecond Min" class='awrnc'>548.64</td><td align="right" headers="perSecond Max" class='awrncrb'>582.56</td></tr>
<tr><td scope="row" class='awrc'>redo KB read</td><td align="right" class='awrc'>1,806,336</td><td align="right" class='awrc'>2,733.73</td><td align="right" class='awrc'>24.46</td><td align="right" headers="perSecond Average" class='awrclb'>1,366.86</td><td align="right" headers="perSecond StdDev" class='awrc'>21.99</td><td align="right" headers="perSecond Min" class='awrc'>1,351.32</td><td align="right" headers="perSecond Max" class='awrcrb'>1,382.41</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks checksummed by FG (exclusive)</td><td align="right" class='awrnc'>2,767,960</td><td align="right" class='awrnc'>4,189.04</td><td align="right" class='awrnc'>37.48</td><td align="right" headers="perSecond Average" class='awrnclb'>2,094.52</td><td align="right" headers="perSecond StdDev" class='awrnc'>310.89</td><td align="right" headers="perSecond Min" class='awrnc'>1,874.69</td><td align="right" headers="perSecond Max" class='awrncrb'>2,314.35</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written</td><td align="right" class='awrc'>7,642,503</td><td align="right" class='awrc'>11,566.19</td><td align="right" class='awrc'>103.48</td><td align="right" headers="perSecond Average" class='awrclb'>5,783.09</td><td align="right" headers="perSecond StdDev" class='awrc'>807.58</td><td align="right" headers="perSecond Min" class='awrc'>5,212.05</td><td align="right" headers="perSecond Max" class='awrcrb'>6,354.14</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks written (group 0)</td><td align="right" class='awrnc'>4,101,744</td><td align="right" class='awrnc'>6,207.63</td><td align="right" class='awrnc'>55.54</td><td align="right" headers="perSecond Average" class='awrnclb'>3,103.82</td><td align="right" headers="perSecond StdDev" class='awrnc'>294.81</td><td align="right" headers="perSecond Min" class='awrnc'>2,895.35</td><td align="right" headers="perSecond Max" class='awrncrb'>3,312.28</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written (group 1)</td><td align="right" class='awrc'>2,074,398</td><td align="right" class='awrc'>3,139.44</td><td align="right" class='awrc'>28.09</td><td align="right" headers="perSecond Average" class='awrclb'>1,569.72</td><td align="right" headers="perSecond StdDev" class='awrc'>460.81</td><td align="right" headers="perSecond Min" class='awrc'>1,243.88</td><td align="right" headers="perSecond Max" class='awrcrb'>1,895.56</td></tr>
<tr><td scope="row" class='awrnc'>redo entries</td><td align="right" class='awrnc'>5,183,351</td><td align="right" class='awrnc'>7,844.50</td><td align="right" class='awrnc'>70.18</td><td align="right" headers="perSecond Average" class='awrnclb'>3,922.25</td><td align="right" headers="perSecond StdDev" class='awrnc'>523.98</td><td align="right" headers="perSecond Min" class='awrnc'>3,551.74</td><td align="right" headers="perSecond Max" class='awrncrb'>4,292.76</td></tr>
<tr><td scope="row" class='awrc'>redo size</td><td align="right" class='awrc'>3,767,838,020</td><td align="right" class='awrc'>5,702,258.71</td><td align="right" class='awrc'>51,016.00</td><td align="right" headers="perSecond Average" class='awrclb'>2,851,129.36</td><td align="right" headers="perSecond StdDev" class='awrc'>399,344.88</td><td align="right" headers="perSecond Min" class='awrc'>2,568,749.88</td><td align="right" headers="perSecond Max" class='awrcrb'>3,133,508.83</td></tr>
<tr><td scope="row" class='awrnc'>redo size for direct writes</td><td align="right" class='awrnc'>7,736</td><td align="right" class='awrnc'>11.71</td><td align="right" class='awrnc'>0.10</td><td align="right" headers="perSecond Average" class='awrnclb'>5.85</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.35</td><td align="right" headers="perSecond Min" class='awrnc'>5.61</td><td align="right" headers="perSecond Max" class='awrncrb'>6.10</td></tr>
<tr><td scope="row" class='awrc'>redo subscn max counts</td><td align="right" class='awrc'>787</td><td align="right" class='awrc'>1.19</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.60</td><td align="right" headers="perSecond StdDev" class='awrc'>0.10</td><td align="right" headers="perSecond Min" class='awrc'>0.53</td><td align="right" headers="perSecond Max" class='awrcrb'>0.66</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time</td><td align="right" class='awrnc'>771</td><td align="right" class='awrnc'>1.17</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.58</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.09</td><td align="right" headers="perSecond Min" class='awrnc'>0.52</td><td align="right" headers="perSecond Max" class='awrncrb'>0.65</td></tr>
<tr><td scope="row" class='awrc'>redo synch time (usec)</td><td align="right" class='awrc'>7,358,800</td><td align="right" class='awrc'>11,136.92</td><td align="right" class='awrc'>99.64</td><td align="right" headers="perSecond Average" class='awrclb'>5,568.46</td><td align="right" headers="perSecond StdDev" class='awrc'>919.70</td><td align="right" headers="perSecond Min" class='awrc'>4,918.13</td><td align="right" headers="perSecond Max" class='awrcrb'>6,218.79</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead (usec)</td><td align="right" class='awrnc'>67,544</td><td align="right" class='awrnc'>102.22</td><td align="right" class='awrnc'>0.91</td><td align="right" headers="perSecond Average" class='awrnclb'>51.11</td><td align="right" headers="perSecond StdDev" class='awrnc'>15.70</td><td align="right" headers="perSecond Min" class='awrnc'>40.01</td><td align="right" headers="perSecond Max" class='awrncrb'>62.21</td></tr>
<tr><td scope="row" class='awrc'>redo synch time overhead count (  2ms)</td><td align="right" class='awrc'>291</td><td align="right" class='awrc'>0.44</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.22</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.21</td><td align="right" headers="perSecond Max" class='awrcrb'>0.23</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead count (  8ms)</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo synch writes</td><td align="right" class='awrc'>516</td><td align="right" class='awrc'>0.78</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.39</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.38</td><td align="right" headers="perSecond Max" class='awrcrb'>0.40</td></tr>
<tr><td scope="row" class='awrnc'>redo wastage</td><td align="right" class='awrnc'>19,879,716</td><td align="right" class='awrnc'>30,086.11</td><td align="right" class='awrnc'>269.17</td><td align="right" headers="perSecond Average" class='awrnclb'>15,043.06</td><td align="right" headers="perSecond StdDev" class='awrnc'>490.80</td><td align="right" headers="perSecond Min" class='awrnc'>14,696.01</td><td align="right" headers="perSecond Max" class='awrncrb'>15,390.11</td></tr>
<tr><td scope="row" class='awrc'>redo write active strands</td><td align="right" class='awrc'>81,934</td><td align="right" class='awrc'>124.00</td><td align="right" class='awrc'>1.11</td><td align="right" headers="perSecond Average" class='awrclb'>62.00</td><td align="right" headers="perSecond StdDev" class='awrc'>1.94</td><td align="right" headers="perSecond Min" class='awrc'>60.63</td><td align="right" headers="perSecond Max" class='awrcrb'>63.37</td></tr>
<tr><td scope="row" class='awrnc'>redo write broadcast ack count</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.04</td><td align="right" headers="perSecond Max" class='awrncrb'>0.05</td></tr>
<tr><td scope="row" class='awrc'>redo write broadcast ack time</td><td align="right" class='awrc'>742,100</td><td align="right" class='awrc'>1,123.10</td><td align="right" class='awrc'>10.05</td><td align="right" headers="perSecond Average" class='awrclb'>561.55</td><td align="right" headers="perSecond StdDev" class='awrc'>61.62</td><td align="right" headers="perSecond Min" class='awrc'>517.98</td><td align="right" headers="perSecond Max" class='awrcrb'>605.12</td></tr>
<tr><td scope="row" class='awrnc'>redo write finish time</td><td align="right" class='awrnc'>1,202,367,262</td><td align="right" class='awrnc'>1,819,679.70</td><td align="right" class='awrnc'>16,279.89</td><td align="right" headers="perSecond Average" class='awrnclb'>909,839.85</td><td align="right" headers="perSecond StdDev" class='awrnc'>126,628.44</td><td align="right" headers="perSecond Min" class='awrnc'>820,300.02</td><td align="right" headers="perSecond Max" class='awrncrb'>999,379.68</td></tr>
<tr><td scope="row" class='awrc'>redo write gather time</td><td align="right" class='awrc'>74,466,598</td><td align="right" class='awrc'>112,699.34</td><td align="right" class='awrc'>1,008.27</td><td align="right" headers="perSecond Average" class='awrclb'>56,349.67</td><td align="right" headers="perSecond StdDev" class='awrc'>18,131.29</td><td align="right" headers="perSecond Min" class='awrc'>43,528.91</td><td align="right" headers="perSecond Max" class='awrcrb'>69,170.43</td></tr>
<tr><td scope="row" class='awrnc'>redo write info find</td><td align="right" class='awrnc'>296</td><td align="right" class='awrnc'>0.45</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.22</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.21</td><td align="right" headers="perSecond Max" class='awrncrb'>0.23</td></tr>
<tr><td scope="row" class='awrc'>redo write info find fail</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo write schedule time</td><td align="right" class='awrnc'>75,278,797</td><td align="right" class='awrnc'>113,928.53</td><td align="right" class='awrnc'>1,019.26</td><td align="right" headers="perSecond Average" class='awrnclb'>56,964.26</td><td align="right" headers="perSecond StdDev" class='awrnc'>18,217.51</td><td align="right" headers="perSecond Min" class='awrnc'>44,082.54</td><td align="right" headers="perSecond Max" class='awrncrb'>69,845.99</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (   4KB)</td><td align="right" class='awrc'>2,456</td><td align="right" class='awrc'>3.72</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>1.86</td><td align="right" headers="perSecond StdDev" class='awrc'>1.20</td><td align="right" headers="perSecond Min" class='awrc'>1.01</td><td align="right" headers="perSecond Max" class='awrcrb'>2.70</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (   8KB)</td><td align="right" class='awrnc'>1,545</td><td align="right" class='awrnc'>2.34</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>1.17</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.22</td><td align="right" headers="perSecond Min" class='awrnc'>1.01</td><td align="right" headers="perSecond Max" class='awrncrb'>1.33</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (  16KB)</td><td align="right" class='awrc'>3,328</td><td align="right" class='awrc'>5.04</td><td align="right" class='awrc'>0.05</td><td align="right" headers="perSecond Average" class='awrclb'>2.52</td><td align="right" headers="perSecond StdDev" class='awrc'>0.30</td><td align="right" headers="perSecond Min" class='awrc'>2.30</td><td align="right" headers="perSecond Max" class='awrcrb'>2.73</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (  32KB)</td><td align="right" class='awrnc'>6,330</td><td align="right" class='awrnc'>9.58</td><td align="right" class='awrnc'>0.09</td><td align="right" headers="perSecond Average" class='awrnclb'>4.79</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.07</td><td align="right" headers="perSecond Min" class='awrnc'>4.74</td><td align="right" headers="perSecond Max" class='awrncrb'>4.84</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 128KB)</td><td align="right" class='awrc'>21,453</td><td align="right" class='awrc'>32.47</td><td align="right" class='awrc'>0.29</td><td align="right" headers="perSecond Average" class='awrclb'>16.23</td><td align="right" headers="perSecond StdDev" class='awrc'>1.70</td><td align="right" headers="perSecond Min" class='awrc'>15.03</td><td align="right" headers="perSecond Max" class='awrcrb'>17.43</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 256KB)</td><td align="right" class='awrnc'>5,489</td><td align="right" class='awrnc'>8.31</td><td align="right" class='awrnc'>0.07</td><td align="right" headers="perSecond Average" class='awrnclb'>4.15</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>4.15</td><td align="right" headers="perSecond Max" class='awrncrb'>4.16</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 512KB)</td><td align="right" class='awrc'>1,102</td><td align="right" class='awrc'>1.67</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.83</td><td align="right" headers="perSecond StdDev" class='awrc'>0.17</td><td align="right" headers="perSecond Min" class='awrc'>0.71</td><td align="right" headers="perSecond Max" class='awrcrb'>0.95</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (1024KB)</td><td align="right" class='awrnc'>488</td><td align="right" class='awrnc'>0.74</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.37</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.12</td><td align="right" headers="perSecond Min" class='awrnc'>0.29</td><td align="right" headers="perSecond Max" class='awrncrb'>0.45</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (inf)</td><td align="right" class='awrc'>299</td><td align="right" class='awrc'>0.45</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.23</td><td align="right" headers="perSecond StdDev" class='awrc'>0.08</td><td align="right" headers="perSecond Min" class='awrc'>0.17</td><td align="right" headers="perSecond Max" class='awrcrb'>0.28</td></tr>
<tr><td scope="row" class='awrnc'>redo write time</td><td align="right" class='awrnc'>120,439</td><td align="right" class='awrnc'>182.27</td><td align="right" class='awrnc'>1.63</td><td align="right" headers="perSecond Average" class='awrnclb'>91.14</td><td align="right" headers="perSecond StdDev" class='awrnc'>12.70</td><td align="right" headers="perSecond Min" class='awrnc'>82.16</td><td align="right" headers="perSecond Max" class='awrncrb'>100.12</td></tr>
<tr><td scope="row" class='awrc'>redo write time (usec)</td><td align="right" class='awrc'>1,204,379,042</td><td align="right" class='awrc'>1,822,724.37</td><td align="right" class='awrc'>16,307.13</td><td align="right" headers="perSecond Average" class='awrclb'>911,362.18</td><td align="right" headers="perSecond StdDev" class='awrc'>127,020.43</td><td align="right" headers="perSecond Min" class='awrc'>821,545.18</td><td align="right" headers="perSecond Max" class='awrcrb'>1,001,179.19</td></tr>
<tr><td scope="row" class='awrnc'>redo write total time</td><td align="right" class='awrnc'>1,281,194,767</td><td align="right" class='awrnc'>1,938,978.98</td><td align="right" class='awrnc'>17,347.20</td><td align="right" headers="perSecond Average" class='awrnclb'>969,489.49</td><td align="right" headers="perSecond StdDev" class='awrnc'>146,832.61</td><td align="right" headers="perSecond Min" class='awrnc'>865,663.16</td><td align="right" headers="perSecond Max" class='awrncrb'>1,073,315.82</td></tr>
<tr><td scope="row" class='awrc'>redo write worker delay (usec)</td><td align="right" class='awrc'>69,403,659</td><td align="right" class='awrc'>105,037.03</td><td align="right" class='awrc'>939.72</td><td align="right" headers="perSecond Average" class='awrclb'>52,518.51</td><td align="right" headers="perSecond StdDev" class='awrc'>17,882.97</td><td align="right" headers="perSecond Min" class='awrc'>39,873.35</td><td align="right" headers="perSecond Max" class='awrcrb'>65,163.68</td></tr>
<tr><td scope="row" class='awrnc'>redo write worker delay count</td><td align="right" class='awrnc'>37,601</td><td align="right" class='awrnc'>56.91</td><td align="right" class='awrnc'>0.51</td><td align="right" headers="perSecond Average" class='awrnclb'>28.45</td><td align="right" headers="perSecond StdDev" class='awrnc'>4.75</td><td align="right" headers="perSecond Min" class='awrnc'>25.09</td><td align="right" headers="perSecond Max" class='awrncrb'>31.81</td></tr>
<tr><td scope="row" class='awrc'>redo writes</td><td align="right" class='awrc'>42,488</td><td align="right" class='awrc'>64.30</td><td align="right" class='awrc'>0.58</td><td align="right" headers="perSecond Average" class='awrclb'>32.15</td><td align="right" headers="perSecond StdDev" class='awrc'>0.41</td><td align="right" headers="perSecond Min" class='awrc'>31.86</td><td align="right" headers="perSecond Max" class='awrcrb'>32.44</td></tr>
<tr><td scope="row" class='awrnc'>redo writes (group 0)</td><td align="right" class='awrnc'>21,434</td><td align="right" class='awrnc'>32.44</td><td align="right" class='awrnc'>0.29</td><td align="right" headers="perSecond Average" class='awrnclb'>16.22</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.31</td><td align="right" headers="perSecond Min" class='awrnc'>14.58</td><td align="right" headers="perSecond Max" class='awrncrb'>17.86</td></tr>
<tr><td scope="row" class='awrc'>redo writes (group 1)</td><td align="right" class='awrc'>16,167</td><td align="right" class='awrc'>24.47</td><td align="right" class='awrc'>0.22</td><td align="right" headers="perSecond Average" class='awrclb'>12.23</td><td align="right" headers="perSecond StdDev" class='awrc'>2.44</td><td align="right" headers="perSecond Min" class='awrc'>10.51</td><td align="right" headers="perSecond Max" class='awrcrb'>13.96</td></tr>
<tr><td scope="row" class='awrnc'>redo writes adaptive all</td><td align="right" class='awrnc'>42,488</td><td align="right" class='awrnc'>64.30</td><td align="right" class='awrnc'>0.58</td><td align="right" headers="perSecond Average" class='awrnclb'>32.15</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.41</td><td align="right" headers="perSecond Min" class='awrnc'>31.86</td><td align="right" headers="perSecond Max" class='awrncrb'>32.44</td></tr>
<tr><td scope="row" class='awrc'>redo writes adaptive worker</td><td align="right" class='awrc'>37,601</td><td align="right" class='awrc'>56.91</td><td align="right" class='awrc'>0.51</td><td align="right" headers="perSecond Average" class='awrclb'>28.45</td><td align="right" headers="perSecond StdDev" class='awrc'>4.75</td><td align="right" headers="perSecond Min" class='awrc'>25.09</td><td align="right" headers="perSecond Max" class='awrcrb'>31.81</td></tr>
<tr><td scope="row" class='awrnc'>rollback changes - undo records applied</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>rollbacks only - consistent read gets</td><td align="right" class='awrc'>59</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>root node splits</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>rows fetched via callback</td><td align="right" class='awrc'>11,063</td><td align="right" class='awrc'>16.74</td><td align="right" class='awrc'>0.15</td><td align="right" headers="perSecond Average" class='awrclb'>8.37</td><td align="right" headers="perSecond StdDev" class='awrc'>3.40</td><td align="right" headers="perSecond Min" class='awrc'>5.97</td><td align="right" headers="perSecond Max" class='awrcrb'>10.77</td></tr>
<tr><td scope="row" class='awrnc'>securefile allocation bytes</td><td align="right" class='awrnc'>2,367,488</td><td align="right" class='awrnc'>3,583.00</td><td align="right" class='awrnc'>32.06</td><td align="right" headers="perSecond Average" class='awrnclb'>1,791.50</td><td align="right" headers="perSecond StdDev" class='awrnc'>412.12</td><td align="right" headers="perSecond Min" class='awrnc'>1,500.08</td><td align="right" headers="perSecond Max" class='awrncrb'>2,082.91</td></tr>
<tr><td scope="row" class='awrc'>securefile allocation chunks</td><td align="right" class='awrc'>108</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>securefile bytes non-transformed</td><td align="right" class='awrnc'>1,999,934</td><td align="right" class='awrnc'>3,026.74</td><td align="right" class='awrnc'>27.08</td><td align="right" headers="perSecond Average" class='awrnclb'>1,513.37</td><td align="right" headers="perSecond StdDev" class='awrnc'>351.95</td><td align="right" headers="perSecond Min" class='awrnc'>1,264.50</td><td align="right" headers="perSecond Max" class='awrncrb'>1,762.23</td></tr>
<tr><td scope="row" class='awrc'>securefile direct read bytes</td><td align="right" class='awrc'>65,536</td><td align="right" class='awrc'>99.19</td><td align="right" class='awrc'>0.89</td><td align="right" headers="perSecond Average" class='awrclb'>99.19</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>99.19</td><td align="right" headers="perSecond Max" class='awrcrb'>99.19</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct read ops</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>securefile direct write bytes</td><td align="right" class='awrc'>2,367,488</td><td align="right" class='awrc'>3,583.00</td><td align="right" class='awrc'>32.06</td><td align="right" headers="perSecond Average" class='awrclb'>1,791.50</td><td align="right" headers="perSecond StdDev" class='awrc'>412.12</td><td align="right" headers="perSecond Min" class='awrc'>1,500.08</td><td align="right" headers="perSecond Max" class='awrcrb'>2,082.91</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct write ops</td><td align="right" class='awrnc'>108</td><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.07</td><td align="right" headers="perSecond Max" class='awrncrb'>0.09</td></tr>
<tr><td scope="row" class='awrc'>securefile number of non-transformed flushes</td><td align="right" class='awrc'>108</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>segment chunks allocation from dispenser</td><td align="right" class='awrnc'>108</td><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.07</td><td align="right" headers="perSecond Max" class='awrncrb'>0.09</td></tr>
<tr><td scope="row" class='awrc'>segment dispenser allocations</td><td align="right" class='awrc'>107</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc ops</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc time (ms)</td><td align="right" class='awrc'>1,811</td><td align="right" class='awrc'>2.74</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>1.37</td><td align="right" headers="perSecond StdDev" class='awrc'>0.66</td><td align="right" headers="perSecond Min" class='awrc'>0.91</td><td align="right" headers="perSecond Max" class='awrcrb'>1.83</td></tr>
<tr><td scope="row" class='awrnc'>session connect time</td><td align="right" class='awrnc'>712</td><td align="right" class='awrnc'>1.08</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>1.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>1.08</td><td align="right" headers="perSecond Max" class='awrncrb'>1.08</td></tr>
<tr><td scope="row" class='awrc'>session cursor cache hits</td><td align="right" class='awrc'>590,835</td><td align="right" class='awrc'>894.17</td><td align="right" class='awrc'>8.00</td><td align="right" headers="perSecond Average" class='awrclb'>447.09</td><td align="right" headers="perSecond StdDev" class='awrc'>47.02</td><td align="right" headers="perSecond Min" class='awrc'>413.84</td><td align="right" headers="perSecond Max" class='awrcrb'>480.34</td></tr>
<tr><td scope="row" class='awrnc'>session logical reads</td><td align="right" class='awrnc'>32,501,639</td><td align="right" class='awrnc'>49,188.10</td><td align="right" class='awrnc'>440.07</td><td align="right" headers="perSecond Average" class='awrnclb'>24,594.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>3,159.22</td><td align="right" headers="perSecond Min" class='awrnc'>22,360.15</td><td align="right" headers="perSecond Max" class='awrncrb'>26,827.96</td></tr>
<tr><td scope="row" class='awrc'>shared hash latch upgrades - no wait</td><td align="right" class='awrc'>4,403,516</td><td align="right" class='awrc'>6,664.30</td><td align="right" class='awrc'>59.62</td><td align="right" headers="perSecond Average" class='awrclb'>3,332.15</td><td align="right" headers="perSecond StdDev" class='awrc'>317.79</td><td align="right" headers="perSecond Min" class='awrc'>3,107.44</td><td align="right" headers="perSecond Max" class='awrcrb'>3,556.86</td></tr>
<tr><td scope="row" class='awrnc'>shared hash latch upgrades - wait</td><td align="right" class='awrnc'>235</td><td align="right" class='awrnc'>0.36</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.18</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>0.15</td><td align="right" headers="perSecond Max" class='awrncrb'>0.21</td></tr>
<tr><td scope="row" class='awrc'>shared io pool buffer get success</td><td align="right" class='awrc'>115</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.09</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>sorts (memory)</td><td align="right" class='awrnc'>7,087</td><td align="right" class='awrnc'>10.73</td><td align="right" class='awrnc'>0.10</td><td align="right" headers="perSecond Average" class='awrnclb'>5.36</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.92</td><td align="right" headers="perSecond Min" class='awrnc'>2.59</td><td align="right" headers="perSecond Max" class='awrncrb'>8.13</td></tr>
<tr><td scope="row" class='awrc'>sorts (rows)</td><td align="right" class='awrc'>1,405,245</td><td align="right" class='awrc'>2,126.77</td><td align="right" class='awrc'>19.03</td><td align="right" headers="perSecond Average" class='awrclb'>1,063.38</td><td align="right" headers="perSecond StdDev" class='awrc'>1,131.59</td><td align="right" headers="perSecond Min" class='awrc'>263.23</td><td align="right" headers="perSecond Max" class='awrcrb'>1,863.54</td></tr>
<tr><td scope="row" class='awrnc'>sql area evicted</td><td align="right" class='awrnc'>5,247</td><td align="right" class='awrnc'>7.94</td><td align="right" class='awrnc'>0.07</td><td align="right" headers="perSecond Average" class='awrnclb'>3.97</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.20</td><td align="right" headers="perSecond Min" class='awrnc'>3.83</td><td align="right" headers="perSecond Max" class='awrncrb'>4.12</td></tr>
<tr><td scope="row" class='awrc'>sql area purged</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>summed dirty queue length</td><td align="right" class='awrnc'>46,615,478</td><td align="right" class='awrnc'>70,547.76</td><td align="right" class='awrnc'>631.17</td><td align="right" headers="perSecond Average" class='awrnclb'>35,273.88</td><td align="right" headers="perSecond StdDev" class='awrnc'>10,080.42</td><td align="right" headers="perSecond Min" class='awrnc'>28,145.95</td><td align="right" headers="perSecond Max" class='awrncrb'>42,401.81</td></tr>
<tr><td scope="row" class='awrc'>switch current caused by our pin</td><td align="right" class='awrc'>829</td><td align="right" class='awrc'>1.25</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.63</td><td align="right" headers="perSecond StdDev" class='awrc'>0.80</td><td align="right" headers="perSecond Min" class='awrc'>0.06</td><td align="right" headers="perSecond Max" class='awrcrb'>1.20</td></tr>
<tr><td scope="row" class='awrnc'>switch current to new buffer</td><td align="right" class='awrnc'>833</td><td align="right" class='awrnc'>1.26</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.63</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.81</td><td align="right" headers="perSecond Min" class='awrnc'>0.06</td><td align="right" headers="perSecond Max" class='awrncrb'>1.20</td></tr>
<tr><td scope="row" class='awrc'>table fetch by rowid</td><td align="right" class='awrc'>48,484,827</td><td align="right" class='awrc'>73,377.11</td><td align="right" class='awrc'>656.48</td><td align="right" headers="perSecond Average" class='awrclb'>36,688.56</td><td align="right" headers="perSecond StdDev" class='awrc'>4,904.73</td><td align="right" headers="perSecond Min" class='awrc'>33,220.39</td><td align="right" headers="perSecond Max" class='awrcrb'>40,156.73</td></tr>
<tr><td scope="row" class='awrnc'>table fetch continued row</td><td align="right" class='awrnc'>639</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.48</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.45</td><td align="right" headers="perSecond Min" class='awrnc'>0.17</td><td align="right" headers="perSecond Max" class='awrncrb'>0.80</td></tr>
<tr><td scope="row" class='awrc'>table scan blocks gotten</td><td align="right" class='awrc'>28,323</td><td align="right" class='awrc'>42.86</td><td align="right" class='awrc'>0.38</td><td align="right" headers="perSecond Average" class='awrclb'>21.43</td><td align="right" headers="perSecond StdDev" class='awrc'>2.19</td><td align="right" headers="perSecond Min" class='awrc'>19.88</td><td align="right" headers="perSecond Max" class='awrcrb'>22.98</td></tr>
<tr><td scope="row" class='awrnc'>table scan disk non-IMC rows gotten</td><td align="right" class='awrnc'>1,108,708</td><td align="right" class='awrnc'>1,677.95</td><td align="right" class='awrnc'>15.01</td><td align="right" headers="perSecond Average" class='awrnclb'>838.98</td><td align="right" headers="perSecond StdDev" class='awrnc'>477.52</td><td align="right" headers="perSecond Min" class='awrnc'>501.32</td><td align="right" headers="perSecond Max" class='awrncrb'>1,176.63</td></tr>
<tr><td scope="row" class='awrc'>table scan rows gotten</td><td align="right" class='awrc'>1,108,708</td><td align="right" class='awrc'>1,677.95</td><td align="right" class='awrc'>15.01</td><td align="right" headers="perSecond Average" class='awrclb'>838.98</td><td align="right" headers="perSecond StdDev" class='awrc'>477.52</td><td align="right" headers="perSecond Min" class='awrc'>501.32</td><td align="right" headers="perSecond Max" class='awrcrb'>1,176.63</td></tr>
<tr><td scope="row" class='awrnc'>table scans (short tables)</td><td align="right" class='awrnc'>2,462</td><td align="right" class='awrnc'>3.73</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>1.86</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.22</td><td align="right" headers="perSecond Min" class='awrnc'>1.00</td><td align="right" headers="perSecond Max" class='awrncrb'>2.73</td></tr>
<tr><td scope="row" class='awrc'>temp space allocated (bytes)</td><td align="right" class='awrc'>2,097,152</td><td align="right" class='awrc'>3,173.96</td><td align="right" class='awrc'>28.40</td><td align="right" headers="perSecond Average" class='awrclb'>3,173.96</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>3,173.96</td><td align="right" headers="perSecond Max" class='awrcrb'>3,173.96</td></tr>
<tr><td scope="row" class='awrnc'>total cf enq hold time</td><td align="right" class='awrnc'>9,049</td><td align="right" class='awrnc'>13.69</td><td align="right" class='awrnc'>0.12</td><td align="right" headers="perSecond Average" class='awrnclb'>6.85</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.44</td><td align="right" headers="perSecond Min" class='awrnc'>5.12</td><td align="right" headers="perSecond Max" class='awrncrb'>8.57</td></tr>
<tr><td scope="row" class='awrc'>total number of cf enq holders</td><td align="right" class='awrc'>509</td><td align="right" class='awrc'>0.77</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.39</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.37</td><td align="right" headers="perSecond Max" class='awrcrb'>0.40</td></tr>
<tr><td scope="row" class='awrnc'>total number of times SMON posted</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>transaction rollbacks</td><td align="right" class='awrc'>34</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>transaction tables consistent reads - undo records applied</td><td align="right" class='awrnc'>34,992</td><td align="right" class='awrnc'>52.96</td><td align="right" class='awrnc'>0.47</td><td align="right" headers="perSecond Average" class='awrnclb'>26.48</td><td align="right" headers="perSecond StdDev" class='awrnc'>10.08</td><td align="right" headers="perSecond Min" class='awrnc'>19.35</td><td align="right" headers="perSecond Max" class='awrncrb'>33.61</td></tr>
<tr><td scope="row" class='awrc'>undo change vector size</td><td align="right" class='awrc'>1,575,452,412</td><td align="right" class='awrc'>2,384,294.95</td><td align="right" class='awrc'>21,331.41</td><td align="right" headers="perSecond Average" class='awrclb'>1,192,147.48</td><td align="right" headers="perSecond StdDev" class='awrc'>167,291.25</td><td align="right" headers="perSecond Min" class='awrc'>1,073,854.70</td><td align="right" headers="perSecond Max" class='awrcrb'>1,310,440.25</td></tr>
<tr><td scope="row" class='awrnc'>user I/O wait time</td><td align="right" class='awrnc'>2,432,974</td><td align="right" class='awrnc'>3,682.07</td><td align="right" class='awrnc'>32.94</td><td align="right" headers="perSecond Average" class='awrnclb'>1,841.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>239.09</td><td align="right" headers="perSecond Min" class='awrnc'>1,671.98</td><td align="right" headers="perSecond Max" class='awrncrb'>2,010.10</td></tr>
<tr><td scope="row" class='awrc'>user calls</td><td align="right" class='awrc'>4,198</td><td align="right" class='awrc'>6.35</td><td align="right" class='awrc'>0.06</td><td align="right" headers="perSecond Average" class='awrclb'>3.18</td><td align="right" headers="perSecond StdDev" class='awrc'>0.08</td><td align="right" headers="perSecond Min" class='awrc'>3.12</td><td align="right" headers="perSecond Max" class='awrcrb'>3.24</td></tr>
<tr><td scope="row" class='awrnc'>user commits</td><td align="right" class='awrnc'>73,856</td><td align="right" class='awrnc'>111.77</td><td align="right" class='awrnc'>1.00</td><td align="right" headers="perSecond Average" class='awrnclb'>55.89</td><td align="right" headers="perSecond StdDev" class='awrnc'>7.66</td><td align="right" headers="perSecond Min" class='awrnc'>50.47</td><td align="right" headers="perSecond Max" class='awrncrb'>61.30</td></tr>
<tr><td scope="row" class='awrc'>user logons cumulative</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>user logouts cumulative</td><td align="right" class='awrnc'>513</td><td align="right" class='awrnc'>0.78</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.39</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.38</td><td align="right" headers="perSecond Max" class='awrncrb'>0.40</td></tr>
<tr><td scope="row" class='awrc'>workarea executions - optimal</td><td align="right" class='awrc'>4,404</td><td align="right" class='awrc'>6.67</td><td align="right" class='awrc'>0.06</td><td align="right" headers="perSecond Average" class='awrclb'>3.33</td><td align="right" headers="perSecond StdDev" class='awrc'>1.59</td><td align="right" headers="perSecond Min" class='awrc'>2.21</td><td align="right" headers="perSecond Max" class='awrcrb'>4.46</td></tr>
<tr><td scope="row" class='awrnc'>write clones created in foreground</td><td align="right" class='awrnc'>287</td><td align="right" class='awrnc'>0.43</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.22</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.12</td><td align="right" headers="perSecond Min" class='awrnc'>0.13</td><td align="right" headers="perSecond Max" class='awrncrb'>0.30</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12072"></a>
<h3 class="awr">Global Messaging Statistics (Global)</h3>
<ul>
<li class="awr"> per Second Average - average of per-instance per Second rates </li>
<li class="awr"> per Second Std Dev - standard deviation of per-instance per Second rates </li>
<li class="awr"> per Second Min     - minimum of per-instance per Second rates </li>
<li class="awr"> per Second Max     - maximum of per-instance per Second rates</li>
</ul>
<table border="0" class="tdiff" summary="Global Messaging Statistics (Global). . per Second Average - average of per-instance per Second rates. per Second Std Dev - standard deviation of per-instance per Second rates. per Second Min - minimum of per-instance per Second rates. per Second Max - maximum of per-instance per Second rates"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="perSecond">per Second</th>
</tr><tr>
<th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th><th class="awrbg" scope="col" id="Average">Average</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim Broadcasts sent</td><td align="right" class='awrc'>260</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.20</td><td align="right" headers="perSecond StdDev" class='awrc'>0.07</td><td align="right" headers="perSecond Min" class='awrc'>0.15</td><td align="right" headers="perSecond Max" class='awrcrb'>0.25</td></tr>
<tr><td scope="row" class='awrnc'>Global Enqueue S-optim S-lock gets</td><td align="right" class='awrnc'>685,841</td><td align="right" class='awrnc'>1,037.99</td><td align="right" class='awrnc'>9.29</td><td align="right" headers="perSecond Average" class='awrnclb'>519.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>636.17</td><td align="right" headers="perSecond Min" class='awrnc'>69.16</td><td align="right" headers="perSecond Max" class='awrncrb'>968.83</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim anti-locks crea</td><td align="right" class='awrc'>126</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.12</td></tr>
<tr><td scope="row" class='awrnc'>acks for commit broadcast(actual)</td><td align="right" class='awrnc'>4,697</td><td align="right" class='awrnc'>7.11</td><td align="right" class='awrnc'>0.06</td><td align="right" headers="perSecond Average" class='awrnclb'>3.55</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.31</td><td align="right" headers="perSecond Min" class='awrnc'>3.34</td><td align="right" headers="perSecond Max" class='awrncrb'>3.77</td></tr>
<tr><td scope="row" class='awrc'>acks for commit broadcast(logical)</td><td align="right" class='awrc'>25,578</td><td align="right" class='awrc'>38.71</td><td align="right" class='awrc'>0.35</td><td align="right" headers="perSecond Average" class='awrclb'>19.36</td><td align="right" headers="perSecond StdDev" class='awrc'>1.23</td><td align="right" headers="perSecond Min" class='awrc'>18.48</td><td align="right" headers="perSecond Max" class='awrcrb'>20.23</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(actual)</td><td align="right" class='awrnc'>25,718</td><td align="right" class='awrnc'>38.92</td><td align="right" class='awrnc'>0.35</td><td align="right" headers="perSecond Average" class='awrnclb'>19.46</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.53</td><td align="right" headers="perSecond Min" class='awrnc'>18.38</td><td align="right" headers="perSecond Max" class='awrncrb'>20.54</td></tr>
<tr><td scope="row" class='awrc'>broadcast msgs on commit(logical)</td><td align="right" class='awrc'>42,437</td><td align="right" class='awrc'>64.22</td><td align="right" class='awrc'>0.57</td><td align="right" headers="perSecond Average" class='awrclb'>32.11</td><td align="right" headers="perSecond StdDev" class='awrc'>0.43</td><td align="right" headers="perSecond Min" class='awrc'>31.81</td><td align="right" headers="perSecond Max" class='awrcrb'>32.42</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(wasted)</td><td align="right" class='awrnc'>19,195</td><td align="right" class='awrnc'>29.05</td><td align="right" class='awrnc'>0.26</td><td align="right" headers="perSecond Average" class='awrnclb'>14.52</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.52</td><td align="right" headers="perSecond Min" class='awrnc'>14.16</td><td align="right" headers="perSecond Max" class='awrncrb'>14.89</td></tr>
<tr><td scope="row" class='awrc'>flow control messages received</td><td align="right" class='awrc'>45</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>flow control messages sent</td><td align="right" class='awrnc'>45</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gcs assume no cvt</td><td align="right" class='awrc'>20,661</td><td align="right" class='awrc'>31.27</td><td align="right" class='awrc'>0.28</td><td align="right" headers="perSecond Average" class='awrclb'>15.63</td><td align="right" headers="perSecond StdDev" class='awrc'>2.94</td><td align="right" headers="perSecond Min" class='awrc'>13.55</td><td align="right" headers="perSecond Max" class='awrcrb'>17.72</td></tr>
<tr><td scope="row" class='awrnc'>gcs ast to fg</td><td align="right" class='awrnc'>46,185</td><td align="right" class='awrnc'>69.90</td><td align="right" class='awrnc'>0.63</td><td align="right" headers="perSecond Average" class='awrnclb'>34.95</td><td align="right" headers="perSecond StdDev" class='awrnc'>23.39</td><td align="right" headers="perSecond Min" class='awrnc'>18.41</td><td align="right" headers="perSecond Max" class='awrncrb'>51.49</td></tr>
<tr><td scope="row" class='awrc'>gcs bidless ast to lms</td><td align="right" class='awrc'>2,703</td><td align="right" class='awrc'>4.09</td><td align="right" class='awrc'>0.04</td><td align="right" headers="perSecond Average" class='awrclb'>2.05</td><td align="right" headers="perSecond StdDev" class='awrc'>1.27</td><td align="right" headers="perSecond Min" class='awrc'>1.14</td><td align="right" headers="perSecond Max" class='awrcrb'>2.95</td></tr>
<tr><td scope="row" class='awrnc'>gcs blocked converts</td><td align="right" class='awrnc'>44,570</td><td align="right" class='awrnc'>67.45</td><td align="right" class='awrnc'>0.60</td><td align="right" headers="perSecond Average" class='awrnclb'>33.73</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.26</td><td align="right" headers="perSecond Min" class='awrnc'>33.54</td><td align="right" headers="perSecond Max" class='awrncrb'>33.91</td></tr>
<tr><td scope="row" class='awrc'>gcs blocked cr converts</td><td align="right" class='awrc'>62,255</td><td align="right" class='awrc'>94.22</td><td align="right" class='awrc'>0.84</td><td align="right" headers="perSecond Average" class='awrclb'>47.11</td><td align="right" headers="perSecond StdDev" class='awrc'>1.98</td><td align="right" headers="perSecond Min" class='awrc'>45.71</td><td align="right" headers="perSecond Max" class='awrcrb'>48.51</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible basts</td><td align="right" class='awrnc'>26</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gcs compatible cr basts (global)</td><td align="right" class='awrc'>229</td><td align="right" class='awrc'>0.35</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.17</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.17</td><td align="right" headers="perSecond Max" class='awrcrb'>0.18</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible cr basts (local)</td><td align="right" class='awrnc'>2,486</td><td align="right" class='awrnc'>3.76</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>1.88</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.19</td><td align="right" headers="perSecond Min" class='awrnc'>1.75</td><td align="right" headers="perSecond Max" class='awrncrb'>2.01</td></tr>
<tr><td scope="row" class='awrc'>gcs cr requests to slave</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gcs dbwr flush pi msgs</td><td align="right" class='awrnc'>2,213,817</td><td align="right" class='awrnc'>3,350.40</td><td align="right" class='awrnc'>29.97</td><td align="right" headers="perSecond Average" class='awrnclb'>1,675.20</td><td align="right" headers="perSecond StdDev" class='awrnc'>235.62</td><td align="right" headers="perSecond Min" class='awrnc'>1,508.59</td><td align="right" headers="perSecond Max" class='awrncrb'>1,841.80</td></tr>
<tr><td scope="row" class='awrc'>gcs dbwr write request msgs</td><td align="right" class='awrc'>425</td><td align="right" class='awrc'>0.64</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.32</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.30</td><td align="right" headers="perSecond Max" class='awrcrb'>0.34</td></tr>
<tr><td scope="row" class='awrnc'>gcs force cr block only</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gcs grant ast</td><td align="right" class='awrc'>48,888</td><td align="right" class='awrc'>73.99</td><td align="right" class='awrc'>0.66</td><td align="right" headers="perSecond Average" class='awrclb'>36.99</td><td align="right" headers="perSecond StdDev" class='awrc'>24.67</td><td align="right" headers="perSecond Min" class='awrc'>19.55</td><td align="right" headers="perSecond Max" class='awrcrb'>54.44</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate (compatible) converts</td><td align="right" class='awrnc'>353,526</td><td align="right" class='awrnc'>535.03</td><td align="right" class='awrnc'>4.79</td><td align="right" headers="perSecond Average" class='awrnclb'>267.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.94</td><td align="right" headers="perSecond Min" class='awrnc'>266.14</td><td align="right" headers="perSecond Max" class='awrncrb'>268.89</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate (null) converts</td><td align="right" class='awrc'>4,077,266</td><td align="right" class='awrc'>6,170.57</td><td align="right" class='awrc'>55.21</td><td align="right" headers="perSecond Average" class='awrclb'>3,085.28</td><td align="right" headers="perSecond StdDev" class='awrc'>28.08</td><td align="right" headers="perSecond Min" class='awrc'>3,065.43</td><td align="right" headers="perSecond Max" class='awrcrb'>3,105.14</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate cr (compatible) converts</td><td align="right" class='awrnc'>193,463</td><td align="right" class='awrnc'>292.79</td><td align="right" class='awrnc'>2.62</td><td align="right" headers="perSecond Average" class='awrnclb'>146.39</td><td align="right" headers="perSecond StdDev" class='awrnc'>4.98</td><td align="right" headers="perSecond Min" class='awrnc'>142.87</td><td align="right" headers="perSecond Max" class='awrncrb'>149.91</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate cr (null) converts</td><td align="right" class='awrc'>23,012,595</td><td align="right" class='awrc'>34,827.46</td><td align="right" class='awrc'>311.59</td><td align="right" headers="perSecond Average" class='awrclb'>17,413.73</td><td align="right" headers="perSecond StdDev" class='awrc'>126.80</td><td align="right" headers="perSecond Min" class='awrc'>17,324.07</td><td align="right" headers="perSecond Max" class='awrcrb'>17,503.39</td></tr>
<tr><td scope="row" class='awrnc'>gcs lms write request msgs</td><td align="right" class='awrnc'>233</td><td align="right" class='awrnc'>0.35</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.18</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.10</td><td align="right" headers="perSecond Min" class='awrnc'>0.11</td><td align="right" headers="perSecond Max" class='awrncrb'>0.24</td></tr>
<tr><td scope="row" class='awrc'>gcs msgs process time(ms)</td><td align="right" class='awrc'>991,481</td><td align="right" class='awrc'>1,500.52</td><td align="right" class='awrc'>13.42</td><td align="right" headers="perSecond Average" class='awrclb'>750.26</td><td align="right" headers="perSecond StdDev" class='awrc'>71.67</td><td align="right" headers="perSecond Min" class='awrc'>699.58</td><td align="right" headers="perSecond Max" class='awrcrb'>800.94</td></tr>
<tr><td scope="row" class='awrnc'>gcs msgs received</td><td align="right" class='awrnc'>43,690,088</td><td align="right" class='awrnc'>66,121.03</td><td align="right" class='awrnc'>591.56</td><td align="right" headers="perSecond Average" class='awrnclb'>33,060.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,235.23</td><td align="right" headers="perSecond Min" class='awrnc'>32,187.08</td><td align="right" headers="perSecond Max" class='awrncrb'>33,933.95</td></tr>
<tr><td scope="row" class='awrc'>gcs new served by master</td><td align="right" class='awrc'>669</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.51</td><td align="right" headers="perSecond StdDev" class='awrc'>0.22</td><td align="right" headers="perSecond Min" class='awrc'>0.35</td><td align="right" headers="perSecond Max" class='awrcrb'>0.66</td></tr>
<tr><td scope="row" class='awrnc'>gcs out-of-order msgs</td><td align="right" class='awrnc'>17,863</td><td align="right" class='awrnc'>27.03</td><td align="right" class='awrnc'>0.24</td><td align="right" headers="perSecond Average" class='awrnclb'>13.52</td><td align="right" headers="perSecond StdDev" class='awrnc'>8.08</td><td align="right" headers="perSecond Min" class='awrnc'>7.80</td><td align="right" headers="perSecond Max" class='awrncrb'>19.23</td></tr>
<tr><td scope="row" class='awrc'>gcs pings refused</td><td align="right" class='awrc'>19,742</td><td align="right" class='awrc'>29.88</td><td align="right" class='awrc'>0.27</td><td align="right" headers="perSecond Average" class='awrclb'>14.94</td><td align="right" headers="perSecond StdDev" class='awrc'>2.40</td><td align="right" headers="perSecond Min" class='awrc'>13.24</td><td align="right" headers="perSecond Max" class='awrcrb'>16.64</td></tr>
<tr><td scope="row" class='awrnc'>gcs queued converts</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass grant immediate</td><td align="right" class='awrc'>2,545</td><td align="right" class='awrc'>3.85</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>1.93</td><td align="right" headers="perSecond StdDev" class='awrc'>1.36</td><td align="right" headers="perSecond Min" class='awrc'>0.96</td><td align="right" headers="perSecond Max" class='awrcrb'>2.89</td></tr>
<tr><td scope="row" class='awrnc'>gcs side channel msgs actual</td><td align="right" class='awrnc'>7,280</td><td align="right" class='awrnc'>11.02</td><td align="right" class='awrnc'>0.10</td><td align="right" headers="perSecond Average" class='awrnclb'>5.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.36</td><td align="right" headers="perSecond Min" class='awrnc'>5.26</td><td align="right" headers="perSecond Max" class='awrncrb'>5.76</td></tr>
<tr><td scope="row" class='awrc'>gcs side channel msgs logical</td><td align="right" class='awrc'>150,210</td><td align="right" class='awrc'>227.33</td><td align="right" class='awrc'>2.03</td><td align="right" headers="perSecond Average" class='awrclb'>113.67</td><td align="right" headers="perSecond StdDev" class='awrc'>19.72</td><td align="right" headers="perSecond Min" class='awrc'>99.72</td><td align="right" headers="perSecond Max" class='awrcrb'>127.61</td></tr>
<tr><td scope="row" class='awrnc'>gcs stale cr</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gcs undo cr</td><td align="right" class='awrc'>104</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrc'>0.10</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.15</td></tr>
<tr><td scope="row" class='awrnc'>gcs write notification msgs</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs writes refused</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges msgs process time(ms)</td><td align="right" class='awrnc'>1,071</td><td align="right" class='awrnc'>1.62</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.81</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.80</td><td align="right" headers="perSecond Max" class='awrncrb'>0.82</td></tr>
<tr><td scope="row" class='awrc'>ges msgs received</td><td align="right" class='awrc'>32,996</td><td align="right" class='awrc'>49.94</td><td align="right" class='awrc'>0.45</td><td align="right" headers="perSecond Average" class='awrclb'>24.97</td><td align="right" headers="perSecond StdDev" class='awrc'>10.79</td><td align="right" headers="perSecond Min" class='awrc'>17.34</td><td align="right" headers="perSecond Max" class='awrcrb'>32.60</td></tr>
<tr><td scope="row" class='awrnc'>implicit batch messages received</td><td align="right" class='awrnc'>407,435</td><td align="right" class='awrnc'>616.62</td><td align="right" class='awrnc'>5.52</td><td align="right" headers="perSecond Average" class='awrnclb'>308.31</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.62</td><td align="right" headers="perSecond Min" class='awrnc'>306.46</td><td align="right" headers="perSecond Max" class='awrncrb'>310.16</td></tr>
<tr><td scope="row" class='awrc'>implicit batch messages sent</td><td align="right" class='awrc'>407,341</td><td align="right" class='awrc'>616.47</td><td align="right" class='awrc'>5.52</td><td align="right" headers="perSecond Average" class='awrclb'>308.24</td><td align="right" headers="perSecond StdDev" class='awrc'>3.10</td><td align="right" headers="perSecond Min" class='awrc'>306.05</td><td align="right" headers="perSecond Max" class='awrcrb'>310.43</td></tr>
<tr><td scope="row" class='awrnc'>messages flow controlled</td><td align="right" class='awrnc'>13,472</td><td align="right" class='awrnc'>20.39</td><td align="right" class='awrnc'>0.18</td><td align="right" headers="perSecond Average" class='awrnclb'>10.19</td><td align="right" headers="perSecond StdDev" class='awrnc'>9.92</td><td align="right" headers="perSecond Min" class='awrnc'>3.18</td><td align="right" headers="perSecond Max" class='awrncrb'>17.21</td></tr>
<tr><td scope="row" class='awrc'>messages queue sent actual</td><td align="right" class='awrc'>2,609,024</td><td align="right" class='awrc'>3,948.52</td><td align="right" class='awrc'>35.33</td><td align="right" headers="perSecond Average" class='awrclb'>1,974.26</td><td align="right" headers="perSecond StdDev" class='awrc'>86.10</td><td align="right" headers="perSecond Min" class='awrc'>1,913.38</td><td align="right" headers="perSecond Max" class='awrcrb'>2,035.14</td></tr>
<tr><td scope="row" class='awrnc'>messages queue sent logical</td><td align="right" class='awrnc'>4,031,635</td><td align="right" class='awrnc'>6,101.51</td><td align="right" class='awrnc'>54.59</td><td align="right" headers="perSecond Average" class='awrnclb'>3,050.75</td><td align="right" headers="perSecond StdDev" class='awrnc'>60.74</td><td align="right" headers="perSecond Min" class='awrnc'>3,007.80</td><td align="right" headers="perSecond Max" class='awrncrb'>3,093.70</td></tr>
<tr><td scope="row" class='awrc'>messages received actual</td><td align="right" class='awrc'>6,533,030</td><td align="right" class='awrc'>9,887.17</td><td align="right" class='awrc'>88.46</td><td align="right" headers="perSecond Average" class='awrclb'>4,943.58</td><td align="right" headers="perSecond StdDev" class='awrc'>414.41</td><td align="right" headers="perSecond Min" class='awrc'>4,650.55</td><td align="right" headers="perSecond Max" class='awrcrb'>5,236.61</td></tr>
<tr><td scope="row" class='awrnc'>messages received logical</td><td align="right" class='awrnc'>43,723,084</td><td align="right" class='awrnc'>66,170.96</td><td align="right" class='awrnc'>592.00</td><td align="right" headers="perSecond Average" class='awrnclb'>33,085.48</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,224.43</td><td align="right" headers="perSecond Min" class='awrnc'>32,219.68</td><td align="right" headers="perSecond Max" class='awrncrb'>33,951.29</td></tr>
<tr><td scope="row" class='awrc'>messages sent directly</td><td align="right" class='awrc'>2,731,576</td><td align="right" class='awrc'>4,133.98</td><td align="right" class='awrc'>36.99</td><td align="right" headers="perSecond Average" class='awrclb'>2,066.99</td><td align="right" headers="perSecond StdDev" class='awrc'>281.28</td><td align="right" headers="perSecond Min" class='awrc'>1,868.09</td><td align="right" headers="perSecond Max" class='awrcrb'>2,265.88</td></tr>
<tr><td scope="row" class='awrnc'>messages sent indirectly</td><td align="right" class='awrnc'>15,955,568</td><td align="right" class='awrnc'>24,147.22</td><td align="right" class='awrnc'>216.04</td><td align="right" headers="perSecond Average" class='awrnclb'>12,073.61</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,592.48</td><td align="right" headers="perSecond Min" class='awrnc'>10,947.55</td><td align="right" headers="perSecond Max" class='awrncrb'>13,199.66</td></tr>
<tr><td scope="row" class='awrc'>messages sent not implicit batched</td><td align="right" class='awrc'>143,153</td><td align="right" class='awrc'>216.65</td><td align="right" class='awrc'>1.94</td><td align="right" headers="perSecond Average" class='awrclb'>108.32</td><td align="right" headers="perSecond StdDev" class='awrc'>8.06</td><td align="right" headers="perSecond Min" class='awrc'>102.63</td><td align="right" headers="perSecond Max" class='awrcrb'>114.02</td></tr>
<tr><td scope="row" class='awrnc'>messages sent pbatched</td><td align="right" class='awrnc'>38,706,098</td><td align="right" class='awrnc'>58,578.09</td><td align="right" class='awrnc'>524.08</td><td align="right" headers="perSecond Average" class='awrnclb'>29,289.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,234.76</td><td align="right" headers="perSecond Min" class='awrnc'>28,415.93</td><td align="right" headers="perSecond Max" class='awrncrb'>30,162.15</td></tr>
<tr><td scope="row" class='awrc'>msgs received kernel queue time (ns)</td><td align="right" class='awrc'>7,457,947,991,751</td><td align="right" class='awrc'>11,287,040,408.97</td><td align="right" class='awrc'>100,979,581.78</td><td align="right" headers="perSecond Average" class='awrclb'>5,643,520,204.48</td><td align="right" headers="perSecond StdDev" class='awrc'>2,263,592,559.58</td><td align="right" headers="perSecond Min" class='awrc'>4,042,918,555.76</td><td align="right" headers="perSecond Max" class='awrcrb'>7,244,121,853.21</td></tr>
<tr><td scope="row" class='awrnc'>msgs received queue time (ms)</td><td align="right" class='awrnc'>4,565,301</td><td align="right" class='awrnc'>6,909.25</td><td align="right" class='awrnc'>61.81</td><td align="right" headers="perSecond Average" class='awrnclb'>3,454.62</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,615.43</td><td align="right" headers="perSecond Min" class='awrnc'>2,312.34</td><td align="right" headers="perSecond Max" class='awrncrb'>4,596.91</td></tr>
<tr><td scope="row" class='awrc'>msgs received queued</td><td align="right" class='awrc'>43,723,081</td><td align="right" class='awrc'>66,170.96</td><td align="right" class='awrc'>592.00</td><td align="right" headers="perSecond Average" class='awrclb'>33,085.48</td><td align="right" headers="perSecond StdDev" class='awrc'>1,224.44</td><td align="right" headers="perSecond Min" class='awrc'>32,219.67</td><td align="right" headers="perSecond Max" class='awrcrb'>33,951.29</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queue time (ms)</td><td align="right" class='awrnc'>18,329,803</td><td align="right" class='awrnc'>27,740.19</td><td align="right" class='awrnc'>248.18</td><td align="right" headers="perSecond Average" class='awrnclb'>13,870.10</td><td align="right" headers="perSecond StdDev" class='awrnc'>5,727.71</td><td align="right" headers="perSecond Min" class='awrnc'>9,819.99</td><td align="right" headers="perSecond Max" class='awrncrb'>17,920.20</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queue time on ksxp (ms)</td><td align="right" class='awrc'>299,102,950</td><td align="right" class='awrc'>452,659.30</td><td align="right" class='awrc'>4,049.81</td><td align="right" headers="perSecond Average" class='awrclb'>226,329.65</td><td align="right" headers="perSecond StdDev" class='awrc'>111,727.94</td><td align="right" headers="perSecond Min" class='awrc'>147,326.06</td><td align="right" headers="perSecond Max" class='awrcrb'>305,333.23</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queued</td><td align="right" class='awrnc'>4,662,810</td><td align="right" class='awrnc'>7,056.72</td><td align="right" class='awrnc'>63.13</td><td align="right" headers="perSecond Average" class='awrnclb'>3,528.36</td><td align="right" headers="perSecond StdDev" class='awrnc'>284.84</td><td align="right" headers="perSecond Min" class='awrnc'>3,326.95</td><td align="right" headers="perSecond Max" class='awrncrb'>3,729.78</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queued on ksxp</td><td align="right" class='awrc'>6,547,134</td><td align="right" class='awrc'>9,908.47</td><td align="right" class='awrc'>88.65</td><td align="right" headers="perSecond Average" class='awrclb'>4,954.23</td><td align="right" headers="perSecond StdDev" class='awrc'>489.83</td><td align="right" headers="perSecond Min" class='awrc'>4,607.87</td><td align="right" headers="perSecond Max" class='awrcrb'>5,300.59</td></tr>
<tr><td scope="row" class='awrnc'>process batch messages received</td><td align="right" class='awrnc'>3,345,435</td><td align="right" class='awrnc'>5,063.02</td><td align="right" class='awrnc'>45.30</td><td align="right" headers="perSecond Average" class='awrnclb'>2,531.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>162.04</td><td align="right" headers="perSecond Min" class='awrnc'>2,416.93</td><td align="right" headers="perSecond Max" class='awrncrb'>2,646.09</td></tr>
<tr><td scope="row" class='awrc'>process batch messages sent</td><td align="right" class='awrc'>3,597,986</td><td align="right" class='awrc'>5,445.21</td><td align="right" class='awrc'>48.72</td><td align="right" headers="perSecond Average" class='awrclb'>2,722.61</td><td align="right" headers="perSecond StdDev" class='awrc'>190.39</td><td align="right" headers="perSecond Min" class='awrc'>2,587.98</td><td align="right" headers="perSecond Max" class='awrcrb'>2,857.23</td></tr>
<tr><td scope="row" class='awrnc'>receiver cycle time</td><td align="right" class='awrnc'>1,676,346</td><td align="right" class='awrnc'>2,537.00</td><td align="right" class='awrnc'>22.70</td><td align="right" headers="perSecond Average" class='awrnclb'>1,268.50</td><td align="right" headers="perSecond StdDev" class='awrnc'>81.58</td><td align="right" headers="perSecond Min" class='awrnc'>1,210.82</td><td align="right" headers="perSecond Max" class='awrncrb'>1,326.18</td></tr>
<tr><td scope="row" class='awrc'>receiver loop count</td><td align="right" class='awrc'>3,450,554</td><td align="right" class='awrc'>5,222.09</td><td align="right" class='awrc'>46.72</td><td align="right" headers="perSecond Average" class='awrclb'>2,611.04</td><td align="right" headers="perSecond StdDev" class='awrc'>222.82</td><td align="right" headers="perSecond Min" class='awrc'>2,453.48</td><td align="right" headers="perSecond Max" class='awrcrb'>2,768.60</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12073"></a>
<h3 class="awr">System Statistics (Absolute Values)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics (Absolute Values)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Sessions">Sessions</th>
<th class="awrbg" colspan=" 2" id="OpenCursors">Open Cursors</th>
<th class="awrbg" colspan=" 2" id="SessionCachedCursors">Session Cached Cursors</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sessions Begin" class='awrclb'>377</td><td align="right" headers="Sessions End" class='awrc'>126</td><td align="right" headers="OpenCursors Begin" class='awrclb'>1,304</td><td align="right" headers="OpenCursors End" class='awrc'>169</td><td align="right" headers="SessionCachedCursors Begin" class='awrclb'>331,622</td><td align="right" headers="SessionCachedCursors End" class='awrcrb'>332,176</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sessions Begin" class='awrnclb'>389</td><td align="right" headers="Sessions End" class='awrnc'>126</td><td align="right" headers="OpenCursors Begin" class='awrnclb'>1,352</td><td align="right" headers="OpenCursors End" class='awrnc'>159</td><td align="right" headers="SessionCachedCursors Begin" class='awrnclb'>330,142</td><td align="right" headers="SessionCachedCursors End" class='awrncrb'>332,392</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>766</td><td align="right" class='awrct'>252</td><td align="right" class='awrclbt'>2,656</td><td align="right" class='awrct'>328</td><td align="right" class='awrclbt'>661,764</td><td align="right" class='awrcrbt'>664,568</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>383</td><td align="right" class='awrnc'>126</td><td align="right" class='awrnclb'>1,328</td><td align="right" class='awrnc'>164</td><td align="right" class='awrnclb'>330,882</td><td align="right" class='awrncrb'>332,284</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>8</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>34</td><td align="right" class='awrc'>7</td><td align="right" class='awrclb'>1,047</td><td align="right" class='awrcrb'>153</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="630"></a>
<h2 class="awr">
I/O Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12097">IO Profile (Global)</a></li>
<li class="awr"><a class="awr" href="#12076">IOStat by Function</a></li>
<li class="awr"><a class="awr" href="#12077">IOStat by File Type</a></li>
<li class="awr"><a class="awr" href="#12070">Segment Statistics (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12097"></a>
<h3 class="awr">IO Profile (Global)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IO Profile (Global)"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Read+Write/s</th><th class="awrbg" scope="col">Reads/s</th><th class="awrbg" scope="col">Writes/s</th></tr>
<tr><td class='awrc'>Total Requests</td><td align="right" class='awrc'>48,152.42</td><td align="right" class='awrc'>41,455.64</td><td align="right" class='awrc'>6,696.79</td></tr>
<tr><td class='awrnc'>Database Requests</td><td align="right" class='awrnc'>48,009.40</td><td align="right" class='awrnc'>41,438.86</td><td align="right" class='awrnc'>6,570.54</td></tr>
<tr><td class='awrc'>Optimized Requests</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>Redo Requests</td><td align="right" class='awrnc'>64.30</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>64.30</td></tr>
<tr><td class='awrc'>Total (MB)</td><td align="right" class='awrc'>389.07</td><td align="right" class='awrc'>328.47</td><td align="right" class='awrc'>60.59</td></tr>
<tr><td class='awrnc'>Database (MB)</td><td align="right" class='awrnc'>378.67</td><td align="right" class='awrnc'>323.75</td><td align="right" class='awrnc'>54.92</td></tr>
<tr><td class='awrc'>Optimized Total (MB)</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>Redo (MB)</td><td align="right" class='awrnc'>5.44</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>5.44</td></tr>
<tr><td class='awrc'>Database (blocks)</td><td align="right" class='awrc'>48,469.74</td><td align="right" class='awrc'>41,440.57</td><td align="right" class='awrc'>7,029.17</td></tr>
<tr><td class='awrnc'>Via Buffer Cache (blocks)</td><td align="right" class='awrnc'>48,464.98</td><td align="right" class='awrnc'>41,440.56</td><td align="right" class='awrnc'>7,024.42</td></tr>
<tr><td class='awrc'>Direct (blocks)</td><td align="right" class='awrc'>4.76</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>4.75</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12076"></a>
<h3 class="awr">IOStat by Function</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IOStat by Function"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="Requests">Requests</th>
<th class="awrbg" colspan=" 4" id="MB">MB</th>
<td>&#160;</td><td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Function Name</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOs/s">IOs/s</th><th class="awrbg" scope="col" id="Reads/s">Reads/s</th><th class="awrbg" scope="col" id="Writes/s">Writes/s</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOMB/s">IO MB/s</th><th class="awrbg" scope="col" id="ReadMB/s">Read MB/s</th><th class="awrbg" scope="col" id="WriteMB/s">Write MB/s</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time </th></tr>
<tr><td align="right" scope="row" class='awrc'>*</td><td class='awrc'>Total</td><td align="right" headers="Requests Total" class='awrclb'>31,079,877</td><td align="right" headers="Requests IOs/s" class='awrc'>47,034.85</td><td align="right" headers="Requests Reads/s" class='awrc'>40,345.70</td><td align="right" headers="Requests Writes/s" class='awrc'>6,689.15</td><td align="right" headers="MB Total" class='awrclb'>251,229</td><td align="right" headers="MB IOMB/s" class='awrc'>380.20</td><td align="right" headers="MB ReadMB/s" class='awrc'>319.76</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>60.43</td><td align="right" class='awrc'>5.3M</td><td align="right" class='awrc'>4.67ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrnclb'>26,648,847</td><td align="right" headers="Requests IOs/s" class='awrnc'>40,329.13</td><td align="right" headers="Requests Reads/s" class='awrnc'>40,329.13</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>208,219</td><td align="right" headers="MB IOMB/s" class='awrnc'>315.11</td><td align="right" headers="MB ReadMB/s" class='awrnc'>315.11</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>5.3M</td><td align="right" class='awrnc'>4.49ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>DBWR</td><td align="right" headers="Requests Total" class='awrclb'>4,337,816</td><td align="right" headers="Requests IOs/s" class='awrc'>6,564.65</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>6,564.65</td><td align="right" headers="MB Total" class='awrclb'>36,234</td><td align="right" headers="MB IOMB/s" class='awrc'>54.83</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>54.83</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>LGWR</td><td align="right" headers="Requests Total" class='awrnclb'>80,634</td><td align="right" headers="Requests IOs/s" class='awrnc'>122.03</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>122.03</td><td align="right" headers="MB Total" class='awrnclb'>3,661</td><td align="right" headers="MB IOMB/s" class='awrnc'>5.54</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>5.54</td><td align="right" class='awrnc'>41.9K</td><td align="right" class='awrnc'>26.44ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Others</td><td align="right" headers="Requests Total" class='awrclb'>12,453</td><td align="right" headers="Requests IOs/s" class='awrc'>18.85</td><td align="right" headers="Requests Reads/s" class='awrc'>16.52</td><td align="right" headers="Requests Writes/s" class='awrc'>2.32</td><td align="right" headers="MB Total" class='awrclb'>3,112</td><td align="right" headers="MB IOMB/s" class='awrc'>4.71</td><td align="right" headers="MB ReadMB/s" class='awrc'>4.66</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.05</td><td align="right" class='awrc'>6808</td><td align="right" class='awrc'>3.31ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrnclb'>101</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.15</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.15</td><td align="right" headers="MB Total" class='awrnclb'>3</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Direct Reads</td><td align="right" headers="Requests Total" class='awrclb'>26</td><td align="right" headers="Requests IOs/s" class='awrc'>0.04</td><td align="right" headers="Requests Reads/s" class='awrc'>0.04</td><td align="right" headers="Requests Writes/s" class='awrc'>0.00</td><td align="right" headers="MB Total" class='awrclb'>0</td><td align="right" headers="MB IOMB/s" class='awrc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnct'>1</td><td class='awrnct'>Total</td><td align="right" headers="Requests Total" class='awrnclbt'>17,167,924</td><td align="right" headers="Requests IOs/s" class='awrnct'>25,981.14</td><td align="right" headers="Requests Reads/s" class='awrnct'>22,313.99</td><td align="right" headers="Requests Writes/s" class='awrnct'>3,667.16</td><td align="right" headers="MB Total" class='awrnclbt'>138,677</td><td align="right" headers="MB IOMB/s" class='awrnct'>209.87</td><td align="right" headers="MB ReadMB/s" class='awrnct'>176.66</td><td align="right" headers="MB WriteMB/s" class='awrncrbt'>33.21</td><td align="right" class='awrnct'>2.9M</td><td align="right" class='awrnct'>4.69ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrclb'>14,739,143</td><td align="right" headers="Requests IOs/s" class='awrc'>22,305.54</td><td align="right" headers="Requests Reads/s" class='awrc'>22,305.54</td><td align="right" headers="Requests Writes/s" class='awrc'>0.00</td><td align="right" headers="MB Total" class='awrclb'>115,162</td><td align="right" headers="MB IOMB/s" class='awrc'>174.28</td><td align="right" headers="MB ReadMB/s" class='awrc'>174.28</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.00</td><td align="right" class='awrc'>2.9M</td><td align="right" class='awrc'>4.55ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>DBWR</td><td align="right" headers="Requests Total" class='awrnclb'>2,380,752</td><td align="right" headers="Requests IOs/s" class='awrnc'>3,602.92</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>3,602.92</td><td align="right" headers="MB Total" class='awrnclb'>19,915</td><td align="right" headers="MB IOMB/s" class='awrnc'>30.14</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>30.14</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>LGWR</td><td align="right" headers="Requests Total" class='awrclb'>41,590</td><td align="right" headers="Requests IOs/s" class='awrc'>62.94</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>62.94</td><td align="right" headers="MB Total" class='awrclb'>2,011</td><td align="right" headers="MB IOMB/s" class='awrc'>3.04</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>3.04</td><td align="right" class='awrc'>21.4K</td><td align="right" class='awrc'>23.68ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Others</td><td align="right" headers="Requests Total" class='awrnclb'>6,377</td><td align="right" headers="Requests IOs/s" class='awrnc'>9.65</td><td align="right" headers="Requests Reads/s" class='awrnc'>8.42</td><td align="right" headers="Requests Writes/s" class='awrnc'>1.23</td><td align="right" headers="MB Total" class='awrnclb'>1,588</td><td align="right" headers="MB IOMB/s" class='awrnc'>2.40</td><td align="right" headers="MB ReadMB/s" class='awrnc'>2.38</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.03</td><td align="right" class='awrnc'>3500</td><td align="right" class='awrnc'>3.68ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrclb'>44</td><td align="right" headers="Requests IOs/s" class='awrc'>0.07</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>0.07</td><td align="right" headers="MB Total" class='awrclb'>1</td><td align="right" headers="MB IOMB/s" class='awrc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Direct Reads</td><td align="right" headers="Requests Total" class='awrnclb'>18</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.03</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.03</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>0</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>2</td><td class='awrct'>Total</td><td align="right" headers="Requests Total" class='awrclbt'>13,911,953</td><td align="right" headers="Requests IOs/s" class='awrct'>21,053.71</td><td align="right" headers="Requests Reads/s" class='awrct'>18,031.71</td><td align="right" headers="Requests Writes/s" class='awrct'>3,022.00</td><td align="right" headers="MB Total" class='awrclbt'>112,552</td><td align="right" headers="MB IOMB/s" class='awrct'>170.33</td><td align="right" headers="MB ReadMB/s" class='awrct'>143.11</td><td align="right" headers="MB WriteMB/s" class='awrcrbt'>27.22</td><td align="right" class='awrct'>2.4M</td><td align="right" class='awrct'>4.64ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrnclb'>11,909,704</td><td align="right" headers="Requests IOs/s" class='awrnc'>18,023.60</td><td align="right" headers="Requests Reads/s" class='awrnc'>18,023.60</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>93,057</td><td align="right" headers="MB IOMB/s" class='awrnc'>140.83</td><td align="right" headers="MB ReadMB/s" class='awrnc'>140.83</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>2.4M</td><td align="right" class='awrnc'>4.42ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>DBWR</td><td align="right" headers="Requests Total" class='awrclb'>1,957,064</td><td align="right" headers="Requests IOs/s" class='awrc'>2,961.73</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>2,961.73</td><td align="right" headers="MB Total" class='awrclb'>16,319</td><td align="right" headers="MB IOMB/s" class='awrc'>24.70</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>24.70</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>LGWR</td><td align="right" headers="Requests Total" class='awrnclb'>39,044</td><td align="right" headers="Requests IOs/s" class='awrnc'>59.09</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>59.09</td><td align="right" headers="MB Total" class='awrnclb'>1,650</td><td align="right" headers="MB IOMB/s" class='awrnc'>2.50</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>2.50</td><td align="right" class='awrnc'>20.5K</td><td align="right" class='awrnc'>29.32ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Others</td><td align="right" headers="Requests Total" class='awrclb'>6,076</td><td align="right" headers="Requests IOs/s" class='awrc'>9.20</td><td align="right" headers="Requests Reads/s" class='awrc'>8.10</td><td align="right" headers="Requests Writes/s" class='awrc'>1.09</td><td align="right" headers="MB Total" class='awrclb'>1,524</td><td align="right" headers="MB IOMB/s" class='awrc'>2.31</td><td align="right" headers="MB ReadMB/s" class='awrc'>2.28</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.03</td><td align="right" class='awrc'>3308</td><td align="right" class='awrc'>2.92ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrnclb'>57</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.09</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.09</td><td align="right" headers="MB Total" class='awrnclb'>2</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Direct Reads</td><td align="right" headers="Requests Total" class='awrclb'>8</td><td align="right" headers="Requests IOs/s" class='awrc'>0.01</td><td align="right" headers="Requests Reads/s" class='awrc'>0.01</td><td align="right" headers="Requests Writes/s" class='awrc'>0.00</td><td align="right" headers="MB Total" class='awrclb'>0</td><td align="right" headers="MB IOMB/s" class='awrc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12077"></a>
<h3 class="awr">IOStat by File Type</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IOStat by File Type"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="Requests">Requests</th>
<th class="awrbg" colspan=" 4" id="MB">MB</th>
<th class="awrbg" colspan=" 2" id="ServiceTime">Service Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Filetype Name</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOs/s">IOs/s</th><th class="awrbg" scope="col" id="Reads/s">Reads/s</th><th class="awrbg" scope="col" id="Writes/s">Writes/s</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOMB/s">IO MB/s</th><th class="awrbg" scope="col" id="ReadMB/s">Read MB/s</th><th class="awrbg" scope="col" id="WriteMB/s">Write MB/s</th><th class="awrbg" scope="col" id="Small|Read">Small Read</th><th class="awrbg" scope="col" id="Large|Read">Large Read</th></tr>
<tr><td align="right" scope="row" class='awrc'>*</td><td class='awrc'>Total</td><td align="right" headers="Requests Total" class='awrclb'>31,074,271</td><td align="right" headers="Requests IOs/s" class='awrc'>47,026.37</td><td align="right" headers="Requests Reads/s" class='awrc'>40,336.99</td><td align="right" headers="Requests Writes/s" class='awrc'>6,689.38</td><td align="right" headers="MB Total" class='awrclb'>251,190</td><td align="right" headers="MB IOMB/s" class='awrc'>380.14</td><td align="right" headers="MB ReadMB/s" class='awrc'>319.70</td><td align="right" headers="MB WriteMB/s" class='awrc'>60.44</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>584.89us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1730.53ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Data File</td><td align="right" headers="Requests Total" class='awrnclb'>30,980,976</td><td align="right" headers="Requests IOs/s" class='awrnc'>46,885.18</td><td align="right" headers="Requests Reads/s" class='awrnc'>40,320.11</td><td align="right" headers="Requests Writes/s" class='awrnc'>6,565.07</td><td align="right" headers="MB Total" class='awrnclb'>244,419</td><td align="right" headers="MB IOMB/s" class='awrnc'>369.89</td><td align="right" headers="MB ReadMB/s" class='awrnc'>315.03</td><td align="right" headers="MB WriteMB/s" class='awrnc'>54.86</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>585.03us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Log File</td><td align="right" headers="Requests Total" class='awrclb'>83,900</td><td align="right" headers="Requests IOs/s" class='awrc'>126.97</td><td align="right" headers="Requests Reads/s" class='awrc'>4.94</td><td align="right" headers="Requests Writes/s" class='awrc'>122.03</td><td align="right" headers="MB Total" class='awrclb'>6,618</td><td align="right" headers="MB IOMB/s" class='awrc'>10.02</td><td align="right" headers="MB ReadMB/s" class='awrc'>4.47</td><td align="right" headers="MB WriteMB/s" class='awrc'>5.54</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>261.44us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1734.04ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Control File</td><td align="right" headers="Requests Total" class='awrnclb'>8,904</td><td align="right" headers="Requests IOs/s" class='awrnc'>13.47</td><td align="right" headers="Requests Reads/s" class='awrnc'>11.57</td><td align="right" headers="Requests Writes/s" class='awrnc'>1.90</td><td align="right" headers="MB Total" class='awrnclb'>139</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.21</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.18</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.03</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>122.12us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Temp File</td><td align="right" headers="Requests Total" class='awrclb'>491</td><td align="right" headers="Requests IOs/s" class='awrc'>0.74</td><td align="right" headers="Requests Reads/s" class='awrc'>0.37</td><td align="right" headers="Requests Writes/s" class='awrc'>0.37</td><td align="right" headers="MB Total" class='awrclb'>14</td><td align="right" headers="MB IOMB/s" class='awrc'>0.02</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.01</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.01</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>21.01us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1.00ms</td></tr>
<tr><td align="right" scope="row" class='awrnct'>1</td><td class='awrnct'>Total</td><td align="right" headers="Requests Total" class='awrnclbt'>17,163,727</td><td align="right" headers="Requests IOs/s" class='awrnct'>25,974.79</td><td align="right" headers="Requests Reads/s" class='awrnct'>22,307.59</td><td align="right" headers="Requests Writes/s" class='awrnct'>3,667.20</td><td align="right" headers="MB Total" class='awrnclbt'>138,646</td><td align="right" headers="MB IOMB/s" class='awrnct'>209.82</td><td align="right" headers="MB ReadMB/s" class='awrnct'>176.61</td><td align="right" headers="MB WriteMB/s" class='awrnct'>33.22</td><td align="right" headers="ServiceTime Small|Read" class='awrnclbt'>595.74us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrbt'>1721.36ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Data File</td><td align="right" headers="Requests Total" class='awrclb'>17,115,661</td><td align="right" headers="Requests IOs/s" class='awrc'>25,902.05</td><td align="right" headers="Requests Reads/s" class='awrc'>22,299.00</td><td align="right" headers="Requests Writes/s" class='awrc'>3,603.05</td><td align="right" headers="MB Total" class='awrclb'>135,050</td><td align="right" headers="MB IOMB/s" class='awrc'>204.38</td><td align="right" headers="MB ReadMB/s" class='awrc'>174.23</td><td align="right" headers="MB WriteMB/s" class='awrc'>30.15</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>595.88us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Log File</td><td align="right" headers="Requests Total" class='awrnclb'>43,265</td><td align="right" headers="Requests IOs/s" class='awrnc'>65.48</td><td align="right" headers="Requests Reads/s" class='awrnc'>2.52</td><td align="right" headers="Requests Writes/s" class='awrnc'>62.95</td><td align="right" headers="MB Total" class='awrnclb'>3,520</td><td align="right" headers="MB IOMB/s" class='awrnc'>5.33</td><td align="right" headers="MB ReadMB/s" class='awrnc'>2.28</td><td align="right" headers="MB WriteMB/s" class='awrnc'>3.04</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>289.31us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>1721.36ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Control File</td><td align="right" headers="Requests Total" class='awrclb'>4,579</td><td align="right" headers="Requests IOs/s" class='awrc'>6.93</td><td align="right" headers="Requests Reads/s" class='awrc'>5.90</td><td align="right" headers="Requests Writes/s" class='awrc'>1.03</td><td align="right" headers="MB Total" class='awrclb'>72</td><td align="right" headers="MB IOMB/s" class='awrc'>0.11</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.09</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.02</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>117.27us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Temp File</td><td align="right" headers="Requests Total" class='awrnclb'>222</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.34</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.17</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.17</td><td align="right" headers="MB Total" class='awrnclb'>4</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.01</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.00</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>9.01us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>2</td><td class='awrct'>Total</td><td align="right" headers="Requests Total" class='awrclbt'>13,910,544</td><td align="right" headers="Requests IOs/s" class='awrct'>21,051.58</td><td align="right" headers="Requests Reads/s" class='awrct'>18,029.40</td><td align="right" headers="Requests Writes/s" class='awrct'>3,022.18</td><td align="right" headers="MB Total" class='awrclbt'>112,544</td><td align="right" headers="MB IOMB/s" class='awrct'>170.32</td><td align="right" headers="MB ReadMB/s" class='awrct'>143.09</td><td align="right" headers="MB WriteMB/s" class='awrct'>27.23</td><td align="right" headers="ServiceTime Small|Read" class='awrclbt'>571.46us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrbt'>1740.04ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Data File</td><td align="right" headers="Requests Total" class='awrnclb'>13,865,315</td><td align="right" headers="Requests IOs/s" class='awrnc'>20,983.13</td><td align="right" headers="Requests Reads/s" class='awrnc'>18,021.11</td><td align="right" headers="Requests Writes/s" class='awrnc'>2,962.02</td><td align="right" headers="MB Total" class='awrnclb'>109,369</td><td align="right" headers="MB IOMB/s" class='awrnc'>165.51</td><td align="right" headers="MB ReadMB/s" class='awrnc'>140.80</td><td align="right" headers="MB WriteMB/s" class='awrnc'>24.71</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>571.61us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Log File</td><td align="right" headers="Requests Total" class='awrclb'>40,635</td><td align="right" headers="Requests IOs/s" class='awrc'>61.50</td><td align="right" headers="Requests Reads/s" class='awrc'>2.41</td><td align="right" headers="Requests Writes/s" class='awrc'>59.08</td><td align="right" headers="MB Total" class='awrclb'>3,098</td><td align="right" headers="MB IOMB/s" class='awrc'>4.69</td><td align="right" headers="MB ReadMB/s" class='awrc'>2.19</td><td align="right" headers="MB WriteMB/s" class='awrc'>2.50</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>231.29us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1747.25ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Control File</td><td align="right" headers="Requests Total" class='awrnclb'>4,325</td><td align="right" headers="Requests IOs/s" class='awrnc'>6.55</td><td align="right" headers="Requests Reads/s" class='awrnc'>5.68</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.87</td><td align="right" headers="MB Total" class='awrnclb'>67</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.10</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.09</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.01</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>127.17us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Temp File</td><td align="right" headers="Requests Total" class='awrclb'>269</td><td align="right" headers="Requests IOs/s" class='awrc'>0.41</td><td align="right" headers="Requests Reads/s" class='awrc'>0.20</td><td align="right" headers="Requests Writes/s" class='awrc'>0.21</td><td align="right" headers="MB Total" class='awrclb'>10</td><td align="right" headers="MB IOMB/s" class='awrc'>0.02</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.01</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.01</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>31.50us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1.00ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12070"></a>
<h3 class="awr">Segment Statistics (Global)</h3>
<ul>
<li class="awr"> % Total shows % of statistic for each segment compared to the global cluster-wide total     (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants) </li>
<li class="awr"> % Capture shows % of statistic for each segment compared to the  total captured     by AWR for all segments during the snapshot interval</li>
<li class="awr">Captured Segments account for	15.5% of Total Logical Reads:	   32,501,639</li>
<li class="awr">Captured Segments account for	16.1% of Total Physical Reads:	    27,383,265</li>
<li class="awr">Captured Segments account for	16.1% of Total Physical Read Requests:	    27,382,135</li>
<li class="awr">Captured Segments account for	16.1% of Total UnOptimized Read Requests:      27,382,135</li>
<li class="awr">Captured Segments account for	 0.0% of Total Optimized  Read Requests:	       1</li>
<li class="awr">Captured Segments account for	 0.0% of Total Direct Physical Reads:		    8</li>
<li class="awr">Captured Segments account for	15.9% of Total Physical Writes:       4,644,765</li>
<li class="awr">Captured Segments account for	16.5% of Total Physical Write Requests:       4,341,711</li>
<li class="awr">Captured Segments account for	51.5% of Total Direct Physical Writes:		 3,138</li>
<li class="awr">Captured Segments account for	 0.0% of Total Table Scans:		 16</li>
<li class="awr">Captured Segments account for	 7.4% of Total CR Blocks Received:	    51,615</li>
<li class="awr">Captured Segments account for	11.3% of Total Current Blocks Received: 	 40,557</li>
<li class="awr">Captured Segments account for	 6.2% of Total CR Blocks Served:	  62,434</li>
<li class="awr">Captured Segments account for	11.2% of Total Current Blocks Served:	       40,802</li>
<li class="awr">Captured Segments account for	16.1% of Total Global Cache Remote Grants:	13,860,112</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="Segment Statistics (Global). . % Total shows % of statistic for each segment compared to the global cluster-wide total (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants). % Capture shows % of statistic for each segment compared to the total captured by AWR for all segments during the snapshot interval"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Value</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">%Capture</th></tr>
<tr><td class='awrc'>db block changes</td><td class='awrc'>USER52</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78287</td><td align="right" class='awrc'>78289</td><td align="right" class='awrc'>11,584</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>20.51</td></tr>
<tr><td class='awrnc'><div class="hidden">db block changes</div></td><td class='awrnc'>USER165</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78848</td><td align="right" class='awrnc'>78845</td><td align="right" class='awrnc'>11,328</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>20.06</td></tr>
<tr><td class='awrc'><div class="hidden">db block changes</div></td><td class='awrc'>USER250</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>79275</td><td align="right" class='awrc'>79279</td><td align="right" class='awrc'>11,248</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>19.92</td></tr>
<tr><td class='awrnc'><div class="hidden">db block changes</div></td><td class='awrnc'>USER170</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78854</td><td align="right" class='awrnc'>78881</td><td align="right" class='awrnc'>11,216</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>19.86</td></tr>
<tr><td class='awrc'><div class="hidden">db block changes</div></td><td class='awrc'>USER28</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78167</td><td align="right" class='awrc'>78171</td><td align="right" class='awrc'>11,104</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>19.66</td></tr>
<tr><td class='awrnc'>gc buffer busy</td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_PK</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_3889879926_119</td><td class='awrnc'>INDEX PARTITION</td><td align="right" class='awrnc'>84158</td><td align="right" class='awrnc'>84160</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>100.00</td></tr>
<tr><td class='awrc'>gc cr blocks received</td><td class='awrc'>USER144</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78744</td><td align="right" class='awrc'>78748</td><td align="right" class='awrc'>452</td><td align="right" class='awrc'>0.88</td><td align="right" class='awrc'>26.10</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>USER33</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78187</td><td align="right" class='awrnc'>78191</td><td align="right" class='awrnc'>426</td><td align="right" class='awrnc'>0.83</td><td align="right" class='awrnc'>24.60</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>USER58</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78314</td><td align="right" class='awrc'>78318</td><td align="right" class='awrc'>331</td><td align="right" class='awrc'>0.64</td><td align="right" class='awrc'>19.11</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_3889879926_119</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>84156</td><td align="right" class='awrnc'>84156</td><td align="right" class='awrnc'>270</td><td align="right" class='awrnc'>0.52</td><td align="right" class='awrnc'>15.59</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>USER7</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78058</td><td align="right" class='awrc'>78054</td><td align="right" class='awrc'>253</td><td align="right" class='awrc'>0.49</td><td align="right" class='awrc'>14.61</td></tr>
<tr><td class='awrnc'>gc cr blocks served</td><td class='awrnc'>USER144</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78744</td><td align="right" class='awrnc'>78748</td><td align="right" class='awrnc'>452</td><td align="right" class='awrnc'>0.72</td><td align="right" class='awrnc'>26.10</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>USER33</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78187</td><td align="right" class='awrc'>78191</td><td align="right" class='awrc'>426</td><td align="right" class='awrc'>0.68</td><td align="right" class='awrc'>24.60</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>USER58</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78314</td><td align="right" class='awrnc'>78318</td><td align="right" class='awrnc'>331</td><td align="right" class='awrnc'>0.53</td><td align="right" class='awrnc'>19.11</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_3889879926_119</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>84156</td><td align="right" class='awrc'>84156</td><td align="right" class='awrc'>270</td><td align="right" class='awrc'>0.43</td><td align="right" class='awrc'>15.59</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>USER7</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78058</td><td align="right" class='awrnc'>78054</td><td align="right" class='awrnc'>253</td><td align="right" class='awrnc'>0.41</td><td align="right" class='awrnc'>14.61</td></tr>
<tr><td class='awrc'>gc cu blocks received</td><td class='awrc'>USER33</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78187</td><td align="right" class='awrc'>78191</td><td align="right" class='awrc'>501</td><td align="right" class='awrc'>1.24</td><td align="right" class='awrc'>28.08</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks received</div></td><td class='awrnc'>USER144</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78744</td><td align="right" class='awrnc'>78748</td><td align="right" class='awrnc'>415</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>23.26</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks received</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_3889879926_119</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>84156</td><td align="right" class='awrc'>84156</td><td align="right" class='awrc'>386</td><td align="right" class='awrc'>0.95</td><td align="right" class='awrc'>21.64</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks received</div></td><td class='awrnc'>USER7</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78058</td><td align="right" class='awrnc'>78054</td><td align="right" class='awrnc'>266</td><td align="right" class='awrnc'>0.66</td><td align="right" class='awrnc'>14.91</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks received</div></td><td class='awrc'>USER52</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78287</td><td align="right" class='awrc'>78289</td><td align="right" class='awrc'>216</td><td align="right" class='awrc'>0.53</td><td align="right" class='awrc'>12.11</td></tr>
<tr><td class='awrnc'>gc cu blocks served</td><td class='awrnc'>USER33</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78187</td><td align="right" class='awrnc'>78191</td><td align="right" class='awrnc'>501</td><td align="right" class='awrnc'>1.23</td><td align="right" class='awrnc'>28.08</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks served</div></td><td class='awrc'>USER144</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78744</td><td align="right" class='awrc'>78748</td><td align="right" class='awrc'>415</td><td align="right" class='awrc'>1.02</td><td align="right" class='awrc'>23.26</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks served</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_3889879926_119</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>84156</td><td align="right" class='awrnc'>84156</td><td align="right" class='awrnc'>386</td><td align="right" class='awrnc'>0.95</td><td align="right" class='awrnc'>21.64</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks served</div></td><td class='awrc'>USER7</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78058</td><td align="right" class='awrc'>78054</td><td align="right" class='awrc'>266</td><td align="right" class='awrc'>0.65</td><td align="right" class='awrc'>14.91</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks served</div></td><td class='awrnc'>USER52</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78287</td><td align="right" class='awrnc'>78289</td><td align="right" class='awrnc'>216</td><td align="right" class='awrnc'>0.53</td><td align="right" class='awrnc'>12.11</td></tr>
<tr><td class='awrc'>gc remote grants</td><td class='awrc'>USER444</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80246</td><td align="right" class='awrc'>80248</td><td align="right" class='awrc'>34,157</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>20.26</td></tr>
<tr><td class='awrnc'><div class="hidden">gc remote grants</div></td><td class='awrnc'>USER165</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78848</td><td align="right" class='awrnc'>78845</td><td align="right" class='awrnc'>34,107</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>20.23</td></tr>
<tr><td class='awrc'><div class="hidden">gc remote grants</div></td><td class='awrc'>USER471</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80377</td><td align="right" class='awrc'>80379</td><td align="right" class='awrc'>33,811</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>20.05</td></tr>
<tr><td class='awrnc'><div class="hidden">gc remote grants</div></td><td class='awrnc'>USER462</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80324</td><td align="right" class='awrnc'>80338</td><td align="right" class='awrnc'>33,386</td><td align="right" class='awrnc'>0.24</td><td align="right" class='awrnc'>19.80</td></tr>
<tr><td class='awrc'><div class="hidden">gc remote grants</div></td><td class='awrc'>USER52</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78287</td><td align="right" class='awrc'>78289</td><td align="right" class='awrc'>33,167</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>19.67</td></tr>
<tr><td class='awrnc'>logical reads</td><td class='awrnc'>USER165</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78848</td><td align="right" class='awrnc'>78845</td><td align="right" class='awrnc'>79,216</td><td align="right" class='awrnc'>0.24</td><td align="right" class='awrnc'>20.80</td></tr>
<tr><td class='awrc'><div class="hidden">logical reads</div></td><td class='awrc'>USER52</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78287</td><td align="right" class='awrc'>78289</td><td align="right" class='awrc'>76,048</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrc'>19.97</td></tr>
<tr><td class='awrnc'><div class="hidden">logical reads</div></td><td class='awrnc'>USER250</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>79275</td><td align="right" class='awrnc'>79279</td><td align="right" class='awrnc'>75,552</td><td align="right" class='awrnc'>0.23</td><td align="right" class='awrnc'>19.84</td></tr>
<tr><td class='awrc'><div class="hidden">logical reads</div></td><td class='awrc'>USER170</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78854</td><td align="right" class='awrc'>78881</td><td align="right" class='awrc'>75,328</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrc'>19.78</td></tr>
<tr><td class='awrnc'><div class="hidden">logical reads</div></td><td class='awrnc'>USER249</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>79267</td><td align="right" class='awrnc'>79270</td><td align="right" class='awrnc'>74,640</td><td align="right" class='awrnc'>0.23</td><td align="right" class='awrnc'>19.60</td></tr>
<tr><td class='awrc'>physical reads</td><td class='awrc'>USER165</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78848</td><td align="right" class='awrc'>78845</td><td align="right" class='awrc'>67,579</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>20.28</td></tr>
<tr><td class='awrnc'><div class="hidden">physical reads</div></td><td class='awrnc'>USER444</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80246</td><td align="right" class='awrnc'>80248</td><td align="right" class='awrnc'>67,539</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>20.27</td></tr>
<tr><td class='awrc'><div class="hidden">physical reads</div></td><td class='awrc'>USER471</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80377</td><td align="right" class='awrc'>80379</td><td align="right" class='awrc'>66,652</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>20.01</td></tr>
<tr><td class='awrnc'><div class="hidden">physical reads</div></td><td class='awrnc'>USER462</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80324</td><td align="right" class='awrnc'>80338</td><td align="right" class='awrnc'>65,937</td><td align="right" class='awrnc'>0.24</td><td align="right" class='awrnc'>19.79</td></tr>
<tr><td class='awrc'><div class="hidden">physical reads</div></td><td class='awrc'>USER52</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78287</td><td align="right" class='awrc'>78289</td><td align="right" class='awrc'>65,449</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>19.65</td></tr>
<tr><td class='awrnc'>physical read requests</td><td class='awrnc'>USER165</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78848</td><td align="right" class='awrnc'>78845</td><td align="right" class='awrnc'>67,579</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>20.28</td></tr>
<tr><td class='awrc'><div class="hidden">physical read requests</div></td><td class='awrc'>USER444</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80246</td><td align="right" class='awrc'>80248</td><td align="right" class='awrc'>67,539</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>20.27</td></tr>
<tr><td class='awrnc'><div class="hidden">physical read requests</div></td><td class='awrnc'>USER471</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80377</td><td align="right" class='awrnc'>80379</td><td align="right" class='awrnc'>66,652</td><td align="right" class='awrnc'>0.24</td><td align="right" class='awrnc'>20.01</td></tr>
<tr><td class='awrc'><div class="hidden">physical read requests</div></td><td class='awrc'>USER462</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80324</td><td align="right" class='awrc'>80338</td><td align="right" class='awrc'>65,937</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>19.79</td></tr>
<tr><td class='awrnc'><div class="hidden">physical read requests</div></td><td class='awrnc'>USER52</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78287</td><td align="right" class='awrnc'>78289</td><td align="right" class='awrnc'>65,449</td><td align="right" class='awrnc'>0.24</td><td align="right" class='awrnc'>19.65</td></tr>
<tr><td class='awrc'>physical writes</td><td class='awrc'>USER165</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78848</td><td align="right" class='awrc'>78845</td><td align="right" class='awrc'>11,583</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>20.50</td></tr>
<tr><td class='awrnc'><div class="hidden">physical writes</div></td><td class='awrnc'>USER50</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78277</td><td align="right" class='awrnc'>78281</td><td align="right" class='awrnc'>11,454</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>20.27</td></tr>
<tr><td class='awrc'><div class="hidden">physical writes</div></td><td class='awrc'>USER462</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80324</td><td align="right" class='awrc'>80338</td><td align="right" class='awrc'>11,279</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>19.96</td></tr>
<tr><td class='awrnc'><div class="hidden">physical writes</div></td><td class='awrnc'>USER170</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78854</td><td align="right" class='awrnc'>78881</td><td align="right" class='awrnc'>11,134</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>19.70</td></tr>
<tr><td class='awrc'><div class="hidden">physical writes</div></td><td class='awrc'>USER174</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78897</td><td align="right" class='awrc'>78901</td><td align="right" class='awrc'>11,059</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>19.57</td></tr>
<tr><td class='awrnc'>physical writes direct</td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_3889879926_119</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>84156</td><td align="right" class='awrnc'>84156</td><td align="right" class='awrnc'>1,616</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>100.00</td></tr>
<tr><td class='awrc'>physical write requests</td><td class='awrc'>USER165</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78848</td><td align="right" class='awrc'>78845</td><td align="right" class='awrc'>11,217</td><td align="right" class='awrc'>0.26</td><td align="right" class='awrc'>20.47</td></tr>
<tr><td class='awrnc'><div class="hidden">physical write requests</div></td><td class='awrnc'>USER50</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78277</td><td align="right" class='awrnc'>78281</td><td align="right" class='awrnc'>11,140</td><td align="right" class='awrnc'>0.26</td><td align="right" class='awrnc'>20.33</td></tr>
<tr><td class='awrc'><div class="hidden">physical write requests</div></td><td class='awrc'>USER462</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80324</td><td align="right" class='awrc'>80338</td><td align="right" class='awrc'>10,938</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>19.96</td></tr>
<tr><td class='awrnc'><div class="hidden">physical write requests</div></td><td class='awrnc'>USER170</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>78854</td><td align="right" class='awrnc'>78881</td><td align="right" class='awrnc'>10,797</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>19.71</td></tr>
<tr><td class='awrc'><div class="hidden">physical write requests</div></td><td class='awrc'>USER174</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>78897</td><td align="right" class='awrc'>78901</td><td align="right" class='awrc'>10,694</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>19.52</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12083"></a>
<h3 class="awr">Library Cache Activity</h3>
<ul>
<li class="awr"> Summarized for all instances in the report </li>
<li class="awr"> &quot;Pct Misses&quot;  should be very low  </li>
</ul>
<table border="0" class="tdiff" summary="Library Cache Activity. . Summarized for all instances in the report. &quot;Pct Misses&quot; should be very low "><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Pin Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Reloads</th><th class="awrbg" scope="col">Invali- dations</th><th class="awrbg" scope="col">GES Lock Requests</th><th class="awrbg" scope="col">GES Pin Requests</th><th class="awrbg" scope="col">GES Pin Releases</th><th class="awrbg" scope="col">GES Inval Requests</th><th class="awrbg" scope="col">GES Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>ACCOUNT_STATUS</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>25.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>AUDIT POLICY</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>850</td><td align="right" class='awrc'>0.71</td><td align="right" class='awrc'>2,359</td><td align="right" class='awrc'>1.95</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>449</td><td align="right" class='awrc'>2,263</td><td align="right" class='awrc'>2,263</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>CLUSTER</td><td align="right" class='awrnc'>275</td><td align="right" class='awrnc'>0.73</td><td align="right" class='awrnc'>287</td><td align="right" class='awrnc'>0.70</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>287</td><td align="right" class='awrnc'>287</td><td align="right" class='awrnc'>287</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>DBLINK</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>25.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>EDITION</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>HINTSET OBJECT</td><td align="right" class='awrc'>173</td><td align="right" class='awrc'>10.40</td><td align="right" class='awrc'>173</td><td align="right" class='awrc'>11.56</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>173</td><td align="right" class='awrc'>173</td><td align="right" class='awrc'>173</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>INDEX</td><td align="right" class='awrnc'>90</td><td align="right" class='awrnc'>4.44</td><td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>26.60</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>OBJECT ID</td><td align="right" class='awrc'>55</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>QUEUE</td><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SCHEMA</td><td align="right" class='awrc'>652</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>56</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA</td><td align="right" class='awrnc'>8,773</td><td align="right" class='awrnc'>20.31</td><td align="right" class='awrnc'>821,437</td><td align="right" class='awrnc'>0.54</td><td align="right" class='awrnc'>1,218</td><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA BUILD</td><td align="right" class='awrc'>1,986</td><td align="right" class='awrc'>34.09</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA STATS</td><td align="right" class='awrnc'>929</td><td align="right" class='awrnc'>99.25</td><td align="right" class='awrnc'>929</td><td align="right" class='awrnc'>99.25</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TABLE/PROCEDURE</td><td align="right" class='awrc'>282,810</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>30,395</td><td align="right" class='awrc'>8.97</td><td align="right" class='awrc'>831</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>289,227</td><td align="right" class='awrc'>21,062</td><td align="right" class='awrc'>21,062</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TRANSFORMATION</td><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TRIGGER</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>40.00</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>40.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="633"></a>
<h2 class="awr">
Memory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12074">PGA Aggregate Target Statistics</a></li>
<li class="awr"><a class="awr" href="#12075">Process Memory Summary</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12074"></a>
<h3 class="awr">PGA Aggregate Target Statistics</h3>
<ul>
<li class="awr"> all stats are reported in MegaBytes</li>
</ul>
<table border="0" class="tdiff" summary="PGA Aggregate Target Statistics. . all stats are reported in MegaBytes"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="PGAAggrTarget">PGA Aggr Target</th>
<th class="awrbg" colspan=" 2" id="AutoPGATarget">Auto PGA Target</th>
<th class="awrbg" colspan=" 2" id="PGAMemAlloc">PGA Mem Alloc</th>
<th class="awrbg" colspan=" 2" id="AutoWorkareas">Auto Workareas</th>
<th class="awrbg" colspan=" 2" id="ManualWorkarea">Manual Workarea</th>
<th class="awrbg" colspan=" 2" id="GlobalMemBound">Global Mem Bound</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="PGAAggrTarget Begin" class='awrclb'>3,215.00</td><td align="right" headers="PGAAggrTarget End" class='awrc'>3,215.00</td><td align="right" headers="AutoPGATarget Begin" class='awrclb'>200.94</td><td align="right" headers="AutoPGATarget End" class='awrc'>1,197.87</td><td align="right" headers="PGAMemAlloc Begin" class='awrclb'>4,096.43</td><td align="right" headers="PGAMemAlloc End" class='awrc'>2,197.13</td><td align="right" headers="AutoWorkareas Begin" class='awrclb'>0.00</td><td align="right" headers="AutoWorkareas End" class='awrc'>0.00</td><td align="right" headers="ManualWorkarea Begin" class='awrclb'>0.00</td><td align="right" headers="ManualWorkarea End" class='awrc'>0.00</td><td align="right" headers="GlobalMemBound Begin" class='awrclb'>321.49</td><td align="right" headers="GlobalMemBound End" class='awrcrb'>321.49</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="PGAAggrTarget Begin" class='awrnclb'>3,215.00</td><td align="right" headers="PGAAggrTarget End" class='awrnc'>3,215.00</td><td align="right" headers="AutoPGATarget Begin" class='awrnclb'>200.94</td><td align="right" headers="AutoPGATarget End" class='awrnc'>1,123.07</td><td align="right" headers="PGAMemAlloc Begin" class='awrnclb'>4,190.84</td><td align="right" headers="PGAMemAlloc End" class='awrnc'>2,327.16</td><td align="right" headers="AutoWorkareas Begin" class='awrnclb'>0.00</td><td align="right" headers="AutoWorkareas End" class='awrnc'>0.00</td><td align="right" headers="ManualWorkarea Begin" class='awrnclb'>0.00</td><td align="right" headers="ManualWorkarea End" class='awrnc'>0.00</td><td align="right" headers="GlobalMemBound Begin" class='awrnclb'>321.49</td><td align="right" headers="GlobalMemBound End" class='awrncrb'>321.49</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#633">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12075"></a>
<h3 class="awr">Process Memory Summary</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap I#: Instance number  </li>
<li class="awr"> Max Alloc is Maximum PGA allocation size at snapshot time </li>
<li class="awr"> Hist Max Alloc is the Historical Max Allocation for still-connected processes </li>
<li class="awr"> ordered by instance, Begin/End snapshot, Alloc (MB) </li>
</ul>
<table border="0" class="tdiff" summary="Process Memory Summary. . B: Begin Snap E: End Snap I#: Instance number . Max Alloc is Maximum PGA allocation size at snapshot time. Hist Max Alloc is the Historical Max Allocation for still-connected processes. ordered by instance, Begin/End snapshot, Alloc (MB) "><tr><th class="awrbg" scope="col">I#</th><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Category</th><th class="awrbg" scope="col">Alloc (MB)</th><th class="awrbg" scope="col">Used (MB)</th><th class="awrbg" scope="col">Avg Alloc (MB)</th><th class="awrbg" scope="col">Std Dev Alloc (MB)</th><th class="awrbg" scope="col">Max Alloc (MB)</th><th class="awrbg" scope="col">Hist Max Alloc (MB)</th><th class="awrbg" scope="col">Num Proc</th><th class="awrbg" scope="col">Num Alloc</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>530.69</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.91</td><td align="right" class='awrc'>2.39</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>278</td><td align="right" class='awrc'>278</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>2357.83</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>5.31</td><td align="right" class='awrnc'>4.41</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>444</td><td align="right" class='awrnc'>444</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>124.28</td><td align="right" class='awrc'>117.63</td><td align="right" class='awrc'>0.28</td><td align="right" class='awrc'>0.26</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>442</td><td align="right" class='awrc'>378</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>60.18</td><td align="right" class='awrnc'>45.81</td><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>0.32</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>383</td><td align="right" class='awrnc'>295</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>3072.97</td><td align="right" class='awrc'>163.43</td><td align="right" class='awrc'>7.66</td><td align="right" class='awrc'>7.38</td><td align="right" class='awrc'>70</td><td align="right" class='awrc'>68</td><td align="right" class='awrc'>1547</td><td align="right" class='awrc'>1395</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>169.44</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2.73</td><td align="right" class='awrnc'>6.56</td><td align="right" class='awrnc'>43</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>62</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>992.57</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5.14</td><td align="right" class='awrc'>6.72</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>193</td><td align="right" class='awrc'>193</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>6.68</td><td align="right" class='awrnc'>1.91</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>191</td><td align="right" class='awrnc'>127</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>7.37</td><td align="right" class='awrc'>5.81</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>133</td><td align="right" class='awrc'>60</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>1176.06</td><td align="right" class='awrnc'>7.72</td><td align="right" class='awrnc'>7.97</td><td align="right" class='awrnc'>13.64</td><td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>70</td><td align="right" class='awrnc'>579</td><td align="right" class='awrnc'>442</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>559.94</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.99</td><td align="right" class='awrc'>3.20</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>282</td><td align="right" class='awrc'>282</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>2323.03</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>5.11</td><td align="right" class='awrnc'>4.90</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>455</td><td align="right" class='awrnc'>455</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>138.01</td><td align="right" class='awrc'>128.76</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>0.33</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>453</td><td align="right" class='awrc'>389</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>136.67</td><td align="right" class='awrnc'>125.17</td><td align="right" class='awrnc'>0.35</td><td align="right" class='awrnc'>0.47</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>394</td><td align="right" class='awrnc'>316</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>3157.65</td><td align="right" class='awrc'>253.93</td><td align="right" class='awrc'>7.74</td><td align="right" class='awrc'>8.90</td><td align="right" class='awrc'>78</td><td align="right" class='awrc'>71</td><td align="right" class='awrc'>1584</td><td align="right" class='awrc'>1442</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>200.25</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>3.08</td><td align="right" class='awrnc'>6.87</td><td align="right" class='awrnc'>43</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>65</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>1082.22</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5.61</td><td align="right" class='awrc'>7.77</td><td align="right" class='awrc'>51</td><td align="right" class='awrc'>51</td><td align="right" class='awrc'>193</td><td align="right" class='awrc'>193</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>13.10</td><td align="right" class='awrnc'>5.44</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.36</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>191</td><td align="right" class='awrnc'>127</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>7.66</td><td align="right" class='awrc'>5.41</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>132</td><td align="right" class='awrc'>56</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>1303.23</td><td align="right" class='awrnc'>10.85</td><td align="right" class='awrnc'>8.81</td><td align="right" class='awrnc'>15.16</td><td align="right" class='awrnc'>98</td><td align="right" class='awrnc'>76</td><td align="right" class='awrnc'>581</td><td align="right" class='awrnc'>441</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#633">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="638"></a>
<h2 class="awr">
Supplemental Information
</h2>
<ul>
<li class="awr"><a class="awr" href="#12080">init.ora Parameters</a></li>
<li class="awr"><a class="awr" href="#12084">init.ora Multi-valued Parameters</a></li>
<li class="awr"><a class="awr" href="#99997">Complete List of SQL Text</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12080"></a>
<h3 class="awr">init.ora Parameters</h3>
<ul>
<li class="awr"> '*' indicates same value across all instances</li>
</ul>
<table border="0" class="tdiff" summary="This table displays values for init.ora parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>_ipddb_enable</td><td class='awrc'>*</td><td class='awrc'>TRUE</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>audit_file_dest</td><td class='awrnc'>*</td><td class='awrnc'>/u01/app/oracle/admin/p60sdb/adump</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>audit_trail</td><td class='awrc'>*</td><td class='awrc'>DB</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>cluster_database</td><td class='awrnc'>*</td><td class='awrnc'>TRUE</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>compatible</td><td class='awrc'>*</td><td class='awrc'>19.0.0</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>control_files</td><td class='awrnc'>*</td><td class='awrnc'>+P60S/P60SDB/CONTROLFILE/current.267.1031675639,	+FRA/P60SDB/CONTROLFILE/current.270.1031675639</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_block_size</td><td class='awrc'>*</td><td class='awrc'>8192</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_create_file_dest</td><td class='awrnc'>*</td><td class='awrnc'>+P60S</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_domain</td><td class='awrc'>*</td><td class='awrc'>example.com</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_name</td><td class='awrnc'>*</td><td class='awrnc'>p60sdb</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_recovery_file_dest</td><td class='awrc'>*</td><td class='awrc'>+FRA</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_recovery_file_dest_size</td><td class='awrnc'>*</td><td class='awrnc'>137438953472</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>diagnostic_dest</td><td class='awrc'>*</td><td class='awrc'>/u01/app/oracle</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>dispatchers</td><td class='awrnc'>*</td><td class='awrnc'>(PROTOCOL=TCP) (SERVICE=p60sdbXDB)</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>instance_number</td><td class='awrc'>1</td><td class='awrc'>1</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">instance_number</div></td><td class='awrnc'>2</td><td class='awrnc'>2</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>listener_networks</td><td class='awrc'>*</td><td class='awrc'></td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>local_listener</td><td class='awrnc'>1</td><td class='awrnc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.11)(PORT=1522))</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'><div class="hidden">local_listener</div></td><td class='awrc'>2</td><td class='awrc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.12)(PORT=1522))</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>nls_language</td><td class='awrnc'>*</td><td class='awrnc'>AMERICAN</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>nls_territory</td><td class='awrc'>*</td><td class='awrc'>AMERICA</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>open_cursors</td><td class='awrnc'>*</td><td class='awrnc'>300</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>pga_aggregate_target</td><td class='awrc'>*</td><td class='awrc'>3371171840</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>processes</td><td class='awrnc'>*</td><td class='awrnc'>640</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>remote_listener</td><td class='awrc'>*</td><td class='awrc'>mcracpoc-scan.example.com:1521</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>remote_login_passwordfile</td><td class='awrnc'>*</td><td class='awrnc'>EXCLUSIVE</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>sga_max_size</td><td class='awrc'>*</td><td class='awrc'>236223201280</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>sga_target</td><td class='awrnc'>*</td><td class='awrnc'>42949672960</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>thread</td><td class='awrc'>1</td><td class='awrc'>1</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">thread</div></td><td class='awrnc'>2</td><td class='awrnc'>2</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>undo_tablespace</td><td class='awrc'>1</td><td class='awrc'>UNDOTBS1</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">undo_tablespace</div></td><td class='awrnc'>2</td><td class='awrnc'>UNDOTBS2</td><td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12084"></a>
<h3 class="awr">init.ora Multi-valued Parameters</h3>
<ul>
<li class="awr"> This section only displays parameters that have more one value </li>
<li class="awr"> '*' indicates same value across all instances </li>
<li class="awr"> '(NULL)' indicates that the  parameter value was not set </li>
<li class="awr"> A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot</li>
</ul>
<table border="0" class="tdiff" summary="init.ora Multi-valued Parameters. . This section only displays parameters that have more one value. '*' indicates same value across all instances. '(NULL)' indicates that the parameter value was not set. A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td class='awrc'>control_files</td><td class='awrc'>*</td><td class='awrc'>+FRA/P60SDB/CONTROLFILE/current.270.1031675639</td><td class='awrc'></td></tr>
<tr><td class='awrnc'><div class="hidden">control_files</div></td><td class='awrnc'>*</td><td class='awrnc'>+P60S/P60SDB/CONTROLFILE/current.267.1031675639</td><td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="99997"></a>
<p />
<h3 class="awr">Complete List of SQL Text</h3><p />
<table border="0" class="tdiff" summary="This table displays the text of the SQL statements which have been
      referred to in the report">
<tr><th class="awrbg" scope="col">SQL Id</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="0sbbcuruzd66f"></a>0sbbcuruzd66f</td><td class='awrc'><pre_sqltext class="awr">select /*+ rule */ bucket_cnt,  row_cnt,  cache_cnt,  null_cnt,  timestamp#,  sample_size,  minimum,  maximum,  distcnt,  lowval,	hival,	density,  col#,  spare1,  spare2,  avgcln,  minimum_enc,  maximum_enc from hist_head$ where obj#=:1 and intcol#=:2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="1hh6k5cdprk6r"></a>1hh6k5cdprk6r</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '471';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="1ksjxx805vj29"></a>1ksjxx805vj29</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '168';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="24djtk7r8fz33"></a>24djtk7r8fz33</td><td class='awrnc'><pre_sqltext class="awr">update svcobj_access$ set accesses = :5,  inc_no = :6 where name = :1 AND pdb = :2 AND tsn = :3 AND objid = :4</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="2p9fv35c7zxtg"></a>2p9fv35c7zxtg</td><td class='awrc'><pre_sqltext class="awr">select /* KSXM:LOAD_DML_INF *//*+ leading(o) index(m) use_nl(m) */ 	   nvl(m.inserts,  0) ins,  nvl(m.updates,  0) upd,  nvl(m.deletes,  0) del,	       nvl(m.drop_segments,  0) dropseg,  nvl(m.flags,	0) flags,			 nvl(rowcnt,  0) rowcnt,  o.pobjn pobjn 					 from									       (select :objn objn,  0 pobjn,  rowcnt						from tab$ t								      where t.obj# = :objn							    union all									  select :objn objn,  tp.bo# pobjn,  rowcnt					  from tabpart$ tp
	where tp.obj# = :objn							      union all 								    select :objn objn,	tcp.bo# pobjn,	rowcnt					    from tabcompart$ tcp							  where tcp.obj# = :objn							union all								      select :objn objn,  tsp.pobj# pobjn,  rowcnt				      from tabsubpart$ tsp							    where tsp.obj# = :objn) o,	sys.mon_mods_all$ m				  where o.objn = m.obj#(+) and rownum &lt; 2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="35dumc2tpr9dv"></a>35dumc2tpr9dv</td><td class='awrnc'><pre_sqltext class="awr">UPDATE CF1 SET C2 = :B3 ,  C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 )) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3ga2c5w22k8p4"></a>3ga2c5w22k8p4</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '52';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3q5nfyq3x1gu4"></a>3q5nfyq3x1gu4</td><td class='awrnc'><pre_sqltext class="awr">INSERT /*+ APPEND */ INTO cf2 SELECT * FROM user1.cf2 ORDER BY DBMS_RANDOM.VALUE()</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="58vuprsfnw7af"></a>58vuprsfnw7af</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '65';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="59u1h8q0dn7kr"></a>59u1h8q0dn7kr</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '75';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="5v7mdgpz8yna4"></a>5v7mdgpz8yna4</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '250';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="87gaftwrm2h68"></a>87gaftwrm2h68</td><td class='awrnc'><pre_sqltext class="awr">select o.owner#, o.name, o.namespace, o.remoteowner, o.linkname, o.subname from obj$ o where o.obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="96mhm2vpjm2m8"></a>96mhm2vpjm2m8</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '454';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9tgj4g8y4rwy8"></a>9tgj4g8y4rwy8</td><td class='awrnc'><pre_sqltext class="awr">select type#, blocks, extents, minexts, maxexts, extsize, extpct, user#, iniexts, NVL(lists, 65535), NVL(groups, 65535), cachehint, hwmincr,  NVL(spare1, 0), NVL(scanhint, 0), NVL(bitmapranges, 0) from seg$ where ts#=:1 and file#=:2 and block#=:3</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9yv5dwv8k0awg"></a>9yv5dwv8k0awg</td><td class='awrc'><pre_sqltext class="awr">WITH MONITOR_DATA AS (SELECT INST_ID,  KEY,  NVL2(PX_QCSID,  NULL,  STATUS) STATUS,  FIRST_REFRESH_TIME,  LAST_REFRESH_TIME,  REFRESH_COUNT,  PROCESS_NAME,  SID,	SQL_ID,  SQL_EXEC_START,  SQL_EXEC_ID,	DBOP_NAME,  DBOP_EXEC_ID,  SQL_PLAN_HASH_VALUE,  SQL_FULL_PLAN_HASH_VALUE,  SESSION_SERIAL#,  SQL_TEXT,  PX_SERVER#,  PX_SERVER_GROUP,	PX_SERVER_SET,	PX_QCINST_ID,  PX_QCSID,  CASE WHEN ELAPSED_TIME &lt; (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) THEN (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) ELSE ELAPSED_TIME END ELAPSED_TIME,  QUEUING_TIME,  CPU_TIME,  APPLICATION_WAIT_TIME,  CONCURRENCY_WAIT_TIME,  CLUSTER_WAIT_TIME,	USER_IO_WAIT_TIME,  CASE WHEN ELAPSED_TIME &lt; (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+
 CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) THEN 0 ELSE ELAPSED_TIME - (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) END OTHER_WAIT_TIME,  PLSQL_EXEC_TIME,  JAVA_EXEC_TIME,  FETCHES,	BUFFER_GETS,  IO_INTERCONNECT_BYTES IO_INTER_BYTES,  PHYSICAL_READ_REQUESTS READ_REQS,	PHYSICAL_READ_BYTES READ_BYTES,  PHYSICAL_WRITE_REQUESTS WRITE_REQS,  PHYSICAL_WRITE_BYTES WRITE_BYTES,  NVL(PHYSICAL_READ_BYTES,  0) + NVL(PHYSICAL_WRITE_BYTES,  0) IO_BYTES,  NVL(PHYSICAL_READ_REQUESTS,  0) + NVL(PHYSICAL_WRITE_REQUESTS,  0) IO_REQS,  IO_CELL_UNCOMPRESSED_BYTES IO_UNC_BYTES,	IO_CELL_OFFLOAD_ELIGIBLE_BYTES IO_ELIG_BYTES,  IO_CELL_OFFLOAD_RETURNED_BYTES IO_RET_BYTES,  USER# USERID,  USERNAME,  MODULE,	ACTION,  SERVICE_NAME,	CLIENT_IDENTIFIER,  CLIENT_INFO,  PROGRAM,  PLSQL_OBJECT_ID PL_OID,  PLSQL_SUBPROGRAM_ID PL_PROGID,  PLSQL_ENTRY_OBJECT_ID PL_ENTRY_OID,  PLSQL_ENTRY_SUBPROGRAM_ID PL_ENTRY_PROGID,  PX_MAXDOP MAX_DOP,  PX_IS_
CROSS_INSTANCE,  PX_MAXDOP_INSTANCES MAX_DOP_INSTANCES,  PX_SERVERS_REQUESTED SERVERS_REQUESTED,  PX_SERVERS_ALLOCATED SERVERS_ALLOCATED,  ERROR_NUMBER,  ERROR_FACILITY,  ERROR_MESSAGE,  NVL2(OTHER_XML,  'Y',  NULL) HAS_OTHER_XML,	NVL2(BINDS_XML,  'Y',  NULL) HAS_BINDS_XML,  NVL2(RM_CONSUMER_GROUP,  NVL2(RM_LAST_ACTION_TIME,  TO_CHAR(RM_LAST_ACTION_TIME,  :B12 ),	'00/00/0000 00:00:01') || XMLELEMENT( &quot;rminfo&quot;,  XMLATTRIBUTES( RM_LAST_ACTION AS &quot;rmlastact&quot;,  RM_LAST_ACTION_REASON AS &quot;rmlastreason&quot;,	TO_CHAR(RM_LAST_ACTION_TIME,  :B12 ) AS &quot;rmlasttime&quot;,  RM_CONSUMER_GROUP AS &quot;rmcg&quot;)).GETSTRINGVAL(),  '00/00/0000 00:00:00') RM_INFO,  CON_NAME,  CON_ID FROM GV$ALL_SQL_MONITOR MO1 WHERE MO1.INST_ID BETWEEN :B11 AND :B10 AND MO1.SQL_ID = NVL(:B9 ,  MO1.SQL_ID) AND MO1.SQL_EXEC_START = NVL(:B8 ,  MO1.SQL_EXEC_START) AND MO1.SQL_EXEC_ID = NVL(:B7 ,  MO1.SQL_EXEC_ID) OR (MO1.DBOP_NAME = NVL(:B6 ,  MO1.DBOP_NAME) AND MO1.DBOP_EXEC_ID = NVL(:B5
,  MO1.DBOP_EXEC_ID)) AND ((:B4 = 1 AND MO1.PX_QCSID IS NULL) OR (MO1.PX_SERVER_GROUP = NVL(:B3 ,  MO1.PX_SERVER_GROUP) AND MO1.PX_SERVER_SET = NVL(:B2 ,  MO1.PX_SERVER_SET) AND MO1.PX_SERVER# = NVL(:B1 ,  MO1.PX_SERVER#)))),  MONITOR_AGG AS (SELECT MAX_PX_QCSID,  MAX_KEY,  MAX_INST_ID,  MAX_SESSION_ID,  MAX_SESSION_SERIAL,  MAX_PX_DOP,  MAX_PX_DOP_INSTANCES,  MAX_PX_IS_CROSS_INSTANCE,  SUM_SERVERS_REQUESTED,  SUM_SERVERS_ALLOCATED,  DIST_INST_COUNT,	DIST_PX_GROUP_COUNT,  DIST_PX_SET_COUNT,  MAX_PLAN_HASH_VALUE,	MAX_FULL_PLAN_HASH_VALUE,  MAX_USERID,	MAX_PROGRAM,  MAX_USERNAME,  MAX_MODULE,  MAX_ACTION,  MAX_SERVICE_NAME,  MAX_CLIENT_ID,  MAX_CLIENT_INFO,  MAX_ERROR_NUMBER,  MAX_ERROR_FACILITY,  MAX_ERROR_MESSAGE,	QC_HAS_OTHER_XML,  QC_HAS_BINDS_XML,  MAX_PL_OID,  MAX_PL_PROGID,  MAX_PL_ENTRY_OID,  MAX_PL_ENTRY_PROGID,  MAX_SQL_ID,  MAX_SQL_EXEC_START,  MAX_SQL_EXEC_ID,	MAX_LAST_REFRESH_TIME,	MAX_DBOP_NAME,	MAX_DBOP_EXEC_ID,  CASE WHEN MAX_PL_OID IS NOT NULL THEN NVL((SELECT P.O
WNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,  NULL,  '',  '.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = MAX_PL_OID AND P.SUBPROGRAM_ID = MAX_PL_PROGID AND ROWNUM = 1),  'Unavailable') END MAX_PL_NAME,  CASE WHEN MAX_PL_ENTRY_OID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,	NULL,  '',  '.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = MAX_PL_ENTRY_OID AND P.SUBPROGRAM_ID = MAX_PL_ENTRY_PROGID AND ROWNUM = 1),  'Unavailable') END MAX_PL_ENTRY_NAME,  MAX_STATUS,	SUM_REFRESH_COUNT,  MIN_FIRST_REFRESH_TIME,  SQLMON_TEXT,  SUM_ELAPSED_TIME,  MAX_ELAPSED_TIME,  MAX_QUEUING_TIME,  SUM_CPU_TIME,  SUM_USER_IO_WAIT_TIME,  SUM_APPLICATION_WAIT_TIME,  SUM_CONCURRENCY_WAIT_TIME,  SUM_CLUSTER_WAIT_TIME,  SUM_PLSQL_EXEC_TIME,  SUM_JAVA_EXEC_TIME,  SUM_OTHER_WAIT_TIME,  SUM_FETCHES,  SUM_BUFFER_GETS,  SUM_READ_REQS,  SUM_READ_BYTES,  SUM_WRITE_REQS,  SUM_WRITE_BYTES,	SUM_IO_BYTES,  SUM_IO_INTER_BYTES,  SUM_
IO_UNC_BYTES,  SUM_IO_ELIG_BYTES,  SUM_IO_RET_BYTES,  DECODE(:B14 ,  1,  'db_name',  SYS_CONTEXT('userenv',  'db_unique_name')) DB_UNIQUE_NAME,  DECODE(:B14 ,	1,  'platform_name',  SYS.DBMS_UTILITY.PORT_STRING) PLATFORM_NAME,  DECODE(:B14 ,  1,  'host_name',  SYS_CONTEXT('userenv',  'server_host')) HOST_NAME,  AGG_RM_INFO MAX_RM_INFO,  MAX_CON_NAME,  DECODE(MAX_CON_ID,  0,  NULL,  MAX_CON_ID) MAX_CON_ID FROM (SELECT MAX(PX_QCSID) MAX_PX_QCSID,  MAX(CASE WHEN PX_QCSID IS NULL THEN KEY ELSE NULL END) MAX_KEY,  MAX(CASE WHEN PX_QCSID IS NULL THEN INST_ID ELSE NULL END) MAX_INST_ID,  MAX(CASE WHEN PX_QCSID IS NULL THEN SID ELSE NULL END) MAX_SESSION_ID,  MAX(CASE WHEN PX_QCSID IS NULL THEN SESSION_SERIAL# ELSE NULL END) MAX_SESSION_SERIAL,  MAX(MAX_DOP) MAX_PX_DOP,  MAX(MAX_DOP_INSTANCES) MAX_PX_DOP_INSTANCES,  MAX(PX_IS_CROSS_INSTANCE) MAX_PX_IS_CROSS_INSTANCE,  SUM(SERVERS_REQUESTED) SUM_SERVERS_REQUESTED,	SUM(SERVERS_ALLOCATED) SUM_SERVERS_ALLOCATED,  COUNT(DISTINCT INST_ID) DIST_INST
_COUNT,  COUNT(DISTINCT PX_SERVER_GROUP) DIST_PX_GROUP_COUNT,  COUNT(DISTINCT PX_SERVER_SET) DIST_PX_SET_COUNT,  MAX(SQL_PLAN_HASH_VALUE) MAX_PLAN_HASH_VALUE,	MAX(SQL_FULL_PLAN_HASH_VALUE) MAX_FULL_PLAN_HASH_VALUE,  MAX(USERID) MAX_USERID,  MAX(PROGRAM) MAX_PROGRAM,  MAX(USERNAME) MAX_USERNAME,  MAX(MODULE) MAX_MODULE,  MAX(ACTION) MAX_ACTION,  MAX(SERVICE_NAME) MAX_SERVICE_NAME,  MAX(CLIENT_IDENTIFIER) MAX_CLIENT_ID,	MAX(CLIENT_INFO) MAX_CLIENT_INFO,  MAX(ERROR_NUMBER) MAX_ERROR_NUMBER,	MAX(ERROR_FACILITY) MAX_ERROR_FACILITY,  MAX(ERROR_MESSAGE) MAX_ERROR_MESSAGE,	MAX(NVL2(PX_QCSID,  HAS_OTHER_XML,  NULL)) QC_HAS_OTHER_XML,  MAX(HAS_BINDS_XML) QC_HAS_BINDS_XML,  MAX(PL_OID) MAX_PL_OID,  MAX(PL_PROGID) MAX_PL_PROGID,  MAX(PL_ENTRY_OID) MAX_PL_ENTRY_OID,  MAX(PL_ENTRY_PROGID) MAX_PL_ENTRY_PROGID,  MAX(SQL_ID) MAX_SQL_ID,  MAX(SQL_EXEC_START) MAX_SQL_EXEC_START,  MAX(SQL_EXEC_ID) MAX_SQL_EXEC_ID,  MAX(LAST_REFRESH_TIME) MAX_LAST_REFRESH_TIME,	MAX(STATUS) MAX_STATUS,  SUM(REFRESH_COU
NT) SUM_REFRESH_COUNT,	MIN(FIRST_REFRESH_TIME) MIN_FIRST_REFRESH_TIME,  MAX(DBOP_NAME) MAX_DBOP_NAME,	MAX(DBOP_EXEC_ID) MAX_DBOP_EXEC_ID,  CASE WHEN :B13 = 0 THEN NULL ELSE MAX(SQL_TEXT) END SQLMON_TEXT,  SUM(ELAPSED_TIME) SUM_ELAPSED_TIME,  MAX(ELAPSED_TIME) MAX_ELAPSED_TIME,  MAX(QUEUING_TIME) MAX_QUEUING_TIME,  SUM(CPU_TIME) SUM_CPU_TIME,  SUM(USER_IO_WAIT_TIME) SUM_USER_IO_WAIT_TIME,  SUM(APPLICATION_WAIT_TIME) SUM_APPLICATION_WAIT_TIME,  SUM(CONCURRENCY_WAIT_TIME) SUM_CONCURRENCY_WAIT_TIME,	SUM(CLUSTER_WAIT_TIME) SUM_CLUSTER_WAIT_TIME,  SUM(PLSQL_EXEC_TIME) SUM_PLSQL_EXEC_TIME,  SUM(JAVA_EXEC_TIME) SUM_JAVA_EXEC_TIME,  SUM(OTHER_WAIT_TIME) SUM_OTHER_WAIT_TIME,  SUM(FETCHES) SUM_FETCHES,  SUM(BUFFER_GETS) SUM_BUFFER_GETS,  SUM(READ_REQS) SUM_READ_REQS,  SUM(READ_BYTES) SUM_READ_BYTES,  SUM(WRITE_REQS) SUM_WRITE_REQS,  SUM(WRITE_BYTES) SUM_WRITE_BYTES,	NVL(SUM(READ_BYTES),  0) + NVL(SUM(WRITE_BYTES),  0) SUM_IO_BYTES,  SUM(IO_INTER_BYTES) SUM_IO_INTER_BYTES,  SUM(IO_UNC_BYTES) S
UM_IO_UNC_BYTES,  SUM(IO_ELIG_BYTES) SUM_IO_ELIG_BYTES,  SUM(IO_RET_BYTES) SUM_IO_RET_BYTES,  MAX(RM_INFO) AGG_RM_INFO,  MAX(CON_NAME) MAX_CON_NAME,  MAX(CON_ID) MAX_CON_ID FROM MONITOR_DATA) MD),  ASH_DATA AS (SELECT AD0.INST_ID,	AD0.SESSION_ID,  AD0.PLAN_LINE_ID,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  AD0.ACTIVITY_BUCKET_NUM,  AD0.PLAN_ACTIVITY_BUCKET_NUM,  AD0.SQL,  AD0.TOP_LEVEL_SQL_ID,  AD0.DBOP_NAME,  AD0.IS_MONITORED_SQL,  AD0.IS_PX_SLAVE,  AD0.BUCKET_ACTIVITY_START,  AD0.ACTIVITY_START,	AD0.BUCKET_ACTIVITY_END,  AD0.ACTIVITY_END,  AD0.ACTIVITY_COUNT,  AD0.ACTIVITY_TYPE,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.IMQ_COUNT,  AD0.WAIT_COUNT,  AD0.CPU_COUNT,  AD0.OTHER_SQL_COUNT,  AD0.PX_SERVER_SET,	AD0.PX_DFO_ACTIVITY_COUNT,  AD0.DFO_MOST_ACTIVE_IID,  AD0.DFO_MOST_ACTIVE_SID,	(CASE WHEN AD0.DFO_MOST_ACTIVE_IID = AD0.INST_ID AND AD0.DFO_MOST_ACTIVE_SID = AD0.SESSION_ID AND (((AD0.PX_DFO_ACTIVITY_COUNT / AD0.DFO_MOST_ACTIVE_COUNT) &gt;= AD0.PX_DOP * 1.05) OR
((AD0.PX_DFO_ACTIVITY_COUNT / AD0.DFO_MOST_ACTIVE_COUNT) &lt;= AD0.PX_DOP *0.95)) AND (AD0.DFO_DURATION * 100) &gt; :B32 THEN AD0.ACTIVITY_COUNT ELSE NULL END) DFO_MOST_ACTIVE_COUNT,	AD0.BUCKET_DISTINCT_SAMPLES,  AD0.SQL_BUCKET_DISTINCT_SAMPLES,	CASE WHEN AD0.PX_SERVER_GROUP IS NULL AND AD0.IS_PX_SLAVE = 1 THEN 1 ELSE AD0.PX_SERVER_GROUP END PX_SERVER_GROUP,  AD0.PX_STEP_ID,  AD0.PX_DFO_PAIR_TYPE,  AD0.PX_DFO_PAIR_ID,  AD0.PX_STEP_ARG,  AD0.PX_DOP,	CASE WHEN AD0.PX_DOP IS NOT NULL AND AD0.PX_DOP &lt;&gt; AD0.PX_MIN_DOP AND AD0.PX_MIN_DOP != 0 THEN PX_MIN_DOP ELSE NULL END PX_MIN_DOP FROM (SELECT /*+ use_hash(ash) leading(mo) */ ASH.INST_ID,  ASH.IS_PX_SLAVE,  ASH.SESSION_ID,	ASH.PLAN_LINE_ID,  ASH.PLSQL_OBJECT_ID,  ASH.PLSQL_SUBPROGRAM_ID,  ASH.ACTIVITY_BUCKET_NUM,  ASH.PLAN_ACTIVITY_BUCKET_NUM,  ASH.SQL,  ASH.TOP_LEVEL_SQL_ID,  ASH.DBOP_NAME,  ASH.IS_MONITORED_SQL,  ASH.BUCKET_ACTIVITY_START,	ASH.ACTIVITY_START,  ASH.BUCKET_ACTIVITY_END,  ASH.ACTIVITY_END,  ASH.ACTIVITY_COUNT,  A
SH.ACTIVITY_TYPE,  ASH.OTHER_SQL_ACTIVITY_TYPE,  ASH.EVENT_NAME,  ASH.IMQ_COUNT,  ASH.WAIT_COUNT,  ASH.CPU_COUNT,  ASH.OTHER_SQL_COUNT,  MO.PX_SERVER_SET,  ASH.PX_DFO_ACTIVITY_COUNT,	TRUNC(ASH.MOST_ACTIVE_IN_DFO / 10000000000) DFO_MOST_ACTIVE_COUNT,  MOD(TRUNC(ASH.MOST_ACTIVE_IN_DFO / 1000000),  10000) DFO_MOST_ACTIVE_IID,  MOD(ASH.MOST_ACTIVE_IN_DFO,  1000000) DFO_MOST_ACTIVE_SID,  ASH.DFO_DURATION,  ASH.BUCKET_DISTINCT_SAMPLES,  ASH.SQL_BUCKET_DISTINCT_SAMPLES,  MO.PX_SERVER_GROUP,  ASH.PX_STEP_ID,  ASH.PX_DFO_PAIR_TYPE,  ASH.PX_DFO_PAIR_ID,	ASH.PX_STEP_ARG,  ASH.PX_DOP,  ASH.PX_MIN_DOP FROM (SELECT /*+ no_merge */ MD.INST_ID,	MD.SID,  MD.SESSION_SERIAL#,  MD.PX_SERVER_SET,  MD.PX_SERVER_GROUP FROM MONITOR_DATA MD WHERE MD.SID IS NOT NULL OR :B31 = 1) MO,  (SELECT /*+ no_merge */ GVTF.INST_ID,  GVTF.GLOBAL_SAMPLE_ID,  GVTF.IS_PX_SLAVE,  GVTF.SESSION_ID,	GVTF.PLAN_LINE_ID,  GVTF.PLSQL_OBJECT_ID,  GVTF.PLSQL_SUBPROGRAM_ID,  GVTF.ACTIVITY_BUCKET_NUM,  GVTF.PLAN_ACTIVITY_BUCKET_NUM,
 GVTF.SQL,  GVTF.TOP_LEVEL_SQL_ID,  GVTF.DBOP_NAME,  GVTF.IS_MONITORED_SQL,  GVTF.BUCKET_ACTIVITY_START,  GVTF.ACTIVITY_START,	GVTF.BUCKET_ACTIVITY_END,  GVTF.ACTIVITY_END,  GVTF.ACTIVITY_COUNT,  GVTF.ACTIVITY_TYPE,  GVTF.OTHER_SQL_ACTIVITY_TYPE,  GVTF.EVENT_NAME,  GVTF.IMQ_COUNT,  GVTF.WAIT_COUNT,  GVTF.CPU_COUNT,  GVTF.OTHER_SQL_COUNT,  MAX(GVTF.PER_SERVER_DFO_COUNT * 10000000000 + GVTF.INST_ID * 1000000 + GVTF.SESSION_ID) OVER(PARTITION BY GVTF.PX_DFO_PAIR_TYPE,	GVTF.PX_DFO_PAIR_ID) MOST_ACTIVE_IN_DFO,  SUM(GVTF.ACTIVITY_COUNT) OVER(PARTITION BY GVTF.PX_DFO_PAIR_TYPE,  GVTF.PX_DFO_PAIR_ID) PX_DFO_ACTIVITY_COUNT,  GVTF.DFO_DURATION,  GVTF.PX_STEP_ID,	GVTF.PX_DFO_PAIR_TYPE,	GVTF.PX_DFO_PAIR_ID,  GVTF.PX_STEP_ARG,  GVTF.PX_DOP,  GVTF.PX_MIN_DOP,  COUNT(DISTINCT GVTF.GLOBAL_SAMPLE_ID) OVER(PARTITION BY GVTF.ACTIVITY_BUCKET_NUM) BUCKET_DISTINCT_SAMPLES,  COUNT(DISTINCT GVTF.GLOBAL_SAMPLE_ID) OVER(PARTITION BY GVTF.SQL,	GVTF.ACTIVITY_BUCKET_NUM) SQL_BUCKET_DISTINCT_SAMPLES FROM TABLE
(SYS.GV$(CURSOR( (SELECT USERENV('INSTANCE') INST_ID,  ASH2.GLOBAL_SAMPLE_ID,  CASE WHEN :B30 = 1 AND :B27 &gt; 1 THEN BUCKET_NUM ELSE NULL END ACTIVITY_BUCKET_NUM,  CASE WHEN :B29 = 1 AND :B27 &gt; 1 THEN BUCKET_NUM ELSE NULL END PLAN_ACTIVITY_BUCKET_NUM,  ASH2.SQL,  ASH2.TOP_LEVEL_SQL_ID,  ASH2.DBOP_NAME,  ASH2.IS_MONITORED_SQL,  ASH2.PLAN_LINE_ID,  ASH2.PLSQL_OBJECT_ID,  ASH2.PLSQL_SUBPROGRAM_ID,  ASH2.ACTIVITY_TYPE,  ASH2.OTHER_SQL_ACTIVITY_TYPE,	ASH2.EVENT_NAME,  ASH2.IS_PX_SLAVE,  ASH2.SESSION_ID,  ASH2.PX_STEP_ID,  ASH2.PX_DFO_PAIR_TYPE,  ASH2.PX_DFO_PAIR_ID,  ASH2.PX_STEP_ARG,  CASE WHEN ASH2.PX_DFO_PAIR_ID IS NOT NULL THEN DECODE(ASH2.PX_DOP,  0,  :B28 ,  ASH2.PX_DOP) ELSE NULL END PX_DOP,  ASH2.PX_MIN_DOP,	:B20 + NUMTODSINTERVAL(:B26 * (ASH2.BUCKET_NUM-1),  'SECOND') BUCKET_ACTIVITY_START,  :B20 + NUMTODSINTERVAL( :B26 * ASH2.BUCKET_NUM - 1,  'SECOND') BUCKET_ACTIVITY_END,  ASH2.ACTIVITY_START,  ASH2.ACTIVITY_END,  ASH2.ACTIVITY_COUNT,  ASH2.IMQ_COUNT,  ASH2.WAIT_COUNT,  AS
H2.CPU_COUNT,  ASH2.OTHER_SQL_COUNT,  SUM(ASH2.ACTIVITY_COUNT) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE,  DECODE(ASH2.PX_DFO_PAIR_ID,  NULL,  NULL,  ASH2.SESSION_ID)) PER_SERVER_DFO_COUNT,  CEIL((MAX(ASH2.MAX_SAMPLE_DATE) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE) - MIN(ASH2.MIN_SAMPLE_DATE) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE)) * 3600 * 24) DFO_DURATION FROM (SELECT ASH1.BUCKET_NUM,  ASH1.GLOBAL_SAMPLE_ID,  ASH1.PLAN_LINE_ID,  ASH1.PLSQL_OBJECT_ID,  ASH1.PLSQL_SUBPROGRAM_ID,  ASH1.ACTIVITY_TYPE,  ASH1.OTHER_SQL_ACTIVITY_TYPE,  ASH1.EVENT_NAME,  ASH1.SESSION_ID,  ASH1.PX_STEP_ID,  ASH1.PX_STEP_ARG,  MAX(ASH1.SQL) SQL,  MAX(ASH1.IS_MONITORED_SQL) IS_MONITORED_SQL,  MAX(ASH1.PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  MAX(ASH1.PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  MIN(SAMPLE_DATE) MIN_SAMPLE_DATE,  MAX(SAMPLE_DATE) MAX_SAMPLE_DATE,  MAX(ASH1.IS_PX_SLAVE) IS_PX_SLAVE,  MAX(ASH1.PX_DOP) PX_DOP,	MIN(ASH1.PX_DOP) PX_MIN_DOP,  MIN(ASH1.S
AMPLE_DATE) ACTIVITY_START,  MAX(ASH1.SAMPLE_DATE) ACTIVITY_END,  COUNT(ASH1.SQL) ACTIVITY_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Cpu' AND ASH1.EVENT_NAME = 'in memory' THEN 1 ELSE NULL END) IMQ_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE != 'Other SQL Execution' AND ASH1.ACTIVITY_TYPE != 'Non SQL' AND ASH1.ACTIVITY_TYPE != 'Cpu' THEN 1 ELSE NULL END) WAIT_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Cpu' AND ASH1.EVENT_NAME IS NULL THEN 1 ELSE NULL END) CPU_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Other SQL Execution' AND ASH1.ACTIVITY_TYPE != 'Non SQL' THEN 1 ELSE NULL END) OTHER_SQL_COUNT,  MAX(ASH1.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  MAX(ASH1.DBOP_NAME) DBOP_NAME FROM ( SELECT (CASE WHEN :B27 &gt; 1 THEN (TRUNC(DELTA_TIME_SECONDS/ :B26 ) + 1) ELSE 1 END) BUCKET_NUM,  ASH00.SQL,  ASH00.SAMPLE_DATE,  NVL2(DUP.C2,  TRUNC(DELTA_TIME_SECONDS/ (:B25 )) + 1,  NULL) GLOBAL_SAMPLE_ID,  NVL2(DUP.C2,  NULL,	ASH00.IS_MONITORED_SQL) IS_MONITORED_SQL,  NVL2(DUP.C2,  NULL,	ASH00.IN
_INMEMORY_QUERY) IN_INMEMORY_QUERY,  NVL2(DUP.C2,  NULL,  ASH00.WAIT_CLASS) WAIT_CLASS,  NVL2(DUP.C2,  NULL,  ASH00.ACTIVITY_TYPE) ACTIVITY_TYPE,  NVL2(DUP.C2,  NULL,	ASH00.OTHER_SQL_ACTIVITY_TYPE) OTHER_SQL_ACTIVITY_TYPE,  NVL2(DUP.C2,  NULL,  ASH00.EVENT_NAME) EVENT_NAME,  NVL2(DUP.C2,  NULL,  ASH00.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  NVL2(DUP.C2,  NULL,  ASH00.DBOP_NAME) DBOP_NAME,  NVL2(DUP.C2,  NULL,  ASH00.IS_PX_SLAVE) IS_PX_SLAVE,  NVL2(DUP.C2,  NULL,  ASH00.SESSION_ID) SESSION_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLSQL_OBJECT_ID) PLSQL_OBJECT_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLSQL_SUBPROGRAM_ID) PLSQL_SUBPROGRAM_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLAN_LINE_ID) PLAN_LINE_ID,  NVL2(DUP.C2,  NULL,  ASH00.PX_STEP_ID) PX_STEP_ID,  NVL2(DUP.C2,  NULL,  ASH00.PX_STEP_ARG) PX_STEP_ARG,  NVL2(DUP.C2,  NULL,  ASH00.PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  NVL2(DUP.C2,  NULL,	ASH00.PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  NVL2(DUP.C2,  NULL,	ASH00.PX_DOP) PX_DOP FROM (SELECT 1 C1,  NULL C2 FROM V$DUAL UNI
ON ALL SELECT 1 C1,  1 C2 FROM V$DUAL) DUP,  (SELECT /*+ no_merge */ 1 C1,  ASH000.SAMPLE_DATE,  ASH000.IS_MONITORED_SQL,  ((EXTRACT(SECOND FROM(DELTA_TIME)) + EXTRACT(MINUTE FROM(DELTA_TIME)) * 60 + EXTRACT(HOUR FROM(DELTA_TIME)) * 3600 + EXTRACT(DAY FROM(DELTA_TIME)) * 86400)) DELTA_TIME_SECONDS,  ASH000.IN_INMEMORY_QUERY,	ASH000.WAIT_CLASS,  DECODE(ASH000.IS_MONITORED_SQL,  1,  NVL(ASH000.WAIT_CLASS,  'Cpu'),  DECODE(SQL_ID,  NULL,  'Non SQL',  'Other SQL Execution')) ACTIVITY_TYPE,  NVL(ASH000.WAIT_CLASS,  'Cpu') OTHER_SQL_ACTIVITY_TYPE,  DECODE(:B24 ,  1,  CASE WHEN ASH000.IS_MONITORED_SQL = 1 THEN NVL(ASH000.EVENT,  DECODE(ASH000.IN_INMEMORY_QUERY,  'Y',  'in memory',  ASH000.EVENT)) WHEN ASH000.SQL_ID IS NOT NULL THEN 'sql_id: ' || ASH000.SQL_ID WHEN ASH000.CALL_NAME IS NOT NULL THEN 'call: ' || ASH000.CALL_NAME ELSE 'anonymous: '|| ASH000.EVENT END,	NULL) EVENT_NAME,  CASE WHEN ASH000.IS_MONITORED_SQL = 1 AND (NVL(ASH000.SQL_ID,  :B9 ) = :B9 OR NVL(ASH000.DBOP_NAME,	:B6 ) =
:B6 ) THEN 'this' WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.SQL_ID IS NOT NULL AND ASH000.TOP_LEVEL_SQL_ID != ASH000.SQL_ID THEN ASH000.TOP_LEVEL_SQL_ID WHEN ASH000.SQL_ID IS NOT NULL THEN ASH000.SQL_ID ELSE NVL(CALL_NAME,  'anonymous') END SQL,  CASE WHEN ASH000.IS_PX_SLAVE = 0 AND (ASH000.SQL_ID IS NULL OR ASH000.TOP_LEVEL_SQL_ID != ASH000.SQL_ID) THEN ASH000.TOP_LEVEL_SQL_ID END TOP_LEVEL_SQL_ID,  ASH000.DBOP_NAME,  ASH000.IS_PX_SLAVE,  CASE WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.IS_MONITORED_SQL != 1 THEN 65536 ELSE ASH000.SESSION_ID END SESSION_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PLSQL_OBJECT_ID,  NULL) PLSQL_OBJECT_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PLSQL_SUBPROGRAM_ID,  NULL) PLSQL_SUBPROGRAM_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.SQL_PLAN_LINE_ID,  NULL) PLAN_LINE_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_STEP_ID,  NULL) PX_STEP_ID,  CASE WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.IS_MONITORED_SQL = 1 AND ASH000.PX_STEP_ID IN (1,  2,  3)
THEN ASH000.PX_STEP_ARG ELSE NULL END PX_DFO_PAIR_ID,  CASE WHEN ASH000.IS_PX_SLAVE = 0 OR ASH000.IS_MONITORED_SQL != 1 THEN NULL WHEN ASH000.PX_STEP_ID = 1 THEN 1 WHEN ASH000.PX_STEP_ID IN (2,  3) THEN 0 ELSE NULL END PX_DFO_PAIR_TYPE,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_STEP_ARG,	NULL) PX_STEP_ARG,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_DOP,  NULL) PX_DOP FROM (SELECT ASH0.*,  CASE WHEN ASH0.IS_TARGET_SQL = 1 OR (ASH0.IS_PX_SLAVE = 1 AND ((NVL(ASH0.TOP_LEVEL_SQL_ID,	ASH0.SQL_ID) IS NOT NULL AND NVL(ASH0.TOP_LEVEL_SQL_ID,  ASH0.SQL_ID) = :B9 ) OR (SQL_ID IS NULL AND :B23 = 'Y'))) THEN 1 ELSE 0 END IS_MONITORED_SQL FROM (SELECT (CASE WHEN (ASH.SQL_ID = :B9 AND ASH.SQL_EXEC_ID = :B7 AND ASH.SQL_EXEC_START = :B8 ) THEN 1 ELSE 0 END) IS_TARGET_SQL,  ASH.SQL_ID,  ASH.SQL_PLAN_LINE_ID,	ASH.PLSQL_OBJECT_ID,  ASH.PLSQL_SUBPROGRAM_ID,	ASH.TOP_LEVEL_SQL_ID,  DECODE(ASH.SQL_ID,  NULL,  ASH.TOP_LEVEL_CALL_NAME,  NULL) CALL_NAME,  ASH.EVENT,  ASH.IN_INMEMORY_QUERY,  ASH.WA
IT_CLASS,  ASH.SQL_EXEC_ID,  ASH.SQL_EXEC_START,  ASH.DBOP_NAME,  ASH.DBOP_EXEC_ID,  ASH.SESSION_ID,  ASH.SESSION_SERIAL#,  CASE WHEN QC_INSTANCE_ID IS NOT NULL AND (ASH.SESSION_ID != ASH.QC_SESSION_ID OR ASH.SESSION_SERIAL# != ASH.QC_SESSION_SERIAL# OR USERENV('instance') != ASH.QC_INSTANCE_ID) THEN 1 ELSE 0 END IS_PX_SLAVE,  SAMPLE_TIME - CAST(:B20 AS TIMESTAMP) DELTA_TIME,  CAST(FROM_TZ(ASH.SAMPLE_TIME,  DBTIMEZONE) AS DATE) SAMPLE_DATE,  TRUNC(MOD(PX_FLAGS/65536,  32)) PX_STEP_ID,  MOD(PX_FLAGS,  65536) PX_STEP_ARG,  TRUNC(PX_FLAGS/2097152) PX_DOP FROM V$ALL_ACTIVE_SESSION_HISTORY ASH WHERE ((ASH.SESSION_ID = :B19 AND ASH.SESSION_SERIAL# = :B18 AND USERENV('INSTANCE') = :B17 ) OR (ASH.QC_SESSION_ID IS NOT NULL AND ASH.QC_SESSION_ID = :B19 AND ASH.QC_SESSION_SERIAL# = :B18 AND ASH.QC_INSTANCE_ID = :B17 )) AND SAMPLE_TIME BETWEEN :B16 AND :B15 ) ASH0 WHERE (ASH0.SAMPLE_DATE BETWEEN :B20 + 1/24/3600 AND :B22 - 1/24/3600 OR (ASH0.SQL_ID = :B9 AND ASH0.SQL_EXEC_START = :B8 AND ASH0.SQL_
EXEC_ID = :B7 ) OR (ASH0.DBOP_NAME = :B6 AND ASH0.DBOP_EXEC_ID = :B5 )) AND (:B21 IS NULL OR ASH0.SQL_PLAN_LINE_ID = :B21 ) AND (ASH0.IS_PX_SLAVE = 0 OR ASH0.SQL_ID IS NOT NULL)) ASH000 ) ASH00 WHERE ASH00.C1 = DUP.C1) ASH1 WHERE ASH1.BUCKET_NUM &gt; 0 AND ASH1.BUCKET_NUM &lt;= :B27 GROUP BY USERENV('INSTANCE'),  ASH1.GLOBAL_SAMPLE_ID,  ASH1.BUCKET_NUM,  ASH1.SESSION_ID,  ASH1.PLAN_LINE_ID,  ASH1.PLSQL_OBJECT_ID,  ASH1.PLSQL_SUBPROGRAM_ID,  ASH1.ACTIVITY_TYPE,  ASH1.EVENT_NAME,  ASH1.OTHER_SQL_ACTIVITY_TYPE,  ASH1.PX_STEP_ID,  ASH1.PX_STEP_ARG) ASH2)))) GVTF WHERE GVTF.INST_ID BETWEEN :B11 AND :B10 ) ASH WHERE ASH.GLOBAL_SAMPLE_ID IS NULL AND ASH.SESSION_ID = MO.SID(+) AND ASH.INST_ID = MO.INST_ID(+)) AD0),  RESPONSE_TIME_DATA AS (SELECT ADH.BUCKET_NUM,  ADH.SQL_ROWNUM,  ADH.SQL,	ADH.TOP_LEVEL_SQL_ID,  ADH.DBOP_NAME,  ADH.PX_ID,  DECODE( ADH.PX_STEP_ID,  NULL,  NULL,  0,  NULL,  1,  'PX Server(s) - Executing Parent DFO',  2,  'PX Server(s) - Executing Child DFO',  3,	'PX Server(s) -
Sampling Child DFO',  4,  'PX Server(s) - Joining Group',  5,  'QC - Scheduling Child DFO',  6,  'QC - Scheduling Parent DFO',	7,  'QC - Initializing Objects',  8,  'QC - Flushing Objects',	9,  'QC - Allocating Slaves',  10,  'QC - Initializing Granules',  11,	'PX Server(s) - Parsing Cursor',  12,  'PX Server(s) - Executing Cursor',  13,	'PX Server(s) - Preparing Transaction',  14,  'PX Server(s) - Joining Transaction',  15,  'PX Server(s) - Load Commit',  16,  'PX Server(s) - Aborting Transaction',  17,  'QC - Executing Child DFO',	18,  'QC - Executing Parent DFO',  'PX Step - ' || PX_STEP_ID) PX_STEP_ID,  ADH.PX_STEP_ARG,  ADH.PX_DFO_PAIR_ID,  ADH.PX_DOP,	ADH.PX_MIN_DOP,  ADH.DFO_MOST_ACTIVE_IID,  ADH.DFO_MOST_ACTIVE_SID,  ADH.DFO_MOST_ACTIVE_COUNT,  ADH.ACTIVITY_START,  ADH.ACTIVITY_END,  ADH.ACTIVITY_TYPE,  ADH.OTHER_SQL_ACTIVITY_TYPE,  ADH.EVENT_NAME,  ADH.PLAN_LINE_ID,  ADH.PLSQL_OBJECT_ID,  ADH.PLSQL_SUBPROGRAM_ID,  CASE WHEN PLSQL_ROWNUM = 1 AND ADH.PLSQL_OBJECT_ID IS NOT
 NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,  NULL,  '',	'.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = ADH.PLSQL_OBJECT_ID AND P.SUBPROGRAM_ID = ADH.PLSQL_SUBPROGRAM_ID),	'Unavailable') ELSE NULL END PLSQL_NAME,  ADH.ACTIVITY_COUNT,  ADH.BUCKET_ACTIVE_SECONDS,  ADH.BUCKET_IDLE_SECONDS,  (CASE WHEN ADH.IS_MONITORED_SQL = 0 THEN ADH.ACTIVE_SECONDS WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_CPU_HEIGHT &gt;= :B34 THEN DECODE(ADH.ACTIVITY_TYPE,  'Cpu',  (ADH.DFO_PAIR_ACTIVITY_HEIGHT / ADH.DFO_PAIR_CPU_HEIGHT) * ADH.DFO_PAIR_TOTAL_SECONDS,  0) WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.PX_DOP &gt; :B34 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * DECODE(ADH.ACTIVITY_TYPE,  'Cpu',  ADH.DFO_PAIR_ACTIVITY_HEIGHT,  (ADH.DFO_PAIR_ACTIVITY_HEIGHT * (:B34 - ADH.DFO_PAIR_CPU_HEIGHT)) / (ADH.DFO_PAIR_TOTAL_HEIGHT_ADJ - ADH.DFO_PAIR_CPU_HEIGHT))) / :B34 WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL THEN (ADH.DFO_PAIR_TOTAL_SECONDS * ADH.DFO_PAIR_ACTI
VITY_HEIGHT) / ADH.PX_DOP ELSE ADH.ACTIVE_SECONDS END) RESP_TIME,  (CASE WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_IDLE_HEIGHT &gt; 0 AND ADH.PX_DOP &gt; :B34 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * (ADH.DFO_PAIR_IDLE_HEIGHT * (:B34 - ADH.DFO_PAIR_CPU_HEIGHT)) / (ADH.DFO_PAIR_TOTAL_HEIGHT_ADJ - ADH.DFO_PAIR_CPU_HEIGHT)) / :B34 WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_IDLE_HEIGHT &gt; 0 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * ADH.DFO_PAIR_IDLE_HEIGHT) / ADH.PX_DOP ELSE 0 END) DFO_PAIR_IDLE_RESP_TIME,  ADH.DFO_PAIR_ACTIVITY_HEIGHT,  ADH.DFO_PAIR_CPU_HEIGHT,	ADH.DFO_PAIR_IDLE_HEIGHT,  ADH.DFO_PAIR_TOTAL_HEIGHT,  ADH.DFO_PAIR_CPU_ACTIVITY,  ADH.DFO_PAIR_TOTAL_SECONDS FROM (SELECT ADH_1.*,  (ROW_NUMBER() OVER(PARTITION BY ADH_1.PLSQL_OBJECT_ID,  ADH_1.PLSQL_SUBPROGRAM_ID ORDER BY ADH_1.BUCKET_NUM,  ADH_1.ACTIVITY_TYPE,  ADH_1.EVENT_NAME)) PLSQL_ROWNUM,  (ROW_NUMBER() OVER(PARTITION BY ADH_1.SQL ORDER BY ADH_1.BUCKET_NUM,  ADH_1.ACTIVITY_TYPE,  ADH_1.EVENT_NAME)) SQL_ROWNUM,  (
CASE WHEN ADH_1.PX_DFO_PAIR_ID IS NOT NULL AND (ADH_1.DFO_PAIR_TOTAL_HEIGHT &lt; ADH_1.PX_DOP) AND (ADH_1.DFO_PAIR_CPU_HEIGHT &lt; :B34 ) THEN ADH_1.PX_DOP - ADH_1.DFO_PAIR_TOTAL_HEIGHT ELSE 0 END) DFO_PAIR_IDLE_HEIGHT,  (CASE WHEN ADH_1.PX_DFO_PAIR_ID IS NOT NULL AND (ADH_1.DFO_PAIR_TOTAL_HEIGHT &lt; ADH_1.PX_DOP) AND (ADH_1.DFO_PAIR_CPU_HEIGHT &lt; :B34 ) THEN ADH_1.PX_DOP ELSE ADH_1.DFO_PAIR_TOTAL_HEIGHT END) DFO_PAIR_TOTAL_HEIGHT_ADJ FROM (SELECT ADH_0.*,  (CASE WHEN ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.DFO_PAIR_TOTAL_ACTIVITY * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_TOTAL_HEIGHT,	(CASE WHEN ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.DFO_PAIR_CPU_ACTIVITY * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_CPU_HEIGHT,  (CASE WHEN ADH_0.PX_DFO_PAIR_ID IS NOT NULL AND ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.ACTIVITY_COUNT * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_ACTIVITY_HEIGHT FROM (SELECT AD3.*,  (SUM(DECODE(
AD3.PX_DFO_PAIR_ID,  NULL,  0,	AD3.ACTIVE_SECONDS)) OVER(PARTITION BY DECODE(AD3.PX_DFO_PAIR_ID,  NULL,  NULL,  AD3.BUCKET_NUM),  DECODE(AD3.PX_DFO_PAIR_ID,  NULL,  NULL,  AD3.PX_STEP_ARG))) DFO_PAIR_TOTAL_SECONDS FROM (SELECT AD2.*,  CASE WHEN AD2.IS_MONITORED_SQL = 0 THEN SQL_BUCKET_DISTINCT_SAMPLES * :B25 WHEN AD2.PX_ID IS NULL THEN AD2.ACTIVITY_COUNT * :B25 WHEN AD2.BUCKET_PARALLEL_MON_ACTIVITY &gt; 0 THEN (AD2.ACTIVITY_COUNT * AD2.BUCKET_PARALLEL_MON_SECONDS) / AD2.BUCKET_PARALLEL_MON_ACTIVITY ELSE 0 END ACTIVE_SECONDS,  CASE WHEN AD2.BUCKET_INTERVAL &gt; BUCKET_ACTIVE_SECONDS THEN AD2.BUCKET_INTERVAL - BUCKET_ACTIVE_SECONDS ELSE 0 END BUCKET_IDLE_SECONDS FROM (SELECT AD1.*,  (AD1.BUCKET_SERIAL_MON_ACTIVITY * :B25 ) BUCKET_SERIAL_MON_SECONDS,	(AD1.BUCKET_TOTAL_MON_ACTIVITY - AD1.BUCKET_SERIAL_MON_ACTIVITY) BUCKET_PARALLEL_MON_ACTIVITY,	(AD1.BUCKET_ACTIVE_SECONDS - (AD1.BUCKET_OTHER_ACTIVITY + AD1.BUCKET_SERIAL_MON_ACTIVITY) * :B25 ) BUCKET_PARALLEL_MON_SECONDS,  (AD1.BUCKET_OTH
ER_ACTIVITY * :B25 ) BUCKET_OTHER_SECONDS,  DECODE(AD1.PX_DFO_PAIR_ID,	NULL,  NULL,  SUM(AD1.ACTIVITY_COUNT) OVER(PARTITION BY DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  AD1.BUCKET_NUM),  AD1.PX_DFO_PAIR_ID)) DFO_PAIR_TOTAL_ACTIVITY,  DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  SUM(DECODE(AD1.ACTIVITY_TYPE,  'Cpu',  AD1.ACTIVITY_COUNT,  0)) OVER(PARTITION BY DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  AD1.BUCKET_NUM),  AD1.PX_DFO_PAIR_ID)) DFO_PAIR_CPU_ACTIVITY FROM (SELECT AD01.*,  NVL((SUM(DECODE(AD01.IS_MONITORED_SQL,  1,	AD01.ACTIVITY_COUNT,  NULL)) OVER(PARTITION BY AD01.BUCKET_NUM)),  0) BUCKET_TOTAL_MON_ACTIVITY,  (NVL(SUM(CASE WHEN AD01.IS_MONITORED_SQL = 1 AND AD01.PX_ID IS NULL THEN AD01.ACTIVITY_COUNT ELSE NULL END) OVER(PARTITION BY AD01.BUCKET_NUM),  0)) BUCKET_SERIAL_MON_ACTIVITY,  (NVL((SUM(DECODE(AD01.IS_MONITORED_SQL,  0,  AD01.SQL_BUCKET_DISTINCT_SAMPLES,  NULL)) OVER(PARTITION BY AD01.BUCKET_NUM)),  0)) BUCKET_OTHER_ACTIVITY,  (NVL(AD01.BUCKET_DISTINCT_SAMPLES,  0) * :B
25 ) BUCKET_ACTIVE_SECONDS,  DECODE(AD01.BUCKET_NUM,  :B27 ,  MOD(:B32 ,  :B26 ),  :B26 ) BUCKET_INTERVAL FROM (SELECT AD0.ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.PX_ID,	AD0.ACTIVITY_TYPE,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.PLAN_LINE_ID,  AD0.PX_STEP_ID,  AD0.PX_STEP_ARG,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,	MAX(AD0.IS_MONITORED_SQL) IS_MONITORED_SQL,  MAX(AD0.SQL) SQL,	MAX(AD0.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  MAX(AD0.DBOP_NAME) DBOP_NAME,  MAX(DECODE(AD0.DFO_MOST_ACTIVE_COUNT,  NULL,  NULL,  AD0.DFO_MOST_ACTIVE_IID)) DFO_MOST_ACTIVE_IID,  MAX(DECODE(AD0.DFO_MOST_ACTIVE_COUNT,	NULL,  NULL,  AD0.DFO_MOST_ACTIVE_SID)) DFO_MOST_ACTIVE_SID,  SUM(AD0.DFO_MOST_ACTIVE_COUNT) DFO_MOST_ACTIVE_COUNT,  MAX(PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  MAX(PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  MAX(AD0.PX_DOP) PX_DOP,  MIN(AD0.PX_MIN_DOP) PX_MIN_DOP,  MAX(AD0.BUC
KET_DISTINCT_SAMPLES) BUCKET_DISTINCT_SAMPLES,	MAX(AD0.SQL_BUCKET_DISTINCT_SAMPLES) SQL_BUCKET_DISTINCT_SAMPLES FROM (SELECT AD00.*,  (CASE WHEN AD00.IS_MONITORED_SQL = 1 AND (AD00.SESSION_ID != :B19 OR AD00.INST_ID != :B17 ) THEN AD00.PX_SERVER_GROUP END) PX_ID FROM ASH_DATA AD00 WHERE :B33 = 1 ) AD0 GROUP BY AD0.ACTIVITY_BUCKET_NUM,  AD0.PX_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.PLAN_LINE_ID,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  AD0.PX_STEP_ID,  AD0.PX_STEP_ARG ) AD01) AD1) AD2) AD3) ADH_0) ADH_1) ADH) SELECT /*+ no_monitor no_xml_query_rewrite
		 opt_param('_gby_hash_aggregation_enabled',  'false') */ XMLELEMENT( &quot;sql_monitor_report&quot;,  XMLATTRIBUTES(:B59 AS &quot;version&quot;,  TO_CHAR(:B58 ,  :B12 ) AS &quot;sysdate&quot;),  XMLELEMENT( &quot;report_parameters&quot;,  NULL,  CASE WHEN :B57 IS NOT NULL THEN XMLFOREST( :B57 AS &quot;dbop_name&quot;,  :B56 AS &quot;dbop_exec_id&quot;) ELSE XMLFOREST( :B55 AS
&quot;sql_id&quot;,  :B54 AS &quot;sql_exec_id&quot;) END,  XMLFOREST( :B53 AS &quot;session_id&quot;,	:B52 AS &quot;session_serial&quot;,  TO_CHAR(:B51 ,  :B12 ) AS &quot;sql_exec_start&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR(:B50 ,  :B12 ) AS &quot;interval_start&quot;,  TO_CHAR(:B22 ,  :B12 ) AS &quot;interval_end&quot;,  DECODE(:B49 ,  'Y',	:B48 ,	NULL) AS &quot;auto_refresh&quot;,  :B47 AS &quot;base_path&quot;),  CASE WHEN :B23 = 'Y' AND :B46 IS NOT NULL AND NOT (:B4 = 1 AND :B3 IS NULL AND :B2 IS NULL AND :B1 IS NULL) THEN XMLELEMENT( &quot;parallel_filter&quot;,	NULL,  XMLFOREST( DECODE(:B4 ,	1,  'yes',  'no') AS &quot;qc&quot;,  :B3 AS &quot;server_group&quot;,	:B2 AS &quot;server_set&quot;,	:B1 AS &quot;server_number&quot;)) ELSE NULL END),  CASE WHEN :B14 = 1 THEN XMLELEMENT( &quot;derived_parameters_testing&quot;,  NULL,	XMLFOREST(:B11 AS &quot;instance_id_low&quot;,	:B10 AS &quot;instance_id_high&quot;,  :B26 AS &quot;bucket_interval_sec&quot;,  :B32 AS
 &quot;interval_second&quot;,  :B27 AS &quot;bucket_calc_count&quot;,  :B45 AS &quot;bucket_calc_max_count&quot;,  :B13 AS &quot;sel_sqltext&quot;)) ELSE NULL END,  (SELECT XMLCONCAT( CASE WHEN :B46 IS NULL AND :B67 IS NULL THEN XMLELEMENT( &quot;target&quot;,  XMLATTRIBUTES(:B17 AS &quot;instance_id&quot;,  :B19 AS &quot;session_id&quot;,  :B18 AS &quot;session_serial&quot;,  NVL2(:B6 ,	NULL,  :B9 ) AS &quot;sql_id&quot;,  NVL2(:B6 ,  NULL,	TO_CHAR(:B8 ,  :B12 )) AS &quot;sql_exec_start&quot;,  NVL2(:B6 ,  NULL,  :B7 ) AS &quot;sql_exec_id&quot;,  NVL2(:B6 ,  :B6 ,	NULL) AS &quot;dbop_name&quot;,  NVL2(:B6 ,  :B5 ,  NULL) AS &quot;dbop_exec_id&quot;,	NVL2(:B6 ,  TO_CHAR(:B8 ,  :B12 ),  NULL) AS &quot;dbop_exec_start&quot;,  NVL2(:B6 ,  NULL,  MAX_PLAN_HASH_VALUE) AS &quot;sql_plan_hash&quot;,  NVL2(:B6 ,  NULL,  MAX_FULL_PLAN_HASH_VALUE) AS &quot;sql_full_plan_hash&quot;,  MAGG.DB_UNIQUE_NAME AS &quot;db_unique_name&quot;,  MAGG.PLATFORM_NAME AS &quot;db_platform_name&quot;,  MAGG
.HOST_NAME AS &quot;report_host_name&quot;),  NVL2(SUM_SERVERS_REQUESTED,  XMLELEMENT( &quot;servers_requested&quot;,  NULL,  SUM_SERVERS_REQUESTED),  NULL),  NVL2(SUM_SERVERS_ALLOCATED,  XMLELEMENT( &quot;servers_allocated&quot;,	NULL,  SUM_SERVERS_ALLOCATED),	NULL),	NVL2(MAX_USERID,  XMLELEMENT( &quot;user_id&quot;,  NULL,  MAX_USERID),  NULL),  NVL2(MAX_USERNAME,  XMLELEMENT( &quot;user&quot;,  NULL,  MAX_USERNAME),  NULL),  NVL2(MAX_CON_ID,  XMLELEMENT( &quot;con_id&quot;,  NULL,  MAX_CON_ID),  NULL),  NVL2(MAX_CON_NAME,  XMLELEMENT( &quot;con_name&quot;,  NULL,  MAX_CON_NAME),  NULL),  NVL2(MAX_PROGRAM,  XMLELEMENT( &quot;program&quot;,  NULL,  MAX_PROGRAM),  NULL),  NVL2(MAX_MODULE,  XMLELEMENT( &quot;module&quot;,  NULL,  MAX_MODULE),  NULL),  NVL2(MAX_ACTION,  XMLELEMENT( &quot;action&quot;,  NULL,  MAX_ACTION),  NULL),  NVL2(MAX_SERVICE_NAME,  XMLELEMENT( &quot;service&quot;,  NULL,  MAX_SERVICE_NAME),  NULL),  NVL2(MAX_CLIENT_ID,  XMLELEMENT( &quot;client_id&quot;,  NULL,
 MAX_CLIENT_ID),  NULL),  NVL2(MAX_CLIENT_INFO,  XMLELEMENT( &quot;client_info&quot;,  NULL,  MAX_CLIENT_INFO),  NULL),  NVL2(MAX_PL_ENTRY_OID,  XMLELEMENT( &quot;plsql_entry_object_id&quot;,  NULL,	MAX_PL_ENTRY_OID),  NULL),  NVL2(MAX_PL_ENTRY_PROGID,  XMLELEMENT( &quot;plsql_entry_subprogram_id&quot;,  NULL,  MAX_PL_ENTRY_PROGID),  NULL),  NVL2(MAX_PL_ENTRY_NAME,  XMLELEMENT( &quot;plsql_entry_name&quot;,  NULL,  MAX_PL_ENTRY_NAME),  NULL),  NVL2(MAX_PL_OID,  XMLELEMENT( &quot;plsql_object_id&quot;,  NULL,  MAX_PL_OID),  NULL),  NVL2(MAX_PL_PROGID,  XMLELEMENT( &quot;plsql_subprogram_id&quot;,  NULL,  MAX_PL_PROGID),  NULL),  NVL2(MAX_PL_NAME,	XMLELEMENT( &quot;plsql_name&quot;,  NULL,  MAX_PL_NAME),  NULL),  CASE WHEN (:B13 = 0 OR :B6 IS NOT NULL) THEN NULL ELSE XMLELEMENT( &quot;sql_fulltext&quot;,  XMLATTRIBUTES( NVL2(:B65 ,  'Y',  :B66 ) AS &quot;is_full&quot;),  NVL2(:B65 ,  :B65 ,  SQLMON_TEXT)) END,  XMLELEMENT( &quot;status&quot;,  NULL,  MAX_STATUS),  XMLELEMENT( &quot;ref
resh_count&quot;,  NULL,  SUM_REFRESH_COUNT),  XMLELEMENT( &quot;first_refresh_time&quot;,  NULL,  TO_CHAR(MIN_FIRST_REFRESH_TIME,  :B12 )),  XMLELEMENT( &quot;last_refresh_time&quot;,  NULL,  TO_CHAR(:B58 ,  :B12 )),  XMLELEMENT( &quot;duration&quot;,  NULL,  GREATEST(:B64 ,  LEAST(MAX_ELAPSED_TIME/1000000,  1),  CEIL(MAX_QUEUING_TIME/1000000))),  DECODE(MAX_RM_INFO,  '00/00/0000 00:00:00',  NULL,  XMLTYPE(SUBSTR(MAX_RM_INFO,	20))),	CASE WHEN (:B62 = 'Y') THEN XMLELEMENT( &quot;adaptive_plan&quot;,  XMLATTRIBUTES(:B63 AS &quot;is_final&quot;),  :B62 ) ELSE NULL END ) END,  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  DECODE(NVL(SUM_ELAPSED_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  SUM_ELAPSED_TIME)),  DECODE(NVL(MAX_QUEUING_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX_QUEUING_TIME)),  DECODE(NVL(SUM_CPU_TIME,  0),  0,  NUL
L,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  SUM_CPU_TIME)),  DECODE(NVL(SUM_USER_IO_WAIT_TIME,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  SUM_USER_IO_WAIT_TIME)),  DECODE(NVL(SUM_APPLICATION_WAIT_TIME,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  SUM_APPLICATION_WAIT_TIME)),  DECODE(NVL(SUM_CONCURRENCY_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  SUM_CONCURRENCY_WAIT_TIME)),  DECODE(NVL(SUM_CLUSTER_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  SUM_CLUSTER_WAIT_TIME)),	DECODE(NVL(SUM_PLSQL_EXEC_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  SUM_PLSQL_EXEC_TIME)),  DECODE(NVL(SUM_JAVA_EXEC_TIME,  0),  0,	NULL,  XMLELEMEN
T( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  SUM_JAVA_EXEC_TIME)),  DECODE(NVL(SUM_OTHER_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  SUM_OTHER_WAIT_TIME)),  DECODE(NVL(SUM_FETCHES,  0),	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  SUM_FETCHES)),  DECODE(NVL(SUM_BUFFER_GETS,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  SUM_BUFFER_GETS)),  DECODE(NVL(SUM_READ_REQS,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),  SUM_READ_REQS)),  DECODE(NVL(SUM_WRITE_REQS,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  SUM_WRITE_REQS)),  DECODE(NVL(SUM_READ_REQS,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  SUM_READ_REQS)),  DECODE(NVL(SUM_READ_B
YTES,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),	SUM_READ_BYTES)),  DECODE(NVL(SUM_WRITE_REQS,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),	SUM_WRITE_REQS)),  DECODE(NVL(SUM_WRITE_BYTES,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  SUM_WRITE_BYTES)),  DECODE(NVL(SUM_IO_UNC_BYTES,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  SUM_IO_UNC_BYTES)),  DECODE(NVL(SUM_IO_ELIG_BYTES,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  SUM_IO_ELIG_BYTES)),  DECODE(NVL(SUM_IO_RET_BYTES,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  SUM_IO_RET_BYTES)),  CASE WHEN SUM_IO_INTER_BYTES IS NULL OR SUM_IO_BYTES = 0 OR SUM_IO_INTER_BYTES = SUM_IO_BYTES OR NVL(SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE
 XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(SUM_IO_BYTES / DECODE(SUM_IO_INTER_BYTES,	0,  1,	SUM_IO_INTER_BYTES),  2)) END,	CASE WHEN NVL(SUM_IO_ELIG_BYTES,  0) = 0 OR SUM_IO_BYTES = 0 OR SUM_IO_UNC_BYTES = SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100* (GREATEST(SUM_IO_UNC_BYTES,  SUM_IO_ELIG_BYTES) - SUM_IO_RET_BYTES) / SUM_IO_ELIG_BYTES,  2))) END),	CASE WHEN :B33 = 1 THEN (SELECT CASE WHEN SUM(ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLAGG( XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME)) ELSE NULL END FROM (SELECT AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_TYPE,  AD0.EVENT
_NAME) AD1) ELSE NULL END,  NVL2(MAX_ERROR_NUMBER,  XMLELEMENT( &quot;error&quot;,  XMLATTRIBUTES(MAX_ERROR_NUMBER AS &quot;number&quot;,  MAX_ERROR_FACILITY AS &quot;facility&quot;),  MAX_ERROR_MESSAGE),  NULL),  CASE WHEN :B61 = 1 AND MAGG.QC_HAS_BINDS_XML = 'Y' THEN (SELECT XMLTYPE(BINDS_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = :B17 AND MON.KEY = MAGG.MAX_KEY AND MON.SID = MAGG.MAX_SESSION_ID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END,  CASE WHEN :B60 = 1 AND MAGG.QC_HAS_OTHER_XML = 'Y' THEN (SELECT XMLTYPE(OTHER_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = MAGG.MAX_INST_ID AND MON.KEY = MAGG.MAX_KEY AND MON.SID = MAGG.MAX_SESSION_ID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END) FROM MONITOR_AGG MAGG),  CASE WHEN :B44 = 1 THEN (SELECT CASE WHEN AT.ACTIVITY_COUNT &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( :B41 AS
&quot;ash_missing_seconds&quot;,  TO_CHAR(AT.ACTIVITY_START,  :B12 ) AS &quot;first_sample_time&quot;,	TO_CHAR(AT.ACTIVITY_END,  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((AT.ACTIVITY_END - AT.ACTIVITY_START) * 3600 * 24) + 1 AS &quot;duration&quot;,  AT.ACTIVITY_COUNT AS &quot;count&quot;,  AT.IMQ_COUNT AS &quot;imq_count&quot;,  AT.WAIT_COUNT AS &quot;wait_count&quot;,  AT.CPU_COUNT AS &quot;cpu_count&quot;,  DECODE(AT.OTHER_SQL_COUNT,  0,  NULL,  AT.OTHER_SQL_COUNT) AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  AT.ACTIVITY_TOTAL,	AH.GLOB_ACTIVITY_HISTO) WHEN :B41 IS NOT NULL THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( DECODE( :B41 ,  -1,  'all',  TO_CHAR( :B41 )) AS &quot;ash_missing_seconds&quot;)) ELSE NULL END FROM (SELECT MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) IMQ_COUNT,  SUM(AD1.WAIT_COUNT) WAIT_COUNT,
  SUM(AD1.CPU_COUNT) CPU_COUNT,  SUM(AD1.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG( XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME) ACTIVITY_TOTAL FROM (SELECT AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME,  MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,	SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,	SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1) AT,  (SELECT CASE WHEN :B30 = 1 AND :B27 &gt; 1 THEN XMLELEMENT( &quot;activity_histogram&quot;,  XMLATTRIBUTES( :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR( :B20 ,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR( :B22
,  :B12 ) AS &quot;end_time&quot;,  ROUND(( :B22 - :B20 ) *3600*24) + 1 AS &quot;duration&quot;),  XMLAGG( XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),  ACTIVITY_BUCKET) ORDER BY AD2.BUCKET_NUM)) ELSE NULL END GLOB_ACTIVITY_HISTO FROM (SELECT AD1.BUCKET_NUM,  SUM(ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(IMQ_COUNT) IMQ_COUNT,  SUM(WAIT_COUNT) WAIT_COUNT,  SUM(CPU_COUNT) CPU_COUNT,  SUM(OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  MIN(AD1.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD1.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG( XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,  AD1.EVENT_NAME AS &quot;event&quot;),	AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,  AD1.EVENT_NAME) ACTIVITY_BUCKET FROM (SELECT AD0.ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.A
CTIVITY_TYPE,  AD0.EVENT_NAME,	MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(AD0.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,	MAX(AD0.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1 GROUP BY AD1.BUCKET_NUM) AD2) AH) ELSE NULL END,	CASE WHEN :B33 = 1 THEN (SELECT CASE WHEN AH.ACTIVITY_COUNT &gt; 0 THEN XMLELEMENT( &quot;activity_detail&quot;,  XMLATTRIBUTES( TO_CHAR( :B20 ,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR( :B22 ,  :B12 ) AS &quot;end_time&quot;,  :B41 AS &quot;ash_missing_seconds&quot;,  TO_CHAR(AH.ACTIVITY_START,  :B12 ) AS &quot;first_sample_time&quot;,  TO_CHAR(AH.ACTIVITY_END,  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((AH.ACTIVITY_END - AH.ACTIVITY_START) * 3600 * 2
4) + 1 AS &quot;duration&quot;,  :B25 AS &quot;sample_interval&quot;,  :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,	ROUND((:B22 - :B20 ) *3600*24) + 1 AS &quot;bucket_duration&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B34 AS &quot;total_cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  AH.GLOB_ACTIVITY_HISTO) WHEN :B41 IS NOT NULL THEN XMLELEMENT( &quot;activity_detail&quot;,  XMLATTRIBUTES( DECODE( :B41 ,  -1,  'all',  TO_CHAR( :B41 )) AS &quot;ash_missing_seconds&quot;)) ELSE NULL END FROM (SELECT MIN(AD2.ACTIVITY_START) ACTIVITY_START,	MAX(AD2.ACTIVITY_END) ACTIVITY_END,  SUM(AD2.ACTIVITY_COUNT) ACTIVITY_COUNT,  XMLAGG( XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),  ACTIVITY_BUCKET_XML) ORDER BY AD2.BUCKET_NUM) GLOB_ACTIVITY_HISTO FROM (SELECT AD1.BUCKET_NUM,  MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  MAX(AD1.BUCKET_IDLE_SECONDS) BUCKET
_IDLE_SECONDS,	XMLAGG( XMLCONCAT( CASE WHEN AD1.DFO_PAIR_IDLE_RESP_TIME != 0 AND DFO_PAIR_ROWNUM = 1 THEN XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( 'Parallel Skew' AS &quot;class&quot;,  AD1.PX_STEP_ARG AS &quot;line&quot;,  AD1.PX_ID AS &quot;px&quot;,	ROUND(AD1.DFO_PAIR_IDLE_RESP_TIME,  2) AS &quot;rt&quot;),  0) ELSE NULL END,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( NVL(AD1.OTHER_SQL,  AD1.RPI) AS &quot;sql&quot;,  AD1.NON_SQL AS &quot;non_sql&quot;,	AD1.CLASS AS &quot;class&quot;,  AD1.OTHER_SQL_CLASS AS &quot;other_sql_class&quot;,  AD1.EVENT AS &quot;event&quot;,  AD1.PLAN_LINE_ID AS &quot;line&quot;,  NVL2(AD1.PLSQL_OBJECT_ID,  AD1.PLSQL_OBJECT_ID||'.'|| AD1.PLSQL_SUBPROGRAM_ID,  NULL) AS &quot;plsql_id&quot;,  AD1.PLSQL_NAME AS &quot;plsql_name&quot;,  CASE WHEN AD1.SQL_ROWNUM = 1 THEN AD1.TOP_LEVEL_SQL_ID END AS &quot;top_sql_id&quot;,	CASE WHEN AD1.DBOP_NAME IS NOT NULL THEN AD1.DBOP_NAME END AS &quot;dbop_name&quot;,  CASE WHEN AD1.DFO_MOST_ACTIVE_IID
IS NOT NULL AND :B68 = 'Y' THEN AD1.DFO_MOST_ACTIVE_IID END AS &quot;skew_iid&quot;,  DECODE(AD1.DFO_MOST_ACTIVE_COUNT,  NULL, NULL,  AD1.DFO_MOST_ACTIVE_SID) AS &quot;skew_sid&quot;,  AD1.DFO_MOST_ACTIVE_COUNT AS &quot;skew_count&quot;,  DECODE(AD1.PX_DOP,  :B28 ,  NULL,  AD1.PX_DOP) AS &quot;dop&quot;,  DECODE(AD1.PX_DOP,  AD1.PX_MIN_DOP,	NULL,  AD1.PX_MIN_DOP) AS &quot;min_dop&quot;,	AD1.PX_ID AS &quot;px&quot;,  AD1.PX_STEP_ID AS &quot;step&quot;,  AD1.PX_STEP_ARG AS &quot;arg&quot;,	DECODE(AD1.ACTIVITY_COUNT,  AD1.RESP_TIME,  NULL,  ROUND(AD1.RESP_TIME,  2)) AS &quot;rt&quot;),  AD1.ACTIVITY_COUNT)) ORDER BY AD1.PX_STEP_ID,  AD1.PX_STEP_ARG,  AD1.DFO_PAIR_ROWNUM) ACTIVITY_BUCKET_XML FROM (SELECT AD01.*,  CASE WHEN AD01.ACTIVITY_TYPE != 'Other SQL Execution' AND AD01.ACTIVITY_TYPE != 'Non SQL' THEN AD01.ACTIVITY_TYPE END CLASS,	CASE WHEN (AD01.ACTIVITY_TYPE = 'Other SQL Execution' OR AD01.ACTIVITY_TYPE = 'Non SQL') THEN AD01.OTHER_SQL_ACTIVITY_TYPE END OTHER_SQL_CLASS,  CASE WH
EN AD01.ACTIVITY_TYPE != 'Other SQL Execution' AND AD01.ACTIVITY_TYPE != 'Non SQL' THEN AD01.EVENT_NAME END EVENT,  CASE WHEN AD01.SQL IN ('this',  'anonymous') THEN NULL ELSE AD01.SQL END RPI,  DECODE(AD01.ACTIVITY_TYPE,  'Other SQL Execution',  SUBSTR(AD01.EVENT_NAME,	9),  NULL) OTHER_SQL,  DECODE(AD01.ACTIVITY_TYPE,  'Non SQL',  AD01.EVENT_NAME,  NULL) NON_SQL,  ROW_NUMBER() OVER(PARTITION BY AD01.BUCKET_NUM,  AD01.PX_DFO_PAIR_ID ORDER BY AD01.ACTIVITY_TYPE,  AD01.EVENT_NAME,  AD01.PLAN_LINE_ID) DFO_PAIR_ROWNUM FROM RESPONSE_TIME_DATA AD01) AD1 GROUP BY AD1.BUCKET_NUM) AD2) AH) ELSE NULL END,  CASE WHEN :B23 = 'Y' THEN (SELECT XMLELEMENT( &quot;parallel_info&quot;,  XMLATTRIBUTES( :B17 AS &quot;qc_instance_id&quot;,  MAX_PX_QCSID AS &quot;qc_session_id&quot;,  MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,  MAX_PX_DOP AS &quot;dop&quot;,  MAX_PX_DOP_INSTANCES AS &quot;max_dop_instances&quot;,  DIST_INST_COUNT AS &quot;inst_count&quot;,  DIST_PX_GROUP_COUNT AS &quot;serv
er_group_count&quot;,  DIST_PX_SET_COUNT AS &quot;server_set_count&quot;),  CASE WHEN :B70 = 1 THEN PX_SESSIONS ELSE NULL END,	CASE WHEN :B68 = 'Y' THEN DECODE(:B69 ,  1,  PX_INSTANCES,  NULL) ELSE NULL END) FROM (SELECT MAX_PX_QCSID,  MAX_PX_DOP,  MAX_PX_DOP_INSTANCES,  MAX_PX_IS_CROSS_INSTANCE,  SUM_SERVERS_REQUESTED,  SUM_SERVERS_ALLOCATED,  DIST_INST_COUNT,  DIST_PX_GROUP_COUNT,  DIST_PX_SET_COUNT,	(SELECT XMLELEMENT( &quot;sessions&quot;,  XMLATTRIBUTES(MAX(PX_SESSION.ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PX_SESSION.IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PX_SESSION.CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PX_SESSION.WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PX_SESSION.OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;,  MAX(PX_SESSION.MAX_IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PX_SESSION.MAX_IO_BYTES) AS &quot;max_io_bytes&quot;,  MAX(PX_SESSION.MAX_BUFFER_GETS) AS &quot;max_buffer_gets&quot;,  MAX(PX_SESSION.MAX_ELAPSED_TIME) AS &quot;max
_elapsed_time&quot;),  XMLAGG(PX_SESSION.PX_SESSION_XML ORDER BY PX_SERVER_GROUP NULLS FIRST,  PX_SERVER_SET,  PX_SERVER#)) FROM (SELECT PX_SERVER_GROUP,  PX_SERVER_SET,  PX_SERVER#,	MAX(PI.MAX_ELAPSED_TIME) MAX_ELAPSED_TIME,  MAX(PI.MAX_IO_REQS) MAX_IO_REQS,  MAX(PI.MAX_IO_BYTES) MAX_IO_BYTES,  MAX(PI.MAX_BUFFER_GETS) MAX_BUFFER_GETS,  SUM(PI.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(PI.IMQ_COUNT) IMQ_COUNT,  SUM(PI.WAIT_COUNT) WAIT_COUNT,  SUM(PI.CPU_COUNT) CPU_COUNT,	SUM(PI.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  XMLELEMENT( &quot;session&quot;,  XMLATTRIBUTES( INST_ID AS &quot;inst_id&quot;,  PROCESS_NAME AS &quot;process_name&quot;,  SID AS &quot;session_id&quot;,  SESSION_SERIAL# AS &quot;session_serial&quot;,  PX_SERVER_GROUP AS &quot;server_group&quot;,  PX_SERVER_SET AS &quot;server_set&quot;,  PX_SERVER# AS &quot;server_num&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES( 'monitor' AS &quot;type&quot;),  NVL2(MAX(ELAPSED_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('el
apsed_time' AS &quot;name&quot;),  MAX(ELAPSED_TIME)),	NULL),	NVL2(MAX(QUEUING_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX(QUEUING_TIME)),  NULL),  NVL2(MAX(CPU_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MAX(CPU_TIME)),  NULL),  NVL2(MAX(USER_IO_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MAX(USER_IO_WAIT_TIME)),  NULL),  NVL2(MAX(APPLICATION_WAIT_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MAX(APPLICATION_WAIT_TIME)),  NULL),  NVL2(MAX(CONCURRENCY_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),	MAX(CONCURRENCY_WAIT_TIME)),  NULL),  NVL2(MAX(CLUSTER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MAX(CLUSTER_WAIT_TIME)),  NULL),  NVL2(MAX(PLSQL_EXEC_TIME),  XMLELEMENT(
&quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MAX(PLSQL_EXEC_TIME)),  NULL),  NVL2(MAX(JAVA_EXEC_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MAX(JAVA_EXEC_TIME)),  NULL),  NVL2(MAX(OTHER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'other_wait_time' AS &quot;name&quot;),  MAX(OTHER_WAIT_TIME)),  NULL),  NVL2(MAX(FETCHES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MAX(FETCHES)),  NULL),  NVL2(MAX(BUFFER_GETS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MAX(BUFFER_GETS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),  MAX(READ_REQS)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_req
s' AS &quot;name&quot;),  MAX(READ_REQS)),  NULL),  NVL2(MAX(READ_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MAX(READ_BYTES)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(WRITE_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MAX(WRITE_BYTES)),	NULL),	NVL2(MAX(IO_UNC_BYTES),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MAX(IO_UNC_BYTES)),  NULL),  NVL2(MAX(IO_ELIG_BYTES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MAX(IO_ELIG_BYTES)),  NULL),  NVL2(MAX(IO_RET_BYTES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),	MAX(IO_RET_BYTES)),  NULL),  CASE WHEN MAX(IO_INTER_BYTES) IS NULL OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_INTER_BYTES) = MAX(IO_BYTES) OR NVL(MAX(IO_ELIG_BYTES),  0) = 0 THEN
NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),	ROUND(MAX(IO_BYTES) / DECODE(MAX(IO_INTER_BYTES),  0,  1,  MAX(IO_INTER_BYTES)),  2)) END,  CASE WHEN NVL(MAX(IO_ELIG_BYTES),  0) = 0 OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_UNC_BYTES) = MAX(IO_RET_BYTES) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,	ROUND(100* (GREATEST( NVL(MAX(IO_UNC_BYTES), 0),  NVL(MAX(IO_ELIG_BYTES), 0)) - MAX(IO_RET_BYTES)) / MAX(IO_ELIG_BYTES),  2))) END),  CASE WHEN SUM(PI.ACTIVITY_COUNT) &gt; 0 AND :B33 = 1 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( TO_CHAR(MIN(PI.ACTIVITY_START),  :B12 ) AS &quot;first_sample_time&quot;,  TO_CHAR(MAX(PI.ACTIVITY_END),  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((MAX(PI.ACTIVITY_END) - MIN(PI.ACTIVITY_START)) * 3600 * 24) + 1 AS &quot;duration&quot;,  SUM(PI.ACTIVITY_COUNT) AS &quot;count&quot;,  SUM(PI.IMQ_COUNT) AS &quot;i
mq_count&quot;,  SUM(PI.CPU_COUNT) AS &quot;cpu_count&quot;,  SUM(PI.WAIT_COUNT) AS &quot;wait_count&quot;,  SUM(PI.OTHER_SQL_COUNT)AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),	XMLAGG( NVL2(ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( PI.ACTIVITY_TYPE AS &quot;class&quot;,  PI.EVENT_NAME AS &quot;event&quot;),  ACTIVITY_COUNT),  NULL) ORDER BY PI.ACTIVITY_TYPE,  PI.EVENT_NAME)) ELSE NULL END,  CASE WHEN :B60 = 1 AND PI.HAS_OTHER_XML = 'Y' THEN (SELECT XMLTYPE(OTHER_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = PI.INST_ID AND MON.KEY = PI.KEY AND MON.SID = PI.SID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END) PX_SESSION_XML FROM (SELECT MO.HAS_OTHER_XML,  MO.KEY,  MO.INST_ID,  DECODE(MO.PROCESS_NAME,  'ora',  'PX Coordinator',	MO.PROCESS_NAME) PROCESS_NAME,	MO.SID,  MO.SESSION_SERIAL#,  MO.PX_SERVER_GROUP,  MO.PX_SERVER_SET,  MO.PX_SERVER#,  AS
H0.ACTIVITY_TYPE,  ASH0.EVENT_NAME,  MAX(MO.IO_REQS) MAX_IO_REQS,  MAX(MO.IO_BYTES) MAX_IO_BYTES,  MAX(MO.BUFFER_GETS) MAX_BUFFER_GETS,  MAX(MO.ELAPSED_TIME) MAX_ELAPSED_TIME,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.ACTIVITY_COUNT)) ACTIVITY_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,  NULL,  ASH0.IMQ_COUNT)) IMQ_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.WAIT_COUNT)) WAIT_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,  NULL,  ASH0.CPU_COUNT)) CPU_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.OTHER_SQL_COUNT)) OTHER_SQL_COUNT,	MIN(ASH0.ACTIVITY_START) ACTIVITY_START,  MAX(ASH0.ACTIVITY_END) ACTIVITY_END,	MAX(DECODE(MO.ELAPSED_TIME,  0,  NULL,	MO.ELAPSED_TIME)) ELAPSED_TIME,  MAX(DECODE(MO.QUEUING_TIME,  0,  NULL,  MO.QUEUING_TIME)) QUEUING_TIME,  MAX(DECODE(MO.CPU_TIME,  0,  NULL,  CPU_TIME)) CPU_TIME,  MAX(DECODE(MO.FETCHES,  0,	NULL,  FETCHES)) FETCHES,  MAX(DECODE(MO.BUFFER_GETS,  0,  NULL,  MO.BUFFER_GETS)) BUFFER_GETS,  MAX(DECODE(MO.I
O_INTER_BYTES,	0,  NULL,  MO.IO_INTER_BYTES)) IO_INTER_BYTES,	MAX(DECODE(MO.READ_REQS,  0,  NULL,  MO.READ_REQS)) READ_REQS,	MAX(DECODE(MO.READ_BYTES,  0,  NULL,  MO.READ_BYTES)) READ_BYTES,  MAX(DECODE(MO.WRITE_REQS,  0,  NULL,  MO.WRITE_REQS)) WRITE_REQS,  MAX(DECODE(MO.WRITE_BYTES,  0,  NULL,  MO.WRITE_BYTES)) WRITE_BYTES,  MAX(DECODE(MO.IO_BYTES,  0,  NULL,	MO.IO_BYTES)) IO_BYTES,  MAX(DECODE(MO.IO_UNC_BYTES,  0,  NULL,  MO.IO_UNC_BYTES)) IO_UNC_BYTES,  MAX(DECODE(MO.IO_ELIG_BYTES,	0,  NULL,  MO.IO_ELIG_BYTES)) IO_ELIG_BYTES,  MAX(DECODE(MO.IO_RET_BYTES,  0,  NULL,  MO.IO_RET_BYTES)) IO_RET_BYTES,  MAX(DECODE(MO.APPLICATION_WAIT_TIME,  0,  NULL,	MO.APPLICATION_WAIT_TIME)) APPLICATION_WAIT_TIME,  MAX(DECODE(MO.CONCURRENCY_WAIT_TIME,  0,  NULL,  MO.CONCURRENCY_WAIT_TIME)) CONCURRENCY_WAIT_TIME,  MAX(DECODE(MO.CLUSTER_WAIT_TIME,  0,  NULL,  MO.CLUSTER_WAIT_TIME)) CLUSTER_WAIT_TIME,  MAX(DECODE(MO.USER_IO_WAIT_TIME,  0,  NULL,  MO.USER_IO_WAIT_TIME)) USER_IO_WAIT_TIME,  MAX(DECOD
E(PLSQL_EXEC_TIME,  0,	NULL,  PLSQL_EXEC_TIME)) PLSQL_EXEC_TIME,  MAX(DECODE(MO.JAVA_EXEC_TIME,  0,  NULL,  MO.JAVA_EXEC_TIME)) JAVA_EXEC_TIME,  MAX(DECODE(MO.OTHER_WAIT_TIME,  0,  NULL,  MO.OTHER_WAIT_TIME)) OTHER_WAIT_TIME FROM MONITOR_DATA MO,  (SELECT ASH1.INST_ID,	ASH1.SESSION_ID,  ASH1.ACTIVITY_TYPE,  ASH1.EVENT_NAME,  SUM(ASH1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(ASH1.IMQ_COUNT) IMQ_COUNT,  SUM(ASH1.WAIT_COUNT) WAIT_COUNT,  SUM(ASH1.CPU_COUNT) CPU_COUNT,  SUM(ASH1.OTHER_SQL_COUNT)OTHER_SQL_COUNT,	MIN(ASH1.ACTIVITY_START) ACTIVITY_START,  MAX(ASH1.ACTIVITY_END) ACTIVITY_END FROM ASH_DATA ASH1 GROUP BY ASH1.INST_ID,  ASH1.SESSION_ID,  ASH1.ACTIVITY_TYPE,	ASH1.EVENT_NAME) ASH0 WHERE MO.INST_ID = ASH0.INST_ID(+) AND MO.SID = ASH0.SESSION_ID(+) AND (:B70 = 1 OR :B69 = 1) GROUP BY MO.INST_ID,  MO.KEY,  MO.HAS_OTHER_XML,  MO.PROCESS_NAME,	MO.SID,  MO.SESSION_SERIAL#,  MO.PX_SERVER_GROUP,  MO.PX_SERVER_SET,  MO.PX_SERVER#,  ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME) PI WHERE (:B70 = 1)
GROUP BY PI.INST_ID,  PI.KEY,  PI.HAS_OTHER_XML,  PI.SID,  PI.PROCESS_NAME,  PI.SESSION_SERIAL#,  PI.PX_SERVER_GROUP,  PI.PX_SERVER_SET,  PI.PX_SERVER#) PX_SESSION) PX_SESSIONS,  (SELECT XMLELEMENT( &quot;instances&quot;,  XMLATTRIBUTES( MAX(PX_INSTANCE.ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PX_INSTANCE.IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PX_INSTANCE.CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PX_INSTANCE.WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PX_INSTANCE.OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;,	MAX(PX_INSTANCE.ELAPSED_TIME) AS &quot;max_elapsed_time&quot;,	MAX(PX_INSTANCE.BUFFER_GETS) AS &quot;max_buffer_gets&quot;,  MAX(PX_INSTANCE.IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PX_INSTANCE.IO_BYTES) AS &quot;max_io_bytes&quot;),  XMLAGG(PX_INSTANCE.PX_INSTANCES_XML ORDER BY INST_ID)) FROM (SELECT PI.INST_ID,  MAX(PI.ELAPSED_TIME) ELAPSED_TIME,  MAX(PI.IO_REQS) IO_REQS,  MAX(PI.IO_BYTES) IO_BYTES,	MAX(PI.BUFFER_GETS) BUFFER_GETS,  SUM(PI
.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(PI.IMQ_COUNT) IMQ_COUNT,	SUM(PI.WAIT_COUNT) WAIT_COUNT,	SUM(PI.CPU_COUNT) CPU_COUNT,  SUM(PI.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	XMLELEMENT( &quot;instance&quot;,  XMLATTRIBUTES( INST_ID AS &quot;inst_id&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES( 'monitor' AS &quot;type&quot;),  NVL2(MAX(ELAPSED_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),	MAX(ELAPSED_TIME)),  NULL),  NVL2(MAX(QUEUING_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX(QUEUING_TIME)),  NULL),  NVL2(MAX(CPU_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MAX(CPU_TIME)),  NULL),  NVL2(MAX(USER_IO_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MAX(USER_IO_WAIT_TIME)),  NULL),  NVL2(MAX(APPLICATION_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name
&quot;),  MAX(APPLICATION_WAIT_TIME)),	NULL),	NVL2(MAX(CONCURRENCY_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MAX(CONCURRENCY_WAIT_TIME)),  NULL),  NVL2(MAX(CLUSTER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MAX(CLUSTER_WAIT_TIME)),  NULL),  NVL2(MAX(PLSQL_EXEC_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MAX(PLSQL_EXEC_TIME)),  NULL),  NVL2(MAX(JAVA_EXEC_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MAX(JAVA_EXEC_TIME)),  NULL),  NVL2(MAX(OTHER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'other_wait_time' AS &quot;name&quot;),	MAX(OTHER_WAIT_TIME)),	NULL),	NVL2(MAX(FETCHES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MAX(FETCHES)),  NULL),  NVL2(MAX(BUFFER_GETS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(
'buffer_gets' AS &quot;name&quot;),  MAX(BUFFER_GETS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),	MAX(READ_REQS)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  MAX(WRITE_REQS)),	NULL),	NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MAX(READ_REQS)),	NULL),	NVL2(MAX(READ_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),	MAX(READ_BYTES)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(WRITE_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),	MAX(WRITE_BYTES)),  NULL),  NVL2(MAX(IO_UNC_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MAX(IO_UNC_BYTES)),  NULL),  NVL2(MAX(IO_EL
IG_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MAX(IO_ELIG_BYTES)),  NULL),  NVL2(MAX(IO_RET_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  MAX(IO_RET_BYTES)),  NULL),  CASE WHEN MAX(IO_INTER_BYTES) IS NULL OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_INTER_BYTES) = MAX(IO_BYTES) OR NVL(MAX(IO_ELIG_BYTES),	0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MAX(IO_BYTES)/ DECODE(MAX(IO_INTER_BYTES),  0,  1,  MAX(IO_INTER_BYTES)),  2)) END,  CASE WHEN NVL(MAX(IO_ELIG_BYTES),  0) = 0 OR NVL(MAX(IO_BYTES),	0) = 0 OR MAX(IO_UNC_BYTES) = MAX(IO_RET_BYTES) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100* (GREATEST( NVL(MAX(IO_UNC_BYTES),  0),  NVL(MAX(IO_ELIG_BYTES),  0)) - MAX(IO_RET_BYTES)) / MAX(IO_ELIG_BYTES),  2))) END),  CASE WHEN :B33 = 1 AND SUM(PI
.ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,	XMLATTRIBUTES( TO_CHAR(MIN(PI.ACTIVITY_START),	:B12 ) AS &quot;start_time&quot;,  TO_CHAR(MAX(PI.ACTIVITY_END),  :B12 ) AS &quot;end_time&quot;,  ROUND((MAX(PI.ACTIVITY_END) - MIN(PI.ACTIVITY_START)) * 3600 * 24) + 1 AS &quot;duration&quot;,  SUM(PI.ACTIVITY_COUNT) AS &quot;count&quot;,  SUM(PI.IMQ_COUNT) AS &quot;imq_count&quot;,  SUM(PI.WAIT_COUNT) AS &quot;wait_count&quot;,  SUM(PI.CPU_COUNT) AS &quot;cpu_count&quot;,  SUM(PI.OTHER_SQL_COUNT) AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  XMLAGG( NVL2(ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( PI.ACTIVITY_TYPE AS &quot;class&quot;,  PI.EVENT_NAME AS &quot;event&quot;),  ACTIVITY_COUNT),  NULL) ORDER BY PI.ACTIVITY_TYPE,	PI.EVENT_NAME)) ELSE NULL END) PX_INSTANCES_XML FROM (SELECT MO.INST_ID,  ASH.ACTIVITY_TYPE,  ASH.EVENT_NAME,  ASH.ACTIVITY_COUNT,  ASH.IMQ_COUNT,  ASH.WAIT_COUNT,  ASH
.CPU_COUNT,  ASH.OTHER_SQL_COUNT,  ASH.ACTIVITY_START,	ASH.ACTIVITY_END,  MO.ELAPSED_TIME,  MO.QUEUING_TIME,  MO.CPU_TIME,  MO.APPLICATION_WAIT_TIME,	MO.CONCURRENCY_WAIT_TIME,  MO.CLUSTER_WAIT_TIME,  MO.USER_IO_WAIT_TIME,  MO.PLSQL_EXEC_TIME,  MO.JAVA_EXEC_TIME,  MO.OTHER_WAIT_TIME,  MO.FETCHES,  MO.BUFFER_GETS,  MO.IO_INTER_BYTES,  MO.IO_BYTES,  MO.READ_REQS,  MO.READ_BYTES,  MO.WRITE_REQS,  MO.WRITE_BYTES,  MO.IO_REQS,  MO.IO_UNC_BYTES,  MO.IO_ELIG_BYTES,  MO.IO_RET_BYTES FROM (SELECT MO0.INST_ID,  SUM(MO0.ELAPSED_TIME) ELAPSED_TIME,  SUM(MO0.QUEUING_TIME) QUEUING_TIME,  SUM(MO0.CPU_TIME) CPU_TIME,  SUM(MO0.FETCHES) FETCHES,  SUM(MO0.BUFFER_GETS) BUFFER_GETS,  SUM(MO0.IO_INTER_BYTES) IO_INTER_BYTES,  SUM(MO0.IO_BYTES) IO_BYTES,  SUM(MO0.READ_REQS) READ_REQS,  SUM(MO0.READ_BYTES) READ_BYTES,  SUM(MO0.WRITE_REQS) WRITE_REQS,	SUM(MO0.WRITE_BYTES) WRITE_BYTES,  SUM(MO0.IO_REQS) IO_REQS,  SUM(MO0.IO_UNC_BYTES) IO_UNC_BYTES,  SUM(MO0.IO_ELIG_BYTES) IO_ELIG_BYTES,  SUM(MO0.IO_RET_BYTES)
IO_RET_BYTES,  SUM(MO0.APPLICATION_WAIT_TIME) APPLICATION_WAIT_TIME,  SUM(MO0.CONCURRENCY_WAIT_TIME) CONCURRENCY_WAIT_TIME,  SUM(MO0.CLUSTER_WAIT_TIME) CLUSTER_WAIT_TIME,  SUM(MO0.USER_IO_WAIT_TIME) USER_IO_WAIT_TIME,  SUM(MO0.PLSQL_EXEC_TIME) PLSQL_EXEC_TIME,  SUM(MO0.JAVA_EXEC_TIME) JAVA_EXEC_TIME,  SUM(MO0.OTHER_WAIT_TIME) OTHER_WAIT_TIME FROM MONITOR_DATA MO0 GROUP BY MO0.INST_ID) MO,  (SELECT ASH0.INST_ID,	ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME,  SUM(ASH0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(ASH0.IMQ_COUNT) IMQ_COUNT,  SUM(ASH0.WAIT_COUNT) WAIT_COUNT,  SUM(ASH0.CPU_COUNT) CPU_COUNT,  SUM(ASH0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(ASH0.ACTIVITY_START) ACTIVITY_START,  MAX(ASH0.ACTIVITY_END) ACTIVITY_END FROM ASH_DATA ASH0 GROUP BY ASH0.INST_ID,	ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME) ASH,  MONITOR_AGG WHERE MO.INST_ID = ASH.INST_ID(+) AND MONITOR_AGG.DIST_INST_COUNT &gt; 0 ) PI GROUP BY PI.INST_ID)PX_INSTANCE) PX_INSTANCES FROM MONITOR_AGG)) ELSE NULL END,  XPLAN_XML,  CASE WHEN :B4
3 = 1 THEN (SELECT XMLELEMENT( &quot;plan_monitor&quot;,  XMLATTRIBUTES(MAX(PLI.MAX_LINE_ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PLI.OVERALL_MAX_IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PLI.OVERALL_MAX_IO_BYTES) AS &quot;max_io_bytes&quot;,  MAX(PLI.MAX_LINE_IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PLI.MAX_LINE_CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PLI.MAX_LINE_WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PLI.MAX_LINE_OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;),  XMLAGG( XMLELEMENT( &quot;operation&quot;,  XMLATTRIBUTES( PLI.PLAN_LINE_ID AS &quot;id&quot;,  PLI.PARENT_ID AS &quot;parent_id&quot;,  PLI.OPERATION AS &quot;name&quot;,  PLI.OPTIONS AS &quot;options&quot;,	PLI.DEPTH AS &quot;depth&quot;,  PLI.POSITION AS &quot;position&quot;,	PLI.INACTIVE AS &quot;skp&quot;,  PLI.PX_TYPE AS &quot;px_type&quot;),	NVL2(PLI.OBJECT_NAME,  XMLELEMENT( &quot;object&quot;,	XMLATTRIBUTES(PLI.OBJECT_TYPE AS &quot;type&quot;),  XMLFOREST(PLI.OBJECT_OWNER
AS &quot;owner&quot;),	XMLFOREST(PLI.OBJECT_NAME AS &quot;name&quot;)),  NULL),  XMLFOREST(PLI.PARTITION_START AS &quot;partition_start&quot;,  PLI.PARTITION_STOP AS &quot;partition_stop&quot;),  CASE WHEN PLI.CARDINALITY IS NULL AND PLI.BYTES IS NULL AND PLI.COST IS NULL AND PLI.TEMP_SPACE IS NULL AND PLI.TIME IS NULL THEN NULL ELSE XMLELEMENT( &quot;optimizer&quot;,  NULL,  NVL2(PLI.CARDINALITY,  XMLFOREST(PLI.CARDINALITY AS &quot;cardinality&quot;),  NULL),  NVL2(PLI.BYTES,  XMLFOREST(PLI.BYTES AS &quot;bytes&quot;),	NULL),	NVL2(PLI.COST,	XMLFOREST(PLI.COST AS &quot;cost&quot;),  NULL),  NVL2(PLI.CPU_COST,  XMLFOREST(PLI.CPU_COST AS &quot;cpu_cost&quot;),	NULL),	NVL2(PLI.IO_COST,  XMLFOREST(PLI.IO_COST AS &quot;io_cost&quot;),  NULL),  NVL2(PLI.TEMP_SPACE,  XMLFOREST(PLI.TEMP_SPACE AS &quot;temp&quot;),  NULL),  NVL2(PLI.TIME,  XMLFOREST(PLI.TIME AS &quot;time&quot;),  NULL)) END,	XMLELEMENT( &quot;stats&quot;,	XMLATTRIBUTES('plan_monitor' AS &quot;type&quot;),  NVL2(PLI.FIR
ST_MOVE_TIME,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('first_active' AS &quot;name&quot;),  TO_CHAR(FIRST_MOVE_TIME,  :B12 )),  NULL),  CASE WHEN PLI.FIRST_MOVE_TIME != PLI.FIRST_CHANGE_TIME THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('first_row' AS &quot;name&quot;),  TO_CHAR(FIRST_CHANGE_TIME,  :B12 )) ELSE NULL END,  NVL2(PLI.LAST_MOVE_TIME,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('last_active' AS &quot;name&quot;),  TO_CHAR(LAST_MOVE_TIME,  :B12 )),  NULL),  CASE WHEN (PLI.FIRST_MOVE_TIME IS NULL OR PLI.LAST_MOVE_TIME IS NULL) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('duration' AS &quot;name&quot;),  ROUND((LAST_MOVE_TIME - FIRST_MOVE_TIME) * 3600 * 24)+1) END,	CASE WHEN (PLI.OVERALL_LAST_MOVE_TIME IS NULL OR PLI.LAST_MOVE_TIME IS NULL) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('from_most_recent' AS &quot;name&quot;),  ROUND((PLI.OVERALL_LAST_MOVE_TIME - PLI.LAST_MOVE_TIME) * 3600 * 24)) END,  NVL2(PLI.LAST_MOVE_TIME,  XMLELEM
ENT( &quot;stat&quot;,	XMLATTRIBUTES( 'from_sql_exec_start' AS &quot;name&quot;),  ROUND( (FIRST_MOVE_TIME - :B8 ) * 3600*24)),  NULL),  NVL2(PLI.PERCENT_COMPLETE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('percent_complete' AS &quot;name&quot;),  PLI.PERCENT_COMPLETE),  NULL),  NVL2(PLI.TIME_REMAINING,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('time_left' AS &quot;name&quot;),  PLI.TIME_REMAINING),  NULL),  CASE WHEN PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('starts' AS &quot;name&quot;),  PLI.STARTS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'max_starts' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_STARTS/1000000),  10000),	NULL) AS &quot;iid&quot;,  MOD(MAX_STARTS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_STARTS/10000000000)) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('dop' AS
&quot;name&quot;),  PLI.DOP) ELSE NULL END,  CASE WHEN NEED_ROWS IS NOT NULL AND PLI.FIRST_MOVE_TIME IS NOT NULL THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cardinality' AS &quot;name&quot;),	PLI.OUTPUT_ROWS) ELSE NULL END,  CASE WHEN PLI.NEED_ROWS IS NOT NULL AND PLI.DOP &gt; 0 AND PLI.MAX_OUTPUT_ROWS IS NOT NULL AND (PLI.FIRST_MOVE_TIME IS NOT NULL) THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_card' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_OUTPUT_ROWS/1000000),	10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_OUTPUT_ROWS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_OUTPUT_ROWS/10000000000)) ELSE NULL END,  CASE WHEN PLI.MEM &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('memory' AS &quot;name&quot;),  PLI.MEM) ELSE NULL END,  CASE WHEN PLI.MAX_MEM &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('max_memory' AS &quot;name&quot;),	PLI.MAX_MEM) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MIN_MAX_MEM IS NOT NULL AND PLI.MAX_MEM
&gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'min_max_mem' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MIN_MAX_MEM/1000000),  10000),  NULL) AS &quot;iid&quot;,	MOD(MIN_MAX_MEM,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MIN_MAX_MEM/10000000000)) ELSE NULL END,  CASE WHEN PLI.TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('temp' AS &quot;name&quot;),  PLI.TEMP) ELSE NULL END,  CASE WHEN PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('max_temp' AS &quot;name&quot;),  PLI.MAX_TEMP) ELSE NULL END,  CASE WHEN PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('spill_count' AS &quot;name&quot;),  PLI.SPILL_COUNT) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_MAX_TEMP IS NOT NULL AND PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_max_temp' AS &quot;name&quot;,  DECODE(:B68 ,	'Y',  MOD(TRUNC(MAX_MAX_TEMP/1000000),	10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_MAX_TEMP,  1000000)
AS &quot;sid&quot;),  TRUNC(PLI.MAX_MAX_TEMP/10000000000)) ELSE NULL END,  CASE WHEN PLI.READ_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  PLI.READ_REQS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_READ_REQS IS NOT NULL AND PLI.READ_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_read_reqs' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',	MOD(TRUNC(PLI.MAX_READ_REQS/1000000),  10000),	NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_READ_REQS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_READ_REQS/10000000000)) ELSE NULL END,	CASE WHEN PLI.READ_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  PLI.READ_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_READ_BYTES IS NOT NULL AND PLI.READ_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'max_read_bytes' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_READ_BYTES/1000000),  10000),  NULL
) AS &quot;iid&quot;,  MOD(PLI.MAX_READ_BYTES,	1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_READ_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.WRITE_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  PLI.WRITE_REQS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_WRITE_REQS IS NOT NULL AND PLI.WRITE_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_write_reqs' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_WRITE_REQS/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_WRITE_REQS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_WRITE_REQS/10000000000)) ELSE NULL END,  CASE WHEN PLI.WRITE_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  PLI.WRITE_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_WRITE_BYTES IS NOT NULL AND PLI.WRITE_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_write_bytes' AS &quot;name&quot;,
DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_WRITE_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_WRITE_BYTES,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_WRITE_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('io_inter_bytes' AS &quot;name&quot;),  PLI.IO_INTER_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_io_inter_bytes' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_IO_INTER_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_IO_INTER_BYTES, 1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_IO_INTER_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;
stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(PLI.IO_BYTES / DECODE(PLI.IO_INTER_BYTES,  0,  1,  PLI.IO_INTER_BYTES),  2)) ELSE NULL END),	NVL2(STAT_GID,	XMLELEMENT( &quot;rwsstats&quot;,  XMLATTRIBUTES( PLI.STAT_GID AS &quot;group_id&quot;),  DECODE(GID_ROWNUM,  1,  (SELECT XMLELEMENT( &quot;metadata&quot;,  NULL,  XMLAGG( XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( ROWNUM AS &quot;id&quot;,  NAME AS &quot;name&quot;,	DESCRIPTION AS &quot;desc&quot;,  TYPE AS &quot;type&quot;,  DECODE(FLAGS,  0,	NULL,  FLAGS) AS &quot;flags&quot;),  NULL) ORDER BY ID)) FROM V$SQL_MONITOR_STATNAME WHERE GROUP_ID = PLI.STAT_GID),  NULL),  NVL2(STAT1_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(1 AS &quot;id&quot;),  STAT1_VALUE),  NULL),  NVL2(STAT2_VALUE,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(2 AS &quot;id&quot;),  STAT2_VALUE),  NULL),  NVL2(STAT3_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(3 AS &quot;id&quot;),  STAT3_VALUE),  NULL),
 NVL2(STAT4_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(4 AS &quot;id&quot;),	STAT4_VALUE),  NULL),  NVL2(STAT5_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(5 AS &quot;id&quot;),  STAT5_VALUE),  NULL),  NVL2(STAT6_VALUE,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(6 AS &quot;id&quot;),  STAT6_VALUE),  NULL),  NVL2(STAT7_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(7 AS &quot;id&quot;),  STAT7_VALUE),  NULL),  NVL2(STAT8_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(8 AS &quot;id&quot;),	STAT8_VALUE),  NULL),  NVL2(STAT9_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(9 AS &quot;id&quot;),  STAT9_VALUE),  NULL),  NVL2(STAT10_VALUE,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES(10 AS &quot;id&quot;),  STAT10_VALUE),  NULL)),  NULL),  CASE WHEN PLI.LINE_ACTIVITY_COUNT &gt; 0 AND :B33 = 1 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( TO_CHAR(PLI.LINE_ACTIVITY_START,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR(PLI.LINE_ACTIVITY_END,
 :B12 ) AS &quot;end_time&quot;,  ROUND((PLI.LINE_ACTIVITY_END - PLI.LINE_ACTIVITY_START) * 3600*24) + 1 AS &quot;duration&quot;,  PLI.LINE_ACTIVITY_COUNT AS &quot;count&quot;,  PLI.LINE_IMQ_COUNT AS &quot;imq_count&quot;,	PLI.LINE_WAIT_COUNT AS &quot;wait_count&quot;,	PLI.LINE_CPU_COUNT AS &quot;cpu_count&quot;,  PLI.LINE_OTHER_SQL_COUNT AS &quot;other_sql_count&quot;,	:B40 AS &quot;cpu_cores&quot;,	:B39 AS &quot;hyperthread&quot;),  PLI.ACTIVITY_TOTAL,	PLI.PLAN_ACTIVITY_HISTO) ELSE NULL END) ORDER BY PLI.PLAN_LINE_ID) ) FROM (SELECT AT.MAX_LINE_ACTIVITY_COUNT,  PM.OVERALL_MAX_IO_REQS,	PM.OVERALL_MAX_IO_BYTES,  AT.MAX_LINE_IMQ_COUNT,  AT.MAX_LINE_CPU_COUNT,  AT.MAX_LINE_WAIT_COUNT,  AT.LINE_OTHER_SQL_COUNT,  AT.MAX_LINE_OTHER_SQL_COUNT,  PM.PLAN_LINE_ID,  PM.PARENT_ID,  PM.OPERATION,  PM.OPTIONS,	PM.DEPTH,  PM.POSITION,  PM.INACTIVE,  CASE WHEN PM.OPERATION = 'PX COORDINATOR' AND :B23 = 'Y' AND (PM.PX_SERVER_SET IS NOT NULL OR AH.PX_SERVER_SET IS NOT NULL) THEN 'QC' WHEN PM.PX_
SERVER_SET IS NOT NULL THEN TO_CHAR(PM.PX_SERVER_SET) WHEN AH.PX_SERVER_SET IS NOT NULL THEN TO_CHAR(AH.PX_SERVER_SET) WHEN (:B23 = 'N' OR (PM.LAST_CHANGE_TIME IS NULL AND AT.LINE_ACTIVITY_END IS NULL)) THEN NULL ELSE 'QC' END PX_TYPE,  PM.FIRST_CHANGE_TIME,  AT.LINE_ACTIVITY_START,  PM.LAST_CHANGE_TIME,  PM.OVERALL_LAST_CHANGE_TIME,  AT.LINE_ACTIVITY_END,	AT.OVERALL_LINE_ACTIVITY_END,  LEAST(NVL(AT.LINE_ACTIVITY_START,  PM.FIRST_CHANGE_TIME),  NVL(PM.FIRST_CHANGE_TIME,  AT.LINE_ACTIVITY_START)) FIRST_MOVE_TIME,	GREATEST(NVL(AT.LINE_ACTIVITY_END,  PM.LAST_CHANGE_TIME),  NVL(PM.LAST_CHANGE_TIME,  AT.LINE_ACTIVITY_END)) LAST_MOVE_TIME,  GREATEST(NVL(AT.OVERALL_LINE_ACTIVITY_END,  PM.OVERALL_LAST_CHANGE_TIME),	NVL(PM.OVERALL_LAST_CHANGE_TIME,  AT.OVERALL_LINE_ACTIVITY_END)) OVERALL_LAST_MOVE_TIME,  CASE WHEN PM.STARTS IS NOT NULL AND PM.STARTS &gt; 0 THEN 1 ELSE 0 END HAS_EXECUTED,	PM.OBJECT_NAME,  PM.OBJECT_TYPE,  PM.OBJECT_OWNER,  PM.PARTITION_START,  PM.PARTITION_STOP,  PM.CARDINAL
ITY,  PM.BYTES,  PM.COST,  PM.TEMP_SPACE,  PM.TIME,  PM.CPU_COST,  PM.IO_COST,	LO.PERCENT_COMPLETE,  LO.TIME_REMAINING,  PM.STARTS,  PM.DOP,  PM.MAX_STARTS,  PM.OUTPUT_ROWS,	PM.NEED_ROWS,  PM.MAX_OUTPUT_ROWS,  PM.MEM,  PM.MAX_MEM,  PM.MIN_MAX_MEM,  PM.TEMP,  PM.MAX_TEMP,  PM.SPILL_COUNT,  PM.MAX_MAX_TEMP,  PM.READ_REQS,  PM.MAX_READ_REQS,	PM.READ_BYTES,	PM.MAX_READ_BYTES,  PM.WRITE_REQS,  PM.MAX_WRITE_REQS,	PM.WRITE_BYTES,  PM.MAX_WRITE_BYTES,  PM.IO_INTER_BYTES,  PM.IO_BYTES,	PM.MAX_IO_INTER_BYTES,	AT.LINE_ACTIVITY_COUNT,  AT.LINE_IMQ_COUNT,  AT.LINE_WAIT_COUNT,  AT.LINE_CPU_COUNT,  AT.ACTIVITY_TOTAL,  AH.PLAN_ACTIVITY_HISTO,  PM.STAT_GID,  PM.GID_ROWNUM,  PM.STAT1_VALUE,  PM.STAT2_VALUE,  PM.STAT3_VALUE,  PM.STAT4_VALUE,  PM.STAT5_VALUE,  PM.STAT6_VALUE,  PM.STAT7_VALUE,	PM.STAT8_VALUE,  PM.STAT9_VALUE,  PM.STAT10_VALUE FROM (SELECT AT0.*,  MAX(LINE_ACTIVITY_END) OVER() OVERALL_LINE_ACTIVITY_END,  MAX(LINE_ACTIVITY_COUNT) OVER() MAX_LINE_ACTIVITY_COUNT,  MAX(LINE_IMQ_COUNT) O
VER() MAX_LINE_IMQ_COUNT,  MAX(LINE_CPU_COUNT) OVER() MAX_LINE_CPU_COUNT,  MAX(LINE_WAIT_COUNT) OVER() MAX_LINE_WAIT_COUNT,  MAX(LINE_OTHER_SQL_COUNT) OVER() MAX_LINE_OTHER_SQL_COUNT FROM (SELECT AD1.PLAN_LINE_ID,  MIN(AD1.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD1.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) LINE_ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) LINE_IMQ_COUNT,  SUM(AD1.WAIT_COUNT) LINE_WAIT_COUNT,  SUM(AD1.OTHER_SQL_COUNT) LINE_OTHER_SQL_COUNT,  SUM(AD1.CPU_COUNT) LINE_CPU_COUNT,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG(XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME) ACTIVITY_TOTAL FROM (SELECT AD0.PLAN_LINE_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  MIN(AD0.ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD0.ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTI
VITY_COUNT,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MAX(AD0.DFO_MOST_ACTIVE_IID) DFO_MOST_ACTIVE_IID,  MAX(AD0.DFO_MOST_ACTIVE_SID) DFO_MOST_ACTIVE_SID,  SUM(AD0.DFO_MOST_ACTIVE_COUNT) DFO_MOST_ACTIVE_COUNT FROM ASH_DATA AD0 WHERE AD0.PLAN_LINE_ID IS NOT NULL GROUP BY AD0.PLAN_LINE_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1 GROUP BY AD1.PLAN_LINE_ID) AT0) AT,	(SELECT AD2.PLAN_LINE_ID,  MIN(AD2.PX_SERVER_SET) PX_SERVER_SET,  MIN(AD2.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD2.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD2.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD2.IMQ_COUNT) IMQ_COUNT,  SUM(AD2.WAIT_COUNT) WAIT_COUNT,  SUM(AD2.CPU_COUNT) CPU_COUNT,  SUM(AD2.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  CASE WHEN :B29 = 1 AND SUM(AD2.ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_histogram&quot;,  XMLATTRIBUTES( :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,  T
O_CHAR( :B20 ,	:B12 ) AS &quot;start_time&quot;,  TO_CHAR(:B22 ,  :B12 ) AS &quot;end_time&quot;,  ROUND((:B22 -:B20 ) *3600*24) + 1 AS &quot;duration&quot;),  XMLAGG(XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),	AD2.ACTIVITY_BUCKET) ORDER BY AD2.BUCKET_NUM)) ELSE NULL END PLAN_ACTIVITY_HISTO FROM (SELECT AD1.PLAN_LINE_ID,  AD1.BUCKET_NUM,  MIN(AD1.PX_SERVER_SET) PX_SERVER_SET,  MIN(AD1.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD1.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  MIN(AD1.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD1.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) IMQ_COUNT,  SUM(AD1.WAIT_COUNT) WAIT_COUNT,  SUM(AD1.CPU_COUNT) CPU_COUNT,  SUM(AD1.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG(NVL2(AD1.ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;cl
ass&quot;,  AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT),  NULL) ORDER BY AD1.ACTIVITY_TYPE,  AD1.EVENT_NAME) ACTIVITY_BUCKET FROM (SELECT AD0.PLAN_LINE_ID,  AD0.PLAN_ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  MIN(NVL2(AD0.ACTIVITY_START,  AD0.PX_SERVER_SET,  NULL)) PX_SERVER_SET,  MIN(AD0.ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD0.ACTIVITY_END) LINE_ACTIVITY_END,  MIN(AD0.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD0.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT FROM ASH_DATA AD0 GROUP BY AD0.PLAN_LINE_ID,  AD0.PLAN_ACTIVITY_BUCKET_NUM,  AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME) AD1 GROUP BY AD1.PLAN_LINE_ID,	AD1.BUCKET_NUM) AD2 GROUP BY AD2.PLAN_LINE_ID) AH,  (SELECT LO.SQL_PLAN_LINE_ID PLAN_LINE_ID,  DECODE(SUM(LO.TOTALWORK),  0,  NULL,  ROUND(SUM(LO.SOFAR)*100/SUM
(LO.TOTALWORK))) PERCENT_COMPLETE,  MAX(LO.TIME_REMAINING) TIME_REMAINING FROM GV$SESSION_LONGOPS LO,  MONITOR_DATA MO WHERE (:B49 = 'Y' OR :B71 = 'DONE (ERROR)') AND LO.SQL_ID = :B9 AND LO.SQL_EXEC_START = :B8 AND LO.SQL_EXEC_ID = :B7 AND LO.INST_ID = MO.INST_ID AND LO.SID = MO.SID GROUP BY LO.SQL_PLAN_LINE_ID) LO,  (SELECT PM0.*,  CASE WHEN PM0.STARTS IS NULL OR PM0.STARTS = 0 OR PM0.OUTPUT_ROWS IS NULL THEN NULL ELSE 1 END NEED_ROWS,  ROW_NUMBER() OVER(PARTITION BY PM0.STAT_GID ORDER BY PM0.PLAN_LINE_ID ) GID_ROWNUM,  MAX(LAST_CHANGE_TIME) OVER() OVERALL_LAST_CHANGE_TIME,  MAX(MAX_IO_REQS) OVER() OVERALL_MAX_IO_REQS,  MAX(MAX_IO_BYTES) OVER() OVERALL_MAX_IO_BYTES FROM (SELECT /*+ leading(mo) use_hash(plm) */ PLM.PLAN_LINE_ID PLAN_LINE_ID,  PLM.PLAN_OPERATION OPERATION,	PLM.PLAN_OPTIONS OPTIONS,  MAX(PLM.PLAN_PARENT_ID) PARENT_ID,  MAX(PLM.PLAN_DEPTH) DEPTH,  MAX(PLM.PLAN_POSITION) POSITION,  MAX(PLM.PLAN_OPERATION_INACTIVE) INACTIVE,  MAX(PLM.PLAN_OBJECT_OWNER) OBJECT_OWNER,  MAX(P
LM.PLAN_OBJECT_NAME) OBJECT_NAME,  MAX(PLM.PLAN_OBJECT_TYPE) OBJECT_TYPE,  MAX(PLM.PLAN_COST) COST,  MAX(PLM.PLAN_CARDINALITY) CARDINALITY,  MAX(PLM.PLAN_BYTES) BYTES,  MAX(PLM.PLAN_CPU_COST) CPU_COST,  MAX(PLM.PLAN_IO_COST) IO_COST,  MAX(PLM.PLAN_TEMP_SPACE) TEMP_SPACE,  MAX(PLM.PLAN_TIME) TIME,  MAX(PLM.PLAN_PARTITION_START) PARTITION_START,  MAX(PLM.PLAN_PARTITION_STOP) PARTITION_STOP,  MIN(PLM.FIRST_CHANGE_TIME) FIRST_CHANGE_TIME,	MAX(PLM.LAST_CHANGE_TIME) LAST_CHANGE_TIME,  MIN(PLM.LAST_CHANGE_TIME) MIN_LAST_CHANGE_TIME,  MIN(NVL2(PLM.FIRST_CHANGE_TIME,  MO.PX_SERVER_SET,  NULL)) PX_SERVER_SET,  COUNT(CASE WHEN PLM.PAR IS NOT NULL AND PLM.STARTS IS NOT NULL AND PLM.STARTS &gt; 0 AND PLM.PLAN_LINE_ID != 0 AND PLM.PLAN_OPERATION != 'PX COORDINATOR' THEN 1 ELSE NULL END) DOP,  SUM(PLM.STARTS) STARTS,	MAX(NVL2(PAR,  PLM.STARTS * 10000000000 + PLM.ES,  NULL)) MAX_STARTS,  SUM(PLM.OUTPUT_ROWS) OUTPUT_ROWS,  MAX(NVL2(PAR,  PLM.OUTPUT_ROWS * 10000000000 +PLM.ES,  NULL)) MAX_OUTPUT_ROWS,
  SUM(PLM.WORKAREA_MEM) MEM,  SUM(PLM.WORKAREA_MAX_MEM) MAX_MEM,  MIN(NVL2(PAR,  PLM.WORKAREA_MAX_MEM * 10000000000 + PLM.ES,  NULL)) MIN_MAX_MEM,  SUM(PLM.WORKAREA_TEMPSEG) TEMP,  SUM(PLM.WORKAREA_MAX_TEMPSEG) MAX_TEMP,  MAX(NVL2(PAR,  PLM.WORKAREA_MAX_TEMPSEG * 10000000000 + PLM.ES,  NULL)) MAX_MAX_TEMP,  COUNT(PLM.WORKAREA_MAX_TEMPSEG) SPILL_COUNT,  SUM(PLM.PHYSICAL_READ_REQUESTS) READ_REQS,  MAX(NVL2(PAR,  PLM.PHYSICAL_READ_REQUESTS * 10000000000 + PLM.ES,  NULL)) MAX_READ_REQS,  SUM(PLM.PHYSICAL_READ_BYTES) READ_BYTES,  MAX(NVL2(PAR,  PLM.PHYSICAL_READ_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_READ_BYTES,  SUM(PLM.PHYSICAL_WRITE_REQUESTS) WRITE_REQS,  MAX(NVL2(PAR,	PLM.PHYSICAL_WRITE_REQUESTS * 10000000000 + PLM.ES,  NULL)) MAX_WRITE_REQS,  SUM(PLM.PHYSICAL_WRITE_BYTES) WRITE_BYTES,  MAX(NVL2(PAR,	PLM.PHYSICAL_WRITE_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_WRITE_BYTES,  NVL(SUM(PLM.PHYSICAL_READ_BYTES),  0) + NVL(SUM(PLM.PHYSICAL_WRITE_BYTES),  0) IO_BYTES,  SUM(NVL(PLM.PHYSICA
L_READ_REQUESTS,  0) + NVL(PLM.PHYSICAL_WRITE_REQUESTS,  0)) MAX_IO_REQS,  SUM(NVL(PLM.PHYSICAL_READ_BYTES,  0) + NVL(PLM.PHYSICAL_WRITE_BYTES,  0)) MAX_IO_BYTES,  SUM(PLM.IO_INTERCONNECT_BYTES) IO_INTER_BYTES,  MAX(NVL2(PAR,  PLM.IO_INTERCONNECT_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_IO_INTER_BYTES,  MAX(OTHERSTAT_GROUP_ID) STAT_GID,  NVL(DECODE(MAX(OTHERSTAT_1_TYPE),	3,  MAX(OTHERSTAT_1_VALUE),  4,  MAX(OTHERSTAT_1_VALUE),  6,  MIN(OTHERSTAT_1_VALUE),  7,  MIN(OTHERSTAT_1_VALUE),  NULL),  SUM(DECODE(OTHERSTAT_1_TYPE,  1,  OTHERSTAT_1_VALUE,  2,  OTHERSTAT_1_VALUE,  NULL))) STAT1_VALUE,	NVL(MOD((DECODE(MAX(OTHERSTAT_2_TYPE),	3,  MAX(OTHERSTAT_2_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),	4,  MAX(RMAX1 + OTHERSTAT_2_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_2_VALUE),  NULL),  6,  MIN(OTHERSTAT_2_VALUE),  NULL)),	10000000000000000),  SUM(DECODE(OTHERSTAT_2_TYPE,  1,  OTHERSTAT_2_VALUE,  2,  OTHERSTAT_2_VALUE,  NULL))) STAT2_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_3_TYPE),  3,  MAX(OTHERST
AT_3_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_3_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_3_VALUE),  NULL),  6,  MIN(OTHERSTAT_3_VALUE),	NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_3_TYPE,  1,	OTHERSTAT_3_VALUE,  2,	OTHERSTAT_3_VALUE,  NULL))) STAT3_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_4_TYPE),  3,  MAX(OTHERSTAT_4_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_4_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_4_VALUE),  NULL),  6,	MIN(OTHERSTAT_4_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_4_TYPE,  1,  OTHERSTAT_4_VALUE,  2,  OTHERSTAT_4_VALUE,  NULL))) STAT4_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_5_TYPE),  3,  MAX(OTHERSTAT_5_VALUE),	5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_5_VALUE),	7,  MIN(RMAX1 + OTHERSTAT_5_VALUE),  NULL),  6,  MIN(OTHERSTAT_5_VALUE),  NULL)),  10000000000000000),	SUM(DECODE(OTHERSTAT_5_TYPE,  1,  OTHERSTAT_5_VALUE,  2,  OTHERSTAT_5_VALUE,  NULL))) STAT5_VALUE,  NVL(MOD((DECODE(MAX(
OTHERSTAT_6_TYPE),  3,	MAX(OTHERSTAT_6_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,	MAX(RMAX1 + OTHERSTAT_6_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_6_VALUE),  NULL),  6,  MIN(OTHERSTAT_6_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_6_TYPE,  1,  OTHERSTAT_6_VALUE,  2,  OTHERSTAT_6_VALUE,  NULL))) STAT6_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_7_TYPE),  3,  MAX(OTHERSTAT_7_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_7_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_7_VALUE),  NULL),  6,  MIN(OTHERSTAT_7_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_7_TYPE,	1,  OTHERSTAT_7_VALUE,	2,  OTHERSTAT_7_VALUE,	NULL))) STAT7_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_8_TYPE),  3,  MAX(OTHERSTAT_8_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_8_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_8_VALUE),	NULL),	6,  MIN(OTHERSTAT_8_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_8_TYPE,  1,  OTHERSTAT_8_VALUE,  2,  OTHERSTAT_8_VALUE,  NULL)))
 STAT8_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_9_TYPE),  3,  MAX(OTHERSTAT_9_VALUE),  5,	DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_9_VALUE),  7,	MIN(RMAX1 + OTHERSTAT_9_VALUE),  NULL),  6,  MIN(OTHERSTAT_9_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_9_TYPE,  1,  OTHERSTAT_9_VALUE,  2,  OTHERSTAT_9_VALUE,  NULL))) STAT9_VALUE,	NVL(MOD((DECODE(MAX(OTHERSTAT_10_TYPE),  3,  MAX(OTHERSTAT_10_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_10_VALUE),	7,  MIN(RMAX1 + OTHERSTAT_10_VALUE),  NULL),  6,  MIN(OTHERSTAT_10_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_10_TYPE,  1,  OTHERSTAT_10_VALUE,  2,  OTHERSTAT_10_VALUE,  NULL))) STAT10_VALUE FROM (SELECT A.*,  OTHERSTAT_1_VALUE * 10000000000000000 RMAX1,  A.INST_ID * 1000000 + A.SID ES,  DECODE(A.PROCESS_NAME,  'ora',  NULL,  1) PAR FROM GV$ALL_SQL_PLAN_MONITOR A) PLM,  MONITOR_DATA MO WHERE PLM.SQL_ID = :B9 AND PLM.SQL_EXEC_START = :B8 AND PLM.SQL_EXEC_ID = :B7 AND PLM.INST
_ID = MO.INST_ID AND PLM.INST_ID BETWEEN :B11 AND :B10 AND PLM.KEY = MO.KEY GROUP BY PLM.PLAN_LINE_ID,	PLM.PLAN_OPERATION,  PLM.PLAN_OPTIONS) PM0) PM WHERE AH.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND AT.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND LO.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND (:B21 IS NULL OR PM.PLAN_LINE_ID = :B21 )) PLI) ELSE NULL END,	CASE WHEN :B42 = 1 THEN DBMS_SQLTUNE.BUILD_STASH_XML( SESSION_ID=&gt;:B19 ,  SESSION_SERIAL=&gt;:B18 ,	SESSION_INST_ID=&gt;:B17 ,  PX_MODE=&gt;'yes',	START_TIME=&gt;:B20 ,  END_TIME=&gt;:B22 ,  MISSING_SECONDS=&gt; :B41 ,  INSTANCE_LOW_FILTER=&gt;:B11 ,  INSTANCE_HIGH_FILTER=&gt;:B10 ,  BUCKET_MAX_COUNT=&gt;NULL,  BUCKET_INTERVAL=&gt;:B26 ,  REPORT_LEVEL=&gt;'typical',  CPU_CORES=&gt;:B40 ,  IS_HYPER=&gt;:B39 ) ELSE NULL END),  (CASE WHEN :B38 = 1 THEN (SELECT XMLELEMENT( &quot;skewed_sessions&quot;,  XMLATTRIBUTES( DECODE(MIN(INST_ID),  NULL,  :B17 ,  MIN(INST_ID)) AS &quot;min_iid&quot;,	DECODE(MAX(INST_ID),  NULL,  :B17 ,  MAX(INST_ID)) AS
&quot;max_iid&quot;),  XMLAGG( XMLELEMENT( &quot;s&quot;,  XMLATTRIBUTES( INST_ID AS &quot;i&quot;),  SESSION_ID) ORDER BY INST_ID,  SESSION_ID)) FROM (SELECT SESS.* FROM (SELECT DECODE(AD.DFO_MOST_ACTIVE_IID,  :B17 ,  NULL,  AD.DFO_MOST_ACTIVE_IID) INST_ID,  AD.DFO_MOST_ACTIVE_SID SESSION_ID FROM ASH_DATA AD WHERE AD.DFO_MOST_ACTIVE_COUNT IS NOT NULL GROUP BY AD.DFO_MOST_ACTIVE_IID,  AD.DFO_MOST_ACTIVE_SID ORDER BY MAX(AD.DFO_MOST_ACTIVE_COUNT) DESC) SESS WHERE ROWNUM &lt;= 100)) ELSE NULL END),  (CASE WHEN :B37 = 1 THEN (SELECT XMLELEMENT( &quot;report_repository_summary&quot;,  CASE WHEN MA.MAX_DBOP_NAME IS NOT NULL THEN XMLELEMENT( &quot;dbop&quot;,  XMLATTRIBUTES('F' AS &quot;detail&quot;,  MA.MAX_DBOP_NAME AS &quot;dbop_name&quot;,  TO_CHAR(MA.MIN_FIRST_REFRESH_TIME,  :B12 ) AS &quot;dbop_exec_start&quot;,  MA.MAX_DBOP_EXEC_ID AS &quot;dbop_exec_id&quot;),  XMLFOREST( MA.MAX_STATUS AS &quot;status&quot;,  TO_CHAR(NVL(MA.MAX_SQL_EXEC_START,  MA.MIN_FIRST_REFRESH_TIME),  :B12 )AS
&quot;first_refresh_time&quot;,  TO_CHAR(MA.MAX_LAST_REFRESH_TIME,  :B12 )AS &quot;last_refresh_time&quot;,  MA.SUM_REFRESH_COUNT AS &quot;refresh_count&quot;,  MA.MAX_INST_ID AS &quot;inst_id&quot;,  MA.MAX_SESSION_ID AS &quot;session_id&quot;,  MA.MAX_SESSION_SERIAL AS &quot;session_serial&quot;,  MA.MAX_USERID AS &quot;user_id&quot;,  MA.MAX_USERNAME AS &quot;user&quot;,  MA.MAX_CON_ID AS &quot;con_id&quot;,	MA.MAX_CON_NAME AS &quot;con_name&quot;,  MA.MAX_MODULE AS &quot;module&quot;,	MA.MAX_ACTION AS &quot;action&quot;,  MA.MAX_SERVICE_NAME AS &quot;service&quot;,  MA.MAX_CLIENT_ID AS &quot;client_id&quot;,  MA.MAX_CLIENT_INFO AS &quot;client_info&quot;,  MA.MAX_PROGRAM AS &quot;program&quot;,  MA.MAX_PL_ENTRY_OID AS &quot;plsql_entry_object_id&quot;,  MA.MAX_PL_ENTRY_PROGID AS &quot;plsql_entry_subprogram_id&quot;,  MA.MAX_PL_OID AS &quot;plsql_object_id&quot;,  MA.MAX_PL_PROGID AS &quot;plsql_subprogram_id&quot;,  MA.MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,
MA.MAX_PX_DOP AS &quot;dop&quot;,  MA.MAX_PX_DOP_INSTANCES AS &quot;instances&quot;),  CASE WHEN MA.MAX_ERROR_NUMBER IS NULL THEN NULL ELSE XMLELEMENT( &quot;error&quot;,  XMLATTRIBUTES(MA.MAX_ERROR_NUMBER AS &quot;number&quot;,  MA.MAX_ERROR_FACILITY AS &quot;facility&quot;),  MA.MAX_ERROR_MESSAGE) END,  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('duration' AS &quot;name&quot;),  GREATEST(ROUND((MA.MAX_LAST_REFRESH_TIME- NVL(MA.MAX_SQL_EXEC_START,  MA.MIN_FIRST_REFRESH_TIME))*86400),  LEAST(MA.SUM_ELAPSED_TIME/1000000,	1),  CEIL(MA.MAX_QUEUING_TIME/1000000))),  DECODE(MA.SUM_ELAPSED_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MA.SUM_ELAPSED_TIME)),  DECODE(MA.MAX_QUEUING_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MA.MAX_QUEUING_TIME)),  DECODE(MA.SUM_CPU_TIME,  0,  NULL,  XMLELEMENT( &quot;s
tat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MA.SUM_CPU_TIME)),	DECODE(MA.SUM_USER_IO_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MA.SUM_USER_IO_WAIT_TIME)),  DECODE(MA.SUM_APPLICATION_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MA.SUM_APPLICATION_WAIT_TIME)),	DECODE(MA.SUM_CONCURRENCY_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MA.SUM_CONCURRENCY_WAIT_TIME)),  DECODE(MA.SUM_CLUSTER_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MA.SUM_CLUSTER_WAIT_TIME)),	DECODE(MA.SUM_PLSQL_EXEC_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MA.SUM_PLSQL_EXEC_TIME)),  DECODE(MA.SUM_JAVA_EXEC_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java
_exec_time' AS &quot;name&quot;),  MA.SUM_JAVA_EXEC_TIME)),  DECODE(MA.SUM_OTHER_WAIT_TIME,  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  MA.SUM_OTHER_WAIT_TIME)),  DECODE(MA.SUM_FETCHES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MA.SUM_FETCHES)),  DECODE(MA.SUM_BUFFER_GETS,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MA.SUM_BUFFER_GETS)),  DECODE(MA.SUM_READ_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MA.SUM_READ_REQS)),	DECODE(MA.SUM_READ_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MA.SUM_READ_BYTES)),  DECODE(MA.SUM_WRITE_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MA.SUM_WRITE_REQS)),  DECODE(MA.SUM_WRITE_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRI
BUTES('write_bytes' AS &quot;name&quot;),  MA.SUM_WRITE_BYTES)),  CASE WHEN MA.SUM_IO_INTER_BYTES IS NULL OR MA.SUM_IO_INTER_BYTES = MA.SUM_IO_BYTES OR MA.SUM_IO_BYTES = 0 OR NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MA.SUM_IO_BYTES / DECODE(MA.SUM_IO_INTER_BYTES,  0,  1,  MA.SUM_IO_INTER_BYTES),  2)) END,	CASE WHEN NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 OR MA.SUM_IO_BYTES = 0 OR MA.SUM_IO_UNC_BYTES = MA.SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100 * (GREATEST(MA.SUM_IO_UNC_BYTES,  MA.SUM_IO_ELIG_BYTES) - MA.SUM_IO_RET_BYTES) / MA.SUM_IO_ELIG_BYTES,  2))) END) ) ELSE XMLELEMENT( &quot;sql&quot;,  XMLATTRIBUTES( MA.MAX_SQL_ID AS &quot;sql_id&quot;,  TO_CHAR(MA.MAX_SQL_EXEC_START,  :B12 ) AS &quot;sql_exec_start&quot;,	MA.MAX_SQL_EXEC_ID AS &quot;sql_exec_id&quot;),  XMLFOREST(MA.MA
X_STATUS AS &quot;status&quot;,  SUBSTR(MA.SQLMON_TEXT,  1,  100) AS &quot;sql_text&quot;,  TO_CHAR(MA.MIN_FIRST_REFRESH_TIME,	:B12 ) AS &quot;first_refresh_time&quot;,  TO_CHAR(MA.MAX_LAST_REFRESH_TIME,  :B12 ) AS &quot;last_refresh_time&quot;,	MA.SUM_REFRESH_COUNT AS &quot;refresh_count&quot;,  MA.MAX_INST_ID AS &quot;inst_id&quot;,  MA.MAX_SESSION_ID AS &quot;session_id&quot;,  MA.MAX_SESSION_SERIAL AS &quot;session_serial&quot;,	MA.MAX_USERID AS &quot;user_id&quot;,  MA.MAX_USERNAME AS &quot;user&quot;,  MA.MAX_CON_ID AS &quot;con_id&quot;,  MA.MAX_CON_NAME AS &quot;con_name&quot;,  MA.MAX_MODULE AS &quot;module&quot;,  MA.MAX_ACTION AS &quot;action&quot;,  MA.MAX_SERVICE_NAME AS &quot;service&quot;,  MA.MAX_CLIENT_ID AS &quot;client_id&quot;,  MA.MAX_CLIENT_INFO AS &quot;client_info&quot;,  MA.MAX_PROGRAM AS &quot;program&quot;,  MA.MAX_PLAN_HASH_VALUE AS &quot;plan_hash&quot;,  MA.MAX_PL_ENTRY_OID AS &quot;plsql_entry_object_id&quot;,  MA.MAX_PL_ENTRY_PROGID AS &quot;plsql_ent
ry_subprogram_id&quot;,  MA.MAX_PL_OID AS &quot;plsql_object_id&quot;,	MA.MAX_PL_PROGID AS &quot;plsql_subprogram_id&quot;,  MA.MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,  MA.MAX_PX_DOP AS &quot;dop&quot;,	MA.MAX_PX_DOP_INSTANCES AS &quot;instances&quot;,  MA.SUM_SERVERS_REQUESTED AS &quot;px_servers_requested&quot;,  MA.SUM_SERVERS_ALLOCATED AS &quot;px_servers_allocated&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('duration' AS &quot;name&quot;),	GREATEST(ROUND((MA.MAX_LAST_REFRESH_TIME- MA.MAX_SQL_EXEC_START) * 86400),  LEAST(MA.SUM_ELAPSED_TIME/1000000,	1),  CEIL(MA.MAX_QUEUING_TIME/1000000))),  DECODE(MA.SUM_ELAPSED_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MA.SUM_ELAPSED_TIME)),  DECODE(MA.MAX_QUEUING_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MA.MAX_QUEUING_
TIME)),  DECODE(MA.SUM_CPU_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MA.SUM_CPU_TIME)),	DECODE(MA.SUM_USER_IO_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MA.SUM_USER_IO_WAIT_TIME)),  DECODE(MA.SUM_APPLICATION_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MA.SUM_APPLICATION_WAIT_TIME)),	DECODE(MA.SUM_CONCURRENCY_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MA.SUM_CONCURRENCY_WAIT_TIME)),  DECODE(MA.SUM_CLUSTER_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MA.SUM_CLUSTER_WAIT_TIME)),	DECODE(MA.SUM_PLSQL_EXEC_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MA.SUM_PLSQL_EXEC_TIME)),  DECODE(MA.SUM_JAVA_EXEC_TIME
,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MA.SUM_JAVA_EXEC_TIME)),  DECODE(MA.SUM_OTHER_WAIT_TIME,  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  MA.SUM_OTHER_WAIT_TIME)),  DECODE(MA.SUM_FETCHES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MA.SUM_FETCHES)),  DECODE(MA.SUM_BUFFER_GETS,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MA.SUM_BUFFER_GETS)),  DECODE(MA.SUM_READ_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MA.SUM_READ_REQS)),	DECODE(MA.SUM_READ_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MA.SUM_READ_BYTES)),  DECODE(MA.SUM_WRITE_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MA.SUM_WRITE_REQS)),  DECODE(MA.SUM_
WRITE_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MA.SUM_WRITE_BYTES)),  DECODE(MA.SUM_IO_UNC_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MA.SUM_IO_UNC_BYTES)),  DECODE(MA.SUM_IO_ELIG_BYTES,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MA.SUM_IO_ELIG_BYTES)),  DECODE(MA.SUM_IO_RET_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  MA.SUM_IO_RET_BYTES)),  CASE WHEN MA.SUM_IO_INTER_BYTES IS NULL OR MA.SUM_IO_INTER_BYTES = MA.SUM_IO_BYTES OR MA.SUM_IO_BYTES = 0 OR NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MA.SUM_IO_BYTES / DECODE(MA.SUM_IO_INTER_BYTES,	0,  1,	MA.SUM_IO_INTER_BYTES),  2)) END,  CASE WHEN NVL(MA.SUM_IO_ELIG_BYTES,	0) = 0 OR MA.SUM_IO_BYTES = 0 OR MA.SUM_IO_UNC_B
YTES = MA.SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100 * (GREATEST(MA.SUM_IO_UNC_BYTES,  MA.SUM_IO_ELIG_BYTES) - MA.SUM_IO_RET_BYTES) / MA.SUM_IO_ELIG_BYTES,	2))) END) ) END) FROM MONITOR_AGG MA) ELSE NULL END) FROM (SELECT CASE WHEN V1.XPLAN_XML IS NULL OR V1.XPLAN_XML.EXISTSNODE('/error') &gt; 0 THEN NULL ELSE V1.XPLAN_XML END XPLAN_XML FROM (SELECT CASE WHEN :B36 = 1 THEN DBMS_XPLAN.BUILD_PLAN_XML( TABLE_NAME=&gt;'gv$all_sql_plan',  PLAN_TAG=&gt;'plan',	FILTER_PREDS=&gt;:B35 ,  FORMAT=&gt;'-PROJECTION +ALIAS +ADAPTIVE') ELSE NULL END XPLAN_XML FROM DUAL) V1) CONST_VIEW</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="acmvv4fhdc9zh"></a>acmvv4fhdc9zh</td><td class='awrnc'><pre_sqltext class="awr">select obj#, type#, ctime, mtime, stime,  status,  dataobj#,  flags,  oid$,  spare1,  spare2,  spare3,  signature,  spare7,  spare8,  spare9,  nvl(dflcollid,  16382),  creappid,  creverid,  modappid,	modverid,  crepatchid,	modpatchid from obj$ where owner#=:1 and name=:2 and namespace=:3 and remoteowner is null and linkname is null and subname is null</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="b2a4zdu00qd3v"></a>b2a4zdu00qd3v</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '249';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bch1n63zxk221"></a>bch1n63zxk221</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '475';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="bhdvtsvjhgvrh"></a>bhdvtsvjhgvrh</td><td class='awrc'><pre_sqltext class="awr">SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bp4mjh3dc1y4y"></a>bp4mjh3dc1y4y</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '15';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="cnvn60d4ys1ym"></a>cnvn60d4ys1ym</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '462';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="cytuv95rat5h1"></a>cytuv95rat5h1</td><td class='awrnc'><pre_sqltext class="awr">LOCK TABLE &quot;CF1&quot; IN EXCLUSIVE MODE  NOWAIT </pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="dft6xuag41agd"></a>dft6xuag41agd</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '489';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="dk7wndm4trmxm"></a>dk7wndm4trmxm</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '262';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="dnznjspycqrhh"></a>dnznjspycqrhh</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '174';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="dpgskpjbnxu8n"></a>dpgskpjbnxu8n</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '32';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="f1g58g2a3cyvm"></a>f1g58g2a3cyvm</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '28';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f737cjs9htn1t"></a>f737cjs9htn1t</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '444';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fpx8qau059b6k"></a>fpx8qau059b6k</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '25';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fxm9n9b0fbh2s"></a>fxm9n9b0fbh2s</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '1';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="gdsqn03xtayhg"></a>gdsqn03xtayhg</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '347';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="grnj9m41xzwyv"></a>grnj9m41xzwyv</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '7';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="gta39sva2c0pj"></a>gta39sva2c0pj</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '165';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="gtppqnamwkfvz"></a>gtppqnamwkfvz</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '501';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '131072';
v_work_unit PLS_INTEGER := '64' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
</table>
<p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="43"></a>
<h2 class="awr">
Active Session History(ASH) Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#9981">Top SQL with Top Events</a></li>
<li class="awr"><a class="awr" href="#9980">Top SQL with Top Row Sources</a></li>
<li class="awr"><a class="awr" href="#9984">Top Sessions</a></li>
<li class="awr"><a class="awr" href="#9983">Top Blocking Sessions</a></li>
<li class="awr"><a class="awr" href="#9982">Top PL/SQL Procedures</a></li>
<li class="awr"><a class="awr" href="#9979">Top Events</a></li>
<li class="awr"><a class="awr" href="#9985">Top Event P1/P2/P3 Values</a></li>
<li class="awr"><a class="awr" href="#9978">Top DB Objects</a></li>
<li class="awr"><a class="awr" href="#9977">Activity Over Time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9981"></a>
<h3 class="awr">Top SQL with Top Events</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top events by DB Time	 for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event that the SQL is	   waiting on. </li>
<li class="awr"> % Row Source is the percentage of DB Time due to the row source for the     SQL waiting on the event. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top SQL by Top Wait Events"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">Top Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrc'>203653710</td><td align="right" class='awrc'>16547</td><td align="right" class='awrc'>58.50</td>
<td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>53.02</td><td class='awrc'>UPDATE</td><td align="right" class='awrc'>53.02</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrnc'><div class="hidden">203653710</div></td><td align="right" class='awrnc'><div class="hidden">16547</div></td><td align="right" class='awrnc'><div class="hidden">58.50026403802147509241330751628234465763</div></td>
<td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>4.24</td><td class='awrnc'>UPDATE</td><td align="right" class='awrnc'>4.21</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrc'>1497866750</td><td align="right" class='awrc'>10963</td><td align="right" class='awrc'>38.60</td>
<td class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>24.83</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>24.83</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">10963</div></td><td align="right" class='awrnc'><div class="hidden">38.60235873965851082555888047878894560817</div></td>
<td class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>10.76</td><td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>9.87</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">10963</div></td><td align="right" class='awrc'><div class="hidden">38.60235873965851082555888047878894560817</div></td>
<td class='awrc'>db file parallel read</td><td align="right" class='awrc'>1.74</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>1.74</td>
<td class='awrc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9980"></a>
<h3 class="awr">Top SQL with Top Row Sources</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top row sources by DB Time    for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Row Source is the percentage of DB Time spent on the row source by	   that SQL. </li>
<li class="awr"> % Event is the percentage of DB Time spent on the event by the      SQL executing the row source. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table display the Top SQLs with Top Row Sources"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">Top Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrc'>203653710</td><td align="right" class='awrc'>16547</td><td align="right" class='awrc'>58.50</td>
<td class='awrc'>UPDATE</td><td align="right" class='awrc'>58.06</td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>53.02</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrnc'>1497866750</td><td align="right" class='awrnc'>10963</td><td align="right" class='awrnc'>38.60</td>
<td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>37.61</td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>24.83</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9984"></a>
<h3 class="awr">Top Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9983"></a>
<h3 class="awr">Top Blocking Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9982"></a>
<h3 class="awr">Top PL/SQL Procedures</h3>
<ul>
<li class="awr"> 'PL/SQL entry subprogram' represents the application's top-level	 entry-point (procedure, function, trigger, package initialization	 or RPC call) into PL/SQL. </li>
<li class="awr"> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed	    at the point of sampling . If the value is 'SQL', it represents	   the percentage of time spent executing SQL for the particular	PL/SQL entry subprogram</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top PL/SQL procedures"><tr><th class="awrbg" scope="col">PL/SQL Entry Subprogram</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">PL/SQL Current Subprogram</th><th class="awrbg" scope="col">% Current</th></tr>
<tr><td scope="row" class='awrc'>USER1.SLOBUPDATE</td><td align="right" class='awrc'>58.97</td>
<td class='awrc'>SQL</td><td align="right" class='awrc'>58.97</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9979"></a>
<h3 class="awr">Top Events</h3>
<ul>
<li class="awr"> Top Events by DB Time </li>
<li class="awr"> % Activity is the percentage of DB Time due to the event</li>
</ul>
<table border="0" class="tdiff" summary="This table shows the top events"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Class</th><th class="awrbg" scope="col">Session Type</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>53.03</td><td align="right" class='awrc'>227.87</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block request</td><td class='awrnc'>Cluster</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>24.83</td><td align="right" class='awrnc'>106.69</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>10.90</td><td align="right" class='awrc'>46.84</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td class='awrnc'>User I/O</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>5.08</td><td align="right" class='awrnc'>21.83</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td class='awrc'>User I/O</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>7.47</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9985"></a>
<h3 class="awr">Top Event P1/P2/P3 Values</h3>
<ul>
<li class="awr"> Top Events by DB Time and the top P1/P2/P3 values for those events. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event	</li>
<li class="awr"> % Activity is the percentage of DB Time due to the event with the given     P1,P2,P3 Values.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top event P1/P2/P3 values"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">P1, P2, P3 Values</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Parameter 1</th><th class="awrbg" scope="col">Parameter 2</th><th class="awrbg" scope="col">Parameter 3</th></tr>
<tr><td scope="row" class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>24.83</td><td align="right" class='awrc'>&quot;9&quot;,&quot;15262594&quot;,&quot;1&quot;</td><td align="right" class='awrc'>0.01</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>class#</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>5.08</td><td align="right" class='awrnc'>&quot;9&quot;,&quot;2390727&quot;,&quot;1&quot;</td><td align="right" class='awrnc'>0.00</td>
<td class='awrnc'>file#</td><td class='awrnc'>block#</td><td class='awrnc'>blocks</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>&quot;1&quot;,&quot;61&quot;,&quot;61&quot;</td><td align="right" class='awrc'>1.49</td>
<td class='awrc'>files</td><td class='awrc'>blocks</td><td class='awrc'>requests</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9978"></a>
<h3 class="awr">Top DB Objects</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9977"></a>
<h3 class="awr">Activity Over Time</h3>
<ul>
<li class="awr"> Analysis period is divided into smaller time slots as indicated    in the 'Slot Time (Duration)'. </li>
<li class="awr"> Top 3 events are reported in each of those slots </li>
<li class="awr"> 'Slot Count' shows the number of ASH samples in that slot </li>
<li class="awr"> 'Event Count' shows the number of ASH samples waiting for    that event in that slot </li>
<li class="awr"> '% Event' is 'Event Count' over all ASH samples in the analysis period</li>
</ul>
<table border="0" class="tdiff" summary="This table show the activity in ASH over time"><tr><th class="awrbg" scope="col">Slot Time (Duration)</th><th class="awrbg" scope="col">Slot Count</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Count</th><th class="awrbg" scope="col">% Event</th></tr>
<tr><td align="right" class='awrc'>08:34:03   (57 secs)</td><td align="right" class='awrc'>1,572</td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>922</td><td align="right" class='awrc'>3.25</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">08:34:03   (57 secs)</div></td><td align="right" class='awrnc'><div class="hidden">1572</div></td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>325</td><td align="right" class='awrnc'>1.14</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">08:34:03   (57 secs)</div></td><td align="right" class='awrc'><div class="hidden">1572</div></td><td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>142</td><td align="right" class='awrc'>0.50</td></tr>
<tr><td align="right" class='awrnc'>08:35:00   (5.0 min)</td><td align="right" class='awrnc'>15,456</td><td class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>7,959</td><td align="right" class='awrnc'>28.02</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">08:35:00   (5.0 min)</div></td><td align="right" class='awrc'><div class="hidden">15456</div></td><td class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>3,892</td><td align="right" class='awrc'>13.70</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">08:35:00   (5.0 min)</div></td><td align="right" class='awrnc'><div class="hidden">15456</div></td><td class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>1,745</td><td align="right" class='awrnc'>6.14</td></tr>
<tr><td align="right" class='awrc'>08:40:00   (5.0 min)</td><td align="right" class='awrc'>11,377</td><td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>6,181</td><td align="right" class='awrc'>21.76</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">08:40:00   (5.0 min)</div></td><td align="right" class='awrnc'><div class="hidden">11377</div></td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>2,835</td><td align="right" class='awrnc'>9.98</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">08:40:00   (5.0 min)</div></td><td align="right" class='awrc'><div class="hidden">11377</div></td><td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>1,212</td><td align="right" class='awrc'>4.27</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="99994"></a>
<h2>ADDM Task ADDM:3889879926_136</h2>
<pre>
	  ADDM Report for Task &apos;ADDM:3889879926_136&apos;
	  ------------------------------------------

Analysis Period
---------------
AWR snapshot range from 135 to 136.
Time period starts at 14-FEB-20 08.34.04 AM
Time period ends at 14-FEB-20 08.45.04 AM

Analysis Target
---------------
Database &apos;P60SDB&apos; with DB ID 3889879926.
Database version 19.0.0.0.0.
ADDM performed an analysis of all instances.

Activity During the Analysis Period
-----------------------------------
Total database time was 288289 seconds.
The average number of active sessions was 436.8.

Summary of Findings
-------------------
   Description		      Active Sessions	   Recommendations
			      Percent of Activity
   -------------------------  -------------------  ---------------
1  Interconnect Latency       436.8 | 100	   1
2  Top SQL Statements	      434.2 | 99.41	   2
3  Global Cache Messaging     396.56 | 90.79	   1
4  Buffer Busy - Hot Objects  281.64 | 64.48	   0
5  &quot;User I/O&quot; wait Class	37.17 | 8.51	     0


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 436.14 active sessions, 100% of total activity.
---------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time.
The database was consuming 142509 kilo bits per second of interconnect
bandwidth.
3% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 95% for database lock management.
The average latency for 8K interconnect messages was 79799 microseconds.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p60sdb2  51.19	     ADDM:3889879926_2_136
    1	    p60sdb1  48.81	     ADDM:3889879926_1_136

   Recommendation 1: Host Configuration
   Estimated benefit is 436.8 active sessions, 100% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle&apos;s recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.
   Action
      Look at the instance level ADDM tasks for a list of interconnect devices
      used by a specific instance.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 396.56 active sessions, 90.79% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 396.56 active sessions, 90.79% of total activity.


Finding 2: Top SQL Statements
Impact is 433.55 active sessions, 99.41% of total activity.
-----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p60sdb2  51.51	     ADDM:3889879926_2_136
    1	    p60sdb1  48.49	     ADDM:3889879926_1_136

   Recommendation 1: SQL Tuning
   Estimated benefit is 260.43 active sessions, 59.62% of total activity.
   ----------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      &quot;35dumc2tpr9dv&quot;.
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 ))
	 AND (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 99% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.

   Recommendation 2: SQL Tuning
   Estimated benefit is 172.53 active sessions, 39.5% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      &quot;bhdvtsvjhgvrh&quot;.
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND
	 (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 99% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.


Finding 3: Global Cache Messaging
Impact is 395.96 active sessions, 90.79% of total activity.
-----------------------------------------------------------
Inter-instance messaging was consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p60sdb2  51.95	     ADDM:3889879926_2_136
    1	    p60sdb1  48.05	     ADDM:3889879926_1_136

   Recommendation 1: Application Analysis
   Estimated benefit is 396.56 active sessions, 90.79% of total activity.
   ----------------------------------------------------------------------
   Action
      Look at the &quot;Top SQL Statements&quot; finding for SQL statements consuming
      significant time on Cluster waits. For example, the UPDATE statement
      with SQL_ID &quot;35dumc2tpr9dv&quot; is responsible for 60% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Cluster&quot; was consuming significant database time.
      Impact is 396.56 active sessions, 90.79% of total activity.


Finding 4: Buffer Busy - Hot Objects
Impact is 281.21 active sessions, 64.48% of total activity.
-----------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p60sdb2  100	     ADDM:3889879926_2_136

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 281.64 active sessions, 64.48% of total activity.
	 Inter-instance messaging was consuming significant database time.
	 Impact is 396.56 active sessions, 90.79% of total activity.
	    Wait class &quot;Cluster&quot; was consuming significant database time.
	    Impact is 396.56 active sessions, 90.79% of total activity.


Finding 5: &quot;User I/O&quot; wait Class
Impact is 37.12 active sessions, 8.51% of total activity.
---------------------------------------------------------
Wait class &quot;User I/O&quot; was consuming significant database time.
The throughput of the I/O subsystem was not significantly lower than expected.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  54.72	     ADDM:3889879926_1_136
    2	    p60sdb2  45.28	     ADDM:3889879926_2_136

   No recommendations are available.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Instances that were analyzed:
-----------------------------
    Number  Name     Host Name		    Active Sessions  Percent of Activity
    ------  -------  ---------------------  ---------------  -------------------
    2	    p60sdb2  mcracpoc2.example.com  223.28	     51.19
    1	    p60sdb1  mcracpoc1.example.com  212.86	     48.81

Miscellaneous Information
-------------------------
Wait class &quot;Application&quot; was not consuming significant database time.
Wait class &quot;Commit&quot; was not consuming significant database time.
Wait class &quot;Concurrency&quot; was not consuming significant database time.
Wait class &quot;Configuration&quot; was not consuming significant database time.
Wait class &quot;Network&quot; was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.

</pre>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<p />
End of Report
</body></html>
Report written to awr_rac.html
SQL> Disconnected from Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0
NOTIFY  : 2020.02.14-08:45:34 : Compressing file: "awr.html".
NOTIFY  : 2020.02.14-08:45:34 : Compressing file: "awr_rac.html".
