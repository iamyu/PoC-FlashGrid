
































































































































PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


SQL*Plus: Release 19.0.0.0.0 - Production on Wed Feb 12 09:18:16 2020
Version 19.3.0.0.0

Copyright (c) 1982, 2019, Oracle.  All rights reserved.


SQL*Plus: Release 19.0.0.0.0 - Production on Wed Feb 12 09:18:16 2020
Version 19.3.0.0.0

Copyright (c) 1982, 2019, Oracle.  All rights reserved.

Last Successful login time: Wed Feb 12 2020 09:18:01 +08:00

Connected to:
Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL>   2    3    4    5    6  Last Successful login time: Wed Feb 12 2020 09:18:16 +08:00

Connected to:
Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL>   2    3    4    5    6  
   DB Id    DB Name	 Inst Num Instance
----------- ------------ -------- ------------
 2732778098 P80DB		1 p80db1

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> 
   DB Id    DB Name	 Inst Num Instance
----------- ------------ -------- ------------
 2732778098 P80DB		1 p80db1

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> 
Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt. Default value is 'html'.

   'html'	   HTML format (default)
   'text'	   Text format
   'active-html'   Includes Performance Hub active report




Type Specified: text


Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt. Default value is 'html'.

   'html'	   HTML format (default)
   'text'	   Text format
   'active-html'   Includes Performance Hub active report




Type Specified: html


Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
  2732778098	 2	P80DB	     p80db2	  mcracpoc2.ex
* 2732778098	 1	P80DB	     p80db1	  mcracpoc1.ex

Using 2732778098 for database Id
Using	       1 for instance number
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
  2732778098	 2	P80DB	     p80db2	  mcracpoc2.ex
* 2732778098	 1	P80DB	     p80db1	  mcracpoc1.ex

Using 2732778098 for database Id
Using	       1 for instance number


Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.




Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.



Listing the last day's Completed Snapshots

Listing the last day's Completed Snapshots
Instance     DB Name	  Snap Id	Snap Started	Snap Level
------------ ------------ ---------- ------------------ ----------

p80db1	     P80DB		 44  12 Feb 2020 07:50	  1
				 45  12 Feb 2020 08:17	  1
				 46  12 Feb 2020 08:28	  1
				 47  12 Feb 2020 08:30	  1
				 48  12 Feb 2020 08:33	  1
				 49  12 Feb 2020 08:36	  1
				 51  12 Feb 2020 08:39	  1
				 52  12 Feb 2020 08:49	  1
				 53  12 Feb 2020 08:54	  1
				 54  12 Feb 2020 09:04	  1
				 55  12 Feb 2020 09:07	  1
				 56  12 Feb 2020 09:18	  1
Instance     DB Name	  Snap Id	Snap Started	Snap Level
------------ ------------ ---------- ------------------ ----------

p80db1	     P80DB		 44  12 Feb 2020 07:50	  1
				 45  12 Feb 2020 08:17	  1
				 46  12 Feb 2020 08:28	  1
				 47  12 Feb 2020 08:30	  1
				 48  12 Feb 2020 08:33	  1
				 49  12 Feb 2020 08:36	  1
				 51  12 Feb 2020 08:39	  1
				 52  12 Feb 2020 08:49	  1
				 53  12 Feb 2020 08:54	  1
				 54  12 Feb 2020 09:04	  1
				 55  12 Feb 2020 09:07	  1
				 56  12 Feb 2020 09:18	  1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 55

End   Snapshot Id specified: 56



Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 55

End   Snapshot Id specified: 56




Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_1_55_56.txt.  To use this name,
press <return> to continue, otherwise enter an alternative.


Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_1_55_56.html.  To use this name,
press <return> to continue, otherwise enter an alternative.


Using the report name awr.txt

Using the report name awr.html

<html lang="en"><head><title>AWR Report for DB: P80DB, Inst: p80db1, Snaps: 55-56</title>
<style type="text/css">
body.awr {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black; background:White;}
pre.awr  {font:8pt Courier;color:black; background:White;}
pre_sqltext.awr  {white-space: pre-wrap;}
h1.awr	 {font:bold 20pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;border-bottom:1px solid #cccc99;margin-top:0pt; margin-bottom:0pt;padding:0px 0px 0px 0px;}
h2.awr	 {font:bold 18pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
h3.awr {font:bold 16pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
li.awr {font: 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;}
th.awrnobg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;padding-left:4px; padding-right:4px;padding-bottom:2px}
th.awrbg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#0066CC;padding-left:4px; padding-right:4px;padding-bottom:2px}
td.awrnc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;}
td.awrc    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;}
td.awrncbb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
td.awrncrb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-right: thin solid black;}
td.awrcrb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-right: thin solid black;}
td.awrclb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;}
td.awrcbb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
a.awr {font:bold 8pt Arial,Helvetica,sans-serif;color:#663300; vertical-align:top;margin-top:0pt; margin-bottom:0pt;}
td.awrnct {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:White;vertical-align:top;}
td.awrct   {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrncbbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;border-top: thin solid black;}
td.awrncrbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrcrbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrclbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrcbbt   {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;border-right: thin solid black;}
table.tdiff {  border_collapse: collapse; }
table.tscl {width: 600;}
table.tscl tbody, table.tscl thead { display: block; }
table.tscl thead tr th {height: 12px;line-height: 12px;}
table.tscl tbody { height: 100px;overflow-y: auto; overflow-x: hidden;}
table.tscl tbody td, thead th {width: 200;}
.hidden   {position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden;}
.pad   {margin-left:17px;}
.doublepad {margin-left:34px;}
</style></head><body class="awr">
<h1 class="awr">
WORKLOAD REPOSITORY report for

</h1>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays database instance information">
<tr><th class="awrbg" scope="col">DB Name</th><th class="awrbg" scope="col">DB Id</th><th class="awrbg" scope="col">Unique Name</th><th class="awrbg" scope="col">Role</th><th class="awrbg" scope="col">Edition</th><th class="awrbg" scope="col">Release</th><th class="awrbg" scope="col">RAC</th><th class="awrbg" scope="col">CDB</th></tr>
<tr><td scope="row" class='awrnc'>P80DB</td><td align="right" class='awrnc'>2732778098</td><td class='awrnc'>p80db</td><td class='awrnc'>PRIMARY</td><td class='awrnc'>EE</td><td class='awrnc'>19.0.0.0.0</td><td class='awrnc'>YES</td><td class='awrnc'>NO</td></tr>
</table>
<p />
<p />
<table border="0" class="tdiff" summary="This table displays database instance information">
<tr><th class="awrbg" scope="col">Instance</th><th class="awrbg" scope="col">Inst Num</th><th class="awrbg" scope="col">Startup Time</th></tr>
<tr><td scope="row" class='awrnc'>p80db1</td><td align="right" class='awrnc'>1</td><td class='awrnc'>12-Feb-20 07:39</td></tr>
</table>
<p />
<p />
<table border="0" width="600" class="tdiff" summary="This table displays host information">
<tr><th class="awrbg" scope="col">Host Name</th><th class="awrbg" scope="col">Platform</th><th class="awrbg" scope="col">CPUs</th><th class="awrbg" scope="col">Cores</th><th class="awrbg" scope="col">Sockets</th><th class="awrbg" scope="col">Memory (GB)</th></tr>
<tr><td scope="row" class='awrnc'>mcracpoc1.example.com</td><td class='awrnc'>Linux x86 64-bit</td><td align="right" class='awrnc'>  32</td><td align="right" class='awrnc'>  16</td><td align="right" class='awrnc'>	1</td><td align="right" class='awrnc'>	251.90</td></tr>
</table>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays snapshot information">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Snap Id</th><th class="awrbg" scope="col">Snap Time</th><th class="awrbg" scope="col">Sessions</th><th class="awrbg" scope="col">Cursors/Session</th><th class="awrbg" scope="col">Instances</th></tr>
<tr><td scope="row" class='awrnc'>Begin Snap:</td><td align="right" class='awrnc'>55</td><td align="center" class='awrnc'>12-Feb-20 09:07:41</td><td align="right" class='awrnc'>192</td><td align="right" class='awrnc'>      2.0</td><td align="right" class='awrnc'>2</td></tr>
<tr><td scope="row" class='awrc'>End Snap:</td><td align="right" class='awrc'>56</td><td align="center" class='awrc'>12-Feb-20 09:18:01</td><td align="right" class='awrc'>127</td><td align="right" class='awrc'>	1.0</td><td align="right" class='awrc'>2</td></tr>
<tr><td scope="row" class='awrnc'>Elapsed:</td><td class='awrnc'>&#160;</td><td align="center" class='awrnc'>		   10.34 (mins)</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DB Time:</td><td class='awrc'>&#160;</td><td align="center" class='awrc'>	       616.70 (mins)</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
</table>
<p />
<h3 class="awr"><a class="awr" name="99999"></a>Report Summary</h3>
<p />Top ADDM Findings by Average Active Sessions<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top ADDM findings by average active sessions"><tr><th class="awrbg" scope="col">Finding Name</th><th class="awrbg" scope="col">Avg active sessions of the task</th><th class="awrbg" scope="col">Percent active sessions of finding</th><th class="awrbg" scope="col">Task Name</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th></tr>
<tr><td class='awrc'>Top SQL Statements</td><td align="right" class='awrc'>59.68</td><td align="right" class='awrc'>98.94</td><td scope="row" class='awrc'>ADDM:2732778098_1_56</td><td class='awrc'>12-Feb-20 09:07</td><td class='awrc'>12-Feb-20 09:18</td></tr>
<tr><td class='awrnc'>Interconnect Latency</td><td align="right" class='awrnc'>59.68</td><td align="right" class='awrnc'>83.83</td><td scope="row" class='awrnc'>ADDM:2732778098_1_56</td><td class='awrnc'>12-Feb-20 09:07</td><td class='awrnc'>12-Feb-20 09:18</td></tr>
<tr><td class='awrc'>&quot;User I/O&quot; wait Class</td><td align="right" class='awrc'>59.68</td><td align="right" class='awrc'>72.49</td><td scope="row" class='awrc'>ADDM:2732778098_1_56</td><td class='awrc'>12-Feb-20 09:07</td><td class='awrc'>12-Feb-20 09:18</td></tr>
<tr><td class='awrnc'>Global Cache Messaging</td><td align="right" class='awrnc'>59.68</td><td align="right" class='awrnc'>21.67</td><td scope="row" class='awrnc'>ADDM:2732778098_1_56</td><td class='awrnc'>12-Feb-20 09:07</td><td class='awrnc'>12-Feb-20 09:18</td></tr>
<tr><td class='awrc'>Buffer Busy - Hot Objects</td><td align="right" class='awrc'>59.68</td><td align="right" class='awrc'>7.51</td><td scope="row" class='awrc'>ADDM:2732778098_1_56</td><td class='awrc'>12-Feb-20 09:07</td><td class='awrc'>12-Feb-20 09:18</td></tr>
</table><p />
<p />Load Profile<p />
<table border="0" width="600" class="tdiff" summary="This table displays load profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Per Second</th><th class="awrbg" scope="col">Per Transaction</th><th class="awrbg" scope="col">Per Exec</th><th class="awrbg" scope="col">Per Call</th></tr>
<tr><td scope="row" class='awrc'>DB Time(s):</td><td align="right" class='awrc'>	      59.6</td><td align="right" class='awrc'>		     0.3</td><td align="right" class='awrc'>	  0.05</td><td align="right" class='awrc'>     34.81</td></tr>
<tr><td scope="row" class='awrnc'>DB CPU(s):</td><td align="right" class='awrnc'>		4.4</td><td align="right" class='awrnc'>	       0.0</td><td align="right" class='awrnc'>      0.00</td><td align="right" class='awrnc'>	    2.56</td></tr>
<tr><td scope="row" class='awrc'>Background CPU(s):</td><td align="right" class='awrc'> 	      2.1</td><td align="right" class='awrc'>		    0.0</td><td align="right" class='awrc'>	 0.00</td><td align="right" class='awrc'>      0.00</td></tr>
<tr><td scope="row" class='awrnc'>Redo size (bytes):</td><td align="right" class='awrnc'>	1,799,788.6</td><td align="right" class='awrnc'>	   9,308.9</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Logical read (blocks):</td><td align="right" class='awrc'>	     18,831.2</td><td align="right" class='awrc'>	       97.4</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Block changes:</td><td align="right" class='awrnc'>		4,775.7</td><td align="right" class='awrnc'>		  24.7</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Physical read (blocks):</td><td align="right" class='awrc'>	      14,258.7</td><td align="right" class='awrc'>		73.8</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Physical write (blocks):</td><td align="right" class='awrnc'> 	  2,219.6</td><td align="right" class='awrnc'>		    11.5</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Read IO requests:</td><td align="right" class='awrc'>		14,257.3</td><td align="right" class='awrc'>		  73.7</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Write IO requests:</td><td align="right" class='awrnc'>	    2,126.7</td><td align="right" class='awrnc'>	      11.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Read IO (MB):</td><td align="right" class='awrc'>	       111.4</td><td align="right" class='awrc'>	       0.6</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Write IO (MB):</td><td align="right" class='awrnc'>		   17.3</td><td align="right" class='awrnc'>		   0.1</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM scan rows:</td><td align="right" class='awrc'>		 0.0</td><td align="right" class='awrc'>	       0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Session Logical Read IM:</td><td align="right" class='awrnc'> 	      0.0</td><td align="right" class='awrnc'>		     0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Global Cache blocks received:</td><td align="right" class='awrc'>		 9.6</td><td align="right" class='awrc'>	       0.1</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Global Cache blocks served:</td><td align="right" class='awrnc'>		45.6</td><td align="right" class='awrnc'>		0.2</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>User calls:</td><td align="right" class='awrc'>	       1.7</td><td align="right" class='awrc'>		     0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Parses (SQL):</td><td align="right" class='awrnc'>		   7.5</td><td align="right" class='awrnc'>		  0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Hard parses (SQL):</td><td align="right" class='awrc'> 	      0.3</td><td align="right" class='awrc'>		    0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL Work Area (MB):</td><td align="right" class='awrnc'>		 0.5</td><td align="right" class='awrnc'>		0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Logons:</td><td align="right" class='awrc'>		   0.2</td><td align="right" class='awrc'>		 0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>User logons:</td><td align="right" class='awrnc'>		  0.0</td><td align="right" class='awrnc'>		 0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Executes (SQL):</td><td align="right" class='awrc'>	       1,299.1</td><td align="right" class='awrc'>		 6.7</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Rollbacks:</td><td align="right" class='awrnc'>		0.0</td><td align="right" class='awrnc'>	       0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Transactions:</td><td align="right" class='awrc'>	       193.3</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
</table>
<p />
Instance Efficiency Percentages (Target 100%)
<p />
<table border="0" width="600" class="tdiff" summary="This table displays instance efficiency percentages">
<tr><td scope="row" class='awrc'>Buffer Nowait %:</td><td align="right" class='awrc'>		 99.99</td><td class='awrc'>Redo NoWait %:</td><td align="right" class='awrc'>		 100.00</td></tr>
<tr><td scope="row" class='awrnc'>Buffer  Hit	%:</td><td align="right" class='awrnc'> 	   24.27</td><td class='awrnc'>In-memory Sort %:</td><td align="right" class='awrnc'>		100.00</td></tr>
<tr><td scope="row" class='awrc'>Library Hit   %:</td><td align="right" class='awrc'>		 99.93</td><td class='awrc'>Soft Parse %:</td><td align="right" class='awrc'>		 95.39</td></tr>
<tr><td scope="row" class='awrnc'>Execute to Parse %:</td><td align="right" class='awrnc'>	      99.42</td><td class='awrnc'>Latch Hit %:</td><td align="right" class='awrnc'>	       99.96</td></tr>
<tr><td scope="row" class='awrc'>Parse CPU to Parse Elapsd %:</td><td align="right" class='awrc'>	     46.71</td><td class='awrc'>% Non-Parse CPU:</td><td align="right" class='awrc'>		99.98</td></tr>
<tr><td scope="row" class='awrnc'>Flash Cache Hit %:</td><td align="right" class='awrnc'>	      0.00</td></tr>
</table>

<p />Top 10 Foreground Events by Total Wait Time<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top 10 wait events by total wait time"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (sec)</th><th class="awrbg" scope="col">Avg Wait</th><th class="awrbg" scope="col">% DB time</th><th class="awrbg" scope="col">Wait Class</th></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>2,790,303</td><td align="right" class='awrc'>20.1K</td><td align="right" class='awrc'>7.20ms</td><td align="right" class='awrc'>54.3</td><td class='awrc'>User I/O</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>677,117</td><td align="right" class='awrnc'>6736.9</td><td align="right" class='awrnc'>9.95ms</td><td align="right" class='awrnc'>18.2</td><td class='awrnc'>User I/O</td></tr>
<tr><td scope="row" class='awrc'>DB CPU</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2722.9</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>7.4</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>614,167</td><td align="right" class='awrnc'>2577.3</td><td align="right" class='awrnc'>4.20ms</td><td align="right" class='awrnc'>7.0</td><td class='awrnc'>Cluster</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>467,175</td><td align="right" class='awrc'>1459</td><td align="right" class='awrc'>3.12ms</td><td align="right" class='awrc'>3.9</td><td class='awrc'>Cluster</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>407,257</td><td align="right" class='awrnc'>1254.8</td><td align="right" class='awrnc'>3.08ms</td><td align="right" class='awrnc'>3.4</td><td class='awrnc'>Cluster</td></tr>
<tr><td scope="row" class='awrc'>gc cr block lost</td><td align="right" class='awrc'>1,999</td><td align="right" class='awrc'>1057</td><td align="right" class='awrc'>528.78ms</td><td align="right" class='awrc'>2.9</td><td class='awrc'>Cluster</td></tr>
<tr><td scope="row" class='awrnc'>gc current block lost</td><td align="right" class='awrnc'>1,839</td><td align="right" class='awrnc'>977.7</td><td align="right" class='awrnc'>531.63ms</td><td align="right" class='awrnc'>2.6</td><td class='awrnc'>Cluster</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>7,421</td><td align="right" class='awrc'>621.8</td><td align="right" class='awrc'>83.79ms</td><td align="right" class='awrc'>1.7</td><td class='awrc'>Other</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>210,475</td><td align="right" class='awrnc'>336.9</td><td align="right" class='awrnc'>1.60ms</td><td align="right" class='awrnc'>.9</td><td class='awrnc'>Cluster</td></tr>
</table><p />
<p />Wait Classes by Total Wait Time<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays wait class statistics ordered by total wait time"><tr><th class="awrbg" scope="col">Wait Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (sec)</th><th class="awrbg" scope="col">Avg Wait Time</th><th class="awrbg" scope="col">% DB time</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>User I/O</td><td align="right" class='awrc'>3,556,148</td><td align="right" class='awrc'>26,845</td><td align="right" class='awrc'>7.55ms</td><td align="right" class='awrc'>72.6</td><td align="right" class='awrc'>43.3</td></tr>
<tr><td scope="row" class='awrnc'>Cluster</td><td align="right" class='awrnc'>1,955,092</td><td align="right" class='awrnc'>8,069</td><td align="right" class='awrnc'>4.13ms</td><td align="right" class='awrnc'>21.8</td><td align="right" class='awrnc'>13.0</td></tr>
<tr><td scope="row" class='awrc'>DB CPU</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2,723</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>7.4</td><td align="right" class='awrc'>4.4</td></tr>
<tr><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>197,180</td><td align="right" class='awrnc'>1,113</td><td align="right" class='awrnc'>5.64ms</td><td align="right" class='awrnc'>3.0</td><td align="right" class='awrnc'>1.8</td></tr>
<tr><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>158,567</td><td align="right" class='awrc'>1,095</td><td align="right" class='awrc'>6.91ms</td><td align="right" class='awrc'>3.0</td><td align="right" class='awrc'>1.8</td></tr>
<tr><td scope="row" class='awrnc'>Configuration</td><td align="right" class='awrnc'>541</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>184.63ms</td><td align="right" class='awrnc'>.3</td><td align="right" class='awrnc'>0.2</td></tr>
<tr><td scope="row" class='awrc'>Concurrency</td><td align="right" class='awrc'>1,526</td><td align="right" class='awrc'>65</td><td align="right" class='awrc'>42.87ms</td><td align="right" class='awrc'>.2</td><td align="right" class='awrc'>0.1</td></tr>
<tr><td scope="row" class='awrnc'>Application</td><td align="right" class='awrnc'>310</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>12.94ms</td><td align="right" class='awrnc'>.0</td><td align="right" class='awrnc'>0.0</td></tr>
<tr><td scope="row" class='awrc'>Commit</td><td align="right" class='awrc'>32</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6.73ms</td><td align="right" class='awrc'>.0</td><td align="right" class='awrc'>0.0</td></tr>
<tr><td scope="row" class='awrnc'>Network</td><td align="right" class='awrnc'>1,240</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>51.50us</td><td align="right" class='awrnc'>.0</td><td align="right" class='awrnc'>0.0</td></tr>
<tr><td scope="row" class='awrc'>Administrative</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>685.00us</td><td align="right" class='awrc'>.0</td><td align="right" class='awrc'>0.0</td></tr>
</table><p />

Host CPU
<p />
<table border="0" width="600" class="tdiff" summary="This table displays system load statistics">
<tr><th class="awrbg" scope="col">CPUs</th><th class="awrbg" scope="col">Cores</th><th class="awrbg" scope="col">Sockets</th><th class="awrbg" scope="col">Load Average Begin</th><th class="awrbg" scope="col">Load Average End</th><th class="awrbg" scope="col">%User</th><th class="awrbg" scope="col">%System</th><th class="awrbg" scope="col">%WIO</th><th class="awrbg" scope="col">%Idle</th></tr>
<tr><td align="right" class='awrc'>   32</td><td align="right" class='awrc'>   16</td><td align="right" class='awrc'>	 1</td><td align="right" class='awrc'>	21.52</td><td align="right" class='awrc'>  17.44</td><td align="right" class='awrc'>   6.9</td><td align="right" class='awrc'>	12.3</td><td align="right" class='awrc'>  42.4</td><td align="right" class='awrc'>  74.0</td></tr>
</table>
<p />
Instance CPU
<p />
<table border="0" width="600" class="tdiff" summary="This table displays CPU usage and wait statistics">
<tr><th class="awrbg" scope="col">%Total CPU</th><th class="awrbg" scope="col">%Busy CPU</th><th class="awrbg" scope="col">%DB time waiting for CPU (Resource Manager)</th></tr>
<tr><td align="right" class='awrc'>	 22.0</td><td align="right" class='awrc'>      84.6</td><td align="right" class='awrc'>       0.0</td></tr>
</table>
<p />IO Profile<p />
<table border="0" width="600" class="tdiff" summary="This table displays IO profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Read+Write Per Second</th><th class="awrbg" scope="col">Read per Second</th><th class="awrbg" scope="col">Write Per Second</th></tr>
<tr><td scope="row" class='awrc'>Total Requests:</td><td align="right" class='awrc'>	      16,572.0</td><td align="right" class='awrc'>	    14,266.3</td><td align="right" class='awrc'>	   2,305.7</td></tr>
<tr><td scope="row" class='awrnc'>Database Requests:</td><td align="right" class='awrnc'>	   16,384.0</td><td align="right" class='awrnc'>	  14,257.3</td><td align="right" class='awrnc'> 	  2,126.7</td></tr>
<tr><td scope="row" class='awrc'>Optimized Requests:</td><td align="right" class='awrc'>	       0.0</td><td align="right" class='awrc'>		     0.0</td><td align="right" class='awrc'>		   0.0</td></tr>
<tr><td scope="row" class='awrnc'>Redo Requests:</td><td align="right" class='awrnc'>		  178.9</td><td align="right" class='awrnc'>		   2.4</td><td align="right" class='awrnc'>		176.5</td></tr>
<tr><td scope="row" class='awrc'>Total (MB):</td><td align="right" class='awrc'>	     133.0</td><td align="right" class='awrc'>		   113.7</td><td align="right" class='awrc'>		  19.3</td></tr>
<tr><td scope="row" class='awrnc'>Database (MB):</td><td align="right" class='awrnc'>		  128.7</td><td align="right" class='awrnc'>		 111.4</td><td align="right" class='awrnc'>		 17.3</td></tr>
<tr><td scope="row" class='awrc'>Optimized Total (MB):</td><td align="right" class='awrc'>		 0.0</td><td align="right" class='awrc'>	       0.0</td><td align="right" class='awrc'>		     0.0</td></tr>
<tr><td scope="row" class='awrnc'>Redo (MB):</td><td align="right" class='awrnc'>		4.0</td><td align="right" class='awrnc'>	       2.2</td><td align="right" class='awrnc'> 	      1.8</td></tr>
<tr><td scope="row" class='awrc'>Database (blocks):</td><td align="right" class='awrc'> 	 16,478.3</td><td align="right" class='awrc'>	       14,258.7</td><td align="right" class='awrc'>	      2,219.6</td></tr>
<tr><td scope="row" class='awrnc'>Via Buffer Cache (blocks):</td><td align="right" class='awrnc'>	   16,476.5</td><td align="right" class='awrnc'>	  14,258.7</td><td align="right" class='awrnc'> 	  2,217.8</td></tr>
<tr><td scope="row" class='awrc'>Direct (blocks):</td><td align="right" class='awrc'>		    1.8</td><td align="right" class='awrc'>		  0.0</td><td align="right" class='awrc'>		1.8</td></tr>
</table>
<p />
Memory Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays memory statistics">
<tr><th class="awrbg" scope="col"> </th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th></tr>
<tr><td scope="row" class='awrc'>Host Mem (MB):</td><td align="right" class='awrc'>   257,947.8</td><td align="right" class='awrc'>   257,947.8</td></tr>
<tr><td scope="row" class='awrnc'>SGA use (MB):</td><td align="right" class='awrnc'>	 9,664.0</td><td align="right" class='awrnc'>	  9,664.0</td></tr>
<tr><td scope="row" class='awrc'>PGA use (MB):</td><td align="right" class='awrc'>     1,843.9</td><td align="right" class='awrc'>     1,474.2</td></tr>
<tr><td scope="row" class='awrc'>% Host Mem used for SGA+PGA:</td><td align="right" class='awrc'>    4.46</td><td align="right" class='awrc'>	 4.32</td></tr>
</table>
<p />
Cache Sizes
<p />
<table border="0" width="600" class="tdiff" summary="This table displays cache sizes and other statistics for
		    different types of cache">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th><th class="awrnobg" scope="col"></th><th class="awrnobg" scope="col"></th></tr>
<tr><td scope="row" class='awrnc'>Buffer Cache:</td><td align="right" class='awrnc'>	 7,872M</td><td align="right" class='awrnc'>	 7,872M</td><td class='awrnc'>Std Block Size:</td><td align="right" class='awrnc'>	   8K</td></tr>
<tr><td scope="row" class='awrc'>Shared Pool Size:</td><td align="right" class='awrc'>	   1,065M</td><td align="right" class='awrc'>	  1,071M</td><td class='awrc'>Log Buffer:</td><td align="right" class='awrc'>	 20,612K</td></tr>
<tr><td scope="row" class='awrnc'>In-Memory Area:</td><td align="right" class='awrnc'>	       0M</td><td align="right" class='awrnc'>	       0M</td></tr>
</table>
<p />
Shared Pool Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays shared pool statistics">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th></tr>
<tr><td scope="row" class='awrc'>Memory Usage %:</td><td align="right" class='awrc'>		85.43</td><td align="right" class='awrc'>	     84.19</td></tr>
<tr><td scope="row" class='awrnc'>% SQL with executions&gt;1:</td><td align="right" class='awrnc'>	      84.19</td><td align="right" class='awrnc'>	    76.23</td></tr>
<tr><td scope="row" class='awrc'>% Memory for SQL w/exec&gt;1:</td><td align="right" class='awrc'>	      82.79</td><td align="right" class='awrc'> 	   65.02</td></tr>
</table>
<p />
<a class="awr" name="top"></a>
<h2 class="awr">
Main Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#99999">Report Summary</a></li>
<li class="awr"><a class="awr" href="#21">Wait Events Statistics</a></li>
<li class="awr"><a class="awr" href="#22">SQL Statistics</a></li>
<li class="awr"><a class="awr" href="#23">Instance Activity Statistics</a></li>
<li class="awr"><a class="awr" href="#24">IO Stats</a></li>
<li class="awr"><a class="awr" href="#25">Buffer Pool Statistics</a></li>
<li class="awr"><a class="awr" href="#26">Advisory Statistics</a></li>
<li class="awr"><a class="awr" href="#27">Wait Statistics</a></li>
<li class="awr"><a class="awr" href="#28">Undo Statistics</a></li>
<li class="awr"><a class="awr" href="#29">Latch Statistics</a></li>
<li class="awr"><a class="awr" href="#30">Segment Statistics</a></li>
<li class="awr"><a class="awr" href="#31">Dictionary Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#32">Library Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#33">Memory Statistics</a></li>
<li class="awr"><a class="awr" href="#39">Replication Statistics (GoldenGate, XStream)</a></li>
<li class="awr"><a class="awr" href="#34">Advanced Queuing</a></li>
<li class="awr"><a class="awr" href="#6700">Resource Limit Statistics</a></li>
<li class="awr"><a class="awr" href="#37">Shared Server Statistics</a></li>
<li class="awr"><a class="awr" href="#36">Initialization Parameters</a></li>
<li class="awr"><a class="awr" href="#42">Active Session History (ASH) Report</a></li>
<li class="awr"><a class="awr" href="#99995">ADDM Reports</a></li>
</ul>
<h2 class="awr">
RAC Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#9997">RAC Report Summary</a></li>
<li class="awr"><a class="awr" href="#5100">Global Messaging Statistics</a></li>
<li class="awr"><a class="awr" href="#5200">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#5300">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#7">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#8">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#8790">Dynamic Remastering Statistics</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<p />
<a class="awr" name="21"></a>
<h2 class="awr">
Wait Events Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1500">Time Model Statistics</a></li>
<li class="awr"><a class="awr" href="#1600">Operating System Statistics</a></li>
<li class="awr"><a class="awr" href="#1610">Operating System Statistics - Detail</a></li>
<li class="awr"><a class="awr" href="#210">Foreground Wait Class</a></li>
<li class="awr"><a class="awr" href="#100">Foreground Wait Events</a></li>
<li class="awr"><a class="awr" href="#300">Background Wait Events</a></li>
<li class="awr"><a class="awr" href="#7400">Wait Event Histogram</a></li>
<li class="awr"><a class="awr" href="#7405">Wait Event Histogram (up to 64 us)</a></li>
<li class="awr"><a class="awr" href="#7410">Wait Event Histogram (up to 32 ms)</a></li>
<li class="awr"><a class="awr" href="#7420">Wait Event Histogram (up to 2 sec)</a></li>
<li class="awr"><a class="awr" href="#7430">Wait Event Histogram (up to 2 min)</a></li>
<li class="awr"><a class="awr" href="#7440">Wait Event Histogram (up to 1 hr)</a></li>
<li class="awr"><a class="awr" href="#5800">Service Statistics</a></li>
<li class="awr"><a class="awr" href="#5820">Service Wait Class Stats</a></li>
<li class="awr"><a class="awr" href="#5840">Top 10 Channel Waits</a></li>
<li class="awr"><a class="awr" href="#2310">Top Process Types by Wait Class</a></li>
<li class="awr"><a class="awr" href="#2320">Top Process Types by CPU Used</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1500"></a>
<h3 class="awr">Time Model Statistics</h3>
<ul>
<li class="awr">DB Time represents total time in user calls</li>
<li class="awr">DB CPU represents CPU time of foreground processes</li>
<li class="awr">Total CPU Time represents foreground and background processes</li>
<li class="awr">Statistics including the word "background" measure background process
   time, therefore do not contribute to the DB time statistic</li>
<li class="awr">Ordered by % of DB time in descending order, followed by Statistic Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays different time model statistics. For each statistic, time and % of DB time are displayed"><tr><th class="awrbg" scope="col">Statistic Name</th><th class="awrbg" scope="col">Time (s)</th><th class="awrbg" scope="col">% of  DB Time</th><th class="awrbg" scope="col">% of Total CPU Time</th></tr>
<tr><td scope="row" class='awrc'>sql execute elapsed time</td><td align="right" class='awrc'>37,000.50</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DB CPU</td><td align="right" class='awrnc'>2,722.91</td><td align="right" class='awrnc'>7.36</td><td align="right" class='awrnc'>67.33</td></tr>
<tr><td scope="row" class='awrc'>PL/SQL execution elapsed time</td><td align="right" class='awrc'>45.88</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>parse time elapsed</td><td align="right" class='awrnc'>1.03</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hard parse (sharing criteria) elapsed time</td><td align="right" class='awrc'>0.90</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>hard parse elapsed time</td><td align="right" class='awrnc'>0.90</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hard parse (bind mismatch) elapsed time</td><td align="right" class='awrc'>0.87</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PL/SQL compilation elapsed time</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>connection management call elapsed time</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>repeated bind elapsed time</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DB time</td><td align="right" class='awrc'>37,001.92</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>background elapsed time</td><td align="right" class='awrnc'>2,822.65</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>background cpu time</td><td align="right" class='awrc'>1,321.10</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>32.67</td></tr>
<tr><td scope="row" class='awrnc'>total CPU time</td><td align="right" class='awrnc'>4,044.01</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1600"></a>
<h3 class="awr">Operating System Statistics</h3>
<ul>
<li class="awr"> *TIME statistic values are diffed.	 All others display actual values.  End Value is displayed if different </li>
<li class="awr"> ordered by statistic type (CPU Use, Virtual Memory, Hardware Config), Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays operating systems statistics. For each statistic, actual value is displayed. If the end value is different, it is also displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Value</th><th class="awrbg" scope="col">End Value</th></tr>
<tr><td scope="row" class='awrc'>FREE_MEMORY_BYTES</td><td align="right" class='awrc'>127,368,396,800</td><td align="right" class='awrc'>128,487,501,824</td></tr>
<tr><td scope="row" class='awrnc'>INACTIVE_MEMORY_BYTES</td><td align="right" class='awrnc'>1,457,369,088</td><td align="right" class='awrnc'>1,457,356,800</td></tr>
<tr><td scope="row" class='awrc'>BUSY_TIME</td><td align="right" class='awrc'>477,971</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IDLE_TIME</td><td align="right" class='awrnc'>1,360,701</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IOWAIT_TIME</td><td align="right" class='awrc'>779,273</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>NICE_TIME</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SYS_TIME</td><td align="right" class='awrc'>226,324</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>USER_TIME</td><td align="right" class='awrnc'>127,169</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LOAD</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>17</td></tr>
<tr><td scope="row" class='awrnc'>PHYSICAL_MEMORY_BYTES</td><td align="right" class='awrnc'>270,477,918,208</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>NUM_CPUS</td><td align="right" class='awrc'>32</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>NUM_CPU_CORES</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>NUM_CPU_SOCKETS</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GLOBAL_RECEIVE_SIZE_MAX</td><td align="right" class='awrnc'>4,194,304</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GLOBAL_SEND_SIZE_MAX</td><td align="right" class='awrc'>1,048,576</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_RECEIVE_SIZE_DEFAULT</td><td align="right" class='awrnc'>87,380</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_RECEIVE_SIZE_MAX</td><td align="right" class='awrc'>6,291,456</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_RECEIVE_SIZE_MIN</td><td align="right" class='awrnc'>4,096</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_SEND_SIZE_DEFAULT</td><td align="right" class='awrc'>16,384</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_SEND_SIZE_MAX</td><td align="right" class='awrnc'>4,194,304</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_SEND_SIZE_MIN</td><td align="right" class='awrc'>4,096</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1610"></a>
<h3 class="awr">Operating System Statistics - Detail</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays some detailed operating systems statistics. load, % busy , % user, % sys, % idle, % iowait are displayed for begin and end snap time"><tr><th class="awrbg" scope="col">Snap Time</th><th class="awrbg" scope="col">Load</th><th class="awrbg" scope="col">%busy</th><th class="awrbg" scope="col">%user</th><th class="awrbg" scope="col">%sys</th><th class="awrbg" scope="col">%idle</th><th class="awrbg" scope="col">%iowait</th></tr>
<tr><td scope="row" class='awrc'>12-Feb 09:07:41</td><td align="right" class='awrc'>21.52</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>12-Feb 09:18:01</td><td align="right" class='awrnc'>17.44</td><td align="right" class='awrnc'>26.00</td><td align="right" class='awrnc'>6.92</td><td align="right" class='awrnc'>12.31</td><td align="right" class='awrnc'>74.00</td><td align="right" class='awrnc'>42.38</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="210"></a>
<h3 class="awr">Foreground Wait Class</h3>
<ul>
<li class="awr"> s  - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> ordered by wait time desc, waits desc </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
<li class="awr">Captured Time accounts for	  104.0%  of Total DB time	37,001.92 (s)</li>
<li class="awr">Total FG Wait Time:	       35,763.88 (s)  DB CPU time:	 2,722.91 (s)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays foreground wait class statistics"><tr><th class="awrbg" scope="col">Wait Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">%DB time</th></tr>
<tr><td scope="row" class='awrc'>User I/O</td><td align="right" class='awrc'>3,467,733</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>26,823</td><td align="right" class='awrc'>7.74ms</td><td align="right" class='awrc'>72.49</td></tr>
<tr><td scope="row" class='awrnc'>Cluster</td><td align="right" class='awrnc'>1,953,246</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8,063</td><td align="right" class='awrnc'>4.13ms</td><td align="right" class='awrnc'>21.79</td></tr>
<tr><td scope="row" class='awrc'>DB CPU</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2,723</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>7.36</td></tr>
<tr><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>19,906</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>710</td><td align="right" class='awrnc'>35.66ms</td><td align="right" class='awrnc'>1.92</td></tr>
<tr><td scope="row" class='awrc'>Configuration</td><td align="right" class='awrc'>498</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>200.54ms</td><td align="right" class='awrc'>0.27</td></tr>
<tr><td scope="row" class='awrnc'>Concurrency</td><td align="right" class='awrnc'>647</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>64</td><td align="right" class='awrnc'>99.36ms</td><td align="right" class='awrnc'>0.17</td></tr>
<tr><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>527</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>7.01ms</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Commit</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6.35ms</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Application</td><td align="right" class='awrc'>125</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>89.94us</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Network</td><td align="right" class='awrnc'>288</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8.04us</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Administrative</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>685.00us</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="100"></a>
<h3 class="awr">Foreground Wait Events</h3>
<ul>
<li class="awr"> s  - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Only events with Total Wait Time (s) &gt;= .001 are shown </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Foreground Wait Events and their wait statistics"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">Waits /txn</th><th class="awrbg" scope="col">% DB time</th></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>2,790,303</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>20,084</td><td align="right" class='awrc'>7.20ms</td><td align="right" class='awrc'>23.26</td><td align="right" class='awrc'>54.28</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>677,117</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>6,737</td><td align="right" class='awrnc'>9.95ms</td><td align="right" class='awrnc'>5.64</td><td align="right" class='awrnc'>18.21</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>614,167</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2,577</td><td align="right" class='awrc'>4.20ms</td><td align="right" class='awrc'>5.12</td><td align="right" class='awrc'>6.97</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>467,175</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1,459</td><td align="right" class='awrnc'>3.12ms</td><td align="right" class='awrnc'>3.89</td><td align="right" class='awrnc'>3.94</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>407,257</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1,255</td><td align="right" class='awrc'>3.08ms</td><td align="right" class='awrc'>3.39</td><td align="right" class='awrc'>3.39</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>1,999</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1,057</td><td align="right" class='awrnc'>528.78ms</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>2.86</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>1,839</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>978</td><td align="right" class='awrc'>531.63ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>2.64</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>7,421</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>622</td><td align="right" class='awrnc'>83.79ms</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>1.68</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>210,475</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>337</td><td align="right" class='awrc'>1.60ms</td><td align="right" class='awrc'>1.75</td><td align="right" class='awrc'>0.91</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>229,639</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>321</td><td align="right" class='awrnc'>1.40ms</td><td align="right" class='awrnc'>1.91</td><td align="right" class='awrnc'>0.87</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>460</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>215.51ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.27</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>483</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>64</td><td align="right" class='awrnc'>132.66ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.17</td></tr>
<tr><td scope="row" class='awrc'>enq: US - contention</td><td align="right" class='awrc'>1,307</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>55</td><td align="right" class='awrc'>42.13ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.15</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" class='awrnc'>14,519</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>43</td><td align="right" class='awrnc'>2.97ms</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>0.12</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>753</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>28.63ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>499</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>34.88ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>1,438</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>5.79ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant congested</td><td align="right" class='awrnc'>1,441</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>3.64ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>345</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>8.69ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>127.83ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>1,733</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1.17ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>54</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>36.70ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc current block 2-way</td><td align="right" class='awrc'>582</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>3.11ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>216</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>7.34ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch free</td><td align="right" class='awrc'>3,536</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>440.81us</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>437</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3.36ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Data file init write</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>29.79ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>db file single write</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>24.71ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>1,236</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>668.60us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>undo segment extension</td><td align="right" class='awrnc'>38</td><td align="right" class='awrnc'>97</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>19.31ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>471</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.38ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: CF - contention</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>18.88ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: enqueue hash chains</td><td align="right" class='awrc'>553</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>519.75us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>kfk: async disk IO</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6.83ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>689</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>347.40us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CSS initialization</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6.23ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>log file sync</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6.35ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>33</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5.19ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>row cache mutex</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7.83ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo allocation</td><td align="right" class='awrnc'>463</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>321.91us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>103</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>.97ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.61ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>lock deadlock retry</td><td align="right" class='awrc'>1,839</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>33.23us</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers lru chain</td><td align="right" class='awrnc'>315</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>183.17us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>136</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>385.71us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current block congested</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.89ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: ges resource hash list</td><td align="right" class='awrc'>98</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>337.96us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: object queue header operation</td><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>442.29us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ges inquiry response</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.57ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: query</td><td align="right" class='awrnc'>96</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>293.40us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Disk file operations I/O</td><td align="right" class='awrc'>172</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>139.37us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: CT - state</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.23ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>794.59us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: undo global data</td><td align="right" class='awrnc'>60</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>264.30us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr block congested</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5.08ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: PS - contention</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.18ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: TO - contention</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.16ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PGA memory operation</td><td align="right" class='awrnc'>191</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>54.59us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net break/reset to client</td><td align="right" class='awrc'>124</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>82.40us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>datafile move cleanup during resize</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>438.00us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>248</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>21.01us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>419.55us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: WF - contention</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>682.67us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>name-service call wait</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.65ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>108</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>29.40us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>direct path sync</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>142.33us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message to client</td><td align="right" class='awrc'>262</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7.93us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>library cache lock</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.89ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: SW - contention</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.34ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: FD - Flashback logical operations</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.22ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>wait list latch free</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.13ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: RP - contention</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.08ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>row cache lock</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.07ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: TM - contention</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.03ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>watchdog main loop</td><td align="right" class='awrc'>1,032</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3,096</td><td align="right" class='awrc'>3000.02ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message from client</td><td align="right" class='awrnc'>263</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1,821</td><td align="right" class='awrnc'>6923.17ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Execution Msg</td><td align="right" class='awrc'>309</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>25.45ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Msg Fragment</td><td align="right" class='awrnc'>279</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>703.49us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq Credit: send blkd</td><td align="right" class='awrc'>75</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.22ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq Credit: need buffer</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>456.55us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="300"></a>
<h3 class="awr">Background Wait Events</h3>
<ul>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
<li class="awr"> Only events with Total Wait Time (s) &gt;= .001 are shown </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays background wait events statistics"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">Waits /txn</th><th class="awrbg" scope="col">% bg time</th></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>74,235</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>734</td><td align="right" class='awrc'>9.88ms</td><td align="right" class='awrc'>0.62</td><td align="right" class='awrc'>25.99</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>89,210</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>350</td><td align="right" class='awrnc'>3.92ms</td><td align="right" class='awrnc'>0.74</td><td align="right" class='awrnc'>12.39</td></tr>
<tr><td scope="row" class='awrc'>LGWR any worker group</td><td align="right" class='awrc'>46,578</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>249</td><td align="right" class='awrc'>5.34ms</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>8.81</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group ordering</td><td align="right" class='awrnc'>12,366</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>2.86ms</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>1.25</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>1,526</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>18.37ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.99</td></tr>
<tr><td scope="row" class='awrnc'>LGWR all worker groups</td><td align="right" class='awrnc'>3,661</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>7.40ms</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.96</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>3,694</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>4.23ms</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.55</td></tr>
<tr><td scope="row" class='awrnc'>ASM file metadata operation</td><td align="right" class='awrnc'>3,122</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>3.23ms</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.36</td></tr>
<tr><td scope="row" class='awrc'>control file parallel write</td><td align="right" class='awrc'>330</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>28.95ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.34</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>1,236</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>7.43ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.33</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>1,068</td><td align="right" class='awrc'>45</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>7.84ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.30</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>837</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>9.51ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.28</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>1,857</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>3.58ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.24</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>533</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>11.61ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.22</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Join ACK</td><td align="right" class='awrc'>189</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>23.46ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.16</td></tr>
<tr><td scope="row" class='awrnc'>enq: RO - fast object reuse</td><td align="right" class='awrnc'>172</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>23.19ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.14</td></tr>
<tr><td scope="row" class='awrc'>ASM IO for non-blocking poll</td><td align="right" class='awrc'>85,807</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>33.25us</td><td align="right" class='awrc'>0.72</td><td align="right" class='awrc'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>54</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>32.42ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>latch free</td><td align="right" class='awrc'>2,117</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>776.43us</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>gc current block lost</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>535.77ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>45,061</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>27.99us</td><td align="right" class='awrc'>0.38</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>69.06ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gc cr block lost</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>382.48ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>enq: PS - contention</td><td align="right" class='awrnc'>102</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>10.93ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>736</td><td align="right" class='awrc'>84</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.45ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>55.12ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>844</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>863.87us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>144</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>4.43ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>76</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>8.35ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>direct path write temp</td><td align="right" class='awrnc'>57</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>10.86ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>direct path write</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>31.11ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>275</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.97ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gc cr block busy</td><td align="right" class='awrc'>65</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7.65ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8.82ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>209</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.05ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>enq: CF - contention</td><td align="right" class='awrnc'>85</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4.81ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ges inquiry response</td><td align="right" class='awrc'>260</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.16ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>851</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>331.97us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>db file async I/O submit</td><td align="right" class='awrc'>28,756</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8.60us</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>149</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.60ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>135</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.55ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>library cache pin</td><td align="right" class='awrnc'>43</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4.85ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>log file sequential read</td><td align="right" class='awrc'>405</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>504.12us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>AQ: RAC AQ Network</td><td align="right" class='awrnc'>6,187</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>31.51us</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>LGWR wait for redo copy</td><td align="right" class='awrc'>475</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>384.17us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>CGS wait for IPC msg</td><td align="right" class='awrnc'>6,357</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>28.70us</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gcs log flush sync</td><td align="right" class='awrc'>462</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>358.15us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>353</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>468.69us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>331</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>374.92us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr disk read</td><td align="right" class='awrnc'>47</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.32ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>3,025</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>34.18us</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>oracle thread bootstrap</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>22.85ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: redo allocation</td><td align="right" class='awrc'>230</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>352.57us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>library cache lock</td><td align="right" class='awrnc'>45</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.50ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>108</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>623.06us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>34</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.92ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>IPC group service call</td><td align="right" class='awrc'>885</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>69.13us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>189</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>287.49us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>direct path read</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.66ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>73</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>654.97us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.23ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.03ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data query</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.77ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data update</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.47ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>log file sync</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10.41ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: TO - contention</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.00ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4.40ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7.92ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: messages</td><td align="right" class='awrc'>53</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>322.23us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: ges resource hash list</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.12ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>268</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>58.16us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>515.30us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.90ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>189</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>78.47us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr block congested</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4.17ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: TM - contention</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>936.23us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: WF - contention</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.47ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: FB - contention</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.09ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>os thread creation</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.40ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: checkpoint queue latch</td><td align="right" class='awrnc'>26</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>360.42us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: redo writing</td><td align="right" class='awrc'>38</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>236.66us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: object queue header operation</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>493.69us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>312.86us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: TT - contention</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>50</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.51ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: DW - contention</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6.03ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: RA - RT ADDM flood control</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.86ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context root latch</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>385.57us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>887.40us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: WT - contention</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.39ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>libcache interrupt action by LCK</td><td align="right" class='awrnc'>701</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5.65us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current block congested</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.88ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>direct path sync</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>129.68us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: DR - contention</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.75ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: enqueue hash chains</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>509.00us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: undo global data</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.04ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: TA - contention</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.93ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy acquire</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.21ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>wait list latch free</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.04ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX Idle Wait</td><td align="right" class='awrc'>103</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>40,637</td><td align="right" class='awrc'>394.54 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Space Manager: slave idle wait</td><td align="right" class='awrnc'>6,357</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>26,075</td><td align="right" class='awrnc'>4101.82ms</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>rdbms ipc message</td><td align="right" class='awrc'>139,089</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>16,618</td><td align="right" class='awrc'>119.48ms</td><td align="right" class='awrc'>1.16</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>class slave wait</td><td align="right" class='awrnc'>7,943</td><td align="right" class='awrnc'>77</td><td align="right" class='awrnc'>4,904</td><td align="right" class='awrnc'>617.44ms</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>wait for unread message on broadcast channel</td><td align="right" class='awrc'>950</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>1,861</td><td align="right" class='awrc'>1958.53ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LMS CR slave timer</td><td align="right" class='awrnc'>185,444</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,858</td><td align="right" class='awrnc'>10.02ms</td><td align="right" class='awrnc'>1.55</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs yield cpu</td><td align="right" class='awrc'>63,748</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>1,845</td><td align="right" class='awrc'>28.94ms</td><td align="right" class='awrc'>0.53</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs remote message</td><td align="right" class='awrnc'>3,150,440</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,256</td><td align="right" class='awrnc'>398.75us</td><td align="right" class='awrnc'>26.26</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pmon timer</td><td align="right" class='awrc'>413</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>1,239</td><td align="right" class='awrc'>2999.92ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges remote message</td><td align="right" class='awrnc'>25,721</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,239</td><td align="right" class='awrnc'>48.17ms</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCR sleep</td><td align="right" class='awrc'>4,125</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,239</td><td align="right" class='awrc'>300.29ms</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DIAG idle wait</td><td align="right" class='awrnc'>8,119</td><td align="right" class='awrnc'>80</td><td align="right" class='awrnc'>1,238</td><td align="right" class='awrnc'>152.49ms</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Data Guard: Gap Manager</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>660</td><td align="right" class='awrc'>60.00 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AQPC idle</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>630</td><td align="right" class='awrnc'>30.00 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM background timer</td><td align="right" class='awrc'>2,294</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>621</td><td align="right" class='awrc'>270.73ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>OFS idle</td><td align="right" class='awrnc'>207</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>621</td><td align="right" class='awrnc'>3000.04ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PING</td><td align="right" class='awrc'>589</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>620</td><td align="right" class='awrc'>1053.25ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>620</td><td align="right" class='awrnc'>56.38 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>heartbeat redo informer</td><td align="right" class='awrc'>620</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>620</td><td align="right" class='awrc'>1000.15ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM cluster membership changes</td><td align="right" class='awrnc'>354</td><td align="right" class='awrnc'>85</td><td align="right" class='awrnc'>620</td><td align="right" class='awrnc'>1750.41ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lreg timer</td><td align="right" class='awrc'>206</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>619</td><td align="right" class='awrc'>3002.65ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SCM slave idle</td><td align="right" class='awrnc'>6,226</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>618</td><td align="right" class='awrnc'>99.29ms</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pman timer</td><td align="right" class='awrc'>206</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>618</td><td align="right" class='awrc'>2999.73ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Streams AQ: qmn coordinator idle wait</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>616</td><td align="right" class='awrnc'>14.00 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Streams AQ: qmn slave idle wait</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>616</td><td align="right" class='awrc'>28.00 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dispatcher timer</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>600</td><td align="right" class='awrnc'>60.01 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Data Guard: Timer</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>600</td><td align="right" class='awrc'>600.00 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group idle</td><td align="right" class='awrnc'>54,329</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>454</td><td align="right" class='awrnc'>8.36ms</td><td align="right" class='awrnc'>0.45</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>smon timer</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>293</td><td align="right" class='awrc'>7324.12ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>jobq slave wait</td><td align="right" class='awrnc'>283</td><td align="right" class='awrnc'>99</td><td align="right" class='awrnc'>141</td><td align="right" class='awrnc'>498.54ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Parse Reply</td><td align="right" class='awrc'>189</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>13.27ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Execute Reply</td><td align="right" class='awrnc'>588</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.93ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq Credit: send blkd</td><td align="right" class='awrc'>225</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.15ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>RMA: IPC0 completion sync</td><td align="right" class='awrnc'>1,074</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>46.31us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message from client</td><td align="right" class='awrc'>68</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>374.21us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7400"></a>
<h3 class="awr">Wait Event Histogram</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (idle events last)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Total Waits</th><th class="awrbg" scope="col" id="&lt;8us">&lt;8us</th><th class="awrbg" scope="col" id="&lt;16us">&lt;16us</th><th class="awrbg" scope="col" id="&lt;32us">&lt;32us</th><th class="awrbg" scope="col" id="&lt;64us">&lt;64us</th><th class="awrbg" scope="col" id="&lt;128us">&lt;128us</th><th class="awrbg" scope="col" id="&lt;256us">&lt;256us</th><th class="awrbg" scope="col" id="&lt;512us">&lt;512us</th><th class="awrbg" scope="col" id="&gt;=512us">&gt;=512us</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>6176</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>88.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>85.3K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>70.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.5</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>3230</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>23.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>34.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>13.6</td></tr>
<tr><td scope="row" class='awrnc'>AWR Flush</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>6345</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>84.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>CSS initialization</td><td align="right" class='awrnc'>32</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>43.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: action</td><td align="right" class='awrc'>78</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>79.5</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data query</td><td align="right" class='awrnc'>19</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>21.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>78.9</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data update</td><td align="right" class='awrc'>22</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>95.5</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: query</td><td align="right" class='awrnc'>96</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>70.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>16.7</td></tr>
<tr><td scope="row" class='awrc'>DFS lock handle</td><td align="right" class='awrc'>144</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>17.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>82.6</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>93</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>19.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>64.5</td></tr>
<tr><td scope="row" class='awrc'>Data file init write</td><td align="right" class='awrc'>36</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>869</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>Disk file operations I/O</td><td align="right" class='awrc'>525</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>3.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>38.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>5.3</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group query</td><td align="right" class='awrnc'>19</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>68.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>31.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group update</td><td align="right" class='awrc'>20</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>95.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" class='awrnc'>1857</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>36.4</td></tr>
<tr><td scope="row" class='awrc'>IPC group service call</td><td align="right" class='awrc'>911</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>1.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>15.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>46.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>26.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.8</td></tr>
<tr><td scope="row" class='awrnc'>IPC send completion sync</td><td align="right" class='awrnc'>763</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>75.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>7.3</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>7472</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>39.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>29.4</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>1280</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>19.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>22.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>33.6</td></tr>
<tr><td scope="row" class='awrc'>LGWR all worker groups</td><td align="right" class='awrc'>3658</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>99.6</td></tr>
<tr><td scope="row" class='awrnc'>LGWR any worker group</td><td align="right" class='awrnc'>46.4K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>96.0</td></tr>
<tr><td scope="row" class='awrc'>LGWR wait for redo copy</td><td align="right" class='awrc'>475</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>4.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>22.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>26.9</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group ordering</td><td align="right" class='awrnc'>12.3K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>93.4</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>462</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>22.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>39.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>18.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>3.5</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Join ACK</td><td align="right" class='awrnc'>189</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>94.2</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrc'>189</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>76.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>2.6</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>292</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>29.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>21.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>37.7</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>45.3K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>86.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>PX qref latch</td><td align="right" class='awrnc'>14</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>71.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net break/reset to client</td><td align="right" class='awrc'>124</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>34.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>33.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>1.6</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message to client</td><td align="right" class='awrnc'>329</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>94.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>54</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>37.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>48.1</td></tr>
<tr><td scope="row" class='awrnc'>asynch descriptor resize</td><td align="right" class='awrnc'>76</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>84.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>buffer busy waits</td><td align="right" class='awrc'>493</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>90.5</td></tr>
<tr><td scope="row" class='awrnc'>buffer deadlock</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>control file parallel write</td><td align="right" class='awrc'>375</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>4117</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>72.8</td></tr>
<tr><td scope="row" class='awrc'>datafile move cleanup during resize</td><td align="right" class='awrc'>18</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>66.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>33.3</td></tr>
<tr><td scope="row" class='awrnc'>db file async I/O submit</td><td align="right" class='awrnc'>28.5K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>93.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.1</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>674.3K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>88.6K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>73.4</td></tr>
<tr><td scope="row" class='awrc'>db file scattered read</td><td align="right" class='awrc'>49</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>2.8M</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>db file single write</td><td align="right" class='awrc'>36</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>direct path read</td><td align="right" class='awrnc'>14</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>direct path sync</td><td align="right" class='awrc'>40</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>70.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path write</td><td align="right" class='awrnc'>18</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>direct path write temp</td><td align="right" class='awrc'>57</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: CF - contention</td><td align="right" class='awrnc'>103</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>97.1</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>2251</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>93.7</td></tr>
<tr><td scope="row" class='awrnc'>enq: CT - state</td><td align="right" class='awrnc'>18</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>94.4</td></tr>
<tr><td scope="row" class='awrc'>enq: DR - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: DW - contention</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: FD - Flashback logical operations</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>465</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>92.9</td></tr>
<tr><td scope="row" class='awrnc'>enq: JS - job run lock - synchronize</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: MV - datafile move</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: PS - contention</td><td align="right" class='awrnc'>112</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>94.6</td></tr>
<tr><td scope="row" class='awrc'>enq: RA - RT ADDM flood control</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: RO - fast object reuse</td><td align="right" class='awrnc'>172</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>89.5</td></tr>
<tr><td scope="row" class='awrc'>enq: RP - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: SW - contention</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: TA - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: TD - KTF dump entries</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: TM - contention</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>85.7</td></tr>
<tr><td scope="row" class='awrnc'>enq: TO - contention</td><td align="right" class='awrnc'>38</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>89.5</td></tr>
<tr><td scope="row" class='awrc'>enq: TT - contention</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: US - contention</td><td align="right" class='awrnc'>1307</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>14.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>14.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>57.9</td></tr>
<tr><td scope="row" class='awrc'>enq: WF - contention</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>21.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>78.6</td></tr>
<tr><td scope="row" class='awrnc'>enq: WT - contention</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>75.0</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy acquire</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy release</td><td align="right" class='awrnc'>12</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>25.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>1249</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>74.4</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block busy</td><td align="right" class='awrnc'>60</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr block congested</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>2002</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>47</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>97.9</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>229.7K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>13.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>85.3</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>464K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>98.3</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant congested</td><td align="right" class='awrnc'>1440</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>99.9</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>611.3K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>99.5</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>514</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>99.6</td></tr>
<tr><td scope="row" class='awrc'>gc current block 2-way</td><td align="right" class='awrc'>631</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>7.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>92.2</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>1918</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>86.8</td></tr>
<tr><td scope="row" class='awrc'>gc current block congested</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current block lost</td><td align="right" class='awrnc'>1842</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>210.6K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>86.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>405.4K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>98.4</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>1438</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" class='awrnc'>14.5K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>99.9</td></tr>
<tr><td scope="row" class='awrc'>gc current multi block request</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current split</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>75.0</td></tr>
<tr><td scope="row" class='awrc'>gc index operation</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>83.3</td></tr>
<tr><td scope="row" class='awrnc'>gcs log flush sync</td><td align="right" class='awrnc'>498</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>14.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>22.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>18.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>23.1</td></tr>
<tr><td scope="row" class='awrc'>ges inquiry response</td><td align="right" class='awrc'>276</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>90.2</td></tr>
<tr><td scope="row" class='awrnc'>ges resource directory to be unfrozen</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>75.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kfk: async disk IO</td><td align="right" class='awrc'>36</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>kjctssqmg: quick message send wait</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>2997</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>84.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.4</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>5620</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>21.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>20.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>31.4</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA heap latch</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context latch</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context root latch</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>64.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>21.4</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>159</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>19.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>15.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>25.2</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>641</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>20.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>16.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>16.4</td></tr>
<tr><td scope="row" class='awrnc'>latch: call allocation</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: checkpoint queue latch</td><td align="right" class='awrc'>26</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>26.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>23.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>19.2</td></tr>
<tr><td scope="row" class='awrnc'>latch: enqueue hash chains</td><td align="right" class='awrnc'>555</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>18.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>20.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>30.3</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>1338</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>25.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>38.9</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>1533</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>17.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>25.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>19.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>19.2</td></tr>
<tr><td scope="row" class='awrc'>latch: ges resource hash list</td><td align="right" class='awrc'>112</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>17.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>23.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>21.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>28.6</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>64</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>34.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>18.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>20.3</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>81</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>23.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>23.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>37.0</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo allocation</td><td align="right" class='awrnc'>688</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>18.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>23.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>17.4</td></tr>
<tr><td scope="row" class='awrc'>latch: redo writing</td><td align="right" class='awrc'>38</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>26.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>28.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>23.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>10.5</td></tr>
<tr><td scope="row" class='awrnc'>latch: session allocation</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: shared pool</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: undo global data</td><td align="right" class='awrnc'>61</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>18.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>27.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>24.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>13.1</td></tr>
<tr><td scope="row" class='awrc'>libcache interrupt action by LCK</td><td align="right" class='awrc'>704</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>94.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache lock</td><td align="right" class='awrnc'>46</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>84.8</td></tr>
<tr><td scope="row" class='awrc'>library cache pin</td><td align="right" class='awrc'>43</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>25.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>74.4</td></tr>
<tr><td scope="row" class='awrnc'>library cache: mutex X</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lock deadlock retry</td><td align="right" class='awrc'>1840</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>80.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.5</td></tr>
<tr><td scope="row" class='awrnc'>log file parallel write</td><td align="right" class='awrnc'>74K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>log file sequential read</td><td align="right" class='awrc'>405</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>29.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>25.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>7.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>34.3</td></tr>
<tr><td scope="row" class='awrnc'>log file sync</td><td align="right" class='awrnc'>32</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>name-service call wait</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>oracle thread bootstrap</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>os thread creation</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>866</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>row cache lock</td><td align="right" class='awrc'>34</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>row cache mutex</td><td align="right" class='awrnc'>20</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>75.0</td></tr>
<tr><td scope="row" class='awrc'>undo segment extension</td><td align="right" class='awrc'>38</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>18.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>68.4</td></tr>
<tr><td scope="row" class='awrnc'>undo_retention publish retry</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>wait list latch free</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>AQPC idle</td><td align="right" class='awrnc'>21</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>ASM background timer</td><td align="right" class='awrc'>2294</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>8.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>81.1</td></tr>
<tr><td scope="row" class='awrnc'>ASM cluster membership changes</td><td align="right" class='awrnc'>353</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>DIAG idle wait</td><td align="right" class='awrc'>8113</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>98.0</td></tr>
<tr><td scope="row" class='awrnc'>Data Guard: Gap Manager</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>Data Guard: Timer</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>GCR sleep</td><td align="right" class='awrnc'>4116</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>LGWR worker group idle</td><td align="right" class='awrc'>54.2K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>4.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>53.5</td></tr>
<tr><td scope="row" class='awrnc'>LMS CR slave timer</td><td align="right" class='awrnc'>185K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>OFS idle</td><td align="right" class='awrc'>207</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>PING</td><td align="right" class='awrnc'>589</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>18.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>42.3</td></tr>
<tr><td scope="row" class='awrc'>PX Deq Credit: need buffer</td><td align="right" class='awrc'>29</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>24.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>51.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>20.7</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq Credit: send blkd</td><td align="right" class='awrnc'>300</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>20.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>66.7</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Execute Reply</td><td align="right" class='awrc'>588</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>24.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>37.4</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Execution Msg</td><td align="right" class='awrnc'>309</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>87.1</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Msg Fragment</td><td align="right" class='awrc'>279</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>26.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>48.4</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Parse Reply</td><td align="right" class='awrnc'>189</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>88.4</td></tr>
<tr><td scope="row" class='awrc'>PX Idle Wait</td><td align="right" class='awrc'>103</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>RMA: IPC0 completion sync</td><td align="right" class='awrc'>1074</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>34.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>48.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>1.3</td></tr>
<tr><td scope="row" class='awrnc'>SCM slave idle</td><td align="right" class='awrnc'>6221</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message from client</td><td align="right" class='awrc'>331</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>26.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>35.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>37.5</td></tr>
<tr><td scope="row" class='awrnc'>Space Manager: slave idle wait</td><td align="right" class='awrnc'>6347</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>97.7</td></tr>
<tr><td scope="row" class='awrc'>Streams AQ: qmn coordinator idle wait</td><td align="right" class='awrc'>44</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>31.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>13.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>54.5</td></tr>
<tr><td scope="row" class='awrnc'>Streams AQ: qmn slave idle wait</td><td align="right" class='awrnc'>22</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>class slave wait</td><td align="right" class='awrc'>7936</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>89.4</td></tr>
<tr><td scope="row" class='awrnc'>dispatcher timer</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gcs remote message</td><td align="right" class='awrc'>3.1M</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>17.7</td></tr>
<tr><td scope="row" class='awrnc'>gcs yield cpu</td><td align="right" class='awrnc'>63.6K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>97.1</td></tr>
<tr><td scope="row" class='awrc'>ges remote message</td><td align="right" class='awrc'>25.7K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>87.1</td></tr>
<tr><td scope="row" class='awrnc'>heartbeat redo informer</td><td align="right" class='awrnc'>619</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>jobq slave wait</td><td align="right" class='awrc'>283</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>lreg timer</td><td align="right" class='awrnc'>206</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>pman timer</td><td align="right" class='awrc'>207</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>pmon timer</td><td align="right" class='awrnc'>413</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>rdbms ipc message</td><td align="right" class='awrc'>138.8K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>19.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>65.2</td></tr>
<tr><td scope="row" class='awrnc'>smon timer</td><td align="right" class='awrnc'>40</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>wait for unread message on broadcast channel</td><td align="right" class='awrc'>950</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>watchdog main loop</td><td align="right" class='awrnc'>1035</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7405"></a>
<h3 class="awr">Wait Event Histogram (up to 64 us)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds  </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 1us  - 64us</th><th class="awrbg" scope="col" id="&lt;1us"> &lt;1us</th><th class="awrbg" scope="col" id="&lt;2us"> &lt;2us</th><th class="awrbg" scope="col" id="&lt;4us"> &lt;4us</th><th class="awrbg" scope="col" id="&lt;8us">&lt;8us</th><th class="awrbg" scope="col" id="&lt;16us">&lt;16us</th><th class="awrbg" scope="col" id="&lt;32us">&lt;32us</th><th class="awrbg" scope="col" id="&lt;64us">&lt;64us</th><th class="awrbg" scope="col" id="&gt;=64us">&gt;=64us</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>5875</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>88.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>4.9</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>76.1K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>70.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>10.8</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>2265</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>23.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>34.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>29.9</td></tr>
<tr><td scope="row" class='awrnc'>AWR Flush</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>6043</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>84.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>4.8</td></tr>
<tr><td scope="row" class='awrnc'>CSS initialization</td><td align="right" class='awrnc'>15</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>43.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>53.1</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: action</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>82.1</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: query</td><td align="right" class='awrnc'>79</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>68.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>17.7</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>23</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>19.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>75.3</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>172</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>67.2</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group query</td><td align="right" class='awrc'>19</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>68.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>31.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group update</td><td align="right" class='awrnc'>20</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>95.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>399</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>78.5</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>607</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>15.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>46.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>33.4</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>607</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>75.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>20.4</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>1411</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>18.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>81.1</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>435</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>19.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>66.0</td></tr>
<tr><td scope="row" class='awrnc'>LGWR all worker groups</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>99.9</td></tr>
<tr><td scope="row" class='awrc'>LGWR any worker group</td><td align="right" class='awrc'>82</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>99.8</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>65</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>86.3</td></tr>
<tr><td scope="row" class='awrc'>LGWR worker group ordering</td><td align="right" class='awrc'>164</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>98.7</td></tr>
<tr><td scope="row" class='awrnc'>PGA memory operation</td><td align="right" class='awrnc'>398</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>22.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>39.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>18.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>13.9</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Join ACK</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>98.9</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>162</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>76.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>14.3</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>104</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>29.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>64.4</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>43.3K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>86.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>4.4</td></tr>
<tr><td scope="row" class='awrc'>PX qref latch</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>71.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net break/reset to client</td><td align="right" class='awrnc'>62</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>34.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>14.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message to client</td><td align="right" class='awrc'>324</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>94.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>1.5</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>24</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>37.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>55.6</td></tr>
<tr><td scope="row" class='awrc'>asynch descriptor resize</td><td align="right" class='awrc'>76</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>84.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>20</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>95.9</td></tr>
<tr><td scope="row" class='awrc'>buffer deadlock</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>829</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>79.9</td></tr>
<tr><td scope="row" class='awrc'>db file async I/O submit</td><td align="right" class='awrc'>28.2K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>93.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>1.3</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>3297</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>96.3</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>99.9</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>99.1</td></tr>
<tr><td scope="row" class='awrc'>enq: US - contention</td><td align="right" class='awrc'>63</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>95.2</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy release</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>75.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>277</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>99.9</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>184</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>85</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>99.9</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>489</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>99.8</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>172</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc index operation</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>83.3</td></tr>
<tr><td scope="row" class='awrnc'>gcs log flush sync</td><td align="right" class='awrnc'>105</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>14.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>78.9</td></tr>
<tr><td scope="row" class='awrc'>ges resource directory to be unfrozen</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>75.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksxr poll remote instances</td><td align="right" class='awrnc'>2762</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>84.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>7.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>7.8</td></tr>
<tr><td scope="row" class='awrc'>latch free</td><td align="right" class='awrc'>799</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>85.8</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA heap latch</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context latch</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>83.3</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>45</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>71.7</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>189</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>20.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>70.5</td></tr>
<tr><td scope="row" class='awrnc'>latch: call allocation</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>66.7</td></tr>
<tr><td scope="row" class='awrc'>latch: checkpoint queue latch</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>84.6</td></tr>
<tr><td scope="row" class='awrnc'>latch: enqueue hash chains</td><td align="right" class='awrnc'>94</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>83.1</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>100</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>92.5</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>291</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>81.0</td></tr>
<tr><td scope="row" class='awrc'>latch: ges resource hash list</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>90.2</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>82.8</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>93.8</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo allocation</td><td align="right" class='awrnc'>127</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>81.5</td></tr>
<tr><td scope="row" class='awrc'>latch: redo writing</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>26.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>65.8</td></tr>
<tr><td scope="row" class='awrnc'>latch: session allocation</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: shared pool</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>75.0</td></tr>
<tr><td scope="row" class='awrnc'>latch: undo global data</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>83.6</td></tr>
<tr><td scope="row" class='awrc'>libcache interrupt action by LCK</td><td align="right" class='awrc'>699</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>93.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>.7</td></tr>
<tr><td scope="row" class='awrnc'>library cache: mutex X</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lock deadlock retry</td><td align="right" class='awrc'>1712</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>80.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>7.0</td></tr>
<tr><td scope="row" class='awrnc'>log file sequential read</td><td align="right" class='awrnc'>124</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>29.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>69.4</td></tr>
<tr><td scope="row" class='awrc'>row cache mutex</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>80.0</td></tr>
<tr><td scope="row" class='awrnc'>undo segment extension</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>18.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>73.7</td></tr>
<tr><td scope="row" class='awrc'>undo_retention publish retry</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7410"></a>
<h3 class="awr">Wait Event Histogram (up to 32 ms)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds,	ms is 1024 microseconds (approximately 1 millisecond) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 1ms  to 32ms</th><th class="awrbg" scope="col" id="&lt;512us"> &lt;512us</th><th class="awrbg" scope="col" id="&lt;1ms"> &lt;1ms</th><th class="awrbg" scope="col" id="&lt;2ms"> &lt;2ms</th><th class="awrbg" scope="col" id="&lt;4ms"> &lt;4ms</th><th class="awrbg" scope="col" id="&lt;8ms">&lt;8ms</th><th class="awrbg" scope="col" id="&lt;16ms">&lt;16ms</th><th class="awrbg" scope="col" id="&lt;32ms">&lt;32ms</th><th class="awrbg" scope="col" id="&gt;=32ms">&gt;=32ms</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>448</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>419</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>86.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.6</td></tr>
<tr><td scope="row" class='awrnc'>CGS wait for IPC msg</td><td align="right" class='awrnc'>15</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS initialization</td><td align="right" class='awrc'>16</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>40.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>62</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>20.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>29.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>32.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data query</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>21.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>15.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>26.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>36.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data update</td><td align="right" class='awrnc'>21</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>4.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>31.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: query</td><td align="right" class='awrc'>16</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>83.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>13.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>118</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>17.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>52.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>27.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.7</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>44</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>35.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>30.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>17.2</td></tr>
<tr><td scope="row" class='awrnc'>Data file init write</td><td align="right" class='awrnc'>24</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>30.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>36.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>33.3</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>831</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>53.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>15.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>18.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>4.4</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>28</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>94.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>634</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>63.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.3</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>55</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>92.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>199</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>70.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>26.7</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>414</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>66.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>1.3</td></tr>
<tr><td scope="row" class='awrnc'>LGWR all worker groups</td><td align="right" class='awrnc'>3618</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>52.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>14.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>6.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.7</td></tr>
<tr><td scope="row" class='awrc'>LGWR any worker group</td><td align="right" class='awrc'>44.3K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>4.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>35.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>29.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.6</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>128</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>73.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR worker group ordering</td><td align="right" class='awrc'>11.5K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>6.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>65.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>12.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>PGA memory operation</td><td align="right" class='awrnc'>16</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>96.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Join ACK</td><td align="right" class='awrc'>176</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>5.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>31.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>15.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>33.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>1.1</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>97.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>110</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>62.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>22.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>107</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net break/reset to client</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>98.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>51.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>33.3</td></tr>
<tr><td scope="row" class='awrc'>buffer busy waits</td><td align="right" class='awrc'>155</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>9.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>15.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>59.0</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>272</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>27.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>25.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>27.5</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>2962</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>27.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>50.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>12.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.9</td></tr>
<tr><td scope="row" class='awrnc'>datafile move cleanup during resize</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>66.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file async I/O submit</td><td align="right" class='awrc'>16</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>640.1K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>59.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>15.9</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>5.1</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>64.2K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>26.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>18.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>19.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>1.0</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>46</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>53.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>20.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>10.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>6.1</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>2.7M</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>57.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>24.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>11.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.9</td></tr>
<tr><td scope="row" class='awrnc'>db file single write</td><td align="right" class='awrnc'>28</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>30.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>22.2</td></tr>
<tr><td scope="row" class='awrc'>direct path read</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>85.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path write</td><td align="right" class='awrnc'>13</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>27.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>27.8</td></tr>
<tr><td scope="row" class='awrc'>direct path write temp</td><td align="right" class='awrc'>53</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>31.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>14.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>7.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: CF - contention</td><td align="right" class='awrnc'>97</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>2.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>54.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>30.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>2.9</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>1786</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>6.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>30.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>27.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>7.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>14.3</td></tr>
<tr><td scope="row" class='awrnc'>enq: CT - state</td><td align="right" class='awrnc'>17</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>5.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>44.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>38.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: DR - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: DW - contention</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>76.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: FD - Flashback logical operations</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>107</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>7.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>69.9</td></tr>
<tr><td scope="row" class='awrnc'>enq: JS - job run lock - synchronize</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: MV - datafile move</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: PS - contention</td><td align="right" class='awrnc'>105</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>5.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>54.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>31.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.9</td></tr>
<tr><td scope="row" class='awrc'>enq: RA - RT ADDM flood control</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: RO - fast object reuse</td><td align="right" class='awrnc'>127</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>10.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>38.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>20.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>15.7</td></tr>
<tr><td scope="row" class='awrc'>enq: RP - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: SW - contention</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TA - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TD - KTF dump entries</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TM - contention</td><td align="right" class='awrc'>12</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>14.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TO - contention</td><td align="right" class='awrnc'>34</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>10.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>60.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>18.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TT - contention</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: US - contention</td><td align="right" class='awrnc'>537</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>42.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>7.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>16.8</td></tr>
<tr><td scope="row" class='awrc'>enq: WF - contention</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>21.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: WT - contention</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy acquire</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy release</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>75.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>929</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>25.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>34.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>31.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block busy</td><td align="right" class='awrnc'>60</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>28.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>43.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block congested</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr disk read</td><td align="right" class='awrnc'>46</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>2.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>19.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>29.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>36.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>196K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>14.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>38.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>36.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>455.4K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>1.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>40.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>32.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.2</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant congested</td><td align="right" class='awrc'>1439</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>59.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>24.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>604.7K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>31.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.5</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>484</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>30.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>43.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>5.4</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>581</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>7.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>39.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>35.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.2</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>1664</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>13.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>38.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>37.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>9.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current block congested</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>30.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>181K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>14.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>37.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>35.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>398.1K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>15.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>41.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>32.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.2</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>1434</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>53.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>29.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.3</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" class='awrnc'>14.4K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>34.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>41.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.2</td></tr>
<tr><td scope="row" class='awrc'>gc current multi block request</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current split</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc index operation</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>16.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs log flush sync</td><td align="right" class='awrnc'>115</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>76.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges inquiry response</td><td align="right" class='awrc'>249</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>9.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>40.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>39.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kfk: async disk IO</td><td align="right" class='awrnc'>35</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>2.8</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>1762</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>68.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context root latch</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>78.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>40</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>74.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>105</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>83.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: checkpoint queue latch</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>80.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: enqueue hash chains</td><td align="right" class='awrc'>168</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>69.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>520</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>61.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>22.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>295</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>80.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: ges resource hash list</td><td align="right" class='awrnc'>32</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>71.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: messages</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>79.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: object queue header operation</td><td align="right" class='awrnc'>30</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>63.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>28.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: redo allocation</td><td align="right" class='awrc'>120</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>82.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo writing</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>89.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: undo global data</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>86.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache lock</td><td align="right" class='awrnc'>39</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>15.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>41.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>32.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache pin</td><td align="right" class='awrc'>31</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>25.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>39.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>18.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.3</td></tr>
<tr><td scope="row" class='awrnc'>lock deadlock retry</td><td align="right" class='awrnc'>9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>72.3K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>44.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>36.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>8.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.3</td></tr>
<tr><td scope="row" class='awrnc'>log file sequential read</td><td align="right" class='awrnc'>139</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>65.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file sync</td><td align="right" class='awrc'>32</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>43.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>21.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>34.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service call wait</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>oracle thread bootstrap</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>os thread creation</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>75.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>852</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>35.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>45.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>1.6</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>34</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>29.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>41.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>20.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>row cache mutex</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>70.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>undo segment extension</td><td align="right" class='awrnc'>18</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>31.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>26.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>21.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>21.1</td></tr>
<tr><td scope="row" class='awrc'>wait list latch free</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7420"></a>
<h3 class="awr">Wait Event Histogram (up to 2 sec)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 ms is milliseconds    s is 1024 milliseconds (approximately 1 second) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 64ms  to 2s</th><th class="awrbg" scope="col" id="&lt;32ms">&lt;32ms</th><th class="awrbg" scope="col" id="&lt;64ms">&lt;64ms</th><th class="awrbg" scope="col" id="&lt;1/8s">&lt;1/8s</th><th class="awrbg" scope="col" id="&lt;1/4s">&lt;1/4s</th><th class="awrbg" scope="col" id="&lt;1/2s">&lt;1/2s</th><th class="awrbg" scope="col" id="&lt;1s">  &lt;1s</th><th class="awrbg" scope="col" id="&lt;2s">  &lt;2s</th><th class="awrbg" scope="col" id="&gt;=2s">&gt;=2s</th></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>18</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>16</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>82.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Data file init write</td><td align="right" class='awrnc'>12</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>66.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>27.8</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>38</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>95.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" class='awrnc'>42</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>97.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>1997</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>73.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>26.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>98.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>LGWR all worker groups</td><td align="right" class='awrnc'>25</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR any worker group</td><td align="right" class='awrc'>292</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group ordering</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Join ACK</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>98.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.5</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>18</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>66.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>buffer busy waits</td><td align="right" class='awrc'>291</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>41.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>21.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>103</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>72.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>37</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>34.2K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>94.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>909</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>93.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>81.5K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>97.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file single write</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>77.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>direct path write</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>72.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path write temp</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>93.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CF - contention</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>97.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrnc'>323</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>85.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>325</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>30.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>18.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: PS - contention</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: RO - fast object reuse</td><td align="right" class='awrc'>27</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>84.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: US - contention</td><td align="right" class='awrnc'>220</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>83.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block lost</td><td align="right" class='awrc'>2002</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>50.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>49.9</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>56</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>864</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>3339</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>28</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>94.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>1842</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>48.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>51.3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>79</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>891</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>36</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kfk: async disk IO</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>97.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache pin</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>97.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log file parallel write</td><td align="right" class='awrnc'>1673</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>97.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>98.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>undo segment extension</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>78.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>15.8</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7430"></a>
<h3 class="awr">Wait Event Histogram (up to 2 min)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	s is 1024 milliseconds (approximately 1 second)    m is 64*1024 milliseconds (approximately 67 seconds or 1.12 minutes) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 4s	 to 2m</th><th class="awrbg" scope="col" id="&lt;2s">&lt;2s</th><th class="awrbg" scope="col" id="&lt;4s"> &lt;4s</th><th class="awrbg" scope="col" id="&lt;8s"> &lt;8s</th><th class="awrbg" scope="col" id="&lt;16s">&lt;16s</th><th class="awrbg" scope="col" id="&lt;32s">&lt;32s</th><th class="awrbg" scope="col" id="&lt;1m">&lt; 1m</th><th class="awrbg" scope="col" id="&lt;2m">&lt; 2m</th><th class="awrbg" scope="col" id="&gt;=2m">&gt;=2m</th></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Join ACK</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.5</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7440"></a>
<h3 class="awr">Wait Event Histogram (up to 1 hr)</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5800"></a>
<h3 class="awr">Service Statistics</h3>
<ul>
<li class="awr"> ordered by DB Time</li>
</ul>
<table border="0" class="tdiff" summary="This table displays service statistics. It displays service names and corresponding DB time, DB CPU, Physical reads, logical reads."><tr><th class="awrbg" scope="col">Service Name</th><th class="awrbg" scope="col">DB Time (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">Physical Reads (K)</th><th class="awrbg" scope="col">Logical Reads (K)</th></tr>
<tr><td scope="row" class='awrc'>p80db.example.com</td><td align="right" class='awrc'>36,864</td><td align="right" class='awrc'>2,710</td><td align="right" class='awrc'>8,805</td><td align="right" class='awrc'>11,554</td></tr>
<tr><td scope="row" class='awrnc'>SYS$BACKGROUND</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>78</td></tr>
<tr><td scope="row" class='awrc'>SYS$USERS</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td></tr>
<tr><td scope="row" class='awrnc'>p80dbXDB</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5820"></a>
<h3 class="awr">Service Wait Class Stats</h3>
<ul>
<li class="awr"> Wait Class info for services in the Service Statistics section.  </li>
<li class="awr"> Total Waits and Time Waited displayed for the following wait	  classes:  User I/O, Concurrency, Administrative, Network </li>
<li class="awr"> Time Waited (Wt Time) in seconds</li>
</ul>
<table border="0" class="tdiff" summary="This table displays service wait class statistics. It displays user I/O total wait, user I/O wait time, concurrency total wait, concurrency wait time, etc."><tr><th class="awrbg" scope="col">Service Name</th><th class="awrbg" scope="col">User I/O Total Wts</th><th class="awrbg" scope="col">User I/O Wt Time</th><th class="awrbg" scope="col">Concurcy Total Wts</th><th class="awrbg" scope="col">Concurcy Wt Time</th><th class="awrbg" scope="col">Admin Total Wts</th><th class="awrbg" scope="col">Admin Wt Time</th><th class="awrbg" scope="col">Network Total Wts</th><th class="awrbg" scope="col">Network Wt Time</th></tr>
<tr><td scope="row" class='awrc'>p80db.example.com</td>
<td align="right" class='awrc'>3452952</td><td align="right" class='awrc'>26687</td><td align="right" class='awrc'>650</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>162</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SYS$BACKGROUND</td>
<td align="right" class='awrnc'>87509</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>844</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>881</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SYS$USERS</td>
<td align="right" class='awrc'>55</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>130</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5840"></a>
<h3 class="awr">Top 10 Channel Waits</h3>
<ul>
<li class="awr"> Top 10 Channel Waits by wait time </li>
</ul>
<table border="0" class="tdiff" summary="This table displays top 10 Channel Watis by wait time."><tr><th class="awrbg" scope="col">Channel</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg Wait</th></tr>
<tr><td scope="row" class='awrc'>MMON remote action broadcast channel</td>
<td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>9.49ms</td></tr>
<tr><td scope="row" class='awrnc'>GEN0 ksbxic channel</td>
<td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.31ms</td></tr>
<tr><td scope="row" class='awrc'>kxfp control signal channel</td>
<td align="right" class='awrc'>96</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.36ms</td></tr>
<tr><td scope="row" class='awrnc'>obj broadcast channel</td>
<td align="right" class='awrnc'>54</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>16.06ms</td></tr>
<tr><td scope="row" class='awrc'>RBR channel</td>
<td align="right" class='awrc'>723</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>11.40ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2310"></a>
<h3 class="awr">Top Process Types by Wait Class</h3>
<ul>
<li class="awr"> This table displays top process types ordered by wait class</li>
</ul>
<table border="0" class="tdiff" summary="Top Process Types by Wait Class. . This table displays top process types ordered by wait class"><tr><th class="awrbg" scope="col">Process Type</th><th class="awrbg" scope="col">Description</th><th class="awrbg" scope="col">Wait Class Type</th><th class="awrbg" scope="col">Wait Time (sec)</th></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrc'>User I/O</td><td align="right" class='awrc'>26,792.82</td></tr>
<tr><td scope="row" class='awrnc'>&#160;</td><td scope="row" class='awrnc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrnc'>Cluster</td><td align="right" class='awrnc'>8,053.69</td></tr>
<tr><td scope="row" class='awrc'>LG</td><td scope="row" class='awrc'>Log Writer Slave</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>733.62</td></tr>
<tr><td scope="row" class='awrnc'>&#160;</td><td scope="row" class='awrnc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>708.10</td></tr>
<tr><td scope="row" class='awrc'>LGWR</td><td scope="row" class='awrc'>Redo etc.</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>276.04</td></tr>
<tr><td scope="row" class='awrnc'>&#160;</td><td scope="row" class='awrnc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrnc'>Configuration</td><td align="right" class='awrnc'>100.10</td></tr>
<tr><td scope="row" class='awrc'>DBW0</td><td scope="row" class='awrc'>db writer process 0</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>90.64</td></tr>
<tr><td scope="row" class='awrnc'>DBW3</td><td scope="row" class='awrnc'>db writer process 3</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>86.81</td></tr>
<tr><td scope="row" class='awrc'>DBW2</td><td scope="row" class='awrc'>db writer process 2</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>85.67</td></tr>
<tr><td scope="row" class='awrnc'>DBW1</td><td scope="row" class='awrnc'>db writer process 1</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>85.33</td></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrc'>Concurrency</td><td align="right" class='awrc'>64.09</td></tr>
<tr><td scope="row" class='awrnc'>LG</td><td scope="row" class='awrnc'>Log Writer Slave</td><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>35.58</td></tr>
<tr><td scope="row" class='awrc'>SMON</td><td scope="row" class='awrc'>System Monitor Process</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>33.23</td></tr>
<tr><td scope="row" class='awrnc'>CKPT</td><td scope="row" class='awrnc'>checkpoint</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>13.62</td></tr>
<tr><td scope="row" class='awrc'>O</td><td scope="row" class='awrc'>ASM Connection Pool</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>9.81</td></tr>
<tr><td scope="row" class='awrnc'>M</td><td scope="row" class='awrnc'>MMON slave class 1</td><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>9.13</td></tr>
<tr><td scope="row" class='awrc'>M</td><td scope="row" class='awrc'>MMON slave class 1</td><td scope="row" class='awrc'>User I/O</td><td align="right" class='awrc'>9.05</td></tr>
<tr><td scope="row" class='awrnc'>RMS0</td><td scope="row" class='awrnc'>rac management server</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>8.00</td></tr>
<tr><td scope="row" class='awrc'>DBW0</td><td scope="row" class='awrc'>db writer process 0</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>7.03</td></tr>
<tr><td scope="row" class='awrnc'>LMON</td><td scope="row" class='awrnc'>global enqueue service monitor</td><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>6.81</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2320"></a>
<h3 class="awr">Top Process Types by CPU Used</h3>
<ul>
<li class="awr"> This table displays top process types ordered by CPU time</li>
</ul>
<table border="0" class="tdiff" summary="Top Process Types by CPU Used. . This table displays top process types ordered by CPU time"><tr><th class="awrbg" scope="col">Process Type</th><th class="awrbg" scope="col">Description</th><th class="awrbg" scope="col">CPU Time (sec)</th></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td align="right" class='awrc'>2,713.68</td></tr>
<tr><td scope="row" class='awrnc'>LM</td><td scope="row" class='awrnc'>global cache service process</td><td align="right" class='awrnc'>1,053.57</td></tr>
<tr><td scope="row" class='awrc'>LG</td><td scope="row" class='awrc'>Log Writer Slave</td><td align="right" class='awrc'>46.59</td></tr>
<tr><td scope="row" class='awrnc'>VKTM</td><td scope="row" class='awrnc'>Virtual Keeper of TiMe process</td><td align="right" class='awrnc'>41.10</td></tr>
<tr><td scope="row" class='awrc'>DBW0</td><td scope="row" class='awrc'>db writer process 0</td><td align="right" class='awrc'>29.27</td></tr>
<tr><td scope="row" class='awrnc'>DBW3</td><td scope="row" class='awrnc'>db writer process 3</td><td align="right" class='awrnc'>28.71</td></tr>
<tr><td scope="row" class='awrc'>DBW1</td><td scope="row" class='awrc'>db writer process 1</td><td align="right" class='awrc'>28.62</td></tr>
<tr><td scope="row" class='awrnc'>DBW2</td><td scope="row" class='awrnc'>db writer process 2</td><td align="right" class='awrnc'>28.50</td></tr>
<tr><td scope="row" class='awrc'>LGWR</td><td scope="row" class='awrc'>Redo etc.</td><td align="right" class='awrc'>21.55</td></tr>
<tr><td scope="row" class='awrnc'>RS*</td><td scope="row" class='awrnc'>GCS RM Slave</td><td align="right" class='awrnc'>18.42</td></tr>
<tr><td scope="row" class='awrc'>M</td><td scope="row" class='awrc'>MMON slave class 1</td><td align="right" class='awrc'>15.11</td></tr>
<tr><td scope="row" class='awrnc'>CR*</td><td scope="row" class='awrnc'>GCS CR Slave</td><td align="right" class='awrnc'>11.83</td></tr>
<tr><td scope="row" class='awrc'>P</td><td scope="row" class='awrc'>Parallel query slave</td><td align="right" class='awrc'>8.26</td></tr>
<tr><td scope="row" class='awrnc'>GCR</td><td scope="row" class='awrnc'>GCR Slaves (LMHB)</td><td align="right" class='awrnc'>4.54</td></tr>
<tr><td scope="row" class='awrc'>IPC0</td><td scope="row" class='awrc'>IPC Service 0</td><td align="right" class='awrc'>4.15</td></tr>
<tr><td scope="row" class='awrnc'>DIA0</td><td scope="row" class='awrnc'>diagnosibility process 0</td><td align="right" class='awrnc'>2.92</td></tr>
<tr><td scope="row" class='awrc'>LMD0</td><td scope="row" class='awrc'>global enqueue service daemon 0</td><td align="right" class='awrc'>2.83</td></tr>
<tr><td scope="row" class='awrnc'>O</td><td scope="row" class='awrnc'>ASM Connection Pool</td><td align="right" class='awrnc'>2.78</td></tr>
<tr><td scope="row" class='awrc'>SCM</td><td scope="row" class='awrc'>DLM Statistics Collection and Management Slave</td><td align="right" class='awrc'>2.55</td></tr>
<tr><td scope="row" class='awrnc'>LMHB</td><td scope="row" class='awrnc'>lm heartbeat monitor</td><td align="right" class='awrnc'>2.28</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="22"></a>
<h2 class="awr">
SQL Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#400">SQL ordered by Elapsed Time</a></li>
<li class="awr"><a class="awr" href="#500">SQL ordered by CPU Time</a></li>
<li class="awr"><a class="awr" href="#550">SQL ordered by User I/O Wait Time</a></li>
<li class="awr"><a class="awr" href="#600">SQL ordered by Gets</a></li>
<li class="awr"><a class="awr" href="#700">SQL ordered by Reads</a></li>
<li class="awr"><a class="awr" href="#740">SQL ordered by Physical Reads (UnOptimized)</a></li>
<li class="awr"><a class="awr" href="#800">SQL ordered by Executions</a></li>
<li class="awr"><a class="awr" href="#900">SQL ordered by Parse Calls</a></li>
<li class="awr"><a class="awr" href="#1000">SQL ordered by Sharable Memory</a></li>
<li class="awr"><a class="awr" href="#1100">SQL ordered by Version Count</a></li>
<li class="awr"><a class="awr" href="#1150">SQL ordered by Cluster Wait Time</a></li>
<li class="awr"><a class="awr" href="#99997">Complete List of SQL Text</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="400"></a>
<h3 class="awr">SQL ordered by Elapsed Time</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> % Total DB Time is the Elapsed Time of the SQL statement divided     into the Total Database Time multiplied by 100 </li>
<li class="awr"> %Total - Elapsed Time	as a percentage of Total DB time </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Captured SQL account for   97.3% of Total DB Time (s):		37,002</li>
<li class="awr">Captured PL/SQL account for   65.6% of Total DB Time (s):	   37,002</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by elapsed time"><tr><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">Elapsed Time per Exec (s) </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">	SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>23,326.14</td><td align="right" class='awrc'>672,439</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>63.04</td><td align="right" class='awrc'>7.69</td><td align="right" class='awrc'>74.08</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>12,674.32</td><td align="right" class='awrnc'>118,760</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>34.25</td><td align="right" class='awrnc'>5.58</td><td align="right" class='awrnc'>72.91</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>567.18</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>567.18</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>7.45</td><td align="right" class='awrc'>72.54</td><td scope="row" class='awrc'><a class="awr" href="#f5bd91b8pq2rp">f5bd91b8pq2rp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>566.44</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>566.44</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>7.40</td><td align="right" class='awrnc'>71.50</td><td scope="row" class='awrnc'><a class="awr" href="#dn5ztpzaw0pcu">dn5ztpzaw0pcu</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>566.03</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>566.03</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>7.27</td><td align="right" class='awrc'>71.81</td><td scope="row" class='awrc'><a class="awr" href="#a7ng116w7tgbq">a7ng116w7tgbq</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>565.81</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>565.81</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>7.44</td><td align="right" class='awrnc'>70.94</td><td scope="row" class='awrnc'><a class="awr" href="#9uvmr65d5xzyk">9uvmr65d5xzyk</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>565.52</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>565.52</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>7.21</td><td align="right" class='awrc'>72.19</td><td scope="row" class='awrc'><a class="awr" href="#dsjqgbvpsxkp0">dsjqgbvpsxkp0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>565.51</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>565.51</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>7.30</td><td align="right" class='awrnc'>73.00</td><td scope="row" class='awrnc'><a class="awr" href="#0bwq9jnxx14ju">0bwq9jnxx14ju</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>565.50</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>565.50</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>7.33</td><td align="right" class='awrc'>69.71</td><td scope="row" class='awrc'><a class="awr" href="#6a6qafya34rwa">6a6qafya34rwa</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>565.49</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>565.49</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>7.32</td><td align="right" class='awrnc'>70.05</td><td scope="row" class='awrnc'><a class="awr" href="#bgxwnc1uyqzrn">bgxwnc1uyqzrn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>565.47</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>565.47</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>7.26</td><td align="right" class='awrc'>70.33</td><td scope="row" class='awrc'><a class="awr" href="#d2zxvj6ss17k6">d2zxvj6ss17k6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>565.46</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>565.46</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>7.39</td><td align="right" class='awrnc'>72.00</td><td scope="row" class='awrnc'><a class="awr" href="#g1c8c2wjv67ct">g1c8c2wjv67ct</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>565.35</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>565.35</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>7.41</td><td align="right" class='awrc'>73.65</td><td scope="row" class='awrc'><a class="awr" href="#ffv31a3nd2hp7">ffv31a3nd2hp7</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>564.88</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>564.88</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>7.41</td><td align="right" class='awrnc'>69.53</td><td scope="row" class='awrnc'><a class="awr" href="#5kxrur91u9gs0">5kxrur91u9gs0</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>564.63</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>564.63</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>7.39</td><td align="right" class='awrc'>71.05</td><td scope="row" class='awrc'><a class="awr" href="#dn3tm10dh39sj">dn3tm10dh39sj</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>564.49</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>564.49</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>7.42</td><td align="right" class='awrnc'>69.90</td><td scope="row" class='awrnc'><a class="awr" href="#44w94s3knytqw">44w94s3knytqw</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>564.47</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>564.47</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>7.37</td><td align="right" class='awrc'>73.24</td><td scope="row" class='awrc'><a class="awr" href="#50jfcpqbqagtc">50jfcpqbqagtc</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>564.43</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>564.43</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>6.66</td><td align="right" class='awrnc'>95.64</td><td scope="row" class='awrnc'><a class="awr" href="#7u664zdtgwt9d">7u664zdtgwt9d</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>564.41</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>564.41</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>7.58</td><td align="right" class='awrc'>72.78</td><td scope="row" class='awrc'><a class="awr" href="#7rfsk00ahr6jt">7rfsk00ahr6jt</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>564.41</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>564.41</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>7.39</td><td align="right" class='awrnc'>72.69</td><td scope="row" class='awrnc'><a class="awr" href="#91t7vqx3c4v6g">91t7vqx3c4v6g</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>564.40</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>564.40</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>7.50</td><td align="right" class='awrc'>69.10</td><td scope="row" class='awrc'><a class="awr" href="#drkwgbbjkvcaj">drkwgbbjkvcaj</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>564.34</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>564.34</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>7.30</td><td align="right" class='awrnc'>74.37</td><td scope="row" class='awrnc'><a class="awr" href="#7kqv52xz3bbhp">7kqv52xz3bbhp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>564.33</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>564.33</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>7.40</td><td align="right" class='awrc'>71.45</td><td scope="row" class='awrc'><a class="awr" href="#9srhzg8u9vjsp">9srhzg8u9vjsp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>564.33</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>564.33</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>7.43</td><td align="right" class='awrnc'>71.15</td><td scope="row" class='awrnc'><a class="awr" href="#g5565fvd0c1fr">g5565fvd0c1fr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>564.31</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>564.31</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>7.22</td><td align="right" class='awrc'>70.06</td><td scope="row" class='awrc'><a class="awr" href="#cz8nw7wxr6q6a">cz8nw7wxr6q6a</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>564.26</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>564.26</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>7.47</td><td align="right" class='awrnc'>76.17</td><td scope="row" class='awrnc'><a class="awr" href="#94v3428qavp80">94v3428qavp80</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>564.23</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>564.23</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>7.29</td><td align="right" class='awrc'>73.45</td><td scope="row" class='awrc'><a class="awr" href="#cyxm2z08gakb0">cyxm2z08gakb0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>564.07</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>564.07</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>7.53</td><td align="right" class='awrnc'>71.63</td><td scope="row" class='awrnc'><a class="awr" href="#3u87drbcgrv1a">3u87drbcgrv1a</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>563.76</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>563.76</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>7.23</td><td align="right" class='awrc'>71.20</td><td scope="row" class='awrc'><a class="awr" href="#5sdw02fvh7gku">5sdw02fvh7gku</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>563.76</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>563.76</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>7.69</td><td align="right" class='awrnc'>63.88</td><td scope="row" class='awrnc'><a class="awr" href="#5krxnvhvxxszv">5krxnvhvxxszv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>563.76</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>563.76</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>7.42</td><td align="right" class='awrc'>72.70</td><td scope="row" class='awrc'><a class="awr" href="#bdq8dvq79a34v">bdq8dvq79a34v</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>563.63</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>563.63</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>7.48</td><td align="right" class='awrnc'>70.29</td><td scope="row" class='awrnc'><a class="awr" href="#4nb55sh3050s4">4nb55sh3050s4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>563.56</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>563.56</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>7.53</td><td align="right" class='awrc'>71.46</td><td scope="row" class='awrc'><a class="awr" href="#5cfpr7gtmu9ww">5cfpr7gtmu9ww</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>563.52</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>563.52</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>7.48</td><td align="right" class='awrnc'>71.60</td><td scope="row" class='awrnc'><a class="awr" href="#5a3jn37nb1cg6">5a3jn37nb1cg6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>563.51</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>563.51</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>7.43</td><td align="right" class='awrc'>71.66</td><td scope="row" class='awrc'><a class="awr" href="#4sr03khtycy30">4sr03khtycy30</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>563.44</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>563.44</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>7.54</td><td align="right" class='awrnc'>64.11</td><td scope="row" class='awrnc'><a class="awr" href="#9yraxx50ufhwk">9yraxx50ufhwk</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>563.37</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>563.37</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>7.56</td><td align="right" class='awrc'>70.72</td><td scope="row" class='awrc'><a class="awr" href="#9pyjpd8qx4zrm">9pyjpd8qx4zrm</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>563.33</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>563.33</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>7.55</td><td align="right" class='awrnc'>72.46</td><td scope="row" class='awrnc'><a class="awr" href="#3d08mtaxbsq1u">3d08mtaxbsq1u</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>563.29</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>563.29</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>7.53</td><td align="right" class='awrc'>71.76</td><td scope="row" class='awrc'><a class="awr" href="#cum15qzq5hars">cum15qzq5hars</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>563.13</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>563.13</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>7.44</td><td align="right" class='awrnc'>70.54</td><td scope="row" class='awrnc'><a class="awr" href="#5hgphtrj7uqp2">5hgphtrj7uqp2</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>563.08</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>563.08</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>7.47</td><td align="right" class='awrc'>69.18</td><td scope="row" class='awrc'><a class="awr" href="#8v9kvbuhhrtt6">8v9kvbuhhrtt6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>562.96</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>562.96</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>7.49</td><td align="right" class='awrnc'>71.35</td><td scope="row" class='awrnc'><a class="awr" href="#31ahtjq5rj0wr">31ahtjq5rj0wr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>562.82</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>562.82</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>7.57</td><td align="right" class='awrc'>72.60</td><td scope="row" class='awrc'><a class="awr" href="#fbdrcrjuy8a1m">fbdrcrjuy8a1m</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>562.81</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>562.81</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>7.62</td><td align="right" class='awrnc'>71.79</td><td scope="row" class='awrnc'><a class="awr" href="#bsr5npqqpj681">bsr5npqqpj681</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>562.61</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>562.61</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>7.51</td><td align="right" class='awrc'>71.57</td><td scope="row" class='awrc'><a class="awr" href="#8pu3nqrvwp360">8pu3nqrvwp360</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="500"></a>
<h3 class="awr">SQL ordered by CPU Time</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> %Total - CPU Time	as a percentage of Total DB CPU </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Captured SQL account for   92.1% of Total CPU Time (s): 	  2,723</li>
<li class="awr">Captured PL/SQL account for   66.0% of Total CPU Time (s):	     2,723</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by CPU time"><tr><th class="awrbg" scope="col">CPU    Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">CPU per  Exec (s)</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>1,793.17</td><td align="right" class='awrc'>672,439</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>65.85</td><td align="right" class='awrc'>23,326.14</td><td align="right" class='awrc'>7.69</td><td align="right" class='awrc'>74.08</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>707.68</td><td align="right" class='awrnc'>118,760</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>25.99</td><td align="right" class='awrnc'>12,674.32</td><td align="right" class='awrnc'>5.58</td><td align="right" class='awrnc'>72.91</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>43.34</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>43.34</td><td align="right" class='awrc'>1.59</td><td align="right" class='awrc'>563.76</td><td align="right" class='awrc'>7.69</td><td align="right" class='awrc'>63.88</td><td scope="row" class='awrc'><a class="awr" href="#5krxnvhvxxszv">5krxnvhvxxszv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>42.89</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>42.89</td><td align="right" class='awrnc'>1.58</td><td align="right" class='awrnc'>562.81</td><td align="right" class='awrnc'>7.62</td><td align="right" class='awrnc'>71.79</td><td scope="row" class='awrnc'><a class="awr" href="#bsr5npqqpj681">bsr5npqqpj681</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>42.77</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>42.77</td><td align="right" class='awrc'>1.57</td><td align="right" class='awrc'>564.41</td><td align="right" class='awrc'>7.58</td><td align="right" class='awrc'>72.78</td><td scope="row" class='awrc'><a class="awr" href="#7rfsk00ahr6jt">7rfsk00ahr6jt</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>42.61</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>42.61</td><td align="right" class='awrnc'>1.56</td><td align="right" class='awrnc'>562.82</td><td align="right" class='awrnc'>7.57</td><td align="right" class='awrnc'>72.60</td><td scope="row" class='awrnc'><a class="awr" href="#fbdrcrjuy8a1m">fbdrcrjuy8a1m</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>42.58</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>42.58</td><td align="right" class='awrc'>1.56</td><td align="right" class='awrc'>563.37</td><td align="right" class='awrc'>7.56</td><td align="right" class='awrc'>70.72</td><td scope="row" class='awrc'><a class="awr" href="#9pyjpd8qx4zrm">9pyjpd8qx4zrm</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>42.56</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>42.56</td><td align="right" class='awrnc'>1.56</td><td align="right" class='awrnc'>563.33</td><td align="right" class='awrnc'>7.55</td><td align="right" class='awrnc'>72.46</td><td scope="row" class='awrnc'><a class="awr" href="#3d08mtaxbsq1u">3d08mtaxbsq1u</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>42.50</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>42.50</td><td align="right" class='awrc'>1.56</td><td align="right" class='awrc'>563.44</td><td align="right" class='awrc'>7.54</td><td align="right" class='awrc'>64.11</td><td scope="row" class='awrc'><a class="awr" href="#9yraxx50ufhwk">9yraxx50ufhwk</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>42.49</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>42.49</td><td align="right" class='awrnc'>1.56</td><td align="right" class='awrnc'>564.07</td><td align="right" class='awrnc'>7.53</td><td align="right" class='awrnc'>71.63</td><td scope="row" class='awrnc'><a class="awr" href="#3u87drbcgrv1a">3u87drbcgrv1a</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>42.45</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>42.45</td><td align="right" class='awrc'>1.56</td><td align="right" class='awrc'>563.56</td><td align="right" class='awrc'>7.53</td><td align="right" class='awrc'>71.46</td><td scope="row" class='awrc'><a class="awr" href="#5cfpr7gtmu9ww">5cfpr7gtmu9ww</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>42.43</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>42.43</td><td align="right" class='awrnc'>1.56</td><td align="right" class='awrnc'>563.29</td><td align="right" class='awrnc'>7.53</td><td align="right" class='awrnc'>71.76</td><td scope="row" class='awrnc'><a class="awr" href="#cum15qzq5hars">cum15qzq5hars</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>42.31</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>42.31</td><td align="right" class='awrc'>1.55</td><td align="right" class='awrc'>564.40</td><td align="right" class='awrc'>7.50</td><td align="right" class='awrc'>69.10</td><td scope="row" class='awrc'><a class="awr" href="#drkwgbbjkvcaj">drkwgbbjkvcaj</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>42.27</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>42.27</td><td align="right" class='awrnc'>1.55</td><td align="right" class='awrnc'>562.61</td><td align="right" class='awrnc'>7.51</td><td align="right" class='awrnc'>71.57</td><td scope="row" class='awrnc'><a class="awr" href="#8pu3nqrvwp360">8pu3nqrvwp360</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>42.26</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>42.26</td><td align="right" class='awrc'>1.55</td><td align="right" class='awrc'>567.18</td><td align="right" class='awrc'>7.45</td><td align="right" class='awrc'>72.54</td><td scope="row" class='awrc'><a class="awr" href="#f5bd91b8pq2rp">f5bd91b8pq2rp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>42.18</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>42.18</td><td align="right" class='awrnc'>1.55</td><td align="right" class='awrnc'>563.63</td><td align="right" class='awrnc'>7.48</td><td align="right" class='awrnc'>70.29</td><td scope="row" class='awrnc'><a class="awr" href="#4nb55sh3050s4">4nb55sh3050s4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>42.18</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>42.18</td><td align="right" class='awrc'>1.55</td><td align="right" class='awrc'>564.26</td><td align="right" class='awrc'>7.47</td><td align="right" class='awrc'>76.17</td><td scope="row" class='awrc'><a class="awr" href="#94v3428qavp80">94v3428qavp80</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>42.17</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>42.17</td><td align="right" class='awrnc'>1.55</td><td align="right" class='awrnc'>562.96</td><td align="right" class='awrnc'>7.49</td><td align="right" class='awrnc'>71.35</td><td scope="row" class='awrnc'><a class="awr" href="#31ahtjq5rj0wr">31ahtjq5rj0wr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>42.15</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>42.15</td><td align="right" class='awrc'>1.55</td><td align="right" class='awrc'>563.52</td><td align="right" class='awrc'>7.48</td><td align="right" class='awrc'>71.60</td><td scope="row" class='awrc'><a class="awr" href="#5a3jn37nb1cg6">5a3jn37nb1cg6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>42.08</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>42.08</td><td align="right" class='awrnc'>1.55</td><td align="right" class='awrnc'>565.81</td><td align="right" class='awrnc'>7.44</td><td align="right" class='awrnc'>70.94</td><td scope="row" class='awrnc'><a class="awr" href="#9uvmr65d5xzyk">9uvmr65d5xzyk</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>42.07</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>42.07</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>563.08</td><td align="right" class='awrc'>7.47</td><td align="right" class='awrc'>69.18</td><td scope="row" class='awrc'><a class="awr" href="#8v9kvbuhhrtt6">8v9kvbuhhrtt6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>41.93</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>41.93</td><td align="right" class='awrnc'>1.54</td><td align="right" class='awrnc'>566.44</td><td align="right" class='awrnc'>7.40</td><td align="right" class='awrnc'>71.50</td><td scope="row" class='awrnc'><a class="awr" href="#dn5ztpzaw0pcu">dn5ztpzaw0pcu</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>41.90</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>41.90</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>564.33</td><td align="right" class='awrc'>7.43</td><td align="right" class='awrc'>71.15</td><td scope="row" class='awrc'><a class="awr" href="#g5565fvd0c1fr">g5565fvd0c1fr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>41.89</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>41.89</td><td align="right" class='awrnc'>1.54</td><td align="right" class='awrnc'>565.35</td><td align="right" class='awrnc'>7.41</td><td align="right" class='awrnc'>73.65</td><td scope="row" class='awrnc'><a class="awr" href="#ffv31a3nd2hp7">ffv31a3nd2hp7</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>41.89</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>41.89</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>564.88</td><td align="right" class='awrc'>7.41</td><td align="right" class='awrc'>69.53</td><td scope="row" class='awrc'><a class="awr" href="#5kxrur91u9gs0">5kxrur91u9gs0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>41.88</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>41.88</td><td align="right" class='awrnc'>1.54</td><td align="right" class='awrnc'>564.49</td><td align="right" class='awrnc'>7.42</td><td align="right" class='awrnc'>69.90</td><td scope="row" class='awrnc'><a class="awr" href="#44w94s3knytqw">44w94s3knytqw</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>41.87</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>41.87</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>563.13</td><td align="right" class='awrc'>7.44</td><td align="right" class='awrc'>70.54</td><td scope="row" class='awrc'><a class="awr" href="#5hgphtrj7uqp2">5hgphtrj7uqp2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>41.85</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>41.85</td><td align="right" class='awrnc'>1.54</td><td align="right" class='awrnc'>563.51</td><td align="right" class='awrnc'>7.43</td><td align="right" class='awrnc'>71.66</td><td scope="row" class='awrnc'><a class="awr" href="#4sr03khtycy30">4sr03khtycy30</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>41.84</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>41.84</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>563.76</td><td align="right" class='awrc'>7.42</td><td align="right" class='awrc'>72.70</td><td scope="row" class='awrc'><a class="awr" href="#bdq8dvq79a34v">bdq8dvq79a34v</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>41.80</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>41.80</td><td align="right" class='awrnc'>1.54</td><td align="right" class='awrnc'>565.46</td><td align="right" class='awrnc'>7.39</td><td align="right" class='awrnc'>72.00</td><td scope="row" class='awrnc'><a class="awr" href="#g1c8c2wjv67ct">g1c8c2wjv67ct</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>41.75</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>41.75</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>564.63</td><td align="right" class='awrc'>7.39</td><td align="right" class='awrc'>71.05</td><td scope="row" class='awrc'><a class="awr" href="#dn3tm10dh39sj">dn3tm10dh39sj</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>41.74</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>41.74</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>564.33</td><td align="right" class='awrnc'>7.40</td><td align="right" class='awrnc'>71.45</td><td scope="row" class='awrnc'><a class="awr" href="#9srhzg8u9vjsp">9srhzg8u9vjsp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>41.71</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>41.71</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>564.41</td><td align="right" class='awrc'>7.39</td><td align="right" class='awrc'>72.69</td><td scope="row" class='awrc'><a class="awr" href="#91t7vqx3c4v6g">91t7vqx3c4v6g</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>41.60</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>41.60</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>564.47</td><td align="right" class='awrnc'>7.37</td><td align="right" class='awrnc'>73.24</td><td scope="row" class='awrnc'><a class="awr" href="#50jfcpqbqagtc">50jfcpqbqagtc</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>41.44</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>41.44</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>565.50</td><td align="right" class='awrc'>7.33</td><td align="right" class='awrc'>69.71</td><td scope="row" class='awrc'><a class="awr" href="#6a6qafya34rwa">6a6qafya34rwa</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>41.37</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>41.37</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>565.49</td><td align="right" class='awrnc'>7.32</td><td align="right" class='awrnc'>70.05</td><td scope="row" class='awrnc'><a class="awr" href="#bgxwnc1uyqzrn">bgxwnc1uyqzrn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>41.27</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>41.27</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>565.51</td><td align="right" class='awrc'>7.30</td><td align="right" class='awrc'>73.00</td><td scope="row" class='awrc'><a class="awr" href="#0bwq9jnxx14ju">0bwq9jnxx14ju</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>41.22</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>41.22</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>564.34</td><td align="right" class='awrnc'>7.30</td><td align="right" class='awrnc'>74.37</td><td scope="row" class='awrnc'><a class="awr" href="#7kqv52xz3bbhp">7kqv52xz3bbhp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>41.14</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>41.14</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>566.03</td><td align="right" class='awrc'>7.27</td><td align="right" class='awrc'>71.81</td><td scope="row" class='awrc'><a class="awr" href="#a7ng116w7tgbq">a7ng116w7tgbq</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>41.13</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>41.13</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>564.23</td><td align="right" class='awrnc'>7.29</td><td align="right" class='awrnc'>73.45</td><td scope="row" class='awrnc'><a class="awr" href="#cyxm2z08gakb0">cyxm2z08gakb0</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>41.03</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>41.03</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>565.47</td><td align="right" class='awrc'>7.26</td><td align="right" class='awrc'>70.33</td><td scope="row" class='awrc'><a class="awr" href="#d2zxvj6ss17k6">d2zxvj6ss17k6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>40.75</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>40.75</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>563.76</td><td align="right" class='awrnc'>7.23</td><td align="right" class='awrnc'>71.20</td><td scope="row" class='awrnc'><a class="awr" href="#5sdw02fvh7gku">5sdw02fvh7gku</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>40.75</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>40.75</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>565.52</td><td align="right" class='awrc'>7.21</td><td align="right" class='awrc'>72.19</td><td scope="row" class='awrc'><a class="awr" href="#dsjqgbvpsxkp0">dsjqgbvpsxkp0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>40.74</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>40.74</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>564.31</td><td align="right" class='awrnc'>7.22</td><td align="right" class='awrnc'>70.06</td><td scope="row" class='awrnc'><a class="awr" href="#cz8nw7wxr6q6a">cz8nw7wxr6q6a</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>37.57</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>37.57</td><td align="right" class='awrc'>1.38</td><td align="right" class='awrc'>564.43</td><td align="right" class='awrc'>6.66</td><td align="right" class='awrc'>95.64</td><td scope="row" class='awrc'><a class="awr" href="#7u664zdtgwt9d">7u664zdtgwt9d</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="550"></a>
<h3 class="awr">SQL ordered by User I/O Wait Time</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> %Total - User I/O Time as a percentage of Total User I/O Wait time </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Captured SQL account for   98.8% of Total User I/O Wait Time (s):	   26,845</li>
<li class="awr">Captured PL/SQL account for   64.9% of Total User I/O Wait Time (s):	      26,845</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by user I/O time"><tr><th class="awrbg" scope="col">User I/O Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">UIO per  Exec (s)</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>17,281.01</td><td align="right" class='awrc'>672,439</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>64.37</td><td align="right" class='awrc'>23,326.14</td><td align="right" class='awrc'>7.69</td><td align="right" class='awrc'>74.08</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>9,240.94</td><td align="right" class='awrnc'>118,760</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>34.42</td><td align="right" class='awrnc'>12,674.32</td><td align="right" class='awrnc'>5.58</td><td align="right" class='awrnc'>72.91</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>539.84</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>539.84</td><td align="right" class='awrc'>2.01</td><td align="right" class='awrc'>564.43</td><td align="right" class='awrc'>6.66</td><td align="right" class='awrc'>95.64</td><td scope="row" class='awrc'><a class="awr" href="#7u664zdtgwt9d">7u664zdtgwt9d</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>429.77</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>429.77</td><td align="right" class='awrnc'>1.60</td><td align="right" class='awrnc'>564.26</td><td align="right" class='awrnc'>7.47</td><td align="right" class='awrnc'>76.17</td><td scope="row" class='awrnc'><a class="awr" href="#94v3428qavp80">94v3428qavp80</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>419.70</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>419.70</td><td align="right" class='awrc'>1.56</td><td align="right" class='awrc'>564.34</td><td align="right" class='awrc'>7.30</td><td align="right" class='awrc'>74.37</td><td scope="row" class='awrc'><a class="awr" href="#7kqv52xz3bbhp">7kqv52xz3bbhp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>416.36</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>416.36</td><td align="right" class='awrnc'>1.55</td><td align="right" class='awrnc'>565.35</td><td align="right" class='awrnc'>7.41</td><td align="right" class='awrnc'>73.65</td><td scope="row" class='awrnc'><a class="awr" href="#ffv31a3nd2hp7">ffv31a3nd2hp7</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>414.42</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>414.42</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>564.23</td><td align="right" class='awrc'>7.29</td><td align="right" class='awrc'>73.45</td><td scope="row" class='awrc'><a class="awr" href="#cyxm2z08gakb0">cyxm2z08gakb0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>413.43</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>413.43</td><td align="right" class='awrnc'>1.54</td><td align="right" class='awrnc'>564.47</td><td align="right" class='awrnc'>7.37</td><td align="right" class='awrnc'>73.24</td><td scope="row" class='awrnc'><a class="awr" href="#50jfcpqbqagtc">50jfcpqbqagtc</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>412.79</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>412.79</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>565.51</td><td align="right" class='awrc'>7.30</td><td align="right" class='awrc'>73.00</td><td scope="row" class='awrc'><a class="awr" href="#0bwq9jnxx14ju">0bwq9jnxx14ju</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>411.42</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>411.42</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>567.18</td><td align="right" class='awrnc'>7.45</td><td align="right" class='awrnc'>72.54</td><td scope="row" class='awrnc'><a class="awr" href="#f5bd91b8pq2rp">f5bd91b8pq2rp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>410.80</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>410.80</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>564.41</td><td align="right" class='awrc'>7.58</td><td align="right" class='awrc'>72.78</td><td scope="row" class='awrc'><a class="awr" href="#7rfsk00ahr6jt">7rfsk00ahr6jt</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>410.24</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>410.24</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>564.41</td><td align="right" class='awrnc'>7.39</td><td align="right" class='awrnc'>72.69</td><td scope="row" class='awrnc'><a class="awr" href="#91t7vqx3c4v6g">91t7vqx3c4v6g</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>409.84</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>409.84</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>563.76</td><td align="right" class='awrc'>7.42</td><td align="right" class='awrc'>72.70</td><td scope="row" class='awrc'><a class="awr" href="#bdq8dvq79a34v">bdq8dvq79a34v</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>408.59</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>408.59</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>562.82</td><td align="right" class='awrnc'>7.57</td><td align="right" class='awrnc'>72.60</td><td scope="row" class='awrnc'><a class="awr" href="#fbdrcrjuy8a1m">fbdrcrjuy8a1m</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>408.27</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>408.27</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>565.52</td><td align="right" class='awrc'>7.21</td><td align="right" class='awrc'>72.19</td><td scope="row" class='awrc'><a class="awr" href="#dsjqgbvpsxkp0">dsjqgbvpsxkp0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>408.16</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>408.16</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>563.33</td><td align="right" class='awrnc'>7.55</td><td align="right" class='awrnc'>72.46</td><td scope="row" class='awrnc'><a class="awr" href="#3d08mtaxbsq1u">3d08mtaxbsq1u</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>407.11</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>407.11</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>565.46</td><td align="right" class='awrc'>7.39</td><td align="right" class='awrc'>72.00</td><td scope="row" class='awrc'><a class="awr" href="#g1c8c2wjv67ct">g1c8c2wjv67ct</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>406.48</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>406.48</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>566.03</td><td align="right" class='awrnc'>7.27</td><td align="right" class='awrnc'>71.81</td><td scope="row" class='awrnc'><a class="awr" href="#a7ng116w7tgbq">a7ng116w7tgbq</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>404.99</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>404.99</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>566.44</td><td align="right" class='awrc'>7.40</td><td align="right" class='awrc'>71.50</td><td scope="row" class='awrc'><a class="awr" href="#dn5ztpzaw0pcu">dn5ztpzaw0pcu</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>404.23</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>404.23</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>563.29</td><td align="right" class='awrnc'>7.53</td><td align="right" class='awrnc'>71.76</td><td scope="row" class='awrnc'><a class="awr" href="#cum15qzq5hars">cum15qzq5hars</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>404.03</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>404.03</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>564.07</td><td align="right" class='awrc'>7.53</td><td align="right" class='awrc'>71.63</td><td scope="row" class='awrc'><a class="awr" href="#3u87drbcgrv1a">3u87drbcgrv1a</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>404.02</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>404.02</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>562.81</td><td align="right" class='awrnc'>7.62</td><td align="right" class='awrnc'>71.79</td><td scope="row" class='awrnc'><a class="awr" href="#bsr5npqqpj681">bsr5npqqpj681</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>403.78</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>403.78</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>563.51</td><td align="right" class='awrc'>7.43</td><td align="right" class='awrc'>71.66</td><td scope="row" class='awrc'><a class="awr" href="#4sr03khtycy30">4sr03khtycy30</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>403.50</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>403.50</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>563.52</td><td align="right" class='awrnc'>7.48</td><td align="right" class='awrnc'>71.60</td><td scope="row" class='awrnc'><a class="awr" href="#5a3jn37nb1cg6">5a3jn37nb1cg6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>403.22</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>403.22</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>564.33</td><td align="right" class='awrc'>7.40</td><td align="right" class='awrc'>71.45</td><td scope="row" class='awrc'><a class="awr" href="#9srhzg8u9vjsp">9srhzg8u9vjsp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>402.73</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>402.73</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>563.56</td><td align="right" class='awrnc'>7.53</td><td align="right" class='awrnc'>71.46</td><td scope="row" class='awrnc'><a class="awr" href="#5cfpr7gtmu9ww">5cfpr7gtmu9ww</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>402.65</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>402.65</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>562.61</td><td align="right" class='awrc'>7.51</td><td align="right" class='awrc'>71.57</td><td scope="row" class='awrc'><a class="awr" href="#8pu3nqrvwp360">8pu3nqrvwp360</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>401.69</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>401.69</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>562.96</td><td align="right" class='awrnc'>7.49</td><td align="right" class='awrnc'>71.35</td><td scope="row" class='awrnc'><a class="awr" href="#31ahtjq5rj0wr">31ahtjq5rj0wr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>401.55</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>401.55</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>564.33</td><td align="right" class='awrc'>7.43</td><td align="right" class='awrc'>71.15</td><td scope="row" class='awrc'><a class="awr" href="#g5565fvd0c1fr">g5565fvd0c1fr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>401.39</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>401.39</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>563.76</td><td align="right" class='awrnc'>7.23</td><td align="right" class='awrnc'>71.20</td><td scope="row" class='awrnc'><a class="awr" href="#5sdw02fvh7gku">5sdw02fvh7gku</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>401.37</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>401.37</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>565.81</td><td align="right" class='awrc'>7.44</td><td align="right" class='awrc'>70.94</td><td scope="row" class='awrc'><a class="awr" href="#9uvmr65d5xzyk">9uvmr65d5xzyk</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>401.15</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>401.15</td><td align="right" class='awrnc'>1.49</td><td align="right" class='awrnc'>564.63</td><td align="right" class='awrnc'>7.39</td><td align="right" class='awrnc'>71.05</td><td scope="row" class='awrnc'><a class="awr" href="#dn3tm10dh39sj">dn3tm10dh39sj</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>398.40</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>398.40</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>563.37</td><td align="right" class='awrc'>7.56</td><td align="right" class='awrc'>70.72</td><td scope="row" class='awrc'><a class="awr" href="#9pyjpd8qx4zrm">9pyjpd8qx4zrm</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>397.71</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>397.71</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>565.47</td><td align="right" class='awrnc'>7.26</td><td align="right" class='awrnc'>70.33</td><td scope="row" class='awrnc'><a class="awr" href="#d2zxvj6ss17k6">d2zxvj6ss17k6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>397.23</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>397.23</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>563.13</td><td align="right" class='awrc'>7.44</td><td align="right" class='awrc'>70.54</td><td scope="row" class='awrc'><a class="awr" href="#5hgphtrj7uqp2">5hgphtrj7uqp2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>396.20</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>396.20</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>563.63</td><td align="right" class='awrnc'>7.48</td><td align="right" class='awrnc'>70.29</td><td scope="row" class='awrnc'><a class="awr" href="#4nb55sh3050s4">4nb55sh3050s4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>396.10</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>396.10</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>565.49</td><td align="right" class='awrc'>7.32</td><td align="right" class='awrc'>70.05</td><td scope="row" class='awrc'><a class="awr" href="#bgxwnc1uyqzrn">bgxwnc1uyqzrn</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>395.38</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>395.38</td><td align="right" class='awrnc'>1.47</td><td align="right" class='awrnc'>564.31</td><td align="right" class='awrnc'>7.22</td><td align="right" class='awrnc'>70.06</td><td scope="row" class='awrnc'><a class="awr" href="#cz8nw7wxr6q6a">cz8nw7wxr6q6a</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>394.61</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>394.61</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>564.49</td><td align="right" class='awrc'>7.42</td><td align="right" class='awrc'>69.90</td><td scope="row" class='awrc'><a class="awr" href="#44w94s3knytqw">44w94s3knytqw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>394.21</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>394.21</td><td align="right" class='awrnc'>1.47</td><td align="right" class='awrnc'>565.50</td><td align="right" class='awrnc'>7.33</td><td align="right" class='awrnc'>69.71</td><td scope="row" class='awrnc'><a class="awr" href="#6a6qafya34rwa">6a6qafya34rwa</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>392.76</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>392.76</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>564.88</td><td align="right" class='awrc'>7.41</td><td align="right" class='awrc'>69.53</td><td scope="row" class='awrc'><a class="awr" href="#5kxrur91u9gs0">5kxrur91u9gs0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>389.99</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>389.99</td><td align="right" class='awrnc'>1.45</td><td align="right" class='awrnc'>564.40</td><td align="right" class='awrnc'>7.50</td><td align="right" class='awrnc'>69.10</td><td scope="row" class='awrnc'><a class="awr" href="#drkwgbbjkvcaj">drkwgbbjkvcaj</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>389.53</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>389.53</td><td align="right" class='awrc'>1.45</td><td align="right" class='awrc'>563.08</td><td align="right" class='awrc'>7.47</td><td align="right" class='awrc'>69.18</td><td scope="row" class='awrc'><a class="awr" href="#8v9kvbuhhrtt6">8v9kvbuhhrtt6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>361.22</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>361.22</td><td align="right" class='awrnc'>1.35</td><td align="right" class='awrnc'>563.44</td><td align="right" class='awrnc'>7.54</td><td align="right" class='awrnc'>64.11</td><td scope="row" class='awrnc'><a class="awr" href="#9yraxx50ufhwk">9yraxx50ufhwk</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>360.14</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>360.14</td><td align="right" class='awrc'>1.34</td><td align="right" class='awrc'>563.76</td><td align="right" class='awrc'>7.69</td><td align="right" class='awrc'>63.88</td><td scope="row" class='awrc'><a class="awr" href="#5krxnvhvxxszv">5krxnvhvxxszv</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="600"></a>
<h3 class="awr">SQL ordered by Gets</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> %Total - Buffer Gets	as a percentage of Total Buffer Gets </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Total Buffer Gets:	11,686,333</li>
<li class="awr">Captured SQL account for   97.6% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by buffer gets"><tr><th class="awrbg" scope="col">Buffer Gets </th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">Gets     per Exec  </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col"> %CPU</th><th class="awrbg" scope="col">	%IO</th><th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>9,430,804</td><td align="right" class='awrc'>672,439</td><td align="right" class='awrc'>14.02</td><td align="right" class='awrc'>80.70</td><td align="right" class='awrc'>23,326.14</td><td class='awrc'>7.7</td><td class='awrc'>74.1</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>1,927,195</td><td align="right" class='awrnc'>118,760</td><td align="right" class='awrnc'>16.23</td><td align="right" class='awrnc'>16.49</td><td align="right" class='awrnc'>12,674.32</td><td class='awrnc'>5.6</td><td class='awrnc'>72.9</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>274,331</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>274,331.00</td><td align="right" class='awrc'>2.35</td><td align="right" class='awrc'>564.43</td><td class='awrc'>6.7</td><td class='awrc'>95.6</td><td scope="row" class='awrc'><a class="awr" href="#7u664zdtgwt9d">7u664zdtgwt9d</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>185,953</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>185,953.00</td><td align="right" class='awrnc'>1.59</td><td align="right" class='awrnc'>564.26</td><td class='awrnc'>7.5</td><td class='awrnc'>76.2</td><td scope="row" class='awrnc'><a class="awr" href="#94v3428qavp80">94v3428qavp80</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>184,520</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>184,520.00</td><td align="right" class='awrc'>1.58</td><td align="right" class='awrc'>564.23</td><td class='awrc'>7.3</td><td class='awrc'>73.4</td><td scope="row" class='awrc'><a class="awr" href="#cyxm2z08gakb0">cyxm2z08gakb0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>180,732</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>180,732.00</td><td align="right" class='awrnc'>1.55</td><td align="right" class='awrnc'>563.51</td><td class='awrnc'>7.4</td><td class='awrnc'>71.7</td><td scope="row" class='awrnc'><a class="awr" href="#4sr03khtycy30">4sr03khtycy30</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>180,646</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>180,646.00</td><td align="right" class='awrc'>1.55</td><td align="right" class='awrc'>563.29</td><td class='awrc'>7.5</td><td class='awrc'>71.8</td><td scope="row" class='awrc'><a class="awr" href="#cum15qzq5hars">cum15qzq5hars</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>178,548</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>178,548.00</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>564.41</td><td class='awrnc'>7.6</td><td class='awrnc'>72.8</td><td scope="row" class='awrnc'><a class="awr" href="#7rfsk00ahr6jt">7rfsk00ahr6jt</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>178,511</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>178,511.00</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>563.56</td><td class='awrc'>7.5</td><td class='awrc'>71.5</td><td scope="row" class='awrc'><a class="awr" href="#5cfpr7gtmu9ww">5cfpr7gtmu9ww</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>178,492</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>178,492.00</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>564.34</td><td class='awrnc'>7.3</td><td class='awrnc'>74.4</td><td scope="row" class='awrnc'><a class="awr" href="#7kqv52xz3bbhp">7kqv52xz3bbhp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>178,348</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>178,348.00</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>562.61</td><td class='awrc'>7.5</td><td class='awrc'>71.6</td><td scope="row" class='awrc'><a class="awr" href="#8pu3nqrvwp360">8pu3nqrvwp360</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>178,256</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>178,256.00</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>563.52</td><td class='awrnc'>7.5</td><td class='awrnc'>71.6</td><td scope="row" class='awrnc'><a class="awr" href="#5a3jn37nb1cg6">5a3jn37nb1cg6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>178,241</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>178,241.00</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>566.44</td><td class='awrc'>7.4</td><td class='awrc'>71.5</td><td scope="row" class='awrc'><a class="awr" href="#dn5ztpzaw0pcu">dn5ztpzaw0pcu</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>177,672</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>177,672.00</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>562.81</td><td class='awrnc'>7.6</td><td class='awrnc'>71.8</td><td scope="row" class='awrnc'><a class="awr" href="#bsr5npqqpj681">bsr5npqqpj681</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>176,996</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>176,996.00</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>563.33</td><td class='awrc'>7.6</td><td class='awrc'>72.5</td><td scope="row" class='awrc'><a class="awr" href="#3d08mtaxbsq1u">3d08mtaxbsq1u</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>176,807</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>176,807.00</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>565.81</td><td class='awrnc'>7.4</td><td class='awrnc'>70.9</td><td scope="row" class='awrnc'><a class="awr" href="#9uvmr65d5xzyk">9uvmr65d5xzyk</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>176,759</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>176,759.00</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>563.37</td><td class='awrc'>7.6</td><td class='awrc'>70.7</td><td scope="row" class='awrc'><a class="awr" href="#9pyjpd8qx4zrm">9pyjpd8qx4zrm</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>176,722</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>176,722.00</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>565.51</td><td class='awrnc'>7.3</td><td class='awrnc'>73</td><td scope="row" class='awrnc'><a class="awr" href="#0bwq9jnxx14ju">0bwq9jnxx14ju</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>176,024</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>176,024.00</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>564.47</td><td class='awrc'>7.4</td><td class='awrc'>73.2</td><td scope="row" class='awrc'><a class="awr" href="#50jfcpqbqagtc">50jfcpqbqagtc</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>175,549</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>175,549.00</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>563.13</td><td class='awrnc'>7.4</td><td class='awrnc'>70.5</td><td scope="row" class='awrnc'><a class="awr" href="#5hgphtrj7uqp2">5hgphtrj7uqp2</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>175,492</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>175,492.00</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>564.63</td><td class='awrc'>7.4</td><td class='awrc'>71</td><td scope="row" class='awrc'><a class="awr" href="#dn3tm10dh39sj">dn3tm10dh39sj</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>174,670</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>174,670.00</td><td align="right" class='awrnc'>1.49</td><td align="right" class='awrnc'>564.33</td><td class='awrnc'>7.4</td><td class='awrnc'>71.2</td><td scope="row" class='awrnc'><a class="awr" href="#g5565fvd0c1fr">g5565fvd0c1fr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>174,317</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>174,317.00</td><td align="right" class='awrc'>1.49</td><td align="right" class='awrc'>562.96</td><td class='awrc'>7.5</td><td class='awrc'>71.4</td><td scope="row" class='awrc'><a class="awr" href="#31ahtjq5rj0wr">31ahtjq5rj0wr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>174,138</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>174,138.00</td><td align="right" class='awrnc'>1.49</td><td align="right" class='awrnc'>564.07</td><td class='awrnc'>7.5</td><td class='awrnc'>71.6</td><td scope="row" class='awrnc'><a class="awr" href="#3u87drbcgrv1a">3u87drbcgrv1a</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>173,198</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>173,198.00</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>563.63</td><td class='awrc'>7.5</td><td class='awrc'>70.3</td><td scope="row" class='awrc'><a class="awr" href="#4nb55sh3050s4">4nb55sh3050s4</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>172,798</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>172,798.00</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>565.49</td><td class='awrnc'>7.3</td><td class='awrnc'>70</td><td scope="row" class='awrnc'><a class="awr" href="#bgxwnc1uyqzrn">bgxwnc1uyqzrn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>172,688</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>172,688.00</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>565.47</td><td class='awrc'>7.3</td><td class='awrc'>70.3</td><td scope="row" class='awrc'><a class="awr" href="#d2zxvj6ss17k6">d2zxvj6ss17k6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>172,564</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>172,564.00</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>567.18</td><td class='awrnc'>7.5</td><td class='awrnc'>72.5</td><td scope="row" class='awrnc'><a class="awr" href="#f5bd91b8pq2rp">f5bd91b8pq2rp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>172,407</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>172,407.00</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>565.52</td><td class='awrc'>7.2</td><td class='awrc'>72.2</td><td scope="row" class='awrc'><a class="awr" href="#dsjqgbvpsxkp0">dsjqgbvpsxkp0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>172,304</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>172,304.00</td><td align="right" class='awrnc'>1.47</td><td align="right" class='awrnc'>563.76</td><td class='awrnc'>7.4</td><td class='awrnc'>72.7</td><td scope="row" class='awrnc'><a class="awr" href="#bdq8dvq79a34v">bdq8dvq79a34v</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>171,542</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>171,542.00</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>566.03</td><td class='awrc'>7.3</td><td class='awrc'>71.8</td><td scope="row" class='awrc'><a class="awr" href="#a7ng116w7tgbq">a7ng116w7tgbq</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>171,028</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>171,028.00</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>565.46</td><td class='awrnc'>7.4</td><td class='awrnc'>72</td><td scope="row" class='awrnc'><a class="awr" href="#g1c8c2wjv67ct">g1c8c2wjv67ct</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>170,086</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>170,086.00</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>562.82</td><td class='awrc'>7.6</td><td class='awrc'>72.6</td><td scope="row" class='awrc'><a class="awr" href="#fbdrcrjuy8a1m">fbdrcrjuy8a1m</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>169,767</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>169,767.00</td><td align="right" class='awrnc'>1.45</td><td align="right" class='awrnc'>563.76</td><td class='awrnc'>7.2</td><td class='awrnc'>71.2</td><td scope="row" class='awrnc'><a class="awr" href="#5sdw02fvh7gku">5sdw02fvh7gku</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>169,122</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>169,122.00</td><td align="right" class='awrc'>1.45</td><td align="right" class='awrc'>565.35</td><td class='awrc'>7.4</td><td class='awrc'>73.6</td><td scope="row" class='awrc'><a class="awr" href="#ffv31a3nd2hp7">ffv31a3nd2hp7</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>167,457</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>167,457.00</td><td align="right" class='awrnc'>1.43</td><td align="right" class='awrnc'>564.41</td><td class='awrnc'>7.4</td><td class='awrnc'>72.7</td><td scope="row" class='awrnc'><a class="awr" href="#91t7vqx3c4v6g">91t7vqx3c4v6g</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>167,190</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>167,190.00</td><td align="right" class='awrc'>1.43</td><td align="right" class='awrc'>564.40</td><td class='awrc'>7.5</td><td class='awrc'>69.1</td><td scope="row" class='awrc'><a class="awr" href="#drkwgbbjkvcaj">drkwgbbjkvcaj</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>166,583</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>166,583.00</td><td align="right" class='awrnc'>1.43</td><td align="right" class='awrnc'>564.33</td><td class='awrnc'>7.4</td><td class='awrnc'>71.5</td><td scope="row" class='awrnc'><a class="awr" href="#9srhzg8u9vjsp">9srhzg8u9vjsp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>165,454</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>165,454.00</td><td align="right" class='awrc'>1.42</td><td align="right" class='awrc'>565.50</td><td class='awrc'>7.3</td><td class='awrc'>69.7</td><td scope="row" class='awrc'><a class="awr" href="#6a6qafya34rwa">6a6qafya34rwa</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>164,735</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>164,735.00</td><td align="right" class='awrnc'>1.41</td><td align="right" class='awrnc'>563.08</td><td class='awrnc'>7.5</td><td class='awrnc'>69.2</td><td scope="row" class='awrnc'><a class="awr" href="#8v9kvbuhhrtt6">8v9kvbuhhrtt6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>164,407</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>164,407.00</td><td align="right" class='awrc'>1.41</td><td align="right" class='awrc'>564.88</td><td class='awrc'>7.4</td><td class='awrc'>69.5</td><td scope="row" class='awrc'><a class="awr" href="#5kxrur91u9gs0">5kxrur91u9gs0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>163,595</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>163,595.00</td><td align="right" class='awrnc'>1.40</td><td align="right" class='awrnc'>564.31</td><td class='awrnc'>7.2</td><td class='awrnc'>70.1</td><td scope="row" class='awrnc'><a class="awr" href="#cz8nw7wxr6q6a">cz8nw7wxr6q6a</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>161,801</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>161,801.00</td><td align="right" class='awrc'>1.38</td><td align="right" class='awrc'>564.49</td><td class='awrc'>7.4</td><td class='awrc'>69.9</td><td scope="row" class='awrc'><a class="awr" href="#44w94s3knytqw">44w94s3knytqw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>146,485</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>146,485.00</td><td align="right" class='awrnc'>1.25</td><td align="right" class='awrnc'>563.76</td><td class='awrnc'>7.7</td><td class='awrnc'>63.9</td><td scope="row" class='awrnc'><a class="awr" href="#5krxnvhvxxszv">5krxnvhvxxszv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>140,279</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>140,279.00</td><td align="right" class='awrc'>1.20</td><td align="right" class='awrc'>563.44</td><td class='awrc'>7.5</td><td class='awrc'>64.1</td><td scope="row" class='awrc'><a class="awr" href="#9yraxx50ufhwk">9yraxx50ufhwk</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="700"></a>
<h3 class="awr">SQL ordered by Reads</h3>
<ul>
<li class="awr"> %Total - Physical Reads as a percentage of Total Disk Reads </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Total Disk Reads:	8,848,730</li>
<li class="awr">Captured SQL account for   99.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by physical reads"><tr><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">Reads	  per Exec  </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>7,441,806</td><td align="right" class='awrc'>672,439</td><td align="right" class='awrc'>11.07</td><td align="right" class='awrc'>84.10</td><td align="right" class='awrc'>23,326.14</td><td align="right" class='awrc'>7.69</td><td align="right" class='awrc'>74.08</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>1,312,734</td><td align="right" class='awrnc'>118,760</td><td align="right" class='awrnc'>11.05</td><td align="right" class='awrnc'>14.84</td><td align="right" class='awrnc'>12,674.32</td><td align="right" class='awrnc'>5.58</td><td align="right" class='awrnc'>72.91</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>206,251</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>206,251.00</td><td align="right" class='awrc'>2.33</td><td align="right" class='awrc'>564.43</td><td align="right" class='awrc'>6.66</td><td align="right" class='awrc'>95.64</td><td scope="row" class='awrc'><a class="awr" href="#7u664zdtgwt9d">7u664zdtgwt9d</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>142,945</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>142,945.00</td><td align="right" class='awrnc'>1.62</td><td align="right" class='awrnc'>564.26</td><td align="right" class='awrnc'>7.47</td><td align="right" class='awrnc'>76.17</td><td scope="row" class='awrnc'><a class="awr" href="#94v3428qavp80">94v3428qavp80</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>139,383</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>139,383.00</td><td align="right" class='awrc'>1.58</td><td align="right" class='awrc'>564.23</td><td align="right" class='awrc'>7.29</td><td align="right" class='awrc'>73.45</td><td scope="row" class='awrc'><a class="awr" href="#cyxm2z08gakb0">cyxm2z08gakb0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>137,757</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>137,757.00</td><td align="right" class='awrnc'>1.56</td><td align="right" class='awrnc'>564.34</td><td align="right" class='awrnc'>7.30</td><td align="right" class='awrnc'>74.37</td><td scope="row" class='awrnc'><a class="awr" href="#7kqv52xz3bbhp">7kqv52xz3bbhp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>135,921</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>135,921.00</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>565.51</td><td align="right" class='awrc'>7.30</td><td align="right" class='awrc'>73.00</td><td scope="row" class='awrc'><a class="awr" href="#0bwq9jnxx14ju">0bwq9jnxx14ju</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>135,801</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>135,801.00</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>563.51</td><td align="right" class='awrnc'>7.43</td><td align="right" class='awrnc'>71.66</td><td scope="row" class='awrnc'><a class="awr" href="#4sr03khtycy30">4sr03khtycy30</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>135,640</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>135,640.00</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>563.29</td><td align="right" class='awrc'>7.53</td><td align="right" class='awrc'>71.76</td><td scope="row" class='awrc'><a class="awr" href="#cum15qzq5hars">cum15qzq5hars</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>135,367</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>135,367.00</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>564.47</td><td align="right" class='awrnc'>7.37</td><td align="right" class='awrnc'>73.24</td><td scope="row" class='awrnc'><a class="awr" href="#50jfcpqbqagtc">50jfcpqbqagtc</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>135,362</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>135,362.00</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>564.41</td><td align="right" class='awrc'>7.58</td><td align="right" class='awrc'>72.78</td><td scope="row" class='awrc'><a class="awr" href="#7rfsk00ahr6jt">7rfsk00ahr6jt</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>134,578</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>134,578.00</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>563.33</td><td align="right" class='awrnc'>7.55</td><td align="right" class='awrnc'>72.46</td><td scope="row" class='awrnc'><a class="awr" href="#3d08mtaxbsq1u">3d08mtaxbsq1u</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>134,455</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>134,455.00</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>563.52</td><td align="right" class='awrc'>7.48</td><td align="right" class='awrc'>71.60</td><td scope="row" class='awrc'><a class="awr" href="#5a3jn37nb1cg6">5a3jn37nb1cg6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>134,189</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>134,189.00</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>562.61</td><td align="right" class='awrnc'>7.51</td><td align="right" class='awrnc'>71.57</td><td scope="row" class='awrnc'><a class="awr" href="#8pu3nqrvwp360">8pu3nqrvwp360</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>133,970</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>133,970.00</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>562.81</td><td align="right" class='awrc'>7.62</td><td align="right" class='awrc'>71.79</td><td scope="row" class='awrc'><a class="awr" href="#bsr5npqqpj681">bsr5npqqpj681</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>133,909</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>133,909.00</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>566.44</td><td align="right" class='awrnc'>7.40</td><td align="right" class='awrnc'>71.50</td><td scope="row" class='awrnc'><a class="awr" href="#dn5ztpzaw0pcu">dn5ztpzaw0pcu</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>133,862</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>133,862.00</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>563.56</td><td align="right" class='awrc'>7.53</td><td align="right" class='awrc'>71.46</td><td scope="row" class='awrc'><a class="awr" href="#5cfpr7gtmu9ww">5cfpr7gtmu9ww</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>133,255</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>133,255.00</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>565.81</td><td align="right" class='awrnc'>7.44</td><td align="right" class='awrnc'>70.94</td><td scope="row" class='awrnc'><a class="awr" href="#9uvmr65d5xzyk">9uvmr65d5xzyk</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>133,177</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>133,177.00</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>565.52</td><td align="right" class='awrc'>7.21</td><td align="right" class='awrc'>72.19</td><td scope="row" class='awrc'><a class="awr" href="#dsjqgbvpsxkp0">dsjqgbvpsxkp0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>133,157</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>133,157.00</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>567.18</td><td align="right" class='awrnc'>7.45</td><td align="right" class='awrnc'>72.54</td><td scope="row" class='awrnc'><a class="awr" href="#f5bd91b8pq2rp">f5bd91b8pq2rp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>132,779</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>132,779.00</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>563.37</td><td align="right" class='awrc'>7.56</td><td align="right" class='awrc'>70.72</td><td scope="row" class='awrc'><a class="awr" href="#9pyjpd8qx4zrm">9pyjpd8qx4zrm</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>132,526</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>132,526.00</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>565.35</td><td align="right" class='awrnc'>7.41</td><td align="right" class='awrnc'>73.65</td><td scope="row" class='awrnc'><a class="awr" href="#ffv31a3nd2hp7">ffv31a3nd2hp7</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>132,404</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>132,404.00</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>562.96</td><td align="right" class='awrc'>7.49</td><td align="right" class='awrc'>71.35</td><td scope="row" class='awrc'><a class="awr" href="#31ahtjq5rj0wr">31ahtjq5rj0wr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>132,389</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>132,389.00</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>563.76</td><td align="right" class='awrnc'>7.42</td><td align="right" class='awrnc'>72.70</td><td scope="row" class='awrnc'><a class="awr" href="#bdq8dvq79a34v">bdq8dvq79a34v</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>132,335</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>132,335.00</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>564.63</td><td align="right" class='awrc'>7.39</td><td align="right" class='awrc'>71.05</td><td scope="row" class='awrc'><a class="awr" href="#dn3tm10dh39sj">dn3tm10dh39sj</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>132,274</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>132,274.00</td><td align="right" class='awrnc'>1.49</td><td align="right" class='awrnc'>564.33</td><td align="right" class='awrnc'>7.43</td><td align="right" class='awrnc'>71.15</td><td scope="row" class='awrnc'><a class="awr" href="#g5565fvd0c1fr">g5565fvd0c1fr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>132,184</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>132,184.00</td><td align="right" class='awrc'>1.49</td><td align="right" class='awrc'>563.13</td><td align="right" class='awrc'>7.44</td><td align="right" class='awrc'>70.54</td><td scope="row" class='awrc'><a class="awr" href="#5hgphtrj7uqp2">5hgphtrj7uqp2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>132,165</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>132,165.00</td><td align="right" class='awrnc'>1.49</td><td align="right" class='awrnc'>564.07</td><td align="right" class='awrnc'>7.53</td><td align="right" class='awrnc'>71.63</td><td scope="row" class='awrnc'><a class="awr" href="#3u87drbcgrv1a">3u87drbcgrv1a</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>131,932</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>131,932.00</td><td align="right" class='awrc'>1.49</td><td align="right" class='awrc'>566.03</td><td align="right" class='awrc'>7.27</td><td align="right" class='awrc'>71.81</td><td scope="row" class='awrc'><a class="awr" href="#a7ng116w7tgbq">a7ng116w7tgbq</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>131,567</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>131,567.00</td><td align="right" class='awrnc'>1.49</td><td align="right" class='awrnc'>565.46</td><td align="right" class='awrnc'>7.39</td><td align="right" class='awrnc'>72.00</td><td scope="row" class='awrnc'><a class="awr" href="#g1c8c2wjv67ct">g1c8c2wjv67ct</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>131,302</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>131,302.00</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>562.82</td><td align="right" class='awrc'>7.57</td><td align="right" class='awrc'>72.60</td><td scope="row" class='awrc'><a class="awr" href="#fbdrcrjuy8a1m">fbdrcrjuy8a1m</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>130,799</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>130,799.00</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>565.47</td><td align="right" class='awrnc'>7.26</td><td align="right" class='awrnc'>70.33</td><td scope="row" class='awrnc'><a class="awr" href="#d2zxvj6ss17k6">d2zxvj6ss17k6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>130,696</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>130,696.00</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>565.49</td><td align="right" class='awrc'>7.32</td><td align="right" class='awrc'>70.05</td><td scope="row" class='awrc'><a class="awr" href="#bgxwnc1uyqzrn">bgxwnc1uyqzrn</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>130,679</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>130,679.00</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>564.41</td><td align="right" class='awrnc'>7.39</td><td align="right" class='awrnc'>72.69</td><td scope="row" class='awrnc'><a class="awr" href="#91t7vqx3c4v6g">91t7vqx3c4v6g</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>130,611</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>130,611.00</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>563.76</td><td align="right" class='awrc'>7.23</td><td align="right" class='awrc'>71.20</td><td scope="row" class='awrc'><a class="awr" href="#5sdw02fvh7gku">5sdw02fvh7gku</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>130,398</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>130,398.00</td><td align="right" class='awrnc'>1.47</td><td align="right" class='awrnc'>563.63</td><td align="right" class='awrnc'>7.48</td><td align="right" class='awrnc'>70.29</td><td scope="row" class='awrnc'><a class="awr" href="#4nb55sh3050s4">4nb55sh3050s4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>128,977</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>128,977.00</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>564.33</td><td align="right" class='awrc'>7.40</td><td align="right" class='awrc'>71.45</td><td scope="row" class='awrc'><a class="awr" href="#9srhzg8u9vjsp">9srhzg8u9vjsp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>127,356</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>127,356.00</td><td align="right" class='awrnc'>1.44</td><td align="right" class='awrnc'>565.50</td><td align="right" class='awrnc'>7.33</td><td align="right" class='awrnc'>69.71</td><td scope="row" class='awrnc'><a class="awr" href="#6a6qafya34rwa">6a6qafya34rwa</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>127,025</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>127,025.00</td><td align="right" class='awrc'>1.44</td><td align="right" class='awrc'>564.40</td><td align="right" class='awrc'>7.50</td><td align="right" class='awrc'>69.10</td><td scope="row" class='awrc'><a class="awr" href="#drkwgbbjkvcaj">drkwgbbjkvcaj</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>126,650</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>126,650.00</td><td align="right" class='awrnc'>1.43</td><td align="right" class='awrnc'>564.31</td><td align="right" class='awrnc'>7.22</td><td align="right" class='awrnc'>70.06</td><td scope="row" class='awrnc'><a class="awr" href="#cz8nw7wxr6q6a">cz8nw7wxr6q6a</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>125,736</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>125,736.00</td><td align="right" class='awrc'>1.42</td><td align="right" class='awrc'>564.88</td><td align="right" class='awrc'>7.41</td><td align="right" class='awrc'>69.53</td><td scope="row" class='awrc'><a class="awr" href="#5kxrur91u9gs0">5kxrur91u9gs0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>125,419</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>125,419.00</td><td align="right" class='awrnc'>1.42</td><td align="right" class='awrnc'>564.49</td><td align="right" class='awrnc'>7.42</td><td align="right" class='awrnc'>69.90</td><td scope="row" class='awrnc'><a class="awr" href="#44w94s3knytqw">44w94s3knytqw</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>125,127</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>125,127.00</td><td align="right" class='awrc'>1.41</td><td align="right" class='awrc'>563.08</td><td align="right" class='awrc'>7.47</td><td align="right" class='awrc'>69.18</td><td scope="row" class='awrc'><a class="awr" href="#8v9kvbuhhrtt6">8v9kvbuhhrtt6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>111,522</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>111,522.00</td><td align="right" class='awrnc'>1.26</td><td align="right" class='awrnc'>563.76</td><td align="right" class='awrnc'>7.69</td><td align="right" class='awrnc'>63.88</td><td scope="row" class='awrnc'><a class="awr" href="#5krxnvhvxxszv">5krxnvhvxxszv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>108,723</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>108,723.00</td><td align="right" class='awrc'>1.23</td><td align="right" class='awrc'>563.44</td><td align="right" class='awrc'>7.54</td><td align="right" class='awrc'>64.11</td><td scope="row" class='awrc'><a class="awr" href="#9yraxx50ufhwk">9yraxx50ufhwk</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="740"></a>
<h3 class="awr">SQL ordered by Physical Reads (UnOptimized)</h3>
<ul>
<li class="awr"> UnOptimized Read Reqs = Physical Read Reqs -	    (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile) </li>
<li class="awr"> %Opt	- Optimized Reads as percentage of SQL Read Requests </li>
<li class="awr"> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs</li>
<li class="awr">Total Physical Read Requests:	    8,847,855</li>
<li class="awr">Captured SQL account for    0.2% of Total</li>
<li class="awr">Total UnOptimized Read Requests:       8,847,855</li>
<li class="awr">Captured SQL account for    0.2% of Total</li>
<li class="awr">Total Optimized Read Requests:		     1</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by unoptimized read requests"><tr><th class="awrbg" scope="col">UnOptimized Read Reqs</th><th class="awrbg" scope="col">Physical  Read Reqs</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">UnOptimized Reqs per Exec</th><th class="awrbg" scope="col">%Opt</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>206,251</td><td align="right" class='awrc'>206,251</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>206,251.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2.33</td><td scope="row" class='awrc'><a class="awr" href="#7u664zdtgwt9d">7u664zdtgwt9d</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>142,945</td><td align="right" class='awrnc'>142,945</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>142,945.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.62</td><td scope="row" class='awrnc'><a class="awr" href="#94v3428qavp80">94v3428qavp80</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>139,383</td><td align="right" class='awrc'>139,383</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>139,383.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.58</td><td scope="row" class='awrc'><a class="awr" href="#cyxm2z08gakb0">cyxm2z08gakb0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>137,757</td><td align="right" class='awrnc'>137,757</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>137,757.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.56</td><td scope="row" class='awrnc'><a class="awr" href="#7kqv52xz3bbhp">7kqv52xz3bbhp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>135,921</td><td align="right" class='awrc'>135,921</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>135,921.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.54</td><td scope="row" class='awrc'><a class="awr" href="#0bwq9jnxx14ju">0bwq9jnxx14ju</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>135,801</td><td align="right" class='awrnc'>135,801</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>135,801.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.53</td><td scope="row" class='awrnc'><a class="awr" href="#4sr03khtycy30">4sr03khtycy30</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>135,663</td><td align="right" class='awrc'>135,663</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>135,663.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.53</td><td scope="row" class='awrc'><a class="awr" href="#cum15qzq5hars">cum15qzq5hars</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>135,367</td><td align="right" class='awrnc'>135,367</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>135,367.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.53</td><td scope="row" class='awrnc'><a class="awr" href="#50jfcpqbqagtc">50jfcpqbqagtc</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>135,362</td><td align="right" class='awrc'>135,362</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>135,362.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.53</td><td scope="row" class='awrc'><a class="awr" href="#7rfsk00ahr6jt">7rfsk00ahr6jt</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>134,601</td><td align="right" class='awrnc'>134,601</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>134,601.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.52</td><td scope="row" class='awrnc'><a class="awr" href="#3d08mtaxbsq1u">3d08mtaxbsq1u</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>134,455</td><td align="right" class='awrc'>134,455</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>134,455.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.52</td><td scope="row" class='awrc'><a class="awr" href="#5a3jn37nb1cg6">5a3jn37nb1cg6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>134,189</td><td align="right" class='awrnc'>134,189</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>134,189.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.52</td><td scope="row" class='awrnc'><a class="awr" href="#8pu3nqrvwp360">8pu3nqrvwp360</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>134,016</td><td align="right" class='awrc'>134,016</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>134,016.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.51</td><td scope="row" class='awrc'><a class="awr" href="#bsr5npqqpj681">bsr5npqqpj681</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>133,909</td><td align="right" class='awrnc'>133,909</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>133,909.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.51</td><td scope="row" class='awrnc'><a class="awr" href="#dn5ztpzaw0pcu">dn5ztpzaw0pcu</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>133,862</td><td align="right" class='awrc'>133,862</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>133,862.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.51</td><td scope="row" class='awrc'><a class="awr" href="#5cfpr7gtmu9ww">5cfpr7gtmu9ww</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>133,278</td><td align="right" class='awrnc'>133,278</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>133,278.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.51</td><td scope="row" class='awrnc'><a class="awr" href="#9uvmr65d5xzyk">9uvmr65d5xzyk</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>133,180</td><td align="right" class='awrc'>133,180</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>133,180.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.51</td><td scope="row" class='awrc'><a class="awr" href="#f5bd91b8pq2rp">f5bd91b8pq2rp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>133,177</td><td align="right" class='awrnc'>133,177</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>133,177.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.51</td><td scope="row" class='awrnc'><a class="awr" href="#dsjqgbvpsxkp0">dsjqgbvpsxkp0</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>132,779</td><td align="right" class='awrc'>132,779</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>132,779.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.50</td><td scope="row" class='awrc'><a class="awr" href="#9pyjpd8qx4zrm">9pyjpd8qx4zrm</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>132,526</td><td align="right" class='awrnc'>132,526</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>132,526.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.50</td><td scope="row" class='awrnc'><a class="awr" href="#ffv31a3nd2hp7">ffv31a3nd2hp7</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>132,404</td><td align="right" class='awrc'>132,404</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>132,404.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.50</td><td scope="row" class='awrc'><a class="awr" href="#31ahtjq5rj0wr">31ahtjq5rj0wr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>132,389</td><td align="right" class='awrnc'>132,389</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>132,389.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.50</td><td scope="row" class='awrnc'><a class="awr" href="#bdq8dvq79a34v">bdq8dvq79a34v</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>132,358</td><td align="right" class='awrc'>132,358</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>132,358.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.50</td><td scope="row" class='awrc'><a class="awr" href="#dn3tm10dh39sj">dn3tm10dh39sj</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>132,274</td><td align="right" class='awrnc'>132,274</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>132,274.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.49</td><td scope="row" class='awrnc'><a class="awr" href="#g5565fvd0c1fr">g5565fvd0c1fr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>132,184</td><td align="right" class='awrc'>132,184</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>132,184.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.49</td><td scope="row" class='awrc'><a class="awr" href="#5hgphtrj7uqp2">5hgphtrj7uqp2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>132,165</td><td align="right" class='awrnc'>132,165</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>132,165.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.49</td><td scope="row" class='awrnc'><a class="awr" href="#3u87drbcgrv1a">3u87drbcgrv1a</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>131,932</td><td align="right" class='awrc'>131,932</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>131,932.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.49</td><td scope="row" class='awrc'><a class="awr" href="#a7ng116w7tgbq">a7ng116w7tgbq</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>131,567</td><td align="right" class='awrnc'>131,567</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>131,567.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.49</td><td scope="row" class='awrnc'><a class="awr" href="#g1c8c2wjv67ct">g1c8c2wjv67ct</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>131,302</td><td align="right" class='awrc'>131,302</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>131,302.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.48</td><td scope="row" class='awrc'><a class="awr" href="#fbdrcrjuy8a1m">fbdrcrjuy8a1m</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>130,799</td><td align="right" class='awrnc'>130,799</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>130,799.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.48</td><td scope="row" class='awrnc'><a class="awr" href="#d2zxvj6ss17k6">d2zxvj6ss17k6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>130,702</td><td align="right" class='awrc'>130,702</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>130,702.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.48</td><td scope="row" class='awrc'><a class="awr" href="#91t7vqx3c4v6g">91t7vqx3c4v6g</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>130,696</td><td align="right" class='awrnc'>130,696</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>130,696.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.48</td><td scope="row" class='awrnc'><a class="awr" href="#bgxwnc1uyqzrn">bgxwnc1uyqzrn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>130,611</td><td align="right" class='awrc'>130,611</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>130,611.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.48</td><td scope="row" class='awrc'><a class="awr" href="#5sdw02fvh7gku">5sdw02fvh7gku</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>130,398</td><td align="right" class='awrnc'>130,398</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>130,398.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.47</td><td scope="row" class='awrnc'><a class="awr" href="#4nb55sh3050s4">4nb55sh3050s4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>128,977</td><td align="right" class='awrc'>128,977</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>128,977.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.46</td><td scope="row" class='awrc'><a class="awr" href="#9srhzg8u9vjsp">9srhzg8u9vjsp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>127,356</td><td align="right" class='awrnc'>127,356</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>127,356.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.44</td><td scope="row" class='awrnc'><a class="awr" href="#6a6qafya34rwa">6a6qafya34rwa</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>127,025</td><td align="right" class='awrc'>127,025</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>127,025.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.44</td><td scope="row" class='awrc'><a class="awr" href="#drkwgbbjkvcaj">drkwgbbjkvcaj</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>126,673</td><td align="right" class='awrnc'>126,673</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>126,673.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.43</td><td scope="row" class='awrnc'><a class="awr" href="#cz8nw7wxr6q6a">cz8nw7wxr6q6a</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>125,736</td><td align="right" class='awrc'>125,736</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>125,736.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.42</td><td scope="row" class='awrc'><a class="awr" href="#5kxrur91u9gs0">5kxrur91u9gs0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>125,419</td><td align="right" class='awrnc'>125,419</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>125,419.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.42</td><td scope="row" class='awrnc'><a class="awr" href="#44w94s3knytqw">44w94s3knytqw</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>125,150</td><td align="right" class='awrc'>125,150</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>125,150.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.41</td><td scope="row" class='awrc'><a class="awr" href="#8v9kvbuhhrtt6">8v9kvbuhhrtt6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>111,522</td><td align="right" class='awrnc'>111,522</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>111,522.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.26</td><td scope="row" class='awrnc'><a class="awr" href="#5krxnvhvxxszv">5krxnvhvxxszv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>108,769</td><td align="right" class='awrc'>108,769</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>108,769.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.23</td><td scope="row" class='awrc'><a class="awr" href="#9yraxx50ufhwk">9yraxx50ufhwk</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="800"></a>
<h3 class="awr">SQL ordered by Executions</h3>
<ul>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Total Executions:	  806,212</li>
<li class="awr">Captured SQL account for   98.8% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by number of executions"><tr><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">Rows Processed</th><th class="awrbg" scope="col">Rows per Exec</th><th class="awrbg" scope="col">Elapsed	Time (s)</th><th class="awrbg" scope="col"> %CPU</th><th class="awrbg" scope="col">  %IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>672,439</td><td align="right" class='awrc'>672,480</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>23,326.14</td><td class='awrc'>7.7</td><td class='awrc'>74.1</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>118,760</td><td align="right" class='awrnc'>1,306,360</td><td align="right" class='awrnc'>11.00</td><td align="right" class='awrnc'>12,674.32</td><td class='awrnc'>5.6</td><td class='awrnc'>72.9</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>2,078</td><td align="right" class='awrc'>2,033</td><td align="right" class='awrc'>0.98</td><td align="right" class='awrc'>0.18</td><td class='awrc'>99.1</td><td class='awrc'>0</td><td scope="row" class='awrc'><a class="awr" href="#24djtk7r8fz33">24djtk7r8fz33</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>update svcobj_access$ set acce...</td></tr>
<tr><td align="right" class='awrnc'>1,403</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.09</td><td class='awrnc'>74.8</td><td class='awrnc'>24.7</td><td scope="row" class='awrnc'><a class="awr" href="#87gaftwrm2h68">87gaftwrm2h68</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select o.owner#, o.name, o.nam...</td></tr>
<tr><td align="right" class='awrc'>343</td><td align="right" class='awrc'>343</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.07</td><td class='awrc'>103.4</td><td class='awrc'>0</td><td scope="row" class='awrc'><a class="awr" href="#86708bvah4akq">86708bvah4akq</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select name from undo$ where f...</td></tr>
<tr><td align="right" class='awrnc'>159</td><td align="right" class='awrnc'>84</td><td align="right" class='awrnc'>0.53</td><td align="right" class='awrnc'>0.39</td><td class='awrnc'>11</td><td class='awrnc'>87.2</td><td scope="row" class='awrnc'><a class="awr" href="#acmvv4fhdc9zh">acmvv4fhdc9zh</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select obj#, type#, ctime, mti...</td></tr>
<tr><td align="right" class='awrc'>94</td><td align="right" class='awrc'>94</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.26</td><td class='awrc'>12.4</td><td class='awrc'>16.3</td><td scope="row" class='awrc'><a class="awr" href="#f7xnvp44nukp7">f7xnvp44nukp7</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>insert into wrm$_snapshot_deta...</td></tr>
<tr><td align="right" class='awrnc'>89</td><td align="right" class='awrnc'>89</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0.19</td><td class='awrnc'>12.3</td><td class='awrnc'>73</td><td scope="row" class='awrnc'><a class="awr" href="#grwydz59pu6mc">grwydz59pu6mc</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select text from view$ where r...</td></tr>
<tr><td align="right" class='awrc'>65</td><td align="right" class='awrc'>65</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.05</td><td class='awrc'>76.4</td><td class='awrc'>0</td><td scope="row" class='awrc'><a class="awr" href="#9babjv8yq8ru3">9babjv8yq8ru3</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>BEGIN DBMS_OUTPUT.GET_LINES(:L...</td></tr>
<tr><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0.13</td><td class='awrnc'>17.5</td><td class='awrnc'>68.2</td><td scope="row" class='awrnc'><a class="awr" href="#fn5s5p6hr6702">fn5s5p6hr6702</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>INSERT INTO wri$_adv_message_g...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="900"></a>
<h3 class="awr">SQL ordered by Parse Calls</h3>
<ul>
<li class="awr">Total Parse Calls:	     4,644</li>
<li class="awr">Captured SQL account for   73.1% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by number of parse calls"><tr><th class="awrbg" scope="col">Parse Calls</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">% Total Parses</th><th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>2,078</td><td align="right" class='awrc'>2,078</td><td align="right" class='awrc'>44.75</td><td scope="row" class='awrc'><a class="awr" href="#24djtk7r8fz33">24djtk7r8fz33</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>update svcobj_access$ set acce...</td></tr>
<tr><td align="right" class='awrnc'>343</td><td align="right" class='awrnc'>343</td><td align="right" class='awrnc'>7.39</td><td scope="row" class='awrnc'><a class="awr" href="#86708bvah4akq">86708bvah4akq</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select name from undo$ where f...</td></tr>
<tr><td align="right" class='awrc'>94</td><td align="right" class='awrc'>94</td><td align="right" class='awrc'>2.02</td><td scope="row" class='awrc'><a class="awr" href="#f7xnvp44nukp7">f7xnvp44nukp7</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>insert into wrm$_snapshot_deta...</td></tr>
<tr><td align="right" class='awrnc'>89</td><td align="right" class='awrnc'>89</td><td align="right" class='awrnc'>1.92</td><td scope="row" class='awrnc'><a class="awr" href="#grwydz59pu6mc">grwydz59pu6mc</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select text from view$ where r...</td></tr>
<tr><td align="right" class='awrc'>65</td><td align="right" class='awrc'>65</td><td align="right" class='awrc'>1.40</td><td scope="row" class='awrc'><a class="awr" href="#9babjv8yq8ru3">9babjv8yq8ru3</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>BEGIN DBMS_OUTPUT.GET_LINES(:L...</td></tr>
<tr><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>1.40</td><td scope="row" class='awrnc'><a class="awr" href="#fn5s5p6hr6702">fn5s5p6hr6702</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>INSERT INTO wri$_adv_message_g...</td></tr>
<tr><td align="right" class='awrc'>50</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>1.08</td><td scope="row" class='awrc'><a class="awr" href="#3un99a0zwp4vd">3un99a0zwp4vd</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select owner#, name, namespace...</td></tr>
<tr><td align="right" class='awrnc'>50</td><td align="right" class='awrnc'>50</td><td align="right" class='awrnc'>1.08</td><td scope="row" class='awrnc'><a class="awr" href="#8swypbbr0m372">8swypbbr0m372</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select order#, columns, types ...</td></tr>
<tr><td align="right" class='awrc'>49</td><td align="right" class='awrc'>49</td><td align="right" class='awrc'>1.06</td><td scope="row" class='awrc'><a class="awr" href="#f80h0xb1qvbsk">f80h0xb1qvbsk</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>SELECT sys.wri$_adv_seq_msggro...</td></tr>
<tr><td align="right" class='awrnc'>45</td><td align="right" class='awrnc'>45</td><td align="right" class='awrnc'>0.97</td><td scope="row" class='awrnc'><a class="awr" href="#7hc9uvs2016m6">7hc9uvs2016m6</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>insert into svcobj_access$(nam...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1000"></a>
<h3 class="awr">SQL ordered by Sharable Memory</h3>
<ul>
<li class="awr">Only Statements with Sharable Memory greater than 1048576 are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by amount of shared memory used"><tr><th class="awrbg" scope="col">Sharable Mem (b)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">% Total</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>13,232,809</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>1.18</td><td scope="row" class='awrc'><a class="awr" href="#9yv5dwv8k0awg">9yv5dwv8k0awg</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>WITH MONITOR_DATA AS (SELECT I...</td></tr>
<tr><td align="right" class='awrnc'>4,176,676</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.37</td><td scope="row" class='awrnc'><a class="awr" href="#atwuyuvqkf27w">atwuyuvqkf27w</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>SELECT /*+ OPT_PARAM('_fix_con...</td></tr>
<tr><td align="right" class='awrc'>4,146,388</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.37</td><td scope="row" class='awrc'><a class="awr" href="#2xfg27zhudyay">2xfg27zhudyay</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>WITH binds as (select :dbid as...</td></tr>
<tr><td align="right" class='awrnc'>4,070,480</td><td align="right" class='awrnc'>118,760</td><td align="right" class='awrnc'>0.36</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>3,632,111</td><td align="right" class='awrc'>672,439</td><td align="right" class='awrc'>0.32</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>2,916,904</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.26</td><td scope="row" class='awrnc'><a class="awr" href="#9sq9djzzhr19y">9sq9djzzhr19y</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>WITH binds as (select :dbid as...</td></tr>
<tr><td align="right" class='awrc'>1,466,440</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.13</td><td scope="row" class='awrc'><a class="awr" href="#6zacqqnsf529a">6zacqqnsf529a</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>WITH ash as (SELECT round((cas...</td></tr>
<tr><td align="right" class='awrnc'>1,192,636</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.11</td><td scope="row" class='awrnc'><a class="awr" href="#fg11facbfjwvx">fg11facbfjwvx</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'> SELECT /*+ no_monitor leading...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1100"></a>
<h3 class="awr">SQL ordered by Version Count</h3>
<ul>
<li class="awr">Only Statements with Version Count greater than 20 are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by version counts"><tr><th class="awrbg" scope="col">Version Count </th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>124</td><td align="right" class='awrc'>672,439</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>122</td><td align="right" class='awrnc'>118,760</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1150"></a>
<h3 class="awr">SQL ordered by Cluster Wait Time</h3>
<ul>
<li class="awr"> %Total - Cluster Time	as a percentage of Total Cluster Wait Time </li>
<li class="awr"> %Clu	- Cluster Time	as a percentage of Elapsed Time </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time </li>
<li class="awr"> Only SQL with Cluster Wait Time &gt; .005 seconds is reported</li>
<li class="awr">Total Cluster Wait Time (s):	       8,069</li>
<li class="awr">Captured SQL account for   99.1% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by cluster wait time"><tr><th class="awrbg" scope="col">Cluster Wait Time (s)</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed Time(s)</th><th class="awrbg" scope="col">%Clu</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>5,354.32</td><td align="right" class='awrc'>672,439</td><td align="right" class='awrc'>66.35</td><td align="right" class='awrc'>23,326.14</td><td align="right" class='awrc'>22.95</td><td align="right" class='awrc'>7.69</td><td align="right" class='awrc'>74.08</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>2,643.07</td><td align="right" class='awrnc'>118,760</td><td align="right" class='awrnc'>32.75</td><td align="right" class='awrnc'>12,674.32</td><td align="right" class='awrnc'>20.85</td><td align="right" class='awrnc'>5.58</td><td align="right" class='awrnc'>72.91</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>172.97</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2.14</td><td align="right" class='awrc'>563.44</td><td align="right" class='awrc'>30.70</td><td align="right" class='awrc'>7.54</td><td align="right" class='awrc'>64.11</td><td scope="row" class='awrc'><a class="awr" href="#9yraxx50ufhwk">9yraxx50ufhwk</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>170.00</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>2.11</td><td align="right" class='awrnc'>563.76</td><td align="right" class='awrnc'>30.16</td><td align="right" class='awrnc'>7.69</td><td align="right" class='awrnc'>63.88</td><td scope="row" class='awrnc'><a class="awr" href="#5krxnvhvxxszv">5krxnvhvxxszv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>142.18</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.76</td><td align="right" class='awrc'>563.08</td><td align="right" class='awrc'>25.25</td><td align="right" class='awrc'>7.47</td><td align="right" class='awrc'>69.18</td><td scope="row" class='awrc'><a class="awr" href="#8v9kvbuhhrtt6">8v9kvbuhhrtt6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>140.92</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.75</td><td align="right" class='awrnc'>564.40</td><td align="right" class='awrnc'>24.97</td><td align="right" class='awrnc'>7.50</td><td align="right" class='awrnc'>69.10</td><td scope="row" class='awrnc'><a class="awr" href="#drkwgbbjkvcaj">drkwgbbjkvcaj</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>139.08</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.72</td><td align="right" class='awrc'>564.49</td><td align="right" class='awrc'>24.64</td><td align="right" class='awrc'>7.42</td><td align="right" class='awrc'>69.90</td><td scope="row" class='awrc'><a class="awr" href="#44w94s3knytqw">44w94s3knytqw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>138.79</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.72</td><td align="right" class='awrnc'>565.49</td><td align="right" class='awrnc'>24.54</td><td align="right" class='awrnc'>7.32</td><td align="right" class='awrnc'>70.05</td><td scope="row" class='awrnc'><a class="awr" href="#bgxwnc1uyqzrn">bgxwnc1uyqzrn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>137.83</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.71</td><td align="right" class='awrc'>564.31</td><td align="right" class='awrc'>24.42</td><td align="right" class='awrc'>7.22</td><td align="right" class='awrc'>70.06</td><td scope="row" class='awrc'><a class="awr" href="#cz8nw7wxr6q6a">cz8nw7wxr6q6a</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>137.82</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.71</td><td align="right" class='awrnc'>565.50</td><td align="right" class='awrnc'>24.37</td><td align="right" class='awrnc'>7.33</td><td align="right" class='awrnc'>69.71</td><td scope="row" class='awrnc'><a class="awr" href="#6a6qafya34rwa">6a6qafya34rwa</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>136.99</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.70</td><td align="right" class='awrc'>564.88</td><td align="right" class='awrc'>24.25</td><td align="right" class='awrc'>7.41</td><td align="right" class='awrc'>69.53</td><td scope="row" class='awrc'><a class="awr" href="#5kxrur91u9gs0">5kxrur91u9gs0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>136.56</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.69</td><td align="right" class='awrnc'>563.76</td><td align="right" class='awrnc'>24.22</td><td align="right" class='awrnc'>7.23</td><td align="right" class='awrnc'>71.20</td><td scope="row" class='awrnc'><a class="awr" href="#5sdw02fvh7gku">5sdw02fvh7gku</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>135.19</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.68</td><td align="right" class='awrc'>565.47</td><td align="right" class='awrc'>23.91</td><td align="right" class='awrc'>7.26</td><td align="right" class='awrc'>70.33</td><td scope="row" class='awrc'><a class="awr" href="#d2zxvj6ss17k6">d2zxvj6ss17k6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>135.04</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.67</td><td align="right" class='awrnc'>563.63</td><td align="right" class='awrnc'>23.96</td><td align="right" class='awrnc'>7.48</td><td align="right" class='awrnc'>70.29</td><td scope="row" class='awrnc'><a class="awr" href="#4nb55sh3050s4">4nb55sh3050s4</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>134.85</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.67</td><td align="right" class='awrc'>565.81</td><td align="right" class='awrc'>23.83</td><td align="right" class='awrc'>7.44</td><td align="right" class='awrc'>70.94</td><td scope="row" class='awrc'><a class="awr" href="#9uvmr65d5xzyk">9uvmr65d5xzyk</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>134.48</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.67</td><td align="right" class='awrnc'>563.13</td><td align="right" class='awrnc'>23.88</td><td align="right" class='awrnc'>7.44</td><td align="right" class='awrnc'>70.54</td><td scope="row" class='awrnc'><a class="awr" href="#5hgphtrj7uqp2">5hgphtrj7uqp2</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>132.56</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.64</td><td align="right" class='awrc'>566.44</td><td align="right" class='awrc'>23.40</td><td align="right" class='awrc'>7.40</td><td align="right" class='awrc'>71.50</td><td scope="row" class='awrc'><a class="awr" href="#dn5ztpzaw0pcu">dn5ztpzaw0pcu</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>132.30</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.64</td><td align="right" class='awrnc'>564.33</td><td align="right" class='awrnc'>23.44</td><td align="right" class='awrnc'>7.43</td><td align="right" class='awrnc'>71.15</td><td scope="row" class='awrnc'><a class="awr" href="#g5565fvd0c1fr">g5565fvd0c1fr</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>130.61</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.62</td><td align="right" class='awrc'>564.63</td><td align="right" class='awrc'>23.13</td><td align="right" class='awrc'>7.39</td><td align="right" class='awrc'>71.05</td><td scope="row" class='awrc'><a class="awr" href="#dn3tm10dh39sj">dn3tm10dh39sj</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>129.78</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.61</td><td align="right" class='awrnc'>564.07</td><td align="right" class='awrnc'>23.01</td><td align="right" class='awrnc'>7.53</td><td align="right" class='awrnc'>71.63</td><td scope="row" class='awrnc'><a class="awr" href="#3u87drbcgrv1a">3u87drbcgrv1a</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>129.66</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.61</td><td align="right" class='awrc'>562.96</td><td align="right" class='awrc'>23.03</td><td align="right" class='awrc'>7.49</td><td align="right" class='awrc'>71.35</td><td scope="row" class='awrc'><a class="awr" href="#31ahtjq5rj0wr">31ahtjq5rj0wr</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>128.73</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.60</td><td align="right" class='awrnc'>564.33</td><td align="right" class='awrnc'>22.81</td><td align="right" class='awrnc'>7.40</td><td align="right" class='awrnc'>71.45</td><td scope="row" class='awrnc'><a class="awr" href="#9srhzg8u9vjsp">9srhzg8u9vjsp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>128.12</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.59</td><td align="right" class='awrc'>563.37</td><td align="right" class='awrc'>22.74</td><td align="right" class='awrc'>7.56</td><td align="right" class='awrc'>70.72</td><td scope="row" class='awrc'><a class="awr" href="#9pyjpd8qx4zrm">9pyjpd8qx4zrm</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>128.10</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.59</td><td align="right" class='awrnc'>562.61</td><td align="right" class='awrnc'>22.77</td><td align="right" class='awrnc'>7.51</td><td align="right" class='awrnc'>71.57</td><td scope="row" class='awrnc'><a class="awr" href="#8pu3nqrvwp360">8pu3nqrvwp360</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>127.39</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.58</td><td align="right" class='awrc'>563.56</td><td align="right" class='awrc'>22.60</td><td align="right" class='awrc'>7.53</td><td align="right" class='awrc'>71.46</td><td scope="row" class='awrc'><a class="awr" href="#5cfpr7gtmu9ww">5cfpr7gtmu9ww</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>125.63</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.56</td><td align="right" class='awrnc'>563.51</td><td align="right" class='awrnc'>22.29</td><td align="right" class='awrnc'>7.43</td><td align="right" class='awrnc'>71.66</td><td scope="row" class='awrnc'><a class="awr" href="#4sr03khtycy30">4sr03khtycy30</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>125.47</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.55</td><td align="right" class='awrc'>566.03</td><td align="right" class='awrc'>22.17</td><td align="right" class='awrc'>7.27</td><td align="right" class='awrc'>71.81</td><td scope="row" class='awrc'><a class="awr" href="#a7ng116w7tgbq">a7ng116w7tgbq</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>125.17</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.55</td><td align="right" class='awrnc'>567.18</td><td align="right" class='awrnc'>22.07</td><td align="right" class='awrnc'>7.45</td><td align="right" class='awrnc'>72.54</td><td scope="row" class='awrnc'><a class="awr" href="#f5bd91b8pq2rp">f5bd91b8pq2rp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>124.95</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.55</td><td align="right" class='awrc'>565.46</td><td align="right" class='awrc'>22.10</td><td align="right" class='awrc'>7.39</td><td align="right" class='awrc'>72.00</td><td scope="row" class='awrc'><a class="awr" href="#g1c8c2wjv67ct">g1c8c2wjv67ct</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>124.70</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.55</td><td align="right" class='awrnc'>564.41</td><td align="right" class='awrnc'>22.09</td><td align="right" class='awrnc'>7.39</td><td align="right" class='awrnc'>72.69</td><td scope="row" class='awrnc'><a class="awr" href="#91t7vqx3c4v6g">91t7vqx3c4v6g</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>124.66</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>565.52</td><td align="right" class='awrc'>22.04</td><td align="right" class='awrc'>7.21</td><td align="right" class='awrc'>72.19</td><td scope="row" class='awrc'><a class="awr" href="#dsjqgbvpsxkp0">dsjqgbvpsxkp0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>123.47</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>564.41</td><td align="right" class='awrnc'>21.88</td><td align="right" class='awrnc'>7.58</td><td align="right" class='awrnc'>72.78</td><td scope="row" class='awrnc'><a class="awr" href="#7rfsk00ahr6jt">7rfsk00ahr6jt</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>123.46</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.53</td><td align="right" class='awrc'>563.29</td><td align="right" class='awrc'>21.92</td><td align="right" class='awrc'>7.53</td><td align="right" class='awrc'>71.76</td><td scope="row" class='awrc'><a class="awr" href="#cum15qzq5hars">cum15qzq5hars</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>123.28</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>565.35</td><td align="right" class='awrnc'>21.81</td><td align="right" class='awrnc'>7.41</td><td align="right" class='awrnc'>73.65</td><td scope="row" class='awrnc'><a class="awr" href="#ffv31a3nd2hp7">ffv31a3nd2hp7</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>123.01</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>563.52</td><td align="right" class='awrc'>21.83</td><td align="right" class='awrc'>7.48</td><td align="right" class='awrc'>71.60</td><td scope="row" class='awrc'><a class="awr" href="#5a3jn37nb1cg6">5a3jn37nb1cg6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>122.46</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>562.81</td><td align="right" class='awrnc'>21.76</td><td align="right" class='awrnc'>7.62</td><td align="right" class='awrnc'>71.79</td><td scope="row" class='awrnc'><a class="awr" href="#bsr5npqqpj681">bsr5npqqpj681</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>122.31</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>563.33</td><td align="right" class='awrc'>21.71</td><td align="right" class='awrc'>7.55</td><td align="right" class='awrc'>72.46</td><td scope="row" class='awrc'><a class="awr" href="#3d08mtaxbsq1u">3d08mtaxbsq1u</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>122.17</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>562.82</td><td align="right" class='awrnc'>21.71</td><td align="right" class='awrnc'>7.57</td><td align="right" class='awrnc'>72.60</td><td scope="row" class='awrnc'><a class="awr" href="#fbdrcrjuy8a1m">fbdrcrjuy8a1m</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>121.60</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>563.76</td><td align="right" class='awrc'>21.57</td><td align="right" class='awrc'>7.42</td><td align="right" class='awrc'>72.70</td><td scope="row" class='awrc'><a class="awr" href="#bdq8dvq79a34v">bdq8dvq79a34v</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>121.49</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.51</td><td align="right" class='awrnc'>565.51</td><td align="right" class='awrnc'>21.48</td><td align="right" class='awrnc'>7.30</td><td align="right" class='awrnc'>73.00</td><td scope="row" class='awrnc'><a class="awr" href="#0bwq9jnxx14ju">0bwq9jnxx14ju</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>121.35</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>564.47</td><td align="right" class='awrc'>21.50</td><td align="right" class='awrc'>7.37</td><td align="right" class='awrc'>73.24</td><td scope="row" class='awrc'><a class="awr" href="#50jfcpqbqagtc">50jfcpqbqagtc</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>117.08</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.45</td><td align="right" class='awrnc'>564.23</td><td align="right" class='awrnc'>20.75</td><td align="right" class='awrnc'>7.29</td><td align="right" class='awrnc'>73.45</td><td scope="row" class='awrnc'><a class="awr" href="#cyxm2z08gakb0">cyxm2z08gakb0</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>114.77</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.42</td><td align="right" class='awrc'>564.34</td><td align="right" class='awrc'>20.34</td><td align="right" class='awrc'>7.30</td><td align="right" class='awrc'>74.37</td><td scope="row" class='awrc'><a class="awr" href="#7kqv52xz3bbhp">7kqv52xz3bbhp</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>101.63</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.26</td><td align="right" class='awrnc'>564.26</td><td align="right" class='awrnc'>18.01</td><td align="right" class='awrnc'>7.47</td><td align="right" class='awrnc'>76.17</td><td scope="row" class='awrnc'><a class="awr" href="#94v3428qavp80">94v3428qavp80</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1.88</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>564.43</td><td align="right" class='awrc'>0.33</td><td align="right" class='awrc'>6.66</td><td align="right" class='awrc'>95.64</td><td scope="row" class='awrc'><a class="awr" href="#7u664zdtgwt9d">7u664zdtgwt9d</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.26</td><td align="right" class='awrnc'>76.30</td><td align="right" class='awrnc'>12.44</td><td align="right" class='awrnc'>16.29</td><td scope="row" class='awrnc'><a class="awr" href="#f7xnvp44nukp7">f7xnvp44nukp7</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>insert into wrm$_snapshot_deta...</td></tr>
<tr><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>89</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>19.91</td><td align="right" class='awrc'>12.33</td><td align="right" class='awrc'>72.97</td><td scope="row" class='awrc'><a class="awr" href="#grwydz59pu6mc">grwydz59pu6mc</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select text from view$ where r...</td></tr>
<tr><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>50</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.30</td><td align="right" class='awrnc'>12.14</td><td align="right" class='awrnc'>11.22</td><td align="right" class='awrnc'>79.30</td><td scope="row" class='awrnc'><a class="awr" href="#3un99a0zwp4vd">3un99a0zwp4vd</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select owner#, name, namespace...</td></tr>
<tr><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.85</td><td align="right" class='awrc'>1.93</td><td align="right" class='awrc'>61.63</td><td align="right" class='awrc'>17.90</td><td scope="row" class='awrc'><a class="awr" href="#2xfg27zhudyay">2xfg27zhudyay</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>WITH binds as (select :dbid as...</td></tr>
<tr><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>20.84</td><td align="right" class='awrnc'>17.49</td><td align="right" class='awrnc'>68.21</td><td scope="row" class='awrnc'><a class="awr" href="#fn5s5p6hr6702">fn5s5p6hr6702</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>INSERT INTO wri$_adv_message_g...</td></tr>
<tr><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>159</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>5.75</td><td align="right" class='awrc'>10.95</td><td align="right" class='awrc'>87.24</td><td scope="row" class='awrc'><a class="awr" href="#acmvv4fhdc9zh">acmvv4fhdc9zh</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select obj#, type#, ctime, mti...</td></tr>
<tr><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.57</td><td align="right" class='awrnc'>1.32</td><td align="right" class='awrnc'>4.88</td><td align="right" class='awrnc'>96.75</td><td scope="row" class='awrnc'><a class="awr" href="#03guhbfpak0w7">03guhbfpak0w7</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select /*+ index(idl_ub1$ i_id...</td></tr>
<tr><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.21</td><td align="right" class='awrc'>9.72</td><td align="right" class='awrc'>10.51</td><td align="right" class='awrc'>83.38</td><td scope="row" class='awrc'><a class="awr" href="#8swypbbr0m372">8swypbbr0m372</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select order#, columns, types ...</td></tr>
<tr><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>10.95</td><td align="right" class='awrnc'>7.37</td><td align="right" class='awrnc'>85.77</td><td scope="row" class='awrnc'><a class="awr" href="#fh5ufah919kun">fh5ufah919kun</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select /*+ index(idl_sb4$ i_id...</td></tr>
<tr><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.62</td><td align="right" class='awrc'>2.19</td><td align="right" class='awrc'>47.79</td><td align="right" class='awrc'>41.76</td><td scope="row" class='awrc'><a class="awr" href="#6zacqqnsf529a">6zacqqnsf529a</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>WITH ash as (SELECT round((cas...</td></tr>
<tr><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.51</td><td align="right" class='awrnc'>2.60</td><td align="right" class='awrnc'>23.12</td><td align="right" class='awrnc'>44.53</td><td scope="row" class='awrnc'><a class="awr" href="#6tu8uar9skw2q">6tu8uar9skw2q</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>WITH chains as (SELECT w.insta...</td></tr>
<tr><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2.25</td><td align="right" class='awrc'>0.41</td><td align="right" class='awrc'>8.41</td><td align="right" class='awrc'>10.88</td><td scope="row" class='awrc'><a class="awr" href="#6t44kht0nhjs9">6t44kht0nhjs9</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'> WITH instances as (SELECT hos...</td></tr>
<tr><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>70.70</td><td align="right" class='awrnc'>46.58</td><td align="right" class='awrnc'>0.08</td><td scope="row" class='awrnc'><a class="awr" href="#9tgj4g8y4rwy8">9tgj4g8y4rwy8</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select type#, blocks, extents,...</td></tr>
<tr><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>49</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>23.22</td><td align="right" class='awrc'>46.66</td><td align="right" class='awrc'>0.00</td><td scope="row" class='awrc'><a class="awr" href="#f80h0xb1qvbsk">f80h0xb1qvbsk</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>SELECT sys.wri$_adv_seq_msggro...</td></tr>
<tr><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>19.48</td><td align="right" class='awrnc'>21.49</td><td align="right" class='awrnc'>65.94</td><td scope="row" class='awrnc'><a class="awr" href="#a3jpjzh7mtwwp">a3jpjzh7mtwwp</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select /*+ index(idl_ub2$ i_id...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="99997"></a>
<p />
<h3 class="awr">Complete List of SQL Text</h3><p />
<table border="0" class="tdiff" summary="This table displays the text of the SQL statements which have been
      referred to in the report">
<tr><th class="awrbg" scope="col">SQL Id</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="03guhbfpak0w7"></a>03guhbfpak0w7</td><td class='awrc'><pre_sqltext class="awr">select /*+ index(idl_ub1$ i_idl_ub11) */ piece#, length, piece from idl_ub1$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="0bwq9jnxx14ju"></a>0bwq9jnxx14ju</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '88';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="24djtk7r8fz33"></a>24djtk7r8fz33</td><td class='awrc'><pre_sqltext class="awr">update svcobj_access$ set accesses = :5,  inc_no = :6 where name = :1 AND pdb = :2 AND tsn = :3 AND objid = :4</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="2xfg27zhudyay"></a>2xfg27zhudyay</td><td class='awrnc'><pre_sqltext class="awr">WITH binds as
	 (select :dbid			as dbid
	       ,  :inst_id_low		 as instIdLow
	       ,  :inst_id_high 	 as instIdHigh
	       ,  :begin_snap		 as beginSnap
	       ,  :end_snap		 as endSnap
	       ,  :begin_time		 as beginTime
	       ,  :end_time		 as endTime
	       ,  :disk_begin_time	 as diskBeginTime
	       ,  :disk_end_time	 as diskEndTime
	       ,  :mem_begin_time	 as memBeginTime
	       ,  :mem_end_time 	 as memEndTime
	       ,  :bucket_count 	 as bucketCount
	       ,  :bucket_interval	 as bucketInterval
	       ,  :mem_enable		 as memEnable
	       ,  :disk_enable		 as diskEnable
	       ,  :disk_filter_ratio	 as filterRatio,  :filter_action as filter_action,  :filter_blocking_session as filter_blocking_session,  :filter_capture_id as filter_capture_id,  :filter_client_id as filter_client_id,  :filter_consumer_group_id as filter_consumer_group_id,  :filter_dbop as filter_dbop,  :filter_ecid as filter_ecid,	:filter_event as filter_event,	:filter_instance_number as filter_instance_number,  :filter_is_captured as filter_is_captured,	:filter_is_filtered_out as filter_is_filtered_out,  :filter_is_nc_background as filter_is_nc_background,  :filter_is_replayed as filter_is_replayed,  :filter_machine as filter_machine,  :filter_machine_port as filter_machine_port,	:filter_module as filter_module,  :filter_object as filter_object,  :filter_pdb as filter_pdb,	:filter_physical_session as filter_physical_session,  :filter_pl_sql as filter_pl_sql,	:filter_pl_sql_top as filter_pl_sql_top,  :filter_program as filter_program,  :filter_px_process as filter_px_process,	:filter_service_hash as filter_service_hash,  :filter_session_type as filter_session_type,  :filter_sql_fms as filter_sql_fms,	:filter_sql_id_top as filter_sql_id_top,  :filter_sql_opcode as filter_sql_opcode,  :filter_sql_opcode_top as filter_sql_opcode_top,  :filter_sql_rws as filter_sql_rws,  :filter_sql_rws_line as filter_sql_rws_line,	:filter_sqlid as filter_sqlid,	:filter_sqlid_fullphv as filter_sqlid_fullphv,	:filter_sqlid_phv as filter_sqlid_phv,	:filter_user_id as filter_user_id,  :filter_wait_class as filter_wait_class,  :filter_xid as filter_xid from sys.dual)	,  unified_ash as
	     (SELECT a.sample_id
       ,  a.sample_time
       ,  a.session_id
       ,  a.session_serial#
       ,  a.session_type
       ,  a.session_state
       ,  a.flags
       ,  a.user_id
       ,  a.sql_id
       ,  a.sql_opcode
       ,  a.sql_opname
       ,  a.top_level_sql_id
       ,  a.top_level_sql_opcode
       ,  a.sql_child_number
       ,  a.sql_plan_hash_value
       ,  a.sql_full_plan_hash_value
       ,  a.sql_plan_line_id
       ,  a.sql_plan_operation
       ,  a.sql_plan_options
       ,  a.sql_exec_id
       ,  a.force_matching_signature
       ,  a.plsql_entry_object_id
       ,  a.plsql_entry_subprogram_id
       ,  a.plsql_object_id
       ,  a.plsql_subprogram_id
       ,  a.service_hash
       ,  a.qc_session_id
       ,  a.qc_instance_id
       ,  a.qc_session_serial#
       ,  nvl(a.event,
	    CASE WHEN bitand(a.time_model,  power(2, 19)) &gt; 0
		 THEN 'CPU: IM Populate'
		 WHEN bitand(a.time_model,  power(2, 20)) &gt; 0
		 THEN 'CPU: IM Prepopulate'
		 WHEN bitand(a.time_model,  power(2, 21)) &gt; 0
		 THEN 'CPU: IM Repopulate'
		 WHEN bitand(a.time_model,  power(2, 22)) &gt; 0
		 THEN 'CPU: IM Trickle Repop'
		 WHEN bitand(a.time_model,  power(2, 18)) &gt; 0
		 THEN 'CPU: IM Query'
	     ELSE 'CPU + Wait for CPU' END) as event
       ,  nvl(a.event_id,  1)
	   as event_id	
       ,  nvl(a.wait_class,  'CPU')
	   as wait_class	
       ,  nvl(a.wait_class_id,	9999)
	   as wait_class_id
       ,  a.seq#
       ,  a.p1
       ,  a.p1text
       ,  a.p2
       ,  a.p2text	
       ,  a.p3
       ,  a.p3text	
       ,  a.wait_time
       ,  a.time_waited	
       ,  rawtohex(a.xid) as xid	
       ,  a.blocking_session
       ,  a.blocking_session_serial#
       ,  a.blocking_session_status
       ,  a.blocking_inst_id
       ,  a.current_obj#
       ,  a.current_file#
       ,  a.current_block#	
       ,  a.top_level_call#
       ,  a.top_level_call_name
       ,  a.program
       ,  a.module
       ,  a.action
       ,  a.client_id
       ,  a.remote_instance#	
       ,  a.ecid
       ,  a.consumer_group_id
       ,  a.machine
       ,  a.port
       ,  a.in_connection_mgmt
       ,  a.in_parse
       ,  a.in_hard_parse	
       ,  a.in_sql_execution
       ,  a.in_plsql_execution
       ,  a.in_plsql_rpc	
       ,  a.in_plsql_compilation
       ,  a.in_java_execution
       ,  a.in_bind
       ,  a.in_cursor_close
       ,  a.in_sequence_load
       ,  a.is_captured
       ,  a.is_replayed
       ,  a.dbreplay_file_id
       ,  a.dbop_name
       ,  a.con_dbid,  decode(binds.diskEnable, 0, 1, binds.filterRatio)
		       as sample_count
		   ,  inst_id as instance_number
		FROM sys.gv_$active_session_history a,	binds
	       WHERE binds.memEnable = 1
		 AND (	binds.diskEnable = 0
		     OR (  binds.diskEnable = 1
		       AND a.is_awr_sample = 'Y'
		       AND bitand(a.flags,  128) = 0 ) )
		 AND a.inst_id between
			  binds.instIdLow
		      and binds.instIdHigh
		 AND a.sample_time between
			  binds.beginTime
		      and binds.endTime
	      UNION ALL
	      SELECT a.sample_id
       ,  a.sample_time
       ,  a.session_id
       ,  a.session_serial#
       ,  a.session_type
       ,  a.session_state
       ,  a.flags
       ,  a.user_id
       ,  a.sql_id
       ,  a.sql_opcode
       ,  a.sql_opname
       ,  a.top_level_sql_id
       ,  a.top_level_sql_opcode
       ,  a.sql_child_number
       ,  a.sql_plan_hash_value
       ,  a.sql_full_plan_hash_value
       ,  a.sql_plan_line_id
       ,  a.sql_plan_operation
       ,  a.sql_plan_options
       ,  a.sql_exec_id
       ,  a.force_matching_signature
       ,  a.plsql_entry_object_id
       ,  a.plsql_entry_subprogram_id
       ,  a.plsql_object_id
       ,  a.plsql_subprogram_id
       ,  a.service_hash
       ,  a.qc_session_id
       ,  a.qc_instance_id
       ,  a.qc_session_serial#
       ,  nvl(a.event,
	    CASE WHEN bitand(a.time_model,  power(2, 19)) &gt; 0
		 THEN 'CPU: IM Populate'
		 WHEN bitand(a.time_model,  power(2, 20)) &gt; 0
		 THEN 'CPU: IM Prepopulate'
		 WHEN bitand(a.time_model,  power(2, 21)) &gt; 0
		 THEN 'CPU: IM Repopulate'
		 WHEN bitand(a.time_model,  power(2, 22)) &gt; 0
		 THEN 'CPU: IM Trickle Repop'
		 WHEN bitand(a.time_model,  power(2, 18)) &gt; 0
		 THEN 'CPU: IM Query'
	     ELSE 'CPU + Wait for CPU' END) as event
       ,  nvl(a.event_id,  1)
	   as event_id	
       ,  nvl(a.wait_class,  'CPU')
	   as wait_class	
       ,  nvl(a.wait_class_id,	9999)
	   as wait_class_id
       ,  a.seq#
       ,  a.p1
       ,  a.p1text
       ,  a.p2
       ,  a.p2text	
       ,  a.p3
       ,  a.p3text	
       ,  a.wait_time
       ,  a.time_waited	
       ,  rawtohex(a.xid) as xid	
       ,  a.blocking_session
       ,  a.blocking_session_serial#
       ,  a.blocking_session_status
       ,  a.blocking_inst_id
       ,  a.current_obj#
       ,  a.current_file#
       ,  a.current_block#	
       ,  a.top_level_call#
       ,  a.top_level_call_name
       ,  a.program
       ,  a.module
       ,  a.action
       ,  a.client_id
       ,  a.remote_instance#	
       ,  a.ecid
       ,  a.consumer_group_id
       ,  a.machine
       ,  a.port
       ,  a.in_connection_mgmt
       ,  a.in_parse
       ,  a.in_hard_parse	
       ,  a.in_sql_execution
       ,  a.in_plsql_execution
       ,  a.in_plsql_rpc	
       ,  a.in_plsql_compilation
       ,  a.in_java_execution
       ,  a.in_bind
       ,  a.in_cursor_close
       ,  a.in_sequence_load
       ,  a.is_captured
       ,  a.is_replayed
       ,  a.dbreplay_file_id
       ,  a.dbop_name
       ,  a.con_dbid,  binds.filterRatio as sample_count
		   ,  instance_number as instance_number
		FROM AWR_ROOT_active_sess_history a,
		     binds
	       WHERE binds.diskEnable = 1
		 AND a.dbid = binds.dbid
		 AND a.instance_number between
			  binds.instIdLow
		      and binds.instIdHigh
		 AND a.snap_id between
			  binds.beginSnap
		      and binds.endSnap + 1
		 AND a.sample_time between
			  binds.beginTime
		      and binds.endTime
	     ),  logical_ash as
	     (select sample_id
		   ,  sample_time
		   ,  sample_count
		   ,  instance_number as inst_id, action as action, event as event, instance_number as instance_number, module as module, instance_number || ':' || session_id || ', ' || session_serial# as physical_session, service_hash as service_hash, sql_id as sqlid, wait_class as wait_class,  xid as xid,  user_id as user_id,  program as program from unified_ash) ,  bucketized_ash as
	   (SELECT ash0.*,
		  (case when binds.bucketCount &gt; 1
			then trunc( ( (24 * 60 * 60 *
				       extract(day from sample_time
						      - binds.beginTime))
				    + (60 * 60 *
				       extract(hour from sample_time
						      - binds.beginTime))
				    + (60 *
				       extract(minute from sample_time
						      - binds.beginTime))
				    + (1 *
				       extract(second from sample_time
						      - binds.beginTime))
				     ) / binds.bucketInterval
				   ) + 1
			else 1
		   end) as bucket_number
	   FROM logical_ash ash0,  binds),  filter_xml as
	 (SELECT xmlconcat(xmlelement(&quot;filters&quot; )
	 ,  xmlelement(&quot;report_time&quot;, xmlattributes(
	     to_char(o.begintime,  'HH24:MI:SS MM/DD/YYYY') as &quot;begin_time&quot;,
	     to_char(o.endtime,  'HH24:MI:SS MM/DD/YYYY') as &quot;end_time&quot;))) as xml_frag FROM
    (select binds.*,  nvl(to_number(filter_pdb), 0) as con_dbid from binds) o) ,  filtered_ash as
	      (SELECT ash.*,
		      1  filtered
	       FROM bucketized_ash ash,  binds WHERE 1=1 ),  grouped_ash as
		   (SELECT ash.*,   0 AS bucket_type  FROM (SELECT sqlid, physical_session, action, module, service_hash, instance_number, event, wait_class	  ,  grouping_id(sqlid, physical_session, action, module, service_hash, instance_number, event, wait_class) as gid  , max(inst_id)	      as inst_id
			     , sum(sample_count)       as sample_count
			     , count(distinct sqlid)   as uniq_sqlids
			     , count(distinct xid)     as uniq_xids
			     , count(distinct physical_session)
						      as uniq_sessions
			     , count(distinct instance_number)
						      as uniq_instances, max(user_id) as user_id, max(program) as program from	filtered_ash
		     group by  grouping sets( (wait_class),  (sqlid),  (module),  (event),  (action),  (instance_number),  (physical_session),	(service_hash)) ) ash ),  component_1_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket


		    from (select max(case when mem_rank &lt;= 13
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 13
				   then mem_rank
				   else (13 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 13
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 13
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 13
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 13
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select wait_class as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , wait_class) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 254
			      and wait_class is not null)
		    group by (case when mem_rank &lt;= 13
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_1_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('wait_class' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 13
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)

				       )
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 13
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 13
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_1_treemap) t
		   ) topmems),	component_2_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket


		    from (select max(case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 5
				   then mem_rank
				   else (5 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 5
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 5
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 5
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 5
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select event as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , event) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 253
			      and event is not null)
		    group by (case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_2_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('event' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 5
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)

				       )
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 5
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 5
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_2_treemap) t
		   ) topmems),	component_3_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket

			 , NVL((SELECT instance_name
	FROM sys.gv_$instance v
	WHERE v.instance_number = left.dim_val
	  AND rownum &lt; 2  ), ( SELECT instance_name
	FROM AWR_ROOT_database_instance v,  binds b
	WHERE v.dbid = b.dbid
	  AND v.instance_number = left.dim_val
	  AND rownum &lt; 2)) as instance_name
		    from (select max(case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 5
				   then mem_rank
				   else (5 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 5
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 5
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 5
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 5
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select instance_number as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , instance_number) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 251
			      and instance_number is not null)
		    group by (case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_3_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('instance_number' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 5
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)

				       , instance_name)
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 5
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 5
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_3_treemap) t
		   ) topmems),	component_4_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket

			 , NVL((SELECT name
       FROM sys.gv_$active_services v
       WHERE v.name_hash = left.dim_val
	     AND v.inst_id = left.inst_id
	     AND rownum &lt; 2 ), ( SELECT service_name
       FROM AWR_ROOT_service_name v,  binds b
       WHERE v.dbid = b.dbid
	     AND v.service_name_hash = left.dim_val
	     AND rownum &lt; 2)) as service_name
		    from (select max(case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 5
				   then mem_rank
				   else (5 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 5
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 5
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 5
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 5
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select service_hash as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , service_hash) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 247
			      and service_hash is not null)
		    group by (case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_4_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('service_hash' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 5
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)

				       , service_name)
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 5
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 5
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_4_treemap) t
		   ) topmems),	component_5_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket


		    from (select max(case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 5
				   then mem_rank
				   else (5 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 5
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 5
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 5
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 5
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select module as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , module) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 239
			      and module is not null)
		    group by (case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_5_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('module' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 5
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)

				       )
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 5
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 5
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_5_treemap) t
		   ) topmems),	component_6_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket


		    from (select max(case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 5
				   then mem_rank
				   else (5 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 5
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 5
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 5
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 5
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select action as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , action) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 223
			      and action is not null)
		    group by (case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_6_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('action' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 5
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)

				       )
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 5
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 5
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_6_treemap) t
		   ) topmems),	component_7_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket
			 , user_id, program

		    from (select max(case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 5
				   then mem_rank
				   else (5 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 5
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 5
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 5
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 5
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id

			 , max(case when mem_rank &lt;= 5
			  then user_id		else null
		     end)		      as user_id, max(case when mem_rank &lt;= 5
			  then program		else null
		     end)		      as program
		     from (select physical_session as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , physical_session) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id

				 , user_id, program
			     from grouped_ash
			    where gid = 191
			      and physical_session is not null)
		    group by (case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_7_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('physical_session' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 5
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)
				       , xmlconcat(xmlelement(&quot;info&quot;, xmlattributes('user_id' as &quot;name&quot;), user_id), xmlelement(&quot;info&quot;, xmlattributes('program' as &quot;name&quot;), program))
				       )
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 5
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 5
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_7_treemap) t
		   ) topmems),	component_8_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket

			 , NVL((SELECT replace(substr(v.sql_text,  1,  100), CHR(0), '') as sql_text
	 FROM sys.gv_$sql v
	 WHERE v.sql_id = left.dim_val
	       AND v.inst_id = left.inst_id

	       AND rownum &lt; 2 ), ( SELECT replace(sys.dbms_lob.substr(v.sql_text,  100,  1), CHR(0), '')
	   as sql_text
	 FROM AWR_ROOT_sqltext v,  binds b
	 WHERE v.dbid = b.dbid
	   AND v.sql_id = left.dim_val

	   AND rownum &lt; 2)) as sql_text
		    from (select max(case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 5
				   then mem_rank
				   else (5 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 5
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 5
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 5
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 5
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select sqlid as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , sqlid) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 127
			      and sqlid is not null)
		    group by (case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_8_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('sqlid' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 5
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as
&quot;uniq_instances&quot;)

				       , sql_text)
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 5
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 5
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_8_treemap) t
		   ) topmems)select
		   xmlconcat((select xml_frag from filter_xml),
		      xmlelement(&quot;dim_list&quot;,
			xmlelement(&quot;item&quot;,
			  xmlattributes('top_dimensions' as &quot;id&quot;),
			  xmlelement(&quot;subdim&quot;,  xmlconcat((select dim_frag from component_1_xml), (select dim_frag from component_2_xml), (select dim_frag from component_3_xml), (select dim_frag from component_4_xml), (select dim_frag from component_5_xml), (select dim_frag from component_6_xml), (select dim_frag from component_7_xml), (select dim_frag from component_8_xml)))),
	 xmltype('
	   &lt;item type=&quot;separator&quot; /&gt;'),
	 xmltype('
	   &lt;item id=&quot;sql_cat&quot;&gt;
	     &lt;subdim&gt;
	       &lt;item id=&quot;sqlid&quot; /&gt;
	       &lt;item id=&quot;sql_id_top&quot; /&gt;
	       &lt;item id=&quot;sql_fms&quot; /&gt;
	       &lt;item id=&quot;sqlid_phv&quot; /&gt;
	       &lt;item id=&quot;sqlid_fullphv&quot;/&gt;
	       &lt;item id=&quot;sql_rws&quot; /&gt;
	       &lt;item id=&quot;sql_rws_line&quot; /&gt;
	       &lt;item id=&quot;sql_opcode&quot; /&gt;
	       &lt;item id=&quot;sql_opcode_top&quot; /&gt;
	     &lt;/subdim&gt;
	   &lt;/item&gt;'),
	 xmltype('
	   &lt;item id=&quot;pl_sql_cat&quot;&gt;
	     &lt;subdim&gt;
	       &lt;item id=&quot;pl_sql&quot; /&gt;
	       &lt;item id=&quot;pl_sql_top&quot; /&gt;
	     &lt;/subdim&gt;
	   &lt;/item&gt;'),
	 xmltype('
	   &lt;item id=&quot;resource_consumption_cat&quot;&gt;
	     &lt;subdim&gt;
	       &lt;item id=&quot;wait_class&quot; /&gt;
	       &lt;item id=&quot;event&quot; /&gt;
	       &lt;item id=&quot;object&quot; /&gt;
	       &lt;item id=&quot;blocking_session&quot; /&gt;
	     &lt;/subdim&gt;
	   &lt;/item&gt;'),
	 xmltype('
	   &lt;item id=&quot;session_identifiers_cat&quot;&gt;
	     &lt;subdim&gt;
	       &lt;item id=&quot;instance_number&quot; /&gt; &lt;item id=&quot;service_hash&quot; /&gt;
	       &lt;item id=&quot;physical_session&quot; /&gt;
	       &lt;item id=&quot;px_process&quot; /&gt;
	       &lt;item id=&quot;user_id&quot; /&gt;
	       &lt;item id=&quot;program&quot; /&gt;
	       &lt;item id=&quot;session_type&quot; /&gt;
	     &lt;/subdim&gt;
	    &lt;/item&gt;'),
	 xmltype('
	   &lt;item id=&quot;session_attributes_cat&quot;&gt;
	     &lt;subdim&gt;
	       &lt;item id=&quot;consumer_group_id&quot; /&gt;
	       &lt;item id=&quot;module&quot; /&gt;
	       &lt;item id=&quot;action&quot; /&gt;
	       &lt;item id=&quot;client_id&quot; /&gt;
	       &lt;item id=&quot;machine&quot; /&gt;
	       &lt;item id=&quot;machine_port&quot; /&gt;
	       &lt;item id=&quot;xid&quot; /&gt;
	       &lt;item id=&quot;ecid&quot; /&gt;
	       &lt;item id=&quot;dbop
&quot; /&gt;
	     &lt;/subdim&gt;
	   &lt;/item&gt;'))
		  ) from sys.dual</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="31ahtjq5rj0wr"></a>31ahtjq5rj0wr</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '82';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="35dumc2tpr9dv"></a>35dumc2tpr9dv</td><td class='awrnc'><pre_sqltext class="awr">UPDATE CF1 SET C2 = :B3 ,  C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 )) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3d08mtaxbsq1u"></a>3d08mtaxbsq1u</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '36';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3u87drbcgrv1a"></a>3u87drbcgrv1a</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '71';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3un99a0zwp4vd"></a>3un99a0zwp4vd</td><td class='awrc'><pre_sqltext class="awr">select owner#, name, namespace, remoteowner, linkname, p_timestamp, p_obj#,  nvl(property, 0), subname, type#, flags, d_attrs from dependency$ d,	obj$ o where d_obj#=:1 and p_obj#=obj#(+) order by order#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="44w94s3knytqw"></a>44w94s3knytqw</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '89';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="4nb55sh3050s4"></a>4nb55sh3050s4</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '101';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="4sr03khtycy30"></a>4sr03khtycy30</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '91';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="50jfcpqbqagtc"></a>50jfcpqbqagtc</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '94';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5a3jn37nb1cg6"></a>5a3jn37nb1cg6</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '16';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="5cfpr7gtmu9ww"></a>5cfpr7gtmu9ww</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '49';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5hgphtrj7uqp2"></a>5hgphtrj7uqp2</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '37';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="5krxnvhvxxszv"></a>5krxnvhvxxszv</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '26';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5kxrur91u9gs0"></a>5kxrur91u9gs0</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '52';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="5sdw02fvh7gku"></a>5sdw02fvh7gku</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '69';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="6a6qafya34rwa"></a>6a6qafya34rwa</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '1';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="6t44kht0nhjs9"></a>6t44kht0nhjs9</td><td class='awrc'><pre_sqltext class="awr"> WITH
	    instances as
	    (SELECT host_name,
		    instance_number
	     FROM sys.gv_$instance
	     WHERE instance_number between :inst_id_low and :inst_id_high)
	   ,  num_cpus as
	    (SELECT i.host_name,
		    i.instance_number,
		    sum(decode(o.stat_name,  'NUM_CPU_CORES',  o.value,  0))
		    num_cpu_cores,
		    sum(decode(o.stat_name,  'NUM_CPUS',  o.value,  0)) num_cpus
	     FROM instances i,	sys.gv_$osstat o
	     WHERE o.inst_id = i.instance_number
	     GROUP BY i.instance_number,  i.host_name)
	   ,  inst_caging_cpu_count as
	    (SELECT i.host_name,
		    i.instance_number,
		    max(nvl(to_number(p.value),  0))
		    cpu_count
	     FROM instances i,	sys.gv_$system_parameter p,
		  sys.gv_$rsrc_plan r
	     WHERE p.name= 'cpu_count'
	       AND i.instance_number = p.inst_id
	       AND r.inst_id = p.inst_id
	       AND r.is_top_plan = 'TRUE'
	       AND r.cpu_managed = 'ON'
	       AND r.instance_caging = 'ON'
	     GROUP BY host_name,  instance_number)
       SELECT xmlelement(&quot;cpu_info&quot;,
		 xmlagg(
		 xmlelement(&quot;host&quot;,
		 xmlattributes(host_name as &quot;name&quot;,
			       max(num_cpus) as &quot;num_cores&quot;,
			       max(num_cpu_cores) as &quot;num_cpus&quot;),
		 xmlagg(
		    xmlelement(&quot;instance&quot;,
		       xmlattributes(instance_number as &quot;id&quot;,
				     cpu_count as &quot;cpu_count&quot;))
		 order by instance_number))))
		 as xml
       FROM (SELECT c.host_name,  c.instance_number,
		    nvl(c.num_cpus, c.num_cpu_cores) as num_cpus,
		    nvl(c.num_cpu_cores,  c.num_cpus) as num_cpu_cores,
		    p.cpu_count
	     FROM  num_cpus c,	inst_caging_cpu_count p
	     WHERE p.instance_number(+) = c.instance_number)
       GROUP BY host_name</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="6tu8uar9skw2q"></a>6tu8uar9skw2q</td><td class='awrnc'><pre_sqltext class="awr">WITH
  chains as
  (SELECT w.instance || '_' || w.sid || '_' || w.SESS_SERIAL# as sid,
	  case when n.wait_class = 'Idle' then '__' else
	  (w.BLOCKER_INSTANCE || '_' || w.BLOCKER_SID
	    || '_' || w.BLOCKER_SESS_SERIAL#) end as bsid,
	  w.osid,
	  decode(w.in_wait,  'TRUE',  w.wait_event_text,  'CPU') as event,
	  nvl(n.wait_class,  'CPU') as wait_class,
	  w.IN_WAIT_SECS,
	  p.pname as pname,
	  decode(p.background,	'1',  'N',  'Y') as fg
   FROM   sys.v_$wait_chains w,  sys.gv_$process p,  sys.v_$event_name n
   WHERE  p.inst_id = w.instance
     AND  p.pid = w.pid
     AND  decode(w.in_wait,  'TRUE',  w.wait_event,  -1) = n.event#(+)
  ),  chains_xml as
  (SELECT xmlelement(&quot;sessions&quot;, xmlagg(xmlelement(&quot;m&quot;, xmlattributes(
	    sid as &quot;s
&quot;,
	    osid as &quot;o&quot;,
	    event as &quot;e&quot;,
	    wait_class as &quot;c&quot;,
	    in_wait_secs as &quot;t&quot;,
	    pname as &quot;p&quot;,
	    fg as &quot;f&quot;)))) as x
   FROM   chains
  ),  blockers_list as
  (SELECT (inst_id || '_' || sid || '_' || sess_serial#) as s,
	  (blocker_instance_id || '_' || blocker_sid
	     || '_' || blocker_sess_serial#) as b
   FROM   sys.gv_$session_blockers
   WHERE  blocker_sid is not null   ),	blockers as
  (SELECT xmlelement(&quot;blockers&quot;, xmlagg(xmlelement(&quot;m&quot;, xmlattributes(
	    b.s as &quot;s&quot;,  b.b as &quot;b&quot;)))) as x
   FROM   blockers_list b,  chains c
   WHERE  b.s = c.sid AND c.wait_class &lt;&gt; 'Idle'
  ),  hang_info as
   (SELECT xmlelement(&quot;hang_info&quot;, xmlagg(xmlelement(&quot;a&quot;, xmlattributes(
	     decode(a.hang_type,  'Hang',  1,  'Uninteresting Hang',  2,  3) as &quot;t&quot;,
	     a.IGNORED_HANG as &quot;i&quot;,
	     a.RESOLUTION_ATTEMPTED as &quot;r&quot;,
	     a.RESOLUTION_STATUS as &quot;s&quot;,
	     a.VICTIM_INSTANCE || '_' || a.VICTIM_SESSION_ID
	       || '_' || a.VICTIM_SERIAL# as &quot;sid&quot;,
	     a.FATAL_BACKGROUND as &quot;f&quot;)))) as x
    FROM sys.v_$hang_info a
   )
SELECT xmlelement(&quot;hangs&quot;,  c.x,  b.x,  h.x)
FROM   chains_xml c,  blockers b,  hang_info h</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="6zacqqnsf529a"></a>6zacqqnsf529a</td><td class='awrc'><pre_sqltext class="awr">WITH ash as
  (SELECT round((cast(sample_time as date) - :1) * 24 * 60 * 60, 0) as t,
	  inst_id || '_' || session_id || '_' || session_serial# as sid,
	  decode(session_type,	'FOREGROUND',  1,  0) as session_type,
	  nvl(sql_id, 'null') as sql_id,
	  nvl(sql_opcode, 0) as sql_opcode,
	  nvl(force_matching_signature, 0) as fms,
	  QC_INSTANCE_ID || '_' || QC_SESSION_ID || '_' || qc_session_serial# as qsid,
	  decode(session_state,  'ON CPU',  'CPU',  event) as wait_event,
	  decode(session_state,  'ON CPU',  'CPU',  wait_class) as wait_class,
	  decode(blocking_session_status,  'VALID',  blocking_inst_id || '_' || BLOCKING_SESSION || '_' || BLOCKING_SESSION_SERIAL#,  '__') as bsid,
	  nvl(service_hash, 0) as service_hash,
	  nvl(program, '__') as program,
	  nvl(module, '__') as module,
	  nvl(action, '__') as action,	 nvl(pga_allocated, 0) as pga ,  decode(in_connection_mgmt,  'Y',  1,  0)
		     + decode(in_parse,  'Y',  2,  0)
		     + decode(in_hard_parse,  'Y',  4,	0)
		     + decode(in_sql_execution,  'Y',  8,  0)
		     + decode(in_plsql_execution,  'Y',  16,  0)
		     + decode(in_plsql_rpc,  'Y',  32,	0)
		     + decode(in_plsql_compilation,  'Y',  64,	0)
		     + decode(in_java_execution,  'Y',	128,  0)
		     + decode(in_bind,	'Y',  256,  0)
		     + decode(in_cursor_close,	'Y',  512,  0) as tm   FROM   sys.gv_$active_session_history
   WHERE  sample_time &gt;= :2 and sample_time &lt;= :3
     AND  (session_state = 'ON CPU' or wait_class &lt;&gt; 'Idle')   AND
       ora_hash(inst_id || '_' || session_id || '_' || sample_id
	       , 100000, 0) &lt;= (100000 / 50.31768167013002014512)   ),
  map_op as ( SELECT xmlelement(&quot;op&quot;, xmlagg(xmlelement(&quot;m&quot;,  xmlattributes(
	   v.command_type as &quot;i&quot;,  v.command_name as &quot;n&quot;
	 )))) as x
  FROM	 (SELECT distinct sql_opcode FROM ash WHERE sql_opcode &lt;&gt; 0) a ,
	 sys.v_$sqlcommand v
  WHERE  a.sql_opcode = v.command_type	),
  map_sql as
  (SELECT fms,	sql_opcode,  sql_id,  rownum as id
   FROM   (SELECT fms,	sql_opcode,  max(sql_id) as sql_id
	   FROM ash GROUP BY fms,  sql_opcode)
  ),
  map_sql_xml as
  (SELECT xmlelement(&quot;sql&quot;, xmlagg(xmlelement(&quot;m&quot;,	xmlattributes(
	    fms as &quot;f&quot;,  sql_opcode as &quot;o&quot;,  sql_id as &quot;s&quot;,  id as &quot;i&quot;
	  )))) as x
   FROM   map_sql
  ),
  map_sid as
  (SELECT a,  rownum as id
   FROM   (SELECT sid as a FROM ash
	   UNION
	   SELECT qsid as a FROM ash
	   UNION
	   SELECT bsid as a FROM ash)
  ),
  map_sid_xml as
  (SELECT xmlelement(&quot;sid&quot;, xmlagg(xmlelement(&quot;m&quot;,	xmlattributes(
	     a as &quot;v&quot;,  id as &quot;i&quot;
	   )))) as x
   FROM   map_sid
  ),
  map_event as
  (SELECT wait_class,  wait_event,  rownum as id
   FROM  (SELECT DISTINCT wait_class , wait_event FROM ash)
  ),
  map_event_xml as
  (SELECT xmlelement(&quot;evt&quot;, xmlagg(xmlelement(&quot;m&quot;,	xmlattributes(
	     wait_class as &quot;c&quot;,  wait_event as &quot;e&quot;,  id as &quot;i&quot;
	   )))) as x
   FROM   map_event
  ),
  map_service as
  (SELECT a.service_hash as sh,  s.service_id as id,  s.name as name
   FROM  (SELECT distinct service_hash from ash) a,
	 sys.v_$services s
   WHERE s.name_hash = a.service_hash
  ),
  map_service_xml as
  (SELECT xmlelement(&quot;service&quot;, xmlagg(xmlelement(&quot;m&quot;,  xmlattributes(
	     sh as &quot;h&quot;,  name as &quot;n&quot;,  id as &quot;i&quot;
	   )))) as x
   FROM   map_service
  ),
  map_program as
  (SELECT program,  rownum as id
   FROM  (SELECT distinct program FROM ash)
  ),
  map_program_xml as
  (SELECT xmlelement(&quot;program&quot;, xmlagg(xmlelement(&quot;m&quot;,  xmlattributes(
	     program as &quot;v&quot;,	id as &quot;i&quot;
	  )))) as x
   FROM   map_program
  ),
  map_module as
  (SELECT module,  rownum as id
   FROM  (SELECT distinct module FROM ash)
  ),
  map_module_xml as
  (SELECT xmlelement(&quot;module&quot;, xmlagg(xmlelement(&quot;m&quot;,  xmlattributes(
	     module as &quot;v&quot;,  id as &quot;i&quot;
	  )))) as x
   FROM   map_module
  ),
  map_action as
  (SELECT action,  rownum as id
   FROM  (SELECT distinct action FROM ash)
  ),
  map_action_xml as
  (SELECT xmlelement(&quot;action&quot;, xmlagg(xmlelement(&quot;m&quot;,  xmlattributes(
	     action as &quot;v&quot;,  id as &quot;i&quot;
	  )))) as x
   FROM   map_action
  ),
  ash_xml as
  (SELECT xmlelement(&quot;data&quot;, xmlagg(xmlelement(&quot;a&quot;,
	    ash.t || ', ' ||
	    ms1.id || ', ' ||
	    ash.session_type || ', ' ||
	    ms2.id || ', ' ||
	    ms3.id  || ', ' ||
	    msql.id  || ', ' ||
	    trunc(ash.pga/(1024*1024)) || ', ' ||
	    mp.id  || ', ' ||
	    ms.id  || ', ' ||
	    mm.id  || ', ' ||
	    ma.id  || ', ' ||
	    me.id  || ', ' ||
	    ash.tm
	  ))) as x
   FROM   ash,
	  map_sid ms1,	map_sid ms2,  map_sid ms3,
	  map_event me,
	  map_service ms,
	  map_program mp,
	  map_module mm,
	  map_action ma,
	  map_sql    msql
   WHERE  ash.sid = ms1.a
     AND  ash.qsid = ms2.a
     AND  ash.bsid = ms3.a
     AND  ash.wait_class = me.wait_class
     AND  ash.wait_event = me.wait_event
     AND  ash.service_hash = ms.sh
     AND  ash.program = mp.program
     AND  ash.module = mm.module
     AND  ash.action = ma.action
     AND  ash.fms = msql.fms
  )
SELECT xmlelement(&quot;ash_data&quot;,
	  xmlattributes(round(:4, 4) as &quot;sampling_ratio&quot;,
			round(:5, 4) as &quot;avg_active_sessions&quot;,
			round((:6 - :7) * (24 * 60 * 60), 0) as &quot;secs&quot;),
	  map_op.x,
	  map_sid_xml.x,
	  map_event_xml.x,
	  map_service_xml.x,
	  map_program_xml.x,
	  map_module_xml.x,
	  map_action_xml.x,
	  map_sql_xml.x,
	  ash_xml.x
       ) as data
FROM   map_op,	map_sid_xml,  map_event_xml,  map_service_xml,
       map_program_xml,  map_module_xml,  map_action_xml,
       map_sql_xml,  ash_xml </pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="7hc9uvs2016m6"></a>7hc9uvs2016m6</td><td class='awrnc'><pre_sqltext class="awr">insert into svcobj_access$(name,  pdb,  tsn,  objid,  accesses,	inc_no) values (:1,  :2,  :3,  :4,  :5,  :6)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="7kqv52xz3bbhp"></a>7kqv52xz3bbhp</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '99';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="7rfsk00ahr6jt"></a>7rfsk00ahr6jt</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '84';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="7u664zdtgwt9d"></a>7u664zdtgwt9d</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '60';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="86708bvah4akq"></a>86708bvah4akq</td><td class='awrnc'><pre_sqltext class="awr">select name from undo$ where file#=:1 and block#=:2 and ts#=:3 and	status$ != 1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="87gaftwrm2h68"></a>87gaftwrm2h68</td><td class='awrc'><pre_sqltext class="awr">select o.owner#, o.name, o.namespace, o.remoteowner, o.linkname, o.subname from obj$ o where o.obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="8pu3nqrvwp360"></a>8pu3nqrvwp360</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '13';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="8swypbbr0m372"></a>8swypbbr0m372</td><td class='awrc'><pre_sqltext class="awr">select order#, columns, types from access$ where d_obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="8v9kvbuhhrtt6"></a>8v9kvbuhhrtt6</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '73';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="91t7vqx3c4v6g"></a>91t7vqx3c4v6g</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '81';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="94v3428qavp80"></a>94v3428qavp80</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '72';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9babjv8yq8ru3"></a>9babjv8yq8ru3</td><td class='awrc'><pre_sqltext class="awr">BEGIN DBMS_OUTPUT.GET_LINES(:LINES,  :NUMLINES); END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9pyjpd8qx4zrm"></a>9pyjpd8qx4zrm</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '43';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9sq9djzzhr19y"></a>9sq9djzzhr19y</td><td class='awrc'><pre_sqltext class="awr">WITH binds as
	 (select :dbid			as dbid
	       ,  :inst_id_low		 as instIdLow
	       ,  :inst_id_high 	 as instIdHigh
	       ,  :begin_snap		 as beginSnap
	       ,  :end_snap		 as endSnap
	       ,  :begin_time		 as beginTime
	       ,  :end_time		 as endTime
	       ,  :disk_begin_time	 as diskBeginTime
	       ,  :disk_end_time	 as diskEndTime
	       ,  :mem_begin_time	 as memBeginTime
	       ,  :mem_end_time 	 as memEndTime
	       ,  :bucket_count 	 as bucketCount
	       ,  :bucket_interval	 as bucketInterval
	       ,  :mem_enable		 as memEnable
	       ,  :disk_enable		 as diskEnable
	       ,  :disk_filter_ratio	 as filterRatio,  :filter_action as filter_action,  :filter_blocking_session as filter_blocking_session,  :filter_capture_id as filter_capture_id,  :filter_client_id as filter_client_id,  :filter_consumer_group_id as filter_consumer_group_id,  :filter_dbop as filter_dbop,  :filter_ecid as filter_ecid,	:filter_event as filter_event,	:filter_instance_number as filter_instance_number,  :filter_is_captured as filter_is_captured,	:filter_is_filtered_out as filter_is_filtered_out,  :filter_is_nc_background as filter_is_nc_background,  :filter_is_replayed as filter_is_replayed,  :filter_machine as filter_machine,  :filter_machine_port as filter_machine_port,	:filter_module as filter_module,  :filter_object as filter_object,  :filter_pdb as filter_pdb,	:filter_physical_session as filter_physical_session,  :filter_pl_sql as filter_pl_sql,	:filter_pl_sql_top as filter_pl_sql_top,  :filter_program as filter_program,  :filter_px_process as filter_px_process,	:filter_service_hash as filter_service_hash,  :filter_session_type as filter_session_type,  :filter_sql_fms as filter_sql_fms,	:filter_sql_id_top as filter_sql_id_top,  :filter_sql_opcode as filter_sql_opcode,  :filter_sql_opcode_top as filter_sql_opcode_top,  :filter_sql_rws as filter_sql_rws,  :filter_sql_rws_line as filter_sql_rws_line,	:filter_sqlid as filter_sqlid,	:filter_sqlid_fullphv as filter_sqlid_fullphv,	:filter_sqlid_phv as filter_sqlid_phv,	:filter_user_id as filter_user_id,  :filter_wait_class as filter_wait_class,  :filter_xid as filter_xid from sys.dual)	,  unified_ash as
	     (SELECT a.sample_id
       ,  a.sample_time
       ,  a.session_id
       ,  a.session_serial#
       ,  a.session_type
       ,  a.session_state
       ,  a.flags
       ,  a.user_id
       ,  a.sql_id
       ,  a.sql_opcode
       ,  a.sql_opname
       ,  a.top_level_sql_id
       ,  a.top_level_sql_opcode
       ,  a.sql_child_number
       ,  a.sql_plan_hash_value
       ,  a.sql_full_plan_hash_value
       ,  a.sql_plan_line_id
       ,  a.sql_plan_operation
       ,  a.sql_plan_options
       ,  a.sql_exec_id
       ,  a.force_matching_signature
       ,  a.plsql_entry_object_id
       ,  a.plsql_entry_subprogram_id
       ,  a.plsql_object_id
       ,  a.plsql_subprogram_id
       ,  a.service_hash
       ,  a.qc_session_id
       ,  a.qc_instance_id
       ,  a.qc_session_serial#
       ,  nvl(a.event,
	    CASE WHEN bitand(a.time_model,  power(2, 19)) &gt; 0
		 THEN 'CPU: IM Populate'
		 WHEN bitand(a.time_model,  power(2, 20)) &gt; 0
		 THEN 'CPU: IM Prepopulate'
		 WHEN bitand(a.time_model,  power(2, 21)) &gt; 0
		 THEN 'CPU: IM Repopulate'
		 WHEN bitand(a.time_model,  power(2, 22)) &gt; 0
		 THEN 'CPU: IM Trickle Repop'
		 WHEN bitand(a.time_model,  power(2, 18)) &gt; 0
		 THEN 'CPU: IM Query'
	     ELSE 'CPU + Wait for CPU' END) as event
       ,  nvl(a.event_id,  1)
	   as event_id	
       ,  nvl(a.wait_class,  'CPU')
	   as wait_class	
       ,  nvl(a.wait_class_id,	9999)
	   as wait_class_id
       ,  a.seq#
       ,  a.p1
       ,  a.p1text
       ,  a.p2
       ,  a.p2text	
       ,  a.p3
       ,  a.p3text	
       ,  a.wait_time
       ,  a.time_waited	
       ,  rawtohex(a.xid) as xid	
       ,  a.blocking_session
       ,  a.blocking_session_serial#
       ,  a.blocking_session_status
       ,  a.blocking_inst_id
       ,  a.current_obj#
       ,  a.current_file#
       ,  a.current_block#	
       ,  a.top_level_call#
       ,  a.top_level_call_name
       ,  a.program
       ,  a.module
       ,  a.action
       ,  a.client_id
       ,  a.remote_instance#	
       ,  a.ecid
       ,  a.consumer_group_id
       ,  a.machine
       ,  a.port
       ,  a.in_connection_mgmt
       ,  a.in_parse
       ,  a.in_hard_parse	
       ,  a.in_sql_execution
       ,  a.in_plsql_execution
       ,  a.in_plsql_rpc	
       ,  a.in_plsql_compilation
       ,  a.in_java_execution
       ,  a.in_bind
       ,  a.in_cursor_close
       ,  a.in_sequence_load
       ,  a.is_captured
       ,  a.is_replayed
       ,  a.dbreplay_file_id
       ,  a.dbop_name
       ,  a.con_dbid,  decode(binds.diskEnable, 0, 1, binds.filterRatio)
		       as sample_count
		   ,  inst_id as instance_number
		FROM sys.gv_$active_session_history a,	binds
	       WHERE binds.memEnable = 1
		 AND (	binds.diskEnable = 0
		     OR (  binds.diskEnable = 1
		       AND a.is_awr_sample = 'Y'
		       AND bitand(a.flags,  128) = 0 ) )
		 AND a.inst_id between
			  binds.instIdLow
		      and binds.instIdHigh
		 AND a.sample_time between
			  binds.beginTime
		      and binds.endTime
	      UNION ALL
	      SELECT a.sample_id
       ,  a.sample_time
       ,  a.session_id
       ,  a.session_serial#
       ,  a.session_type
       ,  a.session_state
       ,  a.flags
       ,  a.user_id
       ,  a.sql_id
       ,  a.sql_opcode
       ,  a.sql_opname
       ,  a.top_level_sql_id
       ,  a.top_level_sql_opcode
       ,  a.sql_child_number
       ,  a.sql_plan_hash_value
       ,  a.sql_full_plan_hash_value
       ,  a.sql_plan_line_id
       ,  a.sql_plan_operation
       ,  a.sql_plan_options
       ,  a.sql_exec_id
       ,  a.force_matching_signature
       ,  a.plsql_entry_object_id
       ,  a.plsql_entry_subprogram_id
       ,  a.plsql_object_id
       ,  a.plsql_subprogram_id
       ,  a.service_hash
       ,  a.qc_session_id
       ,  a.qc_instance_id
       ,  a.qc_session_serial#
       ,  nvl(a.event,
	    CASE WHEN bitand(a.time_model,  power(2, 19)) &gt; 0
		 THEN 'CPU: IM Populate'
		 WHEN bitand(a.time_model,  power(2, 20)) &gt; 0
		 THEN 'CPU: IM Prepopulate'
		 WHEN bitand(a.time_model,  power(2, 21)) &gt; 0
		 THEN 'CPU: IM Repopulate'
		 WHEN bitand(a.time_model,  power(2, 22)) &gt; 0
		 THEN 'CPU: IM Trickle Repop'
		 WHEN bitand(a.time_model,  power(2, 18)) &gt; 0
		 THEN 'CPU: IM Query'
	     ELSE 'CPU + Wait for CPU' END) as event
       ,  nvl(a.event_id,  1)
	   as event_id	
       ,  nvl(a.wait_class,  'CPU')
	   as wait_class	
       ,  nvl(a.wait_class_id,	9999)
	   as wait_class_id
       ,  a.seq#
       ,  a.p1
       ,  a.p1text
       ,  a.p2
       ,  a.p2text	
       ,  a.p3
       ,  a.p3text	
       ,  a.wait_time
       ,  a.time_waited	
       ,  rawtohex(a.xid) as xid	
       ,  a.blocking_session
       ,  a.blocking_session_serial#
       ,  a.blocking_session_status
       ,  a.blocking_inst_id
       ,  a.current_obj#
       ,  a.current_file#
       ,  a.current_block#	
       ,  a.top_level_call#
       ,  a.top_level_call_name
       ,  a.program
       ,  a.module
       ,  a.action
       ,  a.client_id
       ,  a.remote_instance#	
       ,  a.ecid
       ,  a.consumer_group_id
       ,  a.machine
       ,  a.port
       ,  a.in_connection_mgmt
       ,  a.in_parse
       ,  a.in_hard_parse	
       ,  a.in_sql_execution
       ,  a.in_plsql_execution
       ,  a.in_plsql_rpc	
       ,  a.in_plsql_compilation
       ,  a.in_java_execution
       ,  a.in_bind
       ,  a.in_cursor_close
       ,  a.in_sequence_load
       ,  a.is_captured
       ,  a.is_replayed
       ,  a.dbreplay_file_id
       ,  a.dbop_name
       ,  a.con_dbid,  binds.filterRatio as sample_count
		   ,  instance_number as instance_number
		FROM AWR_ROOT_active_sess_history a,
		     binds
	       WHERE binds.diskEnable = 1
		 AND a.dbid = binds.dbid
		 AND a.instance_number between
			  binds.instIdLow
		      and binds.instIdHigh
		 AND a.snap_id between
			  binds.beginSnap
		      and binds.endSnap + 1
		 AND a.sample_time between
			  binds.beginTime
		      and binds.endTime
	     ),  logical_ash as
	     (select sample_id
		   ,  sample_time
		   ,  sample_count
		   ,  instance_number as inst_id,  wait_class as global_hist_wc, event as event, instance_number || ':' || session_id || ', ' || session_serial# as physical_session, sql_id as sqlid, wait_class as wait_class,  xid as xid,  instance_number as instance_number,  user_id as user_id,  program as program from unified_ash) ,  bucketized_ash as
	   (SELECT ash0.*,
		  (case when binds.bucketCount &gt; 1
			then trunc( ( (24 * 60 * 60 *
				       extract(day from sample_time
						      - binds.beginTime))
				    + (60 * 60 *
				       extract(hour from sample_time
						      - binds.beginTime))
				    + (60 *
				       extract(minute from sample_time
						      - binds.beginTime))
				    + (1 *
				       extract(second from sample_time
						      - binds.beginTime))
				     ) / binds.bucketInterval
				   ) + 1
			else 1
		   end) as bucket_number
	   FROM logical_ash ash0,  binds),  filter_xml as
	 (SELECT xmlconcat(xmlelement(&quot;filters&quot; )
	 ,  xmlelement(&quot;report_time&quot;, xmlattributes(
	     to_char(o.begintime,  'HH24:MI:SS MM/DD/YYYY') as &quot;begin_time&quot;,
	     to_char(o.endtime,  'HH24:MI:SS MM/DD/YYYY') as &quot;end_time&quot;))) as xml_frag FROM
    (select binds.*,  nvl(to_number(filter_pdb), 0) as con_dbid from binds) o) ,  filtered_ash as
	      (SELECT ash.*,
		      (case when 1=1  then 1 else 0 end) filtered
	       FROM bucketized_ash ash,  binds),  grouped_ash as
		   (SELECT ash.*,   (CASE WHEN nvl(filtered,  2) = 1
				      THEN 0  -- target / no histogram
				      ELSE 1  -- totals/global
				 END) AS bucket_type  FROM (SELECT filtered,  event, physical_session, sqlid, wait_class, bucket_number      ,	grouping_id(filtered,  event, physical_session, sqlid, wait_class, bucket_number) as gid , global_hist_wc  , max(inst_id)	     as inst_id
			     , sum(sample_count)       as sample_count
			     , count(distinct sqlid)   as uniq_sqlids
			     , count(distinct xid)     as uniq_xids
			     , count(distinct physical_session)
						      as uniq_sessions
			     , count(distinct instance_number)
						      as uniq_instances, max(user_id) as user_id, max(program) as program from	filtered_ash
		     group by  grouping sets(  (bucket_number,	global_hist_wc) ,  ( bucket_number,  wait_class,  filtered),  (wait_class,  filtered),	(sqlid,  wait_class,  filtered),  (physical_session,  wait_class,  filtered),  (wait_class,  event,  filtered)) ) ash  -- eliminate rows with filtered = 0
		     -- keep filtered and from global/total
		     WHERE (nvl(filtered,  2) != 0)),  component_1_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket


		    from (select max(case when mem_rank &lt;= 13
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 13
				   then mem_rank
				   else (13 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 13
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 13
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 13
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 13
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select wait_class as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , wait_class) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 29
			      and wait_class is not null)
		    group by (case when mem_rank &lt;= 13
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_1_histogram as
		  (select bucket_number
			 , sum(sample_count)		as sample_count
			 , max(case when mem_rank &lt;= 13
				   then mem_rank
				   when mem_rank is not null
				   then (13 + 1)
			       end)			as mem_rank
			 , bucket_type

		    from (select g1.bucket_number
				, g1.sample_count	 as sample_count
				, (case when g1.wait_class = g2.dim_val

				       then to_char(g2.dim_val)
				       -- global/totals
				       when g1.bucket_type = 1
				       then g1.global_hist_wc
				       else null
				   end) 		as dim_val
				, (case when g1.wait_class = g2.dim_val

				       then g2.mem_rank
				       when g1.bucket_type = 1 then NULL
				       else (13 + 1)
				   end) 		as mem_rank
				,  g1.bucket_type

			   from grouped_ash g1,
				component_1_treemap g2
			  where -- both filtered and global
				(g1.gid = 28  AND
				 g1.wait_class is not null OR
				 g1.bucket_type = 1)
			    and g1.wait_class = g2.dim_val(+)

			    -- join filtered rows only
			    and g1.bucket_type = g2.bucket_type(+)
			  )
		 group by bucket_number
			 , dim_val

			 , bucket_type
		  ) ,  component_1_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('wait_class' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , xmlconcat(
			    topmems.topmems_frag
			   , histogram.histogram_xml)) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 13
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)

				       )
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 13
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 13
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_1_treemap) t
		   ) topmems , (SELECT xmlagg(
			  xmlelement(
			   &quot;histogram&quot;
			  , xmlattributes(
			     (case when bucket_type = 1 then 'all'
				   else 'target'
			      end) AS &quot;type&quot;
			    , max(binds.bucketCount)	as &quot;bucket_count&quot;
			    , max(binds.bucketInterval) as &quot;bucket_interval&quot;)
			  , xmlagg(bucket_xml
				    order by
				      bucket_type,
				      bucket_number asc)
				     )
				 ) as histogram_xml
		  FROM (SELECT	bucket_type
			       , bucket_number
			       , xmlelement(
				&quot;bucket
&quot;
			       , xmlattributes(bucket_number	 as &quot;number&quot;
					     , sum(sample_count) as &quot;count&quot;)
			       , (case
				 when bucket_type = 0 then -- filtered rows
				   xmlelement(
				    &quot;top_mems&quot;
				   , xmlattributes(
				     sum(case when mem_rank &lt;= 13
					      then sample_count
					      else 0
					  end) as &quot;count&quot;)
				   , xmlagg(
				     xmlelement(
				       &quot;mem&quot;
				       , xmlattributes(
					  mem_rank     as &quot;id&quot;
					 , sample_count as &quot;count&quot;))
				     order by mem_rank asc))
				 end)) as bucket_xml
			 FROM (component_1_histogram)
			 GROUP BY bucket_number,  bucket_type),  binds
		  GROUP by bucket_type) histogram ),  component_2_xml as
	     (select xmlelement(
			&quot;item&quot;
		       , xmlattributes(
			   'sqlid, wait_class' as &quot;item&quot;)
			  , xmlelement(
			      &quot;top_mems&quot;
			     , xmlagg(
				xmlelement(
				  &quot;mem&quot;
				 , xmlattributes(
				    dim1_value		   as &quot;dim1_value&quot;
				   , dim1_nummem	    as
&quot;dim1_nummem&quot;
				   , dim1_rank		    as &quot;dim1_rank&quot;
				   , dim2_value 	    as &quot;dim2_value&quot;
				   , dim12_nummem	    as &quot;dim2_nummem&quot;
				   , dim12_rank 	    as &quot;dim2_rank&quot;
				   , dim12_count	    as &quot;count&quot;
				   , uniq_sqlids	    as &quot;uniq_sqlids&quot;
				   , uniq_xids		    as &quot;uniq_xids&quot;
				   , uniq_sessions	    as &quot;uniq_sessions&quot;
				   , uniq_instances	    as &quot;uniq_instances&quot;

				  )
				, NVL2(sql_text1,
				      xmlelement(&quot;info&quot;
				       , xmlattributes('dim1_name' as &quot;type&quot;)
				       , sql_text1),  NULL)
				, NVL2(NULL,
				      xmlelement(&quot;info&quot;
					, xmlattributes('dim2_name' as &quot;type&quot;)
					, NULL),  NULL)
				)
			       order by dim1_rank, dim12_rank
			      )
			   )
		     ) as dim_frag
		from
		 (select  dim_data.*
			  , NVL((SELECT replace(substr(v.sql_text,  1,	100), CHR(0), '') as sql_text
	 FROM sys.gv_$sql v
	 WHERE v.sql_id = dim_data.dim1_value
	       AND v.inst_id = dim_data.inst_id

	       AND rownum &lt; 2 ), ( SELECT replace(sys.dbms_lob.substr(v.sql_text,  100,  1), CHR(0), '')
	   as sql_text
	 FROM AWR_ROOT_sqltext v,  binds b
	 WHERE v.dbid = b.dbid
	   AND v.sql_id = dim_data.dim1_value

	   AND rownum &lt; 2)) as sql_text1

		  from (select
			     max(case when dim1_rank &lt;= 10
				      then dim1_val
				      else null
				  end)			   as dim1_value
			    , max(case when dim1_rank &lt;= 10
				      then dim2_val
				      else null
				  end)			   as dim2_value
			    , sum(dim12_count) as dim12_count
			    , max(case when dim1_rank &lt;= 10
				      then uniq_sqlids
				      else 0
				  end)			   as uniq_sqlids
			    , max(case when dim1_rank &lt;= 10
				      then uniq_xids
				      else 0
				  end)			   as uniq_xids
			    , max(case when dim1_rank &lt;= 10
				      then uniq_sessions
				      else 0
				  end)			   as uniq_sessions
			    , max(case when dim1_rank &lt;= 10
				      then uniq_instances
				      else 0
				  end)			   as uniq_instances
			    , count(distinct dim1_val)	    as dim1_nummem
			    , sum(dim12_nummem) 	    as dim12_nummem
			    , max(case when dim1_rank &lt;= 10
				      then dim1_rank
				      else (10 + 1)
				  end)			   as dim1_rank
			    , max(case when dim1_rank &lt;= 10
				      then dim12_rank
				      else (10 + 1)
				  end)			   as dim12_rank
			    , max(inst_id)	    as inst_id

			from (select dim1_val
				    , max(case when dim12_rank &lt;= 13
					      then dim2_val
					      else null
					  end)		   as dim2_val
				    , dim1_count
				    , sum(dim12_count)	    as dim12_count
				    , max(case when dim12_rank &lt;= 13
					      then uniq_sqlids
					      else 0
					  end)		   as uniq_sqlids
				    , max(case when dim12_rank &lt;= 13
					      then uniq_xids
					      else 0
					  end)		   as uniq_xids
				    , max(case when dim12_rank &lt;= 13
					      then uniq_sessions
					      else 0
					  end)		   as uniq_sessions
				    , max(case when dim12_rank &lt;= 13
					      then uniq_instances
					      else 0
					  end)		   as uniq_instances
				    , count(*) as dim12_nummem
				    , dense_rank() over
				       (order by dim1_count desc
						, dim1_val
				       ) as dim1_rank
				    , max(case when dim12_rank &lt;= 13
					      then dim12_rank
					      else (13 + 1)
					  end)		   as dim12_rank
				    , max(inst_id)	    as inst_id

				 from (select sqlid   as dim1_val
					     , wait_class   as dim2_val
					     , sample_count as dim12_count
					     , dense_rank() over
						(partition by sqlid

						     order by sample_count desc
							     , wait_class

						) as dim12_rank
					     , sum(sample_count) over
						(partition by sqlid

						) as dim1_count
					     , uniq_sqlids
					     , uniq_xids
					     , uniq_sessions
					     , uniq_instances
					     , inst_id

					from grouped_ash
				       where gid = 25
					 and sqlid is not null
					 and wait_class is not null )
			     group by dim1_val
				     , dim1_count
				     , (case when dim12_rank &lt;= 13
					    then dim2_val
					    else null
					end)

			     )
		    group by (case when dim1_rank &lt;= 10
				   then dim1_val
				   else null
			       end)
			    , (case when dim1_rank &lt;= 10
				   then dim2_val
				   else null
			       end)

			   ) dim_data
			) t
		     ),  component_3_xml as
	     (select xmlelement(
			&quot;item&quot;
		       , xmlattributes(
			   'physical_session, wait_class' as &quot;item&quot;)
			  , xmlelement(
			      &quot;top_mems&quot;
			     , xmlagg(
				xmlelement(
				  &quot;mem&quot;
				 , xmlattributes(
				    dim1_value		   as &quot;dim1_value&quot;
				   , dim1_nummem	    as &quot;dim1_nummem&quot;
				   , dim1_rank		    as &quot;dim1_rank&quot;
				   , dim2_value 	    as &quot;dim2_value&quot;
				   , dim12_nummem	    as &quot;dim2_nummem&quot;
				   , dim12_rank 	    as &quot;dim2_rank&quot;
				   , dim12_count	    as &quot;count&quot;
				   , uniq_sqlids	    as &quot;uniq_sqlids&quot;
				   , uniq_xids		    as &quot;uniq_xids&quot;
				   , uniq_sessions	    as &quot;uniq_sessions&quot;
				   , uniq_instances	    as &quot;uniq_instances&quot;

				  )
				, NVL2(NULL,
				      xmlelement(&quot;info&quot;
				       , xmlattributes('dim1_name' as &quot;type&quot;)
				       , NULL),  NULL)
				, NVL2(NULL,
				      xmlelement(
&quot;info&quot;
					, xmlattributes('dim2_name' as &quot;type&quot;)
					, NULL),  NULL)
				)
			       order by dim1_rank, dim12_rank
			      )
			   )
		     ) as dim_frag
		from
		 (select  dim_data.*


		  from (select
			     max(case when dim1_rank &lt;= 10
				      then dim1_val
				      else null
				  end)			   as dim1_value
			    , max(case when dim1_rank &lt;= 10
				      then dim2_val
				      else null
				  end)			   as dim2_value
			    , sum(dim12_count) as dim12_count
			    , max(case when dim1_rank &lt;= 10
				      then uniq_sqlids
				      else 0
				  end)			   as uniq_sqlids
			    , max(case when dim1_rank &lt;= 10
				      then uniq_xids
				      else 0
				  end)			   as uniq_xids
			    , max(case when dim1_rank &lt;= 10
				      then uniq_sessions
				      else 0
				  end)			   as uniq_sessions
			    , max(case when dim1_rank &lt;= 10
				      then uniq_instances
				      else 0
				  end)			   as uniq_instances
			    , count(distinct dim1_val)	    as dim1_nummem
			    , sum(dim12_nummem) 	    as dim12_nummem
			    , max(case when dim1_rank &lt;= 10
				      then dim1_rank
				      else (10 + 1)
				  end)			   as dim1_rank
			    , max(case when dim1_rank &lt;= 10
				      then dim12_rank
				      else (10 + 1)
				  end)			   as dim12_rank
			    , max(inst_id)	    as inst_id

			from (select dim1_val
				    , max(case when dim12_rank &lt;= 13
					      then dim2_val
					      else null
					  end)		   as dim2_val
				    , dim1_count
				    , sum(dim12_count)	    as dim12_count
				    , max(case when dim12_rank &lt;= 13
					      then uniq_sqlids
					      else 0
					  end)		   as uniq_sqlids
				    , max(case when dim12_rank &lt;= 13
					      then uniq_xids
					      else 0
					  end)		   as uniq_xids
				    , max(case when dim12_rank &lt;= 13
					      then uniq_sessions
					      else 0
					  end)		   as uniq_sessions
				    , max(case when dim12_rank &lt;= 13
					      then uniq_instances
					      else 0
					  end)		   as uniq_instances
				    , count(*) as dim12_nummem
				    , dense_rank() over
				       (order by dim1_count desc
						, dim1_val
				       ) as dim1_rank
				    , max(case when dim12_rank &lt;= 13
					      then dim12_rank
					      else (13 + 1)
					  end)		   as dim12_rank
				    , max(inst_id)	    as inst_id

				 from (select physical_session	 as dim1_val
					     , wait_class   as dim2_val
					     , sample_count as dim12_count
					     , dense_rank() over
						(partition by physical_session

						     order by sample_count desc
							     , wait_class

						) as dim12_rank
					     , sum(sample_count) over
						(partition by physical_session

						) as dim1_count
					     , uniq_sqlids
					     , uniq_xids
					     , uniq_sessions
					     , uniq_instances
					     , inst_id

					from grouped_ash
				       where gid = 21
					 and physical_session is not null
					 and wait_class is not null )
			     group by dim1_val
				     , dim1_count
				     , (case when dim12_rank &lt;= 13
					    then dim2_val
					    else null
					end)

			     )
		    group by (case when dim1_rank &lt;= 10
				   then dim1_val
				   else null
			       end)
			    , (case when dim1_rank &lt;= 10
				   then dim2_val
				   else null
			       end)

			   ) dim_data
			) t
		     ),  component_4_xml as
	     (select xmlelement(
			&quot;item&quot;
		       , xmlattributes(
			   'wait_class, event' as &quot;item&quot;)
			  , xmlelement(
			      &quot;top_mems&quot;
			     , xmlagg(
				xmlelement(
				  &quot;mem&quot;
				 , xmlattributes(
				    dim1_value		   as &quot;dim1_value&quot;
				   , dim1_nummem	    as &quot;dim1_nummem&quot;
				   , dim1_rank		    as &quot;dim1_rank&quot;
				   , dim2_value 	    as &quot;dim2_value&quot;
				   , dim12_nummem	    as &quot;dim2_nummem&quot;
				   , dim12_rank 	    as &quot;dim2_rank&quot;
				   , dim12_count	    as &quot;count&quot;
				   , uniq_sqlids	    as &quot;uniq_sqlids&quot;
				   , uniq_xids		    as &quot;uniq_xids&quot;
				   , uniq_sessions	    as &quot;uniq_sessions&quot;
				   , uniq_instances	    as &quot;uniq_instances&quot;

				  )
				, NVL2(NULL,
				      xmlelement(&quot;info&quot;
				       , xmlattributes('dim1_name' as &quot;type&quot;)
				       , NULL),  NULL)
				, NVL2(NULL,
				      xmlelement(&quot;info&quot;
					, xmlattributes('dim2_name' as &quot;type&quot;)
					, NULL),  NULL)
				)
			       order by dim1_rank, dim12_rank
			      )
			   )
		     ) as dim_frag
		from
		 (select  dim_data.*


		  from (select
			     max(case when dim1_rank &lt;= 13
				      then dim1_val
				      else null
				  end)			   as dim1_value
			    , max(case when dim1_rank &lt;= 13
				      then dim2_val
				      else null
				  end)			   as dim2_value
			    , sum(dim12_count) as dim12_count
			    , max(case when dim1_rank &lt;= 13
				      then uniq_sqlids
				      else 0
				  end)			   as uniq_sqlids
			    , max(case when dim1_rank &lt;= 13
				      then uniq_xids
				      else 0
				  end)			   as uniq_xids
			    , max(case when dim1_rank &lt;= 13
				      then uniq_sessions
				      else 0
				  end)			   as uniq_sessions
			    , max(case when dim1_rank &lt;= 13
				      then uniq_instances
				      else 0
				  end)			   as uniq_instances
			    , count(distinct dim1_val)	    as dim1_nummem
			    , sum(dim12_nummem) 	    as dim12_nummem
			    , max(case when dim1_rank &lt;= 13
				      then dim1_rank
				      else (13 + 1)
				  end)			   as dim1_rank
			    , max(case when dim1_rank &lt;= 13
				      then dim12_rank
				      else (13 + 1)
				  end)			   as dim12_rank
			    , max(inst_id)	    as inst_id

			from (select dim1_val
				    , max(case when dim12_rank &lt;= 10
					      then dim2_val
					      else null
					  end)		   as dim2_val
				    , dim1_count
				    , sum(dim12_count)	    as dim12_count
				    , max(case when dim12_rank &lt;= 10
					      then uniq_sqlids
					      else 0
					  end)		   as uniq_sqlids
				    , max(case when dim12_rank &lt;= 10
					      then uniq_xids
					      else 0
					  end)		   as uniq_xids
				    , max(case when dim12_rank &lt;= 10
					      then uniq_sessions
					      else 0
					  end)		   as uniq_sessions
				    , max(case when dim12_rank &lt;= 10
					      then uniq_instances
					      else 0
					  end)		   as uniq_instances
				    , count(*) as dim12_nummem
				    , dense_rank() over
				       (order by dim1_count desc
						, dim1_val
				       ) as dim1_rank
				    , max(case when dim12_rank &lt;= 10
					      then dim12_rank
					      else (10 + 1)
					  end)		   as dim12_rank
				    , max(inst_id)	    as inst_id

				 from (select wait_class   as dim1_val
					     , event   as dim2_val
					     , sample_count as dim12_count
					     , dense_rank() over
						(partition by wait_class

						     order by sample_count desc
							     , event

						) as dim12_rank
					     , sum(sample_count) over
						(partition by wait_class

						) as dim1_count
					     , uniq_sqlids
					     , uniq_xids
					     , uniq_sessions
					     , uniq_instances
					     , inst_id

					from grouped_ash
				       where gid = 13
					 and wait_class is not null
					 and event is not null )
			     group by dim1_val
				     , dim1_count
				     , (case when dim12_rank &lt;= 10
					    then dim2_val
					    else null
					end)

			     )
		    group by (case when dim1_rank &lt;= 13
				   then dim1_val
				   else null
			       end)
			    , (case when dim1_rank &lt;= 13
				   then dim2_val
				   else null
			       end)

			   ) dim_data
			) t
		     )select xmlconcat((select xml_frag from filter_xml),
		      xmlelement(&quot;dim_list&quot;,
				 xmlconcat((select dim_frag from component_1_xml), (select dim_frag from component_2_xml), (select dim_frag from component_3_xml), (select dim_frag from component_4_xml)))
		) from sys.dual</pre_sqltext></td>
</tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9srhzg8u9vjsp"></a>9srhzg8u9vjsp</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '33';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9tgj4g8y4rwy8"></a>9tgj4g8y4rwy8</td><td class='awrc'><pre_sqltext class="awr">select type#, blocks, extents, minexts, maxexts, extsize, extpct, user#, iniexts, NVL(lists, 65535), NVL(groups, 65535), cachehint, hwmincr,  NVL(spare1, 0), NVL(scanhint, 0), NVL(bitmapranges, 0) from seg$ where ts#=:1 and file#=:2 and block#=:3</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9uvmr65d5xzyk"></a>9uvmr65d5xzyk</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '29';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9yraxx50ufhwk"></a>9yraxx50ufhwk</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '46';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9yv5dwv8k0awg"></a>9yv5dwv8k0awg</td><td class='awrnc'><pre_sqltext class="awr">WITH MONITOR_DATA AS (SELECT INST_ID,  KEY,  NVL2(PX_QCSID,  NULL,  STATUS) STATUS,  FIRST_REFRESH_TIME,  LAST_REFRESH_TIME,  REFRESH_COUNT,  PROCESS_NAME,  SID,  SQL_ID,  SQL_EXEC_START,  SQL_EXEC_ID,  DBOP_NAME,  DBOP_EXEC_ID,  SQL_PLAN_HASH_VALUE,  SQL_FULL_PLAN_HASH_VALUE,  SESSION_SERIAL#,	SQL_TEXT,  PX_SERVER#,	PX_SERVER_GROUP,  PX_SERVER_SET,  PX_QCINST_ID,  PX_QCSID,  CASE WHEN ELAPSED_TIME &lt; (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) THEN (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) ELSE ELAPSED_TIME END ELAPSED_TIME,  QUEUING_TIME,  CPU_TIME,  APPLICATION_WAIT_TIME,  CONCURRENCY_WAIT_TIME,  CLUSTER_WAIT_TIME,  USER_IO_WAIT_TIME,  CASE WHEN ELAPSED_TIME &lt; (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) THEN 0 ELSE ELAPSED_TIME - (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) END OTHER_WAIT_TIME,  PLSQL_EXEC_TIME,  JAVA_EXEC_TIME,	FETCHES,  BUFFER_GETS,	IO_INTERCONNECT_BYTES IO_INTER_BYTES,  PHYSICAL_READ_REQUESTS READ_REQS,  PHYSICAL_READ_BYTES READ_BYTES,  PHYSICAL_WRITE_REQUESTS WRITE_REQS,	PHYSICAL_WRITE_BYTES WRITE_BYTES,  NVL(PHYSICAL_READ_BYTES,  0) + NVL(PHYSICAL_WRITE_BYTES,  0) IO_BYTES,  NVL(PHYSICAL_READ_REQUESTS,	0) + NVL(PHYSICAL_WRITE_REQUESTS,  0) IO_REQS,	IO_CELL_UNCOMPRESSED_BYTES IO_UNC_BYTES,  IO_CELL_OFFLOAD_ELIGIBLE_BYTES IO_ELIG_BYTES,  IO_CELL_OFFLOAD_RETURNED_BYTES IO_RET_BYTES,  USER# USERID,  USERNAME,  MODULE,  ACTION,  SERVICE_NAME,  CLIENT_IDENTIFIER,  CLIENT_INFO,  PROGRAM,  PLSQL_OBJECT_ID PL_OID,  PLSQL_SUBPROGRAM_ID PL_PROGID,  PLSQL_ENTRY_OBJECT_ID PL_ENTRY_OID,  PLSQL_ENTRY_SUBPROGRAM_ID PL_ENTRY_PROGID,	PX_MAXDOP MAX_DOP,  PX_IS_CROSS_INSTANCE,  PX_MAXDOP_INSTANCES MAX_DOP_INSTANCES,  PX_SERVERS_REQUESTED SERVERS_REQUESTED,  PX_SERVERS_ALLOCATED SERVERS_ALLOCATED,  ERROR_NUMBER,  ERROR_FACILITY,  ERROR_MESSAGE,  NVL2(OTHER_XML,  'Y',  NULL) HAS_OTHER_XML,  NVL2(BINDS_XML,  'Y',  NULL) HAS_BINDS_XML,  NVL2(RM_CONSUMER_GROUP,	NVL2(RM_LAST_ACTION_TIME,  TO_CHAR(RM_LAST_ACTION_TIME,  :B12 ),  '00/00/0000 00:00:01') || XMLELEMENT( &quot;rminfo&quot;,  XMLATTRIBUTES( RM_LAST_ACTION AS &quot;rmlastact&quot;,  RM_LAST_ACTION_REASON AS &quot;rmlastreason&quot;,  TO_CHAR(RM_LAST_ACTION_TIME,	:B12 ) AS &quot;rmlasttime&quot;,  RM_CONSUMER_GROUP AS &quot;rmcg&quot;)).GETSTRINGVAL(),  '00/00/0000 00:00:00') RM_INFO,  CON_NAME,	CON_ID FROM GV$ALL_SQL_MONITOR MO1 WHERE MO1.INST_ID BETWEEN :B11 AND :B10 AND MO1.SQL_ID = NVL(:B9 ,  MO1.SQL_ID) AND MO1.SQL_EXEC_START = NVL(:B8 ,  MO1.SQL_EXEC_START) AND MO1.SQL_EXEC_ID = NVL(:B7 ,  MO1.SQL_EXEC_ID) OR (MO1.DBOP_NAME = NVL(:B6 ,  MO1.DBOP_NAME) AND MO1.DBOP_EXEC_ID = NVL(:B5 ,  MO1.DBOP_EXEC_ID)) AND ((:B4 = 1 AND MO1.PX_QCSID IS NULL) OR (MO1.PX_SERVER_GROUP = NVL(:B3 ,  MO1.PX_SERVER_GROUP) AND MO1.PX_SERVER_SET = NVL(:B2 ,  MO1.PX_SERVER_SET) AND MO1.PX_SERVER# = NVL(:B1 ,	MO1.PX_SERVER#)))),  MONITOR_AGG AS (SELECT MAX_PX_QCSID,  MAX_KEY,  MAX_INST_ID,  MAX_SESSION_ID,  MAX_SESSION_SERIAL,  MAX_PX_DOP,  MAX_PX_DOP_INSTANCES,  MAX_PX_IS_CROSS_INSTANCE,	SUM_SERVERS_REQUESTED,	SUM_SERVERS_ALLOCATED,	DIST_INST_COUNT,  DIST_PX_GROUP_COUNT,	DIST_PX_SET_COUNT,  MAX_PLAN_HASH_VALUE,  MAX_FULL_PLAN_HASH_VALUE,  MAX_USERID,  MAX_PROGRAM,	MAX_USERNAME,  MAX_MODULE,  MAX_ACTION,  MAX_SERVICE_NAME,  MAX_CLIENT_ID,  MAX_CLIENT_INFO,  MAX_ERROR_NUMBER,  MAX_ERROR_FACILITY,  MAX_ERROR_MESSAGE,  QC_HAS_OTHER_XML,  QC_HAS_BINDS_XML,	MAX_PL_OID,  MAX_PL_PROGID,  MAX_PL_ENTRY_OID,	MAX_PL_ENTRY_PROGID,  MAX_SQL_ID,  MAX_SQL_EXEC_START,	MAX_SQL_EXEC_ID,  MAX_LAST_REFRESH_TIME,  MAX_DBOP_NAME,  MAX_DBOP_EXEC_ID,  CASE WHEN MAX_PL_OID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,  NULL,  '',	'.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = MAX_PL_OID AND P.SUBPROGRAM_ID = MAX_PL_PROGID AND ROWNUM = 1),  'Unavailable') END MAX_PL_NAME,  CASE WHEN MAX_PL_ENTRY_OID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,  NULL,  '',  '.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = MAX_PL_ENTRY_OID AND P.SUBPROGRAM_ID = MAX_PL_ENTRY_PROGID AND ROWNUM = 1),  'Unavailable') END MAX_PL_ENTRY_NAME,  MAX_STATUS,  SUM_REFRESH_COUNT,  MIN_FIRST_REFRESH_TIME,  SQLMON_TEXT,  SUM_ELAPSED_TIME,	MAX_ELAPSED_TIME,  MAX_QUEUING_TIME,  SUM_CPU_TIME,  SUM_USER_IO_WAIT_TIME,  SUM_APPLICATION_WAIT_TIME,  SUM_CONCURRENCY_WAIT_TIME,  SUM_CLUSTER_WAIT_TIME,  SUM_PLSQL_EXEC_TIME,  SUM_JAVA_EXEC_TIME,	SUM_OTHER_WAIT_TIME,  SUM_FETCHES,  SUM_BUFFER_GETS,  SUM_READ_REQS,  SUM_READ_BYTES,  SUM_WRITE_REQS,	SUM_WRITE_BYTES,  SUM_IO_BYTES,  SUM_IO_INTER_BYTES,  SUM_IO_UNC_BYTES,  SUM_IO_ELIG_BYTES,  SUM_IO_RET_BYTES,	DECODE(:B14 ,  1,  'db_name',  SYS_CONTEXT('userenv',  'db_unique_name')) DB_UNIQUE_NAME,  DECODE(:B14 ,  1,  'platform_name',	SYS.DBMS_UTILITY.PORT_STRING) PLATFORM_NAME,  DECODE(:B14 ,  1,  'host_name',  SYS_CONTEXT('userenv',  'server_host')) HOST_NAME,  AGG_RM_INFO MAX_RM_INFO,  MAX_CON_NAME,  DECODE(MAX_CON_ID,	0,  NULL,  MAX_CON_ID) MAX_CON_ID FROM (SELECT MAX(PX_QCSID) MAX_PX_QCSID,  MAX(CASE WHEN PX_QCSID IS NULL THEN KEY ELSE NULL END) MAX_KEY,  MAX(CASE WHEN PX_QCSID IS NULL THEN INST_ID ELSE NULL END) MAX_INST_ID,  MAX(CASE WHEN PX_QCSID IS NULL THEN SID ELSE NULL END) MAX_SESSION_ID,  MAX(CASE WHEN PX_QCSID IS NULL THEN SESSION_SERIAL# ELSE NULL END) MAX_SESSION_SERIAL,  MAX(MAX_DOP) MAX_PX_DOP,	MAX(MAX_DOP_INSTANCES) MAX_PX_DOP_INSTANCES,  MAX(PX_IS_CROSS_INSTANCE) MAX_PX_IS_CROSS_INSTANCE,  SUM(SERVERS_REQUESTED) SUM_SERVERS_REQUESTED,  SUM(SERVERS_ALLOCATED) SUM_SERVERS_ALLOCATED,  COUNT(DISTINCT INST_ID) DIST_INST_COUNT,  COUNT(DISTINCT PX_SERVER_GROUP) DIST_PX_GROUP_COUNT,  COUNT(DISTINCT PX_SERVER_SET) DIST_PX_SET_COUNT,  MAX(SQL_PLAN_HASH_VALUE) MAX_PLAN_HASH_VALUE,  MAX(SQL_FULL_PLAN_HASH_VALUE) MAX_FULL_PLAN_HASH_VALUE,  MAX(USERID) MAX_USERID,  MAX(PROGRAM) MAX_PROGRAM,  MAX(USERNAME) MAX_USERNAME,  MAX(MODULE) MAX_MODULE,  MAX(ACTION) MAX_ACTION,  MAX(SERVICE_NAME) MAX_SERVICE_NAME,  MAX(CLIENT_IDENTIFIER) MAX_CLIENT_ID,  MAX(CLIENT_INFO) MAX_CLIENT_INFO,  MAX(ERROR_NUMBER) MAX_ERROR_NUMBER,  MAX(ERROR_FACILITY) MAX_ERROR_FACILITY,  MAX(ERROR_MESSAGE) MAX_ERROR_MESSAGE,  MAX(NVL2(PX_QCSID,  HAS_OTHER_XML,  NULL)) QC_HAS_OTHER_XML,	MAX(HAS_BINDS_XML) QC_HAS_BINDS_XML,  MAX(PL_OID) MAX_PL_OID,  MAX(PL_PROGID) MAX_PL_PROGID,  MAX(PL_ENTRY_OID) MAX_PL_ENTRY_OID,  MAX(PL_ENTRY_PROGID) MAX_PL_ENTRY_PROGID,  MAX(SQL_ID) MAX_SQL_ID,  MAX(SQL_EXEC_START) MAX_SQL_EXEC_START,	MAX(SQL_EXEC_ID) MAX_SQL_EXEC_ID,  MAX(LAST_REFRESH_TIME) MAX_LAST_REFRESH_TIME,  MAX(STATUS) MAX_STATUS,  SUM(REFRESH_COUNT) SUM_REFRESH_COUNT,  MIN(FIRST_REFRESH_TIME) MIN_FIRST_REFRESH_TIME,  MAX(DBOP_NAME) MAX_DBOP_NAME,  MAX(DBOP_EXEC_ID) MAX_DBOP_EXEC_ID,  CASE WHEN :B13 = 0 THEN NULL ELSE MAX(SQL_TEXT) END SQLMON_TEXT,  SUM(ELAPSED_TIME) SUM_ELAPSED_TIME,  MAX(ELAPSED_TIME) MAX_ELAPSED_TIME,  MAX(QUEUING_TIME) MAX_QUEUING_TIME,	SUM(CPU_TIME) SUM_CPU_TIME,  SUM(USER_IO_WAIT_TIME) SUM_USER_IO_WAIT_TIME,  SUM(APPLICATION_WAIT_TIME) SUM_APPLICATION_WAIT_TIME,  SUM(CONCURRENCY_WAIT_TIME) SUM_CONCURRENCY_WAIT_TIME,  SUM(CLUSTER_WAIT_TIME) SUM_CLUSTER_WAIT_TIME,  SUM(PLSQL_EXEC_TIME) SUM_PLSQL_EXEC_TIME,  SUM(JAVA_EXEC_TIME) SUM_JAVA_EXEC_TIME,  SUM(OTHER_WAIT_TIME) SUM_OTHER_WAIT_TIME,	SUM(FETCHES) SUM_FETCHES,  SUM(BUFFER_GETS) SUM_BUFFER_GETS,  SUM(READ_REQS) SUM_READ_REQS,  SUM(READ_BYTES) SUM_READ_BYTES,  SUM(WRITE_REQS) SUM_WRITE_REQS,  SUM(WRITE_BYTES) SUM_WRITE_BYTES,  NVL(SUM(READ_BYTES),	0) + NVL(SUM(WRITE_BYTES),  0) SUM_IO_BYTES,  SUM(IO_INTER_BYTES) SUM_IO_INTER_BYTES,  SUM(IO_UNC_BYTES)
 SUM_IO_UNC_BYTES,  SUM(IO_ELIG_BYTES) SUM_IO_ELIG_BYTES,  SUM(IO_RET_BYTES) SUM_IO_RET_BYTES,	MAX(RM_INFO) AGG_RM_INFO,  MAX(CON_NAME) MAX_CON_NAME,	MAX(CON_ID) MAX_CON_ID FROM MONITOR_DATA) MD),	ASH_DATA AS (SELECT AD0.INST_ID,  AD0.SESSION_ID,  AD0.PLAN_LINE_ID,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  AD0.ACTIVITY_BUCKET_NUM,	AD0.PLAN_ACTIVITY_BUCKET_NUM,  AD0.SQL,  AD0.TOP_LEVEL_SQL_ID,	AD0.DBOP_NAME,	AD0.IS_MONITORED_SQL,  AD0.IS_PX_SLAVE,  AD0.BUCKET_ACTIVITY_START,  AD0.ACTIVITY_START,  AD0.BUCKET_ACTIVITY_END,  AD0.ACTIVITY_END,  AD0.ACTIVITY_COUNT,  AD0.ACTIVITY_TYPE,	AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.IMQ_COUNT,  AD0.WAIT_COUNT,	AD0.CPU_COUNT,	AD0.OTHER_SQL_COUNT,  AD0.PX_SERVER_SET,  AD0.PX_DFO_ACTIVITY_COUNT,  AD0.DFO_MOST_ACTIVE_IID,	AD0.DFO_MOST_ACTIVE_SID,  (CASE WHEN AD0.DFO_MOST_ACTIVE_IID = AD0.INST_ID AND AD0.DFO_MOST_ACTIVE_SID = AD0.SESSION_ID AND (((AD0.PX_DFO_ACTIVITY_COUNT / AD0.DFO_MOST_ACTIVE_COUNT) &gt;= AD0.PX_DOP * 1.05) OR ((AD0.PX_DFO_ACTIVITY_COUNT / AD0.DFO_MOST_ACTIVE_COUNT) &lt;= AD0.PX_DOP *0.95)) AND (AD0.DFO_DURATION * 100) &gt; :B32 THEN AD0.ACTIVITY_COUNT ELSE NULL END) DFO_MOST_ACTIVE_COUNT,  AD0.BUCKET_DISTINCT_SAMPLES,	AD0.SQL_BUCKET_DISTINCT_SAMPLES,  CASE WHEN AD0.PX_SERVER_GROUP IS NULL AND AD0.IS_PX_SLAVE = 1 THEN 1 ELSE AD0.PX_SERVER_GROUP END PX_SERVER_GROUP,  AD0.PX_STEP_ID,  AD0.PX_DFO_PAIR_TYPE,  AD0.PX_DFO_PAIR_ID,  AD0.PX_STEP_ARG,  AD0.PX_DOP,  CASE WHEN AD0.PX_DOP IS NOT NULL AND AD0.PX_DOP &lt;&gt; AD0.PX_MIN_DOP AND AD0.PX_MIN_DOP != 0 THEN PX_MIN_DOP ELSE NULL END PX_MIN_DOP FROM (SELECT /*+ use_hash(ash) leading(mo) */ ASH.INST_ID,  ASH.IS_PX_SLAVE,  ASH.SESSION_ID,  ASH.PLAN_LINE_ID,  ASH.PLSQL_OBJECT_ID,  ASH.PLSQL_SUBPROGRAM_ID,  ASH.ACTIVITY_BUCKET_NUM,  ASH.PLAN_ACTIVITY_BUCKET_NUM,  ASH.SQL,	ASH.TOP_LEVEL_SQL_ID,  ASH.DBOP_NAME,  ASH.IS_MONITORED_SQL,  ASH.BUCKET_ACTIVITY_START,  ASH.ACTIVITY_START,  ASH.BUCKET_ACTIVITY_END,  ASH.ACTIVITY_END,  ASH.ACTIVITY_COUNT,  ASH.ACTIVITY_TYPE,  ASH.OTHER_SQL_ACTIVITY_TYPE,  ASH.EVENT_NAME,  ASH.IMQ_COUNT,  ASH.WAIT_COUNT,  ASH.CPU_COUNT,  ASH.OTHER_SQL_COUNT,  MO.PX_SERVER_SET,  ASH.PX_DFO_ACTIVITY_COUNT,  TRUNC(ASH.MOST_ACTIVE_IN_DFO / 10000000000) DFO_MOST_ACTIVE_COUNT,  MOD(TRUNC(ASH.MOST_ACTIVE_IN_DFO / 1000000),  10000) DFO_MOST_ACTIVE_IID,  MOD(ASH.MOST_ACTIVE_IN_DFO,  1000000) DFO_MOST_ACTIVE_SID,  ASH.DFO_DURATION,	ASH.BUCKET_DISTINCT_SAMPLES,  ASH.SQL_BUCKET_DISTINCT_SAMPLES,	MO.PX_SERVER_GROUP,  ASH.PX_STEP_ID,  ASH.PX_DFO_PAIR_TYPE,  ASH.PX_DFO_PAIR_ID,  ASH.PX_STEP_ARG,  ASH.PX_DOP,  ASH.PX_MIN_DOP FROM (SELECT /*+ no_merge */ MD.INST_ID,  MD.SID,  MD.SESSION_SERIAL#,	MD.PX_SERVER_SET,  MD.PX_SERVER_GROUP FROM MONITOR_DATA MD WHERE MD.SID IS NOT NULL OR :B31 = 1) MO,  (SELECT /*+ no_merge */ GVTF.INST_ID,  GVTF.GLOBAL_SAMPLE_ID,  GVTF.IS_PX_SLAVE,	GVTF.SESSION_ID,  GVTF.PLAN_LINE_ID,  GVTF.PLSQL_OBJECT_ID,  GVTF.PLSQL_SUBPROGRAM_ID,	GVTF.ACTIVITY_BUCKET_NUM,  GVTF.PLAN_ACTIVITY_BUCKET_NUM,  GVTF.SQL,  GVTF.TOP_LEVEL_SQL_ID,  GVTF.DBOP_NAME,  GVTF.IS_MONITORED_SQL,  GVTF.BUCKET_ACTIVITY_START,  GVTF.ACTIVITY_START,  GVTF.BUCKET_ACTIVITY_END,  GVTF.ACTIVITY_END,  GVTF.ACTIVITY_COUNT,  GVTF.ACTIVITY_TYPE,  GVTF.OTHER_SQL_ACTIVITY_TYPE,  GVTF.EVENT_NAME,  GVTF.IMQ_COUNT,  GVTF.WAIT_COUNT,	GVTF.CPU_COUNT,  GVTF.OTHER_SQL_COUNT,	MAX(GVTF.PER_SERVER_DFO_COUNT * 10000000000 + GVTF.INST_ID * 1000000 + GVTF.SESSION_ID) OVER(PARTITION BY GVTF.PX_DFO_PAIR_TYPE,  GVTF.PX_DFO_PAIR_ID) MOST_ACTIVE_IN_DFO,  SUM(GVTF.ACTIVITY_COUNT) OVER(PARTITION BY GVTF.PX_DFO_PAIR_TYPE,  GVTF.PX_DFO_PAIR_ID) PX_DFO_ACTIVITY_COUNT,  GVTF.DFO_DURATION,	GVTF.PX_STEP_ID,  GVTF.PX_DFO_PAIR_TYPE,  GVTF.PX_DFO_PAIR_ID,	GVTF.PX_STEP_ARG,  GVTF.PX_DOP,  GVTF.PX_MIN_DOP,  COUNT(DISTINCT GVTF.GLOBAL_SAMPLE_ID) OVER(PARTITION BY GVTF.ACTIVITY_BUCKET_NUM) BUCKET_DISTINCT_SAMPLES,  COUNT(DISTINCT GVTF.GLOBAL_SAMPLE_ID) OVER(PARTITION BY GVTF.SQL,  GVTF.ACTIVITY_BUCKET_NUM) SQL_BUCKET_DISTINCT_SAMPLES FROM TABLE(SYS.GV$(CURSOR( (SELECT USERENV('INSTANCE') INST_ID,  ASH2.GLOBAL_SAMPLE_ID,  CASE WHEN :B30 = 1 AND :B27 &gt; 1 THEN BUCKET_NUM ELSE NULL END ACTIVITY_BUCKET_NUM,	CASE WHEN :B29 = 1 AND :B27 &gt; 1 THEN BUCKET_NUM ELSE NULL END PLAN_ACTIVITY_BUCKET_NUM,  ASH2.SQL,  ASH2.TOP_LEVEL_SQL_ID,  ASH2.DBOP_NAME,	ASH2.IS_MONITORED_SQL,	ASH2.PLAN_LINE_ID,  ASH2.PLSQL_OBJECT_ID,  ASH2.PLSQL_SUBPROGRAM_ID,  ASH2.ACTIVITY_TYPE,  ASH2.OTHER_SQL_ACTIVITY_TYPE,  ASH2.EVENT_NAME,  ASH2.IS_PX_SLAVE,  ASH2.SESSION_ID,  ASH2.PX_STEP_ID,  ASH2.PX_DFO_PAIR_TYPE,  ASH2.PX_DFO_PAIR_ID,  ASH2.PX_STEP_ARG,  CASE WHEN ASH2.PX_DFO_PAIR_ID IS NOT NULL THEN DECODE(ASH2.PX_DOP,	0,  :B28 ,  ASH2.PX_DOP) ELSE NULL END PX_DOP,	ASH2.PX_MIN_DOP,  :B20 + NUMTODSINTERVAL(:B26 * (ASH2.BUCKET_NUM-1),  'SECOND') BUCKET_ACTIVITY_START,	:B20 + NUMTODSINTERVAL( :B26 * ASH2.BUCKET_NUM - 1,  'SECOND') BUCKET_ACTIVITY_END,  ASH2.ACTIVITY_START,  ASH2.ACTIVITY_END,  ASH2.ACTIVITY_COUNT,  ASH2.IMQ_COUNT,  ASH2.WAIT_COUNT,	ASH2.CPU_COUNT,  ASH2.OTHER_SQL_COUNT,	SUM(ASH2.ACTIVITY_COUNT) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE,  DECODE(ASH2.PX_DFO_PAIR_ID,  NULL,  NULL,  ASH2.SESSION_ID)) PER_SERVER_DFO_COUNT,  CEIL((MAX(ASH2.MAX_SAMPLE_DATE) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE) - MIN(ASH2.MIN_SAMPLE_DATE) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,	ASH2.PX_DFO_PAIR_TYPE)) * 3600 * 24) DFO_DURATION FROM (SELECT ASH1.BUCKET_NUM,  ASH1.GLOBAL_SAMPLE_ID,  ASH1.PLAN_LINE_ID,  ASH1.PLSQL_OBJECT_ID,  ASH1.PLSQL_SUBPROGRAM_ID,  ASH1.ACTIVITY_TYPE,  ASH1.OTHER_SQL_ACTIVITY_TYPE,  ASH1.EVENT_NAME,  ASH1.SESSION_ID,  ASH1.PX_STEP_ID,  ASH1.PX_STEP_ARG,  MAX(ASH1.SQL) SQL,	MAX(ASH1.IS_MONITORED_SQL) IS_MONITORED_SQL,  MAX(ASH1.PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  MAX(ASH1.PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  MIN(SAMPLE_DATE) MIN_SAMPLE_DATE,  MAX(SAMPLE_DATE) MAX_SAMPLE_DATE,  MAX(ASH1.IS_PX_SLAVE) IS_PX_SLAVE,	MAX(ASH1.PX_DOP) PX_DOP,  MIN(ASH1.PX_DOP) PX_MIN_DOP,	MIN(ASH1.SAMPLE_DATE) ACTIVITY_START,  MAX(ASH1.SAMPLE_DATE) ACTIVITY_END,  COUNT(ASH1.SQL) ACTIVITY_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Cpu' AND ASH1.EVENT_NAME = 'in memory' THEN 1 ELSE NULL END) IMQ_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE != 'Other SQL Execution' AND ASH1.ACTIVITY_TYPE != 'Non SQL' AND ASH1.ACTIVITY_TYPE != 'Cpu' THEN 1 ELSE NULL END) WAIT_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Cpu' AND ASH1.EVENT_NAME IS NULL THEN 1 ELSE NULL END) CPU_COUNT,	COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Other SQL Execution' AND ASH1.ACTIVITY_TYPE != 'Non SQL' THEN 1 ELSE NULL END) OTHER_SQL_COUNT,  MAX(ASH1.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  MAX(ASH1.DBOP_NAME) DBOP_NAME FROM ( SELECT (CASE WHEN :B27 &gt; 1 THEN (TRUNC(DELTA_TIME_SECONDS/ :B26 ) + 1) ELSE 1 END) BUCKET_NUM,  ASH00.SQL,  ASH00.SAMPLE_DATE,  NVL2(DUP.C2,  TRUNC(DELTA_TIME_SECONDS/ (:B25 )) + 1,  NULL) GLOBAL_SAMPLE_ID,  NVL2(DUP.C2,  NULL,  ASH00.IS_MONITORED_SQL) IS_MONITORED_SQL,  NVL2(DUP.C2,  NULL,  ASH00.IN_INMEMORY_QUERY) IN_INMEMORY_QUERY,  NVL2(DUP.C2,  NULL,  ASH00.WAIT_CLASS) WAIT_CLASS,  NVL2(DUP.C2,  NULL,	ASH00.ACTIVITY_TYPE) ACTIVITY_TYPE,  NVL2(DUP.C2,  NULL,  ASH00.OTHER_SQL_ACTIVITY_TYPE) OTHER_SQL_ACTIVITY_TYPE,  NVL2(DUP.C2,  NULL,	ASH00.EVENT_NAME) EVENT_NAME,  NVL2(DUP.C2,  NULL,  ASH00.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  NVL2(DUP.C2,  NULL,  ASH00.DBOP_NAME) DBOP_NAME,  NVL2(DUP.C2,  NULL,  ASH00.IS_PX_SLAVE) IS_PX_SLAVE,  NVL2(DUP.C2,  NULL,  ASH00.SESSION_ID) SESSION_ID,  NVL2(DUP.C2,  NULL,	ASH00.PLSQL_OBJECT_ID) PLSQL_OBJECT_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLSQL_SUBPROGRAM_ID) PLSQL_SUBPROGRAM_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLAN_LINE_ID) PLAN_LINE_ID,  NVL2(DUP.C2,  NULL,  ASH00.PX_STEP_ID) PX_STEP_ID,  NVL2(DUP.C2,  NULL,	ASH00.PX_STEP_ARG) PX_STEP_ARG,  NVL2(DUP.C2,  NULL,  ASH00.PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  NVL2(DUP.C2,  NULL,  ASH00.PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  NVL2(DUP.C2,  NULL,  ASH00.PX_DOP) PX_DOP FROM (SELECT 1 C1,  NULL C2 FROM V$DUAL U
NION ALL SELECT 1 C1,  1 C2 FROM V$DUAL) DUP,  (SELECT /*+ no_merge */ 1 C1,  ASH000.SAMPLE_DATE,  ASH000.IS_MONITORED_SQL,  ((EXTRACT(SECOND FROM(DELTA_TIME)) + EXTRACT(MINUTE FROM(DELTA_TIME)) * 60 + EXTRACT(HOUR FROM(DELTA_TIME)) * 3600 + EXTRACT(DAY FROM(DELTA_TIME)) * 86400)) DELTA_TIME_SECONDS,  ASH000.IN_INMEMORY_QUERY,  ASH000.WAIT_CLASS,  DECODE(ASH000.IS_MONITORED_SQL,  1,  NVL(ASH000.WAIT_CLASS,  'Cpu'),  DECODE(SQL_ID,  NULL,  'Non SQL',  'Other SQL Execution')) ACTIVITY_TYPE,  NVL(ASH000.WAIT_CLASS,  'Cpu') OTHER_SQL_ACTIVITY_TYPE,	DECODE(:B24 ,  1,  CASE WHEN ASH000.IS_MONITORED_SQL = 1 THEN NVL(ASH000.EVENT,  DECODE(ASH000.IN_INMEMORY_QUERY,  'Y',  'in memory',  ASH000.EVENT)) WHEN ASH000.SQL_ID IS NOT NULL THEN 'sql_id: ' || ASH000.SQL_ID WHEN ASH000.CALL_NAME IS NOT NULL THEN 'call: ' || ASH000.CALL_NAME ELSE 'anonymous: '|| ASH000.EVENT END,  NULL) EVENT_NAME,  CASE WHEN ASH000.IS_MONITORED_SQL = 1 AND (NVL(ASH000.SQL_ID,  :B9 ) = :B9 OR NVL(ASH000.DBOP_NAME,  :B6 ) = :B6 ) THEN 'this' WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.SQL_ID IS NOT NULL AND ASH000.TOP_LEVEL_SQL_ID != ASH000.SQL_ID THEN ASH000.TOP_LEVEL_SQL_ID WHEN ASH000.SQL_ID IS NOT NULL THEN ASH000.SQL_ID ELSE NVL(CALL_NAME,  'anonymous') END SQL,  CASE WHEN ASH000.IS_PX_SLAVE = 0 AND (ASH000.SQL_ID IS NULL OR ASH000.TOP_LEVEL_SQL_ID != ASH000.SQL_ID) THEN ASH000.TOP_LEVEL_SQL_ID END TOP_LEVEL_SQL_ID,  ASH000.DBOP_NAME,  ASH000.IS_PX_SLAVE,  CASE WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.IS_MONITORED_SQL != 1 THEN 65536 ELSE ASH000.SESSION_ID END SESSION_ID,	DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PLSQL_OBJECT_ID,  NULL) PLSQL_OBJECT_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PLSQL_SUBPROGRAM_ID,	NULL) PLSQL_SUBPROGRAM_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.SQL_PLAN_LINE_ID,  NULL) PLAN_LINE_ID,	DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_STEP_ID,  NULL) PX_STEP_ID,  CASE WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.IS_MONITORED_SQL = 1 AND ASH000.PX_STEP_ID IN (1,  2,  3) THEN ASH000.PX_STEP_ARG ELSE NULL END PX_DFO_PAIR_ID,  CASE WHEN ASH000.IS_PX_SLAVE = 0 OR ASH000.IS_MONITORED_SQL != 1 THEN NULL WHEN ASH000.PX_STEP_ID = 1 THEN 1 WHEN ASH000.PX_STEP_ID IN (2,  3) THEN 0 ELSE NULL END PX_DFO_PAIR_TYPE,	DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_STEP_ARG,  NULL) PX_STEP_ARG,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_DOP,  NULL) PX_DOP FROM (SELECT ASH0.*,  CASE WHEN ASH0.IS_TARGET_SQL = 1 OR (ASH0.IS_PX_SLAVE = 1 AND ((NVL(ASH0.TOP_LEVEL_SQL_ID,  ASH0.SQL_ID) IS NOT NULL AND NVL(ASH0.TOP_LEVEL_SQL_ID,  ASH0.SQL_ID) = :B9 ) OR (SQL_ID IS NULL AND :B23 = 'Y'))) THEN 1 ELSE 0 END IS_MONITORED_SQL FROM (SELECT (CASE WHEN (ASH.SQL_ID = :B9 AND ASH.SQL_EXEC_ID = :B7 AND ASH.SQL_EXEC_START = :B8 ) THEN 1 ELSE 0 END) IS_TARGET_SQL,  ASH.SQL_ID,  ASH.SQL_PLAN_LINE_ID,  ASH.PLSQL_OBJECT_ID,	ASH.PLSQL_SUBPROGRAM_ID,  ASH.TOP_LEVEL_SQL_ID,  DECODE(ASH.SQL_ID,  NULL,  ASH.TOP_LEVEL_CALL_NAME,  NULL) CALL_NAME,	ASH.EVENT,  ASH.IN_INMEMORY_QUERY,  ASH.WAIT_CLASS,  ASH.SQL_EXEC_ID,  ASH.SQL_EXEC_START,  ASH.DBOP_NAME,  ASH.DBOP_EXEC_ID,  ASH.SESSION_ID,	ASH.SESSION_SERIAL#,  CASE WHEN QC_INSTANCE_ID IS NOT NULL AND (ASH.SESSION_ID != ASH.QC_SESSION_ID OR ASH.SESSION_SERIAL# != ASH.QC_SESSION_SERIAL# OR USERENV('instance') != ASH.QC_INSTANCE_ID) THEN 1 ELSE 0 END IS_PX_SLAVE,  SAMPLE_TIME - CAST(:B20 AS TIMESTAMP) DELTA_TIME,  CAST(FROM_TZ(ASH.SAMPLE_TIME,  DBTIMEZONE) AS DATE) SAMPLE_DATE,	TRUNC(MOD(PX_FLAGS/65536,  32)) PX_STEP_ID,  MOD(PX_FLAGS,  65536) PX_STEP_ARG,  TRUNC(PX_FLAGS/2097152) PX_DOP FROM V$ALL_ACTIVE_SESSION_HISTORY ASH WHERE ((ASH.SESSION_ID = :B19 AND ASH.SESSION_SERIAL# = :B18 AND USERENV('INSTANCE') = :B17 ) OR (ASH.QC_SESSION_ID IS NOT NULL AND ASH.QC_SESSION_ID = :B19 AND ASH.QC_SESSION_SERIAL# = :B18 AND ASH.QC_INSTANCE_ID = :B17 )) AND SAMPLE_TIME BETWEEN :B16 AND :B15 ) ASH0 WHERE (ASH0.SAMPLE_DATE BETWEEN :B20 + 1/24/3600 AND :B22 - 1/24/3600 OR (ASH0.SQL_ID = :B9 AND ASH0.SQL_EXEC_START = :B8 AND ASH0.SQL_EXEC_ID = :B7 ) OR (ASH0.DBOP_NAME = :B6 AND ASH0.DBOP_EXEC_ID = :B5 )) AND (:B21 IS NULL OR ASH0.SQL_PLAN_LINE_ID = :B21 ) AND (ASH0.IS_PX_SLAVE = 0 OR ASH0.SQL_ID IS NOT NULL)) ASH000 ) ASH00 WHERE ASH00.C1 = DUP.C1) ASH1 WHERE ASH1.BUCKET_NUM &gt; 0 AND ASH1.BUCKET_NUM &lt;= :B27 GROUP BY USERENV('INSTANCE'),  ASH1.GLOBAL_SAMPLE_ID,  ASH1.BUCKET_NUM,  ASH1.SESSION_ID,  ASH1.PLAN_LINE_ID,  ASH1.PLSQL_OBJECT_ID,  ASH1.PLSQL_SUBPROGRAM_ID,  ASH1.ACTIVITY_TYPE,  ASH1.EVENT_NAME,  ASH1.OTHER_SQL_ACTIVITY_TYPE,  ASH1.PX_STEP_ID,  ASH1.PX_STEP_ARG) ASH2)))) GVTF WHERE GVTF.INST_ID BETWEEN :B11 AND :B10 ) ASH WHERE ASH.GLOBAL_SAMPLE_ID IS NULL AND ASH.SESSION_ID = MO.SID(+) AND ASH.INST_ID = MO.INST_ID(+)) AD0),	RESPONSE_TIME_DATA AS (SELECT ADH.BUCKET_NUM,  ADH.SQL_ROWNUM,	ADH.SQL,  ADH.TOP_LEVEL_SQL_ID,  ADH.DBOP_NAME,  ADH.PX_ID,  DECODE( ADH.PX_STEP_ID,  NULL,  NULL,  0,	NULL,  1,  'PX Server(s) - Executing Parent DFO',  2,  'PX Server(s) - Executing Child DFO',  3,  'PX Server(s) - Sampling Child DFO',	4,  'PX Server(s) - Joining Group',  5,  'QC - Scheduling Child DFO',  6,  'QC - Scheduling Parent DFO',  7,  'QC - Initializing Objects',  8,	'QC - Flushing Objects',  9,  'QC - Allocating Slaves',  10,  'QC - Initializing Granules',  11,  'PX Server(s) - Parsing Cursor',  12,  'PX Server(s) - Executing Cursor',  13,  'PX Server(s) - Preparing Transaction',  14,	'PX Server(s) - Joining Transaction',  15,  'PX Server(s) - Load Commit',  16,	'PX Server(s) - Aborting Transaction',	17,  'QC - Executing Child DFO',  18,  'QC - Executing Parent DFO',  'PX Step - ' || PX_STEP_ID) PX_STEP_ID,  ADH.PX_STEP_ARG,	ADH.PX_DFO_PAIR_ID,  ADH.PX_DOP,  ADH.PX_MIN_DOP,  ADH.DFO_MOST_ACTIVE_IID,  ADH.DFO_MOST_ACTIVE_SID,  ADH.DFO_MOST_ACTIVE_COUNT,  ADH.ACTIVITY_START,	ADH.ACTIVITY_END,  ADH.ACTIVITY_TYPE,  ADH.OTHER_SQL_ACTIVITY_TYPE,  ADH.EVENT_NAME,  ADH.PLAN_LINE_ID,  ADH.PLSQL_OBJECT_ID,  ADH.PLSQL_SUBPROGRAM_ID,  CASE WHEN PLSQL_ROWNUM = 1 AND ADH.PLSQL_OBJECT_ID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,  NULL,  '',  '.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = ADH.PLSQL_OBJECT_ID AND P.SUBPROGRAM_ID = ADH.PLSQL_SUBPROGRAM_ID),  'Unavailable') ELSE NULL END PLSQL_NAME,  ADH.ACTIVITY_COUNT,  ADH.BUCKET_ACTIVE_SECONDS,  ADH.BUCKET_IDLE_SECONDS,  (CASE WHEN ADH.IS_MONITORED_SQL = 0 THEN ADH.ACTIVE_SECONDS WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_CPU_HEIGHT &gt;= :B34 THEN DECODE(ADH.ACTIVITY_TYPE,  'Cpu',  (ADH.DFO_PAIR_ACTIVITY_HEIGHT / ADH.DFO_PAIR_CPU_HEIGHT) * ADH.DFO_PAIR_TOTAL_SECONDS,  0) WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.PX_DOP &gt; :B34 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * DECODE(ADH.ACTIVITY_TYPE,  'Cpu',  ADH.DFO_PAIR_ACTIVITY_HEIGHT,  (ADH.DFO_PAIR_ACTIVITY_HEIGHT * (:B34 - ADH.DFO_PAIR_CPU_HEIGHT)) / (ADH.DFO_PAIR_TOTAL_HEIGHT_ADJ - ADH.DFO_PAIR_CPU_HEIGHT))) / :B34 WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL THEN (ADH.DFO_PAIR_TOTAL_SECONDS * ADH.DFO_PAIR_ACTIVITY_HEIGHT) / ADH.PX_DOP ELSE ADH.ACTIVE_SECONDS END) RESP_TIME,  (CASE WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_IDLE_HEIGHT &gt; 0 AND ADH.PX_DOP &gt; :B34 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * (ADH.DFO_PAIR_IDLE_HEIGHT * (:B34 - ADH.DFO_PAIR_CPU_HEIGHT)) / (ADH.DFO_PAIR_TOTAL_HEIGHT_ADJ - ADH.DFO_PAIR_CPU_HEIGHT)) / :B34 WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_IDLE_HEIGHT &gt; 0 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * ADH.DFO_PAIR_IDLE_HEIGHT) / ADH.PX_DOP ELSE 0 END) DFO_PAIR_IDLE_RESP_TIME,  ADH.DFO_PAIR_ACTIVITY_HEIGHT,	ADH.DFO_PAIR_CPU_HEIGHT,  ADH.DFO_PAIR_IDLE_HEIGHT,  ADH.DFO_PAIR_TOTAL_HEIGHT,  ADH.DFO_PAIR_CPU_ACTIVITY,  ADH.DFO_PAIR_TOTAL_SECONDS FROM (SELECT ADH_1.*,  (ROW_NUMBER() OVER(PARTITION BY ADH_1.PLSQL_OBJECT_ID,  ADH_1.PLSQL_SUBPROGRAM_ID ORDER BY ADH_1.BUCKET_NUM,  ADH_1.ACTIVITY_TYPE,  ADH_1.EVENT_NAME)) PLSQL_ROWNUM,  (ROW_NUMBER() OVER(PARTITION BY ADH_1.SQL ORDER BY ADH_1.BUCKET_NUM,  ADH_1.ACTIVITY_TYPE,  ADH_1.EVENT_NAME)) SQL_ROWNUM,
 (CASE WHEN ADH_1.PX_DFO_PAIR_ID IS NOT NULL AND (ADH_1.DFO_PAIR_TOTAL_HEIGHT &lt; ADH_1.PX_DOP) AND (ADH_1.DFO_PAIR_CPU_HEIGHT &lt; :B34 ) THEN ADH_1.PX_DOP - ADH_1.DFO_PAIR_TOTAL_HEIGHT ELSE 0 END) DFO_PAIR_IDLE_HEIGHT,  (CASE WHEN ADH_1.PX_DFO_PAIR_ID IS NOT NULL AND (ADH_1.DFO_PAIR_TOTAL_HEIGHT &lt; ADH_1.PX_DOP) AND (ADH_1.DFO_PAIR_CPU_HEIGHT &lt; :B34 ) THEN ADH_1.PX_DOP ELSE ADH_1.DFO_PAIR_TOTAL_HEIGHT END) DFO_PAIR_TOTAL_HEIGHT_ADJ FROM (SELECT ADH_0.*,  (CASE WHEN ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.DFO_PAIR_TOTAL_ACTIVITY * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_TOTAL_HEIGHT,  (CASE WHEN ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.DFO_PAIR_CPU_ACTIVITY * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_CPU_HEIGHT,  (CASE WHEN ADH_0.PX_DFO_PAIR_ID IS NOT NULL AND ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.ACTIVITY_COUNT * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_ACTIVITY_HEIGHT FROM (SELECT AD3.*,  (SUM(DECODE(AD3.PX_DFO_PAIR_ID,  NULL,  0,  AD3.ACTIVE_SECONDS)) OVER(PARTITION BY DECODE(AD3.PX_DFO_PAIR_ID,  NULL,  NULL,  AD3.BUCKET_NUM),  DECODE(AD3.PX_DFO_PAIR_ID,  NULL,	NULL,  AD3.PX_STEP_ARG))) DFO_PAIR_TOTAL_SECONDS FROM (SELECT AD2.*,  CASE WHEN AD2.IS_MONITORED_SQL = 0 THEN SQL_BUCKET_DISTINCT_SAMPLES * :B25 WHEN AD2.PX_ID IS NULL THEN AD2.ACTIVITY_COUNT * :B25 WHEN AD2.BUCKET_PARALLEL_MON_ACTIVITY &gt; 0 THEN (AD2.ACTIVITY_COUNT * AD2.BUCKET_PARALLEL_MON_SECONDS) / AD2.BUCKET_PARALLEL_MON_ACTIVITY ELSE 0 END ACTIVE_SECONDS,  CASE WHEN AD2.BUCKET_INTERVAL &gt; BUCKET_ACTIVE_SECONDS THEN AD2.BUCKET_INTERVAL - BUCKET_ACTIVE_SECONDS ELSE 0 END BUCKET_IDLE_SECONDS FROM (SELECT AD1.*,  (AD1.BUCKET_SERIAL_MON_ACTIVITY * :B25 ) BUCKET_SERIAL_MON_SECONDS,  (AD1.BUCKET_TOTAL_MON_ACTIVITY - AD1.BUCKET_SERIAL_MON_ACTIVITY) BUCKET_PARALLEL_MON_ACTIVITY,  (AD1.BUCKET_ACTIVE_SECONDS - (AD1.BUCKET_OTHER_ACTIVITY + AD1.BUCKET_SERIAL_MON_ACTIVITY) * :B25 ) BUCKET_PARALLEL_MON_SECONDS,  (AD1.BUCKET_OTHER_ACTIVITY * :B25 ) BUCKET_OTHER_SECONDS,  DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,	SUM(AD1.ACTIVITY_COUNT) OVER(PARTITION BY DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  AD1.BUCKET_NUM),  AD1.PX_DFO_PAIR_ID)) DFO_PAIR_TOTAL_ACTIVITY,  DECODE(AD1.PX_DFO_PAIR_ID,  NULL,	NULL,  SUM(DECODE(AD1.ACTIVITY_TYPE,  'Cpu',  AD1.ACTIVITY_COUNT,  0)) OVER(PARTITION BY DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  AD1.BUCKET_NUM),  AD1.PX_DFO_PAIR_ID)) DFO_PAIR_CPU_ACTIVITY FROM (SELECT AD01.*,  NVL((SUM(DECODE(AD01.IS_MONITORED_SQL,  1,  AD01.ACTIVITY_COUNT,	NULL)) OVER(PARTITION BY AD01.BUCKET_NUM)),  0) BUCKET_TOTAL_MON_ACTIVITY,  (NVL(SUM(CASE WHEN AD01.IS_MONITORED_SQL = 1 AND AD01.PX_ID IS NULL THEN AD01.ACTIVITY_COUNT ELSE NULL END) OVER(PARTITION BY AD01.BUCKET_NUM),  0)) BUCKET_SERIAL_MON_ACTIVITY,  (NVL((SUM(DECODE(AD01.IS_MONITORED_SQL,  0,  AD01.SQL_BUCKET_DISTINCT_SAMPLES,  NULL)) OVER(PARTITION BY AD01.BUCKET_NUM)),  0)) BUCKET_OTHER_ACTIVITY,  (NVL(AD01.BUCKET_DISTINCT_SAMPLES,  0) * :B25 ) BUCKET_ACTIVE_SECONDS,  DECODE(AD01.BUCKET_NUM,	:B27 ,	MOD(:B32 ,  :B26 ),  :B26 ) BUCKET_INTERVAL FROM (SELECT AD0.ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.PX_ID,  AD0.ACTIVITY_TYPE,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.PLAN_LINE_ID,	AD0.PX_STEP_ID,  AD0.PX_STEP_ARG,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,  MAX(AD0.IS_MONITORED_SQL) IS_MONITORED_SQL,  MAX(AD0.SQL) SQL,  MAX(AD0.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  MAX(AD0.DBOP_NAME) DBOP_NAME,  MAX(DECODE(AD0.DFO_MOST_ACTIVE_COUNT,  NULL,  NULL,  AD0.DFO_MOST_ACTIVE_IID)) DFO_MOST_ACTIVE_IID,  MAX(DECODE(AD0.DFO_MOST_ACTIVE_COUNT,  NULL,  NULL,	AD0.DFO_MOST_ACTIVE_SID)) DFO_MOST_ACTIVE_SID,	SUM(AD0.DFO_MOST_ACTIVE_COUNT) DFO_MOST_ACTIVE_COUNT,  MAX(PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,	MAX(PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  MAX(AD0.PX_DOP) PX_DOP,  MIN(AD0.PX_MIN_DOP) PX_MIN_DOP,  MAX(AD0.BUCKET_DISTINCT_SAMPLES) BUCKET_DISTINCT_SAMPLES,  MAX(AD0.SQL_BUCKET_DISTINCT_SAMPLES) SQL_BUCKET_DISTINCT_SAMPLES FROM (SELECT AD00.*,  (CASE WHEN AD00.IS_MONITORED_SQL = 1 AND (AD00.SESSION_ID != :B19 OR AD00.INST_ID != :B17 ) THEN AD00.PX_SERVER_GROUP END) PX_ID FROM ASH_DATA AD00 WHERE :B33 = 1 ) AD0 GROUP BY AD0.ACTIVITY_BUCKET_NUM,  AD0.PX_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.PLAN_LINE_ID,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  AD0.PX_STEP_ID,	AD0.PX_STEP_ARG ) AD01) AD1) AD2) AD3) ADH_0) ADH_1) ADH) SELECT /*+ no_monitor no_xml_query_rewrite
		 opt_param('_gby_hash_aggregation_enabled',  'false') */ XMLELEMENT( &quot;sql_monitor_report&quot;,  XMLATTRIBUTES(:B59 AS &quot;version&quot;,  TO_CHAR(:B58 ,  :B12 ) AS &quot;sysdate&quot;),  XMLELEMENT( &quot;report_parameters&quot;,  NULL,  CASE WHEN :B57 IS NOT NULL THEN XMLFOREST( :B57 AS &quot;dbop_name&quot;,  :B56 AS &quot;dbop_exec_id&quot;) ELSE XMLFOREST( :B55 AS &quot;sql_id&quot;,	:B54 AS &quot;sql_exec_id&quot;) END,  XMLFOREST( :B53 AS &quot;session_id&quot;,  :B52 AS &quot;session_serial&quot;,	TO_CHAR(:B51 ,	:B12 ) AS &quot;sql_exec_start&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR(:B50 ,  :B12 ) AS &quot;interval_start&quot;,  TO_CHAR(:B22 ,  :B12 ) AS &quot;interval_end&quot;,  DECODE(:B49 ,  'Y',  :B48 ,  NULL) AS &quot;auto_refresh&quot;,  :B47 AS &quot;base_path&quot;),	CASE WHEN :B23 = 'Y' AND :B46 IS NOT NULL AND NOT (:B4 = 1 AND :B3 IS NULL AND :B2 IS NULL AND :B1 IS NULL) THEN XMLELEMENT( &quot;parallel_filter&quot;,  NULL,  XMLFOREST( DECODE(:B4 ,  1,  'yes',  'no') AS &quot;qc&quot;,  :B3 AS &quot;server_group&quot;,  :B2 AS &quot;server_set&quot;,  :B1 AS &quot;server_number&quot;)) ELSE NULL END),  CASE WHEN :B14 = 1 THEN XMLELEMENT( &quot;derived_parameters_testing&quot;,  NULL,  XMLFOREST(:B11 AS &quot;instance_id_low&quot;,  :B10 AS &quot;instance_id_high&quot;,  :B26 AS &quot;bucket_interval_sec&quot;,  :B32 AS &quot;interval_second&quot;,  :B27 AS &quot;bucket_calc_count&quot;,  :B45 AS &quot;bucket_calc_max_count&quot;,  :B13 AS &quot;sel_sqltext&quot;)) ELSE NULL END,	(SELECT XMLCONCAT( CASE WHEN :B46 IS NULL AND :B67 IS NULL THEN XMLELEMENT( &quot;target&quot;,  XMLATTRIBUTES(:B17 AS &quot;instance_id&quot;,  :B19 AS &quot;session_id&quot;,  :B18 AS &quot;session_serial&quot;,  NVL2(:B6 ,  NULL,  :B9 ) AS &quot;sql_id&quot;,	NVL2(:B6 ,  NULL,  TO_CHAR(:B8 ,  :B12 )) AS &quot;sql_exec_start&quot;,  NVL2(:B6 ,  NULL,  :B7 ) AS &quot;sql_exec_id&quot;,	NVL2(:B6 ,  :B6 ,  NULL) AS &quot;dbop_name&quot;,  NVL2(:B6 ,	:B5 ,  NULL) AS &quot;dbop_exec_id&quot;,  NVL2(:B6 ,  TO_CHAR(:B8 ,  :B12 ),  NULL) AS &quot;dbop_exec_start&quot;,  NVL2(:B6 ,  NULL,  MAX_PLAN_HASH_VALUE) AS &quot;sql_plan_hash&quot;,  NVL2(:B6 ,  NULL,	MAX_FULL_PLAN_HASH_VALUE) AS &quot;sql_full_plan_hash&quot;,  MAGG.DB_UNIQUE_NAME AS &quot;db_unique_name&quot;,  MAGG.PLATFORM_NAME AS &quot;db_platform_name&quot;,  MAGG.HOST_NAME AS &quot;report_host_name&quot;),  NVL2(SUM_SERVERS_REQUESTED,  XMLELEMENT( &quot;servers_requested&quot;,  NULL,  SUM_SERVERS_REQUESTED),  NULL),  NVL2(SUM_SERVERS_ALLOCATED,  XMLELEMENT( &quot;servers_allocated&quot;,  NULL,  SUM_SERVERS_ALLOCATED),  NULL),  NVL2(MAX_USERID,  XMLELEMENT( &quot;user_id&quot;,  NULL,  MAX_USERID),  NULL),  NVL2(MAX_USERNAME,	XMLELEMENT( &quot;user&quot;,  NULL,  MAX_USERNAME),  NULL),  NVL2(MAX_CON_ID,	XMLELEMENT( &quot;con_id&quot;,  NULL,	MAX_CON_ID),  NULL),  NVL2(MAX_CON_NAME,  XMLELEMENT( &quot;con_name&quot;,  NULL,  MAX_CON_NAME),  NULL),  NVL2(MAX_PROGRAM,  XMLELEMENT( &quot;program&quot;,  NULL,	MAX_PROGRAM),  NULL),  NVL2(MAX_MODULE,  XMLELEMENT( &quot;module&quot;,  NULL,  MAX_MODULE),  NULL),  NVL2(MAX_ACTION,  XMLELEMENT( &quot;action&quot;,  NULL,  MAX_ACTION),  NULL),  NVL2(MAX_SERVICE_NAME,  XMLELEMENT( &quot;service&quot;,  NULL,	MAX_SERVICE_NAME),  NULL),  NVL2(MAX_CLIENT_ID,  XMLELEMENT( &quot;client_id&quot;,  NULL,  MAX_CLIENT_ID),  NULL),  NVL2(MAX_CLIENT_INFO,  XMLELEMENT( &quot;client_info&quot;,  NULL,  MAX_CLIENT_INFO),  NULL),  NVL2(MAX_PL_ENTRY_OID,  XMLELEMENT( &quot;plsql_entry_object_id&quot;,  NULL,  MAX_PL_ENTRY_OID),  NULL),  NVL2(MAX_PL_ENTRY_PROGID,  XMLELEMENT( &quot;plsql_entry_subprogram_id&quot;,  NULL,  MAX_PL_ENTRY_PROGID),  NULL),  NVL2(MAX_PL_ENTRY_NAME,  XMLELEMENT( &quot;plsql_entry_name&quot;,	NULL,  MAX_PL_ENTRY_NAME),  NULL),  NVL2(MAX_PL_OID,  XMLELEMENT( &quot;plsql_object_id&quot;,	NULL,  MAX_PL_OID),  NULL),  NVL2(MAX_PL_PROGID,  XMLELEMENT( &quot;plsql_subprogram_id&quot;,	NULL,  MAX_PL_PROGID),	NULL),	NVL2(MAX_PL_NAME,  XMLELEMENT( &quot;plsql_name&quot;,	NULL,  MAX_PL_NAME),  NULL),  CASE WHEN (:B13 = 0 OR :B6 IS NOT NULL) THEN NULL ELSE XMLELEMENT( &quot;sql_fulltext&quot;,  XMLATTRIBUTES( NVL2(:B65 ,	'Y',  :B66 ) AS &quot;is_full&quot;),  NVL2(:B65 ,  :B65 ,  SQLMON_TEXT)) END,	XMLELEMENT( &quot;status&quot;,  NULL,	MAX_STATUS),  XMLELEMENT( &quot;refresh_count&quot;,  NULL,  SUM_REFRESH_COUNT),  XMLELEMENT( &quot;first_refresh_time&quot;,  NULL,  TO_CHAR(MIN_FIRST_REFRESH_TIME,  :B12 )),  XMLELEMENT( &quot;last_refresh_time&quot;,  NULL,  TO_CHAR(:B58 ,  :B12 )),  XMLELEMENT( &quot;duration&quot;,  NULL,	GREATEST(:B64 ,  LEAST(MAX_ELAPSED_TIME/1000000,  1),  CEIL(MAX_QUEUING_TIME/1000000))),  DECODE(MAX_RM_INFO,  '00/00/0000 00:00:00',  NULL,  XMLTYPE(SUBSTR(MAX_RM_INFO,  20))),  CASE WHEN (:B62 = 'Y') THEN XMLELEMENT( &quot;adaptive_plan&quot;,  XMLATTRIBUTES(:B63 AS &quot;is_final&quot;),  :B62 ) ELSE NULL END ) END,  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  DECODE(NVL(SUM_ELAPSED_TIME,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  SUM_ELAPSED_TIME)),  DECODE(NVL(MAX_QUEUING_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),	MAX_QUEUING_TIME)),  DECODE(NVL(SUM_CPU_TIME,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  SUM_CPU_TIME)),  DECODE(NVL(SUM_USER_IO_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  SUM_USER_IO_WAIT_TIME)),  DECODE(NVL(SUM_APPLICATION_WAIT_TIME,  0),	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  SUM_APPLICATION_WAIT_TIME)),  DECODE(NVL(SUM_CONCURRENCY_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),	SUM_CONCURRENCY_WAIT_TIME)),  DECODE(NVL(SUM_CLUSTER_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  SUM_CLUSTER_WAIT_TIME)),  DECODE(NVL(SUM_PLSQL_EXEC_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  SUM_PLSQL_EXEC_TIME)),  DECODE(NVL(SUM_JAVA_EXEC_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  SUM_JAVA_EXEC_TIME)),  DECODE(NVL(SUM_OTHER_WAIT_TIME,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  SUM_OTHER_WAIT_TIME)),  DECODE(NVL(SUM_FETCHES,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  SUM_FETCHES)),  DECODE(NVL(SUM_BUFFER_GETS,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  SUM_BUFFER_GETS)),	DECODE(NVL(SUM_READ_REQS,  0),	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),  SUM_READ_REQS)),  DECODE(NVL(SUM_WRITE_REQS,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  SUM_WRITE_REQS)),  DECODE(NVL(SUM_READ_REQS,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  SUM_READ_REQS)),  DECODE(NVL(SUM_READ_BYTES,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  SUM_READ_BYTES)),  DECODE(NVL(SUM_WRITE_REQS,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  SUM_WRITE_REQS)),  DECODE(NVL(SUM_WRITE_BYTES,  0),	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  SUM_WRITE_BYTES)),  DECODE(NVL(SUM_IO_UNC_BYTES,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  SUM_IO_UNC_BYTES)),  DECODE(NVL(SUM_IO_ELIG_BYTES,  0),	0,  NULL
,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  SUM_IO_ELIG_BYTES)),  DECODE(NVL(SUM_IO_RET_BYTES,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),	SUM_IO_RET_BYTES)),  CASE WHEN SUM_IO_INTER_BYTES IS NULL OR SUM_IO_BYTES = 0 OR SUM_IO_INTER_BYTES = SUM_IO_BYTES OR NVL(SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(SUM_IO_BYTES / DECODE(SUM_IO_INTER_BYTES,  0,  1,  SUM_IO_INTER_BYTES),  2)) END,  CASE WHEN NVL(SUM_IO_ELIG_BYTES,  0) = 0 OR SUM_IO_BYTES = 0 OR SUM_IO_UNC_BYTES = SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100* (GREATEST(SUM_IO_UNC_BYTES,  SUM_IO_ELIG_BYTES) - SUM_IO_RET_BYTES) / SUM_IO_ELIG_BYTES,  2))) END),  CASE WHEN :B33 = 1 THEN (SELECT CASE WHEN SUM(ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,	XMLAGG( XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,  AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,  AD1.EVENT_NAME)) ELSE NULL END FROM (SELECT AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1) ELSE NULL END,  NVL2(MAX_ERROR_NUMBER,  XMLELEMENT( &quot;error&quot;,  XMLATTRIBUTES(MAX_ERROR_NUMBER AS &quot;number&quot;,  MAX_ERROR_FACILITY AS &quot;facility&quot;),  MAX_ERROR_MESSAGE),  NULL),  CASE WHEN :B61 = 1 AND MAGG.QC_HAS_BINDS_XML = 'Y' THEN (SELECT XMLTYPE(BINDS_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = :B17 AND MON.KEY = MAGG.MAX_KEY AND MON.SID = MAGG.MAX_SESSION_ID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END,  CASE WHEN :B60 = 1 AND MAGG.QC_HAS_OTHER_XML = 'Y' THEN (SELECT XMLTYPE(OTHER_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = MAGG.MAX_INST_ID AND MON.KEY = MAGG.MAX_KEY AND MON.SID = MAGG.MAX_SESSION_ID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END) FROM MONITOR_AGG MAGG),  CASE WHEN :B44 = 1 THEN (SELECT CASE WHEN AT.ACTIVITY_COUNT &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( :B41 AS
&quot;ash_missing_seconds&quot;,  TO_CHAR(AT.ACTIVITY_START,  :B12 ) AS &quot;first_sample_time&quot;,	TO_CHAR(AT.ACTIVITY_END,  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((AT.ACTIVITY_END - AT.ACTIVITY_START) * 3600 * 24) + 1 AS &quot;duration&quot;,  AT.ACTIVITY_COUNT AS &quot;count&quot;,  AT.IMQ_COUNT AS &quot;imq_count&quot;,  AT.WAIT_COUNT AS &quot;wait_count&quot;,  AT.CPU_COUNT AS &quot;cpu_count&quot;,  DECODE(AT.OTHER_SQL_COUNT,  0,  NULL,  AT.OTHER_SQL_COUNT) AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  AT.ACTIVITY_TOTAL,	AH.GLOB_ACTIVITY_HISTO) WHEN :B41 IS NOT NULL THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( DECODE( :B41 ,  -1,  'all',  TO_CHAR( :B41 )) AS &quot;ash_missing_seconds&quot;)) ELSE NULL END FROM (SELECT MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) IMQ_COUNT,  SUM(AD1.WAIT_COUNT) WAIT_COUNT,  SUM(AD1.CPU_COUNT) CPU_COUNT,  SUM(AD1.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG( XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME) ACTIVITY_TOTAL FROM (SELECT AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME,  MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,	SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,	SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1) AT,  (SELECT CASE WHEN :B30 = 1 AND :B27 &gt; 1 THEN XMLELEMENT( &quot;activity_histogram&quot;,  XMLATTRIBUTES( :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR( :B20 ,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR( :B22 ,  :B12 ) AS &quot;end_time&quot;,  ROUND(( :B22 - :B20 ) *3600*24) + 1 AS &quot;duration&quot;),  XMLAGG( XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),  ACTIVITY_BUCKET) ORDER BY AD2.BUCKET_NUM)) ELSE NULL END GLOB_ACTIVITY_HISTO FROM (SELECT AD1.BUCKET_NUM,  SUM(ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(IMQ_COUNT) IMQ_COUNT,  SUM(WAIT_COUNT) WAIT_COUNT,  SUM(CPU_COUNT) CPU_COUNT,  SUM(OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  MIN(AD1.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD1.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG( XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,  AD1.EVENT_NAME AS &quot;event&quot;),	AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,  AD1.EVENT_NAME) ACTIVITY_BUCKET FROM (SELECT AD0.ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,	MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(AD0.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,	MAX(AD0.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1 GROUP BY AD1.BUCKET_NUM) AD2) AH) ELSE NULL END,	CASE WHEN :B33 = 1 THEN (SELECT CASE WHEN AH.ACTIVITY_COUNT &gt; 0 THEN XMLELEMENT( &quot;activity_detail&quot;,  XMLATTRIBUTES( TO_CHAR( :B20 ,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR( :B22 ,  :B12 ) AS &quot;end_time&quot;,  :B41 AS &quot;ash_missing_seconds&quot;,  TO_CHAR(AH.ACTIVITY_START,  :B12 ) AS &quot;first_sample_time&quot;,  TO_CHAR(AH.ACTIVITY_END,  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((AH.ACTIVITY_END - AH.ACTIVITY_START) * 3600 * 24) + 1 AS &quot;duration&quot;,  :B25 AS &quot;sample_interval&quot;,  :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,	ROUND((:B22 - :B20 ) *3600*24) + 1 AS &quot;bucket_duration&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B34 AS &quot;total_cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  AH.GLOB_ACTIVITY_HISTO) WHEN :B41 IS NOT NULL THEN XMLELEMENT( &quot;activity_detail&quot;,  XMLATTRIBUTES( DECODE( :B41 ,  -1,  'all',  TO_CHAR( :B41 )) AS &quot;ash_missing_seconds&quot;)) ELSE NULL END FROM (SELECT MIN(AD2.ACTIVITY_START) ACTIVITY_START,	MAX(AD2.ACTIVITY_END) ACTIVITY_END,  SUM(AD2.ACTIVITY_COUNT) ACTIVITY_COUNT,  XMLAGG( XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),  ACTIVITY_BUCKET_XML) ORDER BY AD2.BUCKET_NUM) GLOB_ACTIVITY_HISTO FROM (SELECT AD1.BUCKET_NUM,  MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  MAX(AD1.BUCKET_IDLE_SECONDS) BUCKET_IDLE_SECONDS,	XMLAGG( XMLCONCAT( CASE WHEN AD1.DFO_PAIR_IDLE_RESP_TIME != 0 AND DFO_PAIR_ROWNUM = 1 THEN XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( 'Parallel Skew' AS &quot;class&quot;,  AD1.PX_STEP_ARG AS &quot;line&quot;,  AD1.PX_ID AS &quot;px&quot;,	ROUND(AD1.DFO_PAIR_IDLE_RESP_TIME,  2) AS &quot;rt&quot;),  0) ELSE NULL END,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( NVL(AD1.OTHER_SQL,  AD1.RPI) AS &quot;sql&quot;,  AD1.NON_SQL AS &quot;non_sql&quot;,	AD1.CLASS AS &quot;class&quot;,  AD1.OTHER_SQL_CLASS AS &quot;other_sql_class&quot;,  AD1.EVENT AS &quot;event&quot;,  AD1.PLAN_LINE_ID AS &quot;line&quot;,  NVL2(AD1.PLSQL_OBJECT_ID,  AD1.PLSQL_OBJECT_ID||'.'|| AD1.PLSQL_SUBPROGRAM_ID,  NULL) AS &quot;plsql_id&quot;,  AD1.PLSQL_NAME AS &quot;plsql_name&quot;,  CASE WHEN AD1.SQL_ROWNUM = 1 THEN AD1.TOP_LEVEL_SQL_ID END AS &quot;top_sql_id&quot;,	CASE WHEN AD1.DBOP_NAME IS NOT NULL THEN AD1.DBOP_NAME END AS &quot;dbop_name&quot;,  CASE WHEN AD1.DFO_MOST_ACTIVE_IID IS NOT NULL AND :B68 = 'Y' THEN AD1.DFO_MOST_ACTIVE_IID END AS &quot;skew_iid&quot;,  DECODE(AD1.DFO_MOST_ACTIVE_COUNT,  NULL, NULL,  AD1.DFO_MOST_ACTIVE_SID) AS &quot;skew_sid&quot;,  AD1.DFO_MOST_ACTIVE_COUNT AS &quot;skew_count&quot;,  DECODE(AD1.PX_DOP,  :B28 ,  NULL,  AD1.PX_DOP) AS &quot;dop&quot;,  DECODE(AD1.PX_DOP,  AD1.PX_MIN_DOP,	NULL,  AD1.PX_MIN_DOP) AS &quot;min_dop&quot;,	AD1.PX_ID AS &quot;px&quot;,  AD1.PX_STEP_ID AS &quot;step&quot;,  AD1.PX_STEP_ARG AS &quot;arg&quot;,	DECODE(AD1.ACTIVITY_COUNT,  AD1.RESP_TIME,  NULL,  ROUND(AD1.RESP_TIME,  2)) AS &quot;rt&quot;),  AD1.ACTIVITY_COUNT)) ORDER BY AD1.PX_STEP_ID,  AD1.PX_STEP_ARG,  AD1.DFO_PAIR_ROWNUM) ACTIVITY_BUCKET_XML FROM (SELECT AD01.*,  CASE WHEN AD01.ACTIVITY_TYPE != 'Other SQL Execution' AND AD01.ACTIVITY_TYPE != 'Non SQL' THEN AD01.ACTIVITY_TYPE END CLASS,	CASE WHEN (AD01.ACTIVITY_TYPE = 'Other SQL Execution' OR AD01.ACTIVITY_TYPE = 'Non SQL') THEN AD01.OTHER_SQL_ACTIVITY_TYPE END OTHER_SQL_CLASS,  CASE WHEN AD01.ACTIVITY_TYPE != 'Other SQL Execution' AND AD01.ACTIVITY_TYPE != 'Non SQL' THEN AD01.EVENT_NAME END EVENT,  CASE WHEN AD01.SQL IN ('this',  'anonymous') THEN NULL ELSE AD01.SQL END RPI,  DECODE(AD01.ACTIVITY_TYPE,  'Other SQL Execution',  SUBSTR(AD01.EVENT_NAME,	9),  NULL) OTHER_SQL,  DECODE(AD01.ACTIVITY_TYPE,  'Non SQL',  AD01.EVENT_NAME,  NULL) NON_SQL,  ROW_NUMBER() OVER(PARTITION BY AD01.BUCKET_NUM,  AD01.PX_DFO_PAIR_ID ORDER BY AD01.ACTIVITY_TYPE,  AD01.EVENT_NAME,  AD01.PLAN_LINE_ID) DFO_PAIR_ROWNUM FROM RESPONSE_TIME_DATA AD01) AD1 GROUP BY AD1.BUCKET_NUM) AD2) AH) ELSE NULL END,  CASE WHEN :B23 = 'Y' THEN (SELECT XMLELEMENT( &quot;parallel_info&quot;,  XMLATTRIBUTES( :B17 AS &quot;qc_instance_id&quot;,  MAX_PX_QCSID AS &quot;qc_session_id&quot;,  MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,  MAX_PX_DOP AS &quot;dop&quot;,  MAX_PX_DOP_INSTANCES AS &quot;max_dop_instances&quot;,  DIST_INST_COUNT AS &quot;inst_count&quot;,  DIST_PX_GROUP_COUNT AS &quot;serv
er_group_count&quot;,  DIST_PX_SET_COUNT AS &quot;server_set_count&quot;),  CASE WHEN :B70 = 1 THEN PX_SESSIONS ELSE NULL END,	CASE WHEN :B68 = 'Y' THEN DECODE(:B69 ,  1,  PX_INSTANCES,  NULL) ELSE NULL END) FROM (SELECT MAX_PX_QCSID,  MAX_PX_DOP,  MAX_PX_DOP_INSTANCES,  MAX_PX_IS_CROSS_INSTANCE,  SUM_SERVERS_REQUESTED,  SUM_SERVERS_ALLOCATED,  DIST_INST_COUNT,  DIST_PX_GROUP_COUNT,  DIST_PX_SET_COUNT,	(SELECT XMLELEMENT( &quot;sessions&quot;,  XMLATTRIBUTES(MAX(PX_SESSION.ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PX_SESSION.IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PX_SESSION.CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PX_SESSION.WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PX_SESSION.OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;,  MAX(PX_SESSION.MAX_IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PX_SESSION.MAX_IO_BYTES) AS &quot;max_io_bytes&quot;,  MAX(PX_SESSION.MAX_BUFFER_GETS) AS &quot;max_buffer_gets&quot;,  MAX(PX_SESSION.MAX_ELAPSED_TIME) AS &quot;max_elapsed_time&quot;),  XMLAGG(PX_SESSION.PX_SESSION_XML ORDER BY PX_SERVER_GROUP NULLS FIRST,  PX_SERVER_SET,  PX_SERVER#)) FROM (SELECT PX_SERVER_GROUP,  PX_SERVER_SET,  PX_SERVER#,	MAX(PI.MAX_ELAPSED_TIME) MAX_ELAPSED_TIME,  MAX(PI.MAX_IO_REQS) MAX_IO_REQS,  MAX(PI.MAX_IO_BYTES) MAX_IO_BYTES,  MAX(PI.MAX_BUFFER_GETS) MAX_BUFFER_GETS,  SUM(PI.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(PI.IMQ_COUNT) IMQ_COUNT,  SUM(PI.WAIT_COUNT) WAIT_COUNT,  SUM(PI.CPU_COUNT) CPU_COUNT,	SUM(PI.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  XMLELEMENT( &quot;session&quot;,  XMLATTRIBUTES( INST_ID AS &quot;inst_id&quot;,  PROCESS_NAME AS &quot;process_name&quot;,  SID AS &quot;session_id&quot;,  SESSION_SERIAL# AS &quot;session_serial&quot;,  PX_SERVER_GROUP AS &quot;server_group&quot;,  PX_SERVER_SET AS &quot;server_set&quot;,  PX_SERVER# AS &quot;server_num&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES( 'monitor' AS &quot;type&quot;),  NVL2(MAX(ELAPSED_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MAX(ELAPSED_TIME)),	NULL),	NVL2(MAX(QUEUING_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX(QUEUING_TIME)),  NULL),  NVL2(MAX(CPU_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MAX(CPU_TIME)),  NULL),  NVL2(MAX(USER_IO_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MAX(USER_IO_WAIT_TIME)),  NULL),  NVL2(MAX(APPLICATION_WAIT_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MAX(APPLICATION_WAIT_TIME)),  NULL),  NVL2(MAX(CONCURRENCY_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),	MAX(CONCURRENCY_WAIT_TIME)),  NULL),  NVL2(MAX(CLUSTER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MAX(CLUSTER_WAIT_TIME)),  NULL),  NVL2(MAX(PLSQL_EXEC_TIME),  XMLELEMENT(
&quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MAX(PLSQL_EXEC_TIME)),  NULL),  NVL2(MAX(JAVA_EXEC_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MAX(JAVA_EXEC_TIME)),  NULL),  NVL2(MAX(OTHER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'other_wait_time' AS &quot;name&quot;),  MAX(OTHER_WAIT_TIME)),  NULL),  NVL2(MAX(FETCHES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MAX(FETCHES)),  NULL),  NVL2(MAX(BUFFER_GETS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MAX(BUFFER_GETS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),  MAX(READ_REQS)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MAX(READ_REQS)),  NULL),  NVL2(MAX(READ_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MAX(READ_BYTES)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(WRITE_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MAX(WRITE_BYTES)),	NULL),	NVL2(MAX(IO_UNC_BYTES),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MAX(IO_UNC_BYTES)),  NULL),  NVL2(MAX(IO_ELIG_BYTES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MAX(IO_ELIG_BYTES)),  NULL),  NVL2(MAX(IO_RET_BYTES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),	MAX(IO_RET_BYTES)),  NULL),  CASE WHEN MAX(IO_INTER_BYTES) IS NULL OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_INTER_BYTES) = MAX(IO_BYTES) OR NVL(MAX(IO_ELIG_BYTES),  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),	ROUND(MAX(IO_BYTES) / DECODE(MAX(IO_INTER_BYTES),  0,  1,  MAX(IO_INTER_BYTES)),  2)) END,  CASE WHEN NVL(MAX(IO_ELIG_BYTES),  0) = 0 OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_UNC_BYTES) = MAX(IO_RET_BYTES) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,	ROUND(100* (GREATEST( NVL(MAX(IO_UNC_BYTES), 0),  NVL(MAX(IO_ELIG_BYTES), 0)) - MAX(IO_RET_BYTES)) / MAX(IO_ELIG_BYTES),  2))) END),  CASE WHEN SUM(PI.ACTIVITY_COUNT) &gt; 0 AND :B33 = 1 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( TO_CHAR(MIN(PI.ACTIVITY_START),  :B12 ) AS &quot;first_sample_time&quot;,  TO_CHAR(MAX(PI.ACTIVITY_END),  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((MAX(PI.ACTIVITY_END) - MIN(PI.ACTIVITY_START)) * 3600 * 24) + 1 AS &quot;duration&quot;,  SUM(PI.ACTIVITY_COUNT) AS &quot;count&quot;,  SUM(PI.IMQ_COUNT) AS &quot;imq_count&quot;,  SUM(PI.CPU_COUNT) AS &quot;cpu_count&quot;,  SUM(PI.WAIT_COUNT) AS &quot;wait_count&quot;,  SUM(PI.OTHER_SQL_COUNT)AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),	XMLAGG( NVL2(ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( PI.ACTIVITY_TYPE AS &quot;class&quot;,  PI.EVENT_NAME AS &quot;event&quot;),  ACTIVITY_COUNT),  NULL) ORDER BY PI.ACTIVITY_TYPE,  PI.EVENT_NAME)) ELSE NULL END,  CASE WHEN :B60 = 1 AND PI.HAS_OTHER_XML = 'Y' THEN (SELECT XMLTYPE(OTHER_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = PI.INST_ID AND MON.KEY = PI.KEY AND MON.SID = PI.SID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END) PX_SESSION_XML FROM (SELECT MO.HAS_OTHER_XML,  MO.KEY,  MO.INST_ID,  DECODE(MO.PROCESS_NAME,  'ora',  'PX Coordinator',	MO.PROCESS_NAME) PROCESS_NAME,	MO.SID,  MO.SESSION_SERIAL#,  MO.PX_SERVER_GROUP,  MO.PX_SERVER_SET,  MO.PX_SERVER#,  ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME,  MAX(MO.IO_REQS) MAX_IO_REQS,  MAX(MO.IO_BYTES) MAX_IO_BYTES,  MAX(MO.BUFFER_GETS) MAX_BUFFER_GETS,  MAX(MO.ELAPSED_TIME) MAX_ELAPSED_TIME,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.ACTIVITY_COUNT)) ACTIVITY_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,  NULL,  ASH0.IMQ_COUNT)) IMQ_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.WAIT_COUNT)) WAIT_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,  NULL,  ASH0.CPU_COUNT)) CPU_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.OTHER_SQL_COUNT)) OTHER_SQL_COUNT,	MIN(ASH0.ACTIVITY_START) ACTIVITY_START,  MAX(ASH0.ACTIVITY_END) ACTIVITY_END,	MAX(DECODE(MO.ELAPSED_TIME,  0,  NULL,	MO.ELAPSED_TIME)) ELAPSED_TIME,  MAX(DECODE(MO.QUEUING_TIME,  0,  NULL,  MO.QUEUING_TIME)) QUEUING_TIME,  MAX(DECODE(MO.CPU_TIME,  0,  NULL,  CPU_TIME)) CPU_TIME,  MAX(DECODE(MO.FETCHES,  0,	NULL,  FETCHES)) FETCHES,  MAX(DECODE(MO.BUFFER_GETS,  0,  NULL,  MO.BUFFER_GETS)) BUFFER_GETS,  MAX(DECODE(MO.IO_INTER_BYTES,	0,  NULL,  MO.IO_INTER_BYTES)) IO_INTER_BYTES,	MAX(DECODE(MO.READ_REQS,  0,  NULL,  MO.READ_REQS)) READ_REQS,	MAX(DECODE(MO.READ_BYTES,  0,  NULL,  MO.READ_BYTES)) READ_BYTES,  MAX(DECODE(MO.WRITE_REQS,  0,  NULL,  MO.WRITE_REQS)) WRITE_REQS,  MAX(DECODE(MO.WRITE_BYTES,  0,  NULL,  MO.WRITE_BYTES)) WRITE_BYTES,  MAX(DECODE(MO.IO_BYTES,  0,  NULL,	MO.IO_BYTES)) IO_BYTES,  MAX(DECODE(MO.IO_UNC_BYTES,  0,  NULL,  MO.IO_UNC_BYTES)) IO_UNC_BYTES,  MAX(DECODE(MO.IO_ELIG_BYTES,	0,  NULL,  MO.IO_ELIG_BYTES)) IO_ELIG_BYTES,  MAX(DECODE(MO.IO_RET_BYTES,  0,  NULL,  MO.IO_RET_BYTES)) IO_RET_BYTES,  MAX(DECODE(MO.APPLICATION_WAIT_TIME,  0,  NULL,	MO.APPLICATION_WAIT_TIME)) APPLICATION_WAIT_TIME,  MAX(DECODE(MO.CONCURRENCY_WAIT_TIME,  0,  NULL,  MO.CONCURRENCY_WAIT_TIME)) CONCURRENCY_WAIT_TIME,  MAX(DECODE(MO.CLUSTER_WAIT_TIME,  0,  NULL,  MO.CLUSTER_WAIT_TIME)) CLUSTER_WAIT_TIME,  MAX(DECODE(MO.USER_IO_WAIT_TIME,  0,  NULL,  MO.USER_IO_WAIT_TIME)) USER_IO_WAIT_TIME,  MAX(DECODE(PLSQL_EXEC_TIME,  0,	NULL,  PLSQL_EXEC_TIME)) PLSQL_EXEC_TIME,  MAX(DECODE(MO.JAVA_EXEC_TIME,  0,  NULL,  MO.JAVA_EXEC_TIME)) JAVA_EXEC_TIME,  MAX(DECODE(MO.OTHER_WAIT_TIME,  0,  NULL,  MO.OTHER_WAIT_TIME)) OTHER_WAIT_TIME FROM MONITOR_DATA MO,  (SELECT ASH1.INST_ID,	ASH1.SESSION_ID,  ASH1.ACTIVITY_TYPE,  ASH1.EVENT_NAME,  SUM(ASH1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(ASH1.IMQ_COUNT) IMQ_COUNT,  SUM(ASH1.WAIT_COUNT) WAIT_COUNT,  SUM(ASH1.CPU_COUNT) CPU_COUNT,  SUM(ASH1.OTHER_SQL_COUNT)OTHER_SQL_COUNT,	MIN(ASH1.ACTIVITY_START) ACTIVITY_START,  MAX(ASH1.ACTIVITY_END) ACTIVITY_END FROM ASH_DATA ASH1 GROUP BY ASH1.INST_ID,  ASH1.SESSION_ID,  ASH1.ACTIVITY_TYPE,	ASH1.EVENT_NAME) ASH0 WHERE MO.INST_ID = ASH0.INST_ID(+) AND MO.SID = ASH0.SESSION_ID(+) AND (:B70 = 1 OR :B69 = 1) GROUP BY MO.INST_ID,  MO.KEY,  MO.HAS_OTHER_XML,  MO.PROCESS_NAME,	MO.SID,  MO.SESSION_SERIAL#,  MO.PX_SERVER_GROUP,  MO.PX_SERVER_SET,  MO.PX_SERVER#,  ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME) PI WHERE (:B70 = 1) GROUP BY PI.INST_ID,  PI.KEY,  PI.HAS_OTHER_XML,  PI.SID,  PI.PROCESS_NAME,  PI.SESSION_SERIAL#,  PI.PX_SERVER_GROUP,  PI.PX_SERVER_SET,  PI.PX_SERVER#) PX_SESSION) PX_SESSIONS,  (SELECT XMLELEMENT( &quot;instances&quot;,  XMLATTRIBUTES( MAX(PX_INSTANCE.ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PX_INSTANCE.IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PX_INSTANCE.CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PX_INSTANCE.WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PX_INSTANCE.OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;,	MAX(PX_INSTANCE.ELAPSED_TIME) AS &quot;max_elapsed_time&quot;,	MAX(PX_INSTANCE.BUFFER_GETS) AS &quot;max_buffer_gets&quot;,  MAX(PX_INSTANCE.IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PX_INSTANCE.IO_BYTES) AS &quot;max_io_bytes&quot;),  XMLAGG(PX_INSTANCE.PX_INSTANCES_XML ORDER BY INST_ID)) FROM (SELECT PI.INST_ID,  MAX(PI.ELAPSED_TIME) ELAPSED_TIME,  MAX(PI.IO_REQS) IO_REQS,  MAX(PI.IO_BYTES) IO_BYTES,	MAX(PI.BUFFER_GETS) BUFFER_GETS,  SUM(PI
.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(PI.IMQ_COUNT) IMQ_COUNT,	SUM(PI.WAIT_COUNT) WAIT_COUNT,	SUM(PI.CPU_COUNT) CPU_COUNT,  SUM(PI.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	XMLELEMENT( &quot;instance&quot;,  XMLATTRIBUTES( INST_ID AS &quot;inst_id&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES( 'monitor' AS &quot;type&quot;),  NVL2(MAX(ELAPSED_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),	MAX(ELAPSED_TIME)),  NULL),  NVL2(MAX(QUEUING_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX(QUEUING_TIME)),  NULL),  NVL2(MAX(CPU_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MAX(CPU_TIME)),  NULL),  NVL2(MAX(USER_IO_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MAX(USER_IO_WAIT_TIME)),  NULL),  NVL2(MAX(APPLICATION_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name
&quot;),  MAX(APPLICATION_WAIT_TIME)),	NULL),	NVL2(MAX(CONCURRENCY_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MAX(CONCURRENCY_WAIT_TIME)),  NULL),  NVL2(MAX(CLUSTER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MAX(CLUSTER_WAIT_TIME)),  NULL),  NVL2(MAX(PLSQL_EXEC_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MAX(PLSQL_EXEC_TIME)),  NULL),  NVL2(MAX(JAVA_EXEC_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MAX(JAVA_EXEC_TIME)),  NULL),  NVL2(MAX(OTHER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'other_wait_time' AS &quot;name&quot;),	MAX(OTHER_WAIT_TIME)),	NULL),	NVL2(MAX(FETCHES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MAX(FETCHES)),  NULL),  NVL2(MAX(BUFFER_GETS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MAX(BUFFER_GETS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),	MAX(READ_REQS)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  MAX(WRITE_REQS)),	NULL),	NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MAX(READ_REQS)),	NULL),	NVL2(MAX(READ_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),	MAX(READ_BYTES)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(WRITE_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),	MAX(WRITE_BYTES)),  NULL),  NVL2(MAX(IO_UNC_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MAX(IO_UNC_BYTES)),  NULL),  NVL2(MAX(IO_ELIG_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MAX(IO_ELIG_BYTES)),  NULL),  NVL2(MAX(IO_RET_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  MAX(IO_RET_BYTES)),  NULL),  CASE WHEN MAX(IO_INTER_BYTES) IS NULL OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_INTER_BYTES) = MAX(IO_BYTES) OR NVL(MAX(IO_ELIG_BYTES),	0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MAX(IO_BYTES)/ DECODE(MAX(IO_INTER_BYTES),  0,  1,  MAX(IO_INTER_BYTES)),  2)) END,  CASE WHEN NVL(MAX(IO_ELIG_BYTES),  0) = 0 OR NVL(MAX(IO_BYTES),	0) = 0 OR MAX(IO_UNC_BYTES) = MAX(IO_RET_BYTES) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100* (GREATEST( NVL(MAX(IO_UNC_BYTES),  0),  NVL(MAX(IO_ELIG_BYTES),  0)) - MAX(IO_RET_BYTES)) / MAX(IO_ELIG_BYTES),  2))) END),  CASE WHEN :B33 = 1 AND SUM(PI.ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,	XMLATTRIBUTES( TO_CHAR(MIN(PI.ACTIVITY_START),	:B12 ) AS &quot;start_time&quot;,  TO_CHAR(MAX(PI.ACTIVITY_END),  :B12 ) AS &quot;end_time&quot;,  ROUND((MAX(PI.ACTIVITY_END) - MIN(PI.ACTIVITY_START)) * 3600 * 24) + 1 AS &quot;duration&quot;,  SUM(PI.ACTIVITY_COUNT) AS &quot;count&quot;,  SUM(PI.IMQ_COUNT) AS &quot;imq_count&quot;,  SUM(PI.WAIT_COUNT) AS &quot;wait_count&quot;,  SUM(PI.CPU_COUNT) AS &quot;cpu_count&quot;,  SUM(PI.OTHER_SQL_COUNT) AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  XMLAGG( NVL2(ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( PI.ACTIVITY_TYPE AS &quot;class&quot;,  PI.EVENT_NAME AS &quot;event&quot;),  ACTIVITY_COUNT),  NULL) ORDER BY PI.ACTIVITY_TYPE,	PI.EVENT_NAME)) ELSE NULL END) PX_INSTANCES_XML FROM (SELECT MO.INST_ID,  ASH.ACTIVITY_TYPE,  ASH.EVENT_NAME,  ASH.ACTIVITY_COUNT,  ASH.IMQ_COUNT,  ASH.WAIT_COUNT,  ASH.CPU_COUNT,  ASH.OTHER_SQL_COUNT,  ASH.ACTIVITY_START,	ASH.ACTIVITY_END,  MO.ELAPSED_TIME,  MO.QUEUING_TIME,  MO.CPU_TIME,  MO.APPLICATION_WAIT_TIME,	MO.CONCURRENCY_WAIT_TIME,  MO.CLUSTER_WAIT_TIME,  MO.USER_IO_WAIT_TIME,  MO.PLSQL_EXEC_TIME,  MO.JAVA_EXEC_TIME,  MO.OTHER_WAIT_TIME,  MO.FETCHES,  MO.BUFFER_GETS,  MO.IO_INTER_BYTES,  MO.IO_BYTES,  MO.READ_REQS,  MO.READ_BYTES,  MO.WRITE_REQS,  MO.WRITE_BYTES,  MO.IO_REQS,  MO.IO_UNC_BYTES,  MO.IO_ELIG_BYTES,  MO.IO_RET_BYTES FROM (SELECT MO0.INST_ID,  SUM(MO0.ELAPSED_TIME) ELAPSED_TIME,  SUM(MO0.QUEUING_TIME) QUEUING_TIME,  SUM(MO0.CPU_TIME) CPU_TIME,  SUM(MO0.FETCHES) FETCHES,  SUM(MO0.BUFFER_GETS) BUFFER_GETS,  SUM(MO0.IO_INTER_BYTES) IO_INTER_BYTES,  SUM(MO0.IO_BYTES) IO_BYTES,  SUM(MO0.READ_REQS) READ_REQS,  SUM(MO0.READ_BYTES) READ_BYTES,  SUM(MO0.WRITE_REQS) WRITE_REQS,	SUM(MO0.WRITE_BYTES) WRITE_BYTES,  SUM(MO0.IO_REQS) IO_REQS,  SUM(MO0.IO_UNC_BYTES) IO_UNC_BYTES,  SUM(MO0.IO_ELIG_BYTES) IO_ELIG_BYTES,  SUM(MO0.IO_RET_BYTES) IO_RET_BYTES,  SUM(MO0.APPLICATION_WAIT_TIME) APPLICATION_WAIT_TIME,  SUM(MO0.CONCURRENCY_WAIT_TIME) CONCURRENCY_WAIT_TIME,  SUM(MO0.CLUSTER_WAIT_TIME) CLUSTER_WAIT_TIME,  SUM(MO0.USER_IO_WAIT_TIME) USER_IO_WAIT_TIME,  SUM(MO0.PLSQL_EXEC_TIME) PLSQL_EXEC_TIME,  SUM(MO0.JAVA_EXEC_TIME) JAVA_EXEC_TIME,  SUM(MO0.OTHER_WAIT_TIME) OTHER_WAIT_TIME FROM MONITOR_DATA MO0 GROUP BY MO0.INST_ID) MO,  (SELECT ASH0.INST_ID,	ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME,  SUM(ASH0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(ASH0.IMQ_COUNT) IMQ_COUNT,  SUM(ASH0.WAIT_COUNT) WAIT_COUNT,  SUM(ASH0.CPU_COUNT) CPU_COUNT,  SUM(ASH0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(ASH0.ACTIVITY_START) ACTIVITY_START,  MAX(ASH0.ACTIVITY_END) ACTIVITY_END FROM ASH_DATA ASH0 GROUP BY ASH0.INST_ID,	ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME) ASH,  MONITOR_AGG WHERE MO.INST_ID = ASH.INST_ID(+) AND MONITOR_AGG.DIST_INST_COUNT &gt; 0 ) PI GROUP BY PI.INST_ID)PX_INSTANCE) PX_INSTANCES FROM MONITOR_AGG)) ELSE NULL END,  XPLAN_XML,  CASE WHEN :B43 = 1 THEN (SELECT XMLELEMENT( &quot;plan_monitor&quot;,  XMLATTRIBUTES(MAX(PLI.MAX_LINE_ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PLI.OVERALL_MAX_IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PLI.OVERALL_MAX_IO_BYTES) AS &quot;max_io_bytes&quot;,  MAX(PLI.MAX_LINE_IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PLI.MAX_LINE_CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PLI.MAX_LINE_WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PLI.MAX_LINE_OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;),  XMLAGG( XMLELEMENT( &quot;operation&quot;,  XMLATTRIBUTES( PLI.PLAN_LINE_ID AS &quot;id&quot;,  PLI.PARENT_ID AS &quot;parent_id&quot;,  PLI.OPERATION AS &quot;name&quot;,  PLI.OPTIONS AS &quot;options&quot;,	PLI.DEPTH AS &quot;depth&quot;,  PLI.POSITION AS &quot;position&quot;,	PLI.INACTIVE AS &quot;skp&quot;,  PLI.PX_TYPE AS &quot;px_type&quot;),	NVL2(PLI.OBJECT_NAME,  XMLELEMENT( &quot;object&quot;,	XMLATTRIBUTES(PLI.OBJECT_TYPE AS &quot;type&quot;),  XMLFOREST(PLI.OBJECT_OWNER AS &quot;owner&quot;),	XMLFOREST(PLI.OBJECT_NAME AS &quot;name&quot;)),  NULL),  XMLFOREST(PLI.PARTITION_START AS &quot;partition_start&quot;,  PLI.PARTITION_STOP AS &quot;partition_stop&quot;),  CASE WHEN PLI.CARDINALITY IS NULL AND PLI.BYTES IS NULL AND PLI.COST IS NULL AND PLI.TEMP_SPACE IS NULL AND PLI.TIME IS NULL THEN NULL ELSE XMLELEMENT( &quot;optimizer&quot;,  NULL,  NVL2(PLI.CARDINALITY,  XMLFOREST(PLI.CARDINALITY AS &quot;cardinality&quot;),  NULL),  NVL2(PLI.BYTES,  XMLFOREST(PLI.BYTES AS &quot;bytes&quot;),	NULL),	NVL2(PLI.COST,	XMLFOREST(PLI.COST AS &quot;cost&quot;),  NULL),  NVL2(PLI.CPU_COST,  XMLFOREST(PLI.CPU_COST AS &quot;cpu_cost&quot;),	NULL),	NVL2(PLI.IO_COST,  XMLFOREST(PLI.IO_COST AS &quot;io_cost&quot;),  NULL),  NVL2(PLI.TEMP_SPACE,  XMLFOREST(PLI.TEMP_SPACE AS &quot;temp&quot;),  NULL),  NVL2(PLI.TIME,  XMLFOREST(PLI.TIME AS &quot;time&quot;),  NULL)) END,	XMLELEMENT( &quot;stats&quot;,	XMLATTRIBUTES('plan_monitor' AS &quot;type&quot;),  NVL2(PLI.FIR
ST_MOVE_TIME,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('first_active' AS &quot;name&quot;),  TO_CHAR(FIRST_MOVE_TIME,  :B12 )),  NULL),  CASE WHEN PLI.FIRST_MOVE_TIME != PLI.FIRST_CHANGE_TIME THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('first_row' AS &quot;name&quot;),  TO_CHAR(FIRST_CHANGE_TIME,  :B12 )) ELSE NULL END,  NVL2(PLI.LAST_MOVE_TIME,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('last_active' AS &quot;name&quot;),  TO_CHAR(LAST_MOVE_TIME,  :B12 )),  NULL),  CASE WHEN (PLI.FIRST_MOVE_TIME IS NULL OR PLI.LAST_MOVE_TIME IS NULL) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('duration' AS &quot;name&quot;),  ROUND((LAST_MOVE_TIME - FIRST_MOVE_TIME) * 3600 * 24)+1) END,	CASE WHEN (PLI.OVERALL_LAST_MOVE_TIME IS NULL OR PLI.LAST_MOVE_TIME IS NULL) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('from_most_recent' AS &quot;name&quot;),  ROUND((PLI.OVERALL_LAST_MOVE_TIME - PLI.LAST_MOVE_TIME) * 3600 * 24)) END,  NVL2(PLI.LAST_MOVE_TIME,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'from_sql_exec_start' AS &quot;name&quot;),  ROUND( (FIRST_MOVE_TIME - :B8 ) * 3600*24)),  NULL),  NVL2(PLI.PERCENT_COMPLETE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('percent_complete' AS &quot;name&quot;),  PLI.PERCENT_COMPLETE),  NULL),  NVL2(PLI.TIME_REMAINING,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('time_left' AS &quot;name&quot;),  PLI.TIME_REMAINING),  NULL),  CASE WHEN PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('starts' AS &quot;name&quot;),  PLI.STARTS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'max_starts' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_STARTS/1000000),  10000),	NULL) AS &quot;iid&quot;,  MOD(MAX_STARTS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_STARTS/10000000000)) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('dop' AS
&quot;name&quot;),  PLI.DOP) ELSE NULL END,  CASE WHEN NEED_ROWS IS NOT NULL AND PLI.FIRST_MOVE_TIME IS NOT NULL THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cardinality' AS &quot;name&quot;),	PLI.OUTPUT_ROWS) ELSE NULL END,  CASE WHEN PLI.NEED_ROWS IS NOT NULL AND PLI.DOP &gt; 0 AND PLI.MAX_OUTPUT_ROWS IS NOT NULL AND (PLI.FIRST_MOVE_TIME IS NOT NULL) THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_card' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_OUTPUT_ROWS/1000000),	10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_OUTPUT_ROWS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_OUTPUT_ROWS/10000000000)) ELSE NULL END,  CASE WHEN PLI.MEM &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('memory' AS &quot;name&quot;),  PLI.MEM) ELSE NULL END,  CASE WHEN PLI.MAX_MEM &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('max_memory' AS &quot;name&quot;),	PLI.MAX_MEM) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MIN_MAX_MEM IS NOT NULL AND PLI.MAX_MEM
&gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'min_max_mem' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MIN_MAX_MEM/1000000),  10000),  NULL) AS &quot;iid&quot;,	MOD(MIN_MAX_MEM,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MIN_MAX_MEM/10000000000)) ELSE NULL END,  CASE WHEN PLI.TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('temp' AS &quot;name&quot;),  PLI.TEMP) ELSE NULL END,  CASE WHEN PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('max_temp' AS &quot;name&quot;),  PLI.MAX_TEMP) ELSE NULL END,  CASE WHEN PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('spill_count' AS &quot;name&quot;),  PLI.SPILL_COUNT) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_MAX_TEMP IS NOT NULL AND PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_max_temp' AS &quot;name&quot;,  DECODE(:B68 ,	'Y',  MOD(TRUNC(MAX_MAX_TEMP/1000000),	10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_MAX_TEMP,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_MAX_TEMP/10000000000)) ELSE NULL END,  CASE WHEN PLI.READ_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  PLI.READ_REQS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_READ_REQS IS NOT NULL AND PLI.READ_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_read_reqs' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',	MOD(TRUNC(PLI.MAX_READ_REQS/1000000),  10000),	NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_READ_REQS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_READ_REQS/10000000000)) ELSE NULL END,	CASE WHEN PLI.READ_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  PLI.READ_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_READ_BYTES IS NOT NULL AND PLI.READ_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'max_read_bytes' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_READ_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_READ_BYTES,	1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_READ_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.WRITE_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  PLI.WRITE_REQS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_WRITE_REQS IS NOT NULL AND PLI.WRITE_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_write_reqs' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_WRITE_REQS/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_WRITE_REQS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_WRITE_REQS/10000000000)) ELSE NULL END,  CASE WHEN PLI.WRITE_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  PLI.WRITE_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_WRITE_BYTES IS NOT NULL AND PLI.WRITE_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_write_bytes' AS &quot;name&quot;,	DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_WRITE_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_WRITE_BYTES,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_WRITE_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('io_inter_bytes' AS &quot;name&quot;),  PLI.IO_INTER_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_io_inter_bytes' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_IO_INTER_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_IO_INTER_BYTES, 1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_IO_INTER_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(PLI.IO_BYTES / DECODE(PLI.IO_INTER_BYTES,  0,  1,  PLI.IO_INTER_BYTES),  2)) ELSE NULL END),	NVL2(STAT_GID,	XMLELEMENT( &quot;rwsstats&quot;,  XMLATTRIBUTES( PLI.STAT_GID AS &quot;group_id&quot;),  DECODE(GID_ROWNUM,  1,  (SELECT XMLELEMENT( &quot;metadata&quot;,  NULL,  XMLAGG( XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( ROWNUM AS &quot;id&quot;,  NAME AS &quot;name&quot;,	DESCRIPTION AS &quot;desc&quot;,  TYPE AS &quot;type&quot;,  DECODE(FLAGS,  0,	NULL,  FLAGS) AS &quot;flags&quot;),  NULL) ORDER BY ID)) FROM V$SQL_MONITOR_STATNAME WHERE GROUP_ID = PLI.STAT_GID),  NULL),  NVL2(STAT1_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(1 AS &quot;id&quot;),  STAT1_VALUE),  NULL),  NVL2(STAT2_VALUE,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(2 AS &quot;id&quot;),  STAT2_VALUE),  NULL),  NVL2(STAT3_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(3 AS &quot;id&quot;),  STAT3_VALUE),  NULL),  NVL2(STAT4_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(4 AS &quot;id&quot;),	STAT4_VALUE),  NULL),  NVL2(STAT5_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(5 AS &quot;id&quot;),  STAT5_VALUE),  NULL),  NVL2(STAT6_VALUE,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(6 AS &quot;id&quot;),  STAT6_VALUE),  NULL),  NVL2(STAT7_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(7 AS &quot;id&quot;),  STAT7_VALUE),  NULL),  NVL2(STAT8_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(8 AS &quot;id&quot;),	STAT8_VALUE),  NULL),  NVL2(STAT9_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(9 AS &quot;id&quot;),  STAT9_VALUE),  NULL),  NVL2(STAT10_VALUE,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES(10 AS &quot;id&quot;),  STAT10_VALUE),  NULL)),  NULL),  CASE WHEN PLI.LINE_ACTIVITY_COUNT &gt; 0 AND :B33 = 1 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( TO_CHAR(PLI.LINE_ACTIVITY_START,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR(PLI.LINE_ACTIVITY_END,  :B12 ) AS &quot;end_time&quot;,  ROUND((PLI.LINE_ACTIVITY_END - PLI.LINE_ACTIVITY_START) * 3600*24) + 1 AS &quot;duration&quot;,  PLI.LINE_ACTIVITY_COUNT AS &quot;count&quot;,  PLI.LINE_IMQ_COUNT AS &quot;imq_count&quot;,	PLI.LINE_WAIT_COUNT AS &quot;wait_count&quot;,	PLI.LINE_CPU_COUNT AS &quot;cpu_count&quot;,  PLI.LINE_OTHER_SQL_COUNT AS &quot;other_sql_count&quot;,	:B40 AS &quot;cpu_cores&quot;,	:B39 AS &quot;hyperthread&quot;),  PLI.ACTIVITY_TOTAL,	PLI.PLAN_ACTIVITY_HISTO) ELSE NULL END) ORDER BY PLI.PLAN_LINE_ID) ) FROM (SELECT AT.MAX_LINE_ACTIVITY_COUNT,  PM.OVERALL_MAX_IO_REQS,	PM.OVERALL_MAX_IO_BYTES,  AT.MAX_LINE_IMQ_COUNT,  AT.MAX_LINE_CPU_COUNT,  AT.MAX_LINE_WAIT_COUNT,  AT.LINE_OTHER_SQL_COUNT,  AT.MAX_LINE_OTHER_SQL_COUNT,  PM.PLAN_LINE_ID,  PM.PARENT_ID,  PM.OPERATION,  PM.OPTIONS,	PM.DEPTH,  PM.POSITION,  PM.INACTIVE,  CASE WHEN PM.OPERATION = 'PX COORDINATOR' AND :B23 = 'Y' AND (PM.PX_SERVER_SET IS NOT NULL OR AH.PX_SERVER_SET IS NOT NULL) THEN 'QC' WHEN PM.PX_SERVER_SET IS NOT NULL THEN TO_CHAR(PM.PX_SERVER_SET) WHEN AH.PX_SERVER_SET IS NOT NULL THEN TO_CHAR(AH.PX_SERVER_SET) WHEN (:B23 = 'N' OR (PM.LAST_CHANGE_TIME IS NULL AND AT.LINE_ACTIVITY_END IS NULL)) THEN NULL ELSE 'QC' END PX_TYPE,  PM.FIRST_CHANGE_TIME,  AT.LINE_ACTIVITY_START,  PM.LAST_CHANGE_TIME,  PM.OVERALL_LAST_CHANGE_TIME,  AT.LINE_ACTIVITY_END,	AT.OVERALL_LINE_ACTIVITY_END,  LEAST(NVL(AT.LINE_ACTIVITY_START,  PM.FIRST_CHANGE_TIME),  NVL(PM.FIRST_CHANGE_TIME,  AT.LINE_ACTIVITY_START)) FIRST_MOVE_TIME,	GREATEST(NVL(AT.LINE_ACTIVITY_END,  PM.LAST_CHANGE_TIME),  NVL(PM.LAST_CHANGE_TIME,  AT.LINE_ACTIVITY_END)) LAST_MOVE_TIME,  GREATEST(NVL(AT.OVERALL_LINE_ACTIVITY_END,  PM.OVERALL_LAST_CHANGE_TIME),	NVL(PM.OVERALL_LAST_CHANGE_TIME,  AT.OVERALL_LINE_ACTIVITY_END)) OVERALL_LAST_MOVE_TIME,  CASE WHEN PM.STARTS IS NOT NULL AND PM.STARTS &gt; 0 THEN 1 ELSE 0 END HAS_EXECUTED,	PM.OBJECT_NAME,  PM.OBJECT_TYPE,  PM.OBJECT_OWNER,  PM.PARTITION_START,  PM.PARTITION_STOP,  PM.CARDINAL
ITY,  PM.BYTES,  PM.COST,  PM.TEMP_SPACE,  PM.TIME,  PM.CPU_COST,  PM.IO_COST,	LO.PERCENT_COMPLETE,  LO.TIME_REMAINING,  PM.STARTS,  PM.DOP,  PM.MAX_STARTS,  PM.OUTPUT_ROWS,	PM.NEED_ROWS,  PM.MAX_OUTPUT_ROWS,  PM.MEM,  PM.MAX_MEM,  PM.MIN_MAX_MEM,  PM.TEMP,  PM.MAX_TEMP,  PM.SPILL_COUNT,  PM.MAX_MAX_TEMP,  PM.READ_REQS,  PM.MAX_READ_REQS,	PM.READ_BYTES,	PM.MAX_READ_BYTES,  PM.WRITE_REQS,  PM.MAX_WRITE_REQS,	PM.WRITE_BYTES,  PM.MAX_WRITE_BYTES,  PM.IO_INTER_BYTES,  PM.IO_BYTES,	PM.MAX_IO_INTER_BYTES,	AT.LINE_ACTIVITY_COUNT,  AT.LINE_IMQ_COUNT,  AT.LINE_WAIT_COUNT,  AT.LINE_CPU_COUNT,  AT.ACTIVITY_TOTAL,  AH.PLAN_ACTIVITY_HISTO,  PM.STAT_GID,  PM.GID_ROWNUM,  PM.STAT1_VALUE,  PM.STAT2_VALUE,  PM.STAT3_VALUE,  PM.STAT4_VALUE,  PM.STAT5_VALUE,  PM.STAT6_VALUE,  PM.STAT7_VALUE,	PM.STAT8_VALUE,  PM.STAT9_VALUE,  PM.STAT10_VALUE FROM (SELECT AT0.*,  MAX(LINE_ACTIVITY_END) OVER() OVERALL_LINE_ACTIVITY_END,  MAX(LINE_ACTIVITY_COUNT) OVER() MAX_LINE_ACTIVITY_COUNT,  MAX(LINE_IMQ_COUNT) OVER() MAX_LINE_IMQ_COUNT,  MAX(LINE_CPU_COUNT) OVER() MAX_LINE_CPU_COUNT,  MAX(LINE_WAIT_COUNT) OVER() MAX_LINE_WAIT_COUNT,  MAX(LINE_OTHER_SQL_COUNT) OVER() MAX_LINE_OTHER_SQL_COUNT FROM (SELECT AD1.PLAN_LINE_ID,  MIN(AD1.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD1.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) LINE_ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) LINE_IMQ_COUNT,  SUM(AD1.WAIT_COUNT) LINE_WAIT_COUNT,  SUM(AD1.OTHER_SQL_COUNT) LINE_OTHER_SQL_COUNT,  SUM(AD1.CPU_COUNT) LINE_CPU_COUNT,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG(XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME) ACTIVITY_TOTAL FROM (SELECT AD0.PLAN_LINE_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  MIN(AD0.ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD0.ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MAX(AD0.DFO_MOST_ACTIVE_IID) DFO_MOST_ACTIVE_IID,  MAX(AD0.DFO_MOST_ACTIVE_SID) DFO_MOST_ACTIVE_SID,  SUM(AD0.DFO_MOST_ACTIVE_COUNT) DFO_MOST_ACTIVE_COUNT FROM ASH_DATA AD0 WHERE AD0.PLAN_LINE_ID IS NOT NULL GROUP BY AD0.PLAN_LINE_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1 GROUP BY AD1.PLAN_LINE_ID) AT0) AT,	(SELECT AD2.PLAN_LINE_ID,  MIN(AD2.PX_SERVER_SET) PX_SERVER_SET,  MIN(AD2.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD2.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD2.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD2.IMQ_COUNT) IMQ_COUNT,  SUM(AD2.WAIT_COUNT) WAIT_COUNT,  SUM(AD2.CPU_COUNT) CPU_COUNT,  SUM(AD2.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  CASE WHEN :B29 = 1 AND SUM(AD2.ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_histogram&quot;,  XMLATTRIBUTES( :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR( :B20 ,	:B12 ) AS &quot;start_time&quot;,  TO_CHAR(:B22 ,  :B12 ) AS &quot;end_time&quot;,  ROUND((:B22 -:B20 ) *3600*24) + 1 AS &quot;duration&quot;),  XMLAGG(XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),	AD2.ACTIVITY_BUCKET) ORDER BY AD2.BUCKET_NUM)) ELSE NULL END PLAN_ACTIVITY_HISTO FROM (SELECT AD1.PLAN_LINE_ID,  AD1.BUCKET_NUM,  MIN(AD1.PX_SERVER_SET) PX_SERVER_SET,  MIN(AD1.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD1.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  MIN(AD1.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD1.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) IMQ_COUNT,  SUM(AD1.WAIT_COUNT) WAIT_COUNT,  SUM(AD1.CPU_COUNT) CPU_COUNT,  SUM(AD1.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG(NVL2(AD1.ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,  AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT),  NULL) ORDER BY AD1.ACTIVITY_TYPE,  AD1.EVENT_NAME) ACTIVITY_BUCKET FROM (SELECT AD0.PLAN_LINE_ID,  AD0.PLAN_ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  MIN(NVL2(AD0.ACTIVITY_START,  AD0.PX_SERVER_SET,  NULL)) PX_SERVER_SET,  MIN(AD0.ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD0.ACTIVITY_END) LINE_ACTIVITY_END,  MIN(AD0.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD0.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT FROM ASH_DATA AD0 GROUP BY AD0.PLAN_LINE_ID,  AD0.PLAN_ACTIVITY_BUCKET_NUM,  AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME) AD1 GROUP BY AD1.PLAN_LINE_ID,	AD1.BUCKET_NUM) AD2 GROUP BY AD2.PLAN_LINE_ID) AH,  (SELECT LO.SQL_PLAN_LINE_ID PLAN_LINE_ID,  DECODE(SUM(LO.TOTALWORK),  0,  NULL,  ROUND(SUM(LO.SOFAR)*100/SUM(LO.TOTALWORK))) PERCENT_COMPLETE,  MAX(LO.TIME_REMAINING) TIME_REMAINING FROM GV$SESSION_LONGOPS LO,  MONITOR_DATA MO WHERE (:B49 = 'Y' OR :B71 = 'DONE (ERROR)') AND LO.SQL_ID = :B9 AND LO.SQL_EXEC_START = :B8 AND LO.SQL_EXEC_ID = :B7 AND LO.INST_ID = MO.INST_ID AND LO.SID = MO.SID GROUP BY LO.SQL_PLAN_LINE_ID) LO,  (SELECT PM0.*,  CASE WHEN PM0.STARTS IS NULL OR PM0.STARTS = 0 OR PM0.OUTPUT_ROWS IS NULL THEN NULL ELSE 1 END NEED_ROWS,  ROW_NUMBER() OVER(PARTITION BY PM0.STAT_GID ORDER BY PM0.PLAN_LINE_ID ) GID_ROWNUM,  MAX(LAST_CHANGE_TIME) OVER() OVERALL_LAST_CHANGE_TIME,  MAX(MAX_IO_REQS) OVER() OVERALL_MAX_IO_REQS,  MAX(MAX_IO_BYTES) OVER() OVERALL_MAX_IO_BYTES FROM (SELECT /*+ leading(mo) use_hash(plm) */ PLM.PLAN_LINE_ID PLAN_LINE_ID,  PLM.PLAN_OPERATION OPERATION,	PLM.PLAN_OPTIONS OPTIONS,  MAX(PLM.PLAN_PARENT_ID) PARENT_ID,  MAX(PLM.PLAN_DEPTH) DEPTH,  MAX(PLM.PLAN_POSITION) POSITION,  MAX(PLM.PLAN_OPERATION_INACTIVE) INACTIVE,  MAX(PLM.PLAN_OBJECT_OWNER) OBJECT_OWNER,  MAX(PLM.PLAN_OBJECT_NAME) OBJECT_NAME,  MAX(PLM.PLAN_OBJECT_TYPE) OBJECT_TYPE,  MAX(PLM.PLAN_COST) COST,  MAX(PLM.PLAN_CARDINALITY) CARDINALITY,  MAX(PLM.PLAN_BYTES) BYTES,  MAX(PLM.PLAN_CPU_COST) CPU_COST,  MAX(PLM.PLAN_IO_COST) IO_COST,  MAX(PLM.PLAN_TEMP_SPACE) TEMP_SPACE,  MAX(PLM.PLAN_TIME) TIME,  MAX(PLM.PLAN_PARTITION_START) PARTITION_START,  MAX(PLM.PLAN_PARTITION_STOP) PARTITION_STOP,  MIN(PLM.FIRST_CHANGE_TIME) FIRST_CHANGE_TIME,	MAX(PLM.LAST_CHANGE_TIME) LAST_CHANGE_TIME,  MIN(PLM.LAST_CHANGE_TIME) MIN_LAST_CHANGE_TIME,  MIN(NVL2(PLM.FIRST_CHANGE_TIME,  MO.PX_SERVER_SET,  NULL)) PX_SERVER_SET,  COUNT(CASE WHEN PLM.PAR IS NOT NULL AND PLM.STARTS IS NOT NULL AND PLM.STARTS &gt; 0 AND PLM.PLAN_LINE_ID != 0 AND PLM.PLAN_OPERATION != 'PX COORDINATOR' THEN 1 ELSE NULL END) DOP,  SUM(PLM.STARTS) STARTS,	MAX(NVL2(PAR,  PLM.STARTS * 10000000000 + PLM.ES,  NULL)) MAX_STARTS,  SUM(PLM.OUTPUT_ROWS) OUTPUT_ROWS,  MAX(NVL2(PAR,  PLM.OUTPUT_ROWS * 10000000000 +PLM.ES,  NULL)) MAX_OUTPUT_ROWS,  SUM(PLM.WORKAREA_MEM) MEM,  SUM(PLM.WORKAREA_MAX_MEM) MAX_MEM,  MIN(NVL2(PAR,  PLM.WORKAREA_MAX_MEM * 10000000000 + PLM.ES,  NULL)) MIN_MAX_MEM,  SUM(PLM.WORKAREA_TEMPSEG) TEMP,  SUM(PLM.WORKAREA_MAX_TEMPSEG) MAX_TEMP,  MAX(NVL2(PAR,  PLM.WORKAREA_MAX_TEMPSEG * 10000000000 + PLM.ES,  NULL)) MAX_MAX_TEMP,  COUNT(PLM.WORKAREA_MAX_TEMPSEG) SPILL_COUNT,  SUM(PLM.PHYSICAL_READ_REQUESTS) READ_REQS,  MAX(NVL2(PAR,  PLM.PHYSICAL_READ_REQUESTS * 10000000000 + PLM.ES,  NULL)) MAX_READ_REQS,  SUM(PLM.PHYSICAL_READ_BYTES) READ_BYTES,  MAX(NVL2(PAR,  PLM.PHYSICAL_READ_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_READ_BYTES,  SUM(PLM.PHYSICAL_WRITE_REQUESTS) WRITE_REQS,  MAX(NVL2(PAR,	PLM.PHYSICAL_WRITE_REQUESTS * 10000000000 + PLM.ES,  NULL)) MAX_WRITE_REQS,  SUM(PLM.PHYSICAL_WRITE_BYTES) WRITE_BYTES,  MAX(NVL2(PAR,	PLM.PHYSICAL_WRITE_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_WRITE_BYTES,  NVL(SUM(PLM.PHYSICAL_READ_BYTES),  0) + NVL(SUM(PLM.PHYSICAL_WRITE_BYTES),  0) IO_BYTES,  SUM(NVL(PLM.PHYSICA
L_READ_REQUESTS,  0) + NVL(PLM.PHYSICAL_WRITE_REQUESTS,  0)) MAX_IO_REQS,  SUM(NVL(PLM.PHYSICAL_READ_BYTES,  0) + NVL(PLM.PHYSICAL_WRITE_BYTES,  0)) MAX_IO_BYTES,  SUM(PLM.IO_INTERCONNECT_BYTES) IO_INTER_BYTES,  MAX(NVL2(PAR,  PLM.IO_INTERCONNECT_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_IO_INTER_BYTES,  MAX(OTHERSTAT_GROUP_ID) STAT_GID,  NVL(DECODE(MAX(OTHERSTAT_1_TYPE),	3,  MAX(OTHERSTAT_1_VALUE),  4,  MAX(OTHERSTAT_1_VALUE),  6,  MIN(OTHERSTAT_1_VALUE),  7,  MIN(OTHERSTAT_1_VALUE),  NULL),  SUM(DECODE(OTHERSTAT_1_TYPE,  1,  OTHERSTAT_1_VALUE,  2,  OTHERSTAT_1_VALUE,  NULL))) STAT1_VALUE,	NVL(MOD((DECODE(MAX(OTHERSTAT_2_TYPE),	3,  MAX(OTHERSTAT_2_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),	4,  MAX(RMAX1 + OTHERSTAT_2_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_2_VALUE),  NULL),  6,  MIN(OTHERSTAT_2_VALUE),  NULL)),	10000000000000000),  SUM(DECODE(OTHERSTAT_2_TYPE,  1,  OTHERSTAT_2_VALUE,  2,  OTHERSTAT_2_VALUE,  NULL))) STAT2_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_3_TYPE),  3,  MAX(OTHERSTAT_3_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_3_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_3_VALUE),  NULL),  6,  MIN(OTHERSTAT_3_VALUE),	NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_3_TYPE,  1,	OTHERSTAT_3_VALUE,  2,	OTHERSTAT_3_VALUE,  NULL))) STAT3_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_4_TYPE),  3,  MAX(OTHERSTAT_4_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_4_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_4_VALUE),  NULL),  6,	MIN(OTHERSTAT_4_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_4_TYPE,  1,  OTHERSTAT_4_VALUE,  2,  OTHERSTAT_4_VALUE,  NULL))) STAT4_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_5_TYPE),  3,  MAX(OTHERSTAT_5_VALUE),	5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_5_VALUE),	7,  MIN(RMAX1 + OTHERSTAT_5_VALUE),  NULL),  6,  MIN(OTHERSTAT_5_VALUE),  NULL)),  10000000000000000),	SUM(DECODE(OTHERSTAT_5_TYPE,  1,  OTHERSTAT_5_VALUE,  2,  OTHERSTAT_5_VALUE,  NULL))) STAT5_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_6_TYPE),  3,	MAX(OTHERSTAT_6_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,	MAX(RMAX1 + OTHERSTAT_6_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_6_VALUE),  NULL),  6,  MIN(OTHERSTAT_6_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_6_TYPE,  1,  OTHERSTAT_6_VALUE,  2,  OTHERSTAT_6_VALUE,  NULL))) STAT6_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_7_TYPE),  3,  MAX(OTHERSTAT_7_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_7_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_7_VALUE),  NULL),  6,  MIN(OTHERSTAT_7_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_7_TYPE,	1,  OTHERSTAT_7_VALUE,	2,  OTHERSTAT_7_VALUE,	NULL))) STAT7_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_8_TYPE),  3,  MAX(OTHERSTAT_8_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_8_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_8_VALUE),	NULL),	6,  MIN(OTHERSTAT_8_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_8_TYPE,  1,  OTHERSTAT_8_VALUE,  2,  OTHERSTAT_8_VALUE,  NULL))) STAT8_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_9_TYPE),  3,  MAX(OTHERSTAT_9_VALUE),  5,	DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_9_VALUE),  7,	MIN(RMAX1 + OTHERSTAT_9_VALUE),  NULL),  6,  MIN(OTHERSTAT_9_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_9_TYPE,  1,  OTHERSTAT_9_VALUE,  2,  OTHERSTAT_9_VALUE,  NULL))) STAT9_VALUE,	NVL(MOD((DECODE(MAX(OTHERSTAT_10_TYPE),  3,  MAX(OTHERSTAT_10_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_10_VALUE),	7,  MIN(RMAX1 + OTHERSTAT_10_VALUE),  NULL),  6,  MIN(OTHERSTAT_10_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_10_TYPE,  1,  OTHERSTAT_10_VALUE,  2,  OTHERSTAT_10_VALUE,  NULL))) STAT10_VALUE FROM (SELECT A.*,  OTHERSTAT_1_VALUE * 10000000000000000 RMAX1,  A.INST_ID * 1000000 + A.SID ES,  DECODE(A.PROCESS_NAME,  'ora',  NULL,  1) PAR FROM GV$ALL_SQL_PLAN_MONITOR A) PLM,  MONITOR_DATA MO WHERE PLM.SQL_ID = :B9 AND PLM.SQL_EXEC_START = :B8 AND PLM.SQL_EXEC_ID = :B7 AND PLM.INST_ID = MO.INST_ID AND PLM.INST_ID BETWEEN :B11 AND :B10 AND PLM.KEY = MO.KEY GROUP BY PLM.PLAN_LINE_ID,	PLM.PLAN_OPERATION,  PLM.PLAN_OPTIONS) PM0) PM WHERE AH.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND AT.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND LO.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND (:B21 IS NULL OR PM.PLAN_LINE_ID = :B21 )) PLI) ELSE NULL END,	CASE WHEN :B42 = 1 THEN DBMS_SQLTUNE.BUILD_STASH_XML( SESSION_ID=&gt;:B19 ,  SESSION_SERIAL=&gt;:B18 ,	SESSION_INST_ID=&gt;:B17 ,  PX_MODE=&gt;'yes',	START_TIME=&gt;:B20 ,  END_TIME=&gt;:B22 ,  MISSING_SECONDS=&gt; :B41 ,  INSTANCE_LOW_FILTER=&gt;:B11 ,  INSTANCE_HIGH_FILTER=&gt;:B10 ,  BUCKET_MAX_COUNT=&gt;NULL,  BUCKET_INTERVAL=&gt;:B26 ,  REPORT_LEVEL=&gt;'typical',  CPU_CORES=&gt;:B40 ,  IS_HYPER=&gt;:B39 ) ELSE NULL END),  (CASE WHEN :B38 = 1 THEN (SELECT XMLELEMENT( &quot;skewed_sessions&quot;,  XMLATTRIBUTES( DECODE(MIN(INST_ID),  NULL,  :B17 ,  MIN(INST_ID)) AS &quot;min_iid&quot;,	DECODE(MAX(INST_ID),  NULL,  :B17 ,  MAX(INST_ID)) AS
&quot;max_iid&quot;),  XMLAGG( XMLELEMENT( &quot;s&quot;,  XMLATTRIBUTES( INST_ID AS &quot;i&quot;),  SESSION_ID) ORDER BY INST_ID,  SESSION_ID)) FROM (SELECT SESS.* FROM (SELECT DECODE(AD.DFO_MOST_ACTIVE_IID,  :B17 ,  NULL,  AD.DFO_MOST_ACTIVE_IID) INST_ID,  AD.DFO_MOST_ACTIVE_SID SESSION_ID FROM ASH_DATA AD WHERE AD.DFO_MOST_ACTIVE_COUNT IS NOT NULL GROUP BY AD.DFO_MOST_ACTIVE_IID,  AD.DFO_MOST_ACTIVE_SID ORDER BY MAX(AD.DFO_MOST_ACTIVE_COUNT) DESC) SESS WHERE ROWNUM &lt;= 100)) ELSE NULL END),  (CASE WHEN :B37 = 1 THEN (SELECT XMLELEMENT( &quot;report_repository_summary&quot;,  CASE WHEN MA.MAX_DBOP_NAME IS NOT NULL THEN XMLELEMENT( &quot;dbop&quot;,  XMLATTRIBUTES('F' AS &quot;detail&quot;,  MA.MAX_DBOP_NAME AS &quot;dbop_name&quot;,  TO_CHAR(MA.MIN_FIRST_REFRESH_TIME,  :B12 ) AS &quot;dbop_exec_start&quot;,  MA.MAX_DBOP_EXEC_ID AS &quot;dbop_exec_id&quot;),  XMLFOREST( MA.MAX_STATUS AS &quot;status&quot;,  TO_CHAR(NVL(MA.MAX_SQL_EXEC_START,  MA.MIN_FIRST_REFRESH_TIME),  :B12 )AS
&quot;first_refresh_time&quot;,  TO_CHAR(MA.MAX_LAST_REFRESH_TIME,  :B12 )AS &quot;last_refresh_time&quot;,  MA.SUM_REFRESH_COUNT AS &quot;refresh_count&quot;,  MA.MAX_INST_ID AS &quot;inst_id&quot;,  MA.MAX_SESSION_ID AS &quot;session_id&quot;,  MA.MAX_SESSION_SERIAL AS &quot;session_serial&quot;,  MA.MAX_USERID AS &quot;user_id&quot;,  MA.MAX_USERNAME AS &quot;user&quot;,  MA.MAX_CON_ID AS &quot;con_id&quot;,	MA.MAX_CON_NAME AS &quot;con_name&quot;,  MA.MAX_MODULE AS &quot;module&quot;,	MA.MAX_ACTION AS &quot;action&quot;,  MA.MAX_SERVICE_NAME AS &quot;service&quot;,  MA.MAX_CLIENT_ID AS &quot;client_id&quot;,  MA.MAX_CLIENT_INFO AS &quot;client_info&quot;,  MA.MAX_PROGRAM AS &quot;program&quot;,  MA.MAX_PL_ENTRY_OID AS &quot;plsql_entry_object_id&quot;,  MA.MAX_PL_ENTRY_PROGID AS &quot;plsql_entry_subprogram_id&quot;,  MA.MAX_PL_OID AS &quot;plsql_object_id&quot;,  MA.MAX_PL_PROGID AS &quot;plsql_subprogram_id&quot;,  MA.MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,	MA.MAX_PX_DOP AS &quot;dop&quot;,  MA.MAX_PX_DOP_INSTANCES AS &quot;instances&quot;),  CASE WHEN MA.MAX_ERROR_NUMBER IS NULL THEN NULL ELSE XMLELEMENT( &quot;error&quot;,  XMLATTRIBUTES(MA.MAX_ERROR_NUMBER AS &quot;number&quot;,  MA.MAX_ERROR_FACILITY AS &quot;facility&quot;),  MA.MAX_ERROR_MESSAGE) END,  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('duration' AS &quot;name&quot;),  GREATEST(ROUND((MA.MAX_LAST_REFRESH_TIME- NVL(MA.MAX_SQL_EXEC_START,  MA.MIN_FIRST_REFRESH_TIME))*86400),  LEAST(MA.SUM_ELAPSED_TIME/1000000,	1),  CEIL(MA.MAX_QUEUING_TIME/1000000))),  DECODE(MA.SUM_ELAPSED_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MA.SUM_ELAPSED_TIME)),  DECODE(MA.MAX_QUEUING_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MA.MAX_QUEUING_TIME)),  DECODE(MA.SUM_CPU_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MA.SUM_CPU_TIME)),	DECODE(MA.SUM_USER_IO_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MA.SUM_USER_IO_WAIT_TIME)),  DECODE(MA.SUM_APPLICATION_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MA.SUM_APPLICATION_WAIT_TIME)),	DECODE(MA.SUM_CONCURRENCY_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MA.SUM_CONCURRENCY_WAIT_TIME)),  DECODE(MA.SUM_CLUSTER_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MA.SUM_CLUSTER_WAIT_TIME)),	DECODE(MA.SUM_PLSQL_EXEC_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MA.SUM_PLSQL_EXEC_TIME)),  DECODE(MA.SUM_JAVA_EXEC_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MA.SUM_JAVA_EXEC_TIME)),  DECODE(MA.SUM_OTHER_WAIT_TIME,  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  MA.SUM_OTHER_WAIT_TIME)),  DECODE(MA.SUM_FETCHES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MA.SUM_FETCHES)),  DECODE(MA.SUM_BUFFER_GETS,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MA.SUM_BUFFER_GETS)),  DECODE(MA.SUM_READ_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MA.SUM_READ_REQS)),	DECODE(MA.SUM_READ_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MA.SUM_READ_BYTES)),  DECODE(MA.SUM_WRITE_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MA.SUM_WRITE_REQS)),  DECODE(MA.SUM_WRITE_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MA.SUM_WRITE_BYTES)),  CASE WHEN MA.SUM_IO_INTER_BYTES IS NULL OR MA.SUM_IO_INTER_BYTES = MA.SUM_IO_BYTES OR MA.SUM_IO_BYTES = 0 OR NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MA.SUM_IO_BYTES / DECODE(MA.SUM_IO_INTER_BYTES,  0,  1,  MA.SUM_IO_INTER_BYTES),  2)) END,	CASE WHEN NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 OR MA.SUM_IO_BYTES = 0 OR MA.SUM_IO_UNC_BYTES = MA.SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100 * (GREATEST(MA.SUM_IO_UNC_BYTES,  MA.SUM_IO_ELIG_BYTES) - MA.SUM_IO_RET_BYTES) / MA.SUM_IO_ELIG_BYTES,  2))) END) ) ELSE XMLELEMENT( &quot;sql&quot;,  XMLATTRIBUTES( MA.MAX_SQL_ID AS &quot;sql_id&quot;,  TO_CHAR(MA.MAX_SQL_EXEC_START,  :B12 ) AS &quot;sql_exec_start&quot;,	MA.MAX_SQL_EXEC_ID AS &quot;sql_exec_id&quot;),  XMLFOREST(MA.MAX_STATUS AS &quot;status&quot;,  SUBSTR(MA.SQLMON_TEXT,  1,  100) AS &quot;sql_text&quot;,  TO_CHAR(MA.MIN_FIRST_REFRESH_TIME,	:B12 ) AS &quot;first_refresh_time&quot;,  TO_CHAR(MA.MAX_LAST_REFRESH_TIME,  :B12 ) AS &quot;last_refresh_time&quot;,	MA.SUM_REFRESH_COUNT AS &quot;refresh_count&quot;,  MA.MAX_INST_ID AS &quot;inst_id&quot;,  MA.MAX_SESSION_ID AS &quot;session_id&quot;,  MA.MAX_SESSION_SERIAL AS &quot;session_serial&quot;,	MA.MAX_USERID AS &quot;user_id&quot;,  MA.MAX_USERNAME AS &quot;user&quot;,  MA.MAX_CON_ID AS &quot;con_id&quot;,  MA.MAX_CON_NAME AS &quot;con_name&quot;,  MA.MAX_MODULE AS &quot;module&quot;,  MA.MAX_ACTION AS &quot;action&quot;,  MA.MAX_SERVICE_NAME AS &quot;service&quot;,  MA.MAX_CLIENT_ID AS &quot;client_id&quot;,  MA.MAX_CLIENT_INFO AS &quot;client_info&quot;,  MA.MAX_PROGRAM AS &quot;program&quot;,  MA.MAX_PLAN_HASH_VALUE AS &quot;plan_hash&quot;,  MA.MAX_PL_ENTRY_OID AS &quot;plsql_entry_object_id&quot;,  MA.MAX_PL_ENTRY_PROGID AS &quot;plsql_entry_subprogram_id&quot;,  MA.MAX_PL_OID AS &quot;plsql_object_id&quot;,	MA.MAX_PL_PROGID AS &quot;plsql_subprogram_id&quot;,  MA.MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,  MA.MAX_PX_DOP AS &quot;dop&quot;,	MA.MAX_PX_DOP_INSTANCES AS &quot;instances&quot;,  MA.SUM_SERVERS_REQUESTED AS &quot;px_servers_requested&quot;,  MA.SUM_SERVERS_ALLOCATED AS &quot;px_servers_allocated&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('duration' AS &quot;name&quot;),	GREATEST(ROUND((MA.MAX_LAST_REFRESH_TIME- MA.MAX_SQL_EXEC_START) * 86400),  LEAST(MA.SUM_ELAPSED_TIME/1000000,	1),  CEIL(MA.MAX_QUEUING_TIME/1000000))),  DECODE(MA.SUM_ELAPSED_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MA.SUM_ELAPSED_TIME)),  DECODE(MA.MAX_QUEUING_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MA.MAX_QUEUING_TIME)),  DECODE(MA.SUM_CPU_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MA.SUM_CPU_TIME)),	DECODE(MA.SUM_USER_IO_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MA.SUM_USER_IO_WAIT_TIME)),  DECODE(MA.SUM_APPLICATION_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MA.SUM_APPLICATION_WAIT_TIME)),	DECODE(MA.SUM_CONCURRENCY_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MA.SUM_CONCURRENCY_WAIT_TIME)),  DECODE(MA.SUM_CLUSTER_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MA.SUM_CLUSTER_WAIT_TIME)),	DECODE(MA.SUM_PLSQL_EXEC_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MA.SUM_PLSQL_EXEC_TIME)),  DECODE(MA.SUM_JAVA_EXEC_TIME
,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MA.SUM_JAVA_EXEC_TIME)),  DECODE(MA.SUM_OTHER_WAIT_TIME,  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  MA.SUM_OTHER_WAIT_TIME)),  DECODE(MA.SUM_FETCHES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MA.SUM_FETCHES)),  DECODE(MA.SUM_BUFFER_GETS,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MA.SUM_BUFFER_GETS)),  DECODE(MA.SUM_READ_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MA.SUM_READ_REQS)),	DECODE(MA.SUM_READ_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MA.SUM_READ_BYTES)),  DECODE(MA.SUM_WRITE_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MA.SUM_WRITE_REQS)),  DECODE(MA.SUM_WRITE_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MA.SUM_WRITE_BYTES)),  DECODE(MA.SUM_IO_UNC_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MA.SUM_IO_UNC_BYTES)),  DECODE(MA.SUM_IO_ELIG_BYTES,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MA.SUM_IO_ELIG_BYTES)),  DECODE(MA.SUM_IO_RET_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  MA.SUM_IO_RET_BYTES)),  CASE WHEN MA.SUM_IO_INTER_BYTES IS NULL OR MA.SUM_IO_INTER_BYTES = MA.SUM_IO_BYTES OR MA.SUM_IO_BYTES = 0 OR NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MA.SUM_IO_BYTES / DECODE(MA.SUM_IO_INTER_BYTES,	0,  1,	MA.SUM_IO_INTER_BYTES),  2)) END,  CASE WHEN NVL(MA.SUM_IO_ELIG_BYTES,	0) = 0 OR MA.SUM_IO_BYTES = 0 OR MA.SUM_IO_UNC_BYTES = MA.SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100 * (GREATEST(MA.SUM_IO_UNC_BYTES,  MA.SUM_IO_ELIG_BYTES) - MA.SUM_IO_RET_BYTES) / MA.SUM_IO_ELIG_BYTES,	2))) END) ) END) FROM MONITOR_AGG MA) ELSE NULL END) FROM (SELECT CASE WHEN V1.XPLAN_XML IS NULL OR V1.XPLAN_XML.EXISTSNODE('/error') &gt; 0 THEN NULL ELSE V1.XPLAN_XML END XPLAN_XML FROM (SELECT CASE WHEN :B36 = 1 THEN DBMS_XPLAN.BUILD_PLAN_XML( TABLE_NAME=&gt;'gv$all_sql_plan',  PLAN_TAG=&gt;'plan',	FILTER_PREDS=&gt;:B35 ,  FORMAT=&gt;'-PROJECTION +ALIAS +ADAPTIVE') ELSE NULL END XPLAN_XML FROM DUAL) V1) CONST_VIEW</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="a3jpjzh7mtwwp"></a>a3jpjzh7mtwwp</td><td class='awrc'><pre_sqltext class="awr">select /*+ index(idl_ub2$ i_idl_ub21) */ piece#, length, piece from idl_ub2$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="a7ng116w7tgbq"></a>a7ng116w7tgbq</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '80';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="acmvv4fhdc9zh"></a>acmvv4fhdc9zh</td><td class='awrc'><pre_sqltext class="awr">select obj#, type#, ctime, mtime, stime,  status,	dataobj#,  flags,  oid$,  spare1,  spare2,  spare3,  signature,  spare7,  spare8,  spare9,  nvl(dflcollid,  16382),  creappid,	creverid,  modappid,  modverid,  crepatchid,  modpatchid from obj$ where owner#=:1 and name=:2 and namespace=:3 and remoteowner is null and linkname is null and subname is null</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="atwuyuvqkf27w"></a>atwuyuvqkf27w</td><td class='awrnc'><pre_sqltext class="awr">SELECT /*+ OPT_PARAM('_fix_control' '16391176:1') */ GROUP_TYPE,  BUCKET_START,	BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END,  SUM(TM_CPU_FIRST_BUCKET_VALUE) TM_CPU_FIRST_BUCKET_VALUE,  SUM(TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE,  SUM(TM_DB_FIRST_BUCKET_VALUE) TM_DB_FIRST_BUCKET_VALUE,  SUM(TM_DB_MIDDLE_BUCKETS_VALUE) TM_DB_MIDDLE_BUCKETS_VALUE,	SUM(TM_DB_LAST_BUCKET_VALUE) TM_DB_LAST_BUCKET_VALUE,  SUM(RREQS_FIRST_BUCKET_VALUE) RREQS_FIRST_BUCKET_VALUE,	SUM(RREQS_MIDDLE_BUCKETS_VALUE) RREQS_MIDDLE_BUCKETS_VALUE,  SUM(RREQS_LAST_BUCKET_VALUE) RREQS_LAST_BUCKET_VALUE,  SUM(WREQS_FIRST_BUCKET_VALUE) WREQS_FIRST_BUCKET_VALUE,  SUM(WREQS_MIDDLE_BUCKETS_VALUE) WREQS_MIDDLE_BUCKETS_VALUE,  SUM(WREQS_LAST_BUCKET_VALUE) WREQS_LAST_BUCKET_VALUE,  SUM(RBYTES_FIRST_BUCKET_VALUE) RBYTES_FIRST_BUCKET_VALUE,  SUM(RBYTES_MIDDLE_BUCKETS_VALUE) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(RBYTES_LAST_BUCKET_VALUE) RBYTES_LAST_BUCKET_VALUE,  SUM(WBYTES_FIRST_BUCKET_VALUE) WBYTES_FIRST_BUCKET_VALUE,  SUM(WBYTES_MIDDLE_BUCKETS_VALUE) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(WBYTES_LAST_BUCKET_VALUE) WBYTES_LAST_BUCKET_VALUE,  SUM(IBYTES_FIRST_BUCKET_VALUE) IBYTES_FIRST_BUCKET_VALUE,  SUM(IBYTES_MIDDLE_BUCKETS_VALUE) IBYTES_MIDDLE_BUCKETS_VALUE,  SUM(IBYTES_LAST_BUCKET_VALUE) IBYTES_LAST_BUCKET_VALUE,  SUM(CRBYTES_FIRST_BUCKET_VALUE) CRBYTES_FIRST_BUCKET_VALUE,  SUM(CRBYTES_MIDDLE_BUCKETS_VALUE) CRBYTES_MIDDLE_BUCKETS_VALUE,	SUM(CRBYTES_LAST_BUCKET_VALUE) CRBYTES_LAST_BUCKET_VALUE,  SUM(PGA_ALLOC_FIRST_BUCKET_VALUE) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(PGA_ALLOC_MIDDLE_BUCKETS_VALUE) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(PGA_ALLOC_LAST_BUCKET_VALUE) PGA_ALLOC_LAST_BUCKET_VALUE,	SUM(TMP_ALLOC_FIRST_BUCKET_VALUE) TMP_ALLOC_FIRST_BUCKET_VALUE,  SUM(TMP_ALLOC_MIDDLE_BUCKETS_VALUE) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(TMP_ALLOC_LAST_BUCKET_VALUE) TMP_ALLOC_LAST_BUCKET_VALUE FROM ( SELECT GROUP_TYPE,  BUCKET_START,  TM_BUCKET_START,  TM_BUCKET_END,  BUCKET_END,  TM_GROUP_TYPE,  SUM(GVTF.TM_CPU_FIRST_BUCKET_VALUE) TM_CPU_FIRST_BUCKET_VALUE,  SUM(GVTF.TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDDLE_BUCKETS_VALUE,	SUM(GVTF.TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE,  SUM(GVTF.TM_DB_FIRST_BUCKET_VALUE) TM_DB_FIRST_BUCKET_VALUE,  SUM(GVTF.TM_DB_MIDDLE_BUCKETS_VALUE) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TM_DB_LAST_BUCKET_VALUE) TM_DB_LAST_BUCKET_VALUE,  SUM(GVTF.RREQS_FIRST_BUCKET_VALUE) RREQS_FIRST_BUCKET_VALUE,	SUM(GVTF.RREQS_MIDDLE_BUCKETS_VALUE) RREQS_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.RREQS_LAST_BUCKET_VALUE) RREQS_LAST_BUCKET_VALUE,  SUM(GVTF.WREQS_FIRST_BUCKET_VALUE) WREQS_FIRST_BUCKET_VALUE,  SUM(GVTF.WREQS_MIDDLE_BUCKETS_VALUE) WREQS_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.WREQS_LAST_BUCKET_VALUE) WREQS_LAST_BUCKET_VALUE,  SUM(GVTF.RBYTES_FIRST_BUCKET_VALUE) RBYTES_FIRST_BUCKET_VALUE,  SUM(GVTF.RBYTES_MIDDLE_BUCKETS_VALUE) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.RBYTES_LAST_BUCKET_VALUE) RBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.WBYTES_FIRST_BUCKET_VALUE) WBYTES_FIRST_BUCKET_VALUE,  SUM(GVTF.WBYTES_MIDDLE_BUCKETS_VALUE) WBYTES_MIDDLE_BUCKETS_VALUE,	SUM(GVTF.WBYTES_LAST_BUCKET_VALUE) WBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.IBYTES_FIRST_BUCKET_VALUE) IBYTES_FIRST_BUCKET_VALUE,  SUM(GVTF.IBYTES_MIDDLE_BUCKETS_VALUE) IBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.IBYTES_LAST_BUCKET_VALUE) IBYTES_LAST_BUCKET_VALUE,	SUM(GVTF.CRBYTES_FIRST_BUCKET_VALUE) CRBYTES_FIRST_BUCKET_VALUE,  SUM(GVTF.CRBYTES_MIDDLE_BUCKETS_VALUE) CRBYTES_MIDDLE_BUCKETS_VALUE,	SUM(GVTF.CRBYTES_LAST_BUCKET_VALUE) CRBYTES_LAST_BUCKET_VALUE,	SUM(GVTF.PGA_ALLOC_FIRST_BUCKET_VALUE) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(GVTF.PGA_ALLOC_MIDDLE_BUCKETS_VALUE) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,	SUM(GVTF.PGA_ALLOC_LAST_BUCKET_VALUE) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(GVTF.TMP_ALLOC_FIRST_BUCKET_VALUE) TMP_ALLOC_FIRST_BUCKET_VALUE,  SUM(GVTF.TMP_ALLOC_MIDDLE_BUCKETS_VALUE) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TMP_ALLOC_LAST_BUCKET_VALUE) TMP_ALLOC_LAST_BUCKET_VALUE FROM TABLE(SYS.GV$(CURSOR( SELECT INST_ID,  GROUP_TYPE,  BUCKET_START,  TM_BUCKET_START,	TM_BUCKET_END,	BUCKET_END,  TM_GROUP_TYPE,  SUM(TM_DELTA_CPU_TIME * TM_FIRST_BUCKET_RATIO) TM_CPU_FIRST_BUCKET_VALUE,	SUM(TM_DELTA_CPU_TIME * TM_MIDDLE_BUCKETS_RATIO) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(TM_DELTA_CPU_TIME * TM_LAST_BUCKET_RATIO) TM_CPU_LAST_BUCKET_VALUE,	SUM(TM_DELTA_DB_TIME * TM_FIRST_BUCKET_RATIO) TM_DB_FIRST_BUCKET_VALUE,  SUM(TM_DELTA_DB_TIME * TM_MIDDLE_BUCKETS_RATIO) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(TM_DELTA_DB_TIME * TM_LAST_BUCKET_RATIO) TM_DB_LAST_BUCKET_VALUE,  SUM(DELTA_READ_REQUESTS * FIRST_BUCKET_RATIO) RREQS_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_REQUESTS * MIDDLE_BUCKETS_RATIO) RREQS_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_REQUESTS * LAST_BUCKET_RATIO) RREQS_LAST_BUCKET_VALUE,  SUM(DELTA_WRITE_REQUESTS * FIRST_BUCKET_RATIO) WREQS_FIRST_BUCKET_VALUE,  SUM(DELTA_WRITE_REQUESTS * MIDDLE_BUCKETS_RATIO) WREQS_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_WRITE_REQUESTS * LAST_BUCKET_RATIO) WREQS_LAST_BUCKET_VALUE,  SUM(DELTA_READ_BYTES * FIRST_BUCKET_RATIO) RBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_BYTES * MIDDLE_BUCKETS_RATIO) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_BYTES * LAST_BUCKET_RATIO) RBYTES_LAST_BUCKET_VALUE,  SUM(DELTA_WRITE_BYTES * FIRST_BUCKET_RATIO) WBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_WRITE_BYTES * MIDDLE_BUCKETS_RATIO) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_WRITE_BYTES * LAST_BUCKET_RATIO) WBYTES_LAST_BUCKET_VALUE,  SUM(DELTA_INTERCONNECT_BYTES * FIRST_BUCKET_RATIO) IBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_INTERCONNECT_BYTES * MIDDLE_BUCKETS_RATIO) IBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_INTERCONNECT_BYTES * LAST_BUCKET_RATIO) IBYTES_LAST_BUCKET_VALUE,  SUM(DELTA_READ_MEM_BYTES * FIRST_BUCKET_RATIO) CRBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_MEM_BYTES * MIDDLE_BUCKETS_RATIO) CRBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_MEM_BYTES * LAST_BUCKET_RATIO) CRBYTES_LAST_BUCKET_VALUE,	SUM(PGA_ALLOCATED * LENGTH_SEG * FIRST_BUCKET_RATIO) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * MIDDLE_BUCKETS_RATIO) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * LAST_BUCKET_RATIO) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * FIRST_BUCKET_RATIO) TMP_ALLOC_FIRST_BUCKET_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * MIDDLE_BUCKETS_RATIO) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,	SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * LAST_BUCKET_RATIO) TMP_ALLOC_LAST_BUCKET_VALUE FROM ( SELECT USERENV('INSTANCE') INST_ID,  ROW_ID,  SID,  SAMPLE_TIME,	CASE WHEN BUCKET_END IS NULL OR BUCKET_START IS NULL THEN NULL WHEN BUCKET_START = TM_BUCKET_START AND BUCKET_START = BUCKET_END THEN 'CO' WHEN BUCKET_START = TM_BUCKET_START THEN 'CM' WHEN BUCKET_START = BUCKET_END THEN 'SO' ELSE 'SM' END GROUP_TYPE,  CASE WHEN TM_BUCKET_START IS NULL OR BUCKET_END IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL WHEN TM_BUCKET_START = BUCKET_END THEN 'O' ELSE 'M' END TM_GROUP_TYPE,  START_SEG,  BUCKET_START,  BUCKET_START_OFFSET,  TM_START_SEG,  CASE WHEN TM_BUCKET_START IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL ELSE TM_BUCKET_START END TM_BUCKET_START,  CASE WHEN TM_BUCKET_START IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL ELSE BUCKET_END END TM_BUCKET_END,  TM_BUCKET_START_OFFSET,  LENGTH_SEG,	TM_LENGTH_SEG,	END_SEG,  BUCKET_END,  BUCKET_END_OFFSET,  CASE WHEN BUCKET_START != BUCKET_END THEN (:B9 - BUCKET_START_OFFSET) / LENGTH_SEG ELSE 1 END FIRST_BUCKET_RATIO,  CASE WHEN BUCKET_END &gt;= BUCKET_START + 2 THEN :B9 / LENGTH_SEG ELSE NULL END MIDDLE_BUCKETS_RATIO,  CASE WHEN BUCKET_START != BUCKET_END THEN BUCKET_END_OFFSET / LENGTH_SEG ELSE NULL END LAST_BUCKET_RATIO,	CASE WHEN TM_BUCKET_START != BUCKET_END THEN (:B9 - TM_BUCKET_START_OFFSET) / TM_LENGTH_SEG ELSE 1 END TM_FIRST_BUCKET_RATIO,  CASE WHEN BUCKET_END &gt;= TM_BUC
KET_START + 2 THEN :B9 / TM_LENGTH_SEG ELSE NULL END TM_MIDDLE_BUCKETS_RATIO,  CASE WHEN TM_BUCKET_START != BUCKET_END THEN BUCKET_END_OFFSET / TM_LENGTH_SEG ELSE NULL END TM_LAST_BUCKET_RATIO,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS DELTA_READ_REQUESTS,  DELTA_WRITE_IO_REQUESTS DELTA_WRITE_REQUESTS,  DELTA_READ_IO_BYTES DELTA_READ_BYTES,  DELTA_WRITE_IO_BYTES DELTA_WRITE_BYTES,  DELTA_INTERCONNECT_IO_BYTES DELTA_INTERCONNECT_BYTES,  DELTA_READ_MEM_BYTES DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,  SAMPLE_TIME,	START_SEG,  TRUNC(START_SEG / :B9 ) BUCKET_START,  MOD(START_SEG,  :B9 ) BUCKET_START_OFFSET,  TM_START_SEG,  TRUNC(TM_START_SEG/:B9 ) TM_BUCKET_START,  MOD(TM_START_SEG,  :B9 ) TM_BUCKET_START_OFFSET,  TRUNC(END_SEG/:B9 ) BUCKET_END,  MOD(END_SEG,  :B9 ) BUCKET_END_OFFSET,  END_SEG,  LENGTH_SEG,  TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,	DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,	SAMPLE_TIME,  TIME_INTERVAL,  CASE WHEN START_SEG &lt; 0 THEN 0 ELSE START_SEG END START_SEG,  CASE WHEN TM_START_SEG &lt; 0 THEN 0 ELSE TM_START_SEG END TM_START_SEG,  CASE WHEN END_SEG &gt; TIME_INTERVAL THEN TIME_INTERVAL ELSE END_SEG END END_SEG,  (LENGTH_SEG - (CASE WHEN START_SEG &lt; 0 THEN -START_SEG ELSE 0 END + CASE WHEN END_SEG &gt; TIME_INTERVAL THEN END_SEG - TIME_INTERVAL ELSE 0 END)) LENGTH_SEG,  (TM_LENGTH_SEG - (CASE WHEN TM_START_SEG &lt; 0 THEN -TM_START_SEG ELSE 0 END + CASE WHEN END_SEG &gt; TIME_INTERVAL THEN END_SEG - TIME_INTERVAL ELSE 0 END)) TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,	DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,  SAMPLE_TIME,  TIME_INTERVAL,  LENGTH_SEG,  TM_LENGTH_SEG,  END_SEG - TM_LENGTH_SEG TM_START_SEG,  END_SEG - LENGTH_SEG START_SEG,  END_SEG,	TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,	DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,	DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,  SAMPLE_TIME,  EXTRACT(SECOND FROM REL_SAMPLE_TIME_INT) + EXTRACT(MINUTE FROM REL_SAMPLE_TIME_INT)*60 + EXTRACT(HOUR FROM REL_SAMPLE_TIME_INT)*3600 + EXTRACT(DAY FROM REL_SAMPLE_TIME_INT)*3600*24 END_SEG,  TIME_INTERVAL,  DELTA_TIME/1000000 LENGTH_SEG,  TM_DELTA_TIME/1000000 TM_LENGTH_SEG,	TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,	DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,	DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROWNUM ROW_ID,  SESSION_ID SID,  CAST(FROM_TZ(SAMPLE_TIME,  DBTIMEZONE) AS DATE) SAMPLE_DATE,  SAMPLE_TIME,  (SAMPLE_TIME - CAST(:B8 AS TIMESTAMP)) REL_SAMPLE_TIME_INT,	TRUNC((:B7 - :B8 ) * 3600 * 24) TIME_INTERVAL,	:B8 AS BND_START_INTERVAL ,  :B7 AS BND_END_INTERVAL ,	TM_DELTA_TIME,	TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ASH0.* FROM V$ACTIVE_SESSION_HISTORY ASH0 WHERE SAMPLE_TIME BETWEEN :B6 AND :B5 AND ( (SESSION_ID = :B2 AND SESSION_SERIAL# = :B1 AND USERENV('INSTANCE') = :B3 ) OR (:B4 = 'yes' AND QC_INSTANCE_ID = :B3 AND QC_SESSION_ID = :B2 AND QC_SESSION_SERIAL# = :B1 ))) ) ASH1 WHERE SAMPLE_DATE &gt;= BND_START_INTERVAL AND SAMPLE_DATE &lt;= BND_END_INTERVAL + 120/3600/24 ) ) WHERE START_SEG &lt;= TIME_INTERVAL ) WHERE (LENGTH_SEG IS NOT NULL AND LENGTH_SEG &gt; 0) OR (TM_LENGTH_SEG IS NOT NULL AND TM_LENGTH_SEG &gt; 0)) ) GROUP BY INST_ID,  GROUP_TYPE,	BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END))) GVTF WHERE INST_ID &gt;= :B11 AND INST_ID &lt;= :B10 GROUP BY GROUP_TYPE,  BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,	TM_BUCKET_END ) GROUP BY GROUPING SETS ( (GROUP_TYPE,  BUCKET_START,  BUCKET_END),  (TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END) )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="bdq8dvq79a34v"></a>bdq8dvq79a34v</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '100';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bgxwnc1uyqzrn"></a>bgxwnc1uyqzrn</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '68';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;


WORKLOAD REPOSITORY report for

IF ( v_max_loop_iterations &gt; 0 )  THEN
DB Name 	DB Id	 Unique Name DB Role	      Edition Release	 RAC CDB
------------ ----------- ----------- ---------------- ------- ---------- --- ---
	v_loop_control := TRUE ;
P80DB	      2732778098 p80db	     PRIMARY	      EE      19.0.0.0.0 YES NO

Instance     Inst Num Startup Time
------------ -------- ---------------
p80db1		    1 12-Feb-20 07:39

Host Name	 Platform			  CPUs Cores Sockets Memory(GB)
---------------- -------------------------------- ---- ----- ------- ----------
mcracpoc1.exampl Linux x86 64-bit		    32	  16	   1	 251.90

END IF;
	      Snap Id	   Snap Time	  Sessions Curs/Sess Instances
	    --------- ------------------- -------- --------- ---------
Begin Snap:	   55 12-Feb-20 09:07:41       192	 2.0	     2

  End Snap:	   56 12-Feb-20 09:18:01       127	 1.0	     2
   Elapsed:		  10.34 (mins)
   DB Time:		 616.70 (mins)

IF ( v_update_pct = 0 ) 	  THEN
Top ADDM Findings by Average Active Sessions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Finding Name				 Avg act Percen Task Name
	v_select_only_workload := TRUE;
---------------------------------------- ------- ------ ------------------------
Top SQL Statements			   59.68  98.94 ADDM:2732778098_1_56
Interconnect Latency			   59.68  83.83 ADDM:2732778098_1_56
END IF;
"User I/O" wait Class			   59.68  72.49 ADDM:2732778098_1_56
Global Cache Messaging			   59.68  21.67 ADDM:2732778098_1_56
Buffer Busy - Hot Objects		   59.68   7.51 ADDM:2732778098_1_56

Load Profile			Per Second   Per Transaction  Per Exec	Per Call
~~~~~~~~~~~~~~~ 	   ---------------   --------------- --------- ---------
	     DB Time(s):	      59.6		 0.3	  0.05	   34.81
IF ( v_update_pct = 100 )	  THEN
	      DB CPU(s):	       4.4		 0.0	  0.00	    2.56
      Background CPU(s):	       2.1		 0.0	  0.00	    0.00
      Redo size (bytes):       1,799,788.6	     9,308.9
  Logical read (blocks):	  18,831.2		97.4
	v_update_only_workload := TRUE;
	  Block changes:	   4,775.7		24.7
 Physical read (blocks):	  14,258.7		73.8
Physical write (blocks):	   2,219.6		11.5
END IF;
       Read IO requests:	  14,257.3		73.7
      Write IO requests:	   2,126.7		11.0
	   Read IO (MB):	     111.4		 0.6
	  Write IO (MB):	      17.3		 0.1

	   IM scan rows:	       0.0		 0.0
Session Logical Read IM:	       0.0		 0.0
 RAC GC blocks received:	       9.6		 0.1
IF ( v_scan_query_pct = 0 ) 	THEN
   RAC GC blocks served:	      45.6		 0.2
	     User calls:	       1.7		 0.0
	   Parses (SQL):	       7.5		 0.0
      Hard parses (SQL):	       0.3		 0.0
	v_random_workload_only := TRUE;
     SQL Work Area (MB):	       0.5		 0.0
		 Logons:	       0.2		 0.0
	    User logons:	       0.0		 0.0
END IF;
	 Executes (SQL):	   1,299.1		 6.7
	      Rollbacks:	       0.0		 0.0
	   Transactions:	     193.3


Instance Efficiency Percentages (Target 100%)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
IF ( v_scan_query_pct = 100 ) 	THEN
	    Buffer Nowait %:   99.99	   Redo NoWait %:  100.00
	    Buffer  Hit   %:   24.27	In-memory Sort %:  100.00
	    Library Hit   %:   99.93	    Soft Parse %:   95.39
	v_scan_workload_only := TRUE;
	 Execute to Parse %:   99.42	     Latch Hit %:   99.96
Parse CPU to Parse Elapsd %:   46.71	 % Non-Parse CPU:   99.98
END IF;
	  Flash Cache Hit %:	0.00

Top 10 Foreground Events by Total Wait Time

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					   Total Wait	    Avg   % DB Wait
Event				     Waits Time (sec)	   Wait   time Class
v_seconds_to_run := v_seconds_to_run * 100 ;
------------------------------ ----------- ---------- --------- ------ --------

db file sequential read 	 2,790,303	20.1K	 7.20ms   54.3 User I/O
db file parallel read		   677,117     6736.9	 9.95ms   18.2 User I/O
DB CPU					       2722.9		   7.4
gc cr multi block grant 	   614,167     2577.3	 4.20ms    7.0 Cluster
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
gc cr grant busy		   467,175	 1459	 3.12ms    3.9 Cluster
gc current grant busy		   407,257     1254.8	 3.08ms    3.4 Cluster
gc cr block lost		     1,999	 1057  528.78ms    2.9 Cluster

gc current block lost		     1,839	977.7  531.63ms    2.6 Cluster
KJC: Wait for msg sends to com	     7,421	621.8	83.79ms    1.7 Other
gc current grant 2-way		   210,475	336.9	 1.60ms     .9 Cluster
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');

Wait Classes by Total Wait Time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
							  Avg		  Avg
-- DBMS_RANDOM.seed (val =&gt; v_seed);
					Total Wait	 Wait	% DB   Active
Wait Class		    Waits	Time (sec)	 Time	time Sessions
---------------- ---------------- ---------------- ---------- ------ --------

User I/O		3,556,148	    26,845     7.55ms	72.6	 43.3
Cluster 		1,955,092	     8,069     4.13ms	21.8	 13.0
DB CPU					     2,723		 7.4	  4.4
System I/O		  197,180	     1,113     5.64ms	 3.0	  1.8
v_begin_time := DBMS_UTILITY.GET_TIME();
Other			  158,567	     1,095     6.91ms	 3.0	  1.8
Configuration		      541	       100   184.63ms	  .3	  0.2
Concurrency		    1,526		65    42.87ms	  .2	  0.1
v_now := v_begin_time ;
Application		      310		 4    12.94ms	  .0	  0.0
Commit			       32		 0     6.73ms	  .0	  0.0
Network 		    1,240		 0    51.50us	  .0	  0.0
Administrative			1		 0   685.00us	  .0	  0.0
v_brick_wall := v_now + v_seconds_to_run ;

Host CPU
~~~~~~~~		  Load Average
 CPUs Cores Sockets	Begin	    End     %User   %System	 %WIO	  %Idle
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
----- ----- ------- --------- --------- --------- --------- --------- ---------
   32	 16	  1	21.52	  17.44       6.9      12.3	 42.4	   74.0


Instance CPU
~~~~~~~~~~~~
	      % of total CPU for Instance:	22.0
	      % of busy  CPU for Instance:	84.6
----------------------------------------------------------------------------------------------------------------------
  %DB time waiting for CPU - Resource Mgr:	 0.0

IO Profile		    Read+Write/Second	  Read/Second	 Write/Second
~~~~~~~~~~		    ----------------- --------------- ---------------
-- The following WHILE loop is the master work loop control
	    Total Requests:	     16,572.0	     14,266.3	      2,305.7
	 Database Requests:	     16,384.0	     14,257.3	      2,126.7
	Optimized Requests:		  0.0		  0.0		  0.0
	     Redo Requests:		178.9		  2.4		176.5
----------------------------------------------------------------------------------------------------------------------
		Total (MB):		133.0		113.7		 19.3
	     Database (MB):		128.7		111.4		 17.3
      Optimized Total (MB):		  0.0		  0.0		  0.0
		 Redo (MB):		  4.0		  2.2		  1.8
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
	 Database (blocks):	     16,478.3	     14,258.7	      2,219.6
 Via Buffer Cache (blocks):	     16,476.5	     14,258.7	      2,217.8
	   Direct (blocks):		  1.8		  0.0		  1.8


Memory Statistics
~~~~~~~~~~~~~~~~~			Begin	       End
				 ------------ ------------
		  Host Mem (MB):    257,947.8	 257,947.8
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		   SGA use (MB):      9,664.0	   9,664.0
		   PGA use (MB):      1,843.9	   1,474.2
    % Host Mem used for SGA+PGA:	 4.46	      4.32

		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
Cache Sizes			  Begin        End
~~~~~~~~~~~		     ---------- ----------
	       Buffer Cache:	 7,872M     7,872M  Std Block Size:	    8K
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
	   Shared Pool Size:	 1,065M     1,071M	Log Buffer:    20,612K
	     In-Memory Area:	     0M 	0M

 Shared Pool Statistics        Begin	End
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ------  ------
	     Memory Usage %:   85.43   84.19
    % SQL with executions>1:   84.19   76.23
			DBMS_LOCK.SLEEP(v_num_tmp);
  % Memory for SQL w/exec>1:   82.79   65.02


Time Model Statistics			   DB/Inst: P80DB/p80db1  Snaps: 55-56
		END IF;
-> DB Time represents total time in user calls
-> DB CPU represents CPU time of foreground processes
-> Total CPU Time represents foreground and background processes
	END IF;
-> Statistics including the word "background" measure background process
   time, therefore do not contribute to the DB time statistic
-> Ordered by % of DB time in descending order, followed by Statistic Name


								% of  % of Total
Statistic Name					     Time (s) DB Time	CPU Time
------------------------------------------ ------------------ ------- ----------
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
sql execute elapsed time			     37,000.5	100.0
DB CPU						      2,722.9	  7.4	    67.3
PL/SQL execution elapsed time				 45.9	   .1
parse time elapsed					  1.0	   .0
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
hard parse (sharing criteria) elapsed time		  0.9	   .0
hard parse elapsed time 				  0.9	   .0
hard parse (bind mismatch) elapsed time 		  0.9	   .0
PL/SQL compilation elapsed time 			  0.1	   .0
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
connection management call elapsed time 		  0.0	   .0
repeated bind elapsed time				  0.0	   .0
DB time 					     37,001.9
background elapsed time 			      2,822.7
background cpu time				      1,321.1		    32.7
total CPU time					      4,044.0
			  ------------------------------------------------------

Operating System Statistics		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> *TIME statistic values are diffed.
   All others display actual values.  End Value is displayed if different
			v_sharing_schema := TRUE ;
-> ordered by statistic type (CPU Use, Virtual Memory, Hardware Config), Name

Statistic				   Value	End Value
------------------------- ---------------------- ----------------
		ELSE
FREE_MEMORY_BYTES		 127,368,396,800  128,487,501,824
INACTIVE_MEMORY_BYTES		   1,457,369,088    1,457,356,800
BUSY_TIME				 477,971
IDLE_TIME			       1,360,701
IOWAIT_TIME				 779,273
NICE_TIME				       0
SYS_TIME				 226,324
USER_TIME				 127,169
LOAD					      22	       17
PHYSICAL_MEMORY_BYTES		 270,477,918,208
NUM_CPUS				      32
NUM_CPU_CORES				      16
NUM_CPU_SOCKETS 			       1
GLOBAL_RECEIVE_SIZE_MAX 	       4,194,304
			IF ( v_sharing_schema = TRUE ) THEN
GLOBAL_SEND_SIZE_MAX		       1,048,576
TCP_RECEIVE_SIZE_DEFAULT		  87,380
TCP_RECEIVE_SIZE_MAX		       6,291,456
TCP_RECEIVE_SIZE_MIN			   4,096
TCP_SEND_SIZE_DEFAULT			  16,384
				EXECUTE IMMEDIATE v_home_schema_str;
TCP_SEND_SIZE_MAX		       4,194,304
TCP_SEND_SIZE_MIN			   4,096
			  ------------------------------------------------------

				v_sharing_schema := FALSE;
Operating System Statistics - Detail	   DB/Inst: P80DB/p80db1  Snaps: 55-56

Snap Time	    Load    %busy    %user     %sys    %idle  %iowait
--------------- -------- -------- -------- -------- -------- --------
			END IF;
12-Feb 09:07:41     21.5      N/A      N/A	N/A	 N/A	  N/A
12-Feb 09:18:01     17.4     26.0      6.9     12.3	74.0	 42.4
			  ------------------------------------------------------

Foreground Wait Class			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond
		END IF;
-> ordered by wait time desc, waits desc
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0
-> Captured Time accounts for	     104.0%  of Total DB time	   37,001.92 (s)
	END IF;
-> Total FG Wait Time:		  35,763.88 (s)  DB CPU time:	    2,722.91 (s)

				     %Time	Total Wait

Wait Class		       Waits -outs	  Time (s)   Avg wait  %DB time
-------------------- --------------- ----- --------------- ---------- ---------
User I/O		   3,467,733	 0	    26,823     7.74ms	   72.5
Cluster 		   1,953,246	 0	     8,063     4.13ms	   21.8
	-- Choose the random block. The v_do_hotspot handler that follows can override.
DB CPU						     2,723		    7.4
Other			      19,906	11	       710    35.66ms	    1.9
Configuration			 498	 7	       100   200.54ms	    0.3
Concurrency			 647	 0		64    99.36ms	    0.2
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
System I/O			 527	 0		 4     7.01ms	    0.0
Commit				  29	 0		 0     6.35ms	    0.0
Application			 125	 0		 0    89.94us	    0.0
Network 			 288	 0		 0     8.04us	    0.0

Administrative			   1	 0		 0   685.00us	    0.0
			  ------------------------------------------------------


Foreground Wait Events			   DB/Inst: P80DB/p80db1  Snaps: 55-56
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Only events with Total Wait Time (s) >= .001 are shown
-> ordered by wait time desc, waits desc (idle events last)
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

						Total
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
				       %Time	 Wait		   Waits   % DB
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------
db file sequential read      2,790,303	       20,084	 7.20ms     23.3   54.3
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
db file parallel read	       677,117		6,737	 9.95ms      5.6   18.2
gc cr multi block grant        614,167		2,577	 4.20ms      5.1    7.0
gc cr grant busy	       467,175		1,459	 3.12ms      3.9    3.9
gc current grant busy	       407,257		1,255	 3.08ms      3.4    3.4
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
gc cr block lost		 1,999		1,057  528.78ms      0.0    2.9
gc current block lost		 1,839		  978  531.63ms      0.0    2.6
KJC: Wait for msg sends to	 7,421		  622	83.79ms      0.1    1.7
gc current grant 2-way	       210,475		  337	 1.60ms      1.8     .9
	END IF;
gc cr grant 2-way	       229,639		  321	 1.40ms      1.9     .9
enq: HW - contention		   460		   99  215.51ms      0.0     .3
buffer busy waits		   483		   64  132.66ms      0.0     .2

enq: US - contention		 1,307		   55	42.13ms      0.0     .1
gc current grant read-most	14,519		   43	 2.97ms      0.1     .1
enq: CR - block range reus	   753		   22	28.63ms      0.0     .1
gc cr multi block mixed 	   499		   17	34.88ms      0.0     .0
----------------------------------------------------------------------------------------------------------------------
gc current grant congested	 1,438		    8	 5.79ms      0.0     .0
gc cr grant congested		 1,441		    5	 3.64ms      0.0     .0
reliable message		   345		    3	 8.69ms      0.0     .0
DLM cross inst call comple	    21		    3  127.83ms      0.0     .0
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
gc current block busy		 1,733		    2	 1.17ms      0.0     .0
control file parallel writ	    54		    2	36.70ms      0.0     .0
gc current block 2-way		   582		    2	 3.11ms      0.0     .0
----------------------------------------------------------------------------------------------------------------------
KSV master wait 		   216		    2	 7.34ms      0.0     .0
latch free			 3,536		    2  440.81us      0.0     .0
control file sequential re	   437		    1	 3.36ms      0.0     .0
Data file init write		    36		    1	29.79ms      0.0     .0

db file single write		    36		    1	24.71ms      0.0     .0
latch: gc element		 1,236		    1  668.60us      0.0     .0
undo segment extension		    38	  97	    1	19.31ms      0.0     .0
gc cr block 2-way		   471		    1	 1.38ms      0.0     .0
	IF  ( v_select_only_workload = TRUE ) THEN
enq: CF - contention		    19		    0	18.88ms      0.0     .0
latch: enqueue hash chains	   553		    0  519.75us      0.0     .0
kfk: async disk IO		    36		    0	 6.83ms      0.0     .0
latch: gcs resource hash	   689		    0  347.40us      0.0     .0
		-- handle case where user specified zero pct updates (a SELECT-only workload)
CSS initialization		    32		    0	 6.23ms      0.0     .0
log file sync			    29		    0	 6.35ms      0.0     .0
Disk file Mirror Read		    33		    0	 5.19ms      0.0     .0
row cache mutex 		    20		    0	 7.83ms      0.0     .0
latch: redo allocation		   463		    0  321.91us      0.0     .0
PX Deq: Slave Session Stat	   103		    0	  .97ms      0.0     .0
CSS operation: action		    48		    0	 1.61ms      0.0     .0
		v_do_update := FALSE;
lock deadlock retry		 1,839	 100	    0	33.23us      0.0     .0
latch: cache buffers lru c	   315		    0  183.17us      0.0     .0
latch: cache buffers chain	   136		    0  385.71us      0.0     .0
gc current block congested	     9		    0	 3.89ms      0.0     .0
		v_update_quota := TRUE ;
latch: ges resource hash l	    98		    0  337.96us      0.0     .0
latch: object queue header	    65		    0  442.29us      0.0     .0
ges inquiry response		    18		    0	 1.57ms      0.0     .0
CSS operation: query		    96		    0  293.40us      0.0     .0
	ELSE
Disk file operations I/O	   172		    0  139.37us      0.0     .0
enq: CT - state 		    18		    0	 1.23ms      0.0     .0
IPC send completion sync	    27		    0  794.59us      0.0     .0
latch: undo global data 	    60		    0  264.30us      0.0     .0
		IF ( v_update_only_workload = TRUE ) THEN
gc cr block congested		     3		    0	 5.08ms      0.0     .0
enq: PS - contention		    10	  10	    0	 1.18ms      0.0     .0
enq: TO - contention		    10		    0	 1.16ms      0.0     .0
PGA memory operation		   191		    0	54.59us      0.0     .0
			-- handle case where user specified 100% updates
SQL*Net break/reset to cli	   124		    0	82.40us      0.0     .0
datafile move cleanup duri	    18		    0  438.00us      0.0     .0

Foreground Wait Events			   DB/Inst: P80DB/p80db1  Snaps: 55-56
			v_do_update := TRUE;
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Only events with Total Wait Time (s) >= .001 are shown
-> ordered by wait time desc, waits desc (idle events last)
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0
			v_update_quota := FALSE;

						Total
				       %Time	 Wait		   Waits   % DB
Event				 Waits -outs Time (s)  Avg wait     /txn   time
		ELSE
-------------------------- ----------- ----- -------- --------- -------- ------
PX Deq: reap credit		   248	 100	    0	21.01us      0.0     .0
latch: messages 		    11		    0  419.55us      0.0     .0
enq: WF - contention		     6		    0  682.67us      0.0     .0
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
name-service call wait		     2		    0	 1.65ms      0.0     .0
ASM file metadata operatio	   108		    0	29.40us      0.0     .0
direct path sync		    18		    0  142.33us      0.0     .0
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
SQL*Net message to client	   262		    0	 7.93us      0.0     .0
library cache lock		     1		    0	 1.89ms      0.0     .0
enq: SW - contention		     1		    0	 1.34ms      0.0     .0
enq: FD - Flashback logica	     1		    0	 1.22ms      0.0     .0
			IF ( v_update_quota = FALSE ) THEN
wait list latch free		     1		    0	 1.13ms      0.0     .0
enq: RP - contention		     1		    0	 1.08ms      0.0     .0
row cache lock			     1	 100	    0	 1.07ms      0.0     .0
enq: TM - contention		     1		    0	 1.03ms      0.0     .0
				-- Handle case where user has set UPDATE_PCT to a valid value
watchdog main loop		 1,032		3,096 3000.02ms      0.0
SQL*Net message from clien	   263		1,821 6923.17ms      0.0
PX Deq: Execution Msg		   309		    8	25.45ms      0.0
PX Deq: Msg Fragment		   279		    0  703.49us      0.0
				--
PX Deq Credit: send blkd	    75		    0	 1.22ms      0.0
PX Deq Credit: need buffer	    29		    0  456.55us      0.0
			  ------------------------------------------------------


				-- We are doing updates during this run and quota has not been met yet
Background Wait Events			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> ordered by wait time desc, waits desc (idle events last)
-> Only events with Total Wait Time (s) >= .001 are shown
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0
				-- We still vacillate until update quota has been met

						Total
				       %Time	 Wait		   Waits   % bg
Event				 Waits -outs Time (s)  Avg wait     /txn   time

-------------------------- ----------- ----- -------- --------- -------- ------
log file parallel write 	74,235	   0	  734	 9.88ms      0.6   26.0
db file parallel write		89,210	   0	  350	 3.92ms      0.7   12.4
LGWR any worker group		46,578	   0	  249	 5.34ms      0.4    8.8
				IF ( MOD(v_random_block,  2) = 0 ) THEN
LGWR worker group ordering	12,366	   0	   35	 2.86ms      0.1    1.3
enq: CR - block range reus	 1,526	   0	   28	18.37ms      0.0    1.0
LGWR all worker groups		 3,661	   0	   27	 7.40ms      0.0    1.0
control file sequential re	 3,694	   0	   16	 4.23ms      0.0     .6
					v_do_update := TRUE;
ASM file metadata operatio	 3,122	   0	   10	 3.23ms      0.0     .4
control file parallel writ	   330	   0	   10	28.95ms      0.0     .3
db file sequential read 	 1,236	   0	    9	 7.43ms      0.0     .3
KSV master wait 		 1,068	  45	    8	 7.84ms      0.0     .3
				ELSE
Disk file Mirror Read		   837	   0	    8	 9.51ms      0.0     .3
IMR slave acknowledgement	 1,857	   0	    7	 3.58ms      0.0     .2
reliable message		   533	   0	    6	11.61ms      0.0     .2
PX Deq: Join ACK		   189	   0	    4	23.46ms      0.0     .2
					v_do_update := FALSE;
enq: RO - fast object reus	   172	   0	    4	23.19ms      0.0     .1
ASM IO for non-blocking po	85,807	   0	    3	33.25us      0.7     .1
Sync ASM rebalance		    54	   0	    2	32.42ms      0.0     .1
				END IF;
latch free			 2,117	   0	    2  776.43us      0.0     .1
gc current block lost		     3	   0	    2  535.77ms      0.0     .1
PX Deq: reap credit		45,061	 100	    1	27.99us      0.4     .0
gc cr multi block mixed 	    17	   0	    1	69.06ms      0.0     .0
			ELSE
gc cr block lost		     3	   0	    1  382.48ms      0.0     .0
enq: PS - contention		   102	   6	    1	10.93ms      0.0     .0
IPC send completion sync	   736	  84	    1	 1.45ms      0.0     .0
buffer busy waits		    14	   0	    1	55.12ms      0.0     .0
				-- UPDATE quota has been filled,  force drain some SELECTs
gc cr block 2-way		   844	   0	    1  863.87us      0.0     .0
DFS lock handle 		   144	 100	    1	 4.43ms      0.0     .0
KJC: Wait for msg sends to	    76	   0	    1	 8.35ms      0.0     .0
				v_do_update := FALSE;
direct path write temp		    57	   0	    1	10.86ms      0.0     .0
direct path write		    18	   0	    1	31.11ms      0.0     .0
gc current grant busy		   275	   0	    1	 1.97ms      0.0     .0
gc cr block busy		    65	   0	    0	 7.65ms      0.0     .0
			END IF;
db file scattered read		    49	   0	    0	 8.82ms      0.0     .0
gc cr grant busy		   209	   0	    0	 2.05ms      0.0     .0
enq: CF - contention		    85	  40	    0	 4.81ms      0.0     .0
ges inquiry response		   260	   0	    0	 1.16ms      0.0     .0
		END IF;
latch: gcs resource hash	   851	   0	    0  331.97us      0.0     .0
db file async I/O submit	28,756	   0	    0	 8.60us      0.2     .0
gc current block busy		   149	   0	    0	 1.60ms      0.0     .0
gc current grant 2-way		   135	   0	    0	 1.55ms      0.0     .0
	END IF;
library cache pin		    43	   0	    0	 4.85ms      0.0     .0
log file sequential read	   405	   0	    0  504.12us      0.0     .0
AQ: RAC AQ Network		 6,187	 100	    0	31.51us      0.1     .0
LGWR wait for redo copy 	   475	   0	    0  384.17us      0.0     .0

CGS wait for IPC msg		 6,357	 100	    0	28.70us      0.1     .0
gcs log flush sync		   462	   0	    0  358.15us      0.0     .0
Disk file operations I/O	   353	   0	    0  468.69us      0.0     .0
latch: cache buffers lru c	   331	   0	    0  374.92us      0.0     .0
gc cr disk read 		    47	   0	    0	 2.32ms      0.0     .0
ksxr poll remote instances	 3,025	 100	    0	34.18us      0.0     .0
oracle thread bootstrap 	     4	   0	    0	22.85ms      0.0     .0
latch: redo allocation		   230	   0	    0  352.57us      0.0     .0
library cache lock		    45	  16	    0	 1.50ms      0.0     .0
latch: gc element		   108	   0	    0  623.06us      0.0     .0
row cache lock			    34	 100	    0	 1.92ms      0.0     .0
IPC group service call		   885	   0	    0	69.13us      0.0     .0
PX Deq: Slave Session Stat	   189	   0	    0  287.49us      0.0     .0
----------------------------------------------------------------------------------------------------------------------
direct path read		    14	   0	    0	 3.66ms      0.0     .0
DLM cross inst call comple	    73	   0	    0  654.97us      0.0     .0

Background Wait Events			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> ordered by wait time desc, waits desc (idle events last)
-> Only events with Total Wait Time (s) >= .001 are shown
-- The type of SQL is now determined...execute it in the following section
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

						Total
				       %Time	 Wait		   Waits   % bg
----------------------------------------------------------------------------------------------------------------------
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------

gc cr grant 2-way		    36	   0	    0	 1.23ms      0.0     .0
gc current block 2-way		    40	   0	    0	 1.03ms      0.0     .0
CSS operation: data query	    19	   0	    0	 1.77ms      0.0     .0
CSS operation: data update	    22	   0	    0	 1.47ms      0.0     .0
	IF ( v_do_update != TRUE ) THEN
log file sync			     3	   0	    0	10.41ms      0.0     .0
enq: TO - contention		    28	   0	    0	 1.00ms      0.0     .0
gc current grant congested	     6	   0	    0	 4.40ms      0.0     .0
db file parallel read		     3	   0	    0	 7.92ms      0.0     .0
		--
latch: messages 		    53	   0	    0  322.23us      0.0     .0
latch: ges resource hash l	    14	   0	    0	 1.12ms      0.0     .0
PGA memory operation		   268	   0	    0	58.16us      0.0     .0
CSS operation: action		    30	   0	    0  515.30us      0.0     .0
		-- Do a SELECT statement
gc cr multi block grant 	     8	   0	    0	 1.90ms      0.0     .0
PX Deq: Signal ACK EXT		   189	   0	    0	78.47us      0.0     .0
gc cr block congested		     3	   0	    0	 4.17ms      0.0     .0
		-- Work out scan or random
enq: TM - contention		    13	   0	    0  936.23us      0.0     .0
enq: WF - contention		     8	   0	    0	 1.47ms      0.0     .0
enq: FB - contention		     5	   0	    0	 2.09ms      0.0     .0
os thread creation		     4	   0	    0	 2.40ms      0.0     .0
latch: checkpoint queue la	    26	   0	    0  360.42us      0.0     .0
		IF  ( v_random_workload_only = TRUE ) THEN
latch: redo writing		    38	   0	    0  236.66us      0.0     .0
latch: object queue header	    16	   0	    0  493.69us      0.0     .0
latch: cache buffers chain	    21	   0	    0  312.86us      0.0     .0
enq: TT - contention		     4	  50	    0	 1.51ms      0.0     .0
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
enq: DW - contention		     1	 100	    0	 6.03ms      0.0     .0
enq: RA - RT ADDM flood co	     2	 100	    0	 2.86ms      0.0     .0
latch: MGA shared context	    14	   0	    0  385.57us      0.0     .0
enq: HW - contention		     5	   0	    0  887.40us      0.0     .0
			v_do_scan_query := FALSE;
enq: WT - contention		     3	   0	    0	 1.39ms      0.0     .0
libcache interrupt action	   701	   0	    0	 5.65us      0.0     .0
gc current block congested	     1	   0	    0	 2.88ms      0.0     .0
direct path sync		    22	   0	    0  129.68us      0.0     .0
			v_scan_query_quota := TRUE ;
enq: DR - contention		     1	   0	    0	 2.75ms      0.0     .0
latch: enqueue hash chains	     4	   0	    0  509.00us      0.0     .0
latch: undo global data 	     1	   0	    0	 2.04ms      0.0     .0
enq: TA - contention		     1	   0	    0	 1.93ms      0.0     .0
		ELSE
gc buffer busy acquire		     1	   0	    0	 1.21ms      0.0     .0
wait list latch free		     1	   0	    0	 1.04ms      0.0     .0
PX Idle Wait			   103	   0   40,637  394.54 s      0.0
Space Manager: slave idle	 6,357	   0   26,075 4101.82ms      0.1
rdbms ipc message	       139,089	  10   16,618  119.48ms      1.2
			IF ( v_scan_workload_only = TRUE ) THEN
class slave wait		 7,943	  77	4,904  617.44ms      0.1
wait for unread message on	   950	 100	1,861 1958.53ms      0.0
LMS CR slave timer	       185,444	   0	1,858	10.02ms      1.5
gcs yield cpu			63,748	 100	1,845	28.94ms      0.5
gcs remote message	     3,150,440	   0	1,256  398.75us     26.3
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
pmon timer			   413	 100	1,239 2999.92ms      0.0
ges remote message		25,721	   0	1,239	48.17ms      0.2
GCR sleep			 4,125	   0	1,239  300.29ms      0.0
DIAG idle wait			 8,119	  80	1,238  152.49ms      0.1
				v_do_scan_query := TRUE;
Data Guard: Gap Manager 	    11	   0	  660	60.00 s      0.0
AQPC idle			    21	 100	  630	30.00 s      0.0
ASM background timer		 2,294	   0	  621  270.73ms      0.0
OFS idle			   207	 100	  621 3000.04ms      0.0
PING				   589	  20	  620 1053.25ms      0.0
				v_scan_query_quota := FALSE;
REPL Capture/Apply: RAC AQ	    11	 100	  620	56.38 s      0.0
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
heartbeat redo informer 	   620	   0	  620 1000.15ms      0.0
ASM cluster membership cha	   354	  85	  620 1750.41ms      0.0
lreg timer			   206	 100	  619 3002.65ms      0.0
				v_scan_query_quota := TRUE;
SCM slave idle			 6,226	   0	  618	99.29ms      0.1

Background Wait Events			   DB/Inst: P80DB/p80db1  Snaps: 55-56
			END IF;
-> ordered by wait time desc, waits desc (idle events last)
-> Only events with Total Wait Time (s) >= .001 are shown
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0
		END IF;

						Total
				       %Time	 Wait		   Waits   % bg
Event				 Waits -outs Time (s)  Avg wait     /txn   time

-------------------------- ----------- ----- -------- --------- -------- ------
pman timer			   206	 100	  618 2999.73ms      0.0
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
Streams AQ: qmn coordinato	    44	   0	  616	14.00 s      0.0
Streams AQ: qmn slave idle	    22	   0	  616	28.00 s      0.0
	ELSE
		--
dispatcher timer		    10	 100	  600	60.01 s      0.0
		-- Do an UPDATE statement
Data Guard: Timer		     1	   0	  600  600.00 s      0.0
LGWR worker group idle		54,329	   0	  454	 8.36ms      0.5
smon timer			    40	   0	  293 7324.12ms      0.0
		--
jobq slave wait 		   283	  99	  141  498.54ms      0.0
PX Deq: Parse Reply		   189	   0	    3	13.27ms      0.0
PX Deq: Execute Reply		   588	   0	    1	 1.93ms      0.0

PX Deq Credit: send blkd	   225	   0	    0	 1.15ms      0.0
RMA: IPC0 completion sync	 1,074	   0	    0	46.31us      0.0
SQL*Net message from clien	    68	   0	    0  374.21us      0.0
		v_my_serial := v_my_serial + v_loop_cnt ;
			  ------------------------------------------------------


Wait Event Histogram			   DB/Inst: P80DB/p80db1  Snaps: 55-56

-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds
-> % of Total Waits: value of .0 indicates value was <.05%;
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
   value of null is truly 0
-> Ordered by Event (idle events last)

		--
						 % of Total Waits
				 -----------------------------------------------
			   Total
Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
		-- Increment count of UPDATES and set UPDATE quota flag if needed
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
AQ: RAC AQ Network	    6176	  .0  88.1   7.0   3.0	 1.2	.5    .2
		--
ASM IO for non-blocking p  85.3K    .2	70.8  13.4   4.9   5.2	 3.8   1.2    .5
ASM file metadata operati   3230  23.1	 1.3  34.6  11.1   6.0	 5.3   5.0  13.6
AWR Flush		       4 100.0
		v_updates_cnt := v_updates_cnt + 1;
CGS wait for IPC msg	    6345	 5.0  84.3   5.9   2.7	 1.3	.5    .2
CSS initialization	      32	      43.8   3.1   3.1		    50.0
CSS operation: action	      78	16.7   1.3	   1.3	       1.3  79.5

CSS operation: data query     19				      21.1  78.9
CSS operation: data updat     22				       4.5  95.5
CSS operation: query	      96  70.8	10.4	     1.0	 1.0	    16.7
DFS lock handle 	     144				      17.4  82.6
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
DLM cross inst call compl     93	 4.3  19.4   1.1   1.1	 5.4   4.3  64.5
Data file init write	      36					   100.0
Disk file Mirror Read	     869					   100.0
			v_update_quota := TRUE;
Disk file operations I/O     525   3.0	 5.7  12.2  11.8   3.4	38.1  20.4   5.3
GCR CSS group query	      19	68.4  31.6
GCR CSS group update	      20	95.0   5.0
		END IF;
IMR slave acknowledgement   1857	 7.7  10.2   3.6  15.6	19.3   7.3  36.4
IPC group service call	     911   1.0	 3.2  15.7  46.8  26.5	 4.9   1.2    .8
IPC send completion sync     763	      75.4   4.2   2.5	 4.2   6.4   7.3
KJC: Wait for msg sends t   7472		    18.9  39.3	 9.1   3.3  29.4
KSV master wait 	    1280	10.2  19.5   4.2   2.6	22.0   7.8  33.6
LGWR all worker groups	    3658		.0    .0	  .2	.2  99.6
	END IF ;
LGWR any worker group	   46.4K	  .1	.0    .1    .5	 1.1   2.3  96.0
LGWR wait for redo copy      475   4.4	 2.7   1.5   5.1  16.4	20.0  22.9  26.9
LGWR worker group orderin  12.3K    .3	  .4	.2    .4   1.5	 1.6   2.2  93.4
----------------------------------------------------------------------------------------------------------------------
PGA memory operation	     462  22.1	39.2  18.0   6.9   4.5	 4.3   1.5   3.5
PX Deq: Join ACK	     189	 1.1			       4.8  94.2
PX Deq: Signal ACK EXT	     189	 2.1  76.2   7.4   5.8	 2.6   3.2   2.6
PX Deq: Slave Session Sta    292	29.8   5.5    .3   1.4	 3.4  21.9  37.7
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
PX Deq: reap credit	   45.3K	 3.7  86.6   5.4   2.6	 1.1	.4    .2
PX qref latch		      14	71.4  28.6
----------------------------------------------------------------------------------------------------------------------
SQL*Net break/reset to cl    124  34.7	14.5	      .8  33.9	12.1   2.4   1.6
SQL*Net message to client    329  94.5	 1.8   1.2    .9   1.2	  .3
Sync ASM rebalance	      54	37.0	     7.4	       7.4  48.1

asynch descriptor resize      76  84.2	10.5   2.6   2.6
buffer busy waits	     493	 1.0   2.0   1.0   1.8	 1.8   1.8  90.5
buffer deadlock 	       2       100.0
control file parallel wri    375					   100.0
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
control file sequential r   4117	 6.3  12.8   1.0    .6	 3.6   2.8  72.8
datafile move cleanup dur     18				      66.7  33.3
db file async I/O submit   28.5K  93.1	 3.4	.8   1.4    .7	  .3	.2    .1
		--
db file parallel read	  674.3K					   100.0
db file parallel write	   88.6K	  .1	.3   3.3   5.2	 8.5   9.1  73.4
db file scattered read	      49					   100.0
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
db file sequential read     2.8M					   100.0
db file single write	      36					   100.0
direct path read	      14					   100.0
direct path sync	      40			  70.0	20.0  10.0
		-- so reset flags and counters before continuing
direct path write	      18					   100.0
direct path write temp	      57					   100.0
		--
enq: CF - contention	     103				       2.9  97.1
enq: CR - block range reu   2251		      .1    .2	  .1   6.0  93.7
enq: CT - state 	      18				       5.6  94.4
enq: DR - contention	       1					   100.0
		v_update_quota := FALSE;
enq: DW - contention	       1					   100.0
enq: FB - contention	      13					   100.0
enq: FD - Flashback logic      1					   100.0
		v_updates_cnt := 0;
enq: HW - contention	     465	  .4	.2    .2    .9	 1.7   3.7  92.9
enq: JS - job run lock -       1					   100.0

Wait Event Histogram			   DB/Inst: P80DB/p80db1  Snaps: 55-56
		v_selects_cnt := 0;
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds
	END IF;
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (idle events last)


						 % of Total Waits
				 -----------------------------------------------
			   Total
Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
enq: MV - datafile move        1					   100.0
enq: PS - contention	     112				       5.4  94.6
enq: RA - RT ADDM flood c      2					   100.0
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
enq: RO - fast object reu    172				  .6   9.9  89.5
enq: RP - contention	       1					   100.0
enq: SW - contention	       1					   100.0
enq: TA - contention	       1					   100.0
enq: TD - KTF dump entrie      1					   100.0
enq: TM - contention	      14				      14.3  85.7
enq: TO - contention	      38				      10.5  89.5
enq: TT - contention	       3					   100.0
enq: US - contention	    1307	 2.1   2.1    .7   8.4	14.6  14.2  57.9
enq: WF - contention	      14				      21.4  78.6
enq: WT - contention	       4				      25.0  75.0
		-- so reset flags and counters
gc buffer busy acquire	       1					   100.0
gc buffer busy release	      12	 8.3   8.3   8.3  33.3	 8.3   8.3  25.0
gc cr block 2-way	    1249			    .2	  .5  25.0  74.4
gc cr block busy	      60					   100.0
		v_scan_query_quota := FALSE;
gc cr block congested	       6					   100.0
gc cr block lost	    2002					   100.0
gc cr disk read 	      47				       2.1  97.9
		v_scan_queries_cnt := 0;
gc cr grant 2-way	  229.7K		      .1    .6	  .9  13.1  85.3
gc cr grant busy	    464K	  .0	.0    .0    .0	  .1   1.5  98.3
gc cr grant congested	    1440					.1  99.9
gc cr multi block grant   611.3K	  .0	.0    .0    .0	  .0	.5  99.5
		v_random_access_queries_cnt := 0;
gc cr multi block mixed      514					.4  99.6
gc current block 2-way	     631			    .3	  .2   7.3  92.2
gc current block busy	    1918		      .1    .5	  .3  12.5  86.8
	END IF;
gc current block congeste     10					   100.0
gc current block lost	    1842					   100.0
gc current grant 2-way	  210.6K		      .2    .6	  .8  12.4  86.0
gc current grant busy	  405.4K	  .0	.0    .0    .0	  .1   1.4  98.4

gc current grant congeste   1438					   100.0
gc current grant read-mos  14.5K			    .0	  .0	.1  99.9
gc current multi block re      3					   100.0
	v_loop_cnt := v_loop_cnt + 1 ;
gc current split	       4				      25.0  75.0
gc index operation	       6	16.7				    83.3
gcs log flush sync	     498	 2.0   5.0  14.1  14.5	22.9  18.5  23.1
ges inquiry response	     276				       9.8  90.2
	v_now := DBMS_UTILITY.GET_TIME();
ges resource directory to      4  75.0	      25.0
kfk: async disk IO	      36					   100.0
kjctssqmg: quick message       1				     100.0

ksxr poll remote instance   2997	      84.8   7.3   4.9	 1.9	.6    .4
latch free		    5620	 9.0   2.0   3.2  12.8	21.5  20.1  31.4
latch: MGA heap latch	       1       100.0
latch: MGA shared context      6	      16.7	  33.3	33.3  16.7
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
latch: MGA shared context     14				64.3  14.3  21.4
latch: cache buffers chai    159	18.9   1.9   7.5  11.9	19.5  15.1  25.2
latch: cache buffers lru     641	20.9   2.3   6.2  17.6	20.0  16.5  16.4
latch: call allocation	       3	33.3		  33.3	      33.3
		-- If this is a fixed-iteration count test cycle and we've hit the number of
latch: checkpoint queue l     26	15.4		  15.4	26.9  23.1  19.2
latch: enqueue hash chain    555	12.6	.9   3.4  14.4	18.0  20.4  30.3
latch: gc element	    1338	 3.3   1.0   3.1  10.1	17.9  25.6  38.9
latch: gcs resource hash    1533	11.4   2.5   5.2  17.2	25.6  19.0  19.2
latch: ges resource hash     112	 6.3	     3.6  17.0	23.2  21.4  28.6
latch: messages 	      64	14.1	     3.1   9.4	34.4  18.8  20.3
		-- iterations then set exit flag
latch: object queue heade     81	 4.9	     1.2   9.9	23.5  23.5  37.0
latch: redo allocation	     688	11.5   1.7   5.2  18.5	23.4  22.2  17.4
latch: redo writing	      38	26.3	     7.9   2.6	28.9  23.7  10.5
latch: session allocation      1       100.0
		v_stop_immediate := TRUE ;

Wait Event Histogram			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
	END IF;
   us is microseconds
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (idle events last)
END LOOP;

						 % of Total Waits
				 -----------------------------------------------

			   Total
Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
v_end_time := v_now ;
latch: shared pool	       4	      25.0		50.0  25.0
latch: undo global data       61	 8.2   3.3   4.9  18.0	27.9  24.6  13.1
libcache interrupt action    704  94.5	 4.1	.3    .4    .7
library cache lock	      46				      15.2  84.8
v_now := DBMS_UTILITY.GET_TIME();
library cache pin	      43				      25.6  74.4
library cache: mutex X	       2	50.0	    50.0
lock deadlock retry	    1840	 6.4  80.3   6.4   3.7	 2.0	.8    .5
log file parallel write      74K					   100.0
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
log file sequential read     405	       1.5  29.1   2.2	25.7   7.2  34.3
log file sync		      32					   100.0
name-service call wait	       2					   100.0

oracle thread bootstrap        4					   100.0
os thread creation	       4					   100.0
reliable message	     866					   100.0
row cache lock		      34					   100.0
v_total_time := v_end_time - v_begin_time ;
row cache mutex 	      20	10.0  10.0	   5.0		    75.0
undo segment extension	      38	18.4   7.9	   5.3		    68.4
undo_retention publish re      2  50.0	50.0
wait list latch free	       2					   100.0
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
AQPC idle		      21					   100.0
ASM background timer	    2294				10.6   8.2  81.1
ASM cluster membership ch    353					   100.0
DIAG idle wait		    8113		.0    .3    .6	  .3	.7  98.0
Data Guard: Gap Manager       11					   100.0
Data Guard: Timer	       1					   100.0
GCR sleep		    4116					   100.0
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
LGWR worker group idle	   54.2K   4.0	 4.7   1.7   6.8  14.0	 9.7   5.8  53.5
LMS CR slave timer	    185K					   100.0
OFS idle		     207					   100.0
PING			     589	       1.5  18.3  15.1	11.2  11.5  42.3
PX Deq Credit: need buffe     29	       3.4		24.1  51.7  20.7
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
PX Deq Credit: send blkd     300		     1.0   3.0	 8.7  20.7  66.7
PX Deq: Execute Reply	     588	24.8   4.9   6.0  10.2	 9.0   7.7  37.4
PX Deq: Execution Msg	     309		.3    .3	 2.9   9.4  87.1
PX Deq: Msg Fragment	     279  26.9	 3.6   1.1   3.6   2.2	 1.1  13.3  48.4

PX Deq: Parse Reply	     189	 4.2	.5    .5	 1.1   5.3  88.4
PX Idle Wait		     103					   100.0
REPL Capture/Apply: RAC A     11					   100.0
END;</pre_sqltext></td></tr>
RMA: IPC0 completion sync   1074	34.9  48.0   7.3   5.6	 2.0	.9   1.3
SCM slave idle		    6221					   100.0
SQL*Net message from clie    331			    .6	26.6  35.3  37.5
Space Manager: slave idle   6347	  .4	.2    .2    .5	  .6	.5  97.7
Streams AQ: qmn coordinat     44				31.8  13.6  54.5
<tr><td scope="row" class='awrc'><a class="awr" name="bhdvtsvjhgvrh"></a>bhdvtsvjhgvrh</td><td class='awrc'><pre_sqltext class="awr">SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
Streams AQ: qmn slave idl     22					   100.0
class slave wait	    7936	 2.9	.4   1.3   2.7	 2.2   1.1  89.4
dispatcher timer	      10					   100.0
gcs remote message	    3.1M	  .9   4.2  16.4  19.2	21.4  20.2  17.7
gcs yield cpu		   63.6K	 2.5	.2    .1    .0	  .0	.0  97.1
<tr><td scope="row" class='awrnc'><a class="awr" name="bsr5npqqpj681"></a>bsr5npqqpj681</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
ges remote message	   25.7K	 1.4   1.9    .7    .8	 2.4   5.7  87.1
heartbeat redo informer      619					   100.0
jobq slave wait 	     283					   100.0
v_default_schema_number PLS_INTEGER := '12';
lreg timer		     206					   100.0
pman timer		     207					   100.0
pmon timer		     413					   100.0
rdbms ipc message	  138.8K    .0	19.4	.8   2.3   4.0	 3.6   4.7  65.2
v_update_pct PLS_INTEGER := '15';
smon timer		      40					   100.0
wait for unread message o    950					   100.0
watchdog main loop	    1035					   100.0
			  ------------------------------------------------------

v_max_loop_iterations PLS_INTEGER := '0';

Wait Event Histogram (up to 64 us)	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
v_seconds_to_run PLS_INTEGER := '600';
   us is microseconds
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
v_scale PLS_INTEGER := '1048576';
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
				 -----------------------------------------------
v_work_unit PLS_INTEGER := '12' ;
			   Waits
			    1us
Event			  - 64us  <1us	<2us  <4us  <8us <16us <32us <64us >=64u
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
v_redo_stress  VARCHAR2(12) := 'LITE';
AQ: RAC AQ Network	    5875			    .0	88.1   7.0   4.9
ASM IO for non-blocking p  76.1K		      .2  70.8	13.4   4.9  10.8
ASM file metadata operati   2265		.0  23.0   1.3	34.6  11.1  29.9
AWR Flush		       4		   100.0
v_hot_schema_modulus PLS_INTEGER := '0';
CGS wait for IPC msg	    6043			   5.0	84.3   5.9   4.8
CSS initialization	      15				43.8   3.1  53.1
CSS operation: action	      14			  16.7	 1.3	    82.1
CSS operation: query	      79	       2.1  68.8  10.4	       1.0  17.7
v_do_hotspot   VARCHAR(7) := 'FALSE';
DLM cross inst call compl     23			   4.3	19.4   1.1  75.3
Disk file operations I/O     172		     3.0   5.7	12.2  11.8  67.2
GCR CSS group query	      19			  68.4	31.6
GCR CSS group update	      20			  95.0	 5.0
v_hotspot_mb  NUMBER := '8';
IMR slave acknowledgement    399			   7.7	10.2   3.6  78.5
IPC group service call	     607		     1.0   3.2	15.7  46.8  33.4
IPC send completion sync     607				75.4   4.2  20.4
KJC: Wait for msg sends t   1411				      18.9  81.1
KSV master wait 	     435			  10.2	19.5   4.2  66.0
v_hotspot_offset_mb NUMBER := '16';
LGWR all worker groups	       2				  .0	.0  99.9
LGWR any worker group	      82			    .1	  .0	.1  99.8
LGWR wait for redo copy       65		     4.4   2.7	 1.5   5.1  86.3
LGWR worker group orderin    164		      .3    .4	  .2	.4  98.7
v_hotspot_modulus  PLS_INTEGER := '3';
PGA memory operation	     398		    22.1  39.2	18.0   6.9  13.9
PX Deq: Join ACK	       2			   1.1		    98.9
PX Deq: Signal ACK EXT	     162			   2.1	76.2   7.4  14.3

PX Deq: Slave Session Sta    104			  29.8	 5.5	.3  64.4
PX Deq: reap credit	   43.3K			   3.7	86.6   5.4   4.4
PX qref latch		      14			  71.4	28.6
SQL*Net break/reset to cl     62		    34.7  14.5		.8  50.0
v_sleep_modulus PLS_INTEGER := '0';
SQL*Net message to client    324		.3  94.2   1.8	 1.2	.9   1.5
Sync ASM rebalance	      24			  37.0	       7.4  55.6
asynch descriptor resize      76		    84.2  10.5	 2.6   2.6
v_sleep_min NUMBER := '.1';
buffer busy waits	      20			   1.0	 2.0   1.0  95.9
buffer deadlock 	       2			 100.0
control file sequential r    829			   6.3	12.8   1.0  79.9
db file async I/O submit   28.2K		.0  93.1   3.4	  .8   1.4   1.3
v_sleep_max NUMBER := '.5';
db file parallel write	    3297			    .1	  .3   3.3  96.3
enq: CR - block range reu      2					.1  99.9
enq: HW - contention	       4			    .4	  .2	.2  99.1
enq: US - contention	      63			   2.1	 2.1	.7  95.2
v_scan_query_pct PLS_INTEGER := '0';
gc buffer busy release	       3			   8.3	 8.3   8.3  75.0
gc cr grant 2-way	     277					.1  99.9
gc cr grant busy	     184			    .0	  .0	.0 100.0
gc cr multi block grant       85			    .0	  .0	.0 100.0
gc current block busy	       1					.1  99.9
gc current grant 2-way	     489					.2  99.8
gc current grant busy	     172			    .0	  .0	.0 100.0
gc index operation	       1			  16.7		    83.3
gcs log flush sync	     105			   2.0	 5.0  14.1  78.9
ges resource directory to      4		    75.0	25.0
ksxr poll remote instance   2762				84.8   7.3   7.8
latch free		     799			   9.0	 2.0   3.2  85.8
latch: MGA heap latch	       1			 100.0
v_obfuscate VARCHAR(5)	:= 'FALSE';
latch: MGA shared context      1				16.7	    83.3
latch: cache buffers chai     45			  18.9	 1.9   7.5  71.7
latch: cache buffers lru     189			  20.9	 2.3   6.2  70.5
latch: call allocation	       1			  33.3		    66.7

latch: checkpoint queue l      4			  15.4		    84.6
latch: enqueue hash chain     94			  12.6	  .9   3.4  83.1
latch: gc element	     100			   3.3	 1.0   3.1  92.5
latch: gcs resource hash     291			  11.4	 2.5   5.2  81.0


Wait Event Histogram (up to 64 us)	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

						 % of Total Waits
				 -----------------------------------------------
			   Waits
			    1us
Event			  - 64us  <1us	<2us  <4us  <8us <16us <32us <64us >=64u
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
latch: ges resource hash      11			   6.3	       3.6  90.2
latch: messages 	      11			  14.1	       3.1  82.8

latch: object queue heade      5			   4.9	       1.2  93.8
latch: redo allocation	     127			  11.5	 1.7   5.2  81.5
latch: redo writing	      13			  26.3	       7.9  65.8
latch: session allocation      1			 100.0
v_num_tmp NUMBER := 0;
latch: shared pool	       1				25.0	    75.0
latch: undo global data       10			   8.2	 3.3   4.9  83.6
libcache interrupt action    699	       1.1  93.3   4.1	  .3	.4    .7
library cache: mutex X	       2			  50.0	      50.0

lock deadlock retry	    1712			   6.4	80.3   6.4   7.0
log file sequential read     124				 1.5  29.1  69.4
row cache mutex 	       4			  10.0	10.0	    80.0
v_loop_cnt PLS_INTEGER := 0;
undo segment extension	      10			  18.4	 7.9	    73.7
undo_retention publish re      2		    50.0  50.0
			  ------------------------------------------------------


v_rowcnt PLS_INTEGER := 0;
Wait Event Histogram (up to 32 ms)	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds,
v_updates_cnt PLS_INTEGER := 0;
   ms is 1024 microseconds (approximately 1 millisecond)
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
v_selects_cnt PLS_INTEGER := 0;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
				 -----------------------------------------------

			   Waits
			    1ms
Event			  to 32m  <512	<1ms  <2ms  <4ms  <8ms <16ms <32ms >=32m
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
v_random_access_queries_cnt PLS_INTEGER := 0;
AQ: RAC AQ Network	      13  99.8	  .1	.1    .0	  .0
ASM IO for non-blocking p    448  99.5	  .4	.1    .0    .0	  .0
ASM file metadata operati    419  86.4	  .8   2.4   4.1   3.9	 1.2	.5    .6
CGS wait for IPC msg	      15  99.8	  .2	.0    .0
v_scan_queries_cnt PLS_INTEGER := 0;
CSS initialization	      16  50.0			   3.1	40.6   6.3
CSS operation: action	      62  20.5	29.5  32.1  17.9
CSS operation: data query     15  21.1	15.8  26.3  36.8
CSS operation: data updat     21   4.5	50.0  31.8   9.1   4.5

CSS operation: query	      16  83.3	 1.0  13.5   1.0   1.0
DFS lock handle 	     118  17.4	52.1  27.1   2.8		      .7
DLM cross inst call compl     44  35.5	30.1  10.8   4.3	       2.2  17.2
Data file init write	      24				30.6  36.1  33.3
v_do_scan_query BOOLEAN :=FALSE;
Disk file Mirror Read	     831		    53.7  15.3	 7.9  18.6   4.4
Disk file operations I/O      28  94.7	 3.8	.2    .4    .2		.8
IMR slave acknowledgement    634  63.6	 2.3	.7  15.2   7.5	 2.0   6.4   2.3
IPC group service call	       7  99.2	  .7	.1
v_scan_query_quota  BOOLEAN := FALSE;
IPC send completion sync      55  92.7	 5.0   2.1    .1		      .1
KJC: Wait for msg sends t    199  70.6	 1.6	.8    .3    .0	  .0	    26.7
KSV master wait 	     414  66.4	 1.8   4.0  12.2   9.9	 3.2   1.3   1.3
LGWR all worker groups	    3618    .4	  .4   1.0  25.0  52.0	14.2   6.4    .7
v_scan_workload_only BOOLEAN := FALSE;
LGWR any worker group	   44.3K   4.0	 5.2  12.1  35.5  29.0	 8.0   5.6    .6
LGWR wait for redo copy      128  73.1	19.2   7.6    .2
LGWR worker group orderin  11.5K   6.6	 4.6  10.6  65.3  12.4	  .4	.1    .0
PGA memory operation	      16  96.5	 3.0	.4
v_random_workload_only BOOLEAN := FALSE;
PX Deq: Join ACK	     176   5.8	31.2  15.3  33.9  12.2	  .5	     1.1
PX Deq: Signal ACK EXT	       5  97.4	 1.6	.5    .5
PX Deq: Slave Session Sta    110  62.3	22.9  12.3   2.1    .3
PX Deq: reap credit	     107  99.8	  .2	.1    .0    .0

SQL*Net break/reset to cl      2  98.4	 1.6
Sync ASM rebalance	       8  51.9	11.1   1.9   1.9		    33.3
buffer busy waits	     155   9.5	 1.0   1.2   1.0   3.9	 9.1  15.2  59.0
control file parallel wri    272		     5.1  27.5	14.4  25.6  27.5

control file sequential r   2962  27.2	 1.0	.3  50.1  12.4	 3.2   4.9    .9
datafile move cleanup dur      6  66.7	33.3
db file async I/O submit      16  99.9	  .0	.0    .0
db file parallel read	  640.1K		    13.2  59.9	 5.9  15.9   5.1
v_random_block PLS_INTEGER := 1;
db file parallel write	   64.2K  26.6	13.4  18.0  19.5   9.8	 6.7   5.0   1.0
db file scattered read	      46		    53.1  20.4	10.2  10.2   6.1
db file sequential read     2.7M		    57.8  24.7	 3.6  11.0   2.9
db file single write	      28		    30.6  13.9	16.7  16.7  22.2
v_tmp PLS_INTEGER;
direct path read	      14		    85.7  14.3
direct path write	      13		    16.7  27.8	11.1  16.7  27.8
direct path write temp	      53		    31.6  33.3	14.0  14.0   7.0
v_now PLS_INTEGER;
enq: CF - contention	      97   2.9	54.4  30.1   8.7   1.0		     2.9
enq: CR - block range reu   1786   6.3	30.1  27.5   7.7   2.4	 4.3   7.3  14.3
enq: CT - state 	      17   5.6	44.4  38.9  11.1
enq: DR - contention	       1		   100.0
v_brick_wall PLS_INTEGER;
enq: DW - contention	       1			 100.0
enq: FB - contention	      13	76.9   7.7   7.7   7.7
enq: FD - Flashback logic      1	     100.0
enq: HW - contention	     107   7.1	 3.9   2.2   1.9   2.8	 4.5   7.7  69.9

enq: JS - job run lock -       1       100.0
enq: MV - datafile move        1       100.0
enq: PS - contention	     105   5.4	54.5  31.3   6.3   1.8		      .9
enq: RA - RT ADDM flood c      2	      50.0  50.0
v_begin_time PLS_INTEGER;
enq: RO - fast object reu    127  10.5	38.4  20.9   5.8   2.3	 4.7   1.7  15.7
enq: RP - contention	       1	     100.0
enq: SW - contention	       1	     100.0
enq: TA - contention	       1	     100.0
enq: TD - KTF dump entrie      1       100.0
v_end_time PLS_INTEGER;

Wait Event Histogram (up to 32 ms)	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
v_total_time PLS_INTEGER;
   us is microseconds,
   ms is 1024 microseconds (approximately 1 millisecond)
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
v_begin_cpu_tm PLS_INTEGER;
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
				 -----------------------------------------------
			   Waits
			    1ms
Event			  to 32m  <512	<1ms  <2ms  <4ms  <8ms <16ms <32ms >=32m
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
enq: TM - contention	      12  14.3	42.9  42.9
enq: TO - contention	      34  10.5	60.5  18.4  10.5
enq: TT - contention	       3	33.3  66.7
	v_loop_control := TRUE ;
enq: US - contention	     537  42.1	11.6   7.7   7.2   2.1	 4.6   8.0  16.8
enq: WF - contention	      11  21.4	28.6  42.9   7.1
enq: WT - contention	       3  25.0	25.0  25.0  25.0
END IF;
gc buffer busy acquire	       1	     100.0
gc buffer busy release	       3  75.0	 8.3	     8.3	       8.3
gc cr block 2-way	     929  25.6	34.5  31.9   7.4    .5	  .2

gc cr block busy	      60	 3.3   5.0  16.7  28.3	43.3   3.3
gc cr block congested	       6	      16.7  33.3  33.3	16.7
gc cr disk read 	      46   2.1	19.1  29.8  36.2  12.8
IF ( v_update_pct = 0 ) 	  THEN
gc cr grant 2-way	    196K  14.7	38.9  36.5   9.0    .8	  .1	.0    .0
gc cr grant busy	  455.4K   1.7	16.1  40.8  32.3   8.0	  .8	.0    .2
gc cr grant congested	    1439    .1	      12.5  59.9  24.8	 2.7
	v_select_only_workload := TRUE;
gc cr multi block grant   604.7K    .5	 7.6  31.4  42.9  15.2	 1.6	.1    .5
gc cr multi block mixed      484    .4	 6.4  30.2  43.6  12.6	 1.4	     5.4
gc current block 2-way	     581   7.8	39.1  35.8  16.3    .8		      .2
END IF;
gc current block busy	    1664  13.2	38.0  37.0   9.2   2.0	  .4	.2
gc current block congeste     10	      20.0  50.0  30.0
gc current grant 2-way	    181K  14.0	37.7  35.6  10.3   2.0	  .3	.0    .0

gc current grant busy	  398.1K   1.6	15.9  41.2  32.2   7.9	  .9	.0    .2
gc current grant congeste   1434	  .2   9.0  53.3  29.7	 7.1	.4    .3
gc current grant read-mos  14.4K    .1	 7.7  34.1  41.8  14.3	 1.5	.1    .2
IF ( v_update_pct = 100 )	  THEN
gc current multi block re      3	66.7  33.3
gc current split	       3  25.0	25.0		  50.0
gc index operation	       5  16.7	50.0			33.3
	v_update_only_workload := TRUE;
gcs log flush sync	     115  76.9	 8.2   2.2   6.2   5.0	 1.0	.4
ges inquiry response	     249   9.8	40.9  39.9   8.7    .4	  .4
kfk: async disk IO	      35		    66.7  16.7	 5.6   8.3   2.8
END IF;
ksxr poll remote instance     11  99.6	  .4

latch free		    1762  68.6	14.3  11.1   5.2    .6
latch: MGA shared context      3  78.6	14.3   7.1
latch: cache buffers chai     40  74.8	17.6   5.7   1.9
IF ( v_scan_query_pct = 0 ) 	THEN
latch: cache buffers lru     105  83.6	11.5   3.9    .9
latch: checkpoint queue l      5  80.8	11.5   7.7
latch: enqueue hash chain    168  69.7	14.1  11.9   4.0    .4
	v_random_workload_only := TRUE;
latch: gc element	     520  61.1	22.0  10.9   4.9    .7	  .3
latch: gcs resource hash     295  80.8	12.1   5.7   1.3    .1
latch: ges resource hash      32  71.4	21.4   5.4   1.8
latch: messages 	      13  79.7	14.1   6.3
END IF;
latch: object queue heade     30  63.0	28.4   8.6
latch: redo allocation	     120  82.6	10.9   5.4    .9    .3
latch: redo writing	       4  89.5	10.5
latch: undo global data        8  86.9	 8.2   4.9
library cache lock	      39  15.2	41.3  32.6   6.5	 4.3
library cache pin	      31  25.6	39.5  18.6  11.6   2.3		     2.3

lock deadlock retry	       9  99.5	  .3	.2
log file parallel write    72.3K		     8.7  44.4	36.5   8.2   2.3
log file sequential read     139  65.7	13.3  19.3   1.5    .2
log file sync		      32		    43.8  21.9	34.4
name-service call wait	       2	      50.0  50.0
oracle thread bootstrap        4				     100.0
IF ( v_scan_query_pct = 100 ) 	THEN
os thread creation	       4	      25.0  75.0
reliable message	     852	 4.4   6.2  35.8  45.7	 6.0	.2   1.6
row cache lock		      34	29.4  41.2  20.6   8.8
row cache mutex 	      15  25.0				70.0   5.0
undo segment extension	      18  31.6				26.3  21.1  21.1
wait list latch free	       2	     100.0
	v_scan_workload_only := TRUE;
			  ------------------------------------------------------


END IF;
Wait Event Histogram (up to 2 sec)	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:

   ms is milliseconds
   s is 1024 milliseconds (approximately 1 second)
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
v_seconds_to_run := v_seconds_to_run * 100 ;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)


						 % of Total Waits
				 -----------------------------------------------
			   Waits
			   64ms
Event			   to 2s <32ms <64ms <1/8s <1/4s <1/2s	 <1s   <2s  >=2s
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
ASM file metadata operati     18  99.4	  .3	.2    .1		      .0
DFS lock handle 	       1  99.3			    .7

DLM cross inst call compl     16  82.8	 2.2   8.6   4.3   1.1	 1.1
Data file init write	      12  66.7	27.8   5.6
Disk file Mirror Read	      38  95.6	 4.4
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
IMR slave acknowledgement     42  97.7	 2.3
IPC send completion sync       1  99.9				  .1
KJC: Wait for msg sends t   1997  73.3			  26.4	  .3
KSV master wait 	      15  98.8	  .6	.4    .2		      .1
-- DBMS_RANDOM.seed (val =&gt; v_seed);
LGWR all worker groups	      25  99.3	  .7
LGWR any worker group	     292  99.4	  .6	.0    .0
LGWR worker group orderin      2 100.0	  .0	      .0

PX Deq: Join ACK	       1  98.9				  .5	      .5
Sync ASM rebalance	      18  66.7	14.8   9.3   9.3
buffer busy waits	     291  41.0	21.1  14.4   6.9   8.9	 7.3	.4
v_begin_time := DBMS_UTILITY.GET_TIME();
control file parallel wri    103  72.5	14.9   9.3   3.2
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
control file sequential r     37  99.1	  .9	.0
db file parallel read	   34.2K  94.9	 5.0	.0    .0    .0
db file parallel write	     909  99.0	 1.0	.0    .0
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
db file scattered read	       3  93.9	 6.1
db file sequential read    81.5K  97.1	 2.9	.0    .0    .0
db file single write	       8  77.8	 8.3  11.1   2.8

direct path write	       5  72.2	 5.6  22.2
direct path write temp	       4  93.0	 7.0
enq: CF - contention	       3  97.1		     1.9   1.0
----------------------------------------------------------------------------------------------------------------------
enq: CR - block range reu    323  85.7	 6.0   3.8   2.8   1.2	  .4	.0
enq: HW - contention	     325  30.1	12.7  11.2  15.1  18.7	10.5   1.7
enq: PS - contention	       1  99.1				  .9
enq: RO - fast object reu     27  84.3	 5.8   4.7   3.5   1.2	  .6
-- The following WHILE loop is the master work loop control
enq: US - contention	     220  83.2	 9.0   2.9   2.2    .4	 1.2   1.1
----------------------------------------------------------------------------------------------------------------------
gc cr block lost	    2002			  50.1	49.9
gc cr grant 2-way	      56 100.0				  .0
gc cr grant busy	     864  99.8	  .0	.1    .0	  .1	.0
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
gc cr multi block grant     3339  99.5	  .0	.4    .0	  .1	.0
gc cr multi block mixed       28  94.6		.2	   1.0	 4.3
gc current block 2-way	       1  99.8				  .2

gc current block lost	    1842			  48.7	51.3
gc current grant 2-way	      79 100.0	  .0	.0		  .0	.0
gc current grant busy	     891  99.8	  .0	.1    .0	  .1	.0
gc current grant congeste      4  99.7		.1		  .1
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
gc current grant read-mos     36  99.8	  .0	.2
kfk: async disk IO	       1  97.2	 2.8
library cache pin	       1  97.7		     2.3
log file parallel write     1673  97.7	 2.2	.0    .0
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
reliable message	      14  98.4	  .6	.1    .1    .7		.1
undo segment extension	       8  78.9	15.8   2.6   2.6
			  ------------------------------------------------------

			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );

Wait Event Histogram (up to 2 min)	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
-> Units for % of Total Waits:
   s is 1024 milliseconds (approximately 1 second)
   m is 64*1024 milliseconds (approximately 67 seconds or 1.12 minutes)
-> % of Total Waits: total waits for all wait classes, including Idle
			DBMS_LOCK.SLEEP(v_num_tmp);
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)
		END IF;

						 % of Total Waits
				 -----------------------------------------------
			   Waits
	END IF;
			    4s
Event			   to 2m   <2s	 <4s   <8s  <16s  <32s	< 1m  < 2m  >=2m
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----

ASM file metadata operati      1 100.0		.0
KSV master wait 	       1  99.9		.1
PX Deq: Join ACK	       1  99.5	  .5
			  ------------------------------------------------------

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema

Wait Event Histogram (up to 1 hr)	   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			  ------------------------------------------------------


Service Statistics			   DB/Inst: P80DB/p80db1  Snaps: 55-56
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
-> ordered by DB Time

							   Physical	 Logical
Service Name		      DB Time (s)   DB CPU (s)	  Reads (K)    Reads (K)
---------------------------- ------------ ------------ ------------ ------------
p80db.example.com		   36,864	 2,710	      8,805	  11,554
SYS$BACKGROUND				2	     2		  2	      78
SYS$USERS				0	     0		  0	       1
p80dbXDB				0	     0		  0	       0
			  ------------------------------------------------------

Service Wait Class Stats		   DB/Inst: P80DB/p80db1  Snaps: 55-56
			v_sharing_schema := TRUE ;
-> Wait Class info for services in the Service Statistics section.
-> Total Waits and Time Waited displayed for the following wait
   classes:  User I/O, Concurrency, Administrative, Network
-> Time Waited (Wt Time) in seconds
		ELSE

Service Name
----------------------------------------------------------------
 User I/O  User I/O  Concurcy  Concurcy     Admin     Admin   Network	Network
Total Wts   Wt Time Total Wts	Wt Time Total Wts   Wt Time Total Wts	Wt Time
--------- --------- --------- --------- --------- --------- --------- ---------
p80db.example.com
  3452952     26687	  650	     64 	1	  0	  162	      0
SYS$BACKGROUND
    87509	 20	  844	      0 	0	  0	  881	      0
SYS$USERS
       55	  0	   16	      0 	0	  0	  130	      0
			  ------------------------------------------------------

Top 10 Channel Waits			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Top 10 Channel Waits by wait time

Channel
			IF ( v_sharing_schema = TRUE ) THEN
----------------------------------------------------------------
	       Total
		Wait
      Waits Time (s)  Avg Wait
----------- -------- ---------
				EXECUTE IMMEDIATE v_home_schema_str;
MMON remote action broadcast channel
	  1	   0	9.49ms
GEN0 ksbxic channel
	 10	   0	2.31ms
				v_sharing_schema := FALSE;
kxfp control signal channel
	 96	   0	1.36ms
obj broadcast channel
	 54	   1   16.06ms
			END IF;
RBR channel
	723	   8   11.40ms
			  ------------------------------------------------------


		END IF;
Top Process Types by Wait Class 	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> This table displays top process types ordered by wait class

	END IF;
Proce Description		     Wait Class Type  Wait Time (sec
----- ------------------------------ ---------------- --------------
      Others (foregrounds + unclassi User I/O		    26,792.8
      Others (foregrounds + unclassi Cluster		     8,053.7

LG    Log Writer Slave		     System I/O 	       733.6
      Others (foregrounds + unclassi Other		       708.1
LGWR  Redo etc. 		     Other		       276.0
      Others (foregrounds + unclassi Configuration	       100.1
	-- Choose the random block. The v_do_hotspot handler that follows can override.
DBW0  db writer process 0	     System I/O 		90.6
DBW3  db writer process 3	     System I/O 		86.8
DBW2  db writer process 2	     System I/O 		85.7
DBW1  db writer process 1	     System I/O 		85.3
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
      Others (foregrounds + unclassi Concurrency		64.1
LG    Log Writer Slave		     Other			35.6
SMON  System Monitor Process	     Other			33.2
CKPT  checkpoint		     System I/O 		13.6

O     ASM Connection Pool	     Other			 9.8
M     MMON slave class 1	     Other			 9.1
M     MMON slave class 1	     User I/O			 9.0
RMS0  rac management server	     System I/O 		 8.0
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
DBW0  db writer process 0	     Other			 7.0
LMON  global enqueue service monitor Other			 6.8
			  ------------------------------------------------------


		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
Top Process Types by CPU Used		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> This table displays top process types ordered by CPU time

Proces Description		      CPU Time (sec)
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
------ ------------------------------ --------------
       Others (foregrounds + unclassi	     2,713.7
LM     global cache service process	     1,053.6
LG     Log Writer Slave 			46.6
VKTM   Virtual Keeper of TiMe process		41.1
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
DBW0   db writer process 0			29.3
DBW3   db writer process 3			28.7
DBW1   db writer process 1			28.6
DBW2   db writer process 2			28.5
	END IF;
LGWR   Redo etc.				21.6
RS*    GCS RM Slave				18.4
M      MMON slave class 1			15.1
CR*    GCS CR Slave				11.8

P      Parallel query slave			 8.3
GCR    GCR Slaves (LMHB)			 4.5
IPC0   IPC Service 0				 4.2
DIA0   diagnosibility process 0 		 2.9
----------------------------------------------------------------------------------------------------------------------
LMD0   global enqueue service daemon		 2.8
O      ASM Connection Pool			 2.8
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
SCM    DLM Statistics Collection and		 2.5
LMHB   lm heartbeat monitor			 2.3
			  ------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------
SQL ordered by Elapsed Time		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.

-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
	IF  ( v_select_only_workload = TRUE ) THEN
-> Captured SQL account for   97.3% of Total DB Time (s):	   37,002
-> Captured PL/SQL account for	 65.6% of Total DB Time (s):	      37,002

	Elapsed 		 Elapsed Time
		-- handle case where user specified zero pct updates (a SELECT-only workload)
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------
	23,326.1	672,439 	 0.03	63.0	7.7   74.1 bhdvtsvjhgvrh
Module: SQL*Plus
		v_do_update := FALSE;
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

	12,674.3	118,760 	 0.11	34.3	5.6   72.9 35dumc2tpr9dv
Module: SQL*Plus
		v_update_quota := TRUE ;
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

	   567.2	      1        567.18	 1.5	7.5   72.5 f5bd91b8pq2rp
	ELSE
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '87'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		IF ( v_update_only_workload = TRUE ) THEN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   566.4	      1        566.44	 1.5	7.4   71.5 dn5ztpzaw0pcu
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_red
			-- handle case where user specified 100% updates
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

	   566.0	      1        566.03	 1.5	7.3   71.8 a7ng116w7tgbq
Module: SQL*Plus
			v_do_update := TRUE;
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
			v_update_quota := FALSE;

	   565.8	      1        565.81	 1.5	7.4   70.9 9uvmr65d5xzyk
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
		ELSE
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
	   565.5	      1        565.52	 1.5	7.2   72.2 dsjqgbvpsxkp0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '96'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   565.5	      1        565.51	 1.5	7.3   73.0 0bwq9jnxx14ju
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '88'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   565.5	      1        565.50	 1.5	7.3   69.7 6a6qafya34rwa
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			IF ( v_update_quota = FALSE ) THEN
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

	   565.5	      1        565.49	 1.5	7.3   70.0 bgxwnc1uyqzrn
Module: SQL*Plus

SQL ordered by Elapsed Time		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
				-- Handle case where user has set UPDATE_PCT to a valid value
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   97.3% of Total DB Time (s):	   37,002
-> Captured PL/SQL account for	 65.6% of Total DB Time (s):	      37,002

				--
	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
				-- We are doing updates during this run and quota has not been met yet
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   565.5	      1        565.47	 1.5	7.3   70.3 d2zxvj6ss17k6
				-- We still vacillate until update quota has been met
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '70'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   565.5	      1        565.46	 1.5	7.4   72.0 g1c8c2wjv67ct
Module: SQL*Plus
				IF ( MOD(v_random_block,  2) = 0 ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
					v_do_update := TRUE;
				ELSE
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   565.4	      1        565.35	 1.5	7.4   73.6 ffv31a3nd2hp7
Module: SQL*Plus
					v_do_update := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
				END IF;

	   564.9	      1        564.88	 1.5	7.4   69.5 5kxrur91u9gs0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
			ELSE
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   564.6	      1        564.63	 1.5	7.4   71.0 dn3tm10dh39sj
				-- UPDATE quota has been filled,  force drain some SELECTs
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '32'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
				v_do_update := FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   564.5	      1        564.49	 1.5	7.4   69.9 44w94s3knytqw
Module: SQL*Plus
			END IF;
DECLARE v_default_schema_number PLS_INTEGER := '89'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		END IF;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   564.5	      1        564.47	 1.5	7.4   73.2 50jfcpqbqagtc
Module: SQL*Plus
	END IF;
DECLARE v_default_schema_number PLS_INTEGER := '94'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


	   564.4	      1        564.43	 1.5	6.7   95.6 7u664zdtgwt9d
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '60'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
----------------------------------------------------------------------------------------------------------------------
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

SQL ordered by Elapsed Time		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-- The type of SQL is now determined...execute it in the following section
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
----------------------------------------------------------------------------------------------------------------------
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   97.3% of Total DB Time (s):	   37,002

-> Captured PL/SQL account for	 65.6% of Total DB Time (s):	      37,002

	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------
	IF ( v_do_update != TRUE ) THEN

	   564.4	      1        564.41	 1.5	7.6   72.8 7rfsk00ahr6jt
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=
		--
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   564.4	      1        564.41	 1.5	7.4   72.7 91t7vqx3c4v6g
		-- Do a SELECT statement
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '81'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		-- Work out scan or random
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   564.4	      1        564.40	 1.5	7.5   69.1 drkwgbbjkvcaj
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   564.3	      1        564.34	 1.5	7.3   74.4 7kqv52xz3bbhp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '99'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		IF  ( v_random_workload_only = TRUE ) THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   564.3	      1        564.33	 1.5	7.4   71.5 9srhzg8u9vjsp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '33'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
	   564.3	      1        564.33	 1.5	7.4   71.2 g5565fvd0c1fr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   564.3	      1        564.31	 1.5	7.2   70.1 cz8nw7wxr6q6a
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '93'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   564.3	      1        564.26	 1.5	7.5   76.2 94v3428qavp80
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '72'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			v_do_scan_query := FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   564.2	      1        564.23	 1.5	7.3   73.4 cyxm2z08gakb0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=
			v_scan_query_quota := TRUE ;

SQL ordered by Elapsed Time		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
		ELSE
-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
			IF ( v_scan_workload_only = TRUE ) THEN
-> Captured SQL account for   97.3% of Total DB Time (s):	   37,002
-> Captured PL/SQL account for	 65.6% of Total DB Time (s):	      37,002

	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
---------------- -------------- ------------- ------ ------ ------ -------------
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
				v_do_scan_query := TRUE;

	   564.1	      1        564.07	 1.5	7.5   71.6 3u87drbcgrv1a
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '71'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
				v_scan_query_quota := FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   563.8	      1        563.76	 1.5	7.2   71.2 5sdw02fvh7gku
			ELSE
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '69'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
				IF ( v_scan_query_quota = FALSE ) THEN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   563.8	      1        563.76	 1.5	7.7   63.9 5krxnvhvxxszv
Module: SQL*Plus
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
DECLARE v_default_schema_number PLS_INTEGER := '26'; v_update_pct PLS_INTEGER :=
		END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
	END IF ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   563.8	      1        563.76	 1.5	7.4   72.7 bdq8dvq79a34v
Module: SQL*Plus
----------------------------------------------------------------------------------------------------------------------
DECLARE v_default_schema_number PLS_INTEGER := '100'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	   563.6	      1        563.63	 1.5	7.5   70.3 4nb55sh3050s4
Module: SQL*Plus
----------------------------------------------------------------------------------------------------------------------
DECLARE v_default_schema_number PLS_INTEGER := '101'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d


	   563.6	      1        563.56	 1.5	7.5   71.5 5cfpr7gtmu9ww
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '49'; v_update_pct PLS_INTEGER :=
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		--

	   563.5	      1        563.52	 1.5	7.5   71.6 5a3jn37nb1cg6
Module: SQL*Plus
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		-- so reset flags and counters before continuing
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   563.5	      1        563.51	 1.5	7.4   71.7 4sr03khtycy30
Module: SQL*Plus
		--
DECLARE v_default_schema_number PLS_INTEGER := '91'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		v_update_quota := FALSE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


		v_updates_cnt := 0;
SQL ordered by Elapsed Time		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
		v_selects_cnt := 0;
-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
	END IF;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   97.3% of Total DB Time (s):	   37,002

-> Captured PL/SQL account for	 65.6% of Total DB Time (s):	      37,002

	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
---------------- -------------- ------------- ------ ------ ------ -------------
	   563.4	      1        563.44	 1.5	7.5   64.1 9yraxx50ufhwk
Module: SQL*Plus
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		-- so reset flags and counters
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   563.4	      1        563.37	 1.5	7.6   70.7 9pyjpd8qx4zrm
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		v_scan_query_quota := FALSE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   563.3	      1        563.33	 1.5	7.6   72.5 3d08mtaxbsq1u
		v_scan_queries_cnt := 0;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '36'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		v_random_access_queries_cnt := 0;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   563.3	      1        563.29	 1.5	7.5   71.8 cum15qzq5hars
	END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '30'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	v_loop_cnt := v_loop_cnt + 1 ;
	   563.1	      1        563.13	 1.5	7.4   70.5 5hgphtrj7uqp2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '37'; v_update_pct PLS_INTEGER :=
	v_now := DBMS_UTILITY.GET_TIME();
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


	   563.1	      1        563.08	 1.5	7.5   69.2 8v9kvbuhhrtt6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN

	   563.0	      1        562.96	 1.5	7.5   71.4 31ahtjq5rj0wr
Module: SQL*Plus
		-- If this is a fixed-iteration count test cycle and we've hit the number of
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   562.8	      1        562.82	 1.5	7.6   72.6 fbdrcrjuy8a1m
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
		-- iterations then set exit flag
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		v_stop_immediate := TRUE ;
	   562.8	      1        562.81	 1.5	7.6   71.8 bsr5npqqpj681
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '12'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

SQL ordered by Elapsed Time		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
	END IF;
-> %Total - Elapsed Time  as a percentage of Total DB time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   97.3% of Total DB Time (s):	   37,002
END LOOP;
-> Captured PL/SQL account for	 65.6% of Total DB Time (s):	      37,002

	Elapsed 		 Elapsed Time

	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
v_end_time := v_now ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_now := DBMS_UTILITY.GET_TIME();
	   562.6	      1        562.61	 1.5	7.5   71.6 8pu3nqrvwp360
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '13'; v_update_pct PLS_INTEGER :=
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


			  ------------------------------------------------------


v_total_time := v_end_time - v_begin_time ;
SQL ordered by CPU Time 		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   92.1% of Total CPU Time (s):	     2,723
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
-> Captured PL/SQL account for	 66.0% of Total CPU Time (s):		2,723

v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

    CPU 		  CPU per	    Elapsed
END;</pre_sqltext></td></tr>
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
   1,793.2	672,439       0.00   65.9   23,326.1	7.7   74.1 bhdvtsvjhgvrh
<tr><td scope="row" class='awrc'><a class="awr" name="cum15qzq5hars"></a>cum15qzq5hars</td><td class='awrc'><pre_sqltext class="awr">DECLARE
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

v_default_schema_number PLS_INTEGER := '30';
     707.7	118,760       0.01   26.0   12,674.3	5.6   72.9 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
v_update_pct PLS_INTEGER := '15';
< :B1 )

      43.3	      1      43.34    1.6      563.8	7.7   63.9 5krxnvhvxxszv
Module: SQL*Plus
v_max_loop_iterations PLS_INTEGER := '0';
DECLARE v_default_schema_number PLS_INTEGER := '26'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
v_seconds_to_run PLS_INTEGER := '600';
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      42.9	      1      42.89    1.6      562.8	7.6   71.8 bsr5npqqpj681
Module: SQL*Plus
v_scale PLS_INTEGER := '1048576';
DECLARE v_default_schema_number PLS_INTEGER := '12'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
v_work_unit PLS_INTEGER := '12' ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      42.8	      1      42.77    1.6      564.4	7.6   72.8 7rfsk00ahr6jt
Module: SQL*Plus
v_redo_stress  VARCHAR2(12) := 'LITE';
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_hot_schema_modulus PLS_INTEGER := '0';

      42.6	      1      42.61    1.6      562.8	7.6   72.6 fbdrcrjuy8a1m
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
v_do_hotspot   VARCHAR(7) := 'FALSE';
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_hotspot_mb  NUMBER := '8';

      42.6	      1      42.58    1.6      563.4	7.6   70.7 9pyjpd8qx4zrm
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
v_hotspot_offset_mb NUMBER := '16';
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_hotspot_modulus  PLS_INTEGER := '3';

      42.6	      1      42.56    1.6      563.3	7.6   72.5 3d08mtaxbsq1u
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '36'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_sleep_modulus PLS_INTEGER := '0';
      42.5	      1      42.50    1.6      563.4	7.5   64.1 9yraxx50ufhwk
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
v_sleep_min NUMBER := '.1';
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_sleep_max NUMBER := '.5';
      42.5	      1      42.49    1.6      564.1	7.5   71.6 3u87drbcgrv1a
Module: SQL*Plus

SQL ordered by CPU Time 		   DB/Inst: P80DB/p80db1  Snaps: 55-56
v_scan_query_pct PLS_INTEGER := '0';
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   92.1% of Total CPU Time (s):	     2,723
-> Captured PL/SQL account for	 66.0% of Total CPU Time (s):		2,723
v_obfuscate VARCHAR(5)	:= 'FALSE';

    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id

---------- ------------ ---------- ------ ---------- ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '71'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      42.4	      1      42.45    1.6      563.6	7.5   71.5 5cfpr7gtmu9ww
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '49'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      42.4	      1      42.43    1.6      563.3	7.5   71.8 cum15qzq5hars

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '30'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_num_tmp NUMBER := 0;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      42.3	      1      42.31    1.6      564.4	7.5   69.1 drkwgbbjkvcaj

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
v_loop_cnt PLS_INTEGER := 0;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      42.3	      1      42.27    1.6      562.6	7.5   71.6 8pu3nqrvwp360
Module: SQL*Plus
v_rowcnt PLS_INTEGER := 0;
DECLARE v_default_schema_number PLS_INTEGER := '13'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_updates_cnt PLS_INTEGER := 0;

      42.3	      1      42.26    1.6      567.2	7.5   72.5 f5bd91b8pq2rp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '87'; v_update_pct PLS_INTEGER :=
v_selects_cnt PLS_INTEGER := 0;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


      42.2	      1      42.18    1.5      563.6	7.5   70.3 4nb55sh3050s4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '101'; v_update_pct PLS_INTEGER :
v_random_access_queries_cnt PLS_INTEGER := 0;
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

v_scan_queries_cnt PLS_INTEGER := 0;
      42.2	      1      42.18    1.5      564.3	7.5   76.2 94v3428qavp80
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '72'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_do_scan_query BOOLEAN :=FALSE;
      42.2	      1      42.17    1.5      563.0	7.5   71.4 31ahtjq5rj0wr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_scan_query_quota  BOOLEAN := FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

SQL ordered by CPU Time 		   DB/Inst: P80DB/p80db1  Snaps: 55-56
v_scan_workload_only BOOLEAN := FALSE;
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
v_random_workload_only BOOLEAN := FALSE;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   92.1% of Total CPU Time (s):	     2,723

-> Captured PL/SQL account for	 66.0% of Total CPU Time (s):		2,723

    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id

---------- ------------ ---------- ------ ---------- ------ ------ -------------

      42.1	      1      42.15    1.5      563.5	7.5   71.6 5a3jn37nb1cg6
Module: SQL*Plus
v_random_block PLS_INTEGER := 1;
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
v_tmp PLS_INTEGER;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      42.1	      1      42.08    1.5      565.8	7.4   70.9 9uvmr65d5xzyk
Module: SQL*Plus
v_now PLS_INTEGER;
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_brick_wall PLS_INTEGER;

      42.1	      1      42.07    1.5      563.1	7.5   69.2 8v9kvbuhhrtt6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      41.9	      1      41.93    1.5      566.4	7.4   71.5 dn5ztpzaw0pcu
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

v_begin_time PLS_INTEGER;
      41.9	      1      41.90    1.5      564.3	7.4   71.2 g5565fvd0c1fr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_end_time PLS_INTEGER;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      41.9	      1      41.89    1.5      565.4	7.4   73.6 ffv31a3nd2hp7
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_end_cpu_tm PLS_INTEGER;
      41.9	      1      41.89    1.5      564.9	7.4   69.5 5kxrur91u9gs0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_total_cpu_tm PLS_INTEGER;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


      41.9	      1      41.88    1.5      564.5	7.4   69.9 44w94s3knytqw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '89'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_do_sleeps BOOLEAN := FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_loop_control BOOLEAN := FALSE;
      41.9	      1      41.87    1.5      563.1	7.4   70.5 5hgphtrj7uqp2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '37'; v_update_pct PLS_INTEGER :=

v_update_quota BOOLEAN := FALSE;
SQL ordered by CPU Time 		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
v_select_only_workload BOOLEAN := FALSE;
-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   92.1% of Total CPU Time (s):	     2,723
v_update_only_workload BOOLEAN := FALSE;
-> Captured PL/SQL account for	 66.0% of Total CPU Time (s):		2,723

    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
v_do_update BOOLEAN := FALSE;
---------- ------------ ---------- ------ ---------- ------ ------ -------------
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
v_do_hot_schema BOOLEAN := FALSE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      41.9	      1      41.85    1.5      563.5	7.4   71.7 4sr03khtycy30
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '91'; v_update_pct PLS_INTEGER :=
v_stop_immediate BOOLEAN := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_sharing_schema BOOLEAN := FALSE;
      41.8	      1      41.84    1.5      563.8	7.4   72.7 bdq8dvq79a34v
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '100'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
v_seed VARCHAR2(128);
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

      41.8	      1      41.80    1.5      565.5	7.4   72.0 g1c8c2wjv67ct
v_home_schema_str VARCHAR2(80);
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
v_scratch VARCHAR2(200) ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      41.7	      1      41.75    1.5      564.6	7.4   71.0 dn3tm10dh39sj
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '32'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
v_cpu_pct NUMBER(6, 3);
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      41.7	      1      41.74    1.5      564.3	7.4   71.5 9srhzg8u9vjsp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '33'; v_update_pct PLS_INTEGER :=
v_my_serial NUMBER(16);
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


      41.7	      1      41.71    1.5      564.4	7.4   72.7 91t7vqx3c4v6g
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '81'; v_update_pct PLS_INTEGER :=
BEGIN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


      41.6	      1      41.60    1.5      564.5	7.4   73.2 50jfcpqbqagtc
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '94'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      41.4	      1      41.44    1.5      565.5	7.3   69.7 6a6qafya34rwa
EXECUTE IMMEDIATE v_home_schema_str;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_



SQL ordered by CPU Time 		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
IF ( v_hot_schema_modulus != 0 ) THEN
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   92.1% of Total CPU Time (s):	     2,723
-> Captured PL/SQL account for	 66.0% of Total CPU Time (s):		2,723
	v_do_hot_schema := TRUE;

    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
END IF;
      41.4	      1      41.37    1.5      565.5	7.3   70.0 bgxwnc1uyqzrn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      41.3	      1      41.27    1.5      565.5	7.3   73.0 0bwq9jnxx14ju
IF ( v_sleep_modulus != 0 )	  THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '88'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
	v_do_sleeps := TRUE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      41.2	      1      41.22    1.5      564.3	7.3   74.4 7kqv52xz3bbhp
Module: SQL*Plus
END IF;
DECLARE v_default_schema_number PLS_INTEGER := '99'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


      41.1	      1      41.14    1.5      566.0	7.3   71.8 a7ng116w7tgbq
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
IF ( v_max_loop_iterations &gt; 0 )  THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	v_loop_control := TRUE ;
      41.1	      1      41.13    1.5      564.2	7.3   73.4 cyxm2z08gakb0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      41.0	      1      41.03    1.5      565.5	7.3   70.3 d2zxvj6ss17k6

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '70'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
IF ( v_update_pct = 0 ) 	  THEN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      40.8	      1      40.75    1.5      563.8	7.2   71.2 5sdw02fvh7gku
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '69'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      40.7	      1      40.75    1.5      565.5	7.2   72.2 dsjqgbvpsxkp0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '96'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	v_select_only_workload := TRUE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

END IF;
      40.7	      1      40.74    1.5      564.3	7.2   70.1 cz8nw7wxr6q6a
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '93'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=


SQL ordered by CPU Time 		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   92.1% of Total CPU Time (s):	     2,723
IF ( v_update_pct = 100 )	  THEN
-> Captured PL/SQL account for	 66.0% of Total CPU Time (s):		2,723

    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
	v_update_only_workload := TRUE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

      37.6	      1      37.57    1.4      564.4	6.7   95.6 7u664zdtgwt9d
END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '60'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  ------------------------------------------------------


IF ( v_scan_query_pct = 0 ) 	THEN
SQL ordered by User I/O Wait Time	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
	v_random_workload_only := TRUE;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   98.8% of Total User I/O Wait Time (s):	      26
-> Captured PL/SQL account for	 64.9% of Total User I/O Wait Time (s):
END IF;

  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------

  17,281.0	672,439       0.03   64.4   23,326.1	7.7   74.1 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

IF ( v_scan_query_pct = 100 ) 	THEN
   9,240.9	118,760       0.08   34.4   12,674.3	5.6   72.9 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

     539.8	      1     539.84    2.0      564.4	6.7   95.6 7u664zdtgwt9d
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '60'; v_update_pct PLS_INTEGER :=
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
----------------------------------------------------------------------------------------------------------------------
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

-- The following section governs what the SQL execution will be (UPDATE or SELECT)
     429.8	      1     429.77    1.6      564.3	7.5   76.2 94v3428qavp80
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '72'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
----------------------------------------------------------------------------------------------------------------------
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


     419.7	      1     419.70    1.6      564.3	7.3   74.4 7kqv52xz3bbhp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '99'; v_update_pct PLS_INTEGER :=
	IF  ( v_select_only_workload = TRUE ) THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		-- handle case where user specified zero pct updates (a SELECT-only workload)
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		v_do_update := FALSE;
     416.4	      1     416.36    1.6      565.4	7.4   73.6 ffv31a3nd2hp7
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
		v_update_quota := TRUE ;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
	ELSE

     414.4	      1     414.42    1.5      564.2	7.3   73.4 cyxm2z08gakb0
Module: SQL*Plus
		IF ( v_update_only_workload = TRUE ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
			-- handle case where user specified 100% updates
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     413.4	      1     413.43    1.5      564.5	7.4   73.2 50jfcpqbqagtc
Module: SQL*Plus
			v_do_update := TRUE;
DECLARE v_default_schema_number PLS_INTEGER := '94'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
			v_update_quota := FALSE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     412.8	      1     412.79    1.5      565.5	7.3   73.0 0bwq9jnxx14ju
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '88'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		ELSE
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
     411.4	      1     411.42    1.5      567.2	7.5   72.5 f5bd91b8pq2rp
Module: SQL*Plus

SQL ordered by User I/O Wait Time	   DB/Inst: P80DB/p80db1  Snaps: 55-56
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
			IF ( v_update_quota = FALSE ) THEN
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   98.8% of Total User I/O Wait Time (s):	      26
				-- Handle case where user has set UPDATE_PCT to a valid value
-> Captured PL/SQL account for	 64.9% of Total User I/O Wait Time (s):

  User I/O		  UIO per	    Elapsed
				--
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '87'; v_update_pct PLS_INTEGER :=
				-- We are doing updates during this run and quota has not been met yet
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

				-- We still vacillate until update quota has been met
     410.8	      1     410.80    1.5      564.4	7.6   72.8 7rfsk00ahr6jt
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
				IF ( MOD(v_random_block,  2) = 0 ) THEN

     410.2	      1     410.24    1.5      564.4	7.4   72.7 91t7vqx3c4v6g
Module: SQL*Plus
					v_do_update := TRUE;
DECLARE v_default_schema_number PLS_INTEGER := '81'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
				ELSE
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     409.8	      1     409.84    1.5      563.8	7.4   72.7 bdq8dvq79a34v
					v_do_update := FALSE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '100'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
				END IF;
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

			ELSE
     408.6	      1     408.59    1.5      562.8	7.6   72.6 fbdrcrjuy8a1m
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
				-- UPDATE quota has been filled,  force drain some SELECTs
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
				v_do_update := FALSE;

     408.3	      1     408.27    1.5      565.5	7.2   72.2 dsjqgbvpsxkp0
Module: SQL*Plus
			END IF;
DECLARE v_default_schema_number PLS_INTEGER := '96'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		END IF;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     408.2	      1     408.16    1.5      563.3	7.6   72.5 3d08mtaxbsq1u
Module: SQL*Plus
	END IF;
DECLARE v_default_schema_number PLS_INTEGER := '36'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     407.1	      1     407.11    1.5      565.5	7.4   72.0 g1c8c2wjv67ct
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
----------------------------------------------------------------------------------------------------------------------
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     406.5	      1     406.48    1.5      566.0	7.3   71.8 a7ng116w7tgbq
Module: SQL*Plus
-- The type of SQL is now determined...execute it in the following section
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

SQL ordered by User I/O Wait Time	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   98.8% of Total User I/O Wait Time (s):	      26
-> Captured PL/SQL account for	 64.9% of Total User I/O Wait Time (s):

  User I/O		  UIO per	    Elapsed
----------------------------------------------------------------------------------------------------------------------
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------

     405.0	      1     404.99    1.5      566.4	7.4   71.5 dn5ztpzaw0pcu
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=

'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

     404.2	      1     404.23    1.5      563.3	7.5   71.8 cum15qzq5hars
	IF ( v_do_update != TRUE ) THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '30'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     404.0	      1     404.03    1.5      564.1	7.5   71.6 3u87drbcgrv1a
		--
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '71'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		-- Do a SELECT statement
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		-- Work out scan or random
     404.0	      1     404.02    1.5      562.8	7.6   71.8 bsr5npqqpj681
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '12'; v_update_pct PLS_INTEGER :=
		IF  ( v_random_workload_only = TRUE ) THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
     403.8	      1     403.78    1.5      563.5	7.4   71.7 4sr03khtycy30
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '91'; v_update_pct PLS_INTEGER :=
			v_do_scan_query := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			v_scan_query_quota := TRUE ;
     403.5	      1     403.50    1.5      563.5	7.5   71.6 5a3jn37nb1cg6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
		ELSE
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			IF ( v_scan_workload_only = TRUE ) THEN
     403.2	      1     403.22    1.5      564.3	7.4   71.5 9srhzg8u9vjsp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '33'; v_update_pct PLS_INTEGER :=
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     402.7	      1     402.73    1.5      563.6	7.5   71.5 5cfpr7gtmu9ww
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '49'; v_update_pct PLS_INTEGER :=
				v_do_scan_query := TRUE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
     402.7	      1     402.65    1.5      562.6	7.5   71.6 8pu3nqrvwp360
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '13'; v_update_pct PLS_INTEGER :=

SQL ordered by User I/O Wait Time	   DB/Inst: P80DB/p80db1  Snaps: 55-56
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
						v_do_scan_query := TRUE;
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   98.8% of Total User I/O Wait Time (s):	      26
-> Captured PL/SQL account for	 64.9% of Total User I/O Wait Time (s):
					ELSE

  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
						v_do_scan_query := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
					END IF;

     401.7	      1     401.69    1.5      563.0	7.5   71.4 31ahtjq5rj0wr
Module: SQL*Plus
				ELSE
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     401.5	      1     401.55    1.5      564.3	7.4   71.2 g5565fvd0c1fr
					-- Scan quota has been filled,	force drain some random access SELECTS
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
					v_do_scan_query := FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
				END IF;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     401.4	      1     401.39    1.5      563.8	7.2   71.2 5sdw02fvh7gku
Module: SQL*Plus
			END IF;
DECLARE v_default_schema_number PLS_INTEGER := '69'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		END IF;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     401.4	      1     401.37    1.5      565.8	7.4   70.9 9uvmr65d5xzyk
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     401.2	      1     401.15    1.5      564.6	7.4   71.0 dn3tm10dh39sj
Module: SQL*Plus
		IF ( v_do_scan_query != TRUE ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '32'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
			SELECT COUNT(c2) INTO v_rowcnt
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     398.4	      1     398.40    1.5      563.4	7.6   70.7 9pyjpd8qx4zrm
Module: SQL*Plus
			FROM cf1
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

     397.7	      1     397.71    1.5      565.5	7.3   70.3 d2zxvj6ss17k6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '70'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     397.2	      1     397.23    1.5      563.1	7.4   70.5 5hgphtrj7uqp2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '37'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;


SQL ordered by User I/O Wait Time	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Resources reported for PL/SQL code includes the resources used by all SQL
		ELSE
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
-> Captured SQL account for   98.8% of Total User I/O Wait Time (s):	      26
-> Captured PL/SQL account for	 64.9% of Total User I/O Wait Time (s):


  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
     396.2	      1     396.20    1.5      563.6	7.5   70.3 4nb55sh3050s4
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '101'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :

= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

     396.1	      1     396.10    1.5      565.5	7.3   70.0 bgxwnc1uyqzrn
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
				v_scan_query_quota := TRUE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			END IF;
     395.4	      1     395.38    1.5      564.3	7.2   70.1 cz8nw7wxr6q6a
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '93'; v_update_pct PLS_INTEGER :=
		END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


     394.6	      1     394.61    1.5      564.5	7.4   69.9 44w94s3knytqw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '89'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	ELSE
     394.2	      1     394.21    1.5      565.5	7.3   69.7 6a6qafya34rwa
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		--
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

		-- Do an UPDATE statement
     392.8	      1     392.76    1.5      564.9	7.4   69.5 5kxrur91u9gs0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		--
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


     390.0	      1     389.99    1.5      564.4	7.5   69.1 drkwgbbjkvcaj
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		v_my_serial := v_my_serial + v_loop_cnt ;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     389.5	      1     389.53    1.5      563.1	7.5   69.2 8v9kvbuhhrtt6

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     361.2	      1     361.22    1.3      563.4	7.5   64.1 9yraxx50ufhwk
Module: SQL*Plus
		--
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

SQL ordered by User I/O Wait Time	   DB/Inst: P80DB/p80db1  Snaps: 55-56
		-- Increment count of UPDATES and set UPDATE quota flag if needed
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
		--
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   98.8% of Total User I/O Wait Time (s):	      26
-> Captured PL/SQL account for	 64.9% of Total User I/O Wait Time (s):
		v_updates_cnt := v_updates_cnt + 1;

  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

     360.1	      1     360.14    1.3      563.8	7.7   63.9 5krxnvhvxxszv
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '26'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			v_update_quota := TRUE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  ------------------------------------------------------
		END IF;


SQL ordered by Gets			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Resources reported for PL/SQL code includes the resources used by all SQL
	END IF ;
   statements called by the code.
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
----------------------------------------------------------------------------------------------------------------------
-> Total Buffer Gets:	   11,686,333
-> Captured SQL account for   97.6% of Total

     Buffer		    Gets	      Elapsed
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------
  9,430,804	672,439 	14.0   80.7   23,326.1	 7.7  74.1 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

  1,927,195	118,760 	16.2   16.5   12,674.3	 5.6  72.9 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
    274,331	      1    274,331.0	2.3	 564.4	 6.7  95.6 7u664zdtgwt9d
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '60'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
----------------------------------------------------------------------------------------------------------------------
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    185,953	      1    185,953.0	1.6	 564.3	 7.5  76.2 94v3428qavp80
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '72'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN

    184,520	      1    184,520.0	1.6	 564.2	 7.3  73.4 cyxm2z08gakb0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=
		--
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
    180,732	      1    180,732.0	1.5	 563.5	 7.4  71.7 4sr03khtycy30
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '91'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		-- so reset flags and counters before continuing
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    180,646	      1    180,646.0	1.5	 563.3	 7.5  71.8 cum15qzq5hars
		--
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '30'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    178,548	      1    178,548.0	1.5	 564.4	 7.6  72.8 7rfsk00ahr6jt
Module: SQL*Plus
		v_update_quota := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		v_updates_cnt := 0;

    178,511	      1    178,511.0	1.5	 563.6	 7.5  71.5 5cfpr7gtmu9ww
		v_selects_cnt := 0;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '49'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    178,492	      1    178,492.0	1.5	 564.3	 7.3  74.4 7kqv52xz3bbhp

Module: SQL*Plus

SQL ordered by Gets			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Buffer Gets:	   11,686,333
-> Captured SQL account for   97.6% of Total
		v_scan_query_quota := FALSE;

     Buffer		    Gets	      Elapsed
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------
		v_scan_queries_cnt := 0;
DECLARE v_default_schema_number PLS_INTEGER := '99'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		v_random_access_queries_cnt := 0;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    178,348	      1    178,348.0	1.5	 562.6	 7.5  71.6 8pu3nqrvwp360
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '13'; v_update_pct PLS_INTEGER :=
	END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    178,256	      1    178,256.0	1.5	 563.5	 7.5  71.6 5a3jn37nb1cg6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	v_loop_cnt := v_loop_cnt + 1 ;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    178,241	      1    178,241.0	1.5	 566.4	 7.4  71.5 dn5ztpzaw0pcu
	v_now := DBMS_UTILITY.GET_TIME();
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_red

o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

    177,672	      1    177,672.0	1.5	 562.8	 7.6  71.8 bsr5npqqpj681
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '12'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
    176,996	      1    176,996.0	1.5	 563.3	 7.6  72.5 3d08mtaxbsq1u
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '36'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		-- If this is a fixed-iteration count test cycle and we've hit the number of
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    176,807	      1    176,807.0	1.5	 565.8	 7.4  70.9 9uvmr65d5xzyk
Module: SQL*Plus
		-- iterations then set exit flag
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		v_stop_immediate := TRUE ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    176,759	      1    176,759.0	1.5	 563.4	 7.6  70.7 9pyjpd8qx4zrm
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
	END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
END LOOP;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    176,722	      1    176,722.0	1.5	 565.5	 7.3	73 0bwq9jnxx14ju
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '88'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_end_time := v_now ;
SQL ordered by Gets			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
v_now := DBMS_UTILITY.GET_TIME();
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Buffer Gets:	   11,686,333
-> Captured SQL account for   97.6% of Total
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

     Buffer		    Gets	      Elapsed
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------


    176,024	      1    176,024.0	1.5	 564.5	 7.4  73.2 50jfcpqbqagtc
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '94'; v_update_pct PLS_INTEGER :=
v_total_time := v_end_time - v_begin_time ;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    175,549	      1    175,549.0	1.5	 563.1	 7.4  70.5 5hgphtrj7uqp2
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '37'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    175,492	      1    175,492.0	1.5	 564.6	 7.4	71 dn3tm10dh39sj
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '32'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    174,670	      1    174,670.0	1.5	 564.3	 7.4  71.2 g5565fvd0c1fr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    174,317	      1    174,317.0	1.5	 563.0	 7.5  71.4 31ahtjq5rj0wr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="cyxm2z08gakb0"></a>cyxm2z08gakb0</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '79';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_seconds_to_run PLS_INTEGER := '600';

    174,138	      1    174,138.0	1.5	 564.1	 7.5  71.6 3u87drbcgrv1a
Module: SQL*Plus
v_scale PLS_INTEGER := '1048576';
DECLARE v_default_schema_number PLS_INTEGER := '71'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
v_work_unit PLS_INTEGER := '12' ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    173,198	      1    173,198.0	1.5	 563.6	 7.5  70.3 4nb55sh3050s4
Module: SQL*Plus
v_redo_stress  VARCHAR2(12) := 'LITE';
DECLARE v_default_schema_number PLS_INTEGER := '101'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
v_hot_schema_modulus PLS_INTEGER := '0';
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

v_do_hotspot   VARCHAR(7) := 'FALSE';
    172,798	      1    172,798.0	1.5	 565.5	 7.3	70 bgxwnc1uyqzrn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_hotspot_mb  NUMBER := '8';
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_hotspot_offset_mb NUMBER := '16';
    172,688	      1    172,688.0	1.5	 565.5	 7.3  70.3 d2zxvj6ss17k6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '70'; v_update_pct PLS_INTEGER :=

v_hotspot_modulus  PLS_INTEGER := '3';
SQL ordered by Gets			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.

-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Buffer Gets:	   11,686,333
v_sleep_modulus PLS_INTEGER := '0';
-> Captured SQL account for   97.6% of Total

     Buffer		    Gets	      Elapsed
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_sleep_min NUMBER := '.1';
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    172,564	      1    172,564.0	1.5	 567.2	 7.5  72.5 f5bd91b8pq2rp
v_sleep_max NUMBER := '.5';
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '87'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
v_scan_query_pct PLS_INTEGER := '0';
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    172,407	      1    172,407.0	1.5	 565.5	 7.2  72.2 dsjqgbvpsxkp0
Module: SQL*Plus
v_obfuscate VARCHAR(5)	:= 'FALSE';
DECLARE v_default_schema_number PLS_INTEGER := '96'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    172,304	      1    172,304.0	1.5	 563.8	 7.4  72.7 bdq8dvq79a34v
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '100'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    171,542	      1    171,542.0	1.5	 566.0	 7.3  71.8 a7ng116w7tgbq
Module: SQL*Plus
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    171,028	      1    171,028.0	1.5	 565.5	 7.4	72 g1c8c2wjv67ct
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=
v_num_tmp NUMBER := 0;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    170,086	      1    170,086.0	1.5	 562.8	 7.6  72.6 fbdrcrjuy8a1m
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    169,767	      1    169,767.0	1.5	 563.8	 7.2  71.2 5sdw02fvh7gku
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '69'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
v_loop_cnt PLS_INTEGER := 0;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    169,122	      1    169,122.0	1.4	 565.4	 7.4  73.6 ffv31a3nd2hp7
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
v_rowcnt PLS_INTEGER := 0;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_updates_cnt PLS_INTEGER := 0;

SQL ordered by Gets			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Resources reported for PL/SQL code includes the resources used by all SQL
v_selects_cnt PLS_INTEGER := 0;
   statements called by the code.
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time

-> Total Buffer Gets:	   11,686,333
-> Captured SQL account for   97.6% of Total

     Buffer		    Gets	      Elapsed
v_random_access_queries_cnt PLS_INTEGER := 0;
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------
    167,457	      1    167,457.0	1.4	 564.4	 7.4  72.7 91t7vqx3c4v6g
v_scan_queries_cnt PLS_INTEGER := 0;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '81'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    167,190	      1    167,190.0	1.4	 564.4	 7.5  69.1 drkwgbbjkvcaj
v_do_scan_query BOOLEAN :=FALSE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    166,583	      1    166,583.0	1.4	 564.3	 7.4  71.5 9srhzg8u9vjsp
v_scan_query_quota  BOOLEAN := FALSE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '33'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_scan_workload_only BOOLEAN := FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    165,454	      1    165,454.0	1.4	 565.5	 7.3  69.7 6a6qafya34rwa
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
v_random_workload_only BOOLEAN := FALSE;
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_


    164,735	      1    164,735.0	1.4	 563.1	 7.5  69.2 8v9kvbuhhrtt6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_random_block PLS_INTEGER := 1;

    164,407	      1    164,407.0	1.4	 564.9	 7.4  69.5 5kxrur91u9gs0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
v_tmp PLS_INTEGER;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
v_now PLS_INTEGER;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    163,595	      1    163,595.0	1.4	 564.3	 7.2  70.1 cz8nw7wxr6q6a
Module: SQL*Plus
v_brick_wall PLS_INTEGER;
DECLARE v_default_schema_number PLS_INTEGER := '93'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    161,801	      1    161,801.0	1.4	 564.5	 7.4  69.9 44w94s3knytqw
Module: SQL*Plus
v_begin_time PLS_INTEGER;
DECLARE v_default_schema_number PLS_INTEGER := '89'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    146,485	      1    146,485.0	1.3	 563.8	 7.7  63.9 5krxnvhvxxszv
Module: SQL*Plus
v_end_time PLS_INTEGER;
DECLARE v_default_schema_number PLS_INTEGER := '26'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

SQL ordered by Gets			   DB/Inst: P80DB/p80db1  Snaps: 55-56
v_total_time PLS_INTEGER;
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
v_begin_cpu_tm PLS_INTEGER;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Buffer Gets:	   11,686,333
-> Captured SQL account for   97.6% of Total
v_end_cpu_tm PLS_INTEGER;

     Buffer		    Gets	      Elapsed
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------
v_total_cpu_tm PLS_INTEGER;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    140,279	      1    140,279.0	1.2	 563.4	 7.5  64.1 9yraxx50ufhwk
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_do_sleeps BOOLEAN := FALSE;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  ------------------------------------------------------
	v_do_hot_schema := TRUE;


SQL ordered by Reads			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> %Total - Physical Reads as a percentage of Total Disk Reads
END IF;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	   8,848,730
-> Captured SQL account for   99.0% of Total

   Physical		 Reads		    Elapsed

      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------
  7,441,806	672,439       11.1   84.1   23,326.1	7.7   74.1 bhdvtsvjhgvrh
Module: SQL*Plus
IF ( v_sleep_modulus != 0 )	  THEN
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

  1,312,734	118,760       11.1   14.8   12,674.3	5.6   72.9 35dumc2tpr9dv
Module: SQL*Plus
	v_do_sleeps := TRUE;
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

    206,251	      1  206,251.0    2.3      564.4	6.7   95.6 7u664zdtgwt9d
END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '60'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    142,945	      1  142,945.0    1.6      564.3	7.5   76.2 94v3428qavp80
IF ( v_max_loop_iterations &gt; 0 )  THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '72'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
	v_loop_control := TRUE ;

    139,383	      1  139,383.0    1.6      564.2	7.3   73.4 cyxm2z08gakb0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=
END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    137,757	      1  137,757.0    1.6      564.3	7.3   74.4 7kqv52xz3bbhp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '99'; v_update_pct PLS_INTEGER :=
IF ( v_update_pct = 0 ) 	  THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	v_select_only_workload := TRUE;
    135,921	      1  135,921.0    1.5      565.5	7.3   73.0 0bwq9jnxx14ju
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '88'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    135,801	      1  135,801.0    1.5      563.5	7.4   71.7 4sr03khtycy30
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '91'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
IF ( v_update_pct = 100 )	  THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    135,640	      1  135,640.0    1.5      563.3	7.5   71.8 cum15qzq5hars
	v_update_only_workload := TRUE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '30'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
END IF;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    135,367	      1  135,367.0    1.5      564.5	7.4   73.2 50jfcpqbqagtc
Module: SQL*Plus


SQL ordered by Reads			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
IF ( v_scan_query_pct = 0 ) 	THEN
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	   8,848,730
-> Captured SQL account for   99.0% of Total

	v_random_workload_only := TRUE;
   Physical		 Reads		    Elapsed
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '94'; v_update_pct PLS_INTEGER :=
END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    135,362	      1  135,362.0    1.5      564.4	7.6   72.8 7rfsk00ahr6jt
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=
IF ( v_scan_query_pct = 100 ) 	THEN
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	v_scan_workload_only := TRUE;
    134,578	      1  134,578.0    1.5      563.3	7.6   72.5 3d08mtaxbsq1u
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '36'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    134,455	      1  134,455.0    1.5      563.5	7.5   71.6 5a3jn37nb1cg6

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_seconds_to_run := v_seconds_to_run * 100 ;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    134,189	      1  134,189.0    1.5      562.6	7.5   71.6 8pu3nqrvwp360

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '13'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    133,970	      1  133,970.0    1.5      562.8	7.6   71.8 bsr5npqqpj681
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '12'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
    133,909	      1  133,909.0    1.5      566.4	7.4   71.5 dn5ztpzaw0pcu
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
-- DBMS_RANDOM.seed (val =&gt; v_seed);
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

    133,862	      1  133,862.0    1.5      563.6	7.5   71.5 5cfpr7gtmu9ww
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '49'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    133,255	      1  133,255.0    1.5      565.8	7.4   70.9 9uvmr65d5xzyk
v_begin_time := DBMS_UTILITY.GET_TIME();
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
v_now := v_begin_time ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

SQL ordered by Reads			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> %Total - Physical Reads as a percentage of Total Disk Reads
v_brick_wall := v_now + v_seconds_to_run ;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	   8,848,730
-> Captured SQL account for   99.0% of Total

v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
   Physical		 Reads		    Elapsed
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------


    133,177	      1  133,177.0    1.5      565.5	7.2   72.2 dsjqgbvpsxkp0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '96'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    133,157	      1  133,157.0    1.5      567.2	7.5   72.5 f5bd91b8pq2rp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '87'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    132,779	      1  132,779.0    1.5      563.4	7.6   70.7 9pyjpd8qx4zrm
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
	-- Choose the random block. The v_do_hotspot handler that follows can override.
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    132,526	      1  132,526.0    1.5      565.4	7.4   73.6 ffv31a3nd2hp7
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    132,404	      1  132,404.0    1.5      563.0	7.5   71.4 31ahtjq5rj0wr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    132,389	      1  132,389.0    1.5      563.8	7.4   72.7 bdq8dvq79a34v
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '100'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

    132,335	      1  132,335.0    1.5      564.6	7.4   71.0 dn3tm10dh39sj
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '32'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;

    132,274	      1  132,274.0    1.5      564.3	7.4   71.2 g5565fvd0c1fr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
    132,184	      1  132,184.0    1.5      563.1	7.4   70.5 5hgphtrj7uqp2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '37'; v_update_pct PLS_INTEGER :=

SQL ordered by Reads			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	   8,848,730
-> Captured SQL account for   99.0% of Total

		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
   Physical		 Reads		    Elapsed
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	END IF;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    132,165	      1  132,165.0    1.5      564.1	7.5   71.6 3u87drbcgrv1a

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '71'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
----------------------------------------------------------------------------------------------------------------------
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    131,932	      1  131,932.0    1.5      566.0	7.3   71.8 a7ng116w7tgbq
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

----------------------------------------------------------------------------------------------------------------------
    131,567	      1  131,567.0    1.5      565.5	7.4   72.0 g1c8c2wjv67ct
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    131,302	      1  131,302.0    1.5      562.8	7.6   72.6 fbdrcrjuy8a1m
	IF  ( v_select_only_workload = TRUE ) THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		-- handle case where user specified zero pct updates (a SELECT-only workload)
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    130,799	      1  130,799.0    1.5      565.5	7.3   70.3 d2zxvj6ss17k6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '70'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		v_do_update := FALSE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    130,696	      1  130,696.0    1.5      565.5	7.3   70.0 bgxwnc1uyqzrn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
		v_update_quota := TRUE ;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	ELSE
    130,679	      1  130,679.0    1.5      564.4	7.4   72.7 91t7vqx3c4v6g
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '81'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		IF ( v_update_only_workload = TRUE ) THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    130,611	      1  130,611.0    1.5      563.8	7.2   71.2 5sdw02fvh7gku
Module: SQL*Plus
			-- handle case where user specified 100% updates
DECLARE v_default_schema_number PLS_INTEGER := '69'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			v_do_update := TRUE;

SQL ordered by Reads			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
			v_update_quota := FALSE;
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	   8,848,730
-> Captured SQL account for   99.0% of Total

   Physical		 Reads		    Elapsed
		ELSE
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------
    130,398	      1  130,398.0    1.5      563.6	7.5   70.3 4nb55sh3050s4
Module: SQL*Plus
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
DECLARE v_default_schema_number PLS_INTEGER := '101'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

			-- Work out whether this loop iteration is a SELECT or UPDATE here:
    128,977	      1  128,977.0    1.5      564.3	7.4   71.5 9srhzg8u9vjsp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '33'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			IF ( v_update_quota = FALSE ) THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    127,356	      1  127,356.0    1.4      565.5	7.3   69.7 6a6qafya34rwa
Module: SQL*Plus
				-- Handle case where user has set UPDATE_PCT to a valid value
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_red
				--
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

    127,025	      1  127,025.0    1.4      564.4	7.5   69.1 drkwgbbjkvcaj
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
				-- We are doing updates during this run and quota has not been met yet
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

				-- We still vacillate until update quota has been met
    126,650	      1  126,650.0    1.4      564.3	7.2   70.1 cz8nw7wxr6q6a
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '93'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    125,736	      1  125,736.0    1.4      564.9	7.4   69.5 5kxrur91u9gs0
Module: SQL*Plus
				IF ( MOD(v_random_block,  2) = 0 ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

					v_do_update := TRUE;
    125,419	      1  125,419.0    1.4      564.5	7.4   69.9 44w94s3knytqw
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '89'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
				ELSE
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    125,127	      1  125,127.0    1.4      563.1	7.5   69.2 8v9kvbuhhrtt6
Module: SQL*Plus
					v_do_update := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
				END IF;

    111,522	      1  111,522.0    1.3      563.8	7.7   63.9 5krxnvhvxxszv
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '26'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			ELSE

SQL ordered by Reads			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
				-- UPDATE quota has been filled,  force drain some SELECTs
-> Total Disk Reads:	   8,848,730
-> Captured SQL account for   99.0% of Total

   Physical		 Reads		    Elapsed
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
----------- ----------- ---------- ------ ---------- ------ ------ -------------
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		-- Do an UPDATE statement
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    108,723	      1  108,723.0    1.2      563.4	7.5   64.1 9yraxx50ufhwk
		--
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		v_my_serial := v_my_serial + v_loop_cnt ;
			  ------------------------------------------------------


SQL ordered by Physical Reads (UnOptimized)DB/Inst: P80DB/p80db1  Snaps: 55-56

-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
		--
-> Total Physical Read Requests:       8,847,855
-> Captured SQL account for    0.2% of Total
-> Total UnOptimized Read Requests:	  8,847,855
-> Captured SQL account for    0.2% of Total
		-- Increment count of UPDATES and set UPDATE quota flag if needed
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total

		--
UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
----------- ----------- ---------- ------------ ------ ------ -------------
		v_updates_cnt := v_updates_cnt + 1;
    206,251	206,251 	 1    206,251.0    0.0	  2.3 7u664zdtgwt9d
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '60'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
    142,945	142,945 	 1    142,945.0    0.0	  1.6 94v3428qavp80
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '72'; v_update_pct PLS_INTEGER :=
			v_update_quota := TRUE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		END IF;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    139,383	139,383 	 1    139,383.0    0.0	  1.6 cyxm2z08gakb0
Module: SQL*Plus
	END IF ;
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
----------------------------------------------------------------------------------------------------------------------
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    137,757	137,757 	 1    137,757.0    0.0	  1.6 7kqv52xz3bbhp
Module: SQL*Plus
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
DECLARE v_default_schema_number PLS_INTEGER := '99'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
----------------------------------------------------------------------------------------------------------------------

    135,921	135,921 	 1    135,921.0    0.0	  1.5 0bwq9jnxx14ju
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '88'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN

    135,801	135,801 	 1    135,801.0    0.0	  1.5 4sr03khtycy30
Module: SQL*Plus
		--
DECLARE v_default_schema_number PLS_INTEGER := '91'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,

    135,663	135,663 	 1    135,663.0    0.0	  1.5 cum15qzq5hars
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '30'; v_update_pct PLS_INTEGER :=
		-- so reset flags and counters before continuing
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		--

    135,367	135,367 	 1    135,367.0    0.0	  1.5 50jfcpqbqagtc
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '94'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		v_update_quota := FALSE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    135,362	135,362 	 1    135,362.0    0.0	  1.5 7rfsk00ahr6jt
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=
		v_updates_cnt := 0;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

SQL ordered by Physical Reads (UnOptimized)DB/Inst: P80DB/p80db1  Snaps: 55-56
		v_selects_cnt := 0;
-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
	END IF;
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
-> Total Physical Read Requests:       8,847,855
-> Captured SQL account for    0.2% of Total

-> Total UnOptimized Read Requests:	  8,847,855
-> Captured SQL account for    0.2% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
----------- ----------- ---------- ------------ ------ ------ -------------
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    134,601	134,601 	 1    134,601.0    0.0	  1.5 3d08mtaxbsq1u
Module: SQL*Plus
		-- so reset flags and counters
DECLARE v_default_schema_number PLS_INTEGER := '36'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		v_scan_query_quota := FALSE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    134,455	134,455 	 1    134,455.0    0.0	  1.5 5a3jn37nb1cg6
Module: SQL*Plus
		v_scan_queries_cnt := 0;
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    134,189	134,189 	 1    134,189.0    0.0	  1.5 8pu3nqrvwp360
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '13'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		v_random_access_queries_cnt := 0;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    134,016	134,016 	 1    134,016.0    0.0	  1.5 bsr5npqqpj681
Module: SQL*Plus
	END IF;
DECLARE v_default_schema_number PLS_INTEGER := '12'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    133,909	133,909 	 1    133,909.0    0.0	  1.5 dn5ztpzaw0pcu
Module: SQL*Plus
	v_loop_cnt := v_loop_cnt + 1 ;
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_red
	v_now := DBMS_UTILITY.GET_TIME();
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

    133,862	133,862 	 1    133,862.0    0.0	  1.5 5cfpr7gtmu9ww
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '49'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    133,278	133,278 	 1    133,278.0    0.0	  1.5 9uvmr65d5xzyk
Module: SQL*Plus
		-- If this is a fixed-iteration count test cycle and we've hit the number of
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
		-- iterations then set exit flag
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		v_stop_immediate := TRUE ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    133,180	133,180 	 1    133,180.0    0.0	  1.5 f5bd91b8pq2rp
Module: SQL*Plus
	END IF;
DECLARE v_default_schema_number PLS_INTEGER := '87'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
END LOOP;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    133,177	133,177 	 1    133,177.0    0.0	  1.5 dsjqgbvpsxkp0

v_end_time := v_now ;
SQL ordered by Physical Reads (UnOptimized)DB/Inst: P80DB/p80db1  Snaps: 55-56
-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
v_now := DBMS_UTILITY.GET_TIME();
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
-> Total Physical Read Requests:       8,847,855
-> Captured SQL account for    0.2% of Total
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
-> Total UnOptimized Read Requests:	  8,847,855
-> Captured SQL account for    0.2% of Total
-> Total Optimized Read Requests:		1

-> Captured SQL account for    0.0% of Total

UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
----------- ----------- ---------- ------------ ------ ------ -------------
v_total_time := v_end_time - v_begin_time ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '96'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    132,779	132,779 	 1    132,779.0    0.0	  1.5 9pyjpd8qx4zrm
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    132,526	132,526 	 1    132,526.0    0.0	  1.5 ffv31a3nd2hp7
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
END;</pre_sqltext></td></tr>
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    132,404	132,404 	 1    132,404.0    0.0	  1.5 31ahtjq5rj0wr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
<tr><td scope="row" class='awrc'><a class="awr" name="cz8nw7wxr6q6a"></a>cz8nw7wxr6q6a</td><td class='awrc'><pre_sqltext class="awr">DECLARE
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_default_schema_number PLS_INTEGER := '93';

    132,389	132,389 	 1    132,389.0    0.0	  1.5 bdq8dvq79a34v
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '100'; v_update_pct PLS_INTEGER :
v_update_pct PLS_INTEGER := '15';
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

v_max_loop_iterations PLS_INTEGER := '0';
    132,358	132,358 	 1    132,358.0    0.0	  1.5 dn3tm10dh39sj
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '32'; v_update_pct PLS_INTEGER :=
v_seconds_to_run PLS_INTEGER := '600';
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_scale PLS_INTEGER := '1048576';
    132,274	132,274 	 1    132,274.0    0.0	  1.5 g5565fvd0c1fr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
v_work_unit PLS_INTEGER := '12' ;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    132,184	132,184 	 1    132,184.0    0.0	  1.5 5hgphtrj7uqp2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '37'; v_update_pct PLS_INTEGER :=
v_redo_stress  VARCHAR2(12) := 'LITE';
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_hot_schema_modulus PLS_INTEGER := '0';
    132,165	132,165 	 1    132,165.0    0.0	  1.5 3u87drbcgrv1a
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '71'; v_update_pct PLS_INTEGER :=
v_do_hotspot   VARCHAR(7) := 'FALSE';
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re

SQL ordered by Physical Reads (UnOptimized)DB/Inst: P80DB/p80db1  Snaps: 55-56
v_hotspot_mb  NUMBER := '8';
-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
v_hotspot_offset_mb NUMBER := '16';
-> Total Physical Read Requests:       8,847,855
-> Captured SQL account for    0.2% of Total
-> Total UnOptimized Read Requests:	  8,847,855
-> Captured SQL account for    0.2% of Total
v_hotspot_modulus  PLS_INTEGER := '3';
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total

UnOptimized   Physical		    UnOptimized

  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
----------- ----------- ---------- ------------ ------ ------ -------------
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_sleep_modulus PLS_INTEGER := '0';
    131,932	131,932 	 1    131,932.0    0.0	  1.5 a7ng116w7tgbq
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
v_sleep_min NUMBER := '.1';
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

v_sleep_max NUMBER := '.5';
    131,567	131,567 	 1    131,567.0    0.0	  1.5 g1c8c2wjv67ct
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_scan_query_pct PLS_INTEGER := '0';
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    131,302	131,302 	 1    131,302.0    0.0	  1.5 fbdrcrjuy8a1m
v_obfuscate VARCHAR(5)	:= 'FALSE';
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    130,799	130,799 	 1    130,799.0    0.0	  1.5 d2zxvj6ss17k6

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '70'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    130,702	130,702 	 1    130,702.0    0.0	  1.5 91t7vqx3c4v6g
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '81'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    130,696	130,696 	 1    130,696.0    0.0	  1.5 bgxwnc1uyqzrn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    130,611	130,611 	 1    130,611.0    0.0	  1.5 5sdw02fvh7gku
Module: SQL*Plus
v_num_tmp NUMBER := 0;
DECLARE v_default_schema_number PLS_INTEGER := '69'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    130,398	130,398 	 1    130,398.0    0.0	  1.5 4nb55sh3050s4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '101'; v_update_pct PLS_INTEGER :
v_loop_cnt PLS_INTEGER := 0;
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

v_rowcnt PLS_INTEGER := 0;
    128,977	128,977 	 1    128,977.0    0.0	  1.5 9srhzg8u9vjsp
Module: SQL*Plus

SQL ordered by Physical Reads (UnOptimized)DB/Inst: P80DB/p80db1  Snaps: 55-56
v_updates_cnt PLS_INTEGER := 0;
-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
v_selects_cnt PLS_INTEGER := 0;
-> Total Physical Read Requests:       8,847,855
-> Captured SQL account for    0.2% of Total
-> Total UnOptimized Read Requests:	  8,847,855
-> Captured SQL account for    0.2% of Total

-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total

UnOptimized   Physical		    UnOptimized
v_random_access_queries_cnt PLS_INTEGER := 0;
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
----------- ----------- ---------- ------------ ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '33'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_scan_queries_cnt PLS_INTEGER := 0;
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    127,356	127,356 	 1    127,356.0    0.0	  1.4 6a6qafya34rwa

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_red
v_do_scan_query BOOLEAN :=FALSE;
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

    127,025	127,025 	 1    127,025.0    0.0	  1.4 drkwgbbjkvcaj
Module: SQL*Plus
v_scan_query_quota  BOOLEAN := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_scan_workload_only BOOLEAN := FALSE;

    126,673	126,673 	 1    126,673.0    0.0	  1.4 cz8nw7wxr6q6a
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '93'; v_update_pct PLS_INTEGER :=
v_random_workload_only BOOLEAN := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


    125,736	125,736 	 1    125,736.0    0.0	  1.4 5kxrur91u9gs0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    125,419	125,419 	 1    125,419.0    0.0	  1.4 44w94s3knytqw
Module: SQL*Plus
v_random_block PLS_INTEGER := 1;
DECLARE v_default_schema_number PLS_INTEGER := '89'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
v_tmp PLS_INTEGER;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    125,150	125,150 	 1    125,150.0    0.0	  1.4 8v9kvbuhhrtt6
Module: SQL*Plus
v_now PLS_INTEGER;
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
v_brick_wall PLS_INTEGER;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

    111,522	111,522 	 1    111,522.0    0.0	  1.3 5krxnvhvxxszv
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '26'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_begin_time PLS_INTEGER;

    108,769	108,769 	 1    108,769.0    0.0	  1.2 9yraxx50ufhwk
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
v_end_time PLS_INTEGER;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;

v_end_cpu_tm PLS_INTEGER;
SQL ordered by Physical Reads (UnOptimized)DB/Inst: P80DB/p80db1  Snaps: 55-56
-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
v_total_cpu_tm PLS_INTEGER;
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
-> Total Physical Read Requests:       8,847,855
-> Captured SQL account for    0.2% of Total
-> Total UnOptimized Read Requests:	  8,847,855

-> Captured SQL account for    0.2% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total

UnOptimized   Physical		    UnOptimized
v_do_sleeps BOOLEAN := FALSE;
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
----------- ----------- ---------- ------------ ------ ------ -------------

			  ------------------------------------------------------
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;


v_update_only_workload BOOLEAN := FALSE;
SQL ordered by Executions		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Executions:	     806,212
v_do_update BOOLEAN := FALSE;
-> Captured SQL account for   98.8% of Total

					      Elapsed
 Executions   Rows Processed  Rows per Exec   Time (s)	%CPU   %IO    SQL Id
------------ --------------- -------------- ---------- ----- ----- -------------
v_do_hot_schema BOOLEAN := FALSE;
     672,439	     672,480		1.0   23,326.1	 7.7  74.1 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

v_stop_immediate BOOLEAN := FALSE;
     118,760	   1,306,360	       11.0   12,674.3	 5.6  72.9 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

v_sharing_schema BOOLEAN := FALSE;
       2,078	       2,033		1.0	   0.2	99.1	 0 24djtk7r8fz33
update svcobj_access$ set accesses = :5, inc_no = :6 where name = :1 AND pdb = :
2 AND tsn = :3 AND objid = :4

v_seed VARCHAR2(128);
       1,403		  39		0.0	   0.1	74.8  24.7 87gaftwrm2h68
select o.owner#,o.name,o.namespace,o.remoteowner,o.linkname,o.subname from obj$
o where o.obj#=:1

	 343		 343		1.0	   0.1 103.4	 0 86708bvah4akq
v_home_schema_str VARCHAR2(80);
select name from undo$ where file#=:1 and block#=:2 and ts#=:3 and status$
 != 1

	 159		  84		0.5	   0.4	  11  87.2 acmvv4fhdc9zh
v_scratch VARCHAR2(200) ;
select obj#,type#,ctime,mtime,stime, status, dataobj#, flags, oid$, spare1, spar
e2, spare3, signature, spare7, spare8, spare9, nvl(dflcollid, 16382), creappid,
creverid, modappid, modverid, crepatchid, modpatchid from obj$ where owner#=:1 a
nd name=:2 and namespace=:3 and remoteowner is null and linkname is null and sub


	  94		  94		1.0	   0.3	12.4  16.3 f7xnvp44nukp7
insert into wrm$_snapshot_details (snap_id,dbid,instance_number,table_id,begin
v_cpu_pct NUMBER(6, 3);
_time,end_time,step_id) values (:snap_id,:dbid,:instance_number,:bind1,:bind2
,:bind3,:step_id)

	  89		  89		1.0	   0.2	12.3	73 grwydz59pu6mc
select text from view$ where rowid=:1
v_my_serial NUMBER(16);

	  65		  65		1.0	   0.1	76.4	 0 9babjv8yq8ru3
Module: SQL*Plus
BEGIN DBMS_OUTPUT.GET_LINES(:LINES, :NUMLINES); END;


	  65		  65		1.0	   0.1	17.5  68.2 fn5s5p6hr6702
INSERT INTO wri$_adv_message_groups (task_id,id,seq,message#,fac,hdr,lm,nl,p1,p2
,p3,p4,p5) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13)

BEGIN
			  ------------------------------------------------------


SQL ordered by Parse Calls		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Total Parse Calls:		4,644

-> Captured SQL account for   73.1% of Total

			    % Total
 Parse Calls  Executions     Parses    SQL Id
------------ ------------ --------- -------------
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
       2,078	    2,078     44.75 24djtk7r8fz33
update svcobj_access$ set accesses = :5, inc_no = :6 where name = :1 AND pdb = :
2 AND tsn = :3 AND objid = :4

	 343	      343      7.39 86708bvah4akq
EXECUTE IMMEDIATE v_home_schema_str;
select name from undo$ where file#=:1 and block#=:2 and ts#=:3 and status$
 != 1

	  94	       94      2.02 f7xnvp44nukp7
insert into wrm$_snapshot_details (snap_id,dbid,instance_number,table_id,begin

_time,end_time,step_id) values (:snap_id,:dbid,:instance_number,:bind1,:bind2
,:bind3,:step_id)

	  89	       89      1.92 grwydz59pu6mc

select text from view$ where rowid=:1

	  65	       65      1.40 9babjv8yq8ru3
Module: SQL*Plus
BEGIN DBMS_OUTPUT.GET_LINES(:LINES, :NUMLINES); END;

IF ( v_hot_schema_modulus != 0 ) THEN
	  65	       65      1.40 fn5s5p6hr6702
INSERT INTO wri$_adv_message_groups (task_id,id,seq,message#,fac,hdr,lm,nl,p1,p2
,p3,p4,p5) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13)

	v_do_hot_schema := TRUE;
	  50	       50      1.08 3un99a0zwp4vd
select owner#,name,namespace,remoteowner,linkname,p_timestamp,p_obj#, nvl(proper
ty,0),subname,type#,flags,d_attrs from dependency$ d, obj$ o where d_obj#=:1 and
 p_obj#=obj#(+) order by order#
END IF;

	  50	       50      1.08 8swypbbr0m372
select order#,columns,types from access$ where d_obj#=:1

	  49	       49      1.06 f80h0xb1qvbsk

SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual

	  45	       45      0.97 7hc9uvs2016m6
insert into svcobj_access$(name, pdb, tsn, objid, accesses, inc_no) values (:1,
:2, :3, :4, :5, :6)
IF ( v_sleep_modulus != 0 )	  THEN

			  ------------------------------------------------------


SQL ordered by Sharable Memory		   DB/Inst: P80DB/p80db1  Snaps: 55-56
	v_do_sleeps := TRUE;
-> Only Statements with Sharable Memory greater than 1048576 are displayed

Sharable Mem (b)  Executions   % Total	  SQL Id
---------------- ------------ -------- -------------
      13,232,809	    5	  1.18 9yv5dwv8k0awg
END IF;
WITH MONITOR_DATA AS (SELECT INST_ID, KEY, NVL2(PX_QCSID, NULL, STATUS) STATUS,
FIRST_REFRESH_TIME, LAST_REFRESH_TIME, REFRESH_COUNT, PROCESS_NAME, SID, SQL_ID,
 SQL_EXEC_START, SQL_EXEC_ID, DBOP_NAME, DBOP_EXEC_ID, SQL_PLAN_HASH_VALUE, SQL_
FULL_PLAN_HASH_VALUE, SESSION_SERIAL#, SQL_TEXT, PX_SERVER#, PX_SERVER_GROUP, PX


       4,176,676	    5	  0.37 atwuyuvqkf27w
SELECT /*+ OPT_PARAM('_fix_control' '16391176:1') */ GROUP_TYPE, BUCKET_START, B
UCKET_END, TM_GROUP_TYPE, TM_BUCKET_START, TM_BUCKET_END, SUM(TM_CPU_FIRST_BUCKE
IF ( v_max_loop_iterations &gt; 0 )  THEN
T_VALUE) TM_CPU_FIRST_BUCKET_VALUE, SUM(TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDD
LE_BUCKETS_VALUE, SUM(TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE, SUM(TM

       4,146,388	    1	  0.37 2xfg27zhudyay
WITH binds as (select :dbid as dbid ,
	v_loop_control := TRUE ;
:inst_id_low as instIdLow , :inst_id_high as i
nstIdHigh , :begin_snap as beginSnap ,
:end_snap as endSnap , :begin_time as beg

       4,070,480      118,760	  0.36 35dumc2tpr9dv
END IF;
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


       3,632,111      672,439	  0.32 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

IF ( v_update_pct = 0 ) 	  THEN
       2,916,904	    1	  0.26 9sq9djzzhr19y
WITH binds as (select :dbid as dbid ,
:inst_id_low as instIdLow , :inst_id_high as i
nstIdHigh , :begin_snap as beginSnap ,
:end_snap as endSnap , :begin_time as beg
	v_select_only_workload := TRUE;

       1,466,440	    1	  0.13 6zacqqnsf529a
WITH ash as (SELECT round((cast(sample_time as date) - :1) * 24 * 60 * 60,0) a
s t, inst_id || '_' || session_id || '_' || session_serial# as sid,
END IF;
 decode(session_type, 'FOREGROUND', 1, 0) as session_type, nvl(
sql_id,'null') as sql_id, nvl(sql_opcode,0) as sql_opcode, n

       1,192,636	    1	  0.11 fg11facbfjwvx
 SELECT /*+ no_monitor leading(mo_px) use_hash(mo_px) */ xm

lelement( "sql_monitor_list_report", xmlattributes(
 :report_version as "version",
 :total_count as "total_count", to

			  ------------------------------------------------------
IF ( v_update_pct = 100 )	  THEN


SQL ordered by Version Count		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Only Statements with Version Count greater than 20 are displayed

	v_update_only_workload := TRUE;
 Version
  Count   Executions	 SQL Id
-------- ------------ -------------
     124      672,439 bhdvtsvjhgvrh
Module: SQL*Plus
END IF;
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

     122      118,760 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID

< :B1 )

			  ------------------------------------------------------


IF ( v_scan_query_pct = 0 ) 	THEN
SQL ordered by Cluster Wait Time	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
	v_random_workload_only := TRUE;
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	  8,069
-> Captured SQL account for   99.1% of Total

END IF;
       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
       5,354.3	    672,439   66.4   23,326.1	23.0	7.7   74.1 bhdvtsvjhgvrh

Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

       2,643.1	    118,760   32.8   12,674.3	20.9	5.6   72.9 35dumc2tpr9dv
Module: SQL*Plus
IF ( v_scan_query_pct = 100 ) 	THEN
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

	 173.0		  1    2.1	563.4	30.7	7.5   64.1 9yraxx50ufhwk
Module: SQL*Plus
	v_scan_workload_only := TRUE;
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
				v_sharing_schema := FALSE;

	 170.0		  1    2.1	563.8	30.2	7.7   63.9 5krxnvhvxxszv
Module: SQL*Plus
			END IF;
DECLARE v_default_schema_number PLS_INTEGER := '26'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		END IF;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 142.2		  1    1.8	563.1	25.3	7.5   69.2 8v9kvbuhhrtt6
Module: SQL*Plus
	END IF;
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 140.9		  1    1.7	564.4	25.0	7.5   69.1 drkwgbbjkvcaj
	-- Choose the random block. The v_do_hotspot handler that follows can override.
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 139.1		  1    1.7	564.5	24.6	7.4   69.9 44w94s3knytqw
Module: SQL*Plus
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
DECLARE v_default_schema_number PLS_INTEGER := '89'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;

	 138.8		  1    1.7	565.5	24.5	7.3   70.0 bgxwnc1uyqzrn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	 137.8		  1    1.7	564.3	24.4	7.2   70.1 cz8nw7wxr6q6a
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '93'; v_update_pct PLS_INTEGER :=
	END IF;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do


	 137.8		  1    1.7	565.5	24.4	7.3   69.7 6a6qafya34rwa
Module: SQL*Plus

----------------------------------------------------------------------------------------------------------------------
SQL ordered by Cluster Wait Time	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	  8,069
----------------------------------------------------------------------------------------------------------------------
-> Captured SQL account for   99.1% of Total

       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id

-------------- ------------ ------ ---------- ------ ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	IF  ( v_select_only_workload = TRUE ) THEN
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

		-- handle case where user specified zero pct updates (a SELECT-only workload)
	 137.0		  1    1.7	564.9	24.3	7.4   69.5 5kxrur91u9gs0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
		v_do_update := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

		v_update_quota := TRUE ;
	 136.6		  1    1.7	563.8	24.2	7.2   71.2 5sdw02fvh7gku
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '69'; v_update_pct PLS_INTEGER :=
	ELSE
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
		IF ( v_update_only_workload = TRUE ) THEN

	 135.2		  1    1.7	565.5	23.9	7.3   70.3 d2zxvj6ss17k6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '70'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			-- handle case where user specified 100% updates
	 135.0		  1    1.7	563.6	24.0	7.5   70.3 4nb55sh3050s4
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '101'; v_update_pct PLS_INTEGER :
			v_do_update := TRUE;
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
			v_update_quota := FALSE;
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

	 134.9		  1    1.7	565.8	23.8	7.4   70.9 9uvmr65d5xzyk
		ELSE
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 134.5		  1    1.7	563.1	23.9	7.4   70.5 5hgphtrj7uqp2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '37'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 132.6		  1    1.6	566.4	23.4	7.4   71.5 dn5ztpzaw0pcu
Module: SQL*Plus
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_red
			IF ( v_update_quota = FALSE ) THEN
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

	 132.3		  1    1.6	564.3	23.4	7.4   71.2 g5565fvd0c1fr
Module: SQL*Plus
				-- Handle case where user has set UPDATE_PCT to a valid value
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
				--
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

SQL ordered by Cluster Wait Time	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
				-- We are doing updates during this run and quota has not been met yet
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
				-- We still vacillate until update quota has been met
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	  8,069
-> Captured SQL account for   99.1% of Total


       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
				IF ( MOD(v_random_block,  2) = 0 ) THEN

	 130.6		  1    1.6	564.6	23.1	7.4   71.0 dn3tm10dh39sj
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '32'; v_update_pct PLS_INTEGER :=
					v_do_update := TRUE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
				ELSE

	 129.8		  1    1.6	564.1	23.0	7.5   71.6 3u87drbcgrv1a
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '71'; v_update_pct PLS_INTEGER :=
					v_do_update := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
				END IF;

	 129.7		  1    1.6	563.0	23.0	7.5   71.4 31ahtjq5rj0wr
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
			ELSE
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
				-- UPDATE quota has been filled,  force drain some SELECTs

	 128.7		  1    1.6	564.3	22.8	7.4   71.5 9srhzg8u9vjsp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '33'; v_update_pct PLS_INTEGER :=
				v_do_update := FALSE;
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
			END IF;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 128.1		  1    1.6	563.4	22.7	7.6   70.7 9pyjpd8qx4zrm
Module: SQL*Plus
		END IF;
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
	END IF;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 128.1		  1    1.6	562.6	22.8	7.5   71.6 8pu3nqrvwp360
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '13'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
----------------------------------------------------------------------------------------------------------------------

	 127.4		  1    1.6	563.6	22.6	7.5   71.5 5cfpr7gtmu9ww
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '49'; v_update_pct PLS_INTEGER :=
-- The type of SQL is now determined...execute it in the following section
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

----------------------------------------------------------------------------------------------------------------------
	 125.6		  1    1.6	563.5	22.3	7.4   71.7 4sr03khtycy30
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '91'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	IF ( v_do_update != TRUE ) THEN
	 125.5		  1    1.6	566.0	22.2	7.3   71.8 a7ng116w7tgbq
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=

		--
SQL ordered by Cluster Wait Time	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
		-- Do a SELECT statement
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	  8,069
		-- Work out scan or random
-> Captured SQL account for   99.1% of Total

       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
		IF  ( v_random_workload_only = TRUE ) THEN
-------------- ------------ ------ ---------- ------ ------ ------ -------------
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 125.2		  1    1.6	567.2	22.1	7.5   72.5 f5bd91b8pq2rp
Module: SQL*Plus
			v_do_scan_query := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '87'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
			v_scan_query_quota := TRUE ;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 125.0		  1    1.5	565.5	22.1	7.4   72.0 g1c8c2wjv67ct
Module: SQL*Plus
		ELSE
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
			IF ( v_scan_workload_only = TRUE ) THEN
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
	 124.7		  1    1.5	564.4	22.1	7.4   72.7 91t7vqx3c4v6g
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '81'; v_update_pct PLS_INTEGER :=
			ELSE
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
				IF ( v_scan_query_quota = FALSE ) THEN

	 124.7		  1    1.5	565.5	22.0	7.2   72.2 dsjqgbvpsxkp0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '96'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
	 123.5		  1    1.5	564.4	21.9	7.6   72.8 7rfsk00ahr6jt
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 123.5		  1    1.5	563.3	21.9	7.5   71.8 cum15qzq5hars
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '30'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
						v_do_scan_query := TRUE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 123.3		  1    1.5	565.4	21.8	7.4   73.6 ffv31a3nd2hp7
Module: SQL*Plus
					ELSE
DECLARE v_default_schema_number PLS_INTEGER := '75'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
						v_do_scan_query := FALSE;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 123.0		  1    1.5	563.5	21.8	7.5   71.6 5a3jn37nb1cg6
Module: SQL*Plus
					END IF;
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do
				ELSE


SQL ordered by Cluster Wait Time	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
					-- Scan quota has been filled,	force drain some random access SELECTS
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
					v_do_scan_query := FALSE;
-> Total Cluster Wait Time (s): 	  8,069
-> Captured SQL account for   99.1% of Total

       Cluster			      Elapsed
				END IF;
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
	 122.5		  1    1.5	562.8	21.8	7.6   71.8 bsr5npqqpj681
			END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '12'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
		END IF;
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 122.3		  1    1.5	563.3	21.7	7.6   72.5 3d08mtaxbsq1u
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '36'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 122.2		  1    1.5	562.8	21.7	7.6   72.6 fbdrcrjuy8a1m
Module: SQL*Plus
		IF ( v_do_scan_query != TRUE ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
			SELECT COUNT(c2) INTO v_rowcnt
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 121.6		  1    1.5	563.8	21.6	7.4   72.7 bdq8dvq79a34v
Module: SQL*Plus
			FROM cf1
DECLARE v_default_schema_number PLS_INTEGER := '100'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

	 121.5		  1    1.5	565.5	21.5	7.3   73.0 0bwq9jnxx14ju
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '88'; v_update_pct PLS_INTEGER :=

 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
	 121.4		  1    1.5	564.5	21.5	7.4   73.2 50jfcpqbqagtc
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '94'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		ELSE
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 117.1		  1    1.5	564.2	20.7	7.3   73.4 cyxm2z08gakb0
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 114.8		  1    1.4	564.3	20.3	7.3   74.4 7kqv52xz3bbhp
Module: SQL*Plus
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
DECLARE v_default_schema_number PLS_INTEGER := '99'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re

do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	 101.6		  1    1.3	564.3	18.0	7.5   76.2 94v3428qavp80
Module: SQL*Plus
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '72'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

SQL ordered by Cluster Wait Time	   DB/Inst: P80DB/p80db1  Snaps: 55-56
				v_scan_query_quota := TRUE;
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
			END IF;
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	  8,069
-> Captured SQL account for   99.1% of Total

		END IF;
       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------

 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	   1.9		  1    0.0	564.4	 0.3	6.7   95.6 7u664zdtgwt9d
Module: SQL*Plus
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
DECLARE v_default_schema_number PLS_INTEGER := '60'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
	ELSE
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

	    .2		 94    0.0	  0.3	76.3   12.4   16.3 f7xnvp44nukp7
insert into wrm$_snapshot_details (snap_id,dbid,instance_number,table_id,begin
		--
_time,end_time,step_id) values (:snap_id,:dbid,:instance_number,:bind1,:bind2
,:bind3,:step_id)

	    .0		 89    0.0	  0.2	19.9   12.3   73.0 grwydz59pu6mc
		-- Do an UPDATE statement
select text from view$ where rowid=:1

	    .0		 50    0.0	  0.3	12.1   11.2   79.3 3un99a0zwp4vd
		--
select owner#,name,namespace,remoteowner,linkname,p_timestamp,p_obj#, nvl(proper
ty,0),subname,type#,flags,d_attrs from dependency$ d, obj$ o where d_obj#=:1 and
 p_obj#=obj#(+) order by order#


	    .0		  1    0.0	  1.8	 1.9   61.6   17.9 2xfg27zhudyay
WITH binds as (select :dbid as dbid ,
:inst_id_low as instIdLow , :inst_id_high as i
nstIdHigh , :begin_snap as beginSnap ,
:end_snap as endSnap , :begin_time as beg
		v_my_serial := v_my_serial + v_loop_cnt ;

	    .0		 65    0.0	  0.1	20.8   17.5   68.2 fn5s5p6hr6702
INSERT INTO wri$_adv_message_groups (task_id,id,seq,message#,fac,hdr,lm,nl,p1,p2
,p3,p4,p5) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13)


	    .0		159    0.0	  0.4	 5.8   11.0   87.2 acmvv4fhdc9zh
select obj#,type#,ctime,mtime,stime, status, dataobj#, flags, oid$, spare1, spar
e2, spare3, signature, spare7, spare8, spare9, nvl(dflcollid, 16382), creappid,
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
creverid, modappid, modverid, crepatchid, modpatchid from obj$ where owner#=:1 a
nd name=:2 and namespace=:3 and remoteowner is null and linkname is null and sub

	    .0		 20    0.0	  1.6	 1.3	4.9   96.8 03guhbfpak0w7
		--
select /*+ index(idl_ub1$ i_idl_ub11) */ piece#,length,piece from idl_ub1$ where
 obj#=:1 and part=:2 and version=:3 order by piece#

	    .0		 50    0.0	  0.2	 9.7   10.5   83.4 8swypbbr0m372
		-- Increment count of UPDATES and set UPDATE quota flag if needed
select order#,columns,types from access$ where d_obj#=:1

	    .0		 20    0.0	  0.2	10.9	7.4   85.8 fh5ufah919kun
select /*+ index(idl_sb4$ i_idl_sb41) */ piece#,length,piece from idl_sb4$ where
		--
 obj#=:1 and part=:2 and version=:3 order by piece#

	    .0		  1    0.0	  0.6	 2.2   47.8   41.8 6zacqqnsf529a
WITH ash as (SELECT round((cast(sample_time as date) - :1) * 24 * 60 * 60,0) a
		v_updates_cnt := v_updates_cnt + 1;
s t, inst_id || '_' || session_id || '_' || session_serial# as sid,
 decode(session_type, 'FOREGROUND', 1, 0) as session_type, nvl(
sql_id,'null') as sql_id, nvl(sql_opcode,0) as sql_opcode, n


	    .0		  1    0.0	  0.5	 2.6   23.1   44.5 6tu8uar9skw2q
WITH chains as (SELECT w.instance || '_' || w.sid || '_' || w.SESS_SERIA
L# as sid, case when n.wait_class = 'Idle' then '__' else (w
.BLOCKER_INSTANCE || '_' || w.BLOCKER_SID || '_' || w.BLOCKER_SESS_
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN

SQL ordered by Cluster Wait Time	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
			v_update_quota := TRUE;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	  8,069
		END IF;
-> Captured SQL account for   99.1% of Total

       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
	END IF ;
-------------- ------------ ------ ---------- ------ ------ ------ -------------
SERIAL#) end as bsid, w.osid, decode(w.in_wait, 'TRUE', w.wa

	    .0		  3    0.0	  2.3	 0.4	8.4   10.9 6t44kht0nhjs9
 WITH instances as (SELECT host_name,
----------------------------------------------------------------------------------------------------------------------
 instance_number FROM sys.gv_$instance WHERE instanc
e_number between :inst_id_low and :inst_id_high) , num_cpus as
 (SELECT i.host_name, i.instance_number,

	    .0		 16    0.0	  0.0	70.7   46.6	.1 9tgj4g8y4rwy8
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
select type#,blocks,extents,minexts,maxexts,extsize,extpct,user#,iniexts,NVL(lis
ts,65535),NVL(groups,65535),cachehint,hwmincr, NVL(spare1,0),NVL(scanhint,0),NVL
(bitmapranges,0) from seg$ where ts#=:1 and file#=:2 and block#=:3

----------------------------------------------------------------------------------------------------------------------
	    .0		 49    0.0	  0.0	23.2   46.7	.0 f80h0xb1qvbsk
SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual

	    .0		 20    0.0	  0.0	19.5   21.5   65.9 a3jpjzh7mtwwp

select /*+ index(idl_ub2$ i_idl_ub21) */ piece#,length,piece from idl_ub2$ where
 obj#=:1 and part=:2 and version=:3 order by piece#

			  ------------------------------------------------------


Key Instance Activity Stats		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Ordered by statistic name

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
db block changes			  2,963,708	   4,775.7	    24.7
execute count				    806,212	   1,299.1	     6.7
		--
gc cr block receive time		      1,119	       1.8	     0.0
gc cr blocks received			      3,394	       5.5	     0.0
gc current block receive time			414	       0.7	     0.0
gc current blocks received		      2,538	       4.1	     0.0
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
logons cumulative				112	       0.2	     0.0
opened cursors cumulative		    926,926	   1,493.6	     7.7
parse count (total)			      4,644	       7.5	     0.0
parse time elapsed				167	       0.3	     0.0
		-- so reset flags and counters before continuing
physical reads				  8,848,730	  14,258.7	    73.8
physical writes 			  1,377,434	   2,219.6	    11.5
redo size			      1,116,920,032    1,799,788.6	 9,308.9
session cursor cache hits		    925,227	   1,490.9	     7.7
		--
session logical reads			 11,686,333	  18,831.2	    97.4
user calls				      1,063	       1.7	     0.0
user commits				    119,984	     193.3	     1.0
user rollbacks					  0	       0.0	     0.0
		v_update_quota := FALSE;
workarea executions - optimal		      1,031	       1.7	     0.0
			  ------------------------------------------------------


		v_updates_cnt := 0;
		v_selects_cnt := 0;
Instance Activity Stats 		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Ordered by statistic name

	END IF;
Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
ASSM bg: segment fix monitor			  1	       0.0	     0.0
ASSM cbk:blocks examined			674	       1.1	     0.0

ASSM cbk:blocks marked full			187	       0.3	     0.0
ASSM gsp:L1 bitmaps examined			513	       0.8	     0.0
ASSM gsp:L2 bitmap full 			  9	       0.0	     0.0
ASSM gsp:L2 bitmaps examined			119	       0.2	     0.0
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
ASSM gsp:Search all				 13	       0.0	     0.0
ASSM gsp:Search hint				 12	       0.0	     0.0
ASSM gsp:Search steal				  3	       0.0	     0.0
ASSM gsp:bump HWM				  3	       0.0	     0.0
ASSM gsp:get free block 			487	       0.8	     0.0
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
ASSM gsp:get free data block			365	       0.6	     0.0
ASSM gsp:get free index block			122	       0.2	     0.0
ASSM gsp:good hint				443	       0.7	     0.0
ASSM rsv:fill reserve				  3	       0.0	     0.0
ASSM wasted db state change			  2	       0.0	     0.0
Batched IO (bound) vector count 		  6	       0.0	     0.0
Batched IO (full) vector count			  0	       0.0	     0.0
Batched IO block miss count		  6,055,848	   9,758.3	    50.5
Batched IO buffer defrag count			  0	       0.0	     0.0
		v_scan_query_quota := FALSE;
Batched IO double miss count		    677,910	   1,092.4	     5.7
Batched IO same unit count			 12	       0.0	     0.0
Batched IO single block count		      1,016	       1.6	     0.0
		v_scan_queries_cnt := 0;
Batched IO vector block count		  6,055,126	   9,757.1	    50.5
Batched IO vector read count		    676,444	   1,090.0	     5.6
Block Cleanout Optim referenced 		  9	       0.0	     0.0
CCursor + sql area evicted			241	       0.4	     0.0
		v_random_access_queries_cnt := 0;
CPU used by this session		    384,628	     619.8	     3.2
CPU used when call started		    288,185	     464.4	     2.4
CR blocks created			      1,207	       1.9	     0.0
Cached Commit SCN referenced		  7,416,388	  11,950.7	    61.8
	END IF;
Client Advertised Receive Window		455	       0.7	     0.0
Client Advertised Send Window			455	       0.7	     0.0
Client Path Maximum Transmission	  4,259,775	   6,864.1	    35.5
Client Send Congestion Window			650	       1.1	     0.0

Client Time (usec) Last Ack Rece		 21	       0.0	     0.0
Client Time (usec) Last Data Rec		 19	       0.0	     0.0
Client Time (usec) Last Data Sen		147	       0.2	     0.0
Client Time (usec) Round Trip Ti	    110,373	     177.9	     0.9
	v_loop_cnt := v_loop_cnt + 1 ;
Client Time (usec) Round Trip Ti	    120,227	     193.7	     1.0
Client Total Bytes Acked		  1,028,421	   1,657.2	     8.6
Client Total Bytes Received		    396,934	     639.6	     3.3
Client Total Number of Retransmi		  1	       0.0	     0.0
Commit SCN cached				  1	       0.0	     0.0
	v_now := DBMS_UTILITY.GET_TIME();
DBWR checkpoint buffers written 	     11,904	      19.2	     0.1
DBWR checkpoints			      1,027	       1.7	     0.0
DBWR fusion writes				324	       0.5	     0.0
DBWR object drop buffers written		 32	       0.1	     0.0

DBWR thread checkpoint buffers w		  0	       0.0	     0.0
DBWR transaction table writes			142	       0.2	     0.0
DBWR undo block writes			     58,370	      94.1	     0.5
DFO trees parallelized				 62	       0.1	     0.0
Effective IO time			    117,544	     189.4	     1.0
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
HSC Heap Segment Block Changes		  1,319,815	   2,126.7	    11.0
Heap Segment Array Inserts			169	       0.3	     0.0
Heap Segment Array Updates			 11	       0.0	     0.0
Heatmap Blklevel Flush Task Coun		  0	       0.0	     0.0
		-- If this is a fixed-iteration count test cycle and we've hit the number of
KTFB alloc req					836	       1.4	     0.0
KTFB alloc space (block)		443,088,896	 713,987.0	 3,692.9
KTFB alloc time (ms)			 56,490,106	  91,027.3	   470.8

Instance Activity Stats 		   DB/Inst: P80DB/p80db1  Snaps: 55-56
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="d2zxvj6ss17k6"></a>d2zxvj6ss17k6</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '70';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';
-> Ordered by statistic name


Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------

KTFB apply req				      1,548	       2.5	     0.0
KTFB apply time (ms)			    116,495	     187.7	     1.0
KTFB commit req 				  0	       0.0	     0.0
KTFB commit time (ms)				  0	       0.0	     0.0
KTFB free req					716	       1.2	     0.0
KTFB free space (block) 		     42,928	      69.2	     0.4
KTFB free time (ms)			  6,742,126	  10,864.2	    56.2
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
LOB table id lookup cache misses		  0	       0.0	     0.0
PX local messages recv'd			774	       1.3	     0.0
PX local messages sent				775	       1.3	     0.0
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
PX remote messages recv'd			488	       0.8	     0.0
PX remote messages sent 			427	       0.7	     0.0

Parallel operations not downgrad		 95	       0.2	     0.0
Requests to/from client 			326	       0.5	     0.0
SMON posted for undo segment shr		 40	       0.1	     0.0
v_num_tmp NUMBER := 0;
SQL*Net roundtrips to/from clien		262	       0.4	     0.0
TBS Extension: tasks created			 18	       0.0	     0.0
TBS Extension: tasks executed			  0	       0.0	     0.0

active txn count during cleanout		241	       0.4	     0.0
auto extends on undo tablespace 		 18	       0.0	     0.0
background checkpoints completed		  0	       0.0	     0.0
v_loop_cnt PLS_INTEGER := 0;
background checkpoints started			  0	       0.0	     0.0
background timeouts			      8,249	      13.3	     0.1
blocks cleaned out using minact 	    314,724	     507.1	     2.6
v_rowcnt PLS_INTEGER := 0;
branch node splits				  0	       0.0	     0.0
buffer is not pinned count		 21,075,785	  33,961.2	   175.7
buffer is pinned count			  8,143,477	  13,122.3	    67.9
v_updates_cnt PLS_INTEGER := 0;
bytes received via SQL*Net from 	    457,182	     736.7	     3.8
bytes sent via SQL*Net to client	     59,170	      95.4	     0.5
calls to get snapshot scn: kcmgs	    941,004	   1,516.3	     7.8
v_selects_cnt PLS_INTEGER := 0;
calls to kcmgas 			    198,917	     320.5	     1.7
calls to kcmgcs 			      6,540	      10.5	     0.1
cell physical IO interconnect by     99,131,662,848  159,739,314.7     826,207.4

change write time			      3,498	       5.6	     0.0
cleanout - number of ktugct call	      2,491	       4.0	     0.0
cleanouts and rollbacks - consis		  0	       0.0	     0.0
v_random_access_queries_cnt PLS_INTEGER := 0;
cleanouts only - consistent read		 23	       0.0	     0.0
cluster key scan block gets			371	       0.6	     0.0
cluster key scans				319	       0.5	     0.0
v_scan_queries_cnt PLS_INTEGER := 0;
commit batch/immediate performed		  3	       0.0	     0.0
commit batch/immediate requested		  3	       0.0	     0.0
commit cleanout failures: block 		  2	       0.0	     0.0

commit cleanout failures: buffer		  4	       0.0	     0.0
commit cleanout failures: callba		 19	       0.0	     0.0
commit cleanout failures: cannot		  0	       0.0	     0.0
v_do_scan_query BOOLEAN :=FALSE;
commit cleanouts			  1,320,127	   2,127.2	    11.0
commit cleanouts successfully co	  1,320,102	   2,127.2	    11.0
v_scan_query_quota  BOOLEAN := FALSE;
commit immediate performed			  3	       0.0	     0.0
commit immediate requested			  3	       0.0	     0.0
commit txn count during cleanout		152	       0.2	     0.0
v_scan_workload_only BOOLEAN := FALSE;
consistent changes			     10,428	      16.8	     0.1
consistent gets 			  9,941,941	  16,020.3	    82.9
consistent gets examination		  1,615,912	   2,603.9	    13.5
v_random_workload_only BOOLEAN := FALSE;
consistent gets examination (fas	  1,615,594	   2,603.3	    13.5
consistent gets from cache		  9,941,933	  16,020.3	    82.9
consistent gets pin			  8,326,021	  13,416.4	    69.4

consistent gets pin (fastpath)		  6,157,232	   9,921.7	    51.3
cursor authentications				 80	       0.1	     0.0
cursor reload failures				  0	       0.0	     0.0

data blocks consistent reads - u		 20	       0.0	     0.0

Instance Activity Stats 		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Ordered by statistic name
v_random_block PLS_INTEGER := 1;

Statistic				      Total	per Second     per Trans
v_tmp PLS_INTEGER;
-------------------------------- ------------------ -------------- -------------
db block changes			  2,963,708	   4,775.7	    24.7
db block gets				  1,744,329	   2,810.8	    14.5
db block gets direct			      1,063	       1.7	     0.0
v_now PLS_INTEGER;
db block gets from cache		  1,743,266	   2,809.1	    14.5
db block gets from cache (fastpa	    356,474	     574.4	     3.0
deferred (CURRENT) block cleanou	    316,130	     509.4	     2.6
v_brick_wall PLS_INTEGER;
dirty buffers inspected 		  1,285,662	   2,071.7	    10.7
enqueue conversions			     16,747	      27.0	     0.1
enqueue releases			    378,951	     610.6	     3.2

enqueue requests			    378,863	     610.5	     3.2
enqueue timeouts				  1	       0.0	     0.0
enqueue waits				      4,542	       7.3	     0.0
v_begin_time PLS_INTEGER;
exchange deadlocks				  2	       0.0	     0.0
execute count				    806,212	   1,299.1	     6.7
file io service time		      3,744,271,216    6,033,464.0	31,206.4
v_end_time PLS_INTEGER;
free buffer inspected			  8,978,990	  14,468.6	    74.8
free buffer requested			  8,917,144	  14,369.0	    74.3
gc blocks compressed			      8,027	      12.9	     0.1
gc blocks lost				      3,892	       6.3	     0.0
v_total_time PLS_INTEGER;
gc cleanout applied				  0	       0.0	     0.0
gc cleanout saved				  2	       0.0	     0.0
gc cr anti locks created		     61,715	      99.5	     0.5
v_begin_cpu_tm PLS_INTEGER;
gc cr anti locks expanded			 26	       0.0	     0.0
gc cr anti locks shrunk 			 36	       0.1	     0.0
gc cr block build time				 31	       0.1	     0.0
v_end_cpu_tm PLS_INTEGER;
gc cr block flush time				  9	       0.0	     0.0
gc cr block receive time		      1,119	       1.8	     0.0
gc cr blocks built			      3,164	       5.1	     0.0
gc cr blocks flushed				 11	       0.0	     0.0
v_total_cpu_tm PLS_INTEGER;
gc cr blocks received			      3,394	       5.5	     0.0
gc cr blocks served			      3,223	       5.2	     0.0
gc cr multiblock grant time		    855,364	   1,378.3	     7.1

gc cr multiblock grants received	  5,496,170	   8,856.5	    45.8
gc current block flush time			 22	       0.0	     0.0
gc current block pin time			  0	       0.0	     0.0
v_do_sleeps BOOLEAN := FALSE;
gc current block receive time			414	       0.7	     0.0
gc current blocks flushed			 17	       0.0	     0.0
gc current blocks pinned			  0	       0.0	     0.0
gc current blocks received		      2,538	       4.1	     0.0
v_loop_control BOOLEAN := FALSE;
gc current blocks served		     25,053	      40.4	     0.2
gc force cr read cr				 50	       0.1	     0.0
gc force cr read current			  0	       0.0	     0.0
v_update_quota BOOLEAN := FALSE;
gc kbytes saved 			     33,412	      53.8	     0.3
gc kbytes sent				    192,797	     310.7	     1.6
gc local grants 			  4,761,411	   7,672.5	    39.7
gc merge pi bg					  0	       0.0	     0.0
v_select_only_workload BOOLEAN := FALSE;
gc merge pi fg					 29	       0.1	     0.0
gc no change made				  4	       0.0	     0.0
gc read time waited				  0	       0.0	     0.0
v_update_only_workload BOOLEAN := FALSE;
gc read waits					  0	       0.0	     0.0
gc reader bypass grants 			 38	       0.1	     0.0
gc reader bypass waits				 10	       0.0	     0.0
gc remote grants			  4,153,196	   6,692.4	    34.6
v_do_update BOOLEAN := FALSE;
gc status messages received		    440,091	     709.2	     3.7
gc status messages sent 		      8,536	      13.8	     0.1
gcs affinity lock failures			252	       0.4	     0.0
v_do_hot_schema BOOLEAN := FALSE;
gcs affinity lock grants		    678,020	   1,092.6	     5.7
gcs anti-locks created			     61,712	      99.4	     0.5
gcs data block access records		  8,856,820	  14,271.8	    73.8
v_stop_immediate BOOLEAN := FALSE;
gcs messages sent			 12,187,678	  19,639.1	   101.6

Instance Activity Stats 		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Ordered by statistic name
v_sharing_schema BOOLEAN := FALSE;

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
v_seed VARCHAR2(128);
gcs read-mostly lock failures		     22,129	      35.7	     0.2
gcs read-mostly lock grants		    124,897	     201.3	     1.0
gcs stats management (SCM) proce		 11	       0.0	     0.0
ges messages sent			      7,106	      11.5	     0.1
v_home_schema_str VARCHAR2(80);
global enqueue get time 		     45,281	      73.0	     0.4
global enqueue gets async			  0	       0.0	     0.0
global enqueue gets sync		    273,406	     440.6	     2.3
v_scratch VARCHAR2(200) ;
global enqueue releases 		    259,958	     418.9	     2.2
global undo segment hints helped		  5	       0.0	     0.0
global undo segment hints were s		  4	       0.0	     0.0

heap block compress			      2,829	       4.6	     0.0
hot buffers moved to head of LRU	    125,969	     203.0	     1.1
immediate (CR) block cleanout ap		 23	       0.0	     0.0
immediate (CURRENT) block cleano		376	       0.6	     0.0
v_cpu_pct NUMBER(6, 3);
index crx upgrade (positioned)			 62	       0.1	     0.0
index fast full scans (full)			  0	       0.0	     0.0
index fetch by key			      5,317	       8.6	     0.0
v_my_serial NUMBER(16);
index range scans			    802,704	   1,293.5	     6.7
leaf node 90-10 splits				  4	       0.0	     0.0
leaf node splits				118	       0.2	     0.0
lob reads					816	       1.3	     0.0

lob writes				      4,695	       7.6	     0.0
lob writes unaligned			      4,694	       7.6	     0.0
logical read bytes from cache	     95,725,076,480  154,249,991.1     797,815.4
BEGIN
logons cumulative				112	       0.2	     0.0
max cf enq hold time			      9,203	      14.8	     0.1
messages received			    187,126	     301.5	     1.6

messages sent				    187,125	     301.5	     1.6
min active SCN optimization appl		  0	       0.0	     0.0
no work - consistent read gets		  8,308,314	  13,387.9	    69.3
non-idle wait count			  7,964,483	  12,833.9	    66.4
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
opened cursors cumulative		    926,926	   1,493.6	     7.7
parse count (describe)				  1	       0.0	     0.0
parse count (failures)				  0	       0.0	     0.0
parse count (hard)				214	       0.3	     0.0
EXECUTE IMMEDIATE v_home_schema_str;
parse count (total)			      4,644	       7.5	     0.0

parse time cpu					 78	       0.1	     0.0
parse time elapsed				167	       0.3	     0.0
physical read IO requests		  8,847,855	  14,257.3	    73.7

physical read bytes		     72,488,787,968  116,807,374.9     604,153.8
physical read total IO requests 	  8,853,417	  14,266.3	    73.8
physical read total bytes	     73,973,689,856  119,200,124.2     616,529.6
IF ( v_hot_schema_modulus != 0 ) THEN
physical read total multi block 	      1,362	       2.2	     0.0
physical reads				  8,848,730	  14,258.7	    73.8
physical reads cache			  8,848,716	  14,258.7	    73.8
physical reads cache prefetch		  5,377,508	   8,665.2	    44.8
	v_do_hot_schema := TRUE;
physical reads direct				 14	       0.0	     0.0
physical reads direct (lob)			 14	       0.0	     0.0
physical reads direct temporary 		  0	       0.0	     0.0
END IF;
physical reads prefetch warmup			  0	       0.0	     0.0
physical write IO requests		  1,319,809	   2,126.7	    11.0
physical write bytes		     11,283,939,328   18,182,775.1	94,045.4

physical write total IO requests	  1,430,890	   2,305.7	    11.9
physical write total bytes	     12,573,223,424   20,260,308.7     104,790.8
physical write total multi block	      3,414	       5.5	     0.0
physical writes 			  1,377,434	   2,219.6	    11.5
IF ( v_sleep_modulus != 0 )	  THEN
physical writes direct			      1,107	       1.8	     0.0
physical writes direct (lob)			 44	       0.1	     0.0
physical writes direct temporary		851	       1.4	     0.0
	v_do_sleeps := TRUE;
physical writes from cache		  1,376,327	   2,217.8	    11.5

Instance Activity Stats 		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Ordered by statistic name
END IF;

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
physical writes non checkpoint		  1,375,705	   2,216.8	    11.5

pinned buffers inspected			382	       0.6	     0.0
prefetch warmup blocks aged out 		  0	       0.0	     0.0
prefetched blocks aged out befor		  0	       0.0	     0.0
IF ( v_max_loop_iterations &gt; 0 )  THEN
process last non-idle time			621	       1.0	     0.0
queries parallelized				  0	       0.0	     0.0
recursive calls 			  1,087,610	   1,752.6	     9.1
recursive cpu usage			    371,500	     598.6	     3.1
redo KB read				    831,488	   1,339.9	     6.9
redo blocks checksummed by FG (e	    810,345	   1,305.8	     6.8
redo blocks written			  2,306,989	   3,717.5	    19.2
redo blocks written (group 0)		  1,326,110	   2,136.9	    11.1
redo blocks written (group 1)		    980,879	   1,580.6	     8.2
redo buffer allocation retries			  0	       0.0	     0.0
redo entries				  1,552,876	   2,502.3	    12.9
redo log space requests 			  0	       0.0	     0.0
redo size			      1,116,920,032    1,799,788.6	 9,308.9
redo size for direct writes			972	       1.6	     0.0
redo subscn max counts				116	       0.2	     0.0
redo synch time 				 25	       0.0	     0.0
redo synch time (usec)			    216,149	     348.3	     1.8
redo synch time overhead (usec) 	      5,335	       8.6	     0.0
	v_loop_control := TRUE ;
redo synch time overhead count (		 31	       0.1	     0.0
redo synch time overhead count (		  0	       0.0	     0.0
redo synch writes				 69	       0.1	     0.0
END IF;
redo wastage				 26,738,040	  43,085.3	   222.9
redo write active strands		    109,945	     177.2	     0.9
redo write broadcast ack count			  8	       0.0	     0.0
redo write broadcast ack time		     21,519	      34.7	     0.2

redo write finish time			779,861,596    1,256,657.6	 6,499.7
redo write gather time			 42,741,367	  68,872.8	   356.2
redo write info find				 32	       0.1	     0.0
redo write info find fail			  1	       0.0	     0.0
IF ( v_update_pct = 0 ) 	  THEN
redo write schedule time		 43,875,145	  70,699.8	   365.7
redo write size count (   4KB)		      8,785	      14.2	     0.1
redo write size count (   8KB)		     13,055	      21.0	     0.1
	v_select_only_workload := TRUE;
redo write size count (  16KB)		     25,621	      41.3	     0.2
redo write size count (  32KB)		     20,094	      32.4	     0.2
redo write size count ( 128KB)		      6,566	      10.6	     0.1
redo write size count ( 256KB)			 28	       0.1	     0.0
END IF;
redo write size count ( 512KB)			  2	       0.0	     0.0
redo write size count (1024KB)			  0	       0.0	     0.0
redo write time 			     78,320	     126.2	     0.7

redo write time (usec)			783,197,788    1,262,033.5	 6,527.5
redo write total time			821,780,787    1,324,205.6	 6,849.1
redo write worker delay (usec)		 37,497,892	  60,423.6	   312.5
redo write worker delay count		     74,151	     119.5	     0.6
IF ( v_update_pct = 100 )	  THEN
redo writes				     74,151	     119.5	     0.6
redo writes (group 0)			     40,015	      64.5	     0.3
redo writes (group 1)			     34,136	      55.0	     0.3
redo writes adaptive all		     74,151	     119.5	     0.6
	v_update_only_workload := TRUE;
redo writes adaptive worker		     74,151	     119.5	     0.6
rollback changes - undo records 		  4	       0.0	     0.0
rollbacks only - consistent read		 14	       0.0	     0.0
END IF;
rows fetched via callback		      2,545	       4.1	     0.0
saved cleanouts 				  0	       0.0	     0.0
saved cleanouts successfully com		  0	       0.0	     0.0
securefile allocation bytes		    360,448	     580.8	     3.0

securefile allocation chunks			 16	       0.0	     0.0
securefile bytes non-transformed	    310,687	     500.6	     2.6

Instance Activity Stats 		   DB/Inst: P80DB/p80db1  Snaps: 55-56
IF ( v_scan_query_pct = 0 ) 	THEN
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
	v_random_workload_only := TRUE;
securefile direct read bytes		    114,688	     184.8	     1.0
securefile direct read ops			 14	       0.0	     0.0
securefile direct write bytes		    360,448	     580.8	     3.0
securefile direct write ops			 15	       0.0	     0.0
END IF;
securefile number of non-transfo		 15	       0.0	     0.0
segment cfs allocations 			  0	       0.0	     0.0
segment chunks allocation from d		 16	       0.0	     0.0

segment dispenser allocations			 15	       0.0	     0.0
segment dispenser load empty			  0	       0.0	     0.0
segment dispenser load tasks			  0	       0.0	     0.0
segment prealloc ops				  2	       0.0	     0.0
segment prealloc tasks				  0	       0.0	     0.0
segment prealloc time (ms)		      1,470	       2.4	     0.0
segment total chunk allocation			  0	       0.0	     0.0
IF ( v_scan_query_pct = 100 ) 	THEN
session connect time			      5,778	       9.3	     0.1
session cursor cache hits		    925,227	   1,490.9	     7.7
session logical reads			 11,686,333	  18,831.2	    97.4
shared hash latch upgrades - no 	  2,882,076	   4,644.1	    24.0
shared hash latch upgrades - wai		 16	       0.0	     0.0
shared io pool buffer get succes		 29	       0.1	     0.0
sorts (memory)					767	       1.2	     0.0
	v_scan_workload_only := TRUE;
sorts (rows)				    956,470	   1,541.2	     8.0
sql area evicted				227	       0.4	     0.0
sql area purged 				 29	       0.1	     0.0
summed dirty queue length		  5,454,860	   8,789.9	    45.5
switch current caused by our pin		 36	       0.1	     0.0
switch current to new buffer			 39	       0.1	     0.0
table fetch by rowid			 13,534,766	  21,809.7	   112.8
table fetch continued row			153	       0.3	     0.0
END IF;
table scan blocks gotten		      9,287	      15.0	     0.1
table scan disk non-IMC rows got	    541,867	     873.2	     4.5
table scan rows gotten			    541,867	     873.2	     4.5
table scans (short tables)			737	       1.2	     0.0

temp space allocated (bytes)		  3,145,728	   5,069.0	    26.2
total cf enq hold time			     18,987	      30.6	     0.2
total number of cf enq holders			310	       0.5	     0.0
total number of times SMON poste		 40	       0.1	     0.0
v_seconds_to_run := v_seconds_to_run * 100 ;
transaction lock background gets		  0	       0.0	     0.0
transaction lock foreground requ		  0	       0.0	     0.0
transaction rollbacks				  2	       0.0	     0.0

transaction tables consistent re		  0	       0.0	     0.0
transaction tables consistent re	      2,390	       3.9	     0.0
undo change vector size 		458,416,584	 738,685.8	 3,820.7
user calls				      1,063	       1.7	     0.0
user commits				    119,984	     193.3	     1.0
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
user logons cumulative				  1	       0.0	     0.0
user logouts cumulative 			 66	       0.1	     0.0
user rollbacks					  0	       0.0	     0.0
workarea executions - optimal		      1,031	       1.7	     0.0

write clones created in foregrou		 69	       0.1	     0.0
			  ------------------------------------------------------


Instance Activity Stats - Absolute Values  DB/Inst: P80DB/p80db1  Snaps: 55-56
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-> Statistics with absolute values (should not be diffed)

Statistic			     Begin Value       End Value
-------------------------------- --------------- ---------------
-- DBMS_RANDOM.seed (val =&gt; v_seed);
logons current				     192	     127
opened cursors current			     391	     126
session cursor cache count		  14,774	  15,073
session pga memory		   1,023,892,800     677,879,896

session pga memory max		   1,214,498,368     846,576,696
session uga memory		     665,108,728     550,133,312
session uga memory max		   6,889,124,072   7,351,955,040
v_begin_time := DBMS_UTILITY.GET_TIME();
			  ------------------------------------------------------

Instance Activity Stats - Thread Activity  DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Statistics identified by '(derived)' come from sources other than SYSSTAT

v_now := v_begin_time ;
Statistic				      Total  per Hour
-------------------------------- ------------------ ---------
log switches (derived)				  0	  .00
			  ------------------------------------------------------

v_brick_wall := v_now + v_seconds_to_run ;
IOStat by Function summary		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
    other columns suffixed with K,M,G,T,P are in multiples of 1000
-> ordered by (Data Read + Write) desc
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

		 Reads:  Reqs	 Data	Writes:  Reqs	 Data	 Waits:    Avg
Function Name	   Data per sec per sec    Data per sec per sec   Count    Time

--------------- ------- ------- ------- ------- ------- ------- ------- --------
Buffer Cache Re   67.1G 1.4E+04 110.718      0M     0.0      0M    3.4M   7.75ms
DBWR		     3M     0.2   .005M   10.4G  2115.7 17.235M     132   4.57ms
Others		   1.4G     8.9  2.274M    105M     1.7   .169M    3749   7.94ms
----------------------------------------------------------------------------------------------------------------------
LGWR		     0M     0.0      0M    1.1G   176.6  1.805M   73.9K   9.89ms
Direct Reads	     0M     0.0      0M      3M     0.0   .005M       0
Direct Writes	     0M     0.0      0M      2M     0.0   .003M       0
TOTAL:		  68.5G 1.4E+04 112.997   11.6G  2294.1 19.217M    3.5M   7.80ms
-- The following WHILE loop is the master work loop control
			  ------------------------------------------------------

IOStat by Filetype summary		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
    other columns suffixed with K,M,G,T,P are in multiples of 1000
-> Small Read and Large Read are average service times
-> Ordered by (Data Read + Write) desc

		Reads:	Reqs	Data   Writes:	Reqs	Data	  Small    Large
----------------------------------------------------------------------------------------------------------------------
Filetype Name	  Data per sec per sec	  Data per sec per sec	   Read     Read
-------------- ------- ------- ------- ------- ------- ------- -------- --------
Data File	 67.1G 1.4E+04 110.665	 10.4G	2114.8 17.234M	 2.52ms   9.00ms
Log File	  1.3G	   2.4	2.172M	  1.1G	 176.5	1.805M	22.22us 1810.45m
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
Control File	   64M	   6.6	 .103M	   12M	   1.2	 .019M	 3.69ms
Temp File	    8M	   0.2	 .013M	    7M	   0.2	 .011M	 4.37ms  21.22ms
Other		    0M	   0.0	    0M	    0M	   0.2	    0M
TOTAL:		 68.5G 1.4E+04 112.953	 11.6G	2292.9 19.069M	 2.52ms 1797.27m

			  ------------------------------------------------------

IOStat by Function/Filetype summary	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
    other columns suffixed with K,M,G,T,P are in multiples of 1000
-> Ordered by (Data Read + Write) desc for each function

  Reads:  Reqs	  Data	 Writes:  Reqs	  Data	  Waits:      Avg
    Data per sec per sec    Data per sec per sec   Count     Time
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
 ------- ------- ------- ------- ------- ------- ------- ----------
Buffer Cache Reads
   67.1G 1.4E+04 110.664      0M     0.0      0M    2.8M     7.22ms
 Buffer Cache Reads (Data File)
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
   67.1G 1.4E+04 110.651      0M     0.0      0M    2.8M     7.22ms
 Buffer Cache Reads (Temp File)
      8M     0.2   .013M      0M     0.0      0M      95     6.46ms
DBWR
      3M     0.2   .005M   10.4G  2114.7 17.229M     132     4.57ms
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
 DBWR (Data File)
      0M     0.0      0M   10.4G  2114.6 17.229M       0
 DBWR (Control File)
      3M     0.2   .005M      0M     0.0      0M     132     4.57ms
			DBMS_LOCK.SLEEP(v_num_tmp);
 DBWR (Temp File)
      0M     0.0      0M      0M     0.1      0M       0
Others
    1.4G     8.9  2.275M    104M     1.6   .168M    3327     5.18ms
 Others (Log File)
		END IF;
    1.3G     2.4  2.172M      0M     0.0      0M     135   228.98us
 Others (Data File)
      1M     0.1   .002M     91M     0.3   .147M      80    13.39ms
	END IF;
 Others (Control File)
     63M     6.4   .102M     11M     1.2   .018M    3112     5.19ms
 Others (Temp File)

      0M     0.0      0M      2M     0.1   .003M       0
 LGWR (Log File)
      0M     0.0      0M    1.1G   176.5  1.805M       0
LGWR
      0M     0.0      0M    1.1G   176.5  1.805M       0
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
 Direct Writes (Data File)
      0M     0.0      0M      0M     0.0      0M       0
Direct Writes
      0M     0.0      0M      0M     0.0      0M       0
 Direct Reads (Data File)
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
      0M     0.0      0M      0M     0.0      0M       0
Direct Reads
      0M     0.0      0M      0M     0.0      0M       0
TOTAL:
   68.4G 1.4E+04 112.944   11.6G  2292.8 19.201M    2.8M     7.21ms
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			  ------------------------------------------------------


Tablespace IO Stats			   DB/Inst: P80DB/p80db1  Snaps: 55-56

			v_sharing_schema := TRUE ;
		  No data exists for this section of the report.
			  ------------------------------------------------------


File IO Stats				   DB/Inst: P80DB/p80db1  Snaps: 55-56
		ELSE

		  No data exists for this section of the report.
			  ------------------------------------------------------


			IF ( v_sharing_schema = TRUE ) THEN
Buffer Pool Statistics			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Standard block size Pools  D: default,  K: keep,  R: recycle
-> Default Pools for other block sizes: 2k, 4k, 8k, 16k, 32k

							    Free   Writ   Buffer
     Number of Pool	  Buffer     Physical	 Physical   Buff   Comp     Busy
P      Buffers Hit%	    Gets	Reads	   Writes   Wait   Wait    Waits
--- ---------- ---- ------------ ------------ ----------- ------ ------ --------
				EXECUTE IMMEDIATE v_home_schema_str;
D      917,088	 24   11,690,857    8,852,880	1,377,159      0      0      639
			  ------------------------------------------------------

Checkpoint Activity			   DB/Inst: P80DB/p80db1  Snaps: 55-56
				v_sharing_schema := FALSE;
-> Total Physical Writes:		     1,377,434

					  Other    Autotune	 Thread
       MTTR    Log Size    Log Ckpt    Settings        Ckpt	   Ckpt
     Writes	 Writes      Writes	 Writes      Writes	 Writes
			END IF;
----------- ----------- ----------- ----------- ----------- -----------
	  0	      0 	  0	      0      11,906	      0
			  ------------------------------------------------------

		END IF;
Instance Recovery Stats 		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> B: Begin Snapshot,  E: End Snapshot

									    Estd
  Targt  Estd					  Log Ckpt Log Ckpt    Opt   RAC
  MTTR	 MTTR Recovery	Actual	 Target   Log Sz   Timeout Interval    Log Avail
   (s)	  (s) Estd IOs RedoBlks RedoBlks RedoBlks RedoBlks RedoBlks  Sz(M)  Time
- ----- ----- -------- -------- -------- -------- -------- -------- ------ -----
	END IF;
B     0    48	 50732	 487514  4931199 1.70E+07  4931199	N/A    N/A    18
E     0    71	 51346	1055131  5240593 1.70E+07  5240593	N/A    N/A    30
			  ------------------------------------------------------


MTTR Advisory				       DB/Inst: P80DB/p80db1  Snap: 56

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
		  No data exists for this section of the report.
				-- UPDATE quota has been filled,  force drain some SELECTs
			  ------------------------------------------------------

Buffer Pool Advisory			       DB/Inst: P80DB/p80db1  Snap: 56
-> Only rows with estimated physical reads >0 are displayed
-> ordered by Block Size, Buffers For Estimate

				    Est
				   Phys      Estimated			Est
    Size for   Size	 Buffers   Read     Phys Reads	   Est Phys %DBtime
P    Est (M) Factor  (thousands) Factor    (thousands)	  Read Time for Rds
--- -------- ------ ------------ ------ -------------- ------------ -------
D	 768	 .1	      89    1.0 	44,131		  1 1.1E+05
D      1,536	 .2	     179    1.0 	43,916		  1 1.1E+05
				v_do_update := FALSE;
			END IF;
D      2,304	 .3	     268    1.0 	43,721		  1 1.1E+05
D      3,072	 .4	     358    1.0 	43,539		  1 1.1E+05
D      3,840	 .5	     447    1.0 	43,365		  1 1.1E+05
		END IF;
D      4,608	 .6	     537    1.0 	43,197		  1 1.1E+05
D      5,376	 .7	     626    1.0 	43,039		  1 1.1E+05
D      6,144	 .8	     716    1.0 	42,883		  1 1.1E+05
	END IF;
D      6,912	 .9	     805    1.0 	42,735		  1 1.1E+05
D      7,680	1.0	     895    1.0 	42,595		  1 1.1E+05
D      7,872	1.0	     917    1.0 	42,560		  1 1.1E+05

D      8,448	1.1	     984    1.0 	42,459		  1 1.1E+05
D      9,216	1.2	   1,074    1.0 	42,328		  1 1.1E+05
D      9,984	1.3	   1,163    1.0 	42,206		  1 1.1E+05
D     10,752	1.4	   1,253    1.0 	42,089		  1 1.1E+05
----------------------------------------------------------------------------------------------------------------------
D     11,520	1.5	   1,342    1.0 	41,976		  1 1.1E+05
D     12,288	1.6	   1,432    1.0 	41,865		  1 1.1E+05
D     13,056	1.7	   1,521    1.0 	41,761		  1 1.1E+05
-- The type of SQL is now determined...execute it in the following section
D     13,824	1.8	   1,610    1.0 	41,659		  1 1.1E+05
D     14,592	1.9	   1,700    1.0 	41,560		  1 1.1E+05
D     15,360	2.0	   1,789    1.0 	41,463		  1 1.1E+05
			  ------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------


PGA Aggr Summary			   DB/Inst: P80DB/p80db1  Snaps: 55-56

-> PGA cache hit % - percentage of W/A (WorkArea) data processed only in-memory

PGA Cache Hit %   W/A MB Processed  Extra W/A MB Read/Written
	IF ( v_do_update != TRUE ) THEN
--------------- ------------------ --------------------------
	  100.0 	       312			    0
			  ------------------------------------------------------
		--

PGA Aggr Target Stats			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> B: Begin Snap   E: End Snap (rows dentified with B or E contain data
   which is absolute i.e. not diffed over the interval)
-> Auto PGA Target - actual workarea memory target
-> W/A PGA Used    - amount of memory used for all Workareas (manual + auto)
		-- Do a SELECT statement
-> %PGA W/A Mem    - percentage of PGA memory allocated to workareas
-> %Auto W/A Mem   - percentage of workarea memory controlled by Auto Mem Mgmt
-> %Man W/A Mem    - percentage of workarea memory under manual control
		-- Work out scan or random

						%PGA  %Auto   %Man
    PGA Aggr   Auto PGA   PGA Mem    W/A PGA	 W/A	W/A    W/A Global Mem
		IF  ( v_random_workload_only = TRUE ) THEN
   Target(M)  Target(M)  Alloc(M)    Used(M)	 Mem	Mem    Mem   Bound(K)
- ---------- ---------- ---------- ---------- ------ ------ ------ ----------
B      3,215	  1,535    1,843.9	  0.0	  .0	 .0	.0    329,210
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
E      3,215	  1,799    1,474.2	  0.0	  .0	 .0	.0    329,210
			  ------------------------------------------------------

PGA Aggr Target Histogram		   DB/Inst: P80DB/p80db1  Snaps: 55-56
			v_do_scan_query := FALSE;
-> Optimal Executions are purely in-memory operations

  Low	  High
			v_scan_query_quota := TRUE ;
Optimal Optimal    Total Execs	Optimal Execs 1-Pass Execs M-Pass Execs
------- ------- -------------- -------------- ------------ ------------
     2K      4K 	   565		  565		 0	      0
		ELSE
    64K    128K 	    83		   83		 0	      0
   128K    256K 	    52		   52		 0	      0
   256K    512K 	    44		   44		 0	      0
   512K   1024K 	   146		  146		 0	      0
			IF ( v_scan_workload_only = TRUE ) THEN
     1M      2M 	   135		  135		 0	      0
     2M      4M 	     6		    6		 0	      0
			  ------------------------------------------------------
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

PGA Memory Advisory			       DB/Inst: P80DB/p80db1  Snap: 56
-> When using Auto Memory Mgmt, minimally choose a pga_aggregate_target value
				v_do_scan_query := TRUE;
   where Estd PGA Overalloc Count is 0

				       Estd Extra    Estd P Estd PGA
				v_scan_query_quota := FALSE;
PGA Target    Size	     W/A MB   W/A MB Read/    Cache Overallo	Estd
  Est (MB)   Factr	  Processed Written to Disk   Hit %    Count	Time
---------- ------- ---------------- ---------------- ------ -------- -------
			ELSE
       402     0.1	    3,762.0	       125.4   97.0	  40 3.0E+07
       804     0.3	    3,762.0	       125.4   97.0	  40 3.0E+07
     1,608     0.5	    3,762.0		 0.0  100.0	   0 2.9E+07
				IF ( v_scan_query_quota = FALSE ) THEN
     2,411     0.8	    3,762.0		 0.0  100.0	   0 2.9E+07
     3,215     1.0	    3,762.0		 0.0  100.0	   0 2.9E+07
     3,858     1.2	    3,762.0		 0.0  100.0	   0 2.9E+07
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
     4,501     1.4	    3,762.0		 0.0  100.0	   0 2.9E+07
     5,144     1.6	    3,762.0		 0.0  100.0	   0 2.9E+07
     5,787     1.8	    3,762.0		 0.0  100.0	   0 2.9E+07
     6,430     2.0	    3,762.0		 0.0  100.0	   0 2.9E+07
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
     9,645     3.0	    3,762.0		 0.0  100.0	   0 2.9E+07
    12,860     4.0	    3,762.0		 0.0  100.0	   0 2.9E+07
    19,290     6.0	    3,762.0		 0.0  100.0	   0 2.9E+07
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
    25,720     8.0	    3,762.0		 0.0  100.0	   0 2.9E+07
			  ------------------------------------------------------


						v_do_scan_query := TRUE;
Shared Pool Advisory			       DB/Inst: P80DB/p80db1  Snap: 56
-> SP: Shared Pool     Est LC: Estimated Library Cache	 Factr: Factor
-> Note there is often a 1:Many correlation between a single logical object
					ELSE
   in the Library Cache, and the physical number of memory objects associated
   with it.  Therefore comparing the number of Lib Cache objects (e.g. in
   v$librarycache), with the number of Lib Cache Memory Objects is invalid.

				       Est LC Est LC  Est LC Est LC
  Shared    SP	 Est LC 		 Time	Time	Load   Load	  Est LC
						v_do_scan_query := FALSE;
    Pool  Size	   Size       Est LC	Saved  Saved	Time   Time	 Mem Obj
 Size(M) Factr	    (M)      Mem Obj	  (s)  Factr	 (s)  Factr	Hits (K)
-------- ----- -------- ------------ -------- ------ ------- ------ ------------
					END IF;
   1,472   1.0	    137        5,892	7,479	 1.0	 103	1.0	   1,038
   1,504   1.0	    169        7,351	7,480	 1.0	 102	1.0	   1,038
   1,536   1.0	    201        8,551	7,480	 1.0	 102	1.0	   1,038
				ELSE
   1,568   1.1	    209        8,939	7,480	 1.0	 102	1.0	   1,038
   1,600   1.1	    209        8,939	7,480	 1.0	 102	1.0	   1,038
   1,632   1.1	    209        8,939	7,480	 1.0	 102	1.0	   1,038
   1,664   1.1	    209        8,939	7,480	 1.0	 102	1.0	   1,038
					-- Scan quota has been filled,	force drain some random access SELECTS
   1,696   1.2	    209        8,939	7,480	 1.0	 102	1.0	   1,038
   1,728   1.2	    209        8,939	7,480	 1.0	 102	1.0	   1,038
   1,760   1.2	    209        8,939	7,480	 1.0	 102	1.0	   1,038
					v_do_scan_query := FALSE;
   1,792   1.2	    209        8,939	7,480	 1.0	 102	1.0	   1,038
   1,952   1.3	    209        8,939	7,480	 1.0	 102	1.0	   1,038
   2,112   1.4	    209        8,939	7,480	 1.0	 102	1.0	   1,038
				END IF;
   2,272   1.5	    209        8,939	7,480	 1.0	 102	1.0	   1,038
   2,432   1.7	    209        8,939	7,480	 1.0	 102	1.0	   1,038
			END IF;
		END IF;

   2,592   1.8	    209        8,939	7,480	 1.0	 102	1.0	   1,038
   2,752   1.9	    209        8,939	7,480	 1.0	 102	1.0	   1,038

   2,912   2.0	    209        8,939	7,480	 1.0	 102	1.0	   1,038
   3,072   2.1	    209        8,939	7,480	 1.0	 102	1.0	   1,038
			  ------------------------------------------------------

		IF ( v_do_scan_query != TRUE ) THEN
SGA Target Advisory			       DB/Inst: P80DB/p80db1  Snap: 56

SGA Target   SGA Size	    Est DB     Est Physical
			SELECT COUNT(c2) INTO v_rowcnt
  Size (M)     Factor	  Time (s)	      Reads
---------- ---------- ------------ ----------------
			FROM cf1
     3,624	  0.4	   159,539	 43,913,804
     4,832	  0.5	   158,571	 43,539,273
     6,040	  0.6	   158,119	 43,364,775
     7,248	  0.8	   157,276	 43,037,060
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
     8,456	  0.9	   156,480	 42,734,882
     9,664	  1.0	   156,028	 42,560,384
    10,872	  1.1	   155,419	 42,326,302
    12,080	  1.3	   154,811	 42,087,964

    13,288	  1.4	   154,515	 41,977,307
    14,496	  1.5	   153,953	 41,760,249
    15,704	  1.6	   153,438	 41,560,215
    16,912	  1.8	   153,173	 41,462,326
    18,120	  1.9	   153,173	 41,462,326
    19,328	  2.0	   153,173	 41,462,326
			  ------------------------------------------------------

Streams Pool Advisory			       DB/Inst: P80DB/p80db1  Snap: 56

		  No data exists for this section of the report.
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
			  ------------------------------------------------------

Java Pool Advisory			       DB/Inst: P80DB/p80db1  Snap: 56

		ELSE
		  No data exists for this section of the report.
			  ------------------------------------------------------

Buffer Wait Statistics			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> ordered by wait time desc, waits desc

Class			 Waits Total Wait Time (s)  Avg Time (ms)
------------------ ----------- ------------------- --------------
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
file header block	   587			64	      109
undo header		    35			 0		0
data block		     3			 0		0

undo block		     2			 0		0
			  ------------------------------------------------------


			v_scan_queries_cnt := v_scan_queries_cnt + 1;
Enqueue Activity			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> only enqueues with requests are shown
-> Enqueue stats gathered prior to 10g should not be compared with 10g data

-> ordered by Wait Time desc, Waits desc, Requests desc

Enqueue Type (Request Reason)
------------------------------------------------------------------------------
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
    Requests	Succ Gets Failed Gets	    Waits  Wt Time (s) Av Wt Time(ms)
------------ ------------ ----------- ----------- ------------ --------------
HW-Segment High Water Mark
				v_scan_query_quota := TRUE;
      19,607	   19,605	    0	      465	    99	       213.75
US-Undo Segment
       8,962	    8,958	    0	    1,306	    55		42.22
CR-Reuse Block Range (block range reuse ckpt)
			END IF;
       8,074	    8,074	    0	    2,267	    49		21.82
RO-Multiple Object Reuse (fast object reuse)
	 580	      580	    0	      172	     4		23.30
		END IF;
PS-PX Process Reservation
	 671	      671	    0	      112	     1		10.13
CF-Controlfile Transaction
       1,758	    1,758	    0	      103	     1		 7.53

TO-Temp Object
	 124	      124	    0	       38	     0		 1.26
CT-Block Change Tracking (state)
	  18	       18	    0	       18	     0		 1.61
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
FB-Format Block
	  18	       18	    0	       14	     0		 1.50
TM-DML
     119,899	  119,900	    0	       14	     0		 1.14
	ELSE
WF-AWR Flush
	  26	       25	    1	       14	     0		 1.00
DW-In memory Dispenser
	   2		2	    0		1	     0		 7.00
		--
RA-Real-Time ADDM Flood Control (RT ADDM flood control)
	   2		2	    0		2	     0		 3.00
TT-Tablespace
      10,648	   10,648	    0		3	     0		 1.33
		-- Do an UPDATE statement
DR-Distributed Recovery
	   1		1	    0		1	     0		 3.00
SW-Suspend Writes
	  18	       18	    0		1	     0		 2.00
		--
TA-Instance Undo
	   2		2	    0		1	     0		 2.00
WT-AWR CDB-Wide Table Lock

	  19	       19	    0		3	     0		  .33
FD-Flashback Database (Flashback logical operations)
	  18	       18	    0		1	     0		 1.00
MV-Online Datafile Move (datafile move)
		v_my_serial := v_my_serial + v_loop_cnt ;
	  18	       18	    0		1	     0		 1.00
RP-Resilver / Repair
	  18	       18	    0		1	     0		 1.00
TD-KTF map table enqueue (KTF dump entries)

	   1		1	    0		1	     0		 1.00
JS-Job Scheduler (job run lock - synchronize)
	   3		3	    0		1	     0		  .00
TX-Transaction
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
     121,263	  121,262	    0		0	     0		  N/A
JG-Job Scheduler1
      47,242	   47,242	    0		0	     0		  N/A
JG-Job Scheduler1 (queue lock)
		--
      47,242	   47,242	    0		0	     0		  N/A
JG-Job Scheduler1 (q mem clnup lck)
       4,498	    4,498	    0		0	     0		  N/A
IS-Instance State
		-- Increment count of UPDATES and set UPDATE quota flag if needed
       1,025	    1,025	    0		0	     0		  N/A
DD-ASM Local Disk Group
	 512	      512	    0		0	     0		  N/A
SJ-KTSJ Slave Task Cancel (Slave Task Cancel)
		--
	 448	      450	    0		0	     0		  N/A

Enqueue Activity			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> only enqueues with requests are shown
		v_updates_cnt := v_updates_cnt + 1;
-> Enqueue stats gathered prior to 10g should not be compared with 10g data
-> ordered by Wait Time desc, Waits desc, Requests desc

Enqueue Type (Request Reason)

------------------------------------------------------------------------------
    Requests	Succ Gets Failed Gets	    Waits  Wt Time (s) Av Wt Time(ms)
------------ ------------ ----------- ----------- ------------ --------------
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
BU-Buddy Instance Context (recovery set construct)
	 202	      202	    0		0	     0		  N/A
FP-File Object (global fob contention)
	 157	      157	    0		0	     0		  N/A
CU-Cursor
	 150	      150	    0		0	     0		  N/A
			v_update_quota := TRUE;
SE-Session Migration
	 128	      128	    0		0	     0		  N/A
IT-In-Mem Temp Table Meta Creation
	 100	      100	    0		0	     0		  N/A
		END IF;
DA-Instance DP Array (Slave Process Array)
	  94	       94	    0		0	     0		  N/A
CT-Block Change Tracking (CTWR process start/stop)
	  22	       22	    0		0	     0		  N/A
	END IF ;
XL-ASM Extent Fault Lock (fault extent map)
	  21	       21	    0		0	     0		  N/A
MR-Media Recovery
	  19	       19	    0		0	     0		  N/A
----------------------------------------------------------------------------------------------------------------------
SH-Active Session History Flushing
	  14	       14	    0		0	     0		  N/A
PW-Buffer Cache PreWarm (flush prewarm buffers)
	  13	       13	    0		0	     0		  N/A
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
XR-Quiesce / Force Logging (database force logging)
	  13	       13	    0		0	     0		  N/A
TH-Threshold Chain (metric threshold evaluation)
	  10	       10	    0		0	     0		  N/A
AF-Advisor Framework (task serialization)
----------------------------------------------------------------------------------------------------------------------
	   7		7	    0		0	     0		  N/A
SQ-Sequence Cache
	   6		6	    0		0	     0		  N/A
AE-Edition Lock (lock)

	   5		5	    0		0	     0		  N/A
PR-Process Startup
	   4		4	    0		0	     0		  N/A
PV-KSV slave startup (syncstart)
	   1		1	    0		0	     0		  N/A
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
			  ------------------------------------------------------


		--
Undo Segment Summary			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Min/Max TR (mins) - Min and Max Tuned Retention (minutes)
-> STO - Snapshot Too Old count,  OOS - Out of Space count
-> Undo segment block stats:
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
-> uS - unexpired Stolen,   uR - unexpired Released,   uU - unexpired reUsed
-> eS - expired   Stolen,   eR - expired   Released,   eU - expired   reUsed

Undo   Num Undo       Number of  Max Qry   Max Tx Min/Max   STO/     uS/uR/uU/
		-- so reset flags and counters before continuing
 TS# Blocks (K)    Transactions  Len (s) Concurcy TR (mins) OOS      eS/eR/eU
---- ---------- --------------- -------- -------- --------- ----- --------------
   2	   41.5 	 87,977    1,589       51 40.5/40.5 0/0   0/0/0/376/4071
		--
			  ------------------------------------------------------

Undo Segment Stats			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Most recent 35 Undostat rows, ordered by Time desc

		Num Undo    Number of Max Qry  Max Tx Tun Ret STO/    uS/uR/uU/
End Time	  Blocks Transactions Len (s)	Concy  (mins) OOS     eS/eR/eU
------------ ----------- ------------ ------- ------- ------- ----- ------------
		v_update_quota := FALSE;
12-Feb 09:09	  41,473       87,977	1,589	   51	   41 0/0   0/0/0/376/40
			  ------------------------------------------------------


		v_updates_cnt := 0;
Latch Activity				   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
		v_selects_cnt := 0;
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
	END IF;
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
AQ Background: interrupt	      1    0.0		   0	       22    0.0

AQ Coord jobx_kwsbgsgn l	     21    0.0		   0		0    N/A
AQ Message drive state o	      1    0.0		   0		0    N/A
AQ Sharded master pool l	     21    0.0		   0		0    N/A
AQ deq hash table latch 	      1    0.0		   0		0    N/A
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
AQ dequeue txn counter l	    124    0.0		   0		0    N/A
ASM Keyed state latch		     77    0.0		   0		0    N/A
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
ASM allocation			 37,374    0.0		   0		0    N/A
ASM connection state lat	  5,864    0.0		   0		0    N/A
ASM db client latch		  3,090    0.0		   0		0    N/A
ASM map headers 		  1,368    0.0		   0		0    N/A
		-- so reset flags and counters
ASM map load waiting lis	    367    0.0		   0		0    N/A
ASM map operation freeli	    679    0.0		   0		0    N/A
ASM map operation hash t     21,432,223    0.0	  0.2	   0		0    N/A
		v_scan_query_quota := FALSE;
ASM network background l	  5,607    0.0		   0		0    N/A
ASM network state latch 	    353    0.0		   0		0    N/A
ASM remote client latch 	     10    0.0		   0		0    N/A
AWR Alerted Metric Eleme	  7,093    0.0		   0		0    N/A
		v_scan_queries_cnt := 0;
Autotask management		     11    0.0		   0		0    N/A
Change Notification Hash	    276    0.0		   0		0    N/A
Column stats entry latch	      1    0.0		   0		0    N/A
Consistent RBA			 74,258    0.0	  0.4	   0		0    N/A
		v_random_access_queries_cnt := 0;
DML lock allocation		241,224    0.0	  0.0	   0		0    N/A
Event Group Locks		    118    0.0		   0		0    N/A
FIB s.o chain latch		    306    0.0		   0		0    N/A
FOB consolidated s.o lis	    306    0.0		   0		0    N/A
File State Object Pool P	      1    0.0		   0		0    N/A
GCS logfile block		      1    0.0		   0		0    N/A
GCS logfile write queue 	      1    0.0		   0		0    N/A
Hang Manager wait event 	     41    0.0		   0	    7,295    0.0
I/O Staticstics latch		      1    0.0		   0		0    N/A
ILM Stats Stripe Latch		      1    0.0		   0		0    N/A
ILM Stats main anchor la	    428    0.0		   0		0    N/A
ILM access tracking exte	      1    0.0		   0		0    N/A
	END IF;
ILM activity tracking la	      1    0.0		   0		0    N/A
IM Global dictionary lat	      1    0.0		   0		0    N/A
IM Global dictionary que	      1    0.0		   0		0    N/A
IM Global dictionary rw 	      1    0.0		   0		0    N/A

IM area sb latch		      1    0.0		   0		0    N/A
IM area scb latch		      1    0.0		   0		0    N/A
	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();
IM emb latch			      1    0.0		   0		0    N/A

IM seg hdr latch		      1    0.0		   0		0    N/A
IMFS defer write list		      1    0.0		   0		0    N/A
IMXT hash table latch		      1    0.0		   0		0    N/A
IPC other latch 		      7    0.0		   0		0    N/A
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
IPC stats buffer allocat	      1    0.0		   0		0    N/A
In memory undo latch		      1    0.0		   0		0    N/A
JS Sh mem access		  2,267    0.0		   0		0    N/A
JS broadcast add buf lat	  2,284    0.0		   0		0    N/A
		-- If this is a fixed-iteration count test cycle and we've hit the number of
JS broadcast drop buf la	  2,284    0.0		   0		0    N/A
JS broadcast load blnc l	     54    0.0		   0		0    N/A
JS global state obj latc	      6    0.0		   0		0    N/A
JS mem alloc latch		      9    0.0		   0		0    N/A
		-- iterations then set exit flag
JS queue access latch		     10    0.0		   0		0    N/A
JS queue state obj latch	 95,198    0.0		   0		0    N/A
JS slv state obj latch		     25    0.0		   0		0    N/A
KCNIBR - invalid block r	      1    0.0		   0		0    N/A
		v_stop_immediate := TRUE ;
KDCStatHash latch		      1    0.0		   0		0    N/A
KDFI Buffer Latch		      1    0.0		   0		0    N/A
KDFI Hash Bucket Latch		      1    0.0		   0		0    N/A

	END IF;
Latch Activity				   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
END LOOP;
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait

Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
KDFI Hash Elem Latch		      1    0.0		   0		0    N/A
KDMADO action list latch	      1    0.0		   0		0    N/A
v_end_time := v_now ;
KDMADO bll latch		      1    0.0		   0		0    N/A
KDMADO latch			      1    0.0		   0		0    N/A
KFC FX Hash Latch		      1    0.0		   0		0    N/A
KFC Hash Latch			      1    0.0		   0		0    N/A
v_now := DBMS_UTILITY.GET_TIME();
KFCL LE Freelist		      1    0.0		   0		0    N/A
KFIAS client latch		      1    0.0		   0		0    N/A
KFIAS cluster latch		      1    0.0		   0		0    N/A
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
KFIAS endpoint latch		      1    0.0		   0		0    N/A
KFIAS node latch		      1    0.0		   0		0    N/A
KFIAS process latch		      1    0.0		   0		0    N/A
KFIAS queue latch		      1    0.0		   0		0    N/A

KFK SGA Libload latch		  4,672    0.0		   0		0    N/A
KFMD SGA			    386    0.0		   0		0    N/A
KGNFS-NFS:SHM structure 	      1    0.0		   0		0    N/A
KGNFS-NFS:SVR LIST		    208    0.0		   0		0    N/A
v_total_time := v_end_time - v_begin_time ;
KJC message pool KGH cal	    262    0.0		   0		0    N/A
KJC message pool free li      1,632,542    0.5	  0.1	   0	1,770,856    0.6
KJC message pool pending	      1    0.0		   0		0    N/A
KJCT flow control latch       9,921,053    0.1	  0.1	   0		0    N/A
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
KMG MMAN ready and start	    207    0.0		   0		0    N/A
KSFS OFS ctx level paren	      1    0.0		   0		0    N/A
KSFS OFS req layer paren	      1    0.0		   0		0    N/A
KSFS OFS sess layer pare	      1    0.0		   0		0    N/A
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
KSFS Receive and Send Qu	      1    0.0		   0		0    N/A
KSFS id table parent lat	      1    0.0		   0		0    N/A
KSFS ksfs_node latch		      1    0.0		   0		0    N/A
KSFSD name cache parent 	      1    0.0		   0		0    N/A
KSGL LS Segment latch		      1    0.0		   0		0    N/A
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
KSGL SGA anchor latch		      1    0.0		   0		0    N/A
KSIPC ASPC anchor latch 	      1    0.0		   0		0    N/A
KSIPC SGA allocation par	    303    0.0		   0		0    N/A
KSIPCGSN Hash Table latc	      1    0.0		   0		0    N/A

KSIPCGSN Namespace latch	      1    0.0		   0		0    N/A
KSK PDB IO STAT 		      1    0.0		   0		0    N/A
KSRMA SGA anchor latch		      1    0.0		   0		0    N/A
KSRMF SGA anchor latch		      1    0.0		   0		0    N/A
END;</pre_sqltext></td></tr>
KSWL SGA anchor latch		      1    0.0		   0		0    N/A
KSXR hang analysis phase	  1,920    0.0		   0	       25    0.0
KSXR hang analysis phase	    540    0.0		   0		0    N/A
KSXR large replies		     26    0.0		   0		0    N/A
KTF sga latch			      2    0.0		   0	      347    0.0
<tr><td scope="row" class='awrc'><a class="awr" name="dn3tm10dh39sj"></a>dn3tm10dh39sj</td><td class='awrc'><pre_sqltext class="awr">DECLARE
KTILM latch			      1    0.0		   0		0    N/A
KTU in-memory txn table 	      1    0.0		   0		0    N/A
KTURMA ODPSCN latch		      1    0.0		   0		0    N/A
KTURMA SGA allocation pa	      1    0.0		   0		0    N/A
v_default_schema_number PLS_INTEGER := '32';
KWQMN job cache list lat	     88    0.0		   0		0    N/A
Latch for NonceHistory		      1    0.0		   0		0    N/A
Locator state objects po	      1    0.0		   0		0    N/A
Lost write change tracki	      1    0.0		   0		0    N/A
v_update_pct PLS_INTEGER := '15';
Lsod array latch		    159    0.0		   0		0    N/A
MGA asr alloc latch		     10    0.0		   0		0    N/A
MGA heap latch			    149    7.4	  0.1	   0		0    N/A
MGA shared context latch	  2,985    0.9	  0.2	   0		0    N/A
v_max_loop_iterations PLS_INTEGER := '0';
MGA shared context root 	    162   21.6	  0.4	   0		0    N/A
MQL Tracking Latch		      0    N/A		   0	       12    0.0
Memory Management Latch 	      0    N/A		   0	      207    0.0
v_seconds_to_run PLS_INTEGER := '600';
Memory Queue			      1    0.0		   0		0    N/A
Memory Queue Message Sub	      1    0.0		   0		0    N/A

Latch Activity				   DB/Inst: P80DB/p80db1  Snaps: 55-56
v_scale PLS_INTEGER := '1048576';
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

v_work_unit PLS_INTEGER := '12' ;
					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
v_redo_stress  VARCHAR2(12) := 'LITE';
Memory Queue Message Sub	      1    0.0		   0		0    N/A
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
Memory Queue Message Sub	      1    0.0		   0		0    N/A
Memory Queue Message Sub	      1    0.0		   0		0    N/A
Memory Queue Subscriber 	      1    0.0		   0		0    N/A
Message cache latch		      1    0.0		   0		0    N/A
MinActiveScn Latch		     33    0.0		   0		0    N/A
Mutex				      1    0.0		   0		0    N/A
Mutex Stats			      1    0.0		   0		0    N/A
Nologging Standby SCN Ti	    205    0.0		   0		0    N/A
OS process			    759    0.0		   0		0    N/A
OS process allocation		  1,326    0.0		   0		0    N/A
OS process: request allo	     76    0.0		   0		0    N/A
PDB Hash Table Latch		      1    0.0		   0		0    N/A
PDB LRU structure		      1    0.0		   0		0    N/A
PL/SQL warning settings 	    112    0.0		   0		0    N/A
PX hash array latch		      1    0.0		   0		0    N/A
Parent latch for depende	      1    0.0		   0		0    N/A
Parent latch for query h	      1    0.0		   0		0    N/A
Parent latch for segment	      1    0.0		   0		0    N/A
QMT				      1    0.0		   0		0    N/A
Real-time descriptor lat	 19,037    0.0		   0		0    N/A
Report Request stats lat	     55    0.0		   0		0    N/A
Report Request struct la	     19    0.0		   0		0    N/A
Request holder compeltio	      9    0.0		   0		0    N/A
Retry Ht elm latch		      1    0.0		   0		0    N/A
Retry bkt latch 		      1    0.0		   0		0    N/A
SGA Blackbox latch		      1    0.0		   0		0    N/A
SGA IO buffer pool latch	      6    0.0		   0		6    0.0
SGA Logging Bkt Latch		      1    0.0		   0		0    N/A
SGA Logging Log Latch		 11,287    0.0		   0		0    N/A
SGA blob parent 		      1    0.0		   0		0    N/A
SGA bucket locks		      1    0.0		   0		0    N/A
SGA heap locks			      1    0.0		   0		0    N/A
SGA pool locks			      1    0.0		   0		0    N/A
SO private so latch		    129    0.0		   0	       36    0.0
SQL memory manager latch	      1    0.0		   0	      207    0.0
SQL memory manager worka	 15,948    0.0		   0		0    N/A
SR Stats Stripe Latch		      1    0.0		   0		0    N/A
Sched IM Job latch		     11    0.0		   0		0    N/A
Sched InMem Job Cache		      1    0.0		   0		0    N/A
Shared B-Tree			     23    0.0		   0		0    N/A
Streams Generic 		      1    0.0		   0		0    N/A
Subscriber Ht elm latch 	      1    0.0		   0		0    N/A
Testing 			      1    0.0		   0		0    N/A
Token Manager			      1    0.0		   0		0    N/A
Txn Ht elm latch		      1    0.0		   0		0    N/A
Txn bkt latch			      1    0.0		   0		0    N/A
UM object latch 		      1    0.0		   0		0    N/A
Undo Hint Latch 		      0    N/A		   0	      331    0.0
WCR: sync			      1    0.0		   0		0    N/A
Write State Object Pool 	      1    0.0		   0		0    N/A
X$KSFQP 			      1    0.0		   0		0    N/A
XDB NFS Security Latch		      1    0.0		   0		0    N/A
XDB unused session pool 	      1    0.0		   0		0    N/A
XDB used session pool		      1    0.0		   0		0    N/A
active checkpoint queue 	115,559    0.6	  0.3	   0		0    N/A
active service list		 49,272    0.0	  0.0	   0	    1,741    0.0
archive destination		     22    0.0		   0		0    N/A
begin backup scn array		     29    0.0		   0		0    N/A
buffer pool			      1    0.0		   0		0    N/A

Latch Activity				   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
business card			    191    0.0		   0		0    N/A
cache buffer handles		     76    0.0		   0		0    N/A
v_updates_cnt PLS_INTEGER := 0;
cache buffers chains	     50,553,379    0.0	  0.1	   0   15,031,788    0.1
cache buffers lru chain       9,795,533    0.2	  0.0	   0   10,325,697    0.4
cache table scan latch		     49    0.0		   0	       49    0.0
call allocation 		  1,350    0.4	  0.6	   0		0    N/A
v_selects_cnt PLS_INTEGER := 0;
change notification clie	      1    0.0		   0		0    N/A
channel handle pool latc	    266    0.0		   0		0    N/A
channel operations paren	 10,331    0.1	  0.0	   0	       25    0.0

checkpoint queue latch	      4,521,434    0.0	  0.2	   0	1,378,023    0.0
client/application info 	    726    0.0		   0		0    N/A
compile environment latc	    117    0.0		   0		0    N/A
corrupted undo seg latch	     14    0.0		   0		0    N/A
v_random_access_queries_cnt PLS_INTEGER := 0;
cp handoff latch		      1    0.0		   0		0    N/A
cp pool latch			      1    0.0		   0		0    N/A
cp server hash latch		      1    0.0		   0		0    N/A
cp sga latch			     10    0.0		   0		0    N/A
cp srv type state latch 	    622    0.0		   0		0    N/A
cp srv type wait latch		      1    0.0		   0		0    N/A
cr slave free list		      1    0.0		   0		0    N/A
cvmap freelist lock		      1    0.0		   0		0    N/A
deferred cleanup latch		     10    0.0		   0		0    N/A
dispatcher info 		      4    0.0		   0		0    N/A
dml lock allocation		     10    0.0		   0		0    N/A
v_scan_queries_cnt PLS_INTEGER := 0;
done queue latch		      1    0.0		   0		0    N/A
dtp latch			     75    0.0		   0		0    N/A
dummy allocation		    290    0.0		   0		0    N/A

eighth spare latch - X p	      1    0.0		   0		0    N/A
eleventh spare latch - c	      1    0.0		   0		0    N/A
enqueue freelist latch		      1    0.0		   0	  273,084    0.0
v_do_scan_query BOOLEAN :=FALSE;
enqueue hash chains	      1,101,123    0.5	  0.1	   0	      567    0.0
enqueues			    256    0.0		   0		0    N/A
error message lists		    473    0.0		   0		0    N/A
fast space usage latch		     15    0.0		   0		0    N/A
v_scan_query_quota  BOOLEAN := FALSE;
fifteenth spare latch - 	      1    0.0		   0		0    N/A
file cache latch		  1,678    0.0		   0		0    N/A
first Audit Vault latch 	      1    0.0		   0		0    N/A
flash file access latch 	      1    0.0		   0		0    N/A
v_scan_workload_only BOOLEAN := FALSE;
flashback copy			      1    0.0		   0		0    N/A
fourteenth spare latch -	      1    0.0		   0		0    N/A
fourth Audit Vault latch	      1    0.0		   0		0    N/A
v_random_workload_only BOOLEAN := FALSE;
gc element		     30,782,498    0.1	  0.1	   1	1,733,359    0.1
gc xid list			    126    0.0		   0		0    N/A
gcs commit scn state		      1    0.0		   0		0    N/A
gcs nodemap pool		126,958    0.0	  0.0	   0		0    N/A

gcs opaque info freelist	150,731    0.0	  0.0	   0		0    N/A
gcs partitioned table ha     18,975,172    0.0	  0.0	   0	  826,019    0.0
gcs pcm hashed value buc	      1    0.0		   0		0    N/A

gcs remaster request que	      2    0.0		   0		0    N/A
gcs resource freelist	      7,106,762    0.2	  0.1	   1	3,904,635    0.3
gcs resource hash	     30,899,983    0.0	  0.2	   1	   10,231    3.3
v_random_block PLS_INTEGER := 1;
gcs resource scan list		      1    0.0		   0		0    N/A
gcs resource timerq list	      1    0.0		   0		0    N/A
gcs resource validate li	      1    0.0		   0		0    N/A
gcs shadows freelist	      3,210,278    0.0	  0.0	   0		0    N/A
v_tmp PLS_INTEGER;
ges cached resource list	187,381    0.2	  0.1	   0	   29,516    0.0
ges deadlock list		    180    0.0		   0		0    N/A
ges domain table		519,957    0.0	  0.0	   0		0    N/A
v_now PLS_INTEGER;
ges enqueue table freeli	312,115    0.0	  0.2	   0		0    N/A
ges group table 		548,457    0.0		   0		0    N/A

Latch Activity				   DB/Inst: P80DB/p80db1  Snaps: 55-56
v_brick_wall PLS_INTEGER;
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests

-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
v_begin_time PLS_INTEGER;
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
ges process hash list		 76,463    0.0	  0.4	   0		0    N/A
ges process parent latch      1,063,947    0.0	  0.7	   0		0    N/A
v_end_time PLS_INTEGER;
ges process table freeli	     76    0.0		   0		0    N/A
ges remote lock freelist	    911    0.0		   0		0    N/A
ges resource hash list		672,919    0.1	  0.2	   0	    4,582    0.1
v_total_time PLS_INTEGER;
ges resource scan list		  1,478    0.1	  0.0	   0		0    N/A
ges resource table freel	  7,066    0.0		   0		0    N/A
ges s-lock bitvec freeli	  1,404    0.0		   0		0    N/A
v_begin_cpu_tm PLS_INTEGER;
ges timeout list		    505    0.0		   0	       55    0.0
ges value block free lis	      1    0.0		   0		0    N/A
global KZLD latch for au	      1    0.0		   0		0    N/A
global tx hash mapping		      1    0.0		   0		0    N/A
v_end_cpu_tm PLS_INTEGER;
granule from data transf	      1    0.0		   0		0    N/A
gws:Sharding global desc	     42    0.0		   0		0    N/A
hash table Sql Plan Find	      0    N/A		   0	      168    0.0
hash table column usage 	      0    N/A		   0	    8,667    0.0
v_total_cpu_tm PLS_INTEGER;
hash table expression us	      1    0.0		   0		0    N/A
hash table sql contorl l	      1    0.0		   0		0    N/A
heartbeat check 		      1    0.0		   0	      395    0.0

heartbeat structure mana	      0    N/A		   0	      310    0.0
imc buf hdl lat 		      1    0.0		   0		0    N/A
imc cr clone buf		      1    0.0		   0		0    N/A
imc hash lat			      1    0.0		   0		0    N/A
v_do_sleeps BOOLEAN := FALSE;
imc sj lat			      1    0.0		   0		0    N/A
imc srchsp lat			      1    0.0		   0		0    N/A
imc-txn-wrk-lat 		      1    0.0		   0		0    N/A
in-memory area latch		      1    0.0		   0		0    N/A
v_loop_control BOOLEAN := FALSE;
in-memory columnar segme	      1    0.0		   0		0    N/A
in-memory columnar ts ex	      1    0.0		   0		0    N/A
in-memory global pool la	      1    0.0		   0		0    N/A
internal temp table obje	    265    0.0		   0		0    N/A
v_update_quota BOOLEAN := FALSE;
interrupt manipulation		    509    0.0		   0		0    N/A
intra txn parallel recov	      1    0.0		   0		0    N/A
io pool granule list		     55    0.0		   0		0    N/A
io pool granule metadata	    114    0.0		   0		0    N/A
v_select_only_workload BOOLEAN := FALSE;
job workq parent latch		      4    0.0		   0		3   33.3
job_queue_processes free	     12    0.0		   0		0    N/A
job_queue_processes para	     11    0.0		   0		0    N/A
jslv pdb context latch		      6    0.0		   0		0    N/A
v_update_only_workload BOOLEAN := FALSE;
k2q global data latch		    412    0.0		   0		0    N/A
k2q lock allocation		      1    0.0		   0		0    N/A
kKCN Cqn SGA			      1    0.0		   0		0    N/A
kcb DW scan objtemp hash	      1    0.0		   0		0    N/A
v_do_update BOOLEAN := FALSE;
kcn buffer chains		      1    0.0		   0		0    N/A
kdlx hb parent latch		      1    0.0		   0		0    N/A
kgb parent			      1    0.0		   0		0    N/A
kgnfs mount latch		      1    0.0		   0		0    N/A
v_do_hot_schema BOOLEAN := FALSE;
kjbr roi instance map		      1    0.0		   0		0    N/A
kjci objects freelist la	    913    0.0		   0		0    N/A
kjci process context lat	    873    0.2	  0.0	   0	   42,829    0.0
kjci process list latch 	    436    0.0		   0		1    0.0
v_stop_immediate BOOLEAN := FALSE;
kjci request sequence la	     94    0.0		   0		0    N/A
kjcipctx state object fr	     74    0.0		   0		0    N/A
kjoedcso state object fr	     10    0.0		   0		0    N/A
kjoeq omni enqueue hash 	      1    0.0		   0		0    N/A
v_sharing_schema BOOLEAN := FALSE;
kjoer owner hash bucket 	      1    0.0		   0		0    N/A
kjpm my inst data		     22    0.0		   0		0    N/A
kjsc Request obj freelis	    144    0.0		   0		0    N/A
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
kjsc Ring Buffer obj fre	     72    0.0		   0		0    N/A
kjsc protect control req	     72    0.0		   0	    6,236    0.0

v_scratch VARCHAR2(200) ;
Latch Activity				   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests

-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
v_cpu_pct NUMBER(6, 3);
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
kjsc protect warm up con	  2,064    0.0		   0		0    N/A
v_my_serial NUMBER(16);
kjsca pkey obj freelist 	     31    0.0		   0		0    N/A
kjsca protect pkey hash 	  8,993    0.0		   0		0    N/A
kjsca protect service ha	     23    0.0		   0		0    N/A
kjsca service obj freeli	      1    0.0		   0		0    N/A
kjscpss state object fre	     72    0.0		   0		0    N/A
kokc descriptor allocati	    264    0.0		   0		0    N/A
kpoxft latch			      0    N/A		   0	       65    0.0
krso process			     22    0.0		   0		0    N/A
ksbxic instance latch		     55    0.0		   0		0    N/A
ksevn object root latch 	    207    0.0		   0		0    N/A
ksfv messages			      1    0.0		   0		0    N/A

ksi resource reuse count	      1    0.0		   0		0    N/A
ksim group membership ca	  1,133    0.0		   0		0    N/A
ksim membership request 	      0    N/A		   0	      364    0.0
ksns object latch		      1    0.0		   0		0    N/A
BEGIN
kss move lock			      3    0.0		   0		0    N/A
ksuosstats global area		     67    0.0		   0	      238    0.0
ksutcpistat latch		      1    0.0		   0		0    N/A
ksv allocation latch		     14    0.0		   0		0    N/A

ksv class latch 		 16,577    0.0	  0.5	   0		0    N/A
ksv instance latch		     64    0.0		   0		0    N/A
ksv msg queue latch		    470    0.0		   0	      469    0.0
ksxp shared latch		     76    0.0		   0		0    N/A
ksxp so latch			     76    0.0		   0		0    N/A
ksz_so allocation latch 	     76    0.0		   0		0    N/A
ktfbn latch			    131    0.0		   0		0    N/A
ktm adg jrnls			      1    0.0		   0		0    N/A
ktm adg lookuptable leve	      1    0.0		   0		0    N/A
ktm adg lookuptable leve	      1    0.0		   0		0    N/A
ktm adg space			      1    0.0		   0		0    N/A
ktm adg stages			      1    0.0		   0		0    N/A
ktm adg worklink		      1    0.0		   0		0    N/A
ktm global data 		    183    0.0		   0		0    N/A
ktm prv jrnls			      1    0.0		   0		0    N/A
ktmpj HT ls			      1    0.0		   0		0    N/A
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
kwqbsn:qsga			     22    0.0		   0		0    N/A
kwslbmdl: metadata latch	     22    0.0		   0		0    N/A
kwslbql: queue latch		      1    0.0		   0		0    N/A
kwslbutl: uncommitted tx	      1    0.0		   0		0    N/A
EXECUTE IMMEDIATE v_home_schema_str;
kwsptQcachLt: queue cach	      1    0.0		   0		0    N/A
kwsptTrncTsksLt: trunc t	      1    0.0		   0		0    N/A
kwsptjobAdPtLt: AdPt lis	     15    0.0		   0		0    N/A
kwsslLat: skiplist latch	      1    0.0		   0		0    N/A

kxfxscanrate_latch		      1    0.0		   0		0    N/A
lgwr LWN SCN			 77,998    0.1	  0.2	   0		0    N/A
list of block allocation	     96    0.0		   0		0    N/A
loader state object free	    140    0.0		   0		0    N/A

lob segment dispenser la	     41    0.0		   0		0    N/A
lob segment hash table l	     60    0.0		   0		0    N/A
lob segment query latch 	      1    0.0		   0		0    N/A
lock DBA buffer during m	      1    0.0		   0		0    N/A
IF ( v_hot_schema_modulus != 0 ) THEN
log write info			      0    N/A		   0	   78,465    3.9
log write worker phase		 24,731    0.0		   0		0    N/A
logical standby cache		      1    0.0		   0		0    N/A
logminer context allocat	      1    0.0		   0		0    N/A
	v_do_hot_schema := TRUE;
logminer local			      1    0.0		   0		0    N/A
logminer work area		      1    0.0		   0		0    N/A
longop free list parent 	      1    0.0		   0		0    N/A
managed standby 		     21    0.0		   0		0    N/A
END IF;

Latch Activity				   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0


					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
message bitmap latch		      1    0.0		   0		0    N/A
message pool operations 	  3,912    0.0		   0		0    N/A
messages			595,652    0.2	  0.1	   0		0    N/A
msg queue latch 		      1    0.0		   0		0    N/A
IF ( v_sleep_modulus != 0 )	  THEN
multiblock read objects       1,354,847    0.2	  0.1	   0		0    N/A
name-service memory obje	    199    0.0		   0		0    N/A
name-service namespace b	  3,833    0.0		   0		0    N/A
name-service pending que	    124    0.0		   0		0    N/A
name-service request		      4    0.0		   0		0    N/A
name-service request que	  6,500    0.0		   0		0    N/A
ncodef allocation latch 	     10    0.0		   0		0    N/A
	v_do_sleeps := TRUE;
ninth spare latch - X pa	      1    0.0		   0		0    N/A
object queue header free	  4,818    0.0		   0		0    N/A
object queue header oper     21,989,990    0.0	  0.1	   0	  209,863    0.0
object queue memory		      1    0.0		   0		0    N/A
END IF;
object stats modificatio	     57    0.0		   0		0    N/A
parallel query alloc buf	  1,586    0.0		   0	      380    0.0
parallel query stats		    356    0.0		   0		0    N/A
parallel txn reco latch 	    286    0.0		   0		0    N/A

parameter table manageme	  1,279    0.0		   0		0    N/A
pdb enqueue hash chains 	      1    0.0		   0		0    N/A
peshm				      1    0.0		   0		0    N/A
pesom_free_list 		      1    0.0		   0		0    N/A
IF ( v_max_loop_iterations &gt; 0 )  THEN
pesom_hash_node 		      1    0.0		   0		0    N/A
pkey global statistics		      1    0.0		   0		0    N/A
pmon dead latch 		     10    0.0		   0		0    N/A
post/wait queue 		 38,421    0.1	  0.0	   0	   39,437    0.1
	v_loop_control := TRUE ;
process allocation		  3,129    0.0		   0		0    N/A
process group creation		     76    0.0		   0		0    N/A
process memory detail		      1    0.0		   0		0    N/A
process pkey statistics 	      1    0.0		   0		0    N/A
END IF;
process queue			    690    0.0		   0		0    N/A
process queue reference 	 21,720    0.0	  0.0	   0	    2,455    0.6
qmn task queue latch		     88    0.0		   0		0    N/A
quarantine object		     10    0.0		   0		0    N/A

query server freelists		    871    0.0		   0		0    N/A
query server process		    472    0.0		   0		1    0.0
queued dump request		      2    0.0		   0		0    N/A
queuing load statistics 	      1    0.0		   0		0    N/A
read-moslty lock queue u	      1    0.0		   0		0    N/A
recovery domain hash buc	    383    0.0		   0		0    N/A
redo allocation 		271,533    1.3	  0.2	   0	1,548,667    1.1
IF ( v_update_pct = 0 ) 	  THEN
redo copy			      1    0.0		   0	1,554,323    0.0
redo transport task		      1    0.0		   0		0    N/A
redo writing			368,616    0.1	  0.2	   0		0    N/A
remote tool request latc	    177    0.0		   0		0    N/A
resmgr group change latc	    110    0.0		   0		0    N/A
	v_select_only_workload := TRUE;
resmgr:active threads		    302    0.0		   0	       11    0.0
resmgr:actses change gro	    115    0.0		   0		0    N/A
resmgr:actses change sta	      4    0.0		   0		0    N/A
resmgr:free threads list	    289    0.3	  0.0	   0		0    N/A
END IF;
resmgr:plan CPU method		      1    0.0		   0		0    N/A
resmgr:plan change alloc	      1    0.0		   0		0    N/A
resmgr:plan change latch	      1    0.0		   0		0    N/A
resmgr:resource group CP	      1    0.0		   0		0    N/A

resmgr:schema config		     18    0.0		   0	       11    0.0
resmgr:session queuing		      1    0.0		   0		0    N/A
resumable state object		    112    0.0		   0		0    N/A
row cache objects		      1    0.0		   0		0    N/A
IF ( v_update_pct = 100 )	  THEN
rt rmv count latch		      0    N/A		   0	      310    0.0

Latch Activity				   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
	v_update_only_workload := TRUE;
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
END IF;
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
second Audit Vault latch	      1    0.0		   0		0    N/A

segmented array pool		    306    0.0		   0		0    N/A
sequence cache			    203    0.0		   0		0    N/A
service drain list		    619    0.0		   0		0    N/A
session allocation		120,341    0.0	  1.0	   0	  119,985    0.0
IF ( v_scan_query_pct = 0 ) 	THEN
session idle bit		242,120    0.0		   0		0    N/A
session queue latch		      1    0.0		   0		0    N/A
session state list latch	    355    0.0		   0		0    N/A
session statistics		    290    0.0		   0		0    N/A
	v_random_workload_only := TRUE;
session switching		     82    0.0		   0		0    N/A
session timer			    207    0.0		   0		0    N/A
seventh spare latch - X 	      1    0.0		   0		0    N/A
sga hash table parent la	      1    0.0		   0		0    N/A
END IF;
shard latch			      1    0.0		   0		0    N/A
shardgroup list latch		    179    0.0		   0		0    N/A
shared pool			 47,063    0.1	  0.1	   0	       69    0.0
shared pool sim alloc		     14    0.0		   0		0    N/A

shared pool simulator		  1,455    0.0		   0		0    N/A
shared server configurat	    207    0.0		   0		0    N/A
sim partition latch		      1    0.0		   0		0    N/A
simulator hash latch	      2,444,745    0.0	  0.2	   0		0    N/A
simulator lru latch		      1    0.0		   0	1,327,684    0.0
IF ( v_scan_query_pct = 100 ) 	THEN
sixth spare latch - X pa	      1    0.0		   0		0    N/A
sort extent pool		    553    0.0		   0		0    N/A
space background task la	  2,312   62.0	  0.9	   1	      403    3.7
state object free list		      2    0.0		   0		0    N/A
	v_scan_workload_only := TRUE;
statistics aggregation		    145    0.0		   0		0    N/A
subscriber Ht bkt		      1    0.0		   0		0    N/A
tablespace key chain		      1    0.0		   0		0    N/A
temp lob duration state 	     59    0.0		   0		0    N/A
temporary table state ob	     82    0.0		   0		0    N/A
END IF;
tenth spare latch - X pa	      1    0.0		   0		0    N/A
test excl. parent l0		      1    0.0		   0		0    N/A
test excl. parent2 l0		      1    0.0		   0		0    N/A
test excl. parent2 lmid 	      1    0.0		   0		0    N/A

test mixed exclusive		      1    0.0		   0		0    N/A
test mode exclusive		      1    0.0		   0		0    N/A
test open exclusive		      1    0.0		   0		0    N/A
test pdb exclusive		      1    0.0		   0		0    N/A
test shared parent2 lmid	      1    0.0		   0		0    N/A
thirteenth spare latch -	      1    0.0		   0		0    N/A
threshold alerts latch		     21    0.0		   0		0    N/A
transaction allocation		    972    0.0		   0		0    N/A
twelfth spare latch - ch	      1    0.0		   0		0    N/A
twenty-fifth spare latch	      1    0.0		   0		0    N/A
v_seconds_to_run := v_seconds_to_run * 100 ;
twenty-first spare latch	      1    0.0		   0		0    N/A
twenty-fourth spare latc	      1    0.0		   0		0    N/A
twenty-second spare latc	      1    0.0		   0		0    N/A
twenty-third spare latch	      1    0.0		   0		0    N/A

undo global data		801,519    0.1	  0.2	   0		1    0.0
virtual circuit buffers 	      1    0.0		   0		0    N/A
virtual circuit holder		      1    0.0		   0		0    N/A
virtual circuit queues		      1    0.0		   0		0    N/A
			  ------------------------------------------------------

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

Latch Sleep Breakdown			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> ordered by misses desc


				       Get				   Spin
Latch Name			  Requests	 Misses      Sleeps	   Gets
-------------------------- --------------- ------------ ----------- -----------
cache buffers lru chain 	 9,795,533	 24,190 	672	 23,546
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
gc element			30,782,498	 16,880       1,450	 15,535
gcs resource freelist		 7,106,762	 12,451       1,673	 10,900
KJCT flow control latch 	 9,921,053	  8,870       1,250	  7,700
KJC message pool free list	 1,632,542	  7,948       1,074	  6,951
-- DBMS_RANDOM.seed (val =&gt; v_seed);
gcs resource hash		30,899,983	  6,656       1,651	  5,116
enqueue hash chains		 1,101,123	  5,933 	593	  5,383
redo allocation 		   271,533	  3,618 	735	  2,925
multiblock read objects 	 1,354,847	  2,065 	263	  1,822

space background task latc	     2,312	  1,434       1,317	    209
cache buffers chains		50,553,379	  1,193 	168	  1,037
object queue header operat	21,989,990	    910 	 93	    829
v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;
messages			   595,652	    909 	 65	    845

active checkpoint queue la	   115,559	    702 	224	    479
ASM map operation hash tab	21,432,223	    643 	137	    514
ges resource hash list		   672,919	    485 	114	    373
----------------------------------------------------------------------------------------------------------------------
undo global data		   801,519	    402 	 63	    341
ges cached resource lists	   187,381	    294 	 26	    268
redo writing			   368,616	    212 	 39	    174
ges enqueue table freelist	   312,115	    156 	 31	    128
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
checkpoint queue latch		 4,521,434	    132 	 26	    106
lgwr LWN SCN			    77,998	     83 	 17	     67
shared pool			    47,063	     52 	  4	     48
----------------------------------------------------------------------------------------------------------------------
MGA shared context root la	       162	     35 	 15	     21
Consistent RBA			    74,258	     29 	 13	     18
MGA shared context latch	     2,985	     28 	  6	     22

ges process parent latch	 1,063,947	     22 	 16	      6
MGA heap latch			       149	     11 	  1	     10
ges process hash list		    76,463	      7 	  3	      4
call allocation 		     1,350	      5 	  3	      2
	IF  ( v_select_only_workload = TRUE ) THEN
simulator hash latch		 2,444,745	      5 	  1	      4
ksv class latch 		    16,577	      2 	  1	      1
session allocation		   120,341	      1 	  1	      0
		-- handle case where user specified zero pct updates (a SELECT-only workload)
			  ------------------------------------------------------


Latch Miss Sources			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> only latches with sleeps are shown
-> ordered by name, sleeps desc

		v_do_update := FALSE;
						     NoWait		 Waiter
Latch Name		 Where			     Misses	Sleeps	 Sleeps
------------------------ -------------------------- ------- ---------- --------
		v_update_quota := TRUE ;
ASM map operation hash t kffmTranslate			  0	    80	     62
ASM map operation hash t kffmDoDone_1			  0	    56	     72
ASM map operation hash t kffmLoad			  0	     1	      7
	ELSE
KJC message pool free li kjcsmpav: allocate a msg b	  0	   730	  1,071
KJC message pool free li kjcspfmbq: free vector of	  0	   344	      0
KJCT flow control latch  kjctcsnd: send normal mess	  0	   688	    837
		IF ( v_update_only_workload = TRUE ) THEN
KJCT flow control latch  kjcts_sedeqv3: dequeue a v	  0	   208	     24
KJCT flow control latch  kjctr_updatetkt: update ti	  0	   137	    112
KJCT flow control latch  kjcts_sqenq: queue a messa	  0	   102	    144
			-- handle case where user specified 100% updates
KJCT flow control latch  kjctr_releasetkt: change t	  0	    88	     51
KJCT flow control latch  kjcts_sqenq2: queue a mess	  0	    25	     67
			v_do_update := TRUE;
KJCT flow control latch  kjcts_adjtkt: adjust send	  0	     2	     15
MGA shared context latch ksm_mga_detach_whr2		  0	     6	      2
MGA shared context latch ksm_mga_attach_whr2		  0	     1	      0
			v_update_quota := FALSE;
MGA shared context root  ksm_mga_detach_whr1		  0	    15	     15
active checkpoint queue  kcbbacq: scan active check	  0	   172	    223
active checkpoint queue  kcbk_add_rbr_ckpt: Add rbr	  0	    43	      0
		ELSE
active checkpoint queue  kcbkcpa: Checkpoint post-p	  0	     7	      0
active checkpoint queue  kcbk_add_rbr_ckpt: Add rbr	  0	     2	      0
cache buffers chains	 kcbzibmlt: multi-block rea	  0	    52	      0
cache buffers chains	 kcbgtcr: slow path excl	  0	    25	     20
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
cache buffers chains	 kcbzgb: scan from tail now	  0	    24	      0
cache buffers chains	 kcbgtcr: convert latch 	  0	    20	      0
cache buffers chains	 kcbgcur: slow path		  0	    12	      1
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
cache buffers chains	 kcbgtcr: convert latch 4	  0	     9	      0
cache buffers chains	 kcbgcur: fast path excl	  0	     6	      6
cache buffers chains	 kcbchg: aux pin		  0	     5	      3
cache buffers chains	 kcbchg: change complete	  0	     5	      0
			IF ( v_update_quota = FALSE ) THEN
cache buffers chains	 kcbzibmlt: finish free buf	  0	     4	     16
cache buffers chains	 kcbbic1			  0	     3	      3
cache buffers chains	 kcbbxsv			  0	     3	      6
				-- Handle case where user has set UPDATE_PCT to a valid value
cache buffers chains	 kcbgtcr: fast path pin 	  0	     2	     54
cache buffers chains	 kcbnew: new latch again	  0	     2	      0
cache buffers chains	 kcbnlc 			  0	     2	      5
cache buffers chains	 kcbrls: fast pin release	  0	     2	     31
				--
cache buffers chains	 kcbzib: finish processing	  0	     2	      9
cache buffers chains	 kcbchg: rollback		  0	     1	      0
cache buffers chains	 kcbzacrb: convert latch	  0	     1	      0
				-- We are doing updates during this run and quota has not been met yet
cache buffers chains	 kclcls_3			  0	     1	      0
cache buffers chains	 kclpdcl			  0	     1	      0
cache buffers chains	 kclrwrite_3			  0	     1	      0
cache buffers lru chain  kcbzgb_2			  0	   525	    332
				-- We still vacillate until update quota has been met
cache buffers lru chain  kcbzgws			  0	   143	      0
cache buffers lru chain  kcbbwlru			  0	     2	     76
cache buffers lru chain  kcbbxsv: move to being wri	  0	     2	      0

call allocation 	 ksuxds 			  0	     2	      1
call allocation 	 ksuprc 			  0	     1	      1
checkpoint queue latch	 kcbklbc_cql			  0	    26	      0
				IF ( MOD(v_random_block,  2) = 0 ) THEN
gc element		 kclnfndnewm			  0	   898	    463
gc element		 kclulb 			  0	   296	    531
gc element		 kclplz 			  0	    72	      0
gc element		 KCLUNLNK			  0	    61	    342
					v_do_update := TRUE;
gc element		 kclrwrite			  0	    40	     34
gc element		 kclfwrite1			  0	    38	     50
gc element		 kclplz_1			  0	    24	      5
gc element		 kclrwrite_1			  0	    14	      0
				ELSE
gc element		 kclnfndx			  0	     6	     23
					v_do_update := FALSE;
gc element		 kclantilock_1			  0	     5	      0
gc element		 kclnfnds			  0	     5	     18
gc element		 kclbla 			  0	     1	      0

				END IF;
Latch Miss Sources			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> only latches with sleeps are shown
			ELSE
-> ordered by name, sleeps desc

						     NoWait		 Waiter
Latch Name		 Where			     Misses	Sleeps	 Sleeps
				-- UPDATE quota has been filled,  force drain some SELECTs
------------------------ -------------------------- ------- ---------- --------
gc element		 kclpdcl			  0	     1	      0
gcs resource freelist	 kjbralc: check freelist no	  0	 1,123	      0
gcs resource freelist	 kjbralc add resource		  0	   252	  1,483
				v_do_update := FALSE;
gcs resource freelist	 kjbrfr_bg2			  0	   177	    150
gcs resource freelist	 kjbrralc: reserve allocati	  0	   121	     40
gcs resource hash	 kjbcropen			  0	   751	    592
			END IF;
gcs resource hash	 kclfwrite1			  0	   266	     61
gcs resource hash	 kjbopen			  0	   235	     83
gcs resource hash	 kjbmpopen			  0	    86	    144
gcs resource hash	 kjblpast			  0	    84	    155
		END IF;
gcs resource hash	 kjbclose_remaster		  0	    69	    237
gcs resource hash	 kjbmpclose			  0	    52	    120
gcs resource hash	 kjblocalobj_nolock		  0	    22	     52
	END IF;
gcs resource hash	 kclrwrite			  0	    21	     82
gcs resource hash	 kjbassume			  0	    21	     19
gcs resource hash	 kjbrdowncvt			  0	    12	      2
gcs resource hash	 kjbmpflushpi			  0	    10	     29

gcs resource hash	 kclpdc 			  0	     7	     56
gcs resource hash	 kjbralc: reacquire		  0	     6	      0
gcs resource hash	 kjbrprmexpack			  0	     5	      4
gcs resource hash	 kclgrantlk_1			  0	     1	      0
gcs resource hash	 kjbconvert			  0	     1	      1
gcs resource hash	 kjblpgorm: clear anti-lock	  0	     1	      4
gcs resource hash	 kjblpsch: check cache reus	  0	     1	     14
ges cached resource list kjrm2c: move resource to c	  0	    26	     26
----------------------------------------------------------------------------------------------------------------------
ges enqueue table freeli kjlalc: lock allocation	  0	    22	     15
ges enqueue table freeli kjlfr: remove lock from pa	  0	     9	     16
ges process hash list	 kjakiqa: set inquiry respo	  0	     3	      0
ges process parent latch kjata_fg			  0	    16	      0
ges resource hash list	 kjlrlr: remove lock from r	  0	    62	     39
ges resource hash list	 kjrmas1: lookup master nod	  0	    38	      0
-- The type of SQL is now determined...execute it in the following section
ges resource hash list	 kjucvl: lock convert reque	  0	     5	      4
ges resource hash list	 kjakcai: search for resp b	  0	     3	      7
ges resource hash list	 kjlmfnd: search for lockp	  0	     3	      2
ges resource hash list	 kjcvscn: remove from scan	  0	     2	      0
ges resource hash list	 kjrref: find matched resou	  0	     1	     62
ksv class latch 	 ksvclsl: checkpool		  0	     1	      0
messages		 ksarcv 			  0	    33	     19
messages		 ksarcv: after wait		  0	    20	     22
----------------------------------------------------------------------------------------------------------------------
messages		 ksaamb: after wakeup		  0	    12	     24
mostly latch-free SCN	 kcs024 			  0	    12	      0
mostly latch-free SCN	 kcs01				  0	    10	     13
mostly latch-free SCN	 kcslcu3			  0	     5	     17

mostly latch-free SCN	 kcsnew_scn_rba 		  0	     3	      0
multiblock read objects  kcbzibmlt: normal mbr free	  0	   150	    128
multiblock read objects  kcbzibmlt			  0	   113	    135
	IF ( v_do_update != TRUE ) THEN
object queue header oper kcbo_unlink_q			  0	    70	     34
object queue header oper kcbo_link_q			  0	    11	     37
object queue header oper kcbo_switch_cq 		  0	     9	      6
		--
object queue header oper kcbo_switch_mq_bg		  0	     2	      8
object queue header oper kcbo_switch_q_bg		  0	     1	      8
redo allocation 	 kcrfw_redo_gen: redo alloc	  0	   655	      0
		-- Do a SELECT statement
redo allocation 	 kcrfw_redo_write: before w	  0	    31	    142
redo allocation 	 kcrfw_redo_gen: redo alloc	  0	    27	    517
redo allocation 	 kcrfw_post: more space 	  0	    19	     76
redo allocation 	 kcrfw_redo_gen: redo alloc	  0	     3	      0
		-- Work out scan or random
redo writing		 kcrfwcr			  0	    15	     24
redo writing		 kcrfw_post: rba scn pair	  0	    10	      1
redo writing		 kcrfw_cal_target_rba		  0	     9	     11
redo writing		 kcrfw_post: after write	  0	     5	      3
		IF  ( v_random_workload_only = TRUE ) THEN

Latch Miss Sources			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> only latches with sleeps are shown
-> ordered by name, sleeps desc
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)

						     NoWait		 Waiter
Latch Name		 Where			     Misses	Sleeps	 Sleeps
------------------------ -------------------------- ------- ---------- --------
			v_do_scan_query := FALSE;
session allocation	 ksucri_int : SSO		  0	     1	      0
simulator hash latch	 kcbsacc: insert dba		  0	     1	      0
space background task la ktsj_grab_task 		  0	 1,083	  1,272
space background task la ktsj_detach_task		  0	   135	     45
			v_scan_query_quota := TRUE ;
space background task la ktsj_smco_purgeexpired 	  0	    94	      0
space background task la ktsj_smco_movetasks		  0	     4	      0
space background task la ktsjCreateTask 		  0	     1	      0
		ELSE
undo global data	 ktusm_stealext_2		  0	    48	     26
undo global data	 ktusmupst: KSLBEGIN		  0	    10	      9
undo global data	 ktudba: KSLBEGIN		  0	     4	     22
undo global data	 ktusm_stealext: KSLBEGIN	  0	     1	      2
			IF ( v_scan_workload_only = TRUE ) THEN
unknown latch		 ksqcmi: if lk mode not req	  0	   197	     48
unknown latch		 ksqcmi: if lk mode request	  0	   137	    107
unknown latch		 ksqgtl3			  0	   133	    259
unknown latch		 ksqrcl 			  0	   104	    172
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
unknown latch		 ksqcnl 			  0	    22	      7
unknown latch		 kghfre 			  0	     5	      4
			  ------------------------------------------------------

				v_do_scan_query := TRUE;
Mutex Sleep Summary			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> ordered by number of sleeps desc

									 Wait
				v_scan_query_quota := FALSE;
Mutex Type	      Location				     Sleeps    Time (ms)
--------------------- -------------------------------- ------------ ------------
Row Cache	      [19] kqrpre				 50	     156
Library Cache	      kgllkdl1	85				  3	       0
			ELSE
Row Cache	      [06] kqrGetClusterLock			  2	       0
			  ------------------------------------------------------


				IF ( v_scan_query_quota = FALSE ) THEN
Parent Latch Statistics 		   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.
			  ------------------------------------------------------

					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
Child Latch Statistics			   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.
			  ------------------------------------------------------
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN


Segments by Logical Reads		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Total Logical Reads:      11,686,333
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
-> Captured Segments account for   54.0% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------
		     Subobject	Obj.				 Logical
Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
						v_do_scan_query := TRUE;
USER59		     IOPS
CF1				TABLE	   73512      73515	 210,304    1.80
USER60		     IOPS
CF1				TABLE	   73518      73522	 208,160    1.78
					ELSE
USER53		     IOPS
CF1				TABLE	   73481      73484	 207,712    1.78
USER74		     IOPS
CF1				TABLE	   73590      73594	 147,744    1.26
USER44		     IOPS
						v_do_scan_query := FALSE;
CF1				TABLE	   73437      73444	 143,792    1.23
			  ------------------------------------------------------

Segments by Physical Reads		   DB/Inst: P80DB/p80db1  Snaps: 55-56
					END IF;
-> Total Physical Reads:       8,848,730
-> Captured Segments account for   70.5% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

				ELSE
		     Tablespace
Owner			Name
-------------------- ----------
		     Subobject	Obj.				Physical
Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
					-- Scan quota has been filled,	force drain some random access SELECTS
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER59		     IOPS
CF1				TABLE	   73512      73515	 207,405    2.34
USER60		     IOPS
					v_do_scan_query := FALSE;
CF1				TABLE	   73518      73522	 205,413    2.32
USER53		     IOPS
CF1				TABLE	   73481      73484	 204,744    2.31
USER74		     IOPS
CF1				TABLE	   73590      73594	 146,220    1.65
				END IF;
USER44		     IOPS
CF1				TABLE	   73437      73444	 142,125    1.61
			  ------------------------------------------------------

			END IF;
Segments by Physical Read Requests	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Total Physical Read Requests:       8,847,855
-> Captured Segments account for   70.5% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available
		END IF;

		     Tablespace
Owner			Name
-------------------- ----------

		     Subobject	Obj.			       Phys Read
Object Name	       Name	Type	    Obj#   Dataobj#	Requests  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER59		     IOPS
CF1				TABLE	   73512      73515	 207,405    2.34
USER60		     IOPS
CF1				TABLE	   73518      73522	 205,413    2.32
USER53		     IOPS
CF1				TABLE	   73481      73484	 204,744    2.31
USER74		     IOPS
CF1				TABLE	   73590      73594	 146,220    1.65
USER44		     IOPS
CF1				TABLE	   73437      73444	 142,125    1.61

			  ------------------------------------------------------

Segments by UnOptimized Reads		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Total UnOptimized Read Requests:	  8,847,855
-> Captured Segments account for   70.5% of Total
		IF ( v_do_scan_query != TRUE ) THEN
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
			SELECT COUNT(c2) INTO v_rowcnt
-------------------- ----------
		     Subobject	Obj.			     UnOptimized
Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
			FROM cf1
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER59		     IOPS
CF1				TABLE	   73512      73515	 207,405    2.34
USER60		     IOPS
CF1				TABLE	   73518      73522	 205,413    2.32
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
USER53		     IOPS
CF1				TABLE	   73481      73484	 204,744    2.31
USER74		     IOPS
CF1				TABLE	   73590      73594	 146,220    1.65

USER44		     IOPS
CF1				TABLE	   73437      73444	 142,125    1.61
			  ------------------------------------------------------

Segments by Optimized Reads		   DB/Inst: P80DB/p80db1  Snaps: 55-56
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;

		  No data exists for this section of the report.
			  ------------------------------------------------------

		ELSE
Segments by Direct Physical Reads	   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.
			  ------------------------------------------------------

			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
Segments by Physical Writes		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Total Physical Writes:	1,377,434
-> Captured Segments account for   68.4% of Total

-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
		     Subobject	Obj.				Physical
Object Name	       Name	Type	    Obj#   Dataobj#	  Writes  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER59		     IOPS

CF1				TABLE	   73512      73515	  31,267    2.27
USER53		     IOPS
CF1				TABLE	   73481      73484	  30,854    2.24
USER60		     IOPS
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
CF1				TABLE	   73518      73522	  30,830    2.24
USER74		     IOPS
CF1				TABLE	   73590      73594	  22,403    1.63
USER44		     IOPS
		END IF;
CF1				TABLE	   73437      73444	  21,540    1.56
			  ------------------------------------------------------

Segments by Physical Write Requests	   DB/Inst: P80DB/p80db1  Snaps: 55-56

-> Total Physical Write Requests:	1,319,809
-> Captured Segments account for   71.3% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
Owner			Name
-------------------- ----------
		     Subobject	Obj.			      Phys Write
Object Name	       Name	Type	    Obj#   Dataobj#	Requests  %Total
	ELSE
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER59		     IOPS
CF1				TABLE	   73512      73515	  31,195    2.36
USER60		     IOPS
CF1				TABLE	   73518      73522	  30,766    2.33
		--
USER53		     IOPS
CF1				TABLE	   73481      73484	  30,760    2.33
USER74		     IOPS
CF1				TABLE	   73590      73594	  22,388    1.70
USER44		     IOPS
		-- Do an UPDATE statement
CF1				TABLE	   73437      73444	  21,501    1.63
			  ------------------------------------------------------

Segments by Direct Physical Writes	   DB/Inst: P80DB/p80db1  Snaps: 55-56
		--
-> Total Direct Physical Writes:	   1,107
-> Captured Segments account for   19.2% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available


		     Tablespace
Owner			Name
-------------------- ----------
		     Subobject	Obj.				  Direct
Object Name	       Name	Type	    Obj#   Dataobj#	  Writes  %Total
		v_my_serial := v_my_serial + v_loop_cnt ;
-------------------- ---------- ----- ---------- ---------- ------------ -------
SYS		     SYSAUX
WRH$_ACTIVE_SESSION_ 32778098_0 TABLE	   73031      73031	     212   19.15

			  ------------------------------------------------------

Segments by Table Scans 		   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
			  ------------------------------------------------------

Segments by DB Blocks Changes		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> % of Capture shows % of DB Block Changes for each top segment compared
		--
-> with total DB Block Changes for all segments captured by the Snapshot
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
		-- Increment count of UPDATES and set UPDATE quota flag if needed
-------------------- ----------
		     Subobject	Obj.				DB Block    % of
Object Name	       Name	Type	    Obj#   Dataobj#	 Changes Capture
-------------------- ---------- ----- ---------- ---------- ------------ -------
		--
USER60		     IOPS
CF1				TABLE	   73518      73522	  31,296    3.30
USER53		     IOPS
CF1				TABLE	   73481      73484	  31,184    3.29
USER59		     IOPS
		v_updates_cnt := v_updates_cnt + 1;
CF1				TABLE	   73512      73515	  30,528    3.22
USER74		     IOPS
CF1				TABLE	   73590      73594	  22,128    2.34
USER44		     IOPS
CF1				TABLE	   73437      73444	  21,520    2.27

			  ------------------------------------------------------


Segments by Row Lock Waits		   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			  ------------------------------------------------------

Segments by ITL Waits			   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.
			  ------------------------------------------------------

Segments by Buffer Busy Waits		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> % of Capture shows % of Buffer Busy Waits for each top segment compared
			v_update_quota := TRUE;
-> with total Buffer Busy Waits for all segments captured by the Snapshot
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------
								  Buffer
		     Subobject	Obj.				    Busy    % of
		END IF;
Object Name	       Name	Type	    Obj#   Dataobj#	   Waits Capture
-------------------- ---------- ----- ---------- ---------- ------------ -------
SYS		     SYSTEM
SEG$				TABLE	      14	  8	       1  100.00
			  ------------------------------------------------------

	END IF ;
Segments by Global Cache Buffer Busy	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> % of Capture shows % of GC Buffer Busy for each top segment compared
-> with GC Buffer Busy for all segments captured by the Snapshot
-> When ** MISSING ** occurs, some of the object attributes may not be available

----------------------------------------------------------------------------------------------------------------------
		     Tablespace
Owner			Name
-------------------- ----------
								      GC
		     Subobject	Obj.				  Buffer    % of
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
Object Name	       Name	Type	    Obj#   Dataobj#	    Busy Capture
-------------------- ---------- ----- ---------- ---------- ------------ -------
SYS		     SYSTEM
SEG$				TABLE	      14	  8	       2  100.00
			  ------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------


Segments by CR Blocks Received		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Total CR Blocks Received:	       3,394
-> Captured Segments account for   50.1% of Total

-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
-------------------- ----------
								   CR
		     Subobject	Obj.				 Blocks
Object Name	       Name	Type	    Obj#   Dataobj#	Received  %Total
		--
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER27		     IOPS
CF1				TABLE	   73351      73354	     117    3.45
USER51		     IOPS
CF1				TABLE	   73471      73476	      97    2.86
USER95		     IOPS
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
CF1				TABLE	   73691      73690	      80    2.36
USER23		     IOPS
CF1				TABLE	   73320      73333	      76    2.24
USER97		     IOPS
CF1				TABLE	   73701      73700	      72    2.12
		-- so reset flags and counters before continuing
			  ------------------------------------------------------

Segments by Current Blocks Received	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Total Current Blocks Received:	    2,538
-> Captured Segments account for   51.4% of Total
		--
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------
		v_update_quota := FALSE;
								 Current
		     Subobject	Obj.				 Blocks
Object Name	       Name	Type	    Obj#   Dataobj#	Received  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER52		     IOPS
		v_updates_cnt := 0;
CF1				TABLE	   73479      73483	      54    2.13
USER23		     IOPS
CF1				TABLE	   73320      73333	      52    2.05
USER26		     IOPS
CF1				TABLE	   73349      73353	      52    2.05
		v_selects_cnt := 0;
USER46		     IOPS
CF1				TABLE	   73448      73452	      52    2.05
USER27		     IOPS
CF1				TABLE	   73351      73354	      48    1.89
			  ------------------------------------------------------

Segments by Global Cache Remote Grants	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Total Global Cache Remote Grants:	   4,153,196
-> Captured Segments account for   69.5% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
-------------------- ----------
	END IF;
								      GC
		     Subobject	Obj.				  Remote
Object Name	       Name	Type	    Obj#   Dataobj#	  Grants  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER26		     IOPS
CF1				TABLE	   73349      73353	 110,869    2.67
USER46		     IOPS
CF1				TABLE	   73448      73452	 105,843    2.55
USER73		     IOPS

CF1				TABLE	   73582      73585	  77,941    1.88
USER78		     IOPS
CF1				TABLE	   73610      73614	  75,201    1.81
USER43		     IOPS
CF1				TABLE	   73432      73435	  74,076    1.78
			  ------------------------------------------------------
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN


Dictionary Cache Stats			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> "Pct Misses"  should be very low (< 2% in most cases)
-> "Final Usage" is the number of cache entries being used
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,

				   Get	  Pct	 Scan	Pct	 Mod	  Final
Cache			      Requests	 Miss	 Reqs  Miss	Reqs	  Usage
------------------------- ------------ ------ ------- ----- -------- ----------
		-- so reset flags and counters
dc_awr_control			    51	  2.0	    0	N/A	   5	      1
dc_global_oids			 8,039	  0.7	    0	N/A	   0	    405
dc_histogram_data		 3,765	  3.1	    0	N/A	   0	  1,912
dc_histogram_defs		 6,397	  5.3	    0	N/A	 207	  4,609
		v_scan_query_quota := FALSE;
dc_objects			12,057	  1.3	    0	N/A	 115	  2,605
dc_profiles			     2	  0.0	    0	N/A	   0	      1
dc_props			   549	  0.0	    0	N/A	   0	      3
dc_rollback_segments		51,222	  0.0	    0	N/A	   0	    145
		v_scan_queries_cnt := 0;
dc_segments			 1,713	  1.0	    0	N/A	  12	    397
dc_sequences			    13	 30.8	    0	N/A	  13	      6
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="dn5ztpzaw0pcu"></a>dn5ztpzaw0pcu</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '4';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
dc_tablespaces			   519	  0.0	    0	N/A	   0	      7
dc_users			   427	  0.0	    4	0.0	   0	    415
v_scan_query_pct PLS_INTEGER := '0';
outstanding_alerts		     2	100.0	    0	N/A	   0	      4
sch_lj_oids			     6	  0.0	    0	N/A	   0	      3
			  ------------------------------------------------------

v_obfuscate VARCHAR(5)	:= 'FALSE';
Dictionary Cache Stats (RAC)		   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.

			  ------------------------------------------------------

Library Cache Activity			   DB/Inst: P80DB/p80db1  Snaps: 55-56

-> "Pct Misses"  should be very low

			 Get	Pct	       Pin    Pct	      Invali-
Namespace	    Requests   Miss	  Requests   Miss    Reloads  dations
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
--------------- ------------ ------ -------------- ------ ---------- --------
ACCOUNT_STATUS		   4	0.0		 0    N/A	   0	    0
AUDIT POLICY		   2	0.0		 2    0.0	   0	    0
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
BODY			 165	3.6	       557    1.6	   2	    0
CLUSTER 		  11	0.0		11    0.0	   0	    0
DBLINK			   5	0.0		 0    N/A	   0	    0

EDITION 		   5	0.0		10    0.0	   0	    0
HINTSET OBJECT		   3	0.0		 3    0.0	   0	    0
INDEX			   7	0.0		 7    0.0	   0	    0
OBJECT ID		  28  100.0		 0    N/A	   0	    0
v_num_tmp NUMBER := 0;
QUEUE			  62	0.0		62    0.0	   0	    0
SCHEMA			 198	0.0		 0    N/A	   0	    0
SQL AREA	       1,449   16.2	   810,698    0.0	  23	   29

SQL AREA BUILD		 171   78.9		 0    N/A	   0	    0
SQL AREA STATS		 171   89.5	       171   89.5	   0	    0
TABLE/PROCEDURE        1,741	5.9	    12,809    2.9	 127	    0
v_loop_cnt PLS_INTEGER := 0;
TRANSFORMATION		  62	0.0		62    0.0	   0	    0
TRIGGER 		   7	0.0		 7    0.0	   0	    0
			  ------------------------------------------------------

v_rowcnt PLS_INTEGER := 0;
Library Cache Activity (RAC)		   DB/Inst: P80DB/p80db1  Snaps: 55-56

		    GES Lock	  GES Pin      GES Pin	 GES Inval GES Invali-
v_updates_cnt PLS_INTEGER := 0;
Namespace	    Requests	 Requests     Releases	  Requests     dations
--------------- ------------ ------------ ------------ ----------- -----------
ACCOUNT_STATUS		   4		0	     0		 0	     0
v_selects_cnt PLS_INTEGER := 0;
AUDIT POLICY		   2		2	     2		 0	     0
BODY			 179	      530	   530		 0	     0
CLUSTER 		  11	       11	    11		 0	     0

DBLINK			   5		0	     0		 0	     0
EDITION 		   5		5	     5		 0	     0
HINTSET OBJECT		   3		3	     3		 0	     0
v_random_access_queries_cnt PLS_INTEGER := 0;
INDEX			   7		7	     7		 0	     0
QUEUE			  62	       62	    62		 0	     0
SCHEMA			  32		0	     0		 0	     0
v_scan_queries_cnt PLS_INTEGER := 0;
TABLE/PROCEDURE        4,649	   10,433	10,433		 0	     0
TRANSFORMATION		  62	       62	    62		 0	     0
TRIGGER 		   0		7	     7		 0	     0

			  ------------------------------------------------------


Memory Dynamic Components		   DB/Inst: P80DB/p80db1  Snaps: 55-56
v_do_scan_query BOOLEAN :=FALSE;
-> Min/Max sizes since instance startup
-> Oper Types/Modes: INItializing,GROw,SHRink,STAtic/IMMediate,DEFerred
-> ordered by Component

v_scan_query_quota  BOOLEAN := FALSE;
		 Begin Snap	Current 	Min	    Max   Oper Last Op
Component	  Size (Mb)   Size (Mb)   Size (Mb)   Size (Mb)  Count Typ/Mod
--------------- ----------- ----------- ----------- ----------- ------ -------
v_scan_workload_only BOOLEAN := FALSE;
ASM Buffer Cach 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 16K buf 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 2K buff 	.00	    .00 	.00	    .00      0 STA/
v_random_workload_only BOOLEAN := FALSE;
DEFAULT 32K buf 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 4K buff 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 8K buff 	.00	    .00 	.00	    .00      0 STA/

DEFAULT buffer	   7,872.00    7,872.00    7,872.00    7,872.00      0 INI/
Data Transfer C 	.00	    .00 	.00	    .00      0 STA/
In Memory RO Ex 	.00	    .00 	.00	    .00      0 STA/

In Memory RW Ex 	.00	    .00 	.00	    .00      0 STA/
In-Memory Area		.00	    .00 	.00	    .00      0 STA/
KEEP buffer cac 	.00	    .00 	.00	    .00      0 STA/
PGA Target	   3,232.00    3,232.00    3,232.00    3,232.00      0 STA/
v_random_block PLS_INTEGER := 1;
RECYCLE buffer		.00	    .00 	.00	    .00      0 STA/
SGA Target	   9,664.00    9,664.00    9,664.00    9,664.00      0 STA/
Shared IO Pool	     128.00	 128.00      128.00	 128.00      0 STA/
v_tmp PLS_INTEGER;
java pool		.00	    .00 	.00	    .00      0 STA/
large pool	     160.00	 160.00      160.00	 160.00      0 STA/
memoptimize buf 	.00	    .00 	.00	    .00      0 STA/
v_now PLS_INTEGER;
shared pool	   1,472.00    1,472.00    1,472.00    1,472.00      0 STA/
streams pool		.00	    .00 	.00	    .00      0 STA/
unified pga poo 	.00	    .00 	.00	    .00      0 STA/
v_brick_wall PLS_INTEGER;
			  ------------------------------------------------------

Memory Resize Operations Summary	   DB/Inst: P80DB/p80db1  Snaps: 55-56


		  No data exists for this section of the report.
			  ------------------------------------------------------

Memory Resize Ops			   DB/Inst: P80DB/p80db1  Snaps: 55-56
v_begin_time PLS_INTEGER;

		  No data exists for this section of the report.
			  ------------------------------------------------------

v_end_time PLS_INTEGER;
Process Memory Summary			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> B: Begin Snap   E: End Snap
-> All rows below contain absolute values (i.e. not diffed over the interval)
v_total_time PLS_INTEGER;
-> Max Alloc is Maximum PGA Allocation size at snapshot time
-> Hist Max Alloc is the Historical Max Allocation for still-connected processes
-> ordered by Begin/End snapshot, Alloc (MB) desc
v_begin_cpu_tm PLS_INTEGER;
-> Top 10 containers by Alloc (MB) at end snapshot time are displayed

							     Hist
				     Avg  Std Dev     Max     Max
v_end_cpu_tm PLS_INTEGER;
		Alloc	   Used    Alloc    Alloc   Alloc   Alloc    Num    Num
   Category	 (MB)	   (MB)     (MB)     (MB)    (MB)    (MB)   Proc  Alloc
 - -------- --------- --------- -------- -------- ------- ------- ------ ------
v_total_cpu_tm PLS_INTEGER;
B Freeable     201.8	    .0	    3.4      7.1      35     N/A     59     59
  Other      1,062.2	   N/A	    4.1      5.5      38      38    260    260

  PL/SQL	37.4	  36.0	     .2       .3       1       3    196    192
  SQL		30.6	  26.7	     .2       .4       1      18    135    110
  Total      1,332.0	  62.7	    7.9     13.3      75      58    650    621
v_do_sleeps BOOLEAN := FALSE;
E Freeable     179.2	    .0	    5.1      8.9      33     N/A     35     35
  Other        771.8	   N/A	    4.0      6.4      39      39    194    194
  PL/SQL	 7.4	   6.4	     .1       .3       1       3    130    128
  SQL		 3.9	   2.3	     .1       .2       1      18     69     32
v_loop_control BOOLEAN := FALSE;
  Total        962.2	   8.7	    9.2     15.7      74      60    428    389
			  ------------------------------------------------------

v_update_quota BOOLEAN := FALSE;
SGA Memory Summary			   DB/Inst: P80DB/p80db1  Snaps: 55-56

						      End Size (Bytes)
SGA regions			Begin Size (Bytes)	(if different)
v_select_only_workload BOOLEAN := FALSE;
------------------------------ ------------------- -------------------
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
Database Buffers		     8,388,608,000
v_do_hot_schema BOOLEAN := FALSE;
Fixed Size				12,445,928
Redo Buffers				21,106,688
Variable Size			     1,711,276,032
			       -------------------
v_stop_immediate BOOLEAN := FALSE;
sum				    10,133,436,648
			  ------------------------------------------------------

SGA breakdown difference by Pool and Name  DB/Inst: P80DB/p80db1  Snaps: 55-56
v_sharing_schema BOOLEAN := FALSE;
-> ordered by Pool, Name
-> N/A value for Begin MB or End MB indicates the size of that Pool/Name was
   insignificant, or zero in that snapshot

v_seed VARCHAR2(128);
Pool   Name				    Begin MB	     End MB  % Diff
------ ------------------------------ -------------- -------------- -------
large  PX msg pool			       128.0	      128.0    0.00
v_home_schema_str VARCHAR2(80);
large  free memory				31.6	       31.6    0.00
shared ASH buffers				64.0	       64.0    0.00
shared KGLH0					46.9	       47.5    1.33
shared KJSC rnb slots				39.3	       21.2  -46.02
v_scratch VARCHAR2(200) ;
shared SO private sga				30.4	       30.4    0.00
shared SQLA					81.3	       91.0   12.05
shared db_block_hash_buckets			32.0	       32.0    0.00
shared dbwriter coalesce buffer 		16.0	       16.0    0.00
shared free memory			       155.1	      169.3    9.14
shared gc name table				48.0	       48.0    0.00
shared gcs resources			       266.7	      266.7    0.00
shared gcs resv res hash bucket 		72.0	       72.0    0.00
shared gcs shadows			       145.5	      145.5    0.00
shared ges big msg buffers			26.3	       26.3    0.00

shared ksunfy_meta 1				25.2	       25.2    0.00
shared object queue hash buckets		16.0	       16.0    0.00
shared row cache				  .0		 .0    0.00
       buffer_cache			     7,872.0	    7,872.0    0.00
v_cpu_pct NUMBER(6, 3);
       fixed_sga				11.9	       11.9    0.00
       log_buffer				20.1	       20.1    0.00
       shared_io_pool			       128.0	      128.0    0.00
			  ------------------------------------------------------
v_my_serial NUMBER(16);


Replication System Resource Usage	   DB/Inst: P80DB/p80db1  Snaps: 55-56


		  No data exists for this section of the report.
			  ------------------------------------------------------

Replication SGA Usage			   DB/Inst: P80DB/p80db1  Snaps: 55-56
BEGIN

		  No data exists for this section of the report.
			  ------------------------------------------------------



GoldenGate Capture			   DB/Inst: P80DB/p80db1  Snaps: 55-56

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
		  No data exists for this section of the report.
			  ------------------------------------------------------

GoldenGate Capture Rate 		   DB/Inst: P80DB/p80db1  Snaps: 55-56
EXECUTE IMMEDIATE v_home_schema_str;

		  No data exists for this section of the report.
			  ------------------------------------------------------


GoldenGate Apply Reader 		   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.
			  ------------------------------------------------------


GoldenGate Apply Coordinator		   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.
IF ( v_hot_schema_modulus != 0 ) THEN
			  ------------------------------------------------------

GoldenGate Apply Server 		   DB/Inst: P80DB/p80db1  Snaps: 55-56

	v_do_hot_schema := TRUE;
		  No data exists for this section of the report.
			  ------------------------------------------------------

GoldenGate Apply Coordinator Rate	   DB/Inst: P80DB/p80db1  Snaps: 55-56
END IF;

		  No data exists for this section of the report.
			  ------------------------------------------------------


GoldenGate Apply Reader and Server Rate    DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.
			  ------------------------------------------------------
IF ( v_sleep_modulus != 0 )	  THEN


XStream Capture 			   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.
	v_do_sleeps := TRUE;
			  ------------------------------------------------------

XStream Capture Rate			   DB/Inst: P80DB/p80db1  Snaps: 55-56

END IF;
		  No data exists for this section of the report.
			  ------------------------------------------------------

XStream Apply Reader			   DB/Inst: P80DB/p80db1  Snaps: 55-56


		  No data exists for this section of the report.
			  ------------------------------------------------------

IF ( v_max_loop_iterations &gt; 0 )  THEN
XStream Apply Coordinator		   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.
			  ------------------------------------------------------

	v_loop_control := TRUE ;
XStream Apply Server			   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.
			  ------------------------------------------------------
END IF;

XStream Apply Coordinator Rate		   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.

			  ------------------------------------------------------

XStream Apply Reader and Server Rate	   DB/Inst: P80DB/p80db1  Snaps: 55-56

IF ( v_update_pct = 0 ) 	  THEN
		  No data exists for this section of the report.
			  ------------------------------------------------------


	v_select_only_workload := TRUE;
Table Statistics by DML Operations	   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.
			  ------------------------------------------------------
END IF;

Table Statistics by Conflict Resolutions   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.

			  ------------------------------------------------------

Replication Large Transaction Statistics   DB/Inst: P80DB/p80db1  Snaps: 55-56

IF ( v_update_pct = 100 )	  THEN
		  No data exists for this section of the report.
			  ------------------------------------------------------

	v_update_only_workload := TRUE;
Replication Long Running Transaction StatisticsDB/Inst: P80DB/p80db1  Snaps: 5

		  No data exists for this section of the report.
			  ------------------------------------------------------
END IF;


Advanced Queue CPU/IO Usage		   DB/Inst: P80DB/p80db1  Snaps: 55-56


		  No data exists for this section of the report.
			  ------------------------------------------------------

IF ( v_scan_query_pct = 0 ) 	THEN
Buffered Queues 			   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.
			  ------------------------------------------------------

	v_random_workload_only := TRUE;
Buffered Queue Subscribers		   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.
			  ------------------------------------------------------
END IF;

Rule Set				   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.

			  ------------------------------------------------------

Persistent Queues			   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.
IF ( v_scan_query_pct = 100 ) 	THEN
			  ------------------------------------------------------

Persistent Queues Rate			   DB/Inst: P80DB/p80db1  Snaps: 55-56

	v_scan_workload_only := TRUE;
		  No data exists for this section of the report.
			  ------------------------------------------------------

Persistent Queue Subscribers		   DB/Inst: P80DB/p80db1  Snaps: 55-56

END IF;
		  No data exists for this section of the report.
			  ------------------------------------------------------



Resource Limit Stats			       DB/Inst: P80DB/p80db1  Snap: 56
-> Only rows with Current or Maximum Utilization > 80% of Limit are shown
-> For "UNLIMITED" resources, rows whose Current or Maximum Utilization
   exceeds 2*Initial Allocation are shown
v_seconds_to_run := v_seconds_to_run * 100 ;
-> Ordered by Resource Name

				  Current      Maximum	   Initial
Resource Name			Utilization  Utilization Allocation   Limit

------------------------------ ------------ ------------ ---------- ----------
ges_cache_ress			      3,233	   4,219	  0  UNLIMITED
			  ------------------------------------------------------

Shared Servers Activity 		   DB/Inst: P80DB/p80db1  Snaps: 55-56
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
-> Values represent averages for all samples

   Avg Total   Avg Active    Avg Total	 Avg Active    Avg Total   Avg Active

 Connections  Connections Shared Srvrs Shared Srvrs  Dispatchers  Dispatchers
------------ ------------ ------------ ------------ ------------ ------------
	   0		0	     1		  0	       1	    0
			  ------------------------------------------------------

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
Shared Servers Rates			   DB/Inst: P80DB/p80db1  Snaps: 55-56

  Common     Disp			 Common       Disp     Server
   Queue    Queue   Server    Server	  Queue      Queue	Total	  Server
-- DBMS_RANDOM.seed (val =&gt; v_seed);
 Per Sec  Per Sec Msgs/Sec    KB/Sec	  Total      Total	 Msgs  Total(KB)
-------- -------- -------- --------- ---------- ---------- ---------- ----------
       0	0	 0	 0.0	      0 	 0	    0	       0

			  ------------------------------------------------------

Shared Servers Utilization		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Statistics are combined for all servers
v_begin_time := DBMS_UTILITY.GET_TIME();
-> Incoming and Outgoing Net % are included in %Busy

  Total Server			  Incoming  Outgoing
      Time (s)	  %Busy    %Idle     Net %     Net %
v_now := v_begin_time ;
-------------- -------- -------- --------- ---------
	   619	    0.0    100.0       0.0	 0.0
			  ------------------------------------------------------

v_brick_wall := v_now + v_seconds_to_run ;
Shared Servers Common Queue		   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.
			  ------------------------------------------------------

v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
Shared Servers Dispatchers		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Ordered by %Busy, descending
-> Total Queued, Total Queue Wait and Avg Queue Wait are for dispatcher queue

-> Name suffixes:
     "(N)" - dispatcher started between begin and end snapshots
     "(R)" - dispatcher re-started between begin and end snapshots

----------------------------------------------------------------------------------------------------------------------
	      Avg Total Disp			    Total Total Queue  Avg Queue
Name	    Conns   Time (s)	%Busy	 %Idle	   Queued    Wait (s)  Wait (ms)
------- --------- ---------- -------- -------- ---------- ----------- ----------
D000	      0.0	 619	  0.0	 100.0		0	    0
-- The following WHILE loop is the master work loop control
			  ------------------------------------------------------


Modified Parameters			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> This section shows all the modified initialization parameters that
----------------------------------------------------------------------------------------------------------------------
were in effect during the entire snapshot interval
-> End Value is displayed only if the parameter value was modified within
the snapshot interval

								End value
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
Parameter Name		      Begin value			(if different)
----------------------------- --------------------------------- --------------
_ipddb_enable		      TRUE
audit_file_dest 	      /u01/app/oracle/admin/p80db/adump
audit_trail		      DB
cluster_database	      TRUE
compatible		      19.0.0
control_files		      +P80/P80DB/CONTROLFILE/current.26
db_block_size		      8192
db_create_file_dest	      +P80
db_domain		      example.com
db_name 		      p80db
db_recovery_file_dest	      +FRA
db_recovery_file_dest_size    274877906944

diagnostic_dest 	      /u01/app/oracle
dispatchers		      (PROTOCOL=TCP) (SERVICE=p80dbXDB)
instance_number 	      1
listener_networks
local_listener		       (ADDRESS=(PROTOCOL=TCP)(HOST=192
nls_language		      AMERICAN
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
nls_territory		      AMERICA
open_cursors		      300
pga_aggregate_target	      3371171840
processes		      640
remote_listener 	       mcracpoc-scan.example.com:1521
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
remote_login_passwordfile     EXCLUSIVE
sga_target		      10133438464
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
thread			      1
undo_tablespace 	      UNDOTBS1
			  ------------------------------------------------------
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );


			DBMS_LOCK.SLEEP(v_num_tmp);
Modified Multi-Valued Parameters	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> This section only displays parameters that have more than one value
->'(NULL)' indicates a missing parameter value
-> A blank in the 'End Snapshot' indicates the same value as the 'Begin Snapshot
		END IF;

								End value
Parameter Name		      Begin value			(if different)
----------------------------- --------------------------------- --------------
	END IF;
control_files		      +FRA/P80DB/CONTROLFILE/current.26
			      +P80/P80DB/CONTROLFILE/current.26
			  ------------------------------------------------------


Top SQL with Top Events 		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Top SQL statements by DB Time along with the top events by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
-> % Event is the percentage of DB Time due to the event that the SQL is
   waiting on.
-> % Row Source is the percentage of DB Time due to the row source for the
   SQL waiting on the event.
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
									   % Row
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
Event			       % Event Top Row Source			  Source
------------------------------ ------- --------------------------------- -------
	  bhdvtsvjhgvrh 	  1497866750		     2298	   56.24
			v_sharing_schema := TRUE ;
db file sequential read 	 28.56 TABLE ACCESS - BY INDEX ROWID BAT   25.92
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


		ELSE
db file parallel read		 16.08 TABLE ACCESS - BY INDEX ROWID BAT   16.08


gc cr multi block request	  5.56 TABLE ACCESS - BY INDEX ROWID BAT    5.56

	  35dumc2tpr9dv 	   203653710		     1405	   35.05
db file sequential read 	 25.99 UPDATE				   25.38
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


			IF ( v_sharing_schema = TRUE ) THEN
gc current grant busy		  3.13 UPDATE				    3.13


gc current block lost		  2.45 UPDATE				    2.45

			  ------------------------------------------------------

Top SQL with Top Row Sources		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Top SQL statements by DB Time along with the top row sources by DB Time
   for those SQLs.
				EXECUTE IMMEDIATE v_home_schema_str;
-> % Activity is the percentage of DB Time due to the SQL.
-> % Row Source is the percentage of DB Time spent on the row source by
   that SQL.
-> % Event is the percentage of DB Time spent on the event by the
				v_sharing_schema := FALSE;
   SQL executing the row source.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
					   % Row
Row Source				  Source Top Event		 % Event
---------------------------------------- ------- ----------------------- -------
			END IF;
	  bhdvtsvjhgvrh 	  1497866750		     2298	   56.24
TABLE ACCESS - BY INDEX ROWID BATCHED	   53.13 db file sequential read   25.92
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

		END IF;

INDEX - RANGE SCAN			    3.01 db file sequential read    2.64

	  35dumc2tpr9dv 	   203653710		     1405	   35.05
UPDATE					   31.96 db file sequential read   25.38
	END IF;
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


UPDATE STATEMENT			    2.42 enq: HW - contention	    1.03


			  ------------------------------------------------------

Top Sessions				   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> '# Samples Active' shows the number of ASH samples in which the session
	-- Choose the random block. The v_do_hotspot handler that follows can override.
      was found waiting for that particular event. The percentage shown
      in this column is calculated with respect to wall clock time
      and not total database activity.
-> 'XIDs' shows the number of distinct transaction IDs sampled in ASH
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
      when the session was waiting for that particular event

   Sid, Serial# % Activity Event			     % Event
--------------- ---------- ------------------------------ ----------

User		     Program			      # Samples Active	   XIDs
-------------------- ------------------------------ ------------------ --------
	8,26103       1.42 db file sequential read		0.76
USER68		     sqlplus@mcracp...m (TNS V1-V3)	  31/62 [ 50%]	     15

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
	9,17312       1.42 db file sequential read		0.93
USER96		     sqlplus@mcracp...m (TNS V1-V3)	  38/62 [ 61%]	     17

       40, 4018       1.42 db file sequential read		0.86
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
USER64		     sqlplus@mcracp...m (TNS V1-V3)	  35/62 [ 56%]	     13

       41,59651       1.42 db file sequential read		0.76
USER100 	     sqlplus@mcracp...m (TNS V1-V3)	  31/62 [ 50%]	     12

		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
       68,60774       1.42 db file sequential read		0.86
USER101 	     sqlplus@mcracp...m (TNS V1-V3)	  35/62 [ 56%]	     17

			  ------------------------------------------------------

Top Blocking Sessions			   DB/Inst: P80DB/p80db1  Snaps: 55-56
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );

		  No data exists for this section of the report.
			  ------------------------------------------------------
	END IF;

Top PL/SQL Procedures			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> 'PL/SQL entry subprogram' represents the application's top-level
      entry-point (procedure, function, trigger, package initialization

      or RPC call) into PL/SQL.
-> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed
      at the point of sampling . If the value is 'SQL', it represents
      the percentage of time spent executing SQL for the particular
      PL/SQL entry subprogram
----------------------------------------------------------------------------------------------------------------------

PL/SQL Entry Subprogram 					  % Activity
----------------------------------------------------------------- ----------
PL/SQL Current Subprogram					   % Current
----------------------------------------------------------------- ----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
USER1.SLOBUPDATE						       35.95
   SQL								       35.95
			  ------------------------------------------------------

Top Events				   DB/Inst: P80DB/p80db1  Snaps: 55-56
----------------------------------------------------------------------------------------------------------------------
-> Top Events by DB Time
-> % Activity is the percentage of DB Time due to the event

Event				    Event Class     Session Type
----------------------------------- --------------- ---------------

	   Avg Active
% Activity   Sessions
---------- ----------
db file sequential read 	    User I/O	    FOREGROUND
     54.55	35.95
	IF  ( v_select_only_workload = TRUE ) THEN
db file parallel read		    User I/O	    FOREGROUND
     16.08	10.60
gc cr multi block request	    Cluster	    FOREGROUND
      5.56	 3.66
CPU + Wait for CPU		    CPU 	    BACKGROUND
		-- handle case where user specified zero pct updates (a SELECT-only workload)
      3.74	 2.47
gc current grant busy		    Cluster	    FOREGROUND
      3.13	 2.06
			  ------------------------------------------------------

		v_do_update := FALSE;
Top Event P1/P2/P3 Values		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Top Events by DB Time and the top P1/P2/P3 values for those events.
-> % Event is the percentage of DB Time due to the event
-> % Activity is the percentage of DB Time due to the event with the given
		v_update_quota := TRUE ;
   P1,P2,P3 Values.

Event			       % Event		   P1, P2, P3 Values % Activity
------------------------------ ------- ----------------------------- ----------
Parameter 1		   Parameter 2		      Parameter 3
	ELSE
-------------------------- -------------------------- --------------------------
db file sequential read 	 54.58		     "8","32774","1"	   0.02
file#			   block#		      blocks

db file parallel read		 16.08			 "1","9","9"	  15.93
		IF ( v_update_only_workload = TRUE ) THEN
files			   blocks		      requests

gc cr multi block request	  5.58		     "1","20846","1"	   0.02
file#			   block#		      class#

			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
log file parallel write 	  1.98			"1","19","2"	   0.10
				v_do_scan_query := TRUE;
files			   blocks		      requests

KJC: Wait for msg sends to com	  1.49 "2954409984","131074","65521"	   0.02
				v_scan_query_quota := FALSE;
msg			   dest|rcvr		      mtype

			  ------------------------------------------------------

			ELSE
Top DB Objects				   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Top DB Objects by DB Time with respect to Application, Cluster,
   User I/O,  buffer busy waits and In-Memory DB events only.
				IF ( v_scan_query_quota = FALSE ) THEN
-> Tablespace name is not available for reports generated from the root PDB
   of a consolidated database.
-> When ** MISSING ** occurs, some of the object attributes may not be available
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT

      Object ID % Activity Event			     % Event
--------------- ---------- ------------------------------ ----------
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
Object Name (Type)				      Tablespace
----------------------------------------------------- --------------------------
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
	  73283       1.42 db file sequential read		0.64
USER13.CF1 (TABLE)				      IOPS
	  73668       1.42 db file sequential read		0.88
						v_do_scan_query := TRUE;
USER91.CF1 (TABLE)				      IOPS
	  73368       1.40 db file sequential read		0.78
USER30.CF1 (TABLE)				      IOPS
	  73430       1.40 db file sequential read		0.93
					ELSE
USER42.CF1 (TABLE)				      IOPS
	  73612       1.40 db file sequential read		0.86
USER79.CF1 (TABLE)				      IOPS
						v_do_scan_query := FALSE;
			  ------------------------------------------------------

Activity Over Time			   DB/Inst: P80DB/p80db1  Snaps: 55-56
					END IF;
-> Analysis period is divided into smaller time slots as indicated
   in the 'Slot Time (Duration)'.
-> Top 3 events are reported in each of those slots
				ELSE
-> 'Slot Count' shows the number of ASH samples in that slot
-> 'Event Count' shows the number of ASH samples waiting for
   that event in that slot
-> '% Event' is 'Event Count' over all ASH samples in the analysis period
					-- Scan quota has been filled,	force drain some random access SELECTS

			 Slot					Event
Slot Time (Duration)	Count Event				Count % Event
					v_do_scan_query := FALSE;
-------------------- -------- ------------------------------ -------- -------
09:07:41   (2.3 min)	1,069 db file sequential read		  590	14.44
			      db file parallel read		  178	 4.36
				END IF;
			      gc cr multi block request 	   67	 1.64
09:10:00   (5.0 min)	2,092 db file sequential read		1,123	27.48
			      db file parallel read		  317	 7.76
			END IF;
			      gc cr multi block request 	  143	 3.50
09:15:00   (3.0 min)	  925 db file sequential read		  517	12.65
			      db file parallel read		  162	 3.96
		END IF;
			      CPU + Wait for CPU		   42	 1.03
			  ------------------------------------------------------




	  ADDM Report for Task 'ADDM:2732778098_1_56'
	  -------------------------------------------


Analysis Period
---------------
AWR snapshot range from 55 to 56.
		IF ( v_do_scan_query != TRUE ) THEN
Time period starts at 12-FEB-20 09.07.41 AM
Time period ends at 12-FEB-20 09.18.02 AM

Analysis Target
			SELECT COUNT(c2) INTO v_rowcnt
---------------
Database 'P80DB' with DB ID 2732778098.
Database version 19.0.0.0.0.
			FROM cf1
ADDM performed an analysis of instance p80db1, numbered 1 and hosted at
mcracpoc1.example.com.

Activity During the Analysis Period
-----------------------------------
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
Total database time was 37002 seconds.
The average number of active sessions was 59.58.

Summary of Findings

-------------------
   Description		      Active Sessions	   Recommendations
			      Percent of Activity
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
   -------------------------  -------------------  ---------------
1  Top SQL Statements	      58.95 | 98.94	   2
2  Interconnect Latency       49.95 | 83.83	   1
		ELSE
3  "User I/O" wait Class      43.19 | 72.49	   0
4  Global Cache Messaging     12.91 | 21.67	   1
5  Buffer Busy - Hot Objects  4.48 | 7.51	   2
6  Global Cache Lost Blocks   3.28 | 5.5	   1
7  Undersized SGA	      1.38 | 2.32	   1

			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



	  Findings and Recommendations
	  ----------------------------

Finding 1: Top SQL Statements
Impact is 59.05 active sessions, 98.94% of total activity.
----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

   Recommendation 1: SQL Tuning
   Estimated benefit is 36.33 active sessions, 60.97% of total activity.
   ---------------------------------------------------------------------
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      "bhdvtsvjhgvrh".
      Related Object

	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND
	 (CUSTID < :B1 )
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
   Rationale
      The SQL spent 100% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
				v_scan_query_quota := TRUE;
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
			END IF;
   Rationale
      SQL statement with SQL_ID "bhdvtsvjhgvrh" was executed 672439 times and
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
      had an average elapsed time of 0.034 seconds.

   Recommendation 2: SQL Tuning
	ELSE
   Estimated benefit is 21.06 active sessions, 35.35% of total activity.
   ---------------------------------------------------------------------
   Action
		--
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      "35dumc2tpr9dv".
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
		-- Do an UPDATE statement
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 ))
	 AND (CUSTID < :B1 )
   Rationale
		--
      The SQL spent 93% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale

      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
		v_my_serial := v_my_serial + v_loop_cnt ;
   Rationale
      SQL statement with SQL_ID "35dumc2tpr9dv" was executed 118760 times and
      had an average elapsed time of 0.1 seconds.



Finding 2: Interconnect Latency
Impact is 50.03 active sessions, 83.83% of total activity.
----------------------------------------------------------
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
Higher than expected latency of the cluster interconnect was responsible for
significant database time on this instance.
The instance was consuming 47092 kilo bits per second of interconnect
		--
bandwidth.
5% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 93% for database lock management.
		-- Increment count of UPDATES and set UPDATE quota flag if needed
The average latency for 8K interconnect messages was 1319 microseconds.
The instance is using the private interconnect device "fg-priv:1" with IP
address 169.254.22.248 and source "?B?".

		--
   Recommendation 1: Host Configuration
   Estimated benefit is 49.95 active sessions, 83.83% of total activity.
   ---------------------------------------------------------------------
		v_updates_cnt := v_updates_cnt + 1;
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle's recommended solution is to use a high speed

      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS's socket
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter "db_file_multiblock_read_count" may be decreased as a
      workaround.
			v_update_quota := TRUE;

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
		END IF;
      instance.
      Impact is 12.91 active sessions, 21.67% of total activity.
	 Wait class "Cluster" was consuming significant database time.
	END IF ;
	 Impact is 12.98 active sessions, 21.79% of total activity.


Finding 3: "User I/O" wait Class
----------------------------------------------------------------------------------------------------------------------
Impact is 43.26 active sessions, 72.49% of total activity.
----------------------------------------------------------
Wait class "User I/O" was consuming significant database time.
Waits for I/O to temporary tablespaces were not consuming significant database
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
time.
The throughput of the I/O subsystem was not significantly lower than expected.

   No recommendations are available.
----------------------------------------------------------------------------------------------------------------------


Finding 4: Global Cache Messaging
Impact is 12.93 active sessions, 21.67% of total activity.

----------------------------------------------------------
Inter-instance messaging was consuming significant database time on this
instance.
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN

   Recommendation 1: Application Analysis
   Estimated benefit is 12.91 active sessions, 21.67% of total activity.
		--
   ---------------------------------------------------------------------
   Action
      Look at the "Top SQL Statements" finding for SQL statements consuming
      significant time on Cluster waits. For example, the SELECT statement
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
      with SQL_ID "bhdvtsvjhgvrh" is responsible for 52% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
		-- so reset flags and counters before continuing
   ---------------------------------
      Wait class "Cluster" was consuming significant database time.
      Impact is 12.98 active sessions, 21.79% of total activity.
		--


Finding 5: Buffer Busy - Hot Objects
Impact is 4.48 active sessions, 7.51% of total activity.
		v_update_quota := FALSE;
--------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

		v_updates_cnt := 0;
   Recommendation 1: Schema Changes
   Estimated benefit is .16 active sessions, .26% of total activity.
   -----------------------------------------------------------------
   Action
		v_selects_cnt := 0;
      Consider rebuilding the TABLE "USER82.CF1" with object ID 73630 using a
      higher value for PCTFREE.
      Related Object
	END IF;
	 Database object with ID 73630.

   Recommendation 2: Schema Changes
   Estimated benefit is .16 active sessions, .26% of total activity.

   -----------------------------------------------------------------
   Action
      Consider partitioning the TABLE "USER82.CF1" with object ID 73630 in a
      manner that will evenly distribute concurrent DML across multiple
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
      partitions.
      Related Object
	 Database object with ID 73630.

		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
		-- so reset flags and counters
      Impact is 4.48 active sessions, 7.51% of total activity.
	 Inter-instance messaging was consuming significant database time on
	 this instance.
		v_scan_query_quota := FALSE;
	 Impact is 12.91 active sessions, 21.67% of total activity.
	    Wait class "Cluster" was consuming significant database time.
	    Impact is 12.98 active sessions, 21.79% of total activity.


Finding 6: Global Cache Lost Blocks
Impact is 3.28 active sessions, 5.5% of total activity.
-------------------------------------------------------
Cluster communications that were retried due to lost blocks consumed
significant database time.
The instance was consuming 47092 kilo bits per second of interconnect
bandwidth.
5% of this interconnect bandwidth was used for global cache messaging, 0% for
		v_scan_queries_cnt := 0;
parallel query messaging and 93% for database lock management.
The average latency for 8K interconnect messages was 1319 microseconds.
The instance is using the private interconnect device "fg-priv:1" with IP
		v_random_access_queries_cnt := 0;
address 169.254.22.248 and source "?B?".

   Recommendation 1: Host Configuration
   Estimated benefit is 3.28 active sessions, 5.5% of total activity.
	END IF;
   ------------------------------------------------------------------
   Action
      Check the configuration of the cluster interconnect. Check OS setup like

      adapter setting, firmware and driver release. Check that the OS's socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter "db_file_multiblock_read_count" may be decreased as a
      workaround.
	v_loop_cnt := v_loop_cnt + 1 ;

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
	v_now := DBMS_UTILITY.GET_TIME();
      instance.
      Impact is 12.91 active sessions, 21.67% of total activity.
	 Wait class "Cluster" was consuming significant database time.

	 Impact is 12.98 active sessions, 21.79% of total activity.


Finding 7: Undersized SGA
Impact is 1.38 active sessions, 2.32% of total activity.
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
--------------------------------------------------------
The SGA was inadequately sized, causing additional I/O or hard parses.
The value of parameter "sga_target" was "9664 M" during the analysis period.
		-- If this is a fixed-iteration count test cycle and we've hit the number of

   Recommendation 1: Database Configuration
   Estimated benefit is .31 active sessions, .53% of total activity.
   -----------------------------------------------------------------
		-- iterations then set exit flag
   Action
      Increase the size of the SGA by setting the parameter "sga_target" to
      10872 M.

		v_stop_immediate := TRUE ;
   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "User I/O" was consuming significant database time.
      Impact is 43.19 active sessions, 72.49% of total activity.
	END IF;



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
END LOOP;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------


Miscellaneous Information
-------------------------
Wait class "Application" was not consuming significant database time.
v_end_time := v_now ;
Wait class "Commit" was not consuming significant database time.
Wait class "Concurrency" was not consuming significant database time.
Wait class "Configuration" was not consuming significant database time.
v_now := DBMS_UTILITY.GET_TIME();
CPU was not a bottleneck for the instance.
Wait class "Network" was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
Hard parsing of SQL statements was not consuming significant database time.

RAC Statistics  DB/Inst: P80DB/p80db1	Snaps: 55-56


				Begin	End
				----- -----
	   Number of Instances:     2	  2
	       Number of LMS's:     3	  3
v_total_time := v_end_time - v_begin_time ;
      Number of realtime LMS's:     3	  3  (0 priority changes)


Global Cache Load Profile
~~~~~~~~~~~~~~~~~~~~~~~~~		   Per Second	    Per Transaction
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
				      ---------------	    ---------------
  Global Cache blocks received: 		 9.56		       0.05
    Global Cache blocks served: 		45.56		       0.24
     GCS/GES messages received: 	    17,766.10		      91.89
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
	 GCS/GES messages sent: 	    19,664.25		     101.71
	    DBWR Fusion writes: 		 0.52		       0.00
 Estd Interconnect traffic (KB) 	     7,751.59


v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
Global Cache Efficiency Percentages (Target local+remote 100%)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Buffer access -  local cache %:   24.22

Buffer access - remote cache %:    0.05
Buffer access - 	disk %:   75.73
Global Cache Locality	     %:   53.41


END;</pre_sqltext></td></tr>
Global Cache and Enqueue Services - Workload Characteristics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	  Avg global cache cr block receive time (us):		3,297.0
     Avg global cache current block receive time (us):		1,631.2
<tr><td scope="row" class='awrc'><a class="awr" name="drkwgbbjkvcaj"></a>drkwgbbjkvcaj</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '78';
v_update_pct PLS_INTEGER := '15';
			       Avg LMS process busy %:		   32.5

	    Avg global cache cr block build time (us):		   98.0
v_max_loop_iterations PLS_INTEGER := '0';
      Global cache log flushes for cr blocks served %:		    0.4
	    Avg global cache cr block flush time (us):		6,923.1

	 Avg global cache current block pin time (us):
v_seconds_to_run PLS_INTEGER := '600';
 Global cache log flushes for current blocks served %:		    0.1
       Avg global cache current block flush time (us):		6,666.7

		     Avg global enqueue get time (us):		1,656.2
v_scale PLS_INTEGER := '1048576';

Global Cache and Enqueue Services - Messaging Statistics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		     Avg message sent queue time (us):		  214.7
v_work_unit PLS_INTEGER := '12' ;
	     Avg message sent queue time on ksxp (us):		2,221.1
	  Avg message received kernel queue time (us):		  195.9
		 Avg message received queue time (us):		   55.0
v_redo_stress  VARCHAR2(12) := 'LITE';
		    Avg GCS message process time (us):		   29.2
		    Avg GES message process time (us):		   25.2

			    % of direct sent messages:		  21.03
v_hot_schema_modulus PLS_INTEGER := '0';
			  % of indirect sent messages:		  78.59
			% of flow controlled messages:		   0.38
	  -------------------------------------------------------------

v_do_hotspot   VARCHAR(7) := 'FALSE';
Cluster Interconnect
-> if Public/Source at End snap is different a '*' is displayed
~~~~~~~~~~~~~~~~~~~~
				    Begin			    End
v_hotspot_mb  NUMBER := '8';
	     --------------------------------------------------   -------
Interface    IP Address      Pub Source 			  Pub Src
----------   --------------- --- ------------------------------   --- ---
fg-priv:1    169.254.22.248  N
v_hotspot_offset_mb NUMBER := '16';

Global Messaging Statistics		   DB/Inst: P80DB/p80db1  Snaps: 55-56

Statistic				     Total   per Second    per Trans
v_hotspot_modulus  PLS_INTEGER := '3';
--------------------------------- ---------------- ------------ ------------
Cluster reconfiguration count			 0	    0.0 	 0.0
Domain reconfiguration count			 0	    0.0 	 0.0

Global Enqueue S-optim Broadcasts		98	    0.2 	 0.0
Global Enqueue S-optim S-lock get	    93,023	  149.9 	 0.8
Global Enqueue S-optim anti-locks		47	    0.1 	 0.0
KA local message waits				 0	    0.0 	 0.0
v_sleep_modulus PLS_INTEGER := '0';
KA local messages received			 0	    0.0 	 0.0
KA messages received actual			 0	    0.0 	 0.0
KA messages received logical			 0	    0.0 	 0.0
KA requests failed				 0	    0.0 	 0.0
v_sleep_min NUMBER := '.1';
KA requests succeeded				 0	    0.0 	 0.0
Pseudo reconfiguration count			 0	    0.0 	 0.0
Pseudo rm reconfig count			 0	    0.0 	 0.0
acks for commit broadcast(actual)	    13,929	   22.4 	 0.1
v_sleep_max NUMBER := '.5';
acks for commit broadcast(logical	    57,862	   93.2 	 0.5
broadcast msgs on commit(actual)	    38,683	   62.3 	 0.3
broadcast msgs on commit(logical)	    73,771	  118.9 	 0.6
broadcast msgs on commit(wasted)	    33,054	   53.3 	 0.3
v_scan_query_pct PLS_INTEGER := '0';
dynamically allocated gcs resourc		 0	    0.0 	 0.0
dynamically allocated gcs shadows		 0	    0.0 	 0.0
flow control messages received			 0	    0.0 	 0.0
flow control messages sent			 0	    0.0 	 0.0
v_obfuscate VARCHAR(5)	:= 'FALSE';
gcs assume cvt					 0	    0.0 	 0.0
gcs assume no cvt			    14,006	   22.6 	 0.1
gcs ast to fg				     8,489	   13.7 	 0.1
gcs ast xid					 3	    0.0 	 0.0

gcs bidless ast to lms				 3	    0.0 	 0.0
gcs blocked converts			    62,737	  101.1 	 0.5
gcs blocked cr converts 		     2,806	    4.5 	 0.0
gcs compatible basts				 3	    0.0 	 0.0

gcs compatible cr basts (global)		17	    0.0 	 0.0
gcs compatible cr basts (local) 	    13,171	   21.2 	 0.1
gcs cr basts to PIs				 0	    0.0 	 0.0
gcs cr requests to slave			 0	    0.0 	 0.0
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
gcs cr serve without current lock		 0	    0.0 	 0.0
gcs dbwr flush pi msgs			   625,335	1,007.7 	 5.2
gcs dbwr write request msgs		       322	    0.5 	 0.0
gcs error msgs					 0	    0.0 	 0.0
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
gcs flash read serve requests to		 0	    0.0 	 0.0
gcs force cr block only 			 0	    0.0 	 0.0
gcs force cr grant				 0	    0.0 	 0.0
gcs force cr no current 			 0	    0.0 	 0.0

gcs forward cr to pinged instance		 0	    0.0 	 0.0
gcs grant ast				     8,492	   13.7 	 0.1
gcs grant request in partial open		 0	    0.0 	 0.0
v_num_tmp NUMBER := 0;
gcs immediate (compatible) conver	     7,185	   11.6 	 0.1
gcs immediate (null) converts		 1,019,471	1,642.8 	 8.5
gcs immediate cr (compatible) con	    85,749	  138.2 	 0.7
gcs immediate cr (null) converts	 5,805,729	9,355.3 	48.4

gcs lms flush pi msgs				 0	    0.0 	 0.0
gcs lms write request msgs			33	    0.1 	 0.0
gcs msgs process time(ms)		   308,481	  497.1 	 2.6
gcs msgs received			10,575,011     17,040.4 	88.1
v_loop_cnt PLS_INTEGER := 0;
gcs new served by master		       365	    0.6 	 0.0
gcs out-of-order msgs				 5	    0.0 	 0.0
gcs pings refused			     1,029	    1.7 	 0.0
gcs pkey conflicts retry			 0	    0.0 	 0.0
v_rowcnt PLS_INTEGER := 0;
gcs queued converts				 0	    0.0 	 0.0
gcs read-mostly failure unmount d		 0	    0.0 	 0.0
gcs reader bypass N->Xw ping loca		 0	    0.0 	 0.0

v_updates_cnt PLS_INTEGER := 0;
Global Messaging Statistics		   DB/Inst: P80DB/p80db1  Snaps: 55-56

Statistic				     Total   per Second    per Trans
--------------------------------- ---------------- ------------ ------------
v_selects_cnt PLS_INTEGER := 0;
gcs reader bypass N->Xw ping remo		 0	    0.0 	 0.0
gcs reader bypass grant X on assu		 0	    0.0 	 0.0
gcs reader bypass grant ast			 0	    0.0 	 0.0
gcs reader bypass grant fg ast			 0	    0.0 	 0.0

gcs reader bypass grant immediate		38	    0.1 	 0.0
gcs recovery claim msgs 			 0	    0.0 	 0.0
gcs refuse xid					 0	    0.0 	 0.0
gcs refuse xid to fg				 0	    0.0 	 0.0
v_random_access_queries_cnt PLS_INTEGER := 0;
gcs refuse xid to lms				 0	    0.0 	 0.0
gcs refuse xid to master			 0	    0.0 	 0.0
gcs regular cr					 0	    0.0 	 0.0
gcs resources for dynamic sga			 0	    0.0 	 0.0
v_scan_queries_cnt PLS_INTEGER := 0;
gcs retry convert request			 0	    0.0 	 0.0
gcs shadows for dynamic sga			 0	    0.0 	 0.0
gcs share recovery bast 			 0	    0.0 	 0.0
gcs side channel msgs actual		     3,397	    5.5 	 0.0

gcs side channel msgs logical		   449,857	  724.9 	 3.7
gcs stale cr					 2	    0.0 	 0.0
gcs undo cr					 0	    0.0 	 0.0
gcs write notification msgs			 0	    0.0 	 0.0
v_do_scan_query BOOLEAN :=FALSE;
gcs writes refused				 2	    0.0 	 0.0
ges msgs process time(ms)		       259	    0.4 	 0.0
ges msgs received			    10,258	   16.5 	 0.1
ges remote lock allocation		      -131	   -0.2 	 0.0
global posts dropped				 0	    0.0 	 0.0
global posts queue time 			 0	    0.0 	 0.0
global posts queued				 0	    0.0 	 0.0
global posts requested				 0	    0.0 	 0.0
global posts sent				 0	    0.0 	 0.0
implicit batch messages received	   166,961	  269.0 	 1.4
implicit batch messages sent		   199,440	  321.4 	 1.7
lmd msg send time(ms)				 0	    0.0 	 0.0
lms(s) msg send time(ms)			 0	    0.0 	 0.0
v_scan_query_quota  BOOLEAN := FALSE;
messages flow controlled		    23,914	   38.5 	 0.2
messages queue sent actual		 1,806,768	2,911.4 	15.1
messages queue sent logical		 1,257,483	2,026.3 	10.5
v_scan_workload_only BOOLEAN := FALSE;
messages received actual		 4,183,794	6,741.7 	34.9
messages received logical		10,585,269     17,056.9 	88.2
messages sent directly			 1,338,418	2,156.7 	11.2
messages sent indirectly		 5,001,442	8,059.3 	41.7
v_random_workload_only BOOLEAN := FALSE;
messages sent not implicit batche	    80,645	  130.0 	 0.7
messages sent pbatched			10,053,258     16,199.7 	83.8
msgs causing lmd to send msgs			 0	    0.0 	 0.0
msgs causing lms(s) to send msgs		 0	    0.0 	 0.0

msgs received kernel queue time ( 2.0733150706E+12 3.340910E+09 1.727993E+07
msgs received queue time (ms)		   582,653	  938.9 	 4.9
msgs received queued			10,585,269     17,056.9 	88.2
msgs sent queue time (ms)		   512,639	  826.1 	 4.3

msgs sent queue time on ksxp (ms)	10,286,328     16,575.2 	85.7
msgs sent queued			 2,387,384	3,847.0 	19.9
msgs sent queued on ksxp		 4,631,282	7,462.8 	38.6
number of broadcasted resources 		 0	    0.0 	 0.0
v_random_block PLS_INTEGER := 1;
number of directly freed master r		 0	    0.0 	 0.0
number of ges deadlock detected 		 0	    0.0 	 0.0
number of lock borrowed by LMD			 0	    0.0 	 0.0
number of received ODPS messages		 0	    0.0 	 0.0
v_tmp PLS_INTEGER;
number of received RBA messages 		 0	    0.0 	 0.0
number of resource borrowed by LM		 0	    0.0 	 0.0
number of sent ODPS messages			 0	    0.0 	 0.0
number of sent RBA messages			 0	    0.0 	 0.0

v_now PLS_INTEGER;
Global Messaging Statistics		   DB/Inst: P80DB/p80db1  Snaps: 55-56

Statistic				     Total   per Second    per Trans
--------------------------------- ---------------- ------------ ------------
v_brick_wall PLS_INTEGER;
process batch messages received 	 2,798,398	4,509.3 	23.3
process batch messages sent		 3,082,130	4,966.5 	25.7
receiver cycle time			   915,957	1,476.0 	 7.6

receiver loop count			 3,173,064	5,113.0 	26.4
			  ------------------------------------------------------


Global CR Server Statistics		   DB/Inst: P80DB/p80db1  Snaps: 55-56
v_begin_time PLS_INTEGER;

Statistic				    Total
------------------------------ ------------------
CR Block Requests			    3,159
CURRENT Block Requests			       69
v_end_time PLS_INTEGER;
Data Block Requests			    3,159
Undo Block Requests				0
TX Block Requests			       24
Current Results 			    3,228
Private results 				0
v_total_time PLS_INTEGER;
Zero Results					0
Disk Read Results				1
Fail Results					0
Fairness Down Converts			    3,103
Light Works				    2,225
v_begin_cpu_tm PLS_INTEGER;
Flushes 				       13
Builds					    3,160
Errors						0
			  ------------------------------------------------------

v_end_cpu_tm PLS_INTEGER;
Global Current Server Statistics	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Pins    = CURRENT Block Pin Operations
-> Flushes = Redo Flush before CURRENT Block Served Operations

v_total_cpu_tm PLS_INTEGER;
Statistic	  Total % <100us   % <1ms  % <10ms % <100ms    % <1s   % <10s
---------- ------------ -------- -------- -------- -------- -------- --------
Pins		      1 		    100.00

Flushes 	     33 		     69.70    30.30
			  ------------------------------------------------------

Global Cache Transfer Statistics	   DB/Inst: P80DB/p80db1  Snaps: 55-56
v_do_sleeps BOOLEAN := FALSE;
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
-> Busy        (Busy) - Block Transfer impacted by Remote Contention
-> Congested (Congst) - Block Transfer impacted by Remote System Load
-> ordered by CR + Current Blocks Received desc

v_loop_control BOOLEAN := FALSE;
			       CR			  Current
		 ----------------------------- -----------------------------
Inst Block	   Blocks      %      %      %	 Blocks      %	    %	   %
  No Class	 Received  Immed   Busy Congst Received  Immed	 Busy Congst
v_update_quota BOOLEAN := FALSE;
---- ----------- -------- ------ ------ ------ -------- ------ ------ ------
   2 data block     2,588   98.5     .7     .8	  2,485   25.2	 74.4	  .4
   2 undo header      720   94.2    5.7     .1	     17     .0	100.0	  .0
v_select_only_workload BOOLEAN := FALSE;
   2 Others	       12  100.0     .0     .0	     60   18.3	 81.7	  .0
			  ------------------------------------------------------

Global Cache Transfer Times (us)	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Avg Time - average time of all blocks (Immed,Busy,Congst) in us
-> Immed, Busy, Congst -  Average times in us
v_update_only_workload BOOLEAN := FALSE;
-> ordered by CR + Current Blocks Received desc

		    CR Avg Time (us)	     Current Avg Time (us)
	      --------------------------- ---------------------------
Inst Block
v_do_update BOOLEAN := FALSE;
  No Class	 All  Immed   Busy Congst    All  Immed   Busy Congst
---- -------- ------ ------ ------ ------ ------ ------ ------ ------
   2 data blo	4009   3956  10827   4338   1702   2962   1264	 3792
   2 undo hea	1126	814   6227   3320   1427    N/A   1427	  N/A
v_do_hot_schema BOOLEAN := FALSE;
   2 others	 960	960    N/A    N/A    989    656   1064	  N/A
   2 undo blo	 N/A	N/A    N/A    N/A    N/A    N/A    N/A	  N/A
			  ------------------------------------------------------

v_stop_immediate BOOLEAN := FALSE;
Global Cache Transfer (Immediate)	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
-> % of Blocks Received requiring 2 or 3 hops
-> ordered by CR + Current Blocks Received desc

v_sharing_schema BOOLEAN := FALSE;
				   CR			    Current
		      --------------------------- ---------------------------
 Src Block     Blocks  Immed Blks	%	%  Immed Blks	    %	    %
Inst Class	 Lost	 Received    2hop    3hop    Received	 2hop	 3hop
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
---- -------- ------- ----------- ------- ------- ----------- ------- -------
	v_loop_control := TRUE ;
   2 data blo		    2,549   100.0     0.0	  626	100.0	  0.0
   2 undo hea		      678   100.0     0.0	  N/A	  N/A	  N/A
END IF;
   2 others		       12   100.0     0.0	   11	100.0	  0.0
   2 undo blo		      N/A     N/A     N/A	  N/A	  N/A	  N/A
			  ------------------------------------------------------


Global Cache Times (Immediate)		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Blocks Lost, 2-hop and 3-hop Average times in (us)
-> ordered by CR + Current Blocks Received desc
IF ( v_update_pct = 0 ) 	  THEN

		       CR Avg Time (us)   Current Avg Time (us)
		     -------------------- --------------------
	v_select_only_workload := TRUE;
 Src Block	Lost
Inst Class	Time  Immed   2hop   3hop  Immed   2hop   3hop
---- -------- ------ ------ ------ ------ ------ ------ ------
END IF;
   2 data blo	       3956   3956    N/A   2962   2962    N/A
   2 undo hea		814    814    N/A    N/A    N/A    N/A
   2 others		960    960    N/A    656    656    N/A

   2 undo blo		N/A    N/A    N/A    N/A    N/A    N/A
			  ------------------------------------------------------

IF ( v_update_pct = 100 )	  THEN
Interconnect Ping Latency Statistics	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Ping latency of the roundtrip of a message from this instance to -> target in
	v_update_only_workload := TRUE;
-> The target instance is identified by an instance number.
-> Average and standard deviation of ping latency is given in microseconds
-> for message sizes of 500 bytes and 8K.
END IF;
-> Note that latency of a message from the instance to itself is used as
-> control, since message latency can include wait for CPU

   Target 500B Pin Avg La      Stddev  8K Ping Avg La	   Stddev
 Instance    Count 500B m    500B msg	 Count 8K msg	   8K msg
--------- -------- ------ ----------- -------- ------ -----------

	1	57    727	  .65	    62	  720	      .64
	2	57   1232	  .75	    62	 1319	      .68
			  ------------------------------------------------------

IF ( v_scan_query_pct = 0 ) 	THEN
Interconnect Throughput by Client	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Throughput of interconnect usage by major consumers
-> All throughput numbers are megabytes per second
	v_random_workload_only := TRUE;

			Send	 Receive
Used By 	  Mbytes/sec  Mbytes/sec
---------------- ----------- -----------
END IF;
Global Cache		 .31	     .12
Parallel Query		 .01	     .01
DB Locks		5.38	    4.50

DB Streams		 N/A	     N/A
Other			 .01	     .00
			  ------------------------------------------------------

IF ( v_scan_query_pct = 100 ) 	THEN
Interconnect Device Statistics		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Throughput and errors of interconnect devices (at OS level)
-> All throughput numbers are megabytes per second
	v_scan_workload_only := TRUE;

Device Name	IP Address	 Public Source
--------------- ---------------- ------ -------------------------------
END IF;
				  Send	   Send
       Send	Send	 Send	Buffer	Carrier
 Mbytes/sec   Errors  Dropped  Overrun	   Lost

----------- -------- -------- -------- --------
			       Receive	Receive
    Receive  Receive  Receive	Buffer	  Frame
 Mbytes/sec   Errors  Dropped  Overrun	 Errors
v_seconds_to_run := v_seconds_to_run * 100 ;
----------- -------- -------- -------- --------
fg-priv:1	169.254.22.248	 NO
	.00	   0	    0	     0	      0

	.00	   0	    0	     0	      0
			  ------------------------------------------------------

Dynamic Remastering Statistics		   DB/Inst: P80DB/p80db1  Snaps: 55-56
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
-> Times are in seconds
-> Affinity objects - Affinity objects mastered at the begin/end snapshot
-> Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot


							per    Begin	  End
Name					Total	Remaster Op	Snap	 Snap
-------------------------------- ------------ ------------- -------- --------
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
affinity objects					N/A	   4	    4
read-mostly objects					N/A	   5	    5
affinity objects (other inst)				N/A	  13	   13
-- DBMS_RANDOM.seed (val =&gt; v_seed);
read-mostly objects (persistent)			N/A	   4	    4
			  ------------------------------------------------------

End of Report

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
Report written to awr.txt
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();
SQL> 
SQL> SQL> SQL> 	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
SQL> SQL> SQL> 		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="dsjqgbvpsxkp0"></a>dsjqgbvpsxkp0</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '96';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement

		-- Work out scan or random



		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;

			END IF;
Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
		END IF;
name of the format at the prompt.  Default value is 'html'.

'html'		HTML format (default)

'text'		Text format
'active-html'	Includes Performance Hub active report

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="f5bd91b8pq2rp"></a>f5bd91b8pq2rp</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '87';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


Type Specified:  text


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f7xnvp44nukp7"></a>f7xnvp44nukp7</td><td class='awrnc'><pre_sqltext class="awr">insert into  wrm$_snapshot_details  (snap_id, dbid, instance_number, table_id, begin_time, end_time, step_id)	values (:snap_id, :dbid, :instance_number, :bind1, :bind2, :bind3, :step_id)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="f80h0xb1qvbsk"></a>f80h0xb1qvbsk</td><td class='awrc'><pre_sqltext class="awr">SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fbdrcrjuy8a1m"></a>fbdrcrjuy8a1m</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '95';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="ffv31a3nd2hp7"></a>ffv31a3nd2hp7</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '75';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fg11facbfjwvx"></a>fg11facbfjwvx</td><td class='awrnc'><pre_sqltext class="awr">
	  SELECT  /*+ no_monitor leading(mo_px) use_hash(mo_px) */
	  xmlelement(
	    &quot;sql_monitor_list_report&quot;,
	    xmlattributes(
	      :report_version				  as &quot;version&quot;,
	      :total_count				  as &quot;total_count&quot;,
	      to_char(:new_last_refresh_time,
		      :date_fmt)			  as &quot;sysdate&quot;,
	      :auto_refresh				  as &quot;auto_refresh&quot;,
	      :base_path				  as &quot;base_path&quot;),
	    case
	      when :debug_xml is NULL
	      then NULL
	      else xmltype(:debug_xml)
	    end,
	    xmlagg(
	      case
	       when mo.dbop_name is not NULL
	       then
	       xmlelement(
		 &quot;dbop&quot;,
		  xmlattributes(mo.detail_level 	as &quot;detail&quot;,
				mo.report_ref		as &quot;report_ref&quot;,
				mo.dbop_name		as &quot;dbop_name&quot;,
				to_char(mo.sql_exec_start,
					:date_fmt)	as &quot;dbop_exec_start&quot;,
				mo.dbop_exec_id 	as &quot;dbop_exec_id&quot;),
		 decode(
		   mo.detail_level,
		   'P',
		   xmlforest(
		     mo.status			   as &quot;status&quot;,
		     to_char(mo.last_refresh_time,
			     :date_fmt) 	   as &quot;last_refresh_time&quot;,
		     mo.refresh_count		   as &quot;refresh_count&quot;)),
		 decode(
		   mo.detail_level,
		   'F',
		   xmlforest(
		     mo.status			   as &quot;status&quot;,
		     to_char(mo.first_refresh_time,
			     :date_fmt) 	   as &quot;first_refresh_time&quot;,
		     to_char(mo.last_refresh_time,
			     :date_fmt) 	   as &quot;last_refresh_time&quot;,
		     mo.refresh_count		   as &quot;refresh_count&quot;,
		     mo.inst_id 		   as &quot;inst_id&quot;,
		     mo.sid			   as &quot;session_id&quot;,
		     mo.session_serial# 	   as &quot;session_serial&quot;,
		     mo.user#			   as &quot;user_id&quot;,
		     mo.username		   as &quot;user&quot;,
		     decode(mo.con_id,	0,  NULL,  mo.con_id)
						   as &quot;con_id&quot;,
		     mo.con_name		   as &quot;con_name&quot;,
		     mo.module			   as &quot;module&quot;,
		     mo.action			   as &quot;action&quot;,
		     mo.service_name		   as &quot;service&quot;,
		     mo.client_identifier	   as &quot;client_id&quot;,
		     mo.client_info		   as &quot;client_info&quot;,
		     mo.program 		   as &quot;program&quot;,
		     mo.plsql_entry_object_id	   as &quot;plsql_entry_object_id&quot;,
		     mo.plsql_entry_subprogram_id
						as &quot;plsql_entry_subprogram_id&quot;,
		     mo.plsql_object_id 	as &quot;plsql_object_id&quot;,
		     mo.plsql_subprogram_id	as &quot;plsql_subprogram_id&quot;,
		     mo.rm_consumer_group	as &quot;rm_consumer_group&quot;,
		     mo.px_is_cross_instance	as &quot;is_cross_instance&quot;,
		     mo.px_maxdop		as &quot;dop&quot;,
		     mo.px_maxdop_instances	as &quot;instances&quot;,
		     mo.ecid			as &quot;ecid&quot;)),
		 case
		   when mo.error_number is null or
			mo.detail_level = 'N'
		   then null
		   else
		     xmlelement(&quot;error&quot;,
			      xmlattributes(mo.error_number   as &quot;number&quot;,
					    mo.error_facility as &quot;facility&quot;),
			      mo.error_message)
		 end,
		 case
		   when mo.rm_last_action is not null
		   then
		     xmlelement(&quot;rm_action&quot;,
		       xmlattributes(mo.rm_last_action	 as &quot;name&quot;,
				     mo.rm_last_action_reason as &quot;reason&quot;))
		 end,
		 decode(mo.detail_level,  'N',	null,
		  xmlelement(&quot;stats&quot;,
		   xmlattributes('monitor' as &quot;type&quot;),
		   xmlelement(&quot;stat&quot;,
			      xmlattributes('duration' as &quot;name&quot;),
			      greatest(mo.duration,
				       least(mo.elapsed_time/1000000,  1),
				       ceil(mo.queuing_time/1000000))),
		   decode(mo.elapsed_time,  0,	NULL,
			  xmlelement(&quot;stat&quot;,
				   xmlattributes('elapsed_time' as &quot;name&quot;),
				   mo.elapsed_time)),
		   decode(mo.queuing_time,  0,	NULL,
			  xmlelement(&quot;stat&quot;,
				   xmlattributes('queuing_time' as &quot;name&quot;),
				   mo.queuing_time)),
		   decode(mo.cpu_time,	0,  NULL,
			  xmlelement(&quot;stat&quot;,
				    xmlattributes('cpu_time' as &quot;name&quot;),
				    mo.cpu_time)),
		   decode(mo.user_io_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('user_io_wait_time' as &quot;name&quot;),
				mo.user_io_wait_time)),
		   decode(mo.application_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
			      xmlattributes('application_wait_time' as &quot;name&quot;),
			      mo.application_wait_time)),
		   decode(mo.concurrency_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
			      xmlattributes('concurrency_wait_time' as &quot;name&quot;),
			      mo.concurrency_wait_time)),
		   decode(mo.cluster_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('cluster_wait_time' as &quot;name&quot;),
				mo.cluster_wait_time)),
		   decode(mo.plsql_exec_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('plsql_exec_time' as &quot;name&quot;),
				mo.plsql_exec_time)),
		   decode(mo.java_exec_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('java_exec_time' as &quot;name&quot;),
				mo.java_exec_time)),
		   decode(mo.other_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('other_wait_time' as &quot;name&quot;),
				mo.other_wait_time)),
		   decode(mo.fetches,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('user_fetch_count' as &quot;name&quot;),
				mo.fetches)),
		   decode(mo.buffer_gets,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('buffer_gets' as &quot;name&quot;),
				mo.buffer_gets)),
		   decode(mo.read_reqs,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('read_reqs' as &quot;name&quot;),
				mo.read_reqs)),
		   decode(mo.read_bytes,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('read_bytes' as &quot;name&quot;),
				mo.read_bytes)),
		   decode(mo.write_reqs,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('write_reqs' as &quot;name&quot;),
				mo.write_reqs)),
		   decode(mo.write_bytes,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('write_bytes' as &quot;name&quot;),
				mo.write_bytes)),
		   case
		     when mo.io_inter_bytes is null or
			  mo.io_inter_bytes = mo.io_bytes or
			  mo.io_bytes = 0
		     then null
		     else xmlelement(&quot;stat
&quot;,
				xmlattributes('cell_offload_efficiency' as
					      &quot;name&quot;),
				round(mo.io_bytes /
				      decode(mo.io_inter_bytes,  0,  1,
					     mo.io_inter_bytes),  2))
		   end)))
	       else
	       xmlelement(
		 &quot;sql&quot;,
		 xmlattributes(mo.detail_level	       as &quot;detail&quot;,
			       mo.report_ref	       as &quot;report_ref&quot;,
			       mo.sql_id	       as &quot;sql_id&quot;,
			       to_char(mo.sql_exec_start,
				       :date_fmt)      as &quot;sql_exec_start&quot;,
			       mo.sql_exec_id	       as &quot;sql_exec_id&quot;),
		 decode(
		   mo.detail_level,
		   'P',
		   xmlforest(
		     mo.status			   as &quot;status&quot;,
		     to_char(mo.last_refresh_time,
			     :date_fmt) 	   as &quot;last_refresh_time&quot;,
		     mo.refresh_count		   as &quot;refresh_count&quot;,
		     mo.px_is_cross_instance	   as &quot;is_cross_instance&quot;,
		     mo.px_maxdop		   as &quot;dop&quot;,
		     mo.px_maxdop_instances	   as &quot;instances&quot;,
		     mo.px_servers_requested	   as &quot;px_servers_requested&quot;,
		     mo.px_servers_allocated	   as &quot;px_servers_allocated&quot;)),
		 decode(
		   mo.detail_level,
		   'F',
		   xmlforest(
		     mo.status			   as &quot;status&quot;,
		     to_char(mo.first_refresh_time,
			     :date_fmt) 	   as &quot;first_refresh_time&quot;,
		     to_char(mo.last_refresh_time,
			     :date_fmt) 	   as &quot;last_refresh_time&quot;,
		     mo.refresh_count		   as &quot;refresh_count&quot;,
		     mo.inst_id 		   as &quot;inst_id&quot;,
		     mo.sid			   as &quot;session_id&quot;,
		     mo.session_serial# 	   as &quot;session_serial&quot;,
		     mo.user#			   as &quot;user_id&quot;,
		     mo.username		   as &quot;user&quot;,
		     decode(mo.con_id,	0,  NULL,  mo.con_id)
						   as &quot;con_id&quot;,
		     mo.con_name		   as &quot;con_name&quot;,
		     mo.module			   as &quot;module&quot;,
		     mo.action			   as &quot;action&quot;,
		     mo.service_name		   as &quot;service&quot;,
		     mo.client_identifier	   as &quot;client_id&quot;,
		     mo.client_info		   as &quot;client_info&quot;,
		     mo.program 		   as &quot;program&quot;,
		     mo.sql_plan_hash_value	   as &quot;plan_hash&quot;,
		     mo.plsql_entry_object_id	   as &quot;plsql_entry_object_id&quot;,
		     mo.plsql_entry_subprogram_id
						as &quot;plsql_entry_subprogram_id&quot;,
		     mo.plsql_object_id 	as &quot;plsql_object_id&quot;,
		     mo.plsql_subprogram_id	as &quot;plsql_subprogram_id&quot;,
		     mo.rm_consumer_group	as &quot;rm_consumer_group&quot;,
		     mo.px_is_cross_instance	as &quot;is_cross_instance&quot;,
		     mo.px_maxdop		as &quot;dop&quot;,
		     mo.px_maxdop_instances	as &quot;instances&quot;,
		     mo.px_servers_requested	as &quot;px_servers_requested&quot;,
		     mo.px_servers_allocated	as &quot;px_servers_allocated&quot;,
		     mo.ecid			as &quot;ecid&quot;)),
		 case
		   when mo.error_number is null or
			mo.detail_level = 'N'
		   then null
		   else
		     xmlelement(&quot;error&quot;,
			      xmlattributes(mo.error_number   as &quot;number&quot;,
					    mo.error_facility as &quot;facility&quot;),
			      mo.error_message)
		 end,
		 case
		   when mo.rm_last_action is not null
		   then
		     xmlelement(&quot;rm_action&quot;,
		       xmlattributes(mo.rm_last_action	 as &quot;name&quot;,
				     mo.rm_last_action_reason as &quot;reason&quot;))
		 end,
		 case
		   when :sel_sqltext = 0 or
			mo.detail_level != 'F'
		   then null
		   else
		     xmlelement(
		       &quot;sql_text&quot;,
		       xmlattributes(mo.is_full_sqltext  as &quot;is_full&quot;),
		       to_clob(mo.sql_text))
		 end,
		 decode(mo.detail_level,  'N',	null,
		  xmlelement(&quot;stats&quot;,
		   xmlattributes('monitor' as &quot;type&quot;),
		   xmlelement(&quot;stat&quot;,
			      xmlattributes('duration' as &quot;name&quot;),
			      greatest(mo.duration,
				       least(mo.elapsed_time/1000000,  1),
				       ceil(mo.queuing_time/1000000))),
		   decode(mo.elapsed_time,  0,	NULL,
			  xmlelement(&quot;stat&quot;,
				   xmlattributes('elapsed_time' as &quot;name&quot;),
				   mo.elapsed_time)),
		   decode(mo.queuing_time,  0,	NULL,
			  xmlelement(&quot;stat&quot;,
				   xmlattributes('queuing_time' as &quot;name&quot;),
				   mo.queuing_time)),
		   decode(mo.cpu_time,	0,  NULL,
			  xmlelement(&quot;stat&quot;,
				    xmlattributes('cpu_time' as &quot;name&quot;),
				    mo.cpu_time)),
		   decode(mo.user_io_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('user_io_wait_time' as &quot;name&quot;),
				mo.user_io_wait_time)),
		   decode(mo.application_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
			      xmlattributes('application_wait_time' as &quot;name&quot;),
			      mo.application_wait_time)),
		   decode(mo.concurrency_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
			      xmlattributes('concurrency_wait_time' as &quot;name&quot;),
			      mo.concurrency_wait_time)),
		   decode(mo.cluster_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('cluster_wait_time' as &quot;name&quot;),
				mo.cluster_wait_time)),
		   decode(mo.plsql_exec_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('plsql_exec_time' as &quot;name&quot;),
				mo.plsql_exec_time)),
		   decode(mo.java_exec_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('java_exec_time' as &quot;name&quot;),
				mo.java_exec_time)),
		   decode(mo.other_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('other_wait_time' as &quot;name&quot;),
				mo.other_wait_time)),
		   decode(mo.fetches,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('user_fetch_count' as &quot;name&quot;),
				mo.fetches)),
		   decode(mo.buffer_gets,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('buffer_gets' as &quot;name&quot;),
				mo.buffer_gets)),
		   decode(mo.read_reqs,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('read_reqs' as &quot;name&quot;),
				mo.read_reqs)),
		   decode(mo.read_bytes,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('read_bytes' as &quot;name&quot;),
				mo.read_bytes)),
		   decode(mo.write_reqs,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('write_reqs' as &quot;name&quot;),
				mo.write_reqs)),
		   decode(mo.write_bytes,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('write_bytes' as &quot;name&quot;),
				mo.write_bytes)),
		   decode(:top_n_count,  NULL,	NULL,
			  xmlelement(&quot;stat&quot;,
			      xmlattributes('row_rank' as &quot;name&quot;),
			      mo.row_rank)),
		   case
		     when mo.io_inter_bytes is null or
			  mo.io_inter_bytes = mo.io_bytes or
			  mo.io_bytes = 0
		     then null
		     else xmlelement(&quot;stat&quot;,
				xmlattributes('cell_offload_efficiency' as
					      &quot;name&quot;),
				round(mo.io_bytes /
				      decode(mo.io_inter_bytes,  0,  1,
					     mo.io_inter_bytes),  2))
		   end)))
		end
		order by decode(mo.running,  'Y',  1,  2),
			 decode(mo.running,  'Y',  mo.sql_exec_start,
				mo.last_refresh_time) desc,
			 mo.sql_id,
			 mo.dbop_name,
			 mo.sql_exec_id,
			 mo.dbop_exec_id desc))FROM
	  (SELECT
	    decode(
	      :top_n_count,  null,  0,
	      (rank() over
		(order by
		  decode(
		    lower(nvl(:top_n_rankby,  'last_active_time')),
		    'duration',  mo0.duration,
		    'db_time',	mo0.elapsed_time,
		    'cpu_time',  mo0.cpu_time,
		    'io_requests',  (mo0.read_reqs + mo0.write_reqs),
		    'io_bytes',  mo0.io_bytes,
		    decode(mo0.running,  'Y',  0,
			   (mo0.last_refresh_time - sysdate) *
			    3600 * 24)) desc))) row_rank,
	    mo0.*
	  FROM
	    (SELECT
	       mo_qc.status status,
	       case
		 when mo_qc.status = 'EXECUTING' or mo_qc.status = 'QUEUED'
		 then 'Y'
		 else 'N'
	       end running,
	       case
		 when mo_qc.last_active &lt;
			      :show_detail_after
		 then 'N'
		 when mo_qc.first_refresh_time &lt;
			      :show_detail_after
		 then 'P'
		 else 'F'
	       end detail_level,
	       mo_qc.error_number,
	       mo_qc.error_facility,
	       mo_qc.error_message,
	       mo_qc.rm_last_action,
	       mo_qc.rm_last_action_reason,
	       case
		 when :need_url = 1 and mo_qc.dbop_name is not NULL
		 then
		     'main?report_level=all'||chr(38)||
		     'dbop_name='||mo_qc.dbop_name||chr(38)||
		     'inst_id='||mo_qc.inst_id||chr(38)||
		     'sql_exec_start='||to_char(mo_qc.sql_exec_start,
						:date_fmt_mod)||chr(38)||
		     'dbop_exec_id='||mo_qc.dbop_exec_id
		 when :need_url = 1
		 then
		     'main?report_level=all'||chr(38)||
		     'sql_id='||mo_qc.sql_id||chr(38)||
		     'inst_id='||mo_qc.inst_id||chr(38)||
		     'sql_exec_start='||to_char(mo_qc.sql_exec_start,
						:date_fmt_mod)||chr(38)||
		     'sql_exec_id='||mo_qc.sql_exec_id
		 else
		   null
	       end report_ref,
	       mo_qc.sql_id,
	       mo_qc.dbop_name,
	       mo_qc.sql_exec_start,
	       mo_qc.sql_exec_id,
	       mo_qc.dbop_exec_id,
	       mo_qc.first_refresh_time,
	       case when mo_px.last_refresh_time is null or
			 mo_qc.last_refresh_time &gt; mo_px.last_refresh_time
		    then mo_qc.last_refresh_time
		    else mo_px.last_refresh_time
	       end last_refresh_time,
	       mo_qc.refresh_count + nvl(mo_px.refresh_count,  0) refresh_count,
	       round((mo_qc.last_active - mo_qc.sql_exec_start) *
							24 * 3600) duration,
	       mo_qc.inst_id inst_id,
	       mo_qc.sid sid,
	       mo_qc.session_serial# session_serial#,
	       mo_qc.user# user#,
	       mo_qc.username username,
	       mo_qc.module module,
	       mo_qc.action action,
	       mo_qc.service_name service_name,
	       mo_qc.client_identifier client_identifier,
	       mo_qc.client_info client_info,
	       mo_qc.program program,
	       mo_qc.sql_plan_hash_value sql_plan_hash_value,
	       mo_qc.plsql_entry_object_id plsql_entry_object_id,
	       mo_qc.plsql_entry_subprogram_id plsql_entry_subprogram_id,
	       mo_qc.plsql_object_id plsql_object_id,
	       mo_qc.plsql_subprogram_id plsql_subprogram_id,
	       mo_qc.rm_consumer_group rm_consumer_group,
	       mo_qc.px_is_cross_instance px_is_cross_instance,
	       mo_qc.px_maxdop px_maxdop,
	       decode(mo_qc.px_is_cross_instance,  'Y',
		      mo_qc.px_maxdop_instances,  NULL) px_maxdop_instances,
	       mo_qc.px_servers_requested px_servers_requested,
	       mo_qc.px_servers_allocated px_servers_allocated,
	       decode(:max_sqltext_length,  null,
		      mo_qc.is_full_sqltext,
		      case
			when length(mo_qc.sql_text) &gt;
			     :max_sqltext_length
			then 'N'
			else 'Y'
		      end) is_full_sqltext,
	       decode(:max_sqltext_length,  null,
		      mo_qc.sql_text,
		      substr(mo_qc.sql_text,  1,
			     :max_sqltext_length)) sql_text,
	       nvl(mo_px.sum_elapsed_time,  0) +
		mo_qc.elapsed_time elapsed_time,
	       mo_qc.queuing_time queuing_time,
	       nvl(mo_px.sum_cpu_time,	0) + mo_qc.cpu_time cpu_time,
	       nvl(mo_px.sum_user_io_wait_time,  0) +
		   mo_qc.user_io_wait_time user_io_wait_time,
	       nvl(mo_px.sum_application_wait_time,  0) +
		   mo_qc.application_wait_time application_wait_time,
	       nvl(mo_px.sum_concurrency_wait_time,  0) +
		   mo_qc.concurrency_wait_time concurrency_wait_time,
	       nvl(mo_px.sum_cluster_wait_time,  0) +
		   mo_qc.cluster_wait_time cluster_wait_time,
	       nvl(mo_px.sum_plsql_exec_time,  0) +
		   mo_qc.plsql_exec_time plsql_exec_time,
	       nvl(mo_px.sum_java_exec_time,  0) +
		   mo_qc.java_exec_time java_exec_time,
	       nvl(mo_px.sum_other_wait_time,  0) +
		   mo_qc.other_wait_time other_wait_time,
	       nvl(mo_px.sum_fetches,  0) + mo_qc.fetches fetches,
	       nvl(mo_px.sum_buffer_gets,  0) + mo_qc.buffer_gets buffer_gets,
	       nvl(mo_px.sum_read_reqs,  0) + mo_qc.read_reqs read_reqs,
	       nvl(mo_px.sum_read_bytes,  0) + mo_qc.read_bytes read_bytes,
	       nvl(mo_px.sum_write_reqs,  0) + mo_qc.write_reqs write_reqs,
	       nvl(mo_px.sum_write_bytes,  0) + mo_qc.write_bytes write_bytes,
	       nvl(mo_px.sum_io_inter_bytes,  0) +
		   mo_qc.io_inter_bytes io_inter_bytes,
	       nvl(mo_px.sum_io_bytes,	0) + mo_qc.io_bytes io_bytes,
	       mo_qc.con_id,
	       mo_qc.con_name,
	       mo_qc.ecid
	     FROM
	     (SELECT /*+ no_merge */
		     mo1.inst_id,
		     mo1.sid,
		     mo1.session_serial#,
		     mo1.sql_id,
		     mo1.dbop_name,
		     nvl(mo1.sql_exec_start,
			 mo1.first_refresh_time) sql_exec_start,
		     mo1.sql_exec_id,
		     mo1.dbop_exec_id,
		     mo1.first_refresh_time,
		     mo1.last_refresh_time,
		     mo1.refresh_count,
		     case
		       when mo1.status = 'EXECUTING' or mo1.status = 'QUEUED'
		       then :new_last_refresh_time
		       else mo1.last_refresh_time
		     end last_active,
		     mo1.sql_plan_hash_value,
		     mo1.status,
		     mo1.error_number,
		     mo1.error_facility,
		     mo1.error_message,
		     mo1.rm_last_action,
		     mo1.rm_last_action_reason,
		     mo1.px_is_cross_instance,
		     mo1.px_maxdop,
		     mo1.px_maxdop_instances,
		     mo1.px_servers_requested,
		     mo1.px_servers_allocated,
		     mo1.is_full_sqltext,
		     mo1.sql_text,
		     mo1.user#,
		     mo1.username,
		     mo1.module,
		     mo1.action,
		     mo1.service_name,
		     mo1.client_identifier,
		     mo1.client_info,
		     mo1.program,
		     mo1.plsql_entry_object_id,
		     mo1.plsql_entry_subprogram_id,
		     mo1.plsql_object_id,
		     mo1.plsql_subprogram_id,
		     mo1.rm_consumer_group,
		     case
		     when
		       mo1.elapsed_time &lt; (mo1.cpu_time+
					   mo1.application_wait_time+
					   mo1.concurrency_wait_time+
					   mo1.cluster_wait_time+
					   mo1.user_io_wait_time+
					   mo1.queuing_time)
		     then
		       (mo1.cpu_time+
			mo1.application_wait_time+
			mo1.concurrency_wait_time+
			mo1.cluster_wait_time+
			mo1.user_io_wait_time+
			mo1.queuing_time)
		     else
			mo1.elapsed_time
		     end elapsed_time,
		     mo1.cpu_time cpu_time,
		     mo1.user_io_wait_time user_io_wait_time,
		     mo1.application_wait_time application_wait_time,
		     mo1.concurrency_wait_time concurrency_wait_time,
		     mo1.cluster_wait_time cluster_wait_time,
		     mo1.plsql_exec_time plsql_exec_time,
		     mo1.java_exec_time java_exec_time,
		     mo1.queuing_time queuing_time,
		     case
		     when
		       mo1.elapsed_time &lt; (mo1.cpu_time+
					   mo1.application_wait_time+
					   mo1.concurrency_wait_time+
					   mo1.cluster_wait_time+
					   mo1.user_io_wait_time+
					   mo1.queuing_time)
		     then
		       0
		     else
		       mo1.elapsed_time - (mo1.cpu_time+
					   mo1.application_wait_time+
					   mo1.concurrency_wait_time+
					   mo1.cluster_wait_time+
					   mo1.user_io_wait_time+
					   mo1.queuing_time)
		     end other_wait_time,
		     mo1.fetches,
		     mo1.buffer_gets,
		     mo1.physical_read_requests read_reqs,
		     mo1.physical_read_bytes read_bytes,
		     mo1.physical_write_requests write_reqs,
		     mo1.physical_write_bytes write_bytes,
		     nvl(mo1.physical_read_bytes,  0) +
		       nvl(mo1.physical_write_bytes,  0) io_bytes,
		     mo1.io_interconnect_bytes io_inter_bytes,
		     mo1.con_id,
		     mo1.con_name,
		     mo1.ecid
	     FROM    gv$all_sql_monitor mo1
	     WHERE   mo1.px_qcsid is NULL
	       AND   mo1.inst_id between :target_inst_id_low and
					 :target_inst_id_high
	       AND   mo1.sid =
			 nvl(:target_session_id,
			     mo1.sid)
	       AND   ((:dbop_name is NULL and
		      mo1.sql_id = nvl(:sql_id,
				      mo1.sql_id))
		     OR
		     (:sql_id is NULL and
		      mo1.dbop_name =
			nvl(:dbop_name,
			    mo1.dbop_name))
		     OR
		     (mo1.dbop_name = :dbop_name or
		      mo1.sql_id = :sql_id))
	       AND   mo1.session_serial# =
			 nvl(:target_session_serial,
			       mo1.session_serial#)
	       AND   (mo1.status = 'EXECUTING' or
		      mo1.status = 'QUEUED' or
		      mo1.last_refresh_time &gt;=
			  :active_since_filter)
	       AND (nvl(mo1.sql_exec_start,  mo1.first_refresh_time) between
			:target_first_exec_start and
			:target_last_exec_start)
	       AND   1 = nvl(1,  :dbsearch_value)
	     ) mo_qc,
	    (SELECT /*+ no_merge */
		     mo2.sql_id,
		     mo2.sql_exec_start,
		     mo2.sql_exec_id,
		     max(mo2.last_refresh_time) last_refresh_time,
		     sum(mo2.refresh_count) refresh_count,
		     sum(
		       case
			 when
			   mo2.elapsed_time &lt; (mo2.cpu_time+
					       mo2.application_wait_time+
					       mo2.concurrency_wait_time+
					       mo2.cluster_wait_time+
					       mo2.user_io_wait_time)
			 then
			   (mo2.cpu_time+
			    mo2.application_wait_time+
			    mo2.concurrency_wait_time+
			    mo2.cluster_wait_time+
			    mo2.user_io_wait_time)
			 else
			   mo2.elapsed_time
		       end) sum_elapsed_time,
		     sum(mo2.cpu_time) sum_cpu_time,
		     sum(mo2.user_io_wait_time) sum_user_io_wait_time,
		     sum(mo2.application_wait_time) sum_application_wait_time,
		     sum(mo2.concurrency_wait_time) sum_concurrency_wait_time,
		     sum(mo2.cluster_wait_time) sum_cluster_wait_time,
		     sum(mo2.plsql_exec_time) sum_plsql_exec_time,
		     sum(mo2.java_exec_time) sum_java_exec_time,
		     sum(
		       case
			 when
			   mo2.elapsed_time &lt; (mo2.cpu_time+
					       mo2.application_wait_time+
					       mo2.concurrency_wait_time+
					       mo2.cluster_wait_time+
					       mo2.user_io_wait_time)
			 then
			   0
			 else
			   mo2.elapsed_time - (mo2.cpu_time+
					       mo2.application_wait_time+
					       mo2.concurrency_wait_time+
					       mo2.cluster_wait_time+
					       mo2.user_io_wait_time)
		       end) sum_other_wait_time,
		     sum(mo2.fetches) sum_fetches,
		     sum(mo2.buffer_gets) sum_buffer_gets,
		     sum(mo2.physical_read_requests) sum_read_reqs,
		     sum(mo2.physical_read_bytes) sum_read_bytes,
		     sum(mo2.physical_write_requests) sum_write_reqs,
		     sum(mo2.physical_write_bytes) sum_write_bytes,
		     sum(nvl(mo2.physical_read_bytes,  0) +
			 nvl(mo2.physical_write_bytes,	0)) sum_io_bytes,
		     sum(nvl(mo2.io_interconnect_bytes,  0)) sum_io_inter_bytes
	     FROM    gv$all_sql_monitor mo2
	     WHERE   :detail_is_parallel is not null
	       AND   mo2.inst_id between
			  :px_inst_id_low and
			  :px_inst_id_high
	       AND   mo2.px_qcinst_id between
			  :target_inst_id_low and
			  :target_inst_id_high
	       AND   mo2.sql_id between
			  :detail_px_min_sqlid and
			  :detail_px_max_sqlid
	       AND   mo2.sql_exec_start &gt;=
			  :detail_px_first_exec_start
	       AND   (mo2.px_qcsid =
			 nvl(:target_session_id,
			     mo2.px_qcsid))
	       AND   mo2.con_id = nvl(:con_id,	mo2.con_id)
	       AND   1 = nvl(1,  :dbsearch_value)
	     GROUP BY mo2.sql_id,
		      mo2.sql_exec_start,
		      mo2.sql_exec_id
	    ) mo_px
	  WHERE mo_qc.sql_id	     = mo_px.sql_id(+)
	    AND mo_qc.sql_exec_start = mo_px.sql_exec_start(+)
	    AND mo_qc.sql_exec_id    = mo_px.sql_exec_id(+)) mo0) mo
	WHERE row_rank &lt;= nvl(:top_n_count,	1)
	</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fh5ufah919kun"></a>fh5ufah919kun</td><td class='awrc'><pre_sqltext class="awr">select /*+ index(idl_sb4$ i_idl_sb41) */ piece#, length, piece from idl_sb4$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fn5s5p6hr6702"></a>fn5s5p6hr6702</td><td class='awrnc'><pre_sqltext class="awr">INSERT INTO wri$_adv_message_groups (task_id, id, seq, message#, fac, hdr, lm, nl, p1, p2, p3, p4, p5) VALUES (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="g1c8c2wjv67ct"></a>g1c8c2wjv67ct</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '64';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="g5565fvd0c1fr"></a>g5565fvd0c1fr</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '57';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="grwydz59pu6mc"></a>grwydz59pu6mc</td><td class='awrc'><pre_sqltext class="awr">select text from view$ where rowid=:1</pre_sqltext></td></tr>
</table>
<p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="23"></a>
<h2 class="awr">
Instance Activity Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1200">Key Instance Activity Stats</a></li>
<li class="awr"><a class="awr" href="#1250">Instance Activity Stats</a></li>
<li class="awr"><a class="awr" href="#1300">Instance Activity Stats - Absolute Values</a></li>
<li class="awr"><a class="awr" href="#1400">Instance Activity Stats - Thread Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1200"></a>
<h3 class="awr">Key Instance Activity Stats</h3>
<ul>
<li class="awr"> Ordered by statistic name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Key Instance activity statistics. For each instance, activity total, activity per second, and activity per transaction are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>db block changes</td><td align="right" class='awrc'>2,963,708</td><td align="right" class='awrc'>4,775.68</td><td align="right" class='awrc'>24.70</td></tr>
<tr><td scope="row" class='awrnc'>execute count</td><td align="right" class='awrnc'>806,212</td><td align="right" class='awrnc'>1,299.12</td><td align="right" class='awrnc'>6.72</td></tr>
<tr><td scope="row" class='awrc'>gc cr block receive time</td><td align="right" class='awrc'>1,119</td><td align="right" class='awrc'>1.80</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks received</td><td align="right" class='awrnc'>3,394</td><td align="right" class='awrnc'>5.47</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>gc current block receive time</td><td align="right" class='awrc'>414</td><td align="right" class='awrc'>0.67</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks received</td><td align="right" class='awrnc'>2,538</td><td align="right" class='awrnc'>4.09</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>logons cumulative</td><td align="right" class='awrc'>112</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors cumulative</td><td align="right" class='awrnc'>926,926</td><td align="right" class='awrnc'>1,493.64</td><td align="right" class='awrnc'>7.73</td></tr>
<tr><td scope="row" class='awrc'>parse count (total)</td><td align="right" class='awrc'>4,644</td><td align="right" class='awrc'>7.48</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>parse time elapsed</td><td align="right" class='awrnc'>167</td><td align="right" class='awrnc'>0.27</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical reads</td><td align="right" class='awrc'>8,848,730</td><td align="right" class='awrc'>14,258.71</td><td align="right" class='awrc'>73.75</td></tr>
<tr><td scope="row" class='awrnc'>physical writes</td><td align="right" class='awrnc'>1,377,434</td><td align="right" class='awrnc'>2,219.58</td><td align="right" class='awrnc'>11.48</td></tr>
<tr><td scope="row" class='awrc'>redo size</td><td align="right" class='awrc'>1,116,920,032</td><td align="right" class='awrc'>1,799,788.64</td><td align="right" class='awrc'>9,308.91</td></tr>
<tr><td scope="row" class='awrnc'>session cursor cache hits</td><td align="right" class='awrnc'>925,227</td><td align="right" class='awrnc'>1,490.90</td><td align="right" class='awrnc'>7.71</td></tr>
<tr><td scope="row" class='awrc'>session logical reads</td><td align="right" class='awrc'>11,686,333</td><td align="right" class='awrc'>18,831.19</td><td align="right" class='awrc'>97.40</td></tr>
<tr><td scope="row" class='awrnc'>user calls</td><td align="right" class='awrnc'>1,063</td><td align="right" class='awrnc'>1.71</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>user commits</td><td align="right" class='awrc'>119,984</td><td align="right" class='awrc'>193.34</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>user rollbacks</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>workarea executions - optimal</td><td align="right" class='awrc'>1,031</td><td align="right" class='awrc'>1.66</td><td align="right" class='awrc'>0.01</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1250"></a>
<h3 class="awr">Instance Activity Stats</h3>
<ul>
<li class="awr"> Ordered by statistic name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Instance activity statistics. For each instance, activity total, activity per second, and activity per transaction are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>ASSM bg: segment fix monitor</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM cbk:blocks examined</td><td align="right" class='awrnc'>674</td><td align="right" class='awrnc'>1.09</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ASSM cbk:blocks marked full</td><td align="right" class='awrc'>187</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L1 bitmaps examined</td><td align="right" class='awrnc'>513</td><td align="right" class='awrnc'>0.83</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:L2 bitmap full</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L2 bitmaps examined</td><td align="right" class='awrnc'>119</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search all</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:Search hint</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search steal</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:bump HWM</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free block</td><td align="right" class='awrc'>487</td><td align="right" class='awrc'>0.78</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:get free data block</td><td align="right" class='awrnc'>365</td><td align="right" class='awrnc'>0.59</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free index block</td><td align="right" class='awrc'>122</td><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:good hint</td><td align="right" class='awrnc'>443</td><td align="right" class='awrnc'>0.71</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM rsv:fill reserve</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM wasted db state change</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO (bound) vector count</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO (full) vector count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO block miss count</td><td align="right" class='awrc'>6,055,848</td><td align="right" class='awrc'>9,758.31</td><td align="right" class='awrc'>50.47</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO buffer defrag count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO double miss count</td><td align="right" class='awrc'>677,910</td><td align="right" class='awrc'>1,092.37</td><td align="right" class='awrc'>5.65</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO same unit count</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO single block count</td><td align="right" class='awrc'>1,016</td><td align="right" class='awrc'>1.64</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO vector block count</td><td align="right" class='awrnc'>6,055,126</td><td align="right" class='awrnc'>9,757.14</td><td align="right" class='awrnc'>50.47</td></tr>
<tr><td scope="row" class='awrc'>Batched IO vector read count</td><td align="right" class='awrc'>676,444</td><td align="right" class='awrc'>1,090.01</td><td align="right" class='awrc'>5.64</td></tr>
<tr><td scope="row" class='awrnc'>Block Cleanout Optim referenced</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CCursor + sql area evicted</td><td align="right" class='awrc'>241</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CPU used by this session</td><td align="right" class='awrnc'>384,628</td><td align="right" class='awrnc'>619.78</td><td align="right" class='awrnc'>3.21</td></tr>
<tr><td scope="row" class='awrc'>CPU used when call started</td><td align="right" class='awrc'>288,185</td><td align="right" class='awrc'>464.38</td><td align="right" class='awrc'>2.40</td></tr>
<tr><td scope="row" class='awrnc'>CR blocks created</td><td align="right" class='awrnc'>1,207</td><td align="right" class='awrnc'>1.94</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>Cached Commit SCN referenced</td><td align="right" class='awrc'>7,416,388</td><td align="right" class='awrc'>11,950.66</td><td align="right" class='awrc'>61.81</td></tr>
<tr><td scope="row" class='awrnc'>Client Advertised Receive Window</td><td align="right" class='awrnc'>455</td><td align="right" class='awrnc'>0.73</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Client Advertised Send Window</td><td align="right" class='awrc'>455</td><td align="right" class='awrc'>0.73</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Client Path Maximum Transmission Unit(MTU)</td><td align="right" class='awrnc'>4,259,775</td><td align="right" class='awrnc'>6,864.14</td><td align="right" class='awrnc'>35.50</td></tr>
<tr><td scope="row" class='awrc'>Client Send Congestion Window</td><td align="right" class='awrc'>650</td><td align="right" class='awrc'>1.05</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Ack Received</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Last Data Received</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Data Sent</td><td align="right" class='awrnc'>147</td><td align="right" class='awrnc'>0.24</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Round Trip Time</td><td align="right" class='awrc'>110,373</td><td align="right" class='awrc'>177.85</td><td align="right" class='awrc'>0.92</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Round Trip Time Variance</td><td align="right" class='awrnc'>120,227</td><td align="right" class='awrnc'>193.73</td><td align="right" class='awrnc'>1.00</td></tr>
<tr><td scope="row" class='awrc'>Client Total Bytes Acked</td><td align="right" class='awrc'>1,028,421</td><td align="right" class='awrc'>1,657.18</td><td align="right" class='awrc'>8.57</td></tr>
<tr><td scope="row" class='awrnc'>Client Total Bytes Received</td><td align="right" class='awrnc'>396,934</td><td align="right" class='awrnc'>639.61</td><td align="right" class='awrnc'>3.31</td></tr>
<tr><td scope="row" class='awrc'>Client Total Number of Retransmitted Packets</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Commit SCN cached</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DBWR checkpoint buffers written</td><td align="right" class='awrc'>11,904</td><td align="right" class='awrc'>19.18</td><td align="right" class='awrc'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>DBWR checkpoints</td><td align="right" class='awrnc'>1,027</td><td align="right" class='awrnc'>1.65</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>DBWR fusion writes</td><td align="right" class='awrc'>324</td><td align="right" class='awrc'>0.52</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DBWR object drop buffers written</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DBWR thread checkpoint buffers written</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DBWR transaction table writes</td><td align="right" class='awrnc'>142</td><td align="right" class='awrnc'>0.23</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DBWR undo block writes</td><td align="right" class='awrc'>58,370</td><td align="right" class='awrc'>94.06</td><td align="right" class='awrc'>0.49</td></tr>
<tr><td scope="row" class='awrnc'>DFO trees parallelized</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Effective IO time</td><td align="right" class='awrc'>117,544</td><td align="right" class='awrc'>189.41</td><td align="right" class='awrc'>0.98</td></tr>
<tr><td scope="row" class='awrnc'>HSC Heap Segment Block Changes</td><td align="right" class='awrnc'>1,319,815</td><td align="right" class='awrnc'>2,126.73</td><td align="right" class='awrnc'>11.00</td></tr>
<tr><td scope="row" class='awrc'>Heap Segment Array Inserts</td><td align="right" class='awrc'>169</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Heap Segment Array Updates</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Heatmap Blklevel Flush Task Count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc req</td><td align="right" class='awrnc'>836</td><td align="right" class='awrnc'>1.35</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc space (block)</td><td align="right" class='awrc'>443,088,896</td><td align="right" class='awrc'>713,986.98</td><td align="right" class='awrc'>3,692.90</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc time (ms)</td><td align="right" class='awrnc'>56,490,106</td><td align="right" class='awrnc'>91,027.33</td><td align="right" class='awrnc'>470.81</td></tr>
<tr><td scope="row" class='awrc'>KTFB apply req</td><td align="right" class='awrc'>1,548</td><td align="right" class='awrc'>2.49</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>KTFB apply time (ms)</td><td align="right" class='awrnc'>116,495</td><td align="right" class='awrnc'>187.72</td><td align="right" class='awrnc'>0.97</td></tr>
<tr><td scope="row" class='awrc'>KTFB commit req</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KTFB commit time (ms)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KTFB free req</td><td align="right" class='awrc'>716</td><td align="right" class='awrc'>1.15</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>KTFB free space (block)</td><td align="right" class='awrnc'>42,928</td><td align="right" class='awrnc'>69.17</td><td align="right" class='awrnc'>0.36</td></tr>
<tr><td scope="row" class='awrc'>KTFB free time (ms)</td><td align="right" class='awrc'>6,742,126</td><td align="right" class='awrc'>10,864.16</td><td align="right" class='awrc'>56.19</td></tr>
<tr><td scope="row" class='awrnc'>LOB table id lookup cache misses</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX local messages recv'd</td><td align="right" class='awrc'>774</td><td align="right" class='awrc'>1.25</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>PX local messages sent</td><td align="right" class='awrnc'>775</td><td align="right" class='awrnc'>1.25</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>PX remote messages recv'd</td><td align="right" class='awrc'>488</td><td align="right" class='awrc'>0.79</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX remote messages sent</td><td align="right" class='awrnc'>427</td><td align="right" class='awrnc'>0.69</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Parallel operations not downgraded</td><td align="right" class='awrc'>95</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Requests to/from client</td><td align="right" class='awrnc'>326</td><td align="right" class='awrnc'>0.53</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SMON posted for undo segment shrink</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net roundtrips to/from client</td><td align="right" class='awrnc'>262</td><td align="right" class='awrnc'>0.42</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>TBS Extension: tasks created</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>TBS Extension: tasks executed</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>active txn count during cleanout</td><td align="right" class='awrc'>241</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>auto extends on undo tablespace</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>background checkpoints completed</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>background checkpoints started</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>background timeouts</td><td align="right" class='awrc'>8,249</td><td align="right" class='awrc'>13.29</td><td align="right" class='awrc'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>blocks cleaned out using minact</td><td align="right" class='awrnc'>314,724</td><td align="right" class='awrnc'>507.14</td><td align="right" class='awrnc'>2.62</td></tr>
<tr><td scope="row" class='awrc'>branch node splits</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>buffer is not pinned count</td><td align="right" class='awrnc'>21,075,785</td><td align="right" class='awrnc'>33,961.21</td><td align="right" class='awrnc'>175.65</td></tr>
<tr><td scope="row" class='awrc'>buffer is pinned count</td><td align="right" class='awrc'>8,143,477</td><td align="right" class='awrc'>13,122.28</td><td align="right" class='awrc'>67.87</td></tr>
<tr><td scope="row" class='awrnc'>bytes received via SQL*Net from client</td><td align="right" class='awrnc'>457,182</td><td align="right" class='awrnc'>736.70</td><td align="right" class='awrnc'>3.81</td></tr>
<tr><td scope="row" class='awrc'>bytes sent via SQL*Net to client</td><td align="right" class='awrc'>59,170</td><td align="right" class='awrc'>95.35</td><td align="right" class='awrc'>0.49</td></tr>
<tr><td scope="row" class='awrnc'>calls to get snapshot scn: kcmgss</td><td align="right" class='awrnc'>941,004</td><td align="right" class='awrnc'>1,516.32</td><td align="right" class='awrnc'>7.84</td></tr>
<tr><td scope="row" class='awrc'>calls to kcmgas</td><td align="right" class='awrc'>198,917</td><td align="right" class='awrc'>320.53</td><td align="right" class='awrc'>1.66</td></tr>
<tr><td scope="row" class='awrnc'>calls to kcmgcs</td><td align="right" class='awrnc'>6,540</td><td align="right" class='awrnc'>10.54</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>cell physical IO interconnect bytes</td><td align="right" class='awrc'>99,131,662,848</td><td align="right" class='awrc'>159,739,314.66</td><td align="right" class='awrc'>826,207.35</td></tr>
<tr><td scope="row" class='awrnc'>change write time</td><td align="right" class='awrnc'>3,498</td><td align="right" class='awrnc'>5.64</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>cleanout - number of ktugct calls</td><td align="right" class='awrc'>2,491</td><td align="right" class='awrc'>4.01</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>cleanouts and rollbacks - consistent read gets</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>cleanouts only - consistent read gets</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>cluster key scan block gets</td><td align="right" class='awrnc'>371</td><td align="right" class='awrnc'>0.60</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>cluster key scans</td><td align="right" class='awrc'>319</td><td align="right" class='awrc'>0.51</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit batch/immediate performed</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit batch/immediate requested</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: block lost</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: buffer being written</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: callback failure</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: cannot pin</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanouts</td><td align="right" class='awrnc'>1,320,127</td><td align="right" class='awrnc'>2,127.23</td><td align="right" class='awrnc'>11.00</td></tr>
<tr><td scope="row" class='awrc'>commit cleanouts successfully completed</td><td align="right" class='awrc'>1,320,102</td><td align="right" class='awrc'>2,127.19</td><td align="right" class='awrc'>11.00</td></tr>
<tr><td scope="row" class='awrnc'>commit immediate performed</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit immediate requested</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit txn count during cleanout</td><td align="right" class='awrnc'>152</td><td align="right" class='awrnc'>0.24</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>consistent changes</td><td align="right" class='awrc'>10,428</td><td align="right" class='awrc'>16.80</td><td align="right" class='awrc'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets</td><td align="right" class='awrnc'>9,941,941</td><td align="right" class='awrnc'>16,020.30</td><td align="right" class='awrnc'>82.86</td></tr>
<tr><td scope="row" class='awrc'>consistent gets examination</td><td align="right" class='awrc'>1,615,912</td><td align="right" class='awrc'>2,603.86</td><td align="right" class='awrc'>13.47</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets examination (fastpath)</td><td align="right" class='awrnc'>1,615,594</td><td align="right" class='awrnc'>2,603.34</td><td align="right" class='awrnc'>13.47</td></tr>
<tr><td scope="row" class='awrc'>consistent gets from cache</td><td align="right" class='awrc'>9,941,933</td><td align="right" class='awrc'>16,020.29</td><td align="right" class='awrc'>82.86</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets pin</td><td align="right" class='awrnc'>8,326,021</td><td align="right" class='awrnc'>13,416.43</td><td align="right" class='awrnc'>69.39</td></tr>
<tr><td scope="row" class='awrc'>consistent gets pin (fastpath)</td><td align="right" class='awrc'>6,157,232</td><td align="right" class='awrc'>9,921.67</td><td align="right" class='awrc'>51.32</td></tr>
<tr><td scope="row" class='awrnc'>cursor authentications</td><td align="right" class='awrnc'>80</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>cursor reload failures</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>data blocks consistent reads - undo records applied</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>db block changes</td><td align="right" class='awrc'>2,963,708</td><td align="right" class='awrc'>4,775.68</td><td align="right" class='awrc'>24.70</td></tr>
<tr><td scope="row" class='awrnc'>db block gets</td><td align="right" class='awrnc'>1,744,329</td><td align="right" class='awrnc'>2,810.79</td><td align="right" class='awrnc'>14.54</td></tr>
<tr><td scope="row" class='awrc'>db block gets direct</td><td align="right" class='awrc'>1,063</td><td align="right" class='awrc'>1.71</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>db block gets from cache</td><td align="right" class='awrnc'>1,743,266</td><td align="right" class='awrnc'>2,809.07</td><td align="right" class='awrnc'>14.53</td></tr>
<tr><td scope="row" class='awrc'>db block gets from cache (fastpath)</td><td align="right" class='awrc'>356,474</td><td align="right" class='awrc'>574.42</td><td align="right" class='awrc'>2.97</td></tr>
<tr><td scope="row" class='awrnc'>deferred (CURRENT) block cleanout applications</td><td align="right" class='awrnc'>316,130</td><td align="right" class='awrnc'>509.41</td><td align="right" class='awrnc'>2.63</td></tr>
<tr><td scope="row" class='awrc'>dirty buffers inspected</td><td align="right" class='awrc'>1,285,662</td><td align="right" class='awrc'>2,071.70</td><td align="right" class='awrc'>10.72</td></tr>
<tr><td scope="row" class='awrnc'>enqueue conversions</td><td align="right" class='awrnc'>16,747</td><td align="right" class='awrnc'>26.99</td><td align="right" class='awrnc'>0.14</td></tr>
<tr><td scope="row" class='awrc'>enqueue releases</td><td align="right" class='awrc'>378,951</td><td align="right" class='awrc'>610.64</td><td align="right" class='awrc'>3.16</td></tr>
<tr><td scope="row" class='awrnc'>enqueue requests</td><td align="right" class='awrnc'>378,863</td><td align="right" class='awrnc'>610.49</td><td align="right" class='awrnc'>3.16</td></tr>
<tr><td scope="row" class='awrc'>enqueue timeouts</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enqueue waits</td><td align="right" class='awrnc'>4,542</td><td align="right" class='awrnc'>7.32</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>exchange deadlocks</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>execute count</td><td align="right" class='awrnc'>806,212</td><td align="right" class='awrnc'>1,299.12</td><td align="right" class='awrnc'>6.72</td></tr>
<tr><td scope="row" class='awrc'>file io service time</td><td align="right" class='awrc'>3,744,271,216</td><td align="right" class='awrc'>6,033,463.99</td><td align="right" class='awrc'>31,206.42</td></tr>
<tr><td scope="row" class='awrnc'>free buffer inspected</td><td align="right" class='awrnc'>8,978,990</td><td align="right" class='awrnc'>14,468.61</td><td align="right" class='awrnc'>74.83</td></tr>
<tr><td scope="row" class='awrc'>free buffer requested</td><td align="right" class='awrc'>8,917,144</td><td align="right" class='awrc'>14,368.96</td><td align="right" class='awrc'>74.32</td></tr>
<tr><td scope="row" class='awrnc'>gc blocks compressed</td><td align="right" class='awrnc'>8,027</td><td align="right" class='awrnc'>12.93</td><td align="right" class='awrnc'>0.07</td></tr>
<tr><td scope="row" class='awrc'>gc blocks lost</td><td align="right" class='awrc'>3,892</td><td align="right" class='awrc'>6.27</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>gc cleanout applied</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cleanout saved</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr anti locks created</td><td align="right" class='awrnc'>61,715</td><td align="right" class='awrnc'>99.45</td><td align="right" class='awrnc'>0.51</td></tr>
<tr><td scope="row" class='awrc'>gc cr anti locks expanded</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr anti locks shrunk</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr block build time</td><td align="right" class='awrc'>31</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block flush time</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr block receive time</td><td align="right" class='awrc'>1,119</td><td align="right" class='awrc'>1.80</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks built</td><td align="right" class='awrnc'>3,164</td><td align="right" class='awrnc'>5.10</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks flushed</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks received</td><td align="right" class='awrnc'>3,394</td><td align="right" class='awrnc'>5.47</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks served</td><td align="right" class='awrc'>3,223</td><td align="right" class='awrc'>5.19</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multiblock grant time</td><td align="right" class='awrnc'>855,364</td><td align="right" class='awrnc'>1,378.32</td><td align="right" class='awrnc'>7.13</td></tr>
<tr><td scope="row" class='awrc'>gc cr multiblock grants received</td><td align="right" class='awrc'>5,496,170</td><td align="right" class='awrc'>8,856.45</td><td align="right" class='awrc'>45.81</td></tr>
<tr><td scope="row" class='awrnc'>gc current block flush time</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current block pin time</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current block receive time</td><td align="right" class='awrnc'>414</td><td align="right" class='awrnc'>0.67</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks flushed</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks pinned</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks received</td><td align="right" class='awrc'>2,538</td><td align="right" class='awrc'>4.09</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks served</td><td align="right" class='awrnc'>25,053</td><td align="right" class='awrnc'>40.37</td><td align="right" class='awrnc'>0.21</td></tr>
<tr><td scope="row" class='awrc'>gc force cr read cr</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc force cr read current</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc kbytes saved</td><td align="right" class='awrc'>33,412</td><td align="right" class='awrc'>53.84</td><td align="right" class='awrc'>0.28</td></tr>
<tr><td scope="row" class='awrnc'>gc kbytes sent</td><td align="right" class='awrnc'>192,797</td><td align="right" class='awrnc'>310.67</td><td align="right" class='awrnc'>1.61</td></tr>
<tr><td scope="row" class='awrc'>gc local grants</td><td align="right" class='awrc'>4,761,411</td><td align="right" class='awrc'>7,672.47</td><td align="right" class='awrc'>39.68</td></tr>
<tr><td scope="row" class='awrnc'>gc merge pi bg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc merge pi fg</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc no change made</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc read time waited</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc read waits</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc reader bypass grants</td><td align="right" class='awrc'>38</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>

<tr><td scope="row" class='awrnc'>gc reader bypass waits</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>


<tr><td scope="row" class='awrc'>gc remote grants</td><td align="right" class='awrc'>4,153,196</td><td align="right" class='awrc'>6,692.40</td><td align="right" class='awrc'>34.61</td></tr>
<tr><td scope="row" class='awrnc'>gc status messages received</td><td align="right" class='awrnc'>440,091</td><td align="right" class='awrnc'>709.16</td><td align="right" class='awrnc'>3.67</td></tr>
<tr><td scope="row" class='awrc'>gc status messages sent</td><td align="right" class='awrc'>8,536</td><td align="right" class='awrc'>13.75</td><td align="right" class='awrc'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>gcs affinity lock failures</td><td align="right" class='awrnc'>252</td><td align="right" class='awrnc'>0.41</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs affinity lock grants</td><td align="right" class='awrc'>678,020</td><td align="right" class='awrc'>1,092.55</td><td align="right" class='awrc'>5.65</td></tr>
<tr><td scope="row" class='awrnc'>gcs anti-locks created</td><td align="right" class='awrnc'>61,712</td><td align="right" class='awrnc'>99.44</td><td align="right" class='awrnc'>0.51</td></tr>
<tr><td scope="row" class='awrc'>gcs data block access records</td><td align="right" class='awrc'>8,856,820</td><td align="right" class='awrc'>14,271.75</td><td align="right" class='awrc'>73.82</td></tr>
<tr><td scope="row" class='awrnc'>gcs messages sent</td><td align="right" class='awrnc'>12,187,678</td><td align="right" class='awrnc'>19,639.05</td><td align="right" class='awrnc'>101.58</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly lock failures</td><td align="right" class='awrc'>22,129</td><td align="right" class='awrc'>35.66</td><td align="right" class='awrc'>0.18</td></tr>
<tr><td scope="row" class='awrnc'>gcs read-mostly lock grants</td><td align="right" class='awrnc'>124,897</td><td align="right" class='awrnc'>201.26</td><td align="right" class='awrnc'>1.04</td></tr>
<tr><td scope="row" class='awrc'>gcs stats management (SCM) process posts</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges messages sent</td><td align="right" class='awrnc'>7,106</td><td align="right" class='awrnc'>11.45</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>global enqueue get time</td><td align="right" class='awrc'>45,281</td><td align="right" class='awrc'>72.97</td><td align="right" class='awrc'>0.38</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue gets async</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global enqueue gets sync</td><td align="right" class='awrc'>273,406</td><td align="right" class='awrc'>440.56</td><td align="right" class='awrc'>2.28</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue releases</td><td align="right" class='awrnc'>259,958</td><td align="right" class='awrnc'>418.89</td><td align="right" class='awrnc'>2.17</td></tr>
<tr><td scope="row" class='awrc'>global undo segment hints helped</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>global undo segment hints were stale</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>heap block compress</td><td align="right" class='awrc'>2,829</td><td align="right" class='awrc'>4.56</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>hot buffers moved to head of LRU</td><td align="right" class='awrnc'>125,969</td><td align="right" class='awrnc'>202.98</td><td align="right" class='awrnc'>1.05</td></tr>
<tr><td scope="row" class='awrc'>immediate (CR) block cleanout applications</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>immediate (CURRENT) block cleanout applications</td><td align="right" class='awrnc'>376</td><td align="right" class='awrnc'>0.61</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>index crx upgrade (positioned)</td><td align="right" class='awrc'>62</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>index fast full scans (full)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>index fetch by key</td><td align="right" class='awrc'>5,317</td><td align="right" class='awrc'>8.57</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>index range scans</td><td align="right" class='awrnc'>802,704</td><td align="right" class='awrnc'>1,293.47</td><td align="right" class='awrnc'>6.69</td></tr>
<tr><td scope="row" class='awrc'>leaf node 90-10 splits</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>leaf node splits</td><td align="right" class='awrnc'>118</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>lob reads</td><td align="right" class='awrc'>816</td><td align="right" class='awrc'>1.31</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>lob writes</td><td align="right" class='awrnc'>4,695</td><td align="right" class='awrnc'>7.57</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>lob writes unaligned</td><td align="right" class='awrc'>4,694</td><td align="right" class='awrc'>7.56</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>logical read bytes from cache</td><td align="right" class='awrnc'>95,725,076,480</td><td align="right" class='awrnc'>154,249,991.11</td><td align="right" class='awrnc'>797,815.35</td></tr>
<tr><td scope="row" class='awrc'>logons cumulative</td><td align="right" class='awrc'>112</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>max cf enq hold time</td><td align="right" class='awrnc'>9,203</td><td align="right" class='awrnc'>14.83</td><td align="right" class='awrnc'>0.08</td></tr>
<tr><td scope="row" class='awrc'>messages received</td><td align="right" class='awrc'>187,126</td><td align="right" class='awrc'>301.53</td><td align="right" class='awrc'>1.56</td></tr>
<tr><td scope="row" class='awrnc'>messages sent</td><td align="right" class='awrnc'>187,125</td><td align="right" class='awrnc'>301.53</td><td align="right" class='awrnc'>1.56</td></tr>
<tr><td scope="row" class='awrc'>min active SCN optimization applied on CR</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>no work - consistent read gets</td><td align="right" class='awrnc'>8,308,314</td><td align="right" class='awrnc'>13,387.90</td><td align="right" class='awrnc'>69.25</td></tr>
<tr><td scope="row" class='awrc'>non-idle wait count</td><td align="right" class='awrc'>7,964,483</td><td align="right" class='awrc'>12,833.85</td><td align="right" class='awrc'>66.38</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors cumulative</td><td align="right" class='awrnc'>926,926</td><td align="right" class='awrnc'>1,493.64</td><td align="right" class='awrnc'>7.73</td></tr>
<tr><td scope="row" class='awrc'>parse count (describe)</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>parse count (failures)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>parse count (hard)</td><td align="right" class='awrc'>214</td><td align="right" class='awrc'>0.34</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>parse count (total)</td><td align="right" class='awrnc'>4,644</td><td align="right" class='awrnc'>7.48</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>parse time cpu</td><td align="right" class='awrc'>78</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>parse time elapsed</td><td align="right" class='awrnc'>167</td><td align="right" class='awrnc'>0.27</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical read IO requests</td><td align="right" class='awrc'>8,847,855</td><td align="right" class='awrc'>14,257.30</td><td align="right" class='awrc'>73.74</td></tr>
<tr><td scope="row" class='awrnc'>physical read bytes</td><td align="right" class='awrnc'>72,488,787,968</td><td align="right" class='awrnc'>116,807,374.94</td><td align="right" class='awrnc'>604,153.79</td></tr>
<tr><td scope="row" class='awrc'>physical read total IO requests</td><td align="right" class='awrc'>8,853,417</td><td align="right" class='awrc'>14,266.27</td><td align="right" class='awrc'>73.79</td></tr>
<tr><td scope="row" class='awrnc'>physical read total bytes</td><td align="right" class='awrnc'>73,973,689,856</td><td align="right" class='awrnc'>119,200,124.17</td><td align="right" class='awrnc'>616,529.62</td></tr>
<tr><td scope="row" class='awrc'>physical read total multi block requests</td><td align="right" class='awrc'>1,362</td><td align="right" class='awrc'>2.19</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>physical reads</td><td align="right" class='awrnc'>8,848,730</td><td align="right" class='awrnc'>14,258.71</td><td align="right" class='awrnc'>73.75</td></tr>
<tr><td scope="row" class='awrc'>physical reads cache</td><td align="right" class='awrc'>8,848,716</td><td align="right" class='awrc'>14,258.69</td><td align="right" class='awrc'>73.75</td></tr>
<tr><td scope="row" class='awrnc'>physical reads cache prefetch</td><td align="right" class='awrnc'>5,377,508</td><td align="right" class='awrnc'>8,665.24</td><td align="right" class='awrnc'>44.82</td></tr>
<tr><td scope="row" class='awrc'>physical reads direct</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical reads direct (lob)</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical reads direct temporary tablespace</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical reads prefetch warmup</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical write IO requests</td><td align="right" class='awrc'>1,319,809</td><td align="right" class='awrc'>2,126.72</td><td align="right" class='awrc'>11.00</td></tr>
<tr><td scope="row" class='awrnc'>physical write bytes</td><td align="right" class='awrnc'>11,283,939,328</td><td align="right" class='awrnc'>18,182,775.14</td><td align="right" class='awrnc'>94,045.37</td></tr>
<tr><td scope="row" class='awrc'>physical write total IO requests</td><td align="right" class='awrc'>1,430,890</td><td align="right" class='awrc'>2,305.72</td><td align="right" class='awrc'>11.93</td></tr>
<tr><td scope="row" class='awrnc'>physical write total bytes</td><td align="right" class='awrnc'>12,573,223,424</td><td align="right" class='awrnc'>20,260,308.72</td><td align="right" class='awrnc'>104,790.83</td></tr>
<tr><td scope="row" class='awrc'>physical write total multi block requests</td><td align="right" class='awrc'>3,414</td><td align="right" class='awrc'>5.50</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>physical writes</td><td align="right" class='awrnc'>1,377,434</td><td align="right" class='awrnc'>2,219.58</td><td align="right" class='awrnc'>11.48</td></tr>
<tr><td scope="row" class='awrc'>physical writes direct</td><td align="right" class='awrc'>1,107</td><td align="right" class='awrc'>1.78</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct (lob)</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical writes direct temporary tablespace</td><td align="right" class='awrc'>851</td><td align="right" class='awrc'>1.37</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>physical writes from cache</td><td align="right" class='awrnc'>1,376,327</td><td align="right" class='awrnc'>2,217.79</td><td align="right" class='awrnc'>11.47</td></tr>
<tr><td scope="row" class='awrc'>physical writes non checkpoint</td><td align="right" class='awrc'>1,375,705</td><td align="right" class='awrc'>2,216.79</td><td align="right" class='awrc'>11.47</td></tr>
<tr><td scope="row" class='awrnc'>pinned buffers inspected</td><td align="right" class='awrnc'>382</td><td align="right" class='awrnc'>0.62</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>prefetch warmup blocks aged out before use</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>prefetched blocks aged out before use</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>process last non-idle time</td><td align="right" class='awrc'>621</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>queries parallelized</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>recursive calls</td><td align="right" class='awrc'>1,087,610</td><td align="right" class='awrc'>1,752.56</td><td align="right" class='awrc'>9.06</td></tr>
<tr><td scope="row" class='awrnc'>recursive cpu usage</td><td align="right" class='awrnc'>371,500</td><td align="right" class='awrnc'>598.63</td><td align="right" class='awrnc'>3.10</td></tr>
<tr><td scope="row" class='awrc'>redo KB read</td><td align="right" class='awrc'>831,488</td><td align="right" class='awrc'>1,339.85</td><td align="right" class='awrc'>6.93</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks checksummed by FG (exclusive)</td><td align="right" class='awrnc'>810,345</td><td align="right" class='awrnc'>1,305.78</td><td align="right" class='awrnc'>6.75</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written</td><td align="right" class='awrc'>2,306,989</td><td align="right" class='awrc'>3,717.45</td><td align="right" class='awrc'>19.23</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks written (group 0)</td><td align="right" class='awrnc'>1,326,110</td><td align="right" class='awrnc'>2,136.87</td><td align="right" class='awrnc'>11.05</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written (group 1)</td><td align="right" class='awrc'>980,879</td><td align="right" class='awrc'>1,580.57</td><td align="right" class='awrc'>8.18</td></tr>
<tr><td scope="row" class='awrnc'>redo buffer allocation retries</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo entries</td><td align="right" class='awrc'>1,552,876</td><td align="right" class='awrc'>2,502.28</td><td align="right" class='awrc'>12.94</td></tr>
<tr><td scope="row" class='awrnc'>redo log space requests</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo size</td><td align="right" class='awrc'>1,116,920,032</td><td align="right" class='awrc'>1,799,788.64</td><td align="right" class='awrc'>9,308.91</td></tr>
<tr><td scope="row" class='awrnc'>redo size for direct writes</td><td align="right" class='awrnc'>972</td><td align="right" class='awrnc'>1.57</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>redo subscn max counts</td><td align="right" class='awrc'>116</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo synch time (usec)</td><td align="right" class='awrc'>216,149</td><td align="right" class='awrc'>348.30</td><td align="right" class='awrc'>1.80</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead (usec)</td><td align="right" class='awrnc'>5,335</td><td align="right" class='awrnc'>8.60</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>redo synch time overhead count (  2ms)</td><td align="right" class='awrc'>31</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead count (  8ms)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo synch writes</td><td align="right" class='awrc'>69</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo wastage</td><td align="right" class='awrnc'>26,738,040</td><td align="right" class='awrnc'>43,085.29</td><td align="right" class='awrnc'>222.85</td></tr>
<tr><td scope="row" class='awrc'>redo write active strands</td><td align="right" class='awrc'>109,945</td><td align="right" class='awrc'>177.16</td><td align="right" class='awrc'>0.92</td></tr>
<tr><td scope="row" class='awrnc'>redo write broadcast ack count</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write broadcast ack time</td><td align="right" class='awrc'>21,519</td><td align="right" class='awrc'>34.68</td><td align="right" class='awrc'>0.18</td></tr>
<tr><td scope="row" class='awrnc'>redo write finish time</td><td align="right" class='awrnc'>779,861,596</td><td align="right" class='awrnc'>1,256,657.59</td><td align="right" class='awrnc'>6,499.71</td></tr>


<tr><td scope="row" class='awrc'>redo write gather time</td><td align="right" class='awrc'>42,741,367</td><td align="right" class='awrc'>68,872.81</td><td align="right" class='awrc'>356.23</td></tr>

<tr><td scope="row" class='awrnc'>redo write info find</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write info find fail</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo write schedule time</td><td align="right" class='awrnc'>43,875,145</td><td align="right" class='awrnc'>70,699.77</td><td align="right" class='awrnc'>365.67</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (   4KB)</td><td align="right" class='awrc'>8,785</td><td align="right" class='awrc'>14.16</td><td align="right" class='awrc'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (   8KB)</td><td align="right" class='awrnc'>13,055</td><td align="right" class='awrnc'>21.04</td><td align="right" class='awrnc'>0.11</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (  16KB)</td><td align="right" class='awrc'>25,621</td><td align="right" class='awrc'>41.29</td><td align="right" class='awrc'>0.21</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (  32KB)</td><td align="right" class='awrnc'>20,094</td><td align="right" class='awrnc'>32.38</td><td align="right" class='awrnc'>0.17</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 128KB)</td><td align="right" class='awrc'>6,566</td><td align="right" class='awrc'>10.58</td><td align="right" class='awrc'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 256KB)</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 512KB)</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (1024KB)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write time</td><td align="right" class='awrc'>78,320</td><td align="right" class='awrc'>126.20</td><td align="right" class='awrc'>0.65</td></tr>
<tr><td scope="row" class='awrnc'>redo write time (usec)</td><td align="right" class='awrnc'>783,197,788</td><td align="right" class='awrnc'>1,262,033.48</td><td align="right" class='awrnc'>6,527.52</td></tr>
<tr><td scope="row" class='awrc'>redo write total time</td><td align="right" class='awrc'>821,780,787</td><td align="right" class='awrc'>1,324,205.57</td><td align="right" class='awrc'>6,849.09</td></tr>
<tr><td scope="row" class='awrnc'>redo write worker delay (usec)</td><td align="right" class='awrnc'>37,497,892</td><td align="right" class='awrnc'>60,423.56</td><td align="right" class='awrnc'>312.52</td></tr>
<tr><td scope="row" class='awrc'>redo write worker delay count</td><td align="right" class='awrc'>74,151</td><td align="right" class='awrc'>119.49</td><td align="right" class='awrc'>0.62</td></tr>
<tr><td scope="row" class='awrnc'>redo writes</td><td align="right" class='awrnc'>74,151</td><td align="right" class='awrnc'>119.49</td><td align="right" class='awrnc'>0.62</td></tr>
<tr><td scope="row" class='awrc'>redo writes (group 0)</td><td align="right" class='awrc'>40,015</td><td align="right" class='awrc'>64.48</td><td align="right" class='awrc'>0.33</td></tr>
<tr><td scope="row" class='awrnc'>redo writes (group 1)</td><td align="right" class='awrnc'>34,136</td><td align="right" class='awrnc'>55.01</td><td align="right" class='awrnc'>0.28</td></tr>
<tr><td scope="row" class='awrc'>redo writes adaptive all</td><td align="right" class='awrc'>74,151</td><td align="right" class='awrc'>119.49</td><td align="right" class='awrc'>0.62</td></tr>
<tr><td scope="row" class='awrnc'>redo writes adaptive worker</td><td align="right" class='awrnc'>74,151</td><td align="right" class='awrnc'>119.49</td><td align="right" class='awrnc'>0.62</td></tr>
<tr><td scope="row" class='awrc'>rollback changes - undo records applied</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>rollbacks only - consistent read gets</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>rows fetched via callback</td><td align="right" class='awrc'>2,545</td><td align="right" class='awrc'>4.10</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>saved cleanouts</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>saved cleanouts successfully completed</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>securefile allocation bytes</td><td align="right" class='awrnc'>360,448</td><td align="right" class='awrnc'>580.82</td><td align="right" class='awrnc'>3.00</td></tr>
<tr><td scope="row" class='awrc'>securefile allocation chunks</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>securefile bytes non-transformed</td><td align="right" class='awrnc'>310,687</td><td align="right" class='awrnc'>500.64</td><td align="right" class='awrnc'>2.59</td></tr>
<tr><td scope="row" class='awrc'>securefile direct read bytes</td><td align="right" class='awrc'>114,688</td><td align="right" class='awrc'>184.81</td><td align="right" class='awrc'>0.96</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct read ops</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>securefile direct write bytes</td><td align="right" class='awrc'>360,448</td><td align="right" class='awrc'>580.82</td><td align="right" class='awrc'>3.00</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct write ops</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>securefile number of non-transformed flushes</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment cfs allocations</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment chunks allocation from dispenser</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser allocations</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment dispenser load empty</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser load tasks</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc ops</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc tasks</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc time (ms)</td><td align="right" class='awrc'>1,470</td><td align="right" class='awrc'>2.37</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>segment total chunk allocation</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>session connect time</td><td align="right" class='awrc'>5,778</td><td align="right" class='awrc'>9.31</td><td align="right" class='awrc'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>session cursor cache hits</td><td align="right" class='awrnc'>925,227</td><td align="right" class='awrnc'>1,490.90</td><td align="right" class='awrnc'>7.71</td></tr>
<tr><td scope="row" class='awrc'>session logical reads</td><td align="right" class='awrc'>11,686,333</td><td align="right" class='awrc'>18,831.19</td><td align="right" class='awrc'>97.40</td></tr>
<tr><td scope="row" class='awrnc'>shared hash latch upgrades - no wait</td><td align="right" class='awrnc'>2,882,076</td><td align="right" class='awrnc'>4,644.14</td><td align="right" class='awrnc'>24.02</td></tr>
<tr><td scope="row" class='awrc'>shared hash latch upgrades - wait</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>shared io pool buffer get success</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>sorts (memory)</td><td align="right" class='awrc'>767</td><td align="right" class='awrc'>1.24</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>sorts (rows)</td><td align="right" class='awrnc'>956,470</td><td align="right" class='awrnc'>1,541.24</td><td align="right" class='awrnc'>7.97</td></tr>
<tr><td scope="row" class='awrc'>sql area evicted</td><td align="right" class='awrc'>227</td><td align="right" class='awrc'>0.37</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>sql area purged</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>summed dirty queue length</td><td align="right" class='awrc'>5,454,860</td><td align="right" class='awrc'>8,789.88</td><td align="right" class='awrc'>45.46</td></tr>
<tr><td scope="row" class='awrnc'>switch current caused by our pin</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>switch current to new buffer</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>table fetch by rowid</td><td align="right" class='awrnc'>13,534,766</td><td align="right" class='awrnc'>21,809.72</td><td align="right" class='awrnc'>112.80</td></tr>
<tr><td scope="row" class='awrc'>table fetch continued row</td><td align="right" class='awrc'>153</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>table scan blocks gotten</td><td align="right" class='awrnc'>9,287</td><td align="right" class='awrnc'>14.96</td><td align="right" class='awrnc'>0.08</td></tr>
<tr><td scope="row" class='awrc'>table scan disk non-IMC rows gotten</td><td align="right" class='awrc'>541,867</td><td align="right" class='awrc'>873.16</td><td align="right" class='awrc'>4.52</td></tr>
<tr><td scope="row" class='awrnc'>table scan rows gotten</td><td align="right" class='awrnc'>541,867</td><td align="right" class='awrnc'>873.16</td><td align="right" class='awrnc'>4.52</td></tr>
<tr><td scope="row" class='awrc'>table scans (short tables)</td><td align="right" class='awrc'>737</td><td align="right" class='awrc'>1.19</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>temp space allocated (bytes)</td><td align="right" class='awrnc'>3,145,728</td><td align="right" class='awrnc'>5,068.98</td><td align="right" class='awrnc'>26.22</td></tr>
<tr><td scope="row" class='awrc'>total cf enq hold time</td><td align="right" class='awrc'>18,987</td><td align="right" class='awrc'>30.60</td><td align="right" class='awrc'>0.16</td></tr>
<tr><td scope="row" class='awrnc'>total number of cf enq holders</td><td align="right" class='awrnc'>310</td><td align="right" class='awrnc'>0.50</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>total number of times SMON posted</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction lock background gets</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>transaction lock foreground requests</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction rollbacks</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>transaction tables consistent read rollbacks</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction tables consistent reads - undo records applied</td><td align="right" class='awrnc'>2,390</td><td align="right" class='awrnc'>3.85</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>undo change vector size</td><td align="right" class='awrc'>458,416,584</td><td align="right" class='awrc'>738,685.79</td><td align="right" class='awrc'>3,820.65</td></tr>
<tr><td scope="row" class='awrnc'>user calls</td><td align="right" class='awrnc'>1,063</td><td align="right" class='awrnc'>1.71</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>user commits</td><td align="right" class='awrc'>119,984</td><td align="right" class='awrc'>193.34</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>user logons cumulative</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>user logouts cumulative</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>user rollbacks</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>workarea executions - optimal</td><td align="right" class='awrc'>1,031</td><td align="right" class='awrc'>1.66</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>write clones created in foreground</td><td align="right" class='awrnc'>69</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1300"></a>
<h3 class="awr">Instance Activity Stats - Absolute Values</h3>
<ul>
<li class="awr"> Statistics with absolute values (should not be diffed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays absolute values of instance-related features. For each instance, activity begin value and end value are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Begin Value</th><th class="awrbg" scope="col">End Value</th></tr>
<tr><td scope="row" class='awrc'>logons current</td><td align="right" class='awrc'>192</td><td align="right" class='awrc'>127</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors current</td><td align="right" class='awrnc'>391</td><td align="right" class='awrnc'>126</td></tr>
<tr><td scope="row" class='awrc'>session cursor cache count</td><td align="right" class='awrc'>14,774</td><td align="right" class='awrc'>15,073</td></tr>
<tr><td scope="row" class='awrnc'>session pga memory</td><td align="right" class='awrnc'>1,023,892,800</td><td align="right" class='awrnc'>677,879,896</td></tr>
<tr><td scope="row" class='awrc'>session pga memory max</td><td align="right" class='awrc'>1,214,498,368</td><td align="right" class='awrc'>846,576,696</td></tr>
<tr><td scope="row" class='awrnc'>session uga memory</td><td align="right" class='awrnc'>665,108,728</td><td align="right" class='awrnc'>550,133,312</td></tr>
<tr><td scope="row" class='awrc'>session uga memory max</td><td align="right" class='awrc'>6,889,124,072</td><td align="right" class='awrc'>7,351,955,040</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1400"></a>
<h3 class="awr">Instance Activity Stats - Thread Activity</h3>
<ul>
<li class="awr"> Statistics identified by '(derived)' come from sources other than SYSSTAT</li>
</ul>
<table border="0" class="tdiff" summary="This table displays thread activity stats in the instance. For each activity , total number of activity and activity per hour are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Hour</th></tr>
<tr><td scope="row" class='awrc'>log switches (derived)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="24"></a>
<h2 class="awr">
IO Stats
</h2>
<ul>
<li class="awr"><a class="awr" href="#8760">IOStat by Function summary</a></li>
<li class="awr"><a class="awr" href="#8770">IOStat by Filetype summary</a></li>
<li class="awr"><a class="awr" href="#8780">IOStat by Function/Filetype summary</a></li>
<li class="awr"><a class="awr" href="#1700">Tablespace IO Stats</a></li>
<li class="awr"><a class="awr" href="#1800">File IO Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8760"></a>
<h3 class="awr">IOStat by Function summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> ordered by (Data Read + Write) desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the IO Statistics for different functions. IO stats includes amount of reads and writes, requests per second, data per second, wait count and average wait time"><tr><th class="awrbg" scope="col">Function Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time </th></tr>
<tr><td scope="row" class='awrc'>Buffer Cache Reads</td><td align="right" class='awrc'>67.1G</td><td align="right" class='awrc'>14168.38</td><td align="right" class='awrc'>110.718M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>3.4M</td><td align="right" class='awrc'>7.75ms</td></tr>
<tr><td scope="row" class='awrnc'>DBWR</td><td align="right" class='awrnc'>3M</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>.005M</td><td align="right" class='awrnc'>10.4G</td><td align="right" class='awrnc'>2115.69</td><td align="right" class='awrnc'>17.235M</td><td align="right" class='awrnc'>132</td><td align="right" class='awrnc'>4.57ms</td></tr>
<tr><td scope="row" class='awrc'>Others</td><td align="right" class='awrc'>1.4G</td><td align="right" class='awrc'>8.87</td><td align="right" class='awrc'>2.274M</td><td align="right" class='awrc'>105M</td><td align="right" class='awrc'>1.73</td><td align="right" class='awrc'>.169M</td><td align="right" class='awrc'>3749</td><td align="right" class='awrc'>7.94ms</td></tr>
<tr><td scope="row" class='awrnc'>LGWR</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>1.1G</td><td align="right" class='awrnc'>176.61</td><td align="right" class='awrnc'>1.805M</td><td align="right" class='awrnc'>73.9K</td><td align="right" class='awrnc'>9.89ms</td></tr>
<tr><td scope="row" class='awrc'>Direct Reads</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>3M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>.005M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Direct Writes</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>2M</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>.003M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TOTAL:</td><td align="right" class='awrc'>68.5G</td><td align="right" class='awrc'>14177.48</td><td align="right" class='awrc'>112.997M</td><td align="right" class='awrc'>11.6G</td><td align="right" class='awrc'>2294.05</td><td align="right" class='awrc'>19.217M</td><td align="right" class='awrc'>3.5M</td><td align="right" class='awrc'>7.80ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8770"></a>
<h3 class="awr">IOStat by Filetype summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> Small Read and Large Read are average service times </li>
<li class="awr"> Ordered by (Data Read + Write) desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays IO Statistics for different file types, such as data files, control files, log files and temp files. IO Statistics include amount of reads and writes, requests per second, data per second, wait count and average wait time"><tr><th class="awrbg" scope="col">Filetype Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Small Read</th><th class="awrbg" scope="col">Large Read</th></tr>
<tr><td scope="row" class='awrc'>Data File</td><td align="right" class='awrc'>67.1G</td><td align="right" class='awrc'>14163.94</td><td align="right" class='awrc'>110.665M</td><td align="right" class='awrc'>10.4G</td><td align="right" class='awrc'>2114.83</td><td align="right" class='awrc'>17.234M</td><td align="right" class='awrc'>2.52ms</td><td align="right" class='awrc'>9.00ms</td></tr>
<tr><td scope="row" class='awrnc'>Log File</td><td align="right" class='awrnc'>1.3G</td><td align="right" class='awrnc'>2.39</td><td align="right" class='awrnc'>2.172M</td><td align="right" class='awrnc'>1.1G</td><td align="right" class='awrnc'>176.53</td><td align="right" class='awrnc'>1.805M</td><td align="right" class='awrnc'>22.22us</td><td align="right" class='awrnc'>1810.45ms</td></tr>
<tr><td scope="row" class='awrc'>Control File</td><td align="right" class='awrc'>64M</td><td align="right" class='awrc'>6.63</td><td align="right" class='awrc'>.103M</td><td align="right" class='awrc'>12M</td><td align="right" class='awrc'>1.21</td><td align="right" class='awrc'>.019M</td><td align="right" class='awrc'>3.69ms</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Temp File</td><td align="right" class='awrnc'>8M</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>.013M</td><td align="right" class='awrnc'>7M</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>.011M</td><td align="right" class='awrnc'>4.37ms</td><td align="right" class='awrnc'>21.22ms</td></tr>
<tr><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TOTAL:</td><td align="right" class='awrnc'>68.5G</td><td align="right" class='awrnc'>14173.11</td><td align="right" class='awrnc'>112.953M</td><td align="right" class='awrnc'>11.6G</td><td align="right" class='awrnc'>2292.90</td><td align="right" class='awrnc'>19.069M</td><td align="right" class='awrnc'>2.52ms</td><td align="right" class='awrnc'>1797.27ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8780"></a>
<h3 class="awr">IOStat by Function/Filetype summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> Ordered by (Data Read + Write) desc for each function</li>
</ul>
<table border="0" class="tdiff" summary="IOStat by Function/Filetype summary. . 'Data' columns suffixed with M,G,T,P are in multiples of 1024 other columns suffixed with K,M,G,T,P are in multiples of 1000. Ordered by (Data Read + Write) desc for each function"><tr><th class="awrbg" scope="col">Function/File Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs	 per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time	</th></tr>
<tr><td scope="row" class='awrc'>
Buffer Cache Reads
</td><td align="right" class='awrc'>67.1G</td><td align="right" class='awrc'>14161.38</td><td align="right" class='awrc'>110.664M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>2.8M</td><td align="right" class='awrc'>7.22ms</td></tr>
<tr><td scope="row" class='awrnc'>
 Buffer Cache Reads (Data File)
</td><td align="right" class='awrnc'>67.1G</td><td align="right" class='awrnc'>14161.23</td><td align="right" class='awrnc'>110.651M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>2.8M</td><td align="right" class='awrnc'>7.22ms</td></tr>
<tr><td scope="row" class='awrc'>
 Buffer Cache Reads (Temp File)
</td><td align="right" class='awrc'>8M</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>.013M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>95</td><td align="right" class='awrc'>6.46ms</td></tr>
<tr><td scope="row" class='awrnc'>
DBWR
</td><td align="right" class='awrnc'>3M</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>.005M</td><td align="right" class='awrnc'>10.4G</td><td align="right" class='awrnc'>2114.70</td><td align="right" class='awrnc'>17.229M</td><td align="right" class='awrnc'>132</td><td align="right" class='awrnc'>4.57ms</td></tr>
<tr><td scope="row" class='awrc'>
 DBWR (Data File)
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>10.4G</td><td align="right" class='awrc'>2114.64</td><td align="right" class='awrc'>17.229M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
 DBWR (Control File)
</td><td align="right" class='awrnc'>3M</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>.005M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>132</td><td align="right" class='awrnc'>4.57ms</td></tr>
<tr><td scope="row" class='awrc'>
 DBWR (Temp File)
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
Others
</td><td align="right" class='awrnc'>1.4G</td><td align="right" class='awrnc'>8.88</td><td align="right" class='awrnc'>2.275M</td><td align="right" class='awrnc'>104M</td><td align="right" class='awrnc'>1.55</td><td align="right" class='awrnc'>.168M</td><td align="right" class='awrnc'>3327</td><td align="right" class='awrnc'>5.18ms</td></tr>
<tr><td scope="row" class='awrc'>
 Others (Log File)
</td><td align="right" class='awrc'>1.3G</td><td align="right" class='awrc'>2.39</td><td align="right" class='awrc'>2.172M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>135</td><td align="right" class='awrc'>228.98us</td></tr>
<tr><td scope="row" class='awrnc'>
 Others (Data File)
</td><td align="right" class='awrnc'>1M</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>.002M</td><td align="right" class='awrnc'>91M</td><td align="right" class='awrnc'>0.26</td><td align="right" class='awrnc'>.147M</td><td align="right" class='awrnc'>80</td><td align="right" class='awrnc'>13.39ms</td></tr>
<tr><td scope="row" class='awrc'>
 Others (Control File)
</td><td align="right" class='awrc'>63M</td><td align="right" class='awrc'>6.41</td><td align="right" class='awrc'>.102M</td><td align="right" class='awrc'>11M</td><td align="right" class='awrc'>1.21</td><td align="right" class='awrc'>.018M</td><td align="right" class='awrc'>3112</td><td align="right" class='awrc'>5.19ms</td></tr>
<tr><td scope="row" class='awrnc'>
 Others (Temp File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>2M</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>.003M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
 LGWR (Log File)
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>1.1G</td><td align="right" class='awrc'>176.53</td><td align="right" class='awrc'>1.805M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
LGWR
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>1.1G</td><td align="right" class='awrnc'>176.53</td><td align="right" class='awrnc'>1.805M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
 Direct Writes (Data File)
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
Direct Writes
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
 Direct Reads (Data File)
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
Direct Reads
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
TOTAL:
</td><td align="right" class='awrc'>68.4G</td><td align="right" class='awrc'>14170.49</td><td align="right" class='awrc'>112.944M</td><td align="right" class='awrc'>11.6G</td><td align="right" class='awrc'>2292.81</td><td align="right" class='awrc'>19.201M</td><td align="right" class='awrc'>2.8M</td><td align="right" class='awrc'>7.21ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1700"></a>
<h3 class="awr">Tablespace IO Stats</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1800"></a>
<h3 class="awr">File IO Stats</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="25"></a>
<h2 class="awr">
Buffer Pool Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1900">Buffer Pool Statistics</a></li>
<li class="awr"><a class="awr" href="#1910">Checkpoint Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1900"></a>
<h3 class="awr">Buffer Pool Statistics</h3>
<ul>
<li class="awr"> Standard block size Pools  D: default,  K: keep,  R: recycle </li>
<li class="awr"> Default Pools for other block sizes: 2k, 4k, 8k, 16k, 32k</li>
</ul>
<table border="0" class="tdiff" summary="This table displays buffer pool statistics for different types of buffers, such as default, keep, and recycle. Statistics include number of buffers, % Pool hit, buffer gets, physical reads, physical writes, free buffer wait, etc."><tr><th class="awrbg" scope="col">P</th><th class="awrbg" scope="col">Number of Buffers</th><th class="awrbg" scope="col">Pool Hit%</th><th class="awrbg" scope="col">Buffer Gets</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">Free Buff Wait</th><th class="awrbg" scope="col">Writ Comp Wait</th><th class="awrbg" scope="col">Buffer Busy Waits</th></tr>
<tr><td scope="row" class='awrc'>D</td><td align="right" class='awrc'>917,088</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>11,690,857</td><td align="right" class='awrc'>8,852,880</td><td align="right" class='awrc'>1,377,159</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>639</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#25">Back to Buffer Pool Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1910"></a>
<h3 class="awr">Checkpoint Activity</h3>
<ul>
<li class="awr">Total Physical Writes:			  1,377,434</li>
</ul>
<table border="0" class="tdiff" summary="This table displays checkpoint activity statistics. Statistics include MTTR writes, log size writes, autotune checkpoint writes, etc."><tr><th class="awrbg" scope="col">MTTR Writes</th><th class="awrbg" scope="col">Log Size Writes</th><th class="awrbg" scope="col">Log Ckpt Writes</th><th class="awrbg" scope="col">Other Settings Writes</th><th class="awrbg" scope="col">Autotune Ckpt Writes</th><th class="awrbg" scope="col">Thread Ckpt Writes</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>11,906</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#25">Back to Buffer Pool Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="26"></a>
<h2 class="awr">
Advisory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#2000">Instance Recovery Stats</a></li>
<li class="awr"><a class="awr" href="#2010">MTTR Advisory</a></li>
<li class="awr"><a class="awr" href="#2100">Buffer Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#2400">PGA Aggr Summary</a></li>
<li class="awr"><a class="awr" href="#2600">PGA Aggr Target Stats</a></li>
<li class="awr"><a class="awr" href="#2700">PGA Aggr Target Histogram</a></li>
<li class="awr"><a class="awr" href="#2800">PGA Memory Advisory</a></li>
<li class="awr"><a class="awr" href="#5500">Shared Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#6900">SGA Target Advisory</a></li>
<li class="awr"><a class="awr" href="#7100">Streams Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#5700">Java Pool Advisory</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2000"></a>
<h3 class="awr">Instance Recovery Stats</h3>
<ul>
<li class="awr"> B: Begin Snapshot,  E: End Snapshot</li>
</ul>
<table border="0" class="tdiff" summary="This table displays instance recovery statistics at begin and end snapshot. It displays target MTTR, estimated MTTR, recovery estimated IO per second, redo blocks, target redo blocks, etc."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Targt MTTR  (s) </th><th class="awrbg" scope="col">Estd MTTR (s)</th><th class="awrbg" scope="col">Recovery Estd IOs</th><th class="awrbg" scope="col">Actual  RedoBlks</th><th class="awrbg" scope="col">Target	RedoBlks</th><th class="awrbg" scope="col">Log Sz  RedoBlks</th><th class="awrbg" scope="col">Log Ckpt Timeout RedoBlks</th><th class="awrbg" scope="col">Log Ckpt Interval RedoBlks</th><th class="awrbg" scope="col">Opt Log Sz(M)</th><th class="awrbg" scope="col">Estd RAC Avail Time</th></tr>
<tr><td scope="row" class='awrc'>B</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>50732</td><td align="right" class='awrc'>487514</td><td align="right" class='awrc'>4931199</td><td align="right" class='awrc'>16986915</td><td align="right" class='awrc'>4931199</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>18</td></tr>
<tr><td scope="row" class='awrnc'>E</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>71</td><td align="right" class='awrnc'>51346</td><td align="right" class='awrnc'>1055131</td><td align="right" class='awrnc'>5240593</td><td align="right" class='awrnc'>16986915</td><td align="right" class='awrnc'>5240593</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>30</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2010"></a>
<h3 class="awr">MTTR Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2100"></a>
<h3 class="awr">Buffer Pool Advisory</h3>
<ul>
<li class="awr"> Only rows with estimated physical reads &gt;0 are displayed </li>
<li class="awr"> ordered by Block Size, Buffers For Estimate</li>
</ul>
<table border="0" class="tdiff" summary="This table displays MTTR advisory. It displays size for estimate, dirty limit, estimated cache writes, estimated cache write factor, estimated total write, estimated total IO per second, etc."><tr><th class="awrbg" scope="col">P</th><th class="awrbg" scope="col">Size for Est (M)</th><th class="awrbg" scope="col">Size Factor</th><th class="awrbg" scope="col">Buffers (thousands)</th><th class="awrbg" scope="col">Est Phys Read Factor</th><th class="awrbg" scope="col">Estimated Phys Reads (thousands)</th><th class="awrbg" scope="col">Est Phys Read Time</th><th class="awrbg" scope="col">Est %DBtime for Rds</th></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>768</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>89</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>44,131</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>112609.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>1,536</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>179</td><td align="right" class='awrnc'>1.03</td><td align="right" class='awrnc'>43,916</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>112052.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>2,304</td><td align="right" class='awrc'>0.29</td><td align="right" class='awrc'>268</td><td align="right" class='awrc'>1.03</td><td align="right" class='awrc'>43,721</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>111547.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>3,072</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>358</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>43,539</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>111073.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>3,840</td><td align="right" class='awrc'>0.49</td><td align="right" class='awrc'>447</td><td align="right" class='awrc'>1.02</td><td align="right" class='awrc'>43,365</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>110623.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>4,608</td><td align="right" class='awrnc'>0.59</td><td align="right" class='awrnc'>537</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>43,197</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>110187.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>5,376</td><td align="right" class='awrc'>0.68</td><td align="right" class='awrc'>626</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>43,039</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>109776.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>6,144</td><td align="right" class='awrnc'>0.78</td><td align="right" class='awrnc'>716</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>42,883</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>109372.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>6,912</td><td align="right" class='awrc'>0.88</td><td align="right" class='awrc'>805</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>42,735</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>108988.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>7,680</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>895</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>42,595</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>108625.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>7,872</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>917</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>42,560</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>108534.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>8,448</td><td align="right" class='awrnc'>1.07</td><td align="right" class='awrnc'>984</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>42,459</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>108270.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>9,216</td><td align="right" class='awrc'>1.17</td><td align="right" class='awrc'>1,074</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>42,328</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>107930.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>9,984</td><td align="right" class='awrnc'>1.27</td><td align="right" class='awrnc'>1,163</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>42,206</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>107613.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>10,752</td><td align="right" class='awrc'>1.37</td><td align="right" class='awrc'>1,253</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>42,089</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>107310.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>11,520</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>1,342</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>41,976</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>107018.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>12,288</td><td align="right" class='awrc'>1.56</td><td align="right" class='awrc'>1,432</td><td align="right" class='awrc'>0.98</td><td align="right" class='awrc'>41,865</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>106730.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>13,056</td><td align="right" class='awrnc'>1.66</td><td align="right" class='awrnc'>1,521</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>41,761</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>106461.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>13,824</td><td align="right" class='awrc'>1.76</td><td align="right" class='awrc'>1,610</td><td align="right" class='awrc'>0.98</td><td align="right" class='awrc'>41,659</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>106194.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>14,592</td><td align="right" class='awrnc'>1.85</td><td align="right" class='awrnc'>1,700</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>41,560</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>105938.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>15,360</td><td align="right" class='awrc'>1.95</td><td align="right" class='awrc'>1,789</td><td align="right" class='awrc'>0.97</td><td align="right" class='awrc'>41,463</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>105686.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2400"></a>
<h3 class="awr">PGA Aggr Summary</h3>
<ul>
<li class="awr"> PGA cache hit % - percentage of W/A (WorkArea) data processed only in-memory</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate summary. It includes PGA cache hits, total wait time, average time for each class of buffer wait and WorkArea data processed."><tr><th class="awrbg" scope="col">PGA Cache Hit %</th><th class="awrbg" scope="col">W/A MB Processed</th><th class="awrbg" scope="col">Extra W/A MB Read/Written</th></tr>
<tr><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>312</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2600"></a>
<h3 class="awr">PGA Aggr Target Stats</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap (rows dentified with B or E contain data	 which is absolute i.e. not diffed over the interval) </li>
<li class="awr"> Auto PGA Target - actual workarea memory target </li>
<li class="awr"> W/A PGA Used	 - amount of memory used for all Workareas (manual + auto) </li>
<li class="awr"> %PGA W/A Mem	 - percentage of PGA memory allocated to workareas </li>
<li class="awr"> %Auto W/A Mem	 - percentage of workarea memory controlled by Auto Mem Mgmt </li>
<li class="awr"> %Man W/A Mem	 - percentage of workarea memory under manual control</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate target statistics for begin and end snapshot. Statistics include PGA aggregate target, auto PGA target, PGA memory allocation, etc."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">PGA Aggr Target(M)</th><th class="awrbg" scope="col">Auto PGA Target(M)</th><th class="awrbg" scope="col">PGA Mem  Alloc(M) </th><th class="awrbg" scope="col">W/A PGA  Used(M) </th><th class="awrbg" scope="col">%PGA W/A Mem</th><th class="awrbg" scope="col">%Auto W/A Mem</th><th class="awrbg" scope="col">%Man W/A Mem</th><th class="awrbg" scope="col">Global Mem Bound(K)</th></tr>
<tr><td scope="row" class='awrc'>B</td><td align="right" class='awrc'>3,215</td><td align="right" class='awrc'>1,535</td><td align="right" class='awrc'>1,843.95</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>329,210</td></tr>
<tr><td scope="row" class='awrnc'>E</td><td align="right" class='awrnc'>3,215</td><td align="right" class='awrnc'>1,799</td><td align="right" class='awrnc'>1,474.18</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>329,210</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2700"></a>
<h3 class="awr">PGA Aggr Target Histogram</h3>
<ul>
<li class="awr"> Optimal Executions are purely in-memory operations</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate target histograms."><tr><th class="awrbg" scope="col">  Low Optimal</th><th class="awrbg" scope="col">  High Optimal</th><th class="awrbg" scope="col">Total Execs</th><th class="awrbg" scope="col">Optimal Execs</th><th class="awrbg" scope="col">1-Pass Execs</th><th class="awrbg" scope="col">M-Pass Execs</th></tr>
<tr><td class='awrc'>2K</td><td class='awrc'>4K</td><td align="right" class='awrc'>565</td><td align="right" class='awrc'>565</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>64K</td><td class='awrnc'>128K</td><td align="right" class='awrnc'>83</td><td align="right" class='awrnc'>83</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>128K</td><td class='awrc'>256K</td><td align="right" class='awrc'>52</td><td align="right" class='awrc'>52</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>256K</td><td class='awrnc'>512K</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>512K</td><td class='awrc'>1024K</td><td align="right" class='awrc'>146</td><td align="right" class='awrc'>146</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>1M</td><td class='awrnc'>2M</td><td align="right" class='awrnc'>135</td><td align="right" class='awrnc'>135</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>2M</td><td class='awrc'>4M</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2800"></a>
<h3 class="awr">PGA Memory Advisory</h3>
<ul>
<li class="awr"> When using Auto Memory Mgmt, minimally choose a pga_aggregate_target value    where Estd PGA Overalloc Count is 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA memory advisory for different estimated PGA target sizes. It displays size factor, Workarea MB processed, estimated PGA cache hit, estimated extra Workarea MB read written to disk, etc., for each target size."><tr><th class="awrbg" scope="col">PGA Target Est (MB)</th><th class="awrbg" scope="col">Size Factr</th><th class="awrbg" scope="col">W/A MB Processed</th><th class="awrbg" scope="col">Estd Extra	 W/A MB Read/	Written to Disk </th><th class="awrbg" scope="col">Estd PGA Cache Hit %</th><th class="awrbg" scope="col">Estd PGA Overalloc Count</th><th class="awrbg" scope="col">Estd Time</th></tr>
<tr><td align="right" scope="row" class='awrc'>402</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>3,761.96</td><td align="right" class='awrc'>125.35</td><td align="right" class='awrc'>97.00</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>29,893,576</td></tr>
<tr><td align="right" scope="row" class='awrnc'>804</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>3,761.96</td><td align="right" class='awrnc'>125.35</td><td align="right" class='awrnc'>97.00</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>29,893,576</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,608</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>3,761.96</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>28,929,618</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,411</td><td align="right" class='awrnc'>0.75</td><td align="right" class='awrnc'>3,761.96</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>28,929,618</td></tr>
<tr><td align="right" scope="row" class='awrc'>3,215</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>3,761.96</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>28,929,618</td></tr>
<tr><td align="right" scope="row" class='awrnc'>3,858</td><td align="right" class='awrnc'>1.20</td><td align="right" class='awrnc'>3,761.96</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>28,929,618</td></tr>
<tr><td align="right" scope="row" class='awrc'>4,501</td><td align="right" class='awrc'>1.40</td><td align="right" class='awrc'>3,761.96</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>28,929,618</td></tr>
<tr><td align="right" scope="row" class='awrnc'>5,144</td><td align="right" class='awrnc'>1.60</td><td align="right" class='awrnc'>3,761.96</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>28,929,618</td></tr>
<tr><td align="right" scope="row" class='awrc'>5,787</td><td align="right" class='awrc'>1.80</td><td align="right" class='awrc'>3,761.96</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>28,929,618</td></tr>
<tr><td align="right" scope="row" class='awrnc'>6,430</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnc'>3,761.96</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>28,929,618</td></tr>
<tr><td align="right" scope="row" class='awrc'>9,645</td><td align="right" class='awrc'>3.00</td><td align="right" class='awrc'>3,761.96</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>28,929,618</td></tr>
<tr><td align="right" scope="row" class='awrnc'>12,860</td><td align="right" class='awrnc'>4.00</td><td align="right" class='awrnc'>3,761.96</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>28,929,618</td></tr>
<tr><td align="right" scope="row" class='awrc'>19,290</td><td align="right" class='awrc'>6.00</td><td align="right" class='awrc'>3,761.96</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>28,929,618</td></tr>
<tr><td align="right" scope="row" class='awrnc'>25,720</td><td align="right" class='awrnc'>8.00</td><td align="right" class='awrnc'>3,761.96</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>28,929,618</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5500"></a>
<h3 class="awr">Shared Pool Advisory</h3>
<ul>
<li class="awr"> SP: Shared Pool     Est LC: Estimated Library Cache   Factr: Factor </li>
<li class="awr"> Note there is often a 1:Many correlation between a single logical object    in the Library Cache, and the physical number of memory objects associated    with it.  Therefore comparing the number of Lib Cache objects (e.g. in     v$librarycache), with the number of Lib Cache Memory Objects is invalid.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared pool advisory. Size factor, estimated library cache size, estimated library cache memory object and other info is displayed for different shared pool sizes"><tr><th class="awrbg" scope="col">Shared Pool Size(M)</th><th class="awrbg" scope="col">SP Size Factr</th><th class="awrbg" scope="col">Est LC Size (M)</th><th class="awrbg" scope="col">Est LC Mem Obj</th><th class="awrbg" scope="col">Est LC Time Saved (s)</th><th class="awrbg" scope="col">Est LC Time Saved Factr</th><th class="awrbg" scope="col">Est LC Load Time (s)</th><th class="awrbg" scope="col">Est LC Load Time Factr</th><th class="awrbg" scope="col">Est LC Mem Obj Hits (K)</th></tr>
<tr><td align="right" scope="row" class='awrc'>1,472</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>137</td><td align="right" class='awrc'>5,892</td><td align="right" class='awrc'>7,479</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>103</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>1,038</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,504</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>169</td><td align="right" class='awrnc'>7,351</td><td align="right" class='awrnc'>7,480</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>102</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>1,038</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,536</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>201</td><td align="right" class='awrc'>8,551</td><td align="right" class='awrc'>7,480</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>102</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>1,038</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,568</td><td align="right" class='awrnc'>1.07</td><td align="right" class='awrnc'>209</td><td align="right" class='awrnc'>8,939</td><td align="right" class='awrnc'>7,480</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>102</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>1,038</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,600</td><td align="right" class='awrc'>1.09</td><td align="right" class='awrc'>209</td><td align="right" class='awrc'>8,939</td><td align="right" class='awrc'>7,480</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>102</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>1,038</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,632</td><td align="right" class='awrnc'>1.11</td><td align="right" class='awrnc'>209</td><td align="right" class='awrnc'>8,939</td><td align="right" class='awrnc'>7,480</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>102</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>1,038</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,664</td><td align="right" class='awrc'>1.13</td><td align="right" class='awrc'>209</td><td align="right" class='awrc'>8,939</td><td align="right" class='awrc'>7,480</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>102</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>1,038</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,696</td><td align="right" class='awrnc'>1.15</td><td align="right" class='awrnc'>209</td><td align="right" class='awrnc'>8,939</td><td align="right" class='awrnc'>7,480</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>102</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>1,038</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,728</td><td align="right" class='awrc'>1.17</td><td align="right" class='awrc'>209</td><td align="right" class='awrc'>8,939</td><td align="right" class='awrc'>7,480</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>102</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>1,038</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,760</td><td align="right" class='awrnc'>1.20</td><td align="right" class='awrnc'>209</td><td align="right" class='awrnc'>8,939</td><td align="right" class='awrnc'>7,480</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>102</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>1,038</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,792</td><td align="right" class='awrc'>1.22</td><td align="right" class='awrc'>209</td><td align="right" class='awrc'>8,939</td><td align="right" class='awrc'>7,480</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>102</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>1,038</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,952</td><td align="right" class='awrnc'>1.33</td><td align="right" class='awrnc'>209</td><td align="right" class='awrnc'>8,939</td><td align="right" class='awrnc'>7,480</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>102</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>1,038</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,112</td><td align="right" class='awrc'>1.43</td><td align="right" class='awrc'>209</td><td align="right" class='awrc'>8,939</td><td align="right" class='awrc'>7,480</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>102</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>1,038</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,272</td><td align="right" class='awrnc'>1.54</td><td align="right" class='awrnc'>209</td><td align="right" class='awrnc'>8,939</td><td align="right" class='awrnc'>7,480</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>102</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>1,038</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,432</td><td align="right" class='awrc'>1.65</td><td align="right" class='awrc'>209</td><td align="right" class='awrc'>8,939</td><td align="right" class='awrc'>7,480</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>102</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>1,038</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,592</td><td align="right" class='awrnc'>1.76</td><td align="right" class='awrnc'>209</td><td align="right" class='awrnc'>8,939</td><td align="right" class='awrnc'>7,480</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>102</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>1,038</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,752</td><td align="right" class='awrc'>1.87</td><td align="right" class='awrc'>209</td><td align="right" class='awrc'>8,939</td><td align="right" class='awrc'>7,480</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>102</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>1,038</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,912</td><td align="right" class='awrnc'>1.98</td><td align="right" class='awrnc'>209</td><td align="right" class='awrnc'>8,939</td><td align="right" class='awrnc'>7,480</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>102</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>1,038</td></tr>
<tr><td align="right" scope="row" class='awrc'>3,072</td><td align="right" class='awrc'>2.09</td><td align="right" class='awrc'>209</td><td align="right" class='awrc'>8,939</td><td align="right" class='awrc'>7,480</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>102</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>1,038</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6900"></a>
<h3 class="awr">SGA Target Advisory</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA target advisory for different SGA target sizes. It displays SGA size factor, estimated DB time and estimated physical reads for different SGA target sizes."><tr><th class="awrbg" scope="col">SGA Target Size (M)</th><th class="awrbg" scope="col">SGA Size Factor</th><th class="awrbg" scope="col">Est DB Time (s)</th><th class="awrbg" scope="col">Est Physical Reads</th></tr>
<tr><td align="right" scope="row" class='awrc'>3,624</td><td align="right" class='awrc'>0.38</td><td align="right" class='awrc'>159,539</td><td align="right" class='awrc'>43,913,804</td></tr>
<tr><td align="right" scope="row" class='awrnc'>4,832</td><td align="right" class='awrnc'>0.50</td><td align="right" class='awrnc'>158,571</td><td align="right" class='awrnc'>43,539,273</td></tr>
<tr><td align="right" scope="row" class='awrc'>6,040</td><td align="right" class='awrc'>0.63</td><td align="right" class='awrc'>158,119</td><td align="right" class='awrc'>43,364,775</td></tr>
<tr><td align="right" scope="row" class='awrnc'>7,248</td><td align="right" class='awrnc'>0.75</td><td align="right" class='awrnc'>157,276</td><td align="right" class='awrnc'>43,037,060</td></tr>
<tr><td align="right" scope="row" class='awrc'>8,456</td><td align="right" class='awrc'>0.88</td><td align="right" class='awrc'>156,480</td><td align="right" class='awrc'>42,734,882</td></tr>
<tr><td align="right" scope="row" class='awrnc'>9,664</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>156,028</td><td align="right" class='awrnc'>42,560,384</td></tr>
<tr><td align="right" scope="row" class='awrc'>10,872</td><td align="right" class='awrc'>1.13</td><td align="right" class='awrc'>155,419</td><td align="right" class='awrc'>42,326,302</td></tr>
<tr><td align="right" scope="row" class='awrnc'>12,080</td><td align="right" class='awrnc'>1.25</td><td align="right" class='awrnc'>154,811</td><td align="right" class='awrnc'>42,087,964</td></tr>
<tr><td align="right" scope="row" class='awrc'>13,288</td><td align="right" class='awrc'>1.38</td><td align="right" class='awrc'>154,515</td><td align="right" class='awrc'>41,977,307</td></tr>
<tr><td align="right" scope="row" class='awrnc'>14,496</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>153,953</td><td align="right" class='awrnc'>41,760,249</td></tr>
<tr><td align="right" scope="row" class='awrc'>15,704</td><td align="right" class='awrc'>1.63</td><td align="right" class='awrc'>153,438</td><td align="right" class='awrc'>41,560,215</td></tr>
<tr><td align="right" scope="row" class='awrnc'>16,912</td><td align="right" class='awrnc'>1.75</td><td align="right" class='awrnc'>153,173</td><td align="right" class='awrnc'>41,462,326</td></tr>
<tr><td align="right" scope="row" class='awrc'>18,120</td><td align="right" class='awrc'>1.88</td><td align="right" class='awrc'>153,173</td><td align="right" class='awrc'>41,462,326</td></tr>
<tr><td align="right" scope="row" class='awrnc'>19,328</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnc'>153,173</td><td align="right" class='awrnc'>41,462,326</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7100"></a>
<h3 class="awr">Streams Pool Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5700"></a>
<h3 class="awr">Java Pool Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="27"></a>
<h2 class="awr">
Wait Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#2300">Buffer Wait Statistics</a></li>
<li class="awr"><a class="awr" href="#3000">Enqueue Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2300"></a>
<h3 class="awr">Buffer Wait Statistics</h3>
<ul>
<li class="awr"> ordered by wait time desc, waits desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays buffer wait statistics. Statistics include waits, total wait time and average time for each class of buffer wait."><tr><th class="awrbg" scope="col">Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg Time (ms)</th></tr>
<tr><td scope="row" class='awrc'>file header block</td><td align="right" class='awrc'>587</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>109</td></tr>
<tr><td scope="row" class='awrnc'>undo header</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>data block</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>undo block</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#27">Back to Wait Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3000"></a>
<h3 class="awr">Enqueue Activity</h3>
<ul>
<li class="awr"> only enqueues with requests are shown	</li>
<li class="awr"> Enqueue stats gathered prior to 10g should not be compared with 10g data </li>
<li class="awr"> ordered by Wait Time desc, Waits desc, Requests desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays enqueue activity statistics. Requests, success gets, failed gets, waits, wait time and average wait time are displayed for each enqueue type."><tr><th class="awrbg" scope="col">Enqueue Type (Request Reason)</th><th class="awrbg" scope="col">Requests</th><th class="awrbg" scope="col">Succ Gets</th><th class="awrbg" scope="col">Failed Gets</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Wt Time (s)</th><th class="awrbg" scope="col">Av Wt Time(ms)</th></tr>
<tr><td scope="row" class='awrc'>HW-Segment High Water Mark</td>
<td align="right" class='awrc'>19,607</td><td align="right" class='awrc'>19,605</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>465</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>213.75</td></tr>
<tr><td scope="row" class='awrnc'>US-Undo Segment</td>
<td align="right" class='awrnc'>8,962</td><td align="right" class='awrnc'>8,958</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,306</td><td align="right" class='awrnc'>55</td><td align="right" class='awrnc'>42.22</td></tr>
<tr><td scope="row" class='awrc'>CR-Reuse Block Range (block range reuse ckpt)</td>
<td align="right" class='awrc'>8,074</td><td align="right" class='awrc'>8,074</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2,267</td><td align="right" class='awrc'>49</td><td align="right" class='awrc'>21.82</td></tr>
<tr><td scope="row" class='awrnc'>RO-Multiple Object Reuse (fast object reuse)</td>
<td align="right" class='awrnc'>580</td><td align="right" class='awrnc'>580</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>172</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>23.30</td></tr>
<tr><td scope="row" class='awrc'>PS-PX Process Reservation</td>
<td align="right" class='awrc'>671</td><td align="right" class='awrc'>671</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>112</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>10.13</td></tr>
<tr><td scope="row" class='awrnc'>CF-Controlfile Transaction</td>
<td align="right" class='awrnc'>1,758</td><td align="right" class='awrnc'>1,758</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>103</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>7.53</td></tr>
<tr><td scope="row" class='awrc'>TO-Temp Object</td>
<td align="right" class='awrc'>124</td><td align="right" class='awrc'>124</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>38</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.26</td></tr>
<tr><td scope="row" class='awrnc'>CT-Block Change Tracking (state)</td>
<td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.61</td></tr>
<tr><td scope="row" class='awrc'>FB-Format Block</td>
<td align="right" class='awrc'>18</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.50</td></tr>
<tr><td scope="row" class='awrnc'>TM-DML</td>
<td align="right" class='awrnc'>119,899</td><td align="right" class='awrnc'>119,900</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.14</td></tr>
<tr><td scope="row" class='awrc'>WF-AWR Flush</td>
<td align="right" class='awrc'>26</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>DW-In memory Dispenser</td>
<td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7.00</td></tr>
<tr><td scope="row" class='awrc'>RA-Real-Time ADDM Flood Control (RT ADDM flood control)</td>
<td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.00</td></tr>
<tr><td scope="row" class='awrnc'>TT-Tablespace</td>
<td align="right" class='awrnc'>10,648</td><td align="right" class='awrnc'>10,648</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.33</td></tr>
<tr><td scope="row" class='awrc'>DR-Distributed Recovery</td>
<td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.00</td></tr>
<tr><td scope="row" class='awrnc'>SW-Suspend Writes</td>
<td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.00</td></tr>
<tr><td scope="row" class='awrc'>TA-Instance Undo</td>
<td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.00</td></tr>
<tr><td scope="row" class='awrnc'>WT-AWR CDB-Wide Table Lock</td>
<td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.33</td></tr>
<tr><td scope="row" class='awrc'>FD-Flashback Database (Flashback logical operations)</td>
<td align="right" class='awrc'>18</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>MV-Online Datafile Move (datafile move)</td>
<td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.00</td></tr>
<tr><td scope="row" class='awrc'>RP-Resilver / Repair</td>
<td align="right" class='awrc'>18</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>TD-KTF map table enqueue (KTF dump entries)</td>
<td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.00</td></tr>
<tr><td scope="row" class='awrc'>JS-Job Scheduler (job run lock - synchronize)</td>
<td align="right" class='awrc'>3</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>TX-Transaction</td>
<td align="right" class='awrnc'>121,263</td><td align="right" class='awrnc'>121,262</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JG-Job Scheduler1</td>
<td align="right" class='awrc'>47,242</td><td align="right" class='awrc'>47,242</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JG-Job Scheduler1 (queue lock)</td>
<td align="right" class='awrnc'>47,242</td><td align="right" class='awrnc'>47,242</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JG-Job Scheduler1 (q mem clnup lck)</td>
<td align="right" class='awrc'>4,498</td><td align="right" class='awrc'>4,498</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IS-Instance State</td>
<td align="right" class='awrnc'>1,025</td><td align="right" class='awrnc'>1,025</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DD-ASM Local Disk Group</td>
<td align="right" class='awrc'>512</td><td align="right" class='awrc'>512</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SJ-KTSJ Slave Task Cancel (Slave Task Cancel)</td>
<td align="right" class='awrnc'>448</td><td align="right" class='awrnc'>450</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>BU-Buddy Instance Context (recovery set construct)</td>
<td align="right" class='awrc'>202</td><td align="right" class='awrc'>202</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>FP-File Object (global fob contention)</td>
<td align="right" class='awrnc'>157</td><td align="right" class='awrnc'>157</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CU-Cursor</td>
<td align="right" class='awrc'>150</td><td align="right" class='awrc'>150</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SE-Session Migration</td>
<td align="right" class='awrnc'>128</td><td align="right" class='awrnc'>128</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IT-In-Mem Temp Table Meta Creation</td>
<td align="right" class='awrc'>100</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DA-Instance DP Array (Slave Process Array)</td>
<td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CT-Block Change Tracking (CTWR process start/stop)</td>
<td align="right" class='awrc'>22</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>XL-ASM Extent Fault Lock (fault extent map)</td>
<td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MR-Media Recovery</td>
<td align="right" class='awrc'>19</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SH-Active Session History Flushing</td>
<td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PW-Buffer Cache PreWarm (flush prewarm buffers)</td>
<td align="right" class='awrc'>13</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>XR-Quiesce / Force Logging (database force logging)</td>
<td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TH-Threshold Chain (metric threshold evaluation)</td>
<td align="right" class='awrc'>10</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AF-Advisor Framework (task serialization)</td>
<td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQ-Sequence Cache</td>
<td align="right" class='awrc'>6</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AE-Edition Lock (lock)</td>
<td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PR-Process Startup</td>
<td align="right" class='awrc'>4</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PV-KSV slave startup (syncstart)</td>
<td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#27">Back to Wait Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="28"></a>
<h2 class="awr">
Undo Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#3300">Undo Segment Summary</a></li>
<li class="awr"><a class="awr" href="#3400">Undo Segment Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3300"></a>
<h3 class="awr">Undo Segment Summary</h3>
<ul>
<li class="awr"> Min/Max TR (mins) - Min and Max Tuned Retention (minutes) </li>
<li class="awr"> STO - Snapshot Too Old count,	OOS - Out of Space count </li>
<li class="awr"> Undo segment block stats: </li>
<li class="awr"> uS - unexpired Stolen,   uR - unexpired Released,   uU - unexpired reUsed </li>
<li class="awr"> eS - expired	Stolen,   eR - expired	 Released,   eU - expired   reUsed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays undo segment summary. It displays undo tablespace number, number of undo blocks, number of transactions, max query length, etc."><tr><th class="awrbg" scope="col">Undo TS#</th><th class="awrbg" scope="col">Num Undo Blocks (K)</th><th class="awrbg" scope="col">Number of Transactions</th><th class="awrbg" scope="col">Max Qry Len (s)</th><th class="awrbg" scope="col">Max Tx Concurcy</th><th class="awrbg" scope="col">Min/Max TR (mins)</th><th class="awrbg" scope="col">STO/ OOS</th><th class="awrbg" scope="col">	uS/uR/uU/    eS/eR/eU</th></tr>
<tr><td align="right" scope="row" class='awrc'>2</td><td align="right" class='awrc'>41.47</td><td align="right" class='awrc'>87,977</td><td align="right" class='awrc'>1,589</td><td align="right" class='awrc'>51</td><td class='awrc'>40.5/40.5</td><td class='awrc'>0/0</td><td class='awrc'>0/0/0/376/40712/0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#28">Back to Undo Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3400"></a>
<h3 class="awr">Undo Segment Stats</h3>
<ul>
<li class="awr"> Most recent 35 Undostat rows, ordered by Time desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the 35 most recent Undostat rows."><tr><th class="awrbg" scope="col">End Time</th><th class="awrbg" scope="col">Num Undo Blocks</th><th class="awrbg" scope="col">Number of Transactions</th><th class="awrbg" scope="col">Max Qry Len (s)</th><th class="awrbg" scope="col">Max Tx Concy</th><th class="awrbg" scope="col">Tun Ret (mins)</th><th class="awrbg" scope="col">STO/ OOS</th><th class="awrbg" scope="col">  uS/uR/uU/   eS/eR/eU</th></tr>
<tr><td scope="row" class='awrc'>12-Feb 09:09</td><td align="right" class='awrc'>41,473</td><td align="right" class='awrc'>87,977</td><td align="right" class='awrc'>1,589</td><td align="right" class='awrc'>51</td><td align="right" class='awrc'>41</td><td class='awrc'>0/0</td><td class='awrc'>0/0/0/376/40712/0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#28">Back to Undo Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="29"></a>
<h2 class="awr">
Latch Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#3500">Latch Activity</a></li>
<li class="awr"><a class="awr" href="#3600">Latch Sleep Breakdown</a></li>
<li class="awr"><a class="awr" href="#3700">Latch Miss Sources</a></li>
<li class="awr"><a class="awr" href="#7500">Mutex Sleep Summary</a></li>
<li class="awr"><a class="awr" href="#3800">Parent Latch Statistics</a></li>
<li class="awr"><a class="awr" href="#3900">Child Latch Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3500"></a>
<h3 class="awr">Latch Activity</h3>
<ul>
<li class="awr"> &quot;Get Requests&quot;, &quot;Pct Get Miss&quot; and &quot;Avg Slps/Miss&quot; are statistics for	 willing-to-wait latch get requests </li>
<li class="awr"> &quot;NoWait Requests&quot;, &quot;Pct NoWait Miss&quot; are for no-wait latch get requests </li>
<li class="awr"> &quot;Pct Misses&quot; for both should be very close to 0.0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch statistics. Get requests, % get miss, wait time, noWait requests are displayed for each latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Get Miss</th><th class="awrbg" scope="col">Avg Slps /Miss</th><th class="awrbg" scope="col">Wait Time (s)</th><th class="awrbg" scope="col">NoWait Requests</th><th class="awrbg" scope="col">Pct NoWait Miss</th></tr>
<tr><td scope="row" class='awrc'>AQ Background: interrupt command latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>AQ Coord jobx_kwsbgsgn latch</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AQ Message drive state object latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AQ Sharded master pool latch</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AQ deq hash table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AQ dequeue txn counter latch</td><td align="right" class='awrnc'>124</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM Keyed state latch</td><td align="right" class='awrc'>77</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM allocation</td><td align="right" class='awrnc'>37,374</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM connection state latch</td><td align="right" class='awrc'>5,864</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM db client latch</td><td align="right" class='awrnc'>3,090</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM map headers</td><td align="right" class='awrc'>1,368</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM map load waiting list</td><td align="right" class='awrnc'>367</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM map operation freelist</td><td align="right" class='awrc'>679</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM map operation hash table</td><td align="right" class='awrnc'>21,432,223</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM network background latch</td><td align="right" class='awrc'>5,607</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM network state latch</td><td align="right" class='awrnc'>353</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM remote client latch</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AWR Alerted Metric Element list</td><td align="right" class='awrnc'>7,093</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Autotask management</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Change Notification Hash table latch</td><td align="right" class='awrnc'>276</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Column stats entry latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Consistent RBA</td><td align="right" class='awrnc'>74,258</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.45</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DML lock allocation</td><td align="right" class='awrc'>241,224</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Event Group Locks</td><td align="right" class='awrnc'>118</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>FIB s.o chain latch</td><td align="right" class='awrc'>306</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>FOB consolidated s.o list latch</td><td align="right" class='awrnc'>306</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>File State Object Pool Parent Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCS logfile block</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCS logfile write queue</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Hang Manager wait event statistics</td><td align="right" class='awrnc'>41</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7,295</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>I/O Staticstics latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ILM Stats Stripe Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ILM Stats main anchor latch</td><td align="right" class='awrc'>428</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ILM access tracking extent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ILM activity tracking latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM Global dictionary latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM Global dictionary queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM Global dictionary rw latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM area sb latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM area scb latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM emb latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM seg hdr latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMFS defer write list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IMXT hash table latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC other latch</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC stats buffer allocation latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>In memory undo latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS Sh mem access</td><td align="right" class='awrnc'>2,267</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS broadcast add buf latch</td><td align="right" class='awrc'>2,284</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS broadcast drop buf latch</td><td align="right" class='awrnc'>2,284</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS broadcast load blnc latch</td><td align="right" class='awrc'>54</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS global state obj latch</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS mem alloc latch</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS queue access latch</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS queue state obj latch</td><td align="right" class='awrc'>95,198</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS slv state obj latch</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KCNIBR - invalid block range tree</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDCStatHash latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDFI Buffer Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDFI Hash Bucket Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDFI Hash Elem Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDMADO action list latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDMADO bll latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDMADO latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFC FX Hash Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFC Hash Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFCL LE Freelist</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS client latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS cluster latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS endpoint latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS node latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS process latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFK SGA Libload latch</td><td align="right" class='awrnc'>4,672</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFMD SGA</td><td align="right" class='awrc'>386</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KGNFS-NFS:SHM structure</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KGNFS-NFS:SVR LIST</td><td align="right" class='awrc'>208</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KJC message pool KGH calls</td><td align="right" class='awrnc'>262</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KJC message pool free list</td><td align="right" class='awrc'>1,632,542</td><td align="right" class='awrc'>0.49</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,770,856</td><td align="right" class='awrc'>0.56</td></tr>
<tr><td scope="row" class='awrnc'>KJC message pool pending avail list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KJCT flow control latch</td><td align="right" class='awrc'>9,921,053</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KMG MMAN ready and startup request latch</td><td align="right" class='awrnc'>207</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS OFS ctx level parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS OFS req layer parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS OFS sess layer parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS Receive and Send Queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS id table parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS ksfs_node latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFSD name cache parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSGL LS Segment latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSGL SGA anchor latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSIPC ASPC anchor latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSIPC SGA allocation parent latch</td><td align="right" class='awrc'>303</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSIPCGSN Hash Table latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSIPCGSN Namespace latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSK PDB IO STAT</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSRMA SGA anchor latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSRMF SGA anchor latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSWL SGA anchor latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSXR hang analysis phase 1 latch</td><td align="right" class='awrnc'>1,920</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KSXR hang analysis phase 2 latch</td><td align="right" class='awrc'>540</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSXR large replies</td><td align="right" class='awrnc'>26</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KTF sga latch</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>347</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KTILM latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KTU in-memory txn table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KTURMA ODPSCN latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KTURMA SGA allocation parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KWQMN job cache list latch</td><td align="right" class='awrnc'>88</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Latch for NonceHistory</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Locator state objects pool parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Lost write change tracking</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Lsod array latch</td><td align="right" class='awrnc'>159</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MGA asr alloc latch</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MGA heap latch</td><td align="right" class='awrnc'>149</td><td align="right" class='awrnc'>7.38</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MGA shared context latch</td><td align="right" class='awrc'>2,985</td><td align="right" class='awrc'>0.94</td><td align="right" class='awrc'>0.21</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MGA shared context root latch</td><td align="right" class='awrnc'>162</td><td align="right" class='awrnc'>21.60</td><td align="right" class='awrnc'>0.43</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MQL Tracking Latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Memory Management Latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>207</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue Message Subscriber #1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue Message Subscriber #2</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue Message Subscriber #3</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue Message Subscriber #4</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue Subscriber</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Message cache latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MinActiveScn Latch</td><td align="right" class='awrnc'>33</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Mutex</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Mutex Stats</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Nologging Standby SCN Time Map cache</td><td align="right" class='awrc'>205</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>OS process</td><td align="right" class='awrnc'>759</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>OS process allocation</td><td align="right" class='awrc'>1,326</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>OS process: request allocation</td><td align="right" class='awrnc'>76</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PDB Hash Table Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PDB LRU structure</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PL/SQL warning settings</td><td align="right" class='awrc'>112</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX hash array latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Parent latch for dependency tracking</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Parent latch for query hash table access</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Parent latch for segments scanning</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>QMT</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Real-time descriptor latch</td><td align="right" class='awrc'>19,037</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Report Request stats latch</td><td align="right" class='awrnc'>55</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Report Request struct latch</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Request holder compeltion list latch</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Retry Ht elm latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Retry bkt latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA Blackbox latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA IO buffer pool latch</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SGA Logging Bkt Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA Logging Log Latch</td><td align="right" class='awrnc'>11,287</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA blob parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA bucket locks</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA heap locks</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA pool locks</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SO private so latch</td><td align="right" class='awrc'>129</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SQL memory manager latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>207</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SQL memory manager workarea list latch</td><td align="right" class='awrc'>15,948</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SR Stats Stripe Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Sched IM Job latch</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Sched InMem Job Cache</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Shared B-Tree</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Streams Generic</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Subscriber Ht elm latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Testing</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Token Manager</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Txn Ht elm latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Txn bkt latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>UM object latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Undo Hint Latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>331</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>WCR: sync</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Write State Object Pool Parent Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>X$KSFQP</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>XDB NFS Security Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>XDB unused session pool</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>XDB used session pool</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>active checkpoint queue latch</td><td align="right" class='awrnc'>115,559</td><td align="right" class='awrnc'>0.61</td><td align="right" class='awrnc'>0.32</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>active service list</td><td align="right" class='awrc'>49,272</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,741</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>archive destination</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>begin backup scn array</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>buffer pool</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>business card</td><td align="right" class='awrc'>191</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cache buffer handles</td><td align="right" class='awrnc'>76</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cache buffers chains</td><td align="right" class='awrc'>50,553,379</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>15,031,788</td><td align="right" class='awrc'>0.13</td></tr>
<tr><td scope="row" class='awrnc'>cache buffers lru chain</td><td align="right" class='awrnc'>9,795,533</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>10,325,697</td><td align="right" class='awrnc'>0.44</td></tr>
<tr><td scope="row" class='awrc'>cache table scan latch</td><td align="right" class='awrc'>49</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>49</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>call allocation</td><td align="right" class='awrnc'>1,350</td><td align="right" class='awrnc'>0.37</td><td align="right" class='awrnc'>0.60</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>change notification client cache latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>channel handle pool latch</td><td align="right" class='awrnc'>266</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>channel operations parent latch</td><td align="right" class='awrc'>10,331</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>checkpoint queue latch</td><td align="right" class='awrnc'>4,521,434</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,378,023</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>client/application info</td><td align="right" class='awrc'>726</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>compile environment latch</td><td align="right" class='awrnc'>117</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>corrupted undo seg latch</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp handoff latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp pool latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp server hash latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp sga latch</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp srv type state latch</td><td align="right" class='awrnc'>622</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp srv type wait latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cr slave free list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cvmap freelist lock</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>deferred cleanup latch</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>dispatcher info</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dml lock allocation</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>done queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dtp latch</td><td align="right" class='awrnc'>75</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>dummy allocation</td><td align="right" class='awrc'>290</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>eighth spare latch - X parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>eleventh spare latch - children</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enqueue freelist latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>273,084</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>enqueue hash chains</td><td align="right" class='awrc'>1,101,123</td><td align="right" class='awrc'>0.54</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>567</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enqueues</td><td align="right" class='awrnc'>256</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>error message lists</td><td align="right" class='awrc'>473</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>fast space usage latch</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>fifteenth spare latch - children</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>file cache latch</td><td align="right" class='awrnc'>1,678</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>first Audit Vault latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>flash file access latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>flashback copy</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>fourteenth spare latch - children</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>fourth Audit Vault latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc element</td><td align="right" class='awrnc'>30,782,498</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1,733,359</td><td align="right" class='awrnc'>0.10</td></tr>
<tr><td scope="row" class='awrc'>gc xid list</td><td align="right" class='awrc'>126</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs commit scn state</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs nodemap pool</td><td align="right" class='awrc'>126,958</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs opaque info freelist</td><td align="right" class='awrnc'>150,731</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs partitioned table hash</td><td align="right" class='awrc'>18,975,172</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>826,019</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs pcm hashed value bucket hash</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs remaster request queue</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource freelist</td><td align="right" class='awrnc'>7,106,762</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3,904,635</td><td align="right" class='awrnc'>0.26</td></tr>
<tr><td scope="row" class='awrc'>gcs resource hash</td><td align="right" class='awrc'>30,899,983</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>10,231</td><td align="right" class='awrc'>3.34</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource scan list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs resource timerq list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource validate list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs shadows freelist</td><td align="right" class='awrc'>3,210,278</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges cached resource lists</td><td align="right" class='awrnc'>187,381</td><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>29,516</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ges deadlock list</td><td align="right" class='awrc'>180</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges domain table</td><td align="right" class='awrnc'>519,957</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges enqueue table freelist</td><td align="right" class='awrc'>312,115</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges group table</td><td align="right" class='awrnc'>548,457</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges process hash list</td><td align="right" class='awrc'>76,463</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.43</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges process parent latch</td><td align="right" class='awrnc'>1,063,947</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.73</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges process table freelist</td><td align="right" class='awrc'>76</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges remote lock freelist</td><td align="right" class='awrnc'>911</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges resource hash list</td><td align="right" class='awrc'>672,919</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4,582</td><td align="right" class='awrc'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>ges resource scan list</td><td align="right" class='awrnc'>1,478</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges resource table freelist</td><td align="right" class='awrc'>7,066</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges s-lock bitvec freelist</td><td align="right" class='awrnc'>1,404</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges timeout list</td><td align="right" class='awrc'>505</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>55</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges value block free list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>global KZLD latch for auth type mem in SGA</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>global tx hash mapping</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>granule from data transfer cache</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gws:Sharding global descriptor latch</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hash table Sql Plan Finding latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>168</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>hash table column usage latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8,667</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>hash table expression usage tracking latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>hash table sql contorl latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>heartbeat check</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>395</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>heartbeat structure management</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>310</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>imc buf hdl lat</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>imc cr clone buf</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>imc hash lat</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>imc sj lat</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>imc srchsp lat</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>imc-txn-wrk-lat</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>in-memory area latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>in-memory columnar segment hash table latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>in-memory columnar ts extent map chunk latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>in-memory global pool latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>internal temp table object number allocation latch</td><td align="right" class='awrc'>265</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>interrupt manipulation</td><td align="right" class='awrnc'>509</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>intra txn parallel recovery</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>io pool granule list</td><td align="right" class='awrnc'>55</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>io pool granule metadata list</td><td align="right" class='awrc'>114</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>job workq parent latch</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>33.33</td></tr>
<tr><td scope="row" class='awrc'>job_queue_processes free list latch</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>job_queue_processes parameter latch</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>jslv pdb context latch</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>k2q global data latch</td><td align="right" class='awrnc'>412</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>k2q lock allocation</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kKCN Cqn SGA</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kcb DW scan objtemp hash table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kcn buffer chains</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kdlx hb parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kgb parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kgnfs mount latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjbr roi instance map</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjci objects freelist latch</td><td align="right" class='awrc'>913</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjci process context latch</td><td align="right" class='awrnc'>873</td><td align="right" class='awrnc'>0.23</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>42,829</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>kjci process list latch</td><td align="right" class='awrc'>436</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>kjci request sequence latch</td><td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjcipctx state object freelist latch</td><td align="right" class='awrc'>74</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjoedcso state object freelist latch</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjoeq omni enqueue hash bucket latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjoer owner hash bucket</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjpm my inst data</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjsc Request obj freelist latch</td><td align="right" class='awrnc'>144</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsc Ring Buffer obj freelist latch</td><td align="right" class='awrc'>72</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjsc protect control request queue</td><td align="right" class='awrnc'>72</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6,236</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>kjsc protect warm up context</td><td align="right" class='awrc'>2,064</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjsca pkey obj freelist latch</td><td align="right" class='awrnc'>31</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsca protect pkey hash table bucket</td><td align="right" class='awrc'>8,993</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjsca protect service hash table bucket</td><td align="right" class='awrnc'>23</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsca service obj freelist latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjscpss state object freelist latch</td><td align="right" class='awrnc'>72</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kokc descriptor allocation latch</td><td align="right" class='awrc'>264</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kpoxft latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>krso process</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksbxic instance latch</td><td align="right" class='awrnc'>55</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksevn object root latch</td><td align="right" class='awrc'>207</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksfv messages</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksi resource reuse count</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksim group membership cache</td><td align="right" class='awrnc'>1,133</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksim membership request latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>364</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ksns object latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kss move lock</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksuosstats global area</td><td align="right" class='awrnc'>67</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>238</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ksutcpistat latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksv allocation latch</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksv class latch</td><td align="right" class='awrc'>16,577</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksv instance latch</td><td align="right" class='awrnc'>64</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksv msg queue latch</td><td align="right" class='awrc'>470</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>469</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ksxp shared latch</td><td align="right" class='awrnc'>76</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksxp so latch</td><td align="right" class='awrc'>76</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksz_so allocation latch</td><td align="right" class='awrnc'>76</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktfbn latch</td><td align="right" class='awrc'>131</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg jrnls</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg lookuptable level 1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg lookuptable level 2</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg space</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg stages</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg worklink</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm global data</td><td align="right" class='awrnc'>183</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm prv jrnls</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktmpj HT ls</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwqbsn:qsga</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwslbmdl: metadata latch</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwslbql: queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwslbutl: uncommitted txn latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwsptQcachLt: queue cache latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwsptTrncTsksLt: trunc task latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwsptjobAdPtLt: AdPt list latch</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwsslLat: skiplist latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kxfxscanrate_latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lgwr LWN SCN</td><td align="right" class='awrnc'>77,998</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>list of block allocation</td><td align="right" class='awrc'>96</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>loader state object freelist</td><td align="right" class='awrnc'>140</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lob segment dispenser latch</td><td align="right" class='awrc'>41</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lob segment hash table latch</td><td align="right" class='awrnc'>60</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lob segment query latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lock DBA buffer during media recovery</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log write info</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>78,465</td><td align="right" class='awrc'>3.88</td></tr>
<tr><td scope="row" class='awrnc'>log write worker phase</td><td align="right" class='awrnc'>24,731</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>logical standby cache</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>logminer context allocation</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>logminer local</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>logminer work area</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>longop free list parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>managed standby</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>message bitmap latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>message pool operations parent latch</td><td align="right" class='awrnc'>3,912</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>messages</td><td align="right" class='awrc'>595,652</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>msg queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>multiblock read objects</td><td align="right" class='awrc'>1,354,847</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service memory objects</td><td align="right" class='awrnc'>199</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service namespace bucket</td><td align="right" class='awrc'>3,833</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service pending queue</td><td align="right" class='awrnc'>124</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service request</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service request queue</td><td align="right" class='awrnc'>6,500</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ncodef allocation latch</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ninth spare latch - X parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>object queue header freelist</td><td align="right" class='awrc'>4,818</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>object queue header operation</td><td align="right" class='awrnc'>21,989,990</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>209,863</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>object queue memory</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>object stats modification</td><td align="right" class='awrnc'>57</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>parallel query alloc buffer</td><td align="right" class='awrc'>1,586</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>380</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>parallel query stats</td><td align="right" class='awrnc'>356</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>parallel txn reco latch</td><td align="right" class='awrc'>286</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>parameter table management</td><td align="right" class='awrnc'>1,279</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pdb enqueue hash chains</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>peshm</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pesom_free_list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pesom_hash_node</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pkey global statistics</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pmon dead latch</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>post/wait queue</td><td align="right" class='awrc'>38,421</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>39,437</td><td align="right" class='awrc'>0.11</td></tr>
<tr><td scope="row" class='awrnc'>process allocation</td><td align="right" class='awrnc'>3,129</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>process group creation</td><td align="right" class='awrc'>76</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>process memory detail</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>process pkey statistics list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>process queue</td><td align="right" class='awrnc'>690</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>process queue reference</td><td align="right" class='awrc'>21,720</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2,455</td><td align="right" class='awrc'>0.57</td></tr>
<tr><td scope="row" class='awrnc'>qmn task queue latch</td><td align="right" class='awrnc'>88</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>quarantine object</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>query server freelists</td><td align="right" class='awrnc'>871</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>query server process</td><td align="right" class='awrc'>472</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>queued dump request</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>queuing load statistics</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>read-moslty lock queue under pkey</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>recovery domain hash bucket</td><td align="right" class='awrc'>383</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>redo allocation</td><td align="right" class='awrnc'>271,533</td><td align="right" class='awrnc'>1.33</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,548,667</td><td align="right" class='awrnc'>1.09</td></tr>
<tr><td scope="row" class='awrc'>redo copy</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,554,323</td><td align="right" class='awrc'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>redo transport task</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>redo writing</td><td align="right" class='awrc'>368,616</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>remote tool request latch</td><td align="right" class='awrnc'>177</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr group change latch</td><td align="right" class='awrc'>110</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:active threads</td><td align="right" class='awrnc'>302</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>resmgr:actses change group</td><td align="right" class='awrc'>115</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:actses change state</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:free threads list</td><td align="right" class='awrc'>289</td><td align="right" class='awrc'>0.35</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:plan CPU method</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:plan change alloc latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:plan change latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:resource group CPU method</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:schema config</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>resmgr:session queuing</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resumable state object</td><td align="right" class='awrnc'>112</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>row cache objects</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>rt rmv count latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>310</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>second Audit Vault latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>segmented array pool</td><td align="right" class='awrnc'>306</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sequence cache</td><td align="right" class='awrc'>203</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>service drain list</td><td align="right" class='awrnc'>619</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session allocation</td><td align="right" class='awrc'>120,341</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>119,985</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>session idle bit</td><td align="right" class='awrnc'>242,120</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>session state list latch</td><td align="right" class='awrnc'>355</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session statistics</td><td align="right" class='awrc'>290</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>session switching</td><td align="right" class='awrnc'>82</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session timer</td><td align="right" class='awrc'>207</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>seventh spare latch - X parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sga hash table parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shard latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>shardgroup list latch</td><td align="right" class='awrc'>179</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shared pool</td><td align="right" class='awrnc'>47,063</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>69</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>shared pool sim alloc</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shared pool simulator</td><td align="right" class='awrnc'>1,455</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>shared server configuration</td><td align="right" class='awrc'>207</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>sim partition latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>simulator hash latch</td><td align="right" class='awrc'>2,444,745</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>simulator lru latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,327,684</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>sixth spare latch - X parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>sort extent pool</td><td align="right" class='awrnc'>553</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>space background task latch</td><td align="right" class='awrc'>2,312</td><td align="right" class='awrc'>62.02</td><td align="right" class='awrc'>0.92</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>403</td><td align="right" class='awrc'>3.72</td></tr>
<tr><td scope="row" class='awrnc'>state object free list</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>statistics aggregation</td><td align="right" class='awrc'>145</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>subscriber Ht bkt</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>tablespace key chain</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>temp lob duration state obj allocation</td><td align="right" class='awrnc'>59</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>temporary table state object allocation</td><td align="right" class='awrc'>82</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>tenth spare latch - X parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test excl. parent l0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test excl. parent2 l0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test excl. parent2 lmid cln</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test mixed exclusive</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test mode exclusive</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test open exclusive</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test pdb exclusive</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test shared parent2 lmid</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>thirteenth spare latch - children</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>threshold alerts latch</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>transaction allocation</td><td align="right" class='awrc'>972</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twelfth spare latch - children</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twenty-fifth spare latch - S par</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twenty-first spare latch - S par</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twenty-fourth spare latch - S par</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twenty-second spare latch - S par</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twenty-third spare latch - S par</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>undo global data</td><td align="right" class='awrnc'>801,519</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>virtual circuit buffers</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>virtual circuit holder</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>virtual circuit queues</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3600"></a>
<h3 class="awr">Latch Sleep Breakdown</h3>
<ul>
<li class="awr"> ordered by misses desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch sleep statistics. Get requests, misses, sleeps, spin gets are displayed for each latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Misses</th><th class="awrbg" scope="col">Sleeps</th><th class="awrbg" scope="col">Spin Gets</th></tr>
<tr><td scope="row" class='awrc'>cache buffers lru chain</td><td align="right" class='awrc'>9,795,533</td><td align="right" class='awrc'>24,190</td><td align="right" class='awrc'>672</td><td align="right" class='awrc'>23,546</td></tr>
<tr><td scope="row" class='awrnc'>gc element</td><td align="right" class='awrnc'>30,782,498</td><td align="right" class='awrnc'>16,880</td><td align="right" class='awrnc'>1,450</td><td align="right" class='awrnc'>15,535</td></tr>
<tr><td scope="row" class='awrc'>gcs resource freelist</td><td align="right" class='awrc'>7,106,762</td><td align="right" class='awrc'>12,451</td><td align="right" class='awrc'>1,673</td><td align="right" class='awrc'>10,900</td></tr>
<tr><td scope="row" class='awrnc'>KJCT flow control latch</td><td align="right" class='awrnc'>9,921,053</td><td align="right" class='awrnc'>8,870</td><td align="right" class='awrnc'>1,250</td><td align="right" class='awrnc'>7,700</td></tr>
<tr><td scope="row" class='awrc'>KJC message pool free list</td><td align="right" class='awrc'>1,632,542</td><td align="right" class='awrc'>7,948</td><td align="right" class='awrc'>1,074</td><td align="right" class='awrc'>6,951</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource hash</td><td align="right" class='awrnc'>30,899,983</td><td align="right" class='awrnc'>6,656</td><td align="right" class='awrnc'>1,651</td><td align="right" class='awrnc'>5,116</td></tr>
<tr><td scope="row" class='awrc'>enqueue hash chains</td><td align="right" class='awrc'>1,101,123</td><td align="right" class='awrc'>5,933</td><td align="right" class='awrc'>593</td><td align="right" class='awrc'>5,383</td></tr>
<tr><td scope="row" class='awrnc'>redo allocation</td><td align="right" class='awrnc'>271,533</td><td align="right" class='awrnc'>3,618</td><td align="right" class='awrnc'>735</td><td align="right" class='awrnc'>2,925</td></tr>
<tr><td scope="row" class='awrc'>multiblock read objects</td><td align="right" class='awrc'>1,354,847</td><td align="right" class='awrc'>2,065</td><td align="right" class='awrc'>263</td><td align="right" class='awrc'>1,822</td></tr>
<tr><td scope="row" class='awrnc'>space background task latch</td><td align="right" class='awrnc'>2,312</td><td align="right" class='awrnc'>1,434</td><td align="right" class='awrnc'>1,317</td><td align="right" class='awrnc'>209</td></tr>
<tr><td scope="row" class='awrc'>cache buffers chains</td><td align="right" class='awrc'>50,553,379</td><td align="right" class='awrc'>1,193</td><td align="right" class='awrc'>168</td><td align="right" class='awrc'>1,037</td></tr>
<tr><td scope="row" class='awrnc'>object queue header operation</td><td align="right" class='awrnc'>21,989,990</td><td align="right" class='awrnc'>910</td><td align="right" class='awrnc'>93</td><td align="right" class='awrnc'>829</td></tr>
<tr><td scope="row" class='awrc'>messages</td><td align="right" class='awrc'>595,652</td><td align="right" class='awrc'>909</td><td align="right" class='awrc'>65</td><td align="right" class='awrc'>845</td></tr>
<tr><td scope="row" class='awrnc'>active checkpoint queue latch</td><td align="right" class='awrnc'>115,559</td><td align="right" class='awrnc'>702</td><td align="right" class='awrnc'>224</td><td align="right" class='awrnc'>479</td></tr>
<tr><td scope="row" class='awrc'>ASM map operation hash table</td><td align="right" class='awrc'>21,432,223</td><td align="right" class='awrc'>643</td><td align="right" class='awrc'>137</td><td align="right" class='awrc'>514</td></tr>
<tr><td scope="row" class='awrnc'>ges resource hash list</td><td align="right" class='awrnc'>672,919</td><td align="right" class='awrnc'>485</td><td align="right" class='awrnc'>114</td><td align="right" class='awrnc'>373</td></tr>
<tr><td scope="row" class='awrc'>undo global data</td><td align="right" class='awrc'>801,519</td><td align="right" class='awrc'>402</td><td align="right" class='awrc'>63</td><td align="right" class='awrc'>341</td></tr>
<tr><td scope="row" class='awrnc'>ges cached resource lists</td><td align="right" class='awrnc'>187,381</td><td align="right" class='awrnc'>294</td><td align="right" class='awrnc'>26</td><td align="right" class='awrnc'>268</td></tr>
<tr><td scope="row" class='awrc'>redo writing</td><td align="right" class='awrc'>368,616</td><td align="right" class='awrc'>212</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>174</td></tr>
<tr><td scope="row" class='awrnc'>ges enqueue table freelist</td><td align="right" class='awrnc'>312,115</td><td align="right" class='awrnc'>156</td><td align="right" class='awrnc'>31</td><td align="right" class='awrnc'>128</td></tr>
<tr><td scope="row" class='awrc'>checkpoint queue latch</td><td align="right" class='awrc'>4,521,434</td><td align="right" class='awrc'>132</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>106</td></tr>
<tr><td scope="row" class='awrnc'>lgwr LWN SCN</td><td align="right" class='awrnc'>77,998</td><td align="right" class='awrnc'>83</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>67</td></tr>
<tr><td scope="row" class='awrc'>shared pool</td><td align="right" class='awrc'>47,063</td><td align="right" class='awrc'>52</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>48</td></tr>
<tr><td scope="row" class='awrnc'>MGA shared context root latch</td><td align="right" class='awrnc'>162</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>21</td></tr>
<tr><td scope="row" class='awrc'>Consistent RBA</td><td align="right" class='awrc'>74,258</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>18</td></tr>
<tr><td scope="row" class='awrnc'>MGA shared context latch</td><td align="right" class='awrnc'>2,985</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>22</td></tr>
<tr><td scope="row" class='awrc'>ges process parent latch</td><td align="right" class='awrc'>1,063,947</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>6</td></tr>
<tr><td scope="row" class='awrnc'>MGA heap latch</td><td align="right" class='awrnc'>149</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>10</td></tr>
<tr><td scope="row" class='awrc'>ges process hash list</td><td align="right" class='awrc'>76,463</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>4</td></tr>
<tr><td scope="row" class='awrnc'>call allocation</td><td align="right" class='awrnc'>1,350</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>2</td></tr>
<tr><td scope="row" class='awrc'>simulator hash latch</td><td align="right" class='awrc'>2,444,745</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>4</td></tr>
<tr><td scope="row" class='awrnc'>ksv class latch</td><td align="right" class='awrnc'>16,577</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td></tr>
<tr><td scope="row" class='awrc'>session allocation</td><td align="right" class='awrc'>120,341</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3700"></a>
<h3 class="awr">Latch Miss Sources</h3>
<ul>
<li class="awr"> only latches with sleeps are shown </li>
<li class="awr"> ordered by name, sleeps desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch miss sources. Place where latch was requested, no-wait misses, sleeps, waiter sleeps are displayed for each missed latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Where</th><th class="awrbg" scope="col">NoWait Misses</th><th class="awrbg" scope="col">   Sleeps</th><th class="awrbg" scope="col">Waiter Sleeps</th></tr>
<tr><td class='awrc'>ASM map operation hash table</td><td class='awrc'>kffmTranslate</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>80</td><td align="right" class='awrc'>62</td></tr>
<tr><td class='awrnc'>ASM map operation hash table</td><td class='awrnc'>kffmDoDone_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>56</td><td align="right" class='awrnc'>72</td></tr>
<tr><td class='awrc'>ASM map operation hash table</td><td class='awrc'>kffmLoad</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>7</td></tr>
<tr><td class='awrnc'>KJC message pool free list</td><td class='awrnc'>kjcsmpav: allocate a msg buffer</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>730</td><td align="right" class='awrnc'>1,071</td></tr>
<tr><td class='awrc'>KJC message pool free list</td><td class='awrc'>kjcspfmbq: free vector of msg buffers</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>344</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjctcsnd: send normal message</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>688</td><td align="right" class='awrnc'>837</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjcts_sedeqv3: dequeue a vector of msgs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>208</td><td align="right" class='awrc'>24</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjctr_updatetkt: update ticket info</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>137</td><td align="right" class='awrnc'>112</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjcts_sqenq: queue a message</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>102</td><td align="right" class='awrc'>144</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjctr_releasetkt: change ticket allocation</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>88</td><td align="right" class='awrnc'>51</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjcts_sqenq2: queue a message</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>67</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjcts_adjtkt: adjust send tickets</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>15</td></tr>
<tr><td class='awrc'>MGA shared context latch</td><td class='awrc'>ksm_mga_detach_whr2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>MGA shared context latch</td><td class='awrnc'>ksm_mga_attach_whr2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>MGA shared context root latch</td><td class='awrc'>ksm_mga_detach_whr1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>15</td></tr>
<tr><td class='awrnc'>active checkpoint queue latch</td><td class='awrnc'>kcbbacq: scan active checkpoints</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>172</td><td align="right" class='awrnc'>223</td></tr>
<tr><td class='awrc'>active checkpoint queue latch</td><td class='awrc'>kcbk_add_rbr_ckpt: Add rbr ckpt 3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>43</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>active checkpoint queue latch</td><td class='awrnc'>kcbkcpa: Checkpoint post-processing 2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>active checkpoint queue latch</td><td class='awrc'>kcbk_add_rbr_ckpt: Add rbr ckpt 1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbzibmlt: multi-block read: nowait</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgtcr: slow path excl</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>20</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbzgb: scan from tail nowait</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgtcr: convert latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgcur: slow path</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgtcr: convert latch 4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgcur: fast path excl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>6</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbchg: aux pin</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>3</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbchg: change complete</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbzibmlt: finish free bufs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>16</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbbic1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>3</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbbxsv</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>6</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgtcr: fast path pin</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>54</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbnew: new latch again</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbnlc</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>5</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbrls: fast pin release</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>31</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbzib: finish processing buffer</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>9</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbchg: rollback</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbzacrb: convert latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kclcls_3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kclpdcl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kclrwrite_3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers lru chain</td><td class='awrnc'>kcbzgb_2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>525</td><td align="right" class='awrnc'>332</td></tr>
<tr><td class='awrc'>cache buffers lru chain</td><td class='awrc'>kcbzgws</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>143</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers lru chain</td><td class='awrnc'>kcbbwlru</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>76</td></tr>
<tr><td class='awrc'>cache buffers lru chain</td><td class='awrc'>kcbbxsv: move to being written</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>call allocation</td><td class='awrnc'>ksuxds</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>call allocation</td><td class='awrc'>ksuprc</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>checkpoint queue latch</td><td class='awrnc'>kcbklbc_cql</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>26</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclnfndnewm</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>898</td><td align="right" class='awrc'>463</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclulb</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>296</td><td align="right" class='awrnc'>531</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclplz</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>72</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>KCLUNLNK</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>61</td><td align="right" class='awrnc'>342</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclrwrite</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>34</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclfwrite1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>38</td><td align="right" class='awrnc'>50</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclplz_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>5</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclrwrite_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclnfndx</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>23</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclantilock_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclnfnds</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>18</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclbla</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclpdcl</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource freelist</td><td class='awrnc'>kjbralc: check freelist nowait</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,123</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs resource freelist</td><td class='awrc'>kjbralc add resource</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>252</td><td align="right" class='awrc'>1,483</td></tr>
<tr><td class='awrnc'>gcs resource freelist</td><td class='awrnc'>kjbrfr_bg2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>177</td><td align="right" class='awrnc'>150</td></tr>
<tr><td class='awrc'>gcs resource freelist</td><td class='awrc'>kjbrralc: reserve allocation</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>121</td><td align="right" class='awrc'>40</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbcropen</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>751</td><td align="right" class='awrnc'>592</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kclfwrite1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>266</td><td align="right" class='awrc'>61</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbopen</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>235</td><td align="right" class='awrnc'>83</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbmpopen</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>86</td><td align="right" class='awrc'>144</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjblpast</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>84</td><td align="right" class='awrnc'>155</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbclose_remaster</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>69</td><td align="right" class='awrc'>237</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbmpclose</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>120</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjblocalobj_nolock</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>52</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kclrwrite</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>82</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbassume</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>19</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbrdowncvt</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>2</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbmpflushpi</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>29</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kclpdc</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>56</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbralc: reacquire</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbrprmexpack</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>4</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kclgrantlk_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbconvert</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjblpgorm: clear anti-lock</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>4</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjblpsch: check cache reuse</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>14</td></tr>
<tr><td class='awrc'>ges cached resource lists</td><td class='awrc'>kjrm2c: move resource to cache</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>26</td></tr>
<tr><td class='awrnc'>ges enqueue table freelist</td><td class='awrnc'>kjlalc: lock allocation</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>15</td></tr>
<tr><td class='awrc'>ges enqueue table freelist</td><td class='awrc'>kjlfr: remove lock from parent object</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>16</td></tr>
<tr><td class='awrnc'>ges process hash list</td><td class='awrnc'>kjakiqa: set inquiry response</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>ges process parent latch</td><td class='awrc'>kjata_fg</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>ges resource hash list</td><td class='awrnc'>kjlrlr: remove lock from resource queue</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>39</td></tr>
<tr><td class='awrc'>ges resource hash list</td><td class='awrc'>kjrmas1: lookup master node</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>38</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>ges resource hash list</td><td class='awrnc'>kjucvl: lock convert request</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>4</td></tr>
<tr><td class='awrc'>ges resource hash list</td><td class='awrc'>kjakcai: search for resp by resname</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>7</td></tr>
<tr><td class='awrnc'>ges resource hash list</td><td class='awrnc'>kjlmfnd: search for lockp by rename and inst id</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>2</td></tr>
<tr><td class='awrc'>ges resource hash list</td><td class='awrc'>kjcvscn: remove from scan queue</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>ges resource hash list</td><td class='awrnc'>kjrref: find matched resource</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>62</td></tr>
<tr><td class='awrc'>ksv class latch</td><td class='awrc'>ksvclsl: checkpool</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>messages</td><td class='awrnc'>ksarcv</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>33</td><td align="right" class='awrnc'>19</td></tr>
<tr><td class='awrc'>messages</td><td class='awrc'>ksarcv: after wait</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>22</td></tr>
<tr><td class='awrnc'>messages</td><td class='awrnc'>ksaamb: after wakeup</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>24</td></tr>
<tr><td class='awrc'>mostly latch-free SCN</td><td class='awrc'>kcs024</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>mostly latch-free SCN</td><td class='awrnc'>kcs01</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>13</td></tr>
<tr><td class='awrc'>mostly latch-free SCN</td><td class='awrc'>kcslcu3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>17</td></tr>
<tr><td class='awrnc'>mostly latch-free SCN</td><td class='awrnc'>kcsnew_scn_rba</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>multiblock read objects</td><td class='awrc'>kcbzibmlt: normal mbr free</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>150</td><td align="right" class='awrc'>128</td></tr>
<tr><td class='awrnc'>multiblock read objects</td><td class='awrnc'>kcbzibmlt</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>113</td><td align="right" class='awrnc'>135</td></tr>
<tr><td class='awrc'>object queue header operation</td><td class='awrc'>kcbo_unlink_q</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>70</td><td align="right" class='awrc'>34</td></tr>
<tr><td class='awrnc'>object queue header operation</td><td class='awrnc'>kcbo_link_q</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>37</td></tr>
<tr><td class='awrc'>object queue header operation</td><td class='awrc'>kcbo_switch_cq</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>6</td></tr>
<tr><td class='awrnc'>object queue header operation</td><td class='awrnc'>kcbo_switch_mq_bg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>8</td></tr>
<tr><td class='awrc'>object queue header operation</td><td class='awrc'>kcbo_switch_q_bg</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>8</td></tr>
<tr><td class='awrnc'>redo allocation</td><td class='awrnc'>kcrfw_redo_gen: redo allocation 1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>655</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>redo allocation</td><td class='awrc'>kcrfw_redo_write: before write</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>31</td><td align="right" class='awrc'>142</td></tr>
<tr><td class='awrnc'>redo allocation</td><td class='awrnc'>kcrfw_redo_gen: redo allocation 3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>517</td></tr>
<tr><td class='awrc'>redo allocation</td><td class='awrc'>kcrfw_post: more space</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>76</td></tr>
<tr><td class='awrnc'>redo allocation</td><td class='awrnc'>kcrfw_redo_gen: redo allocation 2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>redo writing</td><td class='awrc'>kcrfwcr</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>24</td></tr>
<tr><td class='awrnc'>redo writing</td><td class='awrnc'>kcrfw_post: rba scn pair</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>redo writing</td><td class='awrc'>kcrfw_cal_target_rba</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>11</td></tr>
<tr><td class='awrnc'>redo writing</td><td class='awrnc'>kcrfw_post: after write</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>3</td></tr>
<tr><td class='awrc'>session allocation</td><td class='awrc'>ksucri_int : SSO</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>simulator hash latch</td><td class='awrnc'>kcbsacc: insert dba</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>space background task latch</td><td class='awrc'>ktsj_grab_task</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,083</td><td align="right" class='awrc'>1,272</td></tr>
<tr><td class='awrnc'>space background task latch</td><td class='awrnc'>ktsj_detach_task</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>135</td><td align="right" class='awrnc'>45</td></tr>
<tr><td class='awrc'>space background task latch</td><td class='awrc'>ktsj_smco_purgeexpired</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>94</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>space background task latch</td><td class='awrnc'>ktsj_smco_movetasks</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>space background task latch</td><td class='awrc'>ktsjCreateTask</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>undo global data</td><td class='awrnc'>ktusm_stealext_2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>26</td></tr>
<tr><td class='awrc'>undo global data</td><td class='awrc'>ktusmupst: KSLBEGIN</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>9</td></tr>
<tr><td class='awrnc'>undo global data</td><td class='awrnc'>ktudba: KSLBEGIN</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>22</td></tr>
<tr><td class='awrc'>undo global data</td><td class='awrc'>ktusm_stealext: KSLBEGIN</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>ksqcmi: if lk mode not requested</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>197</td><td align="right" class='awrnc'>48</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>ksqcmi: if lk mode requested</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>137</td><td align="right" class='awrc'>107</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>ksqgtl3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>133</td><td align="right" class='awrnc'>259</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>ksqrcl</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>104</td><td align="right" class='awrc'>172</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>ksqcnl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>7</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>kghfre</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>4</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7500"></a>
<h3 class="awr">Mutex Sleep Summary</h3>
<ul>
<li class="awr"> ordered by number of sleeps desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the mutex sleep summary. Location, sleeps and wait time are displayed for each mutex type"><tr><th class="awrbg" scope="col">Mutex Type</th><th class="awrbg" scope="col">Location</th><th class="awrbg" scope="col">Sleeps</th><th class="awrbg" scope="col">Wait    Time (ms)</th></tr>
<tr><td class='awrc'>Row Cache</td><td class='awrc'>[19] kqrpre</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>156</td></tr>
<tr><td class='awrnc'>Library Cache</td><td class='awrnc'>kgllkdl1  85</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>Row Cache</td><td class='awrc'>[06] kqrGetClusterLock</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3800"></a>
<h3 class="awr">Parent Latch Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3900"></a>
<h3 class="awr">Child Latch Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="30"></a>
<h2 class="awr">
Segment Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4000">Segments by Logical Reads</a></li>
<li class="awr"><a class="awr" href="#4100">Segments by Physical Reads</a></li>
<li class="awr"><a class="awr" href="#4104">Segments by Physical Read Requests</a></li>
<li class="awr"><a class="awr" href="#4108">Segments by UnOptimized Reads</a></li>
<li class="awr"><a class="awr" href="#4106">Segments by Optimized Reads</a></li>
<li class="awr"><a class="awr" href="#4110">Segments by Direct Physical Reads</a></li>
<li class="awr"><a class="awr" href="#4120">Segments by Physical Writes</a></li>
<li class="awr"><a class="awr" href="#4124">Segments by Physical Write Requests</a></li>
<li class="awr"><a class="awr" href="#4130">Segments by Direct Physical Writes</a></li>
<li class="awr"><a class="awr" href="#4140">Segments by Table Scans</a></li>
<li class="awr"><a class="awr" href="#4150">Segments by DB Blocks Changes</a></li>
<li class="awr"><a class="awr" href="#4200">Segments by Row Lock Waits</a></li>
<li class="awr"><a class="awr" href="#4300">Segments by ITL Waits</a></li>
<li class="awr"><a class="awr" href="#4400">Segments by Buffer Busy Waits</a></li>
<li class="awr"><a class="awr" href="#4450">Segments by Global Cache Buffer Busy</a></li>
<li class="awr"><a class="awr" href="#4500">Segments by CR Blocks Received</a></li>
<li class="awr"><a class="awr" href="#4600">Segments by Current Blocks Received</a></li>
<li class="awr"><a class="awr" href="#4605">Segments by Global Cache Remote Grants</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4000"></a>
<h3 class="awr">Segments by Logical Reads</h3>
<ul>
<li class="awr">Total Logical Reads:	  11,686,333</li>
<li class="awr">Captured Segments account for	54.0% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by logical reads. Owner, tablespace name, object type, logical read, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Logical Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER59</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73512</td><td align="right" class='awrc'>73515</td><td align="right" class='awrc'>210,304</td><td align="right" class='awrc'>1.80</td></tr>
<tr><td class='awrnc'>USER60</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73518</td><td align="right" class='awrnc'>73522</td><td align="right" class='awrnc'>208,160</td><td align="right" class='awrnc'>1.78</td></tr>
<tr><td class='awrc'>USER53</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73484</td><td align="right" class='awrc'>207,712</td><td align="right" class='awrc'>1.78</td></tr>
<tr><td class='awrnc'>USER74</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73590</td><td align="right" class='awrnc'>73594</td><td align="right" class='awrnc'>147,744</td><td align="right" class='awrnc'>1.26</td></tr>
<tr><td class='awrc'>USER44</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73437</td><td align="right" class='awrc'>73444</td><td align="right" class='awrc'>143,792</td><td align="right" class='awrc'>1.23</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4100"></a>
<h3 class="awr">Segments by Physical Reads</h3>
<ul>
<li class="awr">Total Physical Reads:	    8,848,730</li>
<li class="awr">Captured Segments account for	70.5% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical reads. Owner, tablespace name, object type, physical reads, etc. are displayed for each segment "><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	 Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER59</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73512</td><td align="right" class='awrc'>73515</td><td align="right" class='awrc'>207,405</td><td align="right" class='awrc'>2.34</td></tr>
<tr><td class='awrnc'>USER60</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73518</td><td align="right" class='awrnc'>73522</td><td align="right" class='awrnc'>205,413</td><td align="right" class='awrnc'>2.32</td></tr>
<tr><td class='awrc'>USER53</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73484</td><td align="right" class='awrc'>204,744</td><td align="right" class='awrc'>2.31</td></tr>
<tr><td class='awrnc'>USER74</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73590</td><td align="right" class='awrnc'>73594</td><td align="right" class='awrnc'>146,220</td><td align="right" class='awrnc'>1.65</td></tr>
<tr><td class='awrc'>USER44</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73437</td><td align="right" class='awrc'>73444</td><td align="right" class='awrc'>142,125</td><td align="right" class='awrc'>1.61</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4104"></a>
<h3 class="awr">Segments by Physical Read Requests</h3>
<ul>
<li class="awr">Total Physical Read Requests:	    8,847,855</li>
<li class="awr">Captured Segments account for	70.5% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical read requests. Owner, tablespace name, object type, physical read requests, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Phys Read Requests</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER59</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73512</td><td align="right" class='awrc'>73515</td><td align="right" class='awrc'>207,405</td><td align="right" class='awrc'>2.34</td></tr>
<tr><td class='awrnc'>USER60</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73518</td><td align="right" class='awrnc'>73522</td><td align="right" class='awrnc'>205,413</td><td align="right" class='awrnc'>2.32</td></tr>
<tr><td class='awrc'>USER53</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73484</td><td align="right" class='awrc'>204,744</td><td align="right" class='awrc'>2.31</td></tr>
<tr><td class='awrnc'>USER74</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73590</td><td align="right" class='awrnc'>73594</td><td align="right" class='awrnc'>146,220</td><td align="right" class='awrnc'>1.65</td></tr>
<tr><td class='awrc'>USER44</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73437</td><td align="right" class='awrc'>73444</td><td align="right" class='awrc'>142,125</td><td align="right" class='awrc'>1.61</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4108"></a>
<h3 class="awr">Segments by UnOptimized Reads</h3>
<ul>
<li class="awr">Total UnOptimized Read Requests:       8,847,855</li>
<li class="awr">Captured Segments account for	70.5% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by unoptimized reads. Owner, tablespace name, object type, unoptimized reads, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">UnOptimized Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER59</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73512</td><td align="right" class='awrc'>73515</td><td align="right" class='awrc'>207,405</td><td align="right" class='awrc'>2.34</td></tr>
<tr><td class='awrnc'>USER60</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73518</td><td align="right" class='awrnc'>73522</td><td align="right" class='awrnc'>205,413</td><td align="right" class='awrnc'>2.32</td></tr>
<tr><td class='awrc'>USER53</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73484</td><td align="right" class='awrc'>204,744</td><td align="right" class='awrc'>2.31</td></tr>
<tr><td class='awrnc'>USER74</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73590</td><td align="right" class='awrnc'>73594</td><td align="right" class='awrnc'>146,220</td><td align="right" class='awrnc'>1.65</td></tr>
<tr><td class='awrc'>USER44</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73437</td><td align="right" class='awrc'>73444</td><td align="right" class='awrc'>142,125</td><td align="right" class='awrc'>1.61</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4106"></a>
<h3 class="awr">Segments by Optimized Reads</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4110"></a>
<h3 class="awr">Segments by Direct Physical Reads</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4120"></a>
<h3 class="awr">Segments by Physical Writes</h3>
<ul>
<li class="awr">Total Physical Writes:	     1,377,434</li>
<li class="awr">Captured Segments account for	68.4% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical writes. Owner, tablespace name, object type, physical writes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER59</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73512</td><td align="right" class='awrc'>73515</td><td align="right" class='awrc'>31,267</td><td align="right" class='awrc'>2.27</td></tr>
<tr><td class='awrnc'>USER53</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73481</td><td align="right" class='awrnc'>73484</td><td align="right" class='awrnc'>30,854</td><td align="right" class='awrnc'>2.24</td></tr>
<tr><td class='awrc'>USER60</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73518</td><td align="right" class='awrc'>73522</td><td align="right" class='awrc'>30,830</td><td align="right" class='awrc'>2.24</td></tr>
<tr><td class='awrnc'>USER74</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73590</td><td align="right" class='awrnc'>73594</td><td align="right" class='awrnc'>22,403</td><td align="right" class='awrnc'>1.63</td></tr>
<tr><td class='awrc'>USER44</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73437</td><td align="right" class='awrc'>73444</td><td align="right" class='awrc'>21,540</td><td align="right" class='awrc'>1.56</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4124"></a>
<h3 class="awr">Segments by Physical Write Requests</h3>
<ul>
<li class="awr">Total Physical Write Requests:	     1,319,809</li>
<li class="awr">Captured Segments account for	71.3% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical write requests. Owner, tablespace name, object type, physical write requests, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Phys Write Requests</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER59</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73512</td><td align="right" class='awrc'>73515</td><td align="right" class='awrc'>31,195</td><td align="right" class='awrc'>2.36</td></tr>
<tr><td class='awrnc'>USER60</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73518</td><td align="right" class='awrnc'>73522</td><td align="right" class='awrnc'>30,766</td><td align="right" class='awrnc'>2.33</td></tr>
<tr><td class='awrc'>USER53</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73481</td><td align="right" class='awrc'>73484</td><td align="right" class='awrc'>30,760</td><td align="right" class='awrc'>2.33</td></tr>
<tr><td class='awrnc'>USER74</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73590</td><td align="right" class='awrnc'>73594</td><td align="right" class='awrnc'>22,388</td><td align="right" class='awrnc'>1.70</td></tr>
<tr><td class='awrc'>USER44</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73437</td><td align="right" class='awrc'>73444</td><td align="right" class='awrc'>21,501</td><td align="right" class='awrc'>1.63</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4130"></a>
<h3 class="awr">Segments by Direct Physical Writes</h3>
<ul>
<li class="awr">Total Direct Physical Writes:		1,107</li>
<li class="awr">Captured Segments account for	19.2% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by direct physical writes. Owner, tablespace name, object type, direct writes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Direct Writes</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_2732778098_0</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>73031</td><td align="right" class='awrc'>73031</td><td align="right" class='awrc'>212</td><td align="right" class='awrc'>19.15</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4140"></a>
<h3 class="awr">Segments by Table Scans</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4150"></a>
<h3 class="awr">Segments by DB Blocks Changes</h3>
<ul>
<li class="awr"> % of Capture shows % of DB Block Changes for each top segment compared  </li>
<li class="awr"> with total DB Block Changes for all segments captured by the Snapshot </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by DB blocks changes. Owner, tablespace name, object type, db block changes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">DB Block Changes</th><th class="awrbg" scope="col">% of Capture</th></tr>
<tr><td class='awrc'>USER60</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73518</td><td align="right" class='awrc'>73522</td><td align="right" class='awrc'>31,296</td><td align="right" class='awrc'>3.30</td></tr>
<tr><td class='awrnc'>USER53</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73481</td><td align="right" class='awrnc'>73484</td><td align="right" class='awrnc'>31,184</td><td align="right" class='awrnc'>3.29</td></tr>
<tr><td class='awrc'>USER59</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73512</td><td align="right" class='awrc'>73515</td><td align="right" class='awrc'>30,528</td><td align="right" class='awrc'>3.22</td></tr>
<tr><td class='awrnc'>USER74</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73590</td><td align="right" class='awrnc'>73594</td><td align="right" class='awrnc'>22,128</td><td align="right" class='awrnc'>2.34</td></tr>
<tr><td class='awrc'>USER44</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73437</td><td align="right" class='awrc'>73444</td><td align="right" class='awrc'>21,520</td><td align="right" class='awrc'>2.27</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4200"></a>
<h3 class="awr">Segments by Row Lock Waits</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4300"></a>
<h3 class="awr">Segments by ITL Waits</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4400"></a>
<h3 class="awr">Segments by Buffer Busy Waits</h3>
<ul>
<li class="awr"> % of Capture shows % of Buffer Busy Waits for each top segment compared  </li>
<li class="awr"> with total Buffer Busy Waits for all segments captured by the Snapshot </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by buffer busy waits. Owner, tablespace name, object type, buffer busy waits, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Buffer Busy Waits</th><th class="awrbg" scope="col">% of Capture</th></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSTEM</td>
<td scope="row" class='awrc'>SEG$</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>100.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4450"></a>
<h3 class="awr">Segments by Global Cache Buffer Busy</h3>
<ul>
<li class="awr"> % of Capture shows % of GC Buffer Busy for each top segment compared  </li>
<li class="awr"> with GC Buffer Busy for all segments captured by the Snapshot </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by global cache buffer busy waits. Owner, tablespace name, object type, GC buffer busy waits, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">GC Buffer Busy</th><th class="awrbg" scope="col">% of Capture</th></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSTEM</td>
<td scope="row" class='awrc'>SEG$</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>100.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4500"></a>
<h3 class="awr">Segments by CR Blocks Received</h3>
<ul>
<li class="awr">Total CR Blocks Received:	    3,394</li>
<li class="awr">Captured Segments account for	50.1% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by CR blocks received. Owner, tablespace name, object type, CR blocks received, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">CR    Blocks  Received</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER27</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73351</td><td align="right" class='awrc'>73354</td><td align="right" class='awrc'>117</td><td align="right" class='awrc'>3.45</td></tr>
<tr><td class='awrnc'>USER51</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73471</td><td align="right" class='awrnc'>73476</td><td align="right" class='awrnc'>97</td><td align="right" class='awrnc'>2.86</td></tr>
<tr><td class='awrc'>USER95</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73691</td><td align="right" class='awrc'>73690</td><td align="right" class='awrc'>80</td><td align="right" class='awrc'>2.36</td></tr>
<tr><td class='awrnc'>USER23</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73320</td><td align="right" class='awrnc'>73333</td><td align="right" class='awrnc'>76</td><td align="right" class='awrnc'>2.24</td></tr>
<tr><td class='awrc'>USER97</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73701</td><td align="right" class='awrc'>73700</td><td align="right" class='awrc'>72</td><td align="right" class='awrc'>2.12</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4600"></a>
<h3 class="awr">Segments by Current Blocks Received</h3>
<ul>
<li class="awr">Total Current Blocks Received:		 2,538</li>
<li class="awr">Captured Segments account for	51.4% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by current blocks received. Owner, tablespace name, object type, Current blocks received, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Current Blocks  Received</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER52</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73479</td><td align="right" class='awrc'>73483</td><td align="right" class='awrc'>54</td><td align="right" class='awrc'>2.13</td></tr>
<tr><td class='awrnc'>USER23</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73320</td><td align="right" class='awrnc'>73333</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>2.05</td></tr>
<tr><td class='awrc'>USER26</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73349</td><td align="right" class='awrc'>73353</td><td align="right" class='awrc'>52</td><td align="right" class='awrc'>2.05</td></tr>
<tr><td class='awrnc'>USER46</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73448</td><td align="right" class='awrnc'>73452</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>2.05</td></tr>
<tr><td class='awrc'>USER27</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73351</td><td align="right" class='awrc'>73354</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>1.89</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4605"></a>
<h3 class="awr">Segments by Global Cache Remote Grants</h3>
<ul>
<li class="awr">Total Global Cache Remote Grants:	4,153,196</li>
<li class="awr">Captured Segments account for	69.5% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by gc remote grants. Owner, tablespace name, object type, gc remote grants, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">GC Remote Grants</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER26</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73349</td><td align="right" class='awrc'>73353</td><td align="right" class='awrc'>110,869</td><td align="right" class='awrc'>2.67</td></tr>
<tr><td class='awrnc'>USER46</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73448</td><td align="right" class='awrnc'>73452</td><td align="right" class='awrnc'>105,843</td><td align="right" class='awrnc'>2.55</td></tr>
<tr><td class='awrc'>USER73</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73582</td><td align="right" class='awrc'>73585</td><td align="right" class='awrc'>77,941</td><td align="right" class='awrc'>1.88</td></tr>
<tr><td class='awrnc'>USER78</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73610</td><td align="right" class='awrnc'>73614</td><td align="right" class='awrnc'>75,201</td><td align="right" class='awrnc'>1.81</td></tr>
<tr><td class='awrc'>USER43</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73432</td><td align="right" class='awrc'>73435</td><td align="right" class='awrc'>74,076</td><td align="right" class='awrc'>1.78</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="31"></a>
<h2 class="awr">
Dictionary Cache Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4700">Dictionary Cache Stats</a></li>
<li class="awr"><a class="awr" href="#4800">Dictionary Cache Stats (RAC)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4700"></a>
<h3 class="awr">Dictionary Cache Stats</h3>
<ul>
<li class="awr"> &quot;Pct Misses&quot;  should be very low (&lt; 2% in most cases) </li>
<li class="awr"> &quot;Final Usage&quot; is the number of cache entries being used</li>
</ul>
<table border="0" class="tdiff" summary="This table displays dictionary cache statistics. Get requests, % misses, scan requests, final usage, etc. are displayed for each cache"><tr><th class="awrbg" scope="col">Cache</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Scan Reqs</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Mod Reqs</th><th class="awrbg" scope="col">Final Usage</th></tr>
<tr><td scope="row" class='awrc'>dc_awr_control</td><td align="right" class='awrc'>51</td><td align="right" class='awrc'>1.96</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>1</td></tr>
<tr><td scope="row" class='awrnc'>dc_global_oids</td><td align="right" class='awrnc'>8,039</td><td align="right" class='awrnc'>0.68</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>405</td></tr>
<tr><td scope="row" class='awrc'>dc_histogram_data</td><td align="right" class='awrc'>3,765</td><td align="right" class='awrc'>3.13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,912</td></tr>
<tr><td scope="row" class='awrnc'>dc_histogram_defs</td><td align="right" class='awrnc'>6,397</td><td align="right" class='awrnc'>5.30</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>207</td><td align="right" class='awrnc'>4,609</td></tr>
<tr><td scope="row" class='awrc'>dc_objects</td><td align="right" class='awrc'>12,057</td><td align="right" class='awrc'>1.33</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>115</td><td align="right" class='awrc'>2,605</td></tr>
<tr><td scope="row" class='awrnc'>dc_profiles</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td></tr>
<tr><td scope="row" class='awrc'>dc_props</td><td align="right" class='awrc'>549</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td></tr>
<tr><td scope="row" class='awrnc'>dc_rollback_segments</td><td align="right" class='awrnc'>51,222</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>145</td></tr>
<tr><td scope="row" class='awrc'>dc_segments</td><td align="right" class='awrc'>1,713</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>397</td></tr>
<tr><td scope="row" class='awrnc'>dc_sequences</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>30.77</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>6</td></tr>
<tr><td scope="row" class='awrc'>dc_tablespaces</td><td align="right" class='awrc'>519</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td></tr>
<tr><td scope="row" class='awrnc'>dc_users</td><td align="right" class='awrnc'>427</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>415</td></tr>
<tr><td scope="row" class='awrc'>outstanding_alerts</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td></tr>
<tr><td scope="row" class='awrnc'>sch_lj_oids</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#31">Back to Dictionary Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4800"></a>
<h3 class="awr">Dictionary Cache Stats (RAC)</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#31">Back to Dictionary Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="32"></a>
<h2 class="awr">
Library Cache Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4900">Library Cache Activity</a></li>
<li class="awr"><a class="awr" href="#5000">Library Cache Activity (RAC)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4900"></a>
<h3 class="awr">Library Cache Activity</h3>
<ul>
<li class="awr"> &quot;Pct Misses&quot;  should be very low  </li>
</ul>
<table border="0" class="tdiff" summary="This table displays library cache statistics. Get requests, % misses, pin request, % miss, reloads, etc. are displayed for each library cache namespace"><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Pin Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Reloads</th><th class="awrbg" scope="col">Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>ACCOUNT_STATUS</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>AUDIT POLICY</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>165</td><td align="right" class='awrc'>3.64</td><td align="right" class='awrc'>557</td><td align="right" class='awrc'>1.62</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>CLUSTER</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>DBLINK</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>EDITION</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>HINTSET OBJECT</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>INDEX</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>OBJECT ID</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>QUEUE</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SCHEMA</td><td align="right" class='awrc'>198</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA</td><td align="right" class='awrnc'>1,449</td><td align="right" class='awrnc'>16.22</td><td align="right" class='awrnc'>810,698</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>23</td><td align="right" class='awrnc'>29</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA BUILD</td><td align="right" class='awrc'>171</td><td align="right" class='awrc'>78.95</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA STATS</td><td align="right" class='awrnc'>171</td><td align="right" class='awrnc'>89.47</td><td align="right" class='awrnc'>171</td><td align="right" class='awrnc'>89.47</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TABLE/PROCEDURE</td><td align="right" class='awrc'>1,741</td><td align="right" class='awrc'>5.92</td><td align="right" class='awrc'>12,809</td><td align="right" class='awrc'>2.87</td><td align="right" class='awrc'>127</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TRANSFORMATION</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TRIGGER</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#32">Back to Library Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5000"></a>
<h3 class="awr">Library Cache Activity (RAC)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays library cache statistics. Ges lock requests, GES pin requests, GES pin releases, etc. are displayed for each library cache namespace"><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">GES Lock Requests</th><th class="awrbg" scope="col">GES Pin Requests</th><th class="awrbg" scope="col">GES Pin Releases</th><th class="awrbg" scope="col">GES Inval Requests</th><th class="awrbg" scope="col">GES Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>ACCOUNT_STATUS</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>AUDIT POLICY</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>179</td><td align="right" class='awrc'>530</td><td align="right" class='awrc'>530</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>CLUSTER</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>DBLINK</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>EDITION</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>HINTSET OBJECT</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>INDEX</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>QUEUE</td><td align="right" class='awrc'>62</td><td align="right" class='awrc'>62</td><td align="right" class='awrc'>62</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SCHEMA</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TABLE/PROCEDURE</td><td align="right" class='awrc'>4,649</td><td align="right" class='awrc'>10,433</td><td align="right" class='awrc'>10,433</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TRANSFORMATION</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TRIGGER</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#32">Back to Library Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="33"></a>
<h2 class="awr">
Memory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#8500">Memory Dynamic Components</a></li>
<li class="awr"><a class="awr" href="#8600">Memory Resize Operations Summary</a></li>
<li class="awr"><a class="awr" href="#8650">Memory Resize Ops</a></li>
<li class="awr"><a class="awr" href="#7300">Process Memory Summary</a></li>
<li class="awr"><a class="awr" href="#5900">SGA Memory Summary</a></li>
<li class="awr"><a class="awr" href="#6100">SGA breakdown difference by Pool and Name</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8500"></a>
<h3 class="awr">Memory Dynamic Components</h3>
<ul>
<li class="awr"> Min/Max sizes since instance startup </li>
<li class="awr"> Oper Types/Modes: INItializing,GROw,SHRink,STAtic/IMMediate,DEFerred </li>
<li class="awr"> ordered by Component </li>
</ul>
<table border="0" class="tdiff" summary="This table displays memory dynamic component statistics. Begin snap size, current size, min size, etc. are displayed for each component"><tr><th class="awrbg" scope="col">Component</th><th class="awrbg" scope="col">Begin Snap Size (Mb)</th><th class="awrbg" scope="col">Current Size (Mb)</th><th class="awrbg" scope="col">Min Size (Mb)</th><th class="awrbg" scope="col">Max Size (Mb)</th><th class="awrbg" scope="col">Oper Count</th><th class="awrbg" scope="col">Last Op Typ/Mod</th></tr>
<tr><td scope="row" class='awrc'>ASM Buffer Cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 16K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT 2K buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 32K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT 4K buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 8K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT buffer cache</td><td align="right" class='awrc'>7,872.00</td><td align="right" class='awrc'>7,872.00</td><td align="right" class='awrc'>7,872.00</td><td align="right" class='awrc'>7,872.00</td><td align="right" class='awrc'>0</td><td class='awrc'>INI/</td></tr>
<tr><td scope="row" class='awrnc'>Data Transfer Cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>In Memory RO Extension Area</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>In Memory RW Extension Area</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>In-Memory Area</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>KEEP buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>PGA Target</td><td align="right" class='awrc'>3,232.00</td><td align="right" class='awrc'>3,232.00</td><td align="right" class='awrc'>3,232.00</td><td align="right" class='awrc'>3,232.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>RECYCLE buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>SGA Target</td><td align="right" class='awrc'>9,664.00</td><td align="right" class='awrc'>9,664.00</td><td align="right" class='awrc'>9,664.00</td><td align="right" class='awrc'>9,664.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>Shared IO Pool</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>java pool</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>large pool</td><td align="right" class='awrnc'>160.00</td><td align="right" class='awrnc'>160.00</td><td align="right" class='awrnc'>160.00</td><td align="right" class='awrnc'>160.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>memoptimize buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>shared pool</td><td align="right" class='awrnc'>1,472.00</td><td align="right" class='awrnc'>1,472.00</td><td align="right" class='awrnc'>1,472.00</td><td align="right" class='awrnc'>1,472.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>streams pool</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>unified pga pool</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8600"></a>
<h3 class="awr">Memory Resize Operations Summary</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8650"></a>
<h3 class="awr">Memory Resize Ops</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7300"></a>
<h3 class="awr">Process Memory Summary</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap  </li>
<li class="awr"> All rows below contain absolute values (i.e. not diffed over the interval) </li>
<li class="awr"> Max Alloc is Maximum PGA Allocation size at snapshot time  </li>
<li class="awr"> Hist Max Alloc is the Historical Max Allocation for still-connected processes </li>
<li class="awr"> ordered by Begin/End snapshot, Alloc (MB) desc </li>
<li class="awr"> Top 10 containers by Alloc (MB) at end snapshot time are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays process memory summary. Allocation, used, average allocation, etc. are displayed for different category of process memory."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Category</th><th class="awrbg" scope="col">Alloc (MB)</th><th class="awrbg" scope="col">Used (MB)</th><th class="awrbg" scope="col">Avg Alloc (MB)</th><th class="awrbg" scope="col">Std Dev Alloc (MB)</th><th class="awrbg" scope="col">Max Alloc (MB)</th><th class="awrbg" scope="col">Hist Max Alloc (MB)</th><th class="awrbg" scope="col">Num Proc</th><th class="awrbg" scope="col">Num Alloc</th></tr>
<tr><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>201.75</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>3.42</td><td align="right" class='awrc'>7.06</td><td align="right" class='awrc'>35</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>59</td><td align="right" class='awrc'>59</td></tr>
<tr><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>1,062.20</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>4.09</td><td align="right" class='awrnc'>5.55</td><td align="right" class='awrnc'>38</td><td align="right" class='awrnc'>38</td><td align="right" class='awrnc'>260</td><td align="right" class='awrnc'>260</td></tr>
<tr><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>37.43</td><td align="right" class='awrc'>36.04</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>196</td><td align="right" class='awrc'>192</td></tr>
<tr><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>30.63</td><td align="right" class='awrnc'>26.70</td><td align="right" class='awrnc'>0.23</td><td align="right" class='awrnc'>0.40</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>135</td><td align="right" class='awrnc'>110</td></tr>
<tr><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>1,332.02</td><td align="right" class='awrc'>62.74</td><td align="right" class='awrc'>7.92</td><td align="right" class='awrc'>13.28</td><td align="right" class='awrc'>75</td><td align="right" class='awrc'>58</td><td align="right" class='awrc'>650</td><td align="right" class='awrc'>621</td></tr>
<tr><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>179.19</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>5.12</td><td align="right" class='awrnc'>8.91</td><td align="right" class='awrnc'>33</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>35</td></tr>
<tr><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>771.82</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3.98</td><td align="right" class='awrc'>6.43</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>194</td><td align="right" class='awrc'>194</td></tr>
<tr><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>7.37</td><td align="right" class='awrnc'>6.37</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>130</td><td align="right" class='awrnc'>128</td></tr>
<tr><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>3.87</td><td align="right" class='awrc'>2.29</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>69</td><td align="right" class='awrc'>32</td></tr>
<tr><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>962.25</td><td align="right" class='awrnc'>8.66</td><td align="right" class='awrnc'>9.21</td><td align="right" class='awrnc'>15.74</td><td align="right" class='awrnc'>74</td><td align="right" class='awrnc'>60</td><td align="right" class='awrnc'>428</td><td align="right" class='awrnc'>389</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5900"></a>
<h3 class="awr">SGA Memory Summary</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA memory summary. For each SGA region, begin size and end size is displayed."><tr><th class="awrbg" scope="col">SGA regions</th><th class="awrbg" scope="col">Begin Size (Bytes)</th><th class="awrbg" scope="col">End Size (Bytes) (if different)</th></tr>
<tr><td scope="row" class='awrc'>Database Buffers</td><td align="right" class='awrc'>8,388,608,000</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Fixed Size</td><td align="right" class='awrnc'>12,445,928</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Redo Buffers</td><td align="right" class='awrc'>21,106,688</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Variable Size</td><td align="right" class='awrnc'>1,711,276,032</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6100"></a>
<h3 class="awr">SGA breakdown difference by Pool and Name</h3>
<ul>
<li class="awr"> ordered by Pool, Name	</li>
<li class="awr"> N/A value for Begin MB or End MB indicates the size of that Pool/Name was    insignificant, or zero in that snapshot</li>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA breakdown difference. For each pool name, begin and end size are displayed."><tr><th class="awrbg" scope="col">Pool</th><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Begin MB</th><th class="awrbg" scope="col">End MB</th><th class="awrbg" scope="col">% Diff</th></tr>
<tr><td class='awrc'>large</td><td class='awrc'>PX msg pool</td><td align="right" class='awrc'>128.00</td><td align="right" class='awrc'>128.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>large</td><td class='awrnc'>free memory</td><td align="right" class='awrnc'>31.62</td><td align="right" class='awrnc'>31.62</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>ASH buffers</td><td align="right" class='awrc'>64.00</td><td align="right" class='awrc'>64.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>KGLH0</td><td align="right" class='awrnc'>46.88</td><td align="right" class='awrnc'>47.51</td><td align="right" class='awrnc'>1.33</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>KJSC rnb slots</td><td align="right" class='awrc'>39.30</td><td align="right" class='awrc'>21.22</td><td align="right" class='awrc'>-46.02</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>SO private sga</td><td align="right" class='awrnc'>30.45</td><td align="right" class='awrnc'>30.45</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>SQLA</td><td align="right" class='awrc'>81.25</td><td align="right" class='awrc'>91.04</td><td align="right" class='awrc'>12.05</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>db_block_hash_buckets</td><td align="right" class='awrnc'>32.00</td><td align="right" class='awrnc'>32.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>dbwriter coalesce buffer</td><td align="right" class='awrc'>16.02</td><td align="right" class='awrc'>16.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>free memory</td><td align="right" class='awrnc'>155.15</td><td align="right" class='awrnc'>169.34</td><td align="right" class='awrnc'>9.14</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>gc name table</td><td align="right" class='awrc'>48.00</td><td align="right" class='awrc'>48.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>gcs resources</td><td align="right" class='awrnc'>266.69</td><td align="right" class='awrnc'>266.69</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>gcs resv res hash bucket</td><td align="right" class='awrc'>72.00</td><td align="right" class='awrc'>72.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>gcs shadows</td><td align="right" class='awrnc'>145.46</td><td align="right" class='awrnc'>145.46</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>ges big msg buffers</td><td align="right" class='awrc'>26.29</td><td align="right" class='awrc'>26.29</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>ksunfy_meta 1</td><td align="right" class='awrnc'>25.23</td><td align="right" class='awrnc'>25.23</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>object queue hash buckets</td><td align="right" class='awrc'>16.00</td><td align="right" class='awrc'>16.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>row cache</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>&#160;</td><td class='awrc'>buffer_cache</td><td align="right" class='awrc'>7,872.00</td><td align="right" class='awrc'>7,872.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>&#160;</td><td class='awrnc'>fixed_sga</td><td align="right" class='awrnc'>11.87</td><td align="right" class='awrnc'>11.87</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>&#160;</td><td class='awrc'>log_buffer</td><td align="right" class='awrc'>20.13</td><td align="right" class='awrc'>20.13</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>&#160;</td><td class='awrnc'>shared_io_pool</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="39"></a>
<h2 class="awr">
Replication Statistics (GoldenGate, XStream)
</h2>
<ul>
<li class="awr"><a class="awr" href="#9000">Replication System Resource Usage</a></li>
<li class="awr"><a class="awr" href="#9010">Replication SGA Usage</a></li>
<li class="awr"><a class="awr" href="#9020">GoldenGate Capture</a></li>
<li class="awr"><a class="awr" href="#9030">GoldenGate Capture Rate</a></li>
<li class="awr"><a class="awr" href="#9040">GoldenGate Apply Reader</a></li>
<li class="awr"><a class="awr" href="#9041">GoldenGate Apply Coordinator</a></li>
<li class="awr"><a class="awr" href="#9042">GoldenGate Apply Server</a></li>
<li class="awr"><a class="awr" href="#9051">GoldenGate Apply Coordinator Rate</a></li>
<li class="awr"><a class="awr" href="#9050">GoldenGate Apply Reader and Server Rate</a></li>
<li class="awr"><a class="awr" href="#9060">XStream Capture</a></li>
<li class="awr"><a class="awr" href="#9070">XStream Capture Rate</a></li>
<li class="awr"><a class="awr" href="#9080">XStream Apply Reader</a></li>
<li class="awr"><a class="awr" href="#9081">XStream Apply Coordinator</a></li>
<li class="awr"><a class="awr" href="#9082">XStream Apply Server</a></li>
<li class="awr"><a class="awr" href="#9091">XStream Apply Coordinator Rate</a></li>
<li class="awr"><a class="awr" href="#9090">XStream Apply Reader and Server Rate</a></li>
<li class="awr"><a class="awr" href="#9100">Table Statistics by DML Operations</a></li>
<li class="awr"><a class="awr" href="#9110">Table Statistics by Conflict Resolutions</a></li>
<li class="awr"><a class="awr" href="#9120">Replication Large Transaction Statistics</a></li>
<li class="awr"><a class="awr" href="#9130">Replication Long Running Transaction Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9000"></a>
<h3 class="awr">Replication System Resource Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9010"></a>
<h3 class="awr">Replication SGA Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9020"></a>
<h3 class="awr">GoldenGate Capture</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9030"></a>
<h3 class="awr">GoldenGate Capture Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9040"></a>
<h3 class="awr">GoldenGate Apply Reader</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9041"></a>
<h3 class="awr">GoldenGate Apply Coordinator</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9042"></a>
<h3 class="awr">GoldenGate Apply Server</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9051"></a>
<h3 class="awr">GoldenGate Apply Coordinator Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9050"></a>
<h3 class="awr">GoldenGate Apply Reader and Server Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9060"></a>
<h3 class="awr">XStream Capture</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9070"></a>
<h3 class="awr">XStream Capture Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9080"></a>
<h3 class="awr">XStream Apply Reader</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9081"></a>
<h3 class="awr">XStream Apply Coordinator</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9082"></a>
<h3 class="awr">XStream Apply Server</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9091"></a>
<h3 class="awr">XStream Apply Coordinator Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9090"></a>
<h3 class="awr">XStream Apply Reader and Server Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9100"></a>
<h3 class="awr">Table Statistics by DML Operations</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9110"></a>
<h3 class="awr">Table Statistics by Conflict Resolutions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9120"></a>
<h3 class="awr">Replication Large Transaction Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9130"></a>
<h3 class="awr">Replication Long Running Transaction Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="34"></a>
<h2 class="awr">
Advanced Queuing
</h2>
<ul>
<li class="awr"><a class="awr" href="#6150">Advanced Queue CPU/IO Usage</a></li>
<li class="awr"><a class="awr" href="#6400">Buffered Queues</a></li>
<li class="awr"><a class="awr" href="#6500">Buffered Queue Subscribers</a></li>
<li class="awr"><a class="awr" href="#6600">Rule Set</a></li>
<li class="awr"><a class="awr" href="#7600">Persistent Queues</a></li>
<li class="awr"><a class="awr" href="#7610">Persistent Queues Rate</a></li>
<li class="awr"><a class="awr" href="#7700">Persistent Queue Subscribers</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6150"></a>
<h3 class="awr">Advanced Queue CPU/IO Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6400"></a>
<h3 class="awr">Buffered Queues</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6500"></a>
<h3 class="awr">Buffered Queue Subscribers</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6600"></a>
<h3 class="awr">Rule Set</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7600"></a>
<h3 class="awr">Persistent Queues</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7610"></a>
<h3 class="awr">Persistent Queues Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7700"></a>
<h3 class="awr">Persistent Queue Subscribers</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="6700"></a>
<h3 class="awr">Resource Limit Stats</h3>
<ul>
<li class="awr"> Only rows with Current or Maximum Utilization &gt; 80% of Limit are shown  </li>
<li class="awr"> For &quot;UNLIMITED&quot; resources, rows whose Current or Maximum Utilization    exceeds 2*Initial Allocation are shown </li>
<li class="awr"> Ordered by Resource Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays resource limit statistics. Current utilization, maximum utilization, initial allocation and limit are displayed for each resource name"><tr><th class="awrbg" scope="col">Resource Name</th><th class="awrbg" scope="col">Current	 Utilization</th><th class="awrbg" scope="col">Maximum	 Utilization</th><th class="awrbg" scope="col">  Initial Allocation</th><th class="awrbg" scope="col">	Limit</th></tr>
<tr><td scope="row" class='awrc'>ges_cache_ress</td><td align="right" class='awrc'>3,233</td><td align="right" class='awrc'>4,219</td><td class='awrc'>0</td><td class='awrc'>UNLIMITED</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="37"></a>
<h2 class="awr">
Shared Server Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#8710">Shared Servers Activity</a></li>
<li class="awr"><a class="awr" href="#8720">Shared Servers Rates</a></li>
<li class="awr"><a class="awr" href="#8730">Shared Servers Utilization</a></li>
<li class="awr"><a class="awr" href="#8740">Shared Servers Common Queue</a></li>
<li class="awr"><a class="awr" href="#8750">Shared Servers Dispatchers</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8710"></a>
<h3 class="awr">Shared Servers Activity</h3>
<ul>
<li class="awr"> Values represent averages for all samples</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers activity statistics. It displays average total connections, average active connections, average total shared servers, etc."><tr><th class="awrbg" scope="col">Avg Total Connections</th><th class="awrbg" scope="col">Avg Active Connections</th><th class="awrbg" scope="col">Avg Total Shared Srvrs</th><th class="awrbg" scope="col">Avg Active Shared Srvrs</th><th class="awrbg" scope="col">Avg Total Dispatchers</th><th class="awrbg" scope="col">Avg Active Dispatchers</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8720"></a>
<h3 class="awr">Shared Servers Rates</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers rate statistics. It displays common queue per second, disp queue per second, server messages per second, common queue total, etc."><tr><th class="awrbg" scope="col">Common Queue Per Sec</th><th class="awrbg" scope="col">Disp Queue Per Sec</th><th class="awrbg" scope="col">Server Msgs/Sec</th><th class="awrbg" scope="col">Server KB/Sec</th><th class="awrbg" scope="col">Common Queue Total</th><th class="awrbg" scope="col">Disp Queue Total</th><th class="awrbg" scope="col">Server Total Msgs</th><th class="awrbg" scope="col">Server Total(KB)</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8730"></a>
<h3 class="awr">Shared Servers Utilization</h3>
<ul>
<li class="awr"> Statistics are combined for all servers </li>
<li class="awr"> Incoming and Outgoing Net % are included in %Busy</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers utilization statistics. It displays total server time second, % busy, % idle, incoming net %, outgoing net %, etc."><tr><th class="awrbg" scope="col">Total Server Time (s)</th><th class="awrbg" scope="col">%Busy</th><th class="awrbg" scope="col">%Idle</th><th class="awrbg" scope="col">Incoming Net %</th><th class="awrbg" scope="col">Outgoing Net %</th></tr>
<tr><td align="right" class='awrc'>619</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8740"></a>
<h3 class="awr">Shared Servers Common Queue</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8750"></a>
<h3 class="awr">Shared Servers Dispatchers</h3>
<ul>
<li class="awr"> Ordered by %Busy, descending </li>
<li class="awr"> Total Queued, Total Queue Wait and Avg Queue Wait are for dispatcher queue </li>
<li class="awr"> Name suffixes:       &quot;(N)&quot; - dispatcher started between begin and end snapshots	&quot;(R)&quot; - dispatcher re-started between begin and end snapshots</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers dispatcher statistics. Average connections, total dispatch time, % busy, % idle, total queued, total queued wait, etc. are displayed for each dispatcher"><tr><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Avg Conns</th><th class="awrbg" scope="col">Total Disp Time (s)</th><th class="awrbg" scope="col">%Busy</th><th class="awrbg" scope="col">%Idle</th><th class="awrbg" scope="col">Total Queued</th><th class="awrbg" scope="col">Total Queue Wait (s)</th><th class="awrbg" scope="col">Avg Queue Wait (ms)</th></tr>
<tr><td scope="row" class='awrc'>D000</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>619</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="36"></a>
<h2 class="awr">
Initialization Parameters
</h2>
<ul>
<li class="awr"><a class="awr" href="#6800">Modified Parameters</a></li>
<li class="awr"><a class="awr" href="#6850">Modified Multi-Valued Parameters</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6800"></a>
<h3 class="awr">Modified Parameters</h3>
<ul>
<li class="awr"> This section shows all the modified initialization parameters that  were in effect during the entire snapshot interval </li>
<li class="awr"> End Value is displayed only if the parameter value was modified within the snapshot interval</li>
</ul>
<table border="0" class="tdiff" summary="This table displays name and value of the modified initialization parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>_ipddb_enable</td><td class='awrc'>TRUE</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>audit_file_dest</td><td class='awrnc'>/u01/app/oracle/admin/p80db/adump</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>audit_trail</td><td class='awrc'>DB</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cluster_database</td><td class='awrnc'>TRUE</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>compatible</td><td class='awrc'>19.0.0</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control_files</td><td class='awrnc'>+P80/P80DB/CONTROLFILE/current.266.1031731955,  +FRA/P80DB/CONTROLFILE/current.265.1031731955</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_block_size</td><td class='awrc'>8192</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_create_file_dest</td><td class='awrnc'>+P80</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_domain</td><td class='awrc'>example.com</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_name</td><td class='awrnc'>p80db</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_recovery_file_dest</td><td class='awrc'>+FRA</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_recovery_file_dest_size</td><td class='awrnc'>274877906944</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>diagnostic_dest</td><td class='awrc'>/u01/app/oracle</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dispatchers</td><td class='awrnc'>(PROTOCOL=TCP) (SERVICE=p80dbXDB)</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>instance_number</td><td class='awrc'>1</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>listener_networks</td><td class='awrnc'>&#160;&#160;</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>local_listener</td><td class='awrc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.11)(PORT=1522))</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>nls_language</td><td class='awrnc'>AMERICAN</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>nls_territory</td><td class='awrc'>AMERICA</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>open_cursors</td><td class='awrnc'>300</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>pga_aggregate_target</td><td class='awrc'>3371171840</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>processes</td><td class='awrnc'>640</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>remote_listener</td><td class='awrc'>mcracpoc-scan.example.com:1521</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>remote_login_passwordfile</td><td class='awrnc'>EXCLUSIVE</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>sga_target</td><td class='awrc'>10133438464</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>thread</td><td class='awrnc'>1</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>undo_tablespace</td><td class='awrc'>UNDOTBS1</td><td class='awrc'>&#160;&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#36">Back to Initialization Parameters</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6850"></a>
<h3 class="awr">Modified Multi-Valued Parameters</h3>
<ul>
<li class="awr"> This section only displays parameters that have more than one value </li>
<li class="awr">'(NULL)' indicates a missing parameter value </li>
<li class="awr"> A blank in the 'End Snapshot' indicates the same value as the 'Begin Snapshot'</li>
</ul>
<table border="0" class="tdiff" summary="This table displays name and value of multi-valued parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>control_files</td><td class='awrc'>+FRA/P80DB/CONTROLFILE/current.265.1031731955</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">control_files</div></td><td class='awrnc'>+P80/P80DB/CONTROLFILE/current.266.1031731955</td><td class='awrnc'>&#160;&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#36">Back to Initialization Parameters</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="42"></a>
<h2 class="awr">
Active Session History (ASH) Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#9990">Top SQL with Top Events</a></li>
<li class="awr"><a class="awr" href="#9989">Top SQL with Top Row Sources</a></li>
<li class="awr"><a class="awr" href="#9993">Top Sessions</a></li>
<li class="awr"><a class="awr" href="#9992">Top Blocking Sessions</a></li>
<li class="awr"><a class="awr" href="#9991">Top PL/SQL Procedures</a></li>
<li class="awr"><a class="awr" href="#9988">Top Events</a></li>
<li class="awr"><a class="awr" href="#9994">Top Event P1/P2/P3 Values</a></li>
<li class="awr"><a class="awr" href="#9987">Top DB Objects</a></li>
<li class="awr"><a class="awr" href="#9986">Activity Over Time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9990"></a>
<h3 class="awr">Top SQL with Top Events</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top events by DB Time	 for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event that the SQL is	   waiting on. </li>
<li class="awr"> % Row Source is the percentage of DB Time due to the row source for the     SQL waiting on the event. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top SQL by Top Wait Events"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">Top Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrc'>1497866750</td><td align="right" class='awrc'>2298</td><td align="right" class='awrc'>56.24</td>
<td class='awrc'>db file sequential read</td><td align="right" class='awrc'>28.56</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>25.92</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">2298</div></td><td align="right" class='awrnc'><div class="hidden">56.240822320117474302496328928046989721</div></td>
<td class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>16.08</td><td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>16.08</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">2298</div></td><td align="right" class='awrc'><div class="hidden">56.240822320117474302496328928046989721</div></td>
<td class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>5.56</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>5.56</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrnc'>203653710</td><td align="right" class='awrnc'>1405</td><td align="right" class='awrnc'>35.05</td>
<td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>25.99</td><td class='awrnc'>UPDATE</td><td align="right" class='awrnc'>25.38</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrc'><div class="hidden">203653710</div></td><td align="right" class='awrc'><div class="hidden">1405</div></td><td align="right" class='awrc'><div class="hidden">35.04650024473813020068526676456191874694</div></td>
<td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>3.13</td><td class='awrc'>UPDATE</td><td align="right" class='awrc'>3.13</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrnc'><div class="hidden">203653710</div></td><td align="right" class='awrnc'><div class="hidden">1405</div></td><td align="right" class='awrnc'><div class="hidden">35.04650024473813020068526676456191874694</div></td>
<td class='awrnc'>gc current block lost</td><td align="right" class='awrnc'>2.45</td><td class='awrnc'>UPDATE</td><td align="right" class='awrnc'>2.45</td>
<td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9989"></a>
<h3 class="awr">Top SQL with Top Row Sources</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top row sources by DB Time    for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Row Source is the percentage of DB Time spent on the row source by	   that SQL. </li>
<li class="awr"> % Event is the percentage of DB Time spent on the event by the      SQL executing the row source. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table display the Top SQLs with Top Row Sources"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">Top Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrc'>1497866750</td><td align="right" class='awrc'>2298</td><td align="right" class='awrc'>56.24</td>
<td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>53.13</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>25.92</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">2298</div></td><td align="right" class='awrnc'><div class="hidden">56.240822320117474302496328928046989721</div></td>
<td class='awrnc'>INDEX - RANGE SCAN</td><td align="right" class='awrnc'>3.01</td><td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>2.64</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrc'>203653710</td><td align="right" class='awrc'>1405</td><td align="right" class='awrc'>35.05</td>
<td class='awrc'>UPDATE</td><td align="right" class='awrc'>31.96</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>25.38</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrnc'><div class="hidden">203653710</div></td><td align="right" class='awrnc'><div class="hidden">1405</div></td><td align="right" class='awrnc'><div class="hidden">35.04650024473813020068526676456191874694</div></td>
<td class='awrnc'>UPDATE STATEMENT</td><td align="right" class='awrnc'>2.42</td><td class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>1.03</td>
<td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9993"></a>
<h3 class="awr">Top Sessions</h3>
<ul>
<li class="awr"> '# Samples Active' shows the number of ASH samples in which the session	was found waiting for that particular event. The percentage shown	in this column is calculated with respect to wall clock time	   and not total database activity. </li>
<li class="awr"> 'XIDs' shows the number of distinct transaction IDs sampled in ASH	   when the session was waiting for that particular event</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top session by wait event"><tr><th class="awrbg" scope="col">Sid, Serial#</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">User</th><th class="awrbg" scope="col">Program</th><th class="awrbg" scope="col"># Samples Active</th><th class="awrbg" scope="col">XIDs</th></tr>
<tr><td align="right" scope="row" class='awrc'>8,26103</td><td align="right" class='awrc'>1.42</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>0.76</td>
<td class='awrc'>USER68</td><td class='awrc'>sqlplus@mcracp...m (TNS V1-V3)</td><td align="right" class='awrc'>31/62 [ 50%]</td><td align="right" class='awrc'>15</td></tr>
<tr><td align="right" scope="row" class='awrnc'>9,17312</td><td align="right" class='awrnc'>1.42</td><td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>0.93</td>
<td class='awrnc'>USER96</td><td class='awrnc'>sqlplus@mcracp...m (TNS V1-V3)</td><td align="right" class='awrnc'>38/62 [ 61%]</td><td align="right" class='awrnc'>17</td></tr>
<tr><td align="right" scope="row" class='awrc'>40, 4018</td><td align="right" class='awrc'>1.42</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>0.86</td>
<td class='awrc'>USER64</td><td class='awrc'>sqlplus@mcracp...m (TNS V1-V3)</td><td align="right" class='awrc'>35/62 [ 56%]</td><td align="right" class='awrc'>13</td></tr>
<tr><td align="right" scope="row" class='awrnc'>41,59651</td><td align="right" class='awrnc'>1.42</td><td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>0.76</td>
<td class='awrnc'>USER100</td><td class='awrnc'>sqlplus@mcracp...m (TNS V1-V3)</td><td align="right" class='awrnc'>31/62 [ 50%]</td><td align="right" class='awrnc'>12</td></tr>
<tr><td align="right" scope="row" class='awrc'>68,60774</td><td align="right" class='awrc'>1.42</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>0.86</td>
<td class='awrc'>USER101</td><td class='awrc'>sqlplus@mcracp...m (TNS V1-V3)</td><td align="right" class='awrc'>35/62 [ 56%]</td><td align="right" class='awrc'>17</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9992"></a>
<h3 class="awr">Top Blocking Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9991"></a>
<h3 class="awr">Top PL/SQL Procedures</h3>
<ul>
<li class="awr"> 'PL/SQL entry subprogram' represents the application's top-level	 entry-point (procedure, function, trigger, package initialization	 or RPC call) into PL/SQL. </li>
<li class="awr"> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed	    at the point of sampling . If the value is 'SQL', it represents	   the percentage of time spent executing SQL for the particular	PL/SQL entry subprogram</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top PL/SQL procedures"><tr><th class="awrbg" scope="col">PL/SQL Entry Subprogram</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">PL/SQL Current Subprogram</th><th class="awrbg" scope="col">% Current</th></tr>
<tr><td scope="row" class='awrc'>USER1.SLOBUPDATE</td><td align="right" class='awrc'>35.95</td>
<td class='awrc'>SQL</td><td align="right" class='awrc'>35.95</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9988"></a>
<h3 class="awr">Top Events</h3>
<ul>
<li class="awr"> Top Events by DB Time </li>
<li class="awr"> % Activity is the percentage of DB Time due to the event</li>
</ul>
<table border="0" class="tdiff" summary="This table shows the top events"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Class</th><th class="awrbg" scope="col">Session Type</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td class='awrc'>User I/O</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>54.55</td><td align="right" class='awrc'>35.95</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td class='awrnc'>User I/O</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>16.08</td><td align="right" class='awrnc'>10.60</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block request</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>5.56</td><td align="right" class='awrc'>3.66</td></tr>
<tr><td scope="row" class='awrnc'>CPU + Wait for CPU</td><td class='awrnc'>CPU</td><td class='awrnc'>BACKGROUND</td>
<td align="right" class='awrnc'>3.74</td><td align="right" class='awrnc'>2.47</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>3.13</td><td align="right" class='awrc'>2.06</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9994"></a>
<h3 class="awr">Top Event P1/P2/P3 Values</h3>
<ul>
<li class="awr"> Top Events by DB Time and the top P1/P2/P3 values for those events. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event	</li>
<li class="awr"> % Activity is the percentage of DB Time due to the event with the given     P1,P2,P3 Values.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top event P1/P2/P3 values"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">P1, P2, P3 Values</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Parameter 1</th><th class="awrbg" scope="col">Parameter 2</th><th class="awrbg" scope="col">Parameter 3</th></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>54.58</td><td align="right" class='awrc'>&quot;8&quot;,&quot;32774&quot;,&quot;1&quot;</td><td align="right" class='awrc'>0.02</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>blocks</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>16.08</td><td align="right" class='awrnc'>&quot;1&quot;,&quot;9&quot;,&quot;9&quot;</td><td align="right" class='awrnc'>15.93</td>
<td class='awrnc'>files</td><td class='awrnc'>blocks</td><td class='awrnc'>requests</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>5.58</td><td align="right" class='awrc'>&quot;1&quot;,&quot;20846&quot;,&quot;1&quot;</td><td align="right" class='awrc'>0.02</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>class#</td></tr>
<tr><td scope="row" class='awrnc'>log file parallel write</td><td align="right" class='awrnc'>1.98</td><td align="right" class='awrnc'>&quot;1&quot;,&quot;19&quot;,&quot;2&quot;</td><td align="right" class='awrnc'>0.10</td>
<td class='awrnc'>files</td><td class='awrnc'>blocks</td><td class='awrnc'>requests</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>1.49</td><td align="right" class='awrc'>&quot;2954409984&quot;,&quot;131074&quot;,&quot;65521&quot;</td><td align="right" class='awrc'>0.02</td>
<td class='awrc'>msg</td><td class='awrc'>dest|rcvr</td><td class='awrc'>mtype</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9987"></a>
<h3 class="awr">Top DB Objects</h3>
<ul>
<li class="awr"> Top DB Objects by DB Time with respect to Application, Cluster,     User I/O,	buffer busy waits and In-Memory DB events only. </li>
<li class="awr"> Tablespace name is not available for reports generated from the root PDB     of a consolidated database. </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available.</li>
</ul>
<table border="0" class="tdiff" summary="This table shows the Top DB Objects"><tr><th class="awrbg" scope="col">Object ID</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">Object Name (Type)</th><th class="awrbg" scope="col">Tablespace</th></tr>
<tr><td align="right" scope="row" class='awrc'>73283</td><td align="right" class='awrc'>1.42</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>0.64</td>
<td class='awrc'>USER13.CF1 (TABLE)</td><td class='awrc'>IOPS</td></tr>
<tr><td align="right" scope="row" class='awrnc'>73668</td><td align="right" class='awrnc'>1.42</td><td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>0.88</td>
<td class='awrnc'>USER91.CF1 (TABLE)</td><td class='awrnc'>IOPS</td></tr>
<tr><td align="right" scope="row" class='awrc'>73368</td><td align="right" class='awrc'>1.40</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>0.78</td>
<td class='awrc'>USER30.CF1 (TABLE)</td><td class='awrc'>IOPS</td></tr>
<tr><td align="right" scope="row" class='awrnc'>73430</td><td align="right" class='awrnc'>1.40</td><td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>0.93</td>
<td class='awrnc'>USER42.CF1 (TABLE)</td><td class='awrnc'>IOPS</td></tr>
<tr><td align="right" scope="row" class='awrc'>73612</td><td align="right" class='awrc'>1.40</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>0.86</td>
<td class='awrc'>USER79.CF1 (TABLE)</td><td class='awrc'>IOPS</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9986"></a>
<h3 class="awr">Activity Over Time</h3>
<ul>
<li class="awr"> Analysis period is divided into smaller time slots as indicated    in the 'Slot Time (Duration)'. </li>
<li class="awr"> Top 3 events are reported in each of those slots </li>
<li class="awr"> 'Slot Count' shows the number of ASH samples in that slot </li>
<li class="awr"> 'Event Count' shows the number of ASH samples waiting for    that event in that slot </li>
<li class="awr"> '% Event' is 'Event Count' over all ASH samples in the analysis period</li>
</ul>
<table border="0" class="tdiff" summary="This table show the activity in ASH over time"><tr><th class="awrbg" scope="col">Slot Time (Duration)</th><th class="awrbg" scope="col">Slot Count</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Count</th><th class="awrbg" scope="col">% Event</th></tr>
<tr><td align="right" class='awrc'>09:07:41   (2.3 min)</td><td align="right" class='awrc'>1,069</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>590</td><td align="right" class='awrc'>14.44</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">09:07:41   (2.3 min)</div></td><td align="right" class='awrnc'><div class="hidden">1069</div></td><td class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>178</td><td align="right" class='awrnc'>4.36</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">09:07:41   (2.3 min)</div></td><td align="right" class='awrc'><div class="hidden">1069</div></td><td class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>67</td><td align="right" class='awrc'>1.64</td></tr>
<tr><td align="right" class='awrnc'>09:10:00   (5.0 min)</td><td align="right" class='awrnc'>2,092</td><td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>1,123</td><td align="right" class='awrnc'>27.48</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">09:10:00   (5.0 min)</div></td><td align="right" class='awrc'><div class="hidden">2092</div></td><td class='awrc'>db file parallel read</td><td align="right" class='awrc'>317</td><td align="right" class='awrc'>7.76</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">09:10:00   (5.0 min)</div></td><td align="right" class='awrnc'><div class="hidden">2092</div></td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>143</td><td align="right" class='awrnc'>3.50</td></tr>
<tr><td align="right" class='awrc'>09:15:00   (3.0 min)</td><td align="right" class='awrc'>925</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>517</td><td align="right" class='awrc'>12.65</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">09:15:00   (3.0 min)</div></td><td align="right" class='awrnc'><div class="hidden">925</div></td><td class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>162</td><td align="right" class='awrnc'>3.96</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">09:15:00   (3.0 min)</div></td><td align="right" class='awrc'><div class="hidden">925</div></td><td class='awrc'>CPU + Wait for CPU</td><td align="right" class='awrc'>42</td><td align="right" class='awrc'>1.03</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="99995"></a>
<h2>ADDM Task ADDM:2732778098_1_56</h2>
<pre>
	  ADDM Report for Task &apos;ADDM:2732778098_1_56&apos;
	  -------------------------------------------

Analysis Period
---------------
AWR snapshot range from 55 to 56.
Time period starts at 12-FEB-20 09.07.41 AM
Time period ends at 12-FEB-20 09.18.02 AM

Analysis Target
---------------
Database &apos;P80DB&apos; with DB ID 2732778098.
Database version 19.0.0.0.0.
ADDM performed an analysis of instance p80db1, numbered 1 and hosted at
mcracpoc1.example.com.

Activity During the Analysis Period
-----------------------------------
Total database time was 37002 seconds.
The average number of active sessions was 59.58.

Summary of Findings
-------------------
   Description		      Active Sessions	   Recommendations
			      Percent of Activity
   -------------------------  -------------------  ---------------
1  Top SQL Statements	      58.95 | 98.94	   2
2  Interconnect Latency       49.95 | 83.83	   1
3  &quot;User I/O&quot; wait Class	43.19 | 72.49	     0
4  Global Cache Messaging     12.91 | 21.67	   1
5  Buffer Busy - Hot Objects  4.48 | 7.51	   2
6  Global Cache Lost Blocks   3.28 | 5.5	   1
7  Undersized SGA	      1.38 | 2.32	   1


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Top SQL Statements
Impact is 59.05 active sessions, 98.94% of total activity.
----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

   Recommendation 1: SQL Tuning
   Estimated benefit is 36.33 active sessions, 60.97% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      &quot;bhdvtsvjhgvrh&quot;.
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND
	 (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 100% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;bhdvtsvjhgvrh&quot; was executed 672439 times and
      had an average elapsed time of 0.034 seconds.

   Recommendation 2: SQL Tuning
   Estimated benefit is 21.06 active sessions, 35.35% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      &quot;35dumc2tpr9dv&quot;.
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 ))
	 AND (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 93% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;35dumc2tpr9dv&quot; was executed 118760 times and
      had an average elapsed time of 0.1 seconds.


Finding 2: Interconnect Latency
Impact is 50.03 active sessions, 83.83% of total activity.
----------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time on this instance.
The instance was consuming 47092 kilo bits per second of interconnect
bandwidth.
5% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 93% for database lock management.
The average latency for 8K interconnect messages was 1319 microseconds.
The instance is using the private interconnect device &quot;fg-priv:1&quot; with IP
address 169.254.22.248 and source &quot;?B?&quot;.

   Recommendation 1: Host Configuration
   Estimated benefit is 49.95 active sessions, 83.83% of total activity.
   ---------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle&apos;s recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
      Impact is 12.91 active sessions, 21.67% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 12.98 active sessions, 21.79% of total activity.


Finding 3: &quot;User I/O&quot; wait Class
Impact is 43.26 active sessions, 72.49% of total activity.
----------------------------------------------------------
Wait class &quot;User I/O&quot; was consuming significant database time.
Waits for I/O to temporary tablespaces were not consuming significant database
time.
The throughput of the I/O subsystem was not significantly lower than expected.

   No recommendations are available.


Finding 4: Global Cache Messaging
Impact is 12.93 active sessions, 21.67% of total activity.
----------------------------------------------------------
Inter-instance messaging was consuming significant database time on this
instance.

   Recommendation 1: Application Analysis
   Estimated benefit is 12.91 active sessions, 21.67% of total activity.
   ---------------------------------------------------------------------
   Action
      Look at the &quot;Top SQL Statements&quot; finding for SQL statements consuming
      significant time on Cluster waits. For example, the SELECT statement
      with SQL_ID &quot;bhdvtsvjhgvrh&quot; is responsible for 52% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Cluster&quot; was consuming significant database time.
      Impact is 12.98 active sessions, 21.79% of total activity.


Finding 5: Buffer Busy - Hot Objects
Impact is 4.48 active sessions, 7.51% of total activity.
--------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

   Recommendation 1: Schema Changes
   Estimated benefit is .16 active sessions, .26% of total activity.
   -----------------------------------------------------------------
   Action
      Consider rebuilding the TABLE &quot;USER82.CF1&quot; with object ID 73630 using a
      higher value for PCTFREE.
      Related Object
	 Database object with ID 73630.

   Recommendation 2: Schema Changes
   Estimated benefit is .16 active sessions, .26% of total activity.
   -----------------------------------------------------------------
   Action
      Consider partitioning the TABLE &quot;USER82.CF1&quot; with object ID 73630 in a
      manner that will evenly distribute concurrent DML across multiple
      partitions.
      Related Object
	 Database object with ID 73630.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 4.48 active sessions, 7.51% of total activity.
	 Inter-instance messaging was consuming significant database time on
	 this instance.
	 Impact is 12.91 active sessions, 21.67% of total activity.
	    Wait class &quot;Cluster&quot; was consuming significant database time.
	    Impact is 12.98 active sessions, 21.79% of total activity.


Finding 6: Global Cache Lost Blocks
Impact is 3.28 active sessions, 5.5% of total activity.
-------------------------------------------------------
Cluster communications that were retried due to lost blocks consumed
significant database time.
The instance was consuming 47092 kilo bits per second of interconnect
bandwidth.
5% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 93% for database lock management.
The average latency for 8K interconnect messages was 1319 microseconds.
The instance is using the private interconnect device &quot;fg-priv:1&quot; with IP
address 169.254.22.248 and source &quot;?B?&quot;.

   Recommendation 1: Host Configuration
   Estimated benefit is 3.28 active sessions, 5.5% of total activity.
   ------------------------------------------------------------------
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
      Impact is 12.91 active sessions, 21.67% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 12.98 active sessions, 21.79% of total activity.


Finding 7: Undersized SGA
Impact is 1.38 active sessions, 2.32% of total activity.
--------------------------------------------------------
The SGA was inadequately sized, causing additional I/O or hard parses.
The value of parameter &quot;sga_target&quot; was &quot;9664 M&quot; during the analysis period.

   Recommendation 1: Database Configuration
   Estimated benefit is .31 active sessions, .53% of total activity.
   -----------------------------------------------------------------
   Action
      Increase the size of the SGA by setting the parameter &quot;sga_target&quot; to
      10872 M.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;User I/O&quot; was consuming significant database time.
      Impact is 43.19 active sessions, 72.49% of total activity.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Miscellaneous Information
-------------------------
Wait class &quot;Application&quot; was not consuming significant database time.
Wait class &quot;Commit&quot; was not consuming significant database time.
Wait class &quot;Concurrency&quot; was not consuming significant database time.
Wait class &quot;Configuration&quot; was not consuming significant database time.
CPU was not a bottleneck for the instance.
Wait class &quot;Network&quot; was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.
Hard parsing of SQL statements was not consuming significant database time.

</pre>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="9997"></a>
<a class="awr" name="9997"></a><h3 class="awr">RAC Statistics</h3>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays information about RAC instances">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th><th class="awrnobg" scope="col"></th></tr>
<tr><td scope="row" class='awrnc'>Number of Instances:</td><td align="right" class='awrnc'>    2</td><td align="right" class='awrnc'>	 2</td></tr>
<tr><td scope="row" class='awrc'>Number of LMS's:</td><td align="right" class='awrc'>	 3</td><td align="right" class='awrc'>	  3</td></tr>
<tr><td scope="row" class='awrnc'>Number of realtime LMS's:</td><td align="right" class='awrnc'>    3</td><td align="right" class='awrnc'>    3</td><td class='awrnc'> (0 priority changes)</td></tr>
</table><p />
Global Cache Load Profile
<p />
<table border="0" width="600" class="tdiff" summary="This table displays information about global cache load
		     profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Per Second</th><th class="awrbg" scope="col">Per Transaction</th></tr>
<tr><td scope="row" class='awrnc'>Global Cache blocks received:</td><td align="right" class='awrnc'>		     9.56</td><td align="right" class='awrnc'>		       0.05</td></tr>
<tr><td scope="row" class='awrc'>Global Cache blocks served:</td><td align="right" class='awrc'>		45.56</td><td align="right" class='awrc'>		  0.24</td></tr>
<tr><td scope="row" class='awrnc'>GCS/GES messages received:</td><td align="right" class='awrnc'>	     17,766.10</td><td align="right" class='awrnc'>		   91.89</td></tr>
<tr><td scope="row" class='awrc'>GCS/GES messages sent:</td><td align="right" class='awrc'>	       19,664.25</td><td align="right" class='awrc'>		   101.71</td></tr>
<tr><td scope="row" class='awrnc'>DBWR Fusion writes:</td><td align="right" class='awrnc'>		   0.52</td><td align="right" class='awrnc'>		     0.00</td></tr>
<tr><td scope="row" class='awrc'>Estd Interconnect traffic (KB)</td><td align="right" class='awrc'>		7,751.59</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
Global Cache Efficiency Percentages (Target local+remote 100%)
<p />
<table border="0" width="600" class="tdiff" summary="This table displays global cache efficiency percentages">
<tr><td scope="row" class='awrnc'>Buffer access -  local cache %:</td><td align="right" class='awrnc'>	24.22</td></tr>
<tr><td scope="row" class='awrc'>Buffer access - remote cache %:</td><td align="right" class='awrc'>   0.05</td></tr>
<tr><td scope="row" class='awrnc'>Buffer access -	  disk %:</td><td align="right" class='awrnc'>	75.73</td></tr>
<tr><td scope="row" class='awrc'>Global Cache Locality	      %:</td><td align="right" class='awrc'>  53.41</td></tr>
</table><p />
Global Cache and Enqueue Services - Workload Characteristics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays workload characteristics for global
		    cache and enqueue services">
<tr><td scope="row" class='awrnc'>Avg global cache cr block receive time (us):</td><td align="right" class='awrnc'>	    3,297.0</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache current block receive time (us):</td><td align="right" class='awrc'>	       1,631.2</td></tr>
<tr><td scope="row" class='awrnc'>Avg LMS process busy %:</td><td align="right" class='awrnc'>		  32.5</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache cr block build time (us):</td><td align="right" class='awrc'> 	   98.0</td></tr>
<tr><td scope="row" class='awrnc'>Global cache log flushes for cr blocks served %:</td><td align="right" class='awrnc'> 	    0.4</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache cr block flush time (us):</td><td align="right" class='awrc'> 	6,923.1</td></tr>
<tr><td scope="row" class='awrnc'>Avg global cache current block pin time (us):</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Global cache log flushes for current blocks served %:</td><td align="right" class='awrc'>	       0.1</td></tr>
<tr><td scope="row" class='awrnc'>Avg global cache current block flush time (us):</td><td align="right" class='awrnc'>	       6,666.7</td></tr>
<tr><td scope="row" class='awrc'>Avg global enqueue get time (us):</td><td align="right" class='awrc'>	       1,656.2</td></tr>
</table><p />
Global Cache and Enqueue Services - Messaging Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays messaging statistics for Global Cache
		    and Enqueue Services">
<tr><td scope="row" class='awrnc'>Avg message sent queue time (us):</td><td align="right" class='awrnc'>	   214.7</td></tr>
<tr><td scope="row" class='awrc'>Avg message sent queue time on ksxp (us):</td><td align="right" class='awrc'>	       2,221.1</td></tr>
<tr><td scope="row" class='awrnc'>Avg message received kernel queue time (us):</td><td align="right" class='awrnc'>	      195.9</td></tr>
<tr><td scope="row" class='awrc'>Avg message received queue time (us):</td><td align="right" class='awrc'>	      55.0</td></tr>
<tr><td scope="row" class='awrnc'>Avg GCS message process time (us):</td><td align="right" class='awrnc'>	     29.2</td></tr>
<tr><td scope="row" class='awrc'>Avg GES message process time (us):</td><td align="right" class='awrc'> 	   25.2</td></tr>
<tr><td scope="row" class='awrnc'>% of direct sent messages:</td><td align="right" class='awrnc'>   21.03</td></tr>
<tr><td scope="row" class='awrc'>% of indirect sent messages:</td><td align="right" class='awrc'>   78.59</td></tr>
<tr><td scope="row" class='awrnc'>% of flow controlled messages:</td><td align="right" class='awrnc'>	 0.38</td></tr>
</table><p />
<hr />
<p />Cluster Interconnect<p />
<ul>
<li class="awr"> if Public/Source at End snap is different a '*' is displayed</li>
</ul>
<table border="0" class="tdiff" summary="Cluster Interconnect. . if Public/Source at End snap is different a '*' is displayed"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Begin">Begin</th>
<th class="awrbg" colspan=" 2" id="End">End</th>
</tr><tr>
<th class="awrbg" scope="col">Interface</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Src">Src</th></tr>
<tr><td class='awrc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrclb'>169.254.22.248</td><td headers="Begin Pub" class='awrc'>N</td><td headers="Begin Source" class='awrc'>&#160;</td><td headers="End Pub" class='awrclb'>&#160;</td><td headers="End Src" class='awrcrb'>&#160;</td></tr>
</table><p />
<a class="awr" name="top"></a>
<h2 class="awr">
RAC Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#9997">RAC Report Summary</a></li>
<li class="awr"><a class="awr" href="#5100">Global Messaging Statistics</a></li>
<li class="awr"><a class="awr" href="#5200">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#5300">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#7">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#8">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#8790">Dynamic Remastering Statistics</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5100"></a>
<h3 class="awr">Global Messaging Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays global messaging statistics. Total, per second, per transaction values are displayed for each statistics"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>Cluster reconfiguration count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Domain reconfiguration count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim Broadcasts sent</td><td align="right" class='awrc'>98</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Global Enqueue S-optim S-lock gets</td><td align="right" class='awrnc'>93,023</td><td align="right" class='awrnc'>149.90</td><td align="right" class='awrnc'>0.78</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim anti-locks crea</td><td align="right" class='awrc'>47</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA local message waits</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA local messages received</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA messages received actual</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA messages received logical</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA requests failed</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA requests succeeded</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Pseudo reconfiguration count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Pseudo rm reconfig count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>acks for commit broadcast(actual)</td><td align="right" class='awrnc'>13,929</td><td align="right" class='awrnc'>22.44</td><td align="right" class='awrnc'>0.12</td></tr>
<tr><td scope="row" class='awrc'>acks for commit broadcast(logical)</td><td align="right" class='awrc'>57,862</td><td align="right" class='awrc'>93.24</td><td align="right" class='awrc'>0.48</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(actual)</td><td align="right" class='awrnc'>38,683</td><td align="right" class='awrnc'>62.33</td><td align="right" class='awrnc'>0.32</td></tr>
<tr><td scope="row" class='awrc'>broadcast msgs on commit(logical)</td><td align="right" class='awrc'>73,771</td><td align="right" class='awrc'>118.87</td><td align="right" class='awrc'>0.61</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(wasted)</td><td align="right" class='awrnc'>33,054</td><td align="right" class='awrnc'>53.26</td><td align="right" class='awrnc'>0.28</td></tr>
<tr><td scope="row" class='awrc'>dynamically allocated gcs resources</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>dynamically allocated gcs shadows</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>flow control messages received</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>flow control messages sent</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs assume cvt</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs assume no cvt</td><td align="right" class='awrnc'>14,006</td><td align="right" class='awrnc'>22.57</td><td align="right" class='awrnc'>0.12</td></tr>
<tr><td scope="row" class='awrc'>gcs ast to fg</td><td align="right" class='awrc'>8,489</td><td align="right" class='awrc'>13.68</td><td align="right" class='awrc'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>gcs ast xid</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs bidless ast to lms</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs blocked converts</td><td align="right" class='awrnc'>62,737</td><td align="right" class='awrnc'>101.09</td><td align="right" class='awrnc'>0.52</td></tr>
<tr><td scope="row" class='awrc'>gcs blocked cr converts</td><td align="right" class='awrc'>2,806</td><td align="right" class='awrc'>4.52</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible basts</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs compatible cr basts (global)</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible cr basts (local)</td><td align="right" class='awrnc'>13,171</td><td align="right" class='awrnc'>21.22</td><td align="right" class='awrnc'>0.11</td></tr>
<tr><td scope="row" class='awrc'>gcs cr basts to PIs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs cr requests to slave</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs cr serve without current lock</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs dbwr flush pi msgs</td><td align="right" class='awrnc'>625,335</td><td align="right" class='awrnc'>1,007.66</td><td align="right" class='awrnc'>5.21</td></tr>
<tr><td scope="row" class='awrc'>gcs dbwr write request msgs</td><td align="right" class='awrc'>322</td><td align="right" class='awrc'>0.52</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs error msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs flash read serve requests to slave</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs force cr block only</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs force cr grant</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs force cr no current</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs forward cr to pinged instance</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs grant ast</td><td align="right" class='awrnc'>8,492</td><td align="right" class='awrnc'>13.68</td><td align="right" class='awrnc'>0.07</td></tr>
<tr><td scope="row" class='awrc'>gcs grant request in partial open</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate (compatible) converts</td><td align="right" class='awrnc'>7,185</td><td align="right" class='awrnc'>11.58</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate (null) converts</td><td align="right" class='awrc'>1,019,471</td><td align="right" class='awrc'>1,642.76</td><td align="right" class='awrc'>8.50</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate cr (compatible) converts</td><td align="right" class='awrnc'>85,749</td><td align="right" class='awrnc'>138.17</td><td align="right" class='awrnc'>0.71</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate cr (null) converts</td><td align="right" class='awrc'>5,805,729</td><td align="right" class='awrc'>9,355.27</td><td align="right" class='awrc'>48.39</td></tr>
<tr><td scope="row" class='awrnc'>gcs lms flush pi msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs lms write request msgs</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs msgs process time(ms)</td><td align="right" class='awrnc'>308,481</td><td align="right" class='awrnc'>497.08</td><td align="right" class='awrnc'>2.57</td></tr>
<tr><td scope="row" class='awrc'>gcs msgs received</td><td align="right" class='awrc'>10,575,011</td><td align="right" class='awrc'>17,040.42</td><td align="right" class='awrc'>88.14</td></tr>
<tr><td scope="row" class='awrnc'>gcs new served by master</td><td align="right" class='awrnc'>365</td><td align="right" class='awrnc'>0.59</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs out-of-order msgs</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs pings refused</td><td align="right" class='awrnc'>1,029</td><td align="right" class='awrnc'>1.66</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gcs pkey conflicts retry</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs queued converts</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly failure unmount db</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass N-&gt;Xw ping local</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass N-&gt;Xw ping remote</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass grant X on assume</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass grant ast</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass grant fg ast</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass grant immediate</td><td align="right" class='awrc'>38</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs recovery claim msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs refuse xid</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs refuse xid to fg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs refuse xid to lms</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs refuse xid to master</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs regular cr</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs resources for dynamic sga</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs retry convert request</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs shadows for dynamic sga</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs share recovery bast</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs side channel msgs actual</td><td align="right" class='awrnc'>3,397</td><td align="right" class='awrnc'>5.47</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>gcs side channel msgs logical</td><td align="right" class='awrc'>449,857</td><td align="right" class='awrc'>724.89</td><td align="right" class='awrc'>3.75</td></tr>
<tr><td scope="row" class='awrnc'>gcs stale cr</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs undo cr</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs write notification msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs writes refused</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges msgs process time(ms)</td><td align="right" class='awrnc'>259</td><td align="right" class='awrnc'>0.42</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ges msgs received</td><td align="right" class='awrc'>10,258</td><td align="right" class='awrc'>16.53</td><td align="right" class='awrc'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>ges remote lock allocation</td><td align="right" class='awrnc'>-131</td><td align="right" class='awrnc'>-0.21</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global posts dropped</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>global posts queue time</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global posts queued</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>global posts requested</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global posts sent</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>implicit batch messages received</td><td align="right" class='awrnc'>166,961</td><td align="right" class='awrnc'>269.04</td><td align="right" class='awrnc'>1.39</td></tr>
<tr><td scope="row" class='awrc'>implicit batch messages sent</td><td align="right" class='awrc'>199,440</td><td align="right" class='awrc'>321.37</td><td align="right" class='awrc'>1.66</td></tr>
<tr><td scope="row" class='awrnc'>lmd msg send time(ms)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>lms(s) msg send time(ms)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>messages flow controlled</td><td align="right" class='awrnc'>23,914</td><td align="right" class='awrnc'>38.53</td><td align="right" class='awrnc'>0.20</td></tr>
<tr><td scope="row" class='awrc'>messages queue sent actual</td><td align="right" class='awrc'>1,806,768</td><td align="right" class='awrc'>2,911.40</td><td align="right" class='awrc'>15.06</td></tr>
<tr><td scope="row" class='awrnc'>messages queue sent logical</td><td align="right" class='awrnc'>1,257,483</td><td align="right" class='awrnc'>2,026.29</td><td align="right" class='awrnc'>10.48</td></tr>
<tr><td scope="row" class='awrc'>messages received actual</td><td align="right" class='awrc'>4,183,794</td><td align="right" class='awrc'>6,741.70</td><td align="right" class='awrc'>34.87</td></tr>
<tr><td scope="row" class='awrnc'>messages received logical</td><td align="right" class='awrnc'>10,585,269</td><td align="right" class='awrnc'>17,056.95</td><td align="right" class='awrnc'>88.22</td></tr>
<tr><td scope="row" class='awrc'>messages sent directly</td><td align="right" class='awrc'>1,338,418</td><td align="right" class='awrc'>2,156.71</td><td align="right" class='awrc'>11.15</td></tr>
<tr><td scope="row" class='awrnc'>messages sent indirectly</td><td align="right" class='awrnc'>5,001,442</td><td align="right" class='awrnc'>8,059.25</td><td align="right" class='awrnc'>41.68</td></tr>
<tr><td scope="row" class='awrc'>messages sent not implicit batched</td><td align="right" class='awrc'>80,645</td><td align="right" class='awrc'>129.95</td><td align="right" class='awrc'>0.67</td></tr>
<tr><td scope="row" class='awrnc'>messages sent pbatched</td><td align="right" class='awrnc'>10,053,258</td><td align="right" class='awrnc'>16,199.67</td><td align="right" class='awrnc'>83.79</td></tr>
<tr><td scope="row" class='awrc'>msgs causing lmd to send msgs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>msgs causing lms(s) to send msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>msgs received kernel queue time (ns)</td><td align="right" class='awrc'>2,073,315,070,574</td><td align="right" class='awrc'>3,340,909,644.10</td><td align="right" class='awrc'>17,279,929.58</td></tr>
<tr><td scope="row" class='awrnc'>msgs received queue time (ms)</td><td align="right" class='awrnc'>582,653</td><td align="right" class='awrnc'>938.88</td><td align="right" class='awrnc'>4.86</td></tr>
<tr><td scope="row" class='awrc'>msgs received queued</td><td align="right" class='awrc'>10,585,269</td><td align="right" class='awrc'>17,056.95</td><td align="right" class='awrc'>88.22</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queue time (ms)</td><td align="right" class='awrnc'>512,639</td><td align="right" class='awrnc'>826.06</td><td align="right" class='awrnc'>4.27</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queue time on ksxp (ms)</td><td align="right" class='awrc'>10,286,328</td><td align="right" class='awrc'>16,575.24</td><td align="right" class='awrc'>85.73</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queued</td><td align="right" class='awrnc'>2,387,384</td><td align="right" class='awrnc'>3,847.00</td><td align="right" class='awrnc'>19.90</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queued on ksxp</td><td align="right" class='awrc'>4,631,282</td><td align="right" class='awrc'>7,462.78</td><td align="right" class='awrc'>38.60</td></tr>
<tr><td scope="row" class='awrnc'>number of broadcasted resources</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of directly freed master res</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of ges deadlock detected</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of lock borrowed by LMD</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of received ODPS messages</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of received RBA messages</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of resource borrowed by LMD</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of sent ODPS messages</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of sent RBA messages</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>process batch messages received</td><td align="right" class='awrc'>2,798,398</td><td align="right" class='awrc'>4,509.30</td><td align="right" class='awrc'>23.32</td></tr>
<tr><td scope="row" class='awrnc'>process batch messages sent</td><td align="right" class='awrnc'>3,082,130</td><td align="right" class='awrnc'>4,966.50</td><td align="right" class='awrnc'>25.69</td></tr>
<tr><td scope="row" class='awrc'>receiver cycle time</td><td align="right" class='awrc'>915,957</td><td align="right" class='awrc'>1,475.96</td><td align="right" class='awrc'>7.63</td></tr>
<tr><td scope="row" class='awrnc'>receiver loop count</td><td align="right" class='awrnc'>3,173,064</td><td align="right" class='awrnc'>5,113.03</td><td align="right" class='awrnc'>26.45</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5200"></a>
<h3 class="awr">Global CR Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays global CR served statistics. For each statistics, total value is shown"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th></tr>
<tr><td scope="row" class='awrc'>CR Block Requests</td><td align="right" class='awrc'>3,159</td></tr>
<tr><td scope="row" class='awrnc'>CURRENT Block Requests</td><td align="right" class='awrnc'>69</td></tr>
<tr><td scope="row" class='awrc'>Data Block Requests</td><td align="right" class='awrc'>3,159</td></tr>
<tr><td scope="row" class='awrnc'>Undo Block Requests</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TX Block Requests</td><td align="right" class='awrc'>24</td></tr>
<tr><td scope="row" class='awrnc'>Current Results</td><td align="right" class='awrnc'>3,228</td></tr>
<tr><td scope="row" class='awrc'>Private results</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>Zero Results</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>Disk Read Results</td><td align="right" class='awrc'>1</td></tr>
<tr><td scope="row" class='awrnc'>Fail Results</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>Fairness Down Converts</td><td align="right" class='awrc'>3,103</td></tr>
<tr><td scope="row" class='awrnc'>Light Works</td><td align="right" class='awrnc'>2,225</td></tr>
<tr><td scope="row" class='awrc'>Flushes</td><td align="right" class='awrc'>13</td></tr>
<tr><td scope="row" class='awrnc'>Builds</td><td align="right" class='awrnc'>3,160</td></tr>
<tr><td scope="row" class='awrc'>Errors</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5300"></a>
<h3 class="awr">Global Current Server Statistics</h3>
<ul>
<li class="awr"> Pins	 = CURRENT Block Pin Operations </li>
<li class="awr"> Flushes = Redo Flush before CURRENT Block Served Operations</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global current served statistics"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th></tr>
<tr><td scope="row" class='awrc'>Pins</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Flushes</td><td align="right" class='awrnc'>33</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>69.70</td><td align="right" class='awrnc'>30.30</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="7"></a>
<h2 class="awr">
Global Cache Transfer Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#5400">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#5450">Global Cache Transfer Times (us)</a></li>
<li class="awr"><a class="awr" href="#5460">Global Cache Transfer (Immediate)</a></li>
<li class="awr"><a class="awr" href="#5470">Global Cache Times (Immediate)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5400"></a>
<h3 class="awr">Global Cache Transfer Statistics</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> Busy	     (Busy) - Block Transfer impacted by Remote Contention </li>
<li class="awr"> Congested (Congst) - Block Transfer impacted by Remote System Load </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer stats. CR, blocks received, % immediate, % busy, % congestion are displayed for each instance and block class"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CR">CR</th>
<th class="awrbg" colspan=" 4" id="Current">Current</th>
</tr><tr>
<th class="awrbg" scope="col">Inst No</th><th class="awrbg" scope="col">Block	Class  </th><th class="awrbg" scope="col" id="Blocks|Received">Blocks Received</th><th class="awrbg" scope="col" id="%|Immed">% Immed</th><th class="awrbg" scope="col" id="%|Busy">% Busy</th><th class="awrbg" scope="col" id="%|Congst">% Congst</th><th class="awrbg" scope="col" id="Blocks|Received">Blocks Received</th><th class="awrbg" scope="col" id="%|Immed">% Immed</th><th class="awrbg" scope="col" id="%|Busy">% Busy</th><th class="awrbg" scope="col" id="%|Congst">% Congst</th></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>data block</td><td align="right" headers="CR Blocks|Received" class='awrclb'>2,588</td><td align="right" headers="CR %|Immed" class='awrc'>98.49</td><td align="right" headers="CR %|Busy" class='awrc'>0.73</td><td align="right" headers="CR %|Congst" class='awrc'>0.77</td><td align="right" headers="Current Blocks|Received" class='awrclb'>2,485</td><td align="right" headers="Current %|Immed" class='awrc'>25.19</td><td align="right" headers="Current %|Busy" class='awrc'>74.41</td><td align="right" headers="Current %|Congst" class='awrcrb'>0.40</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>undo header</td><td align="right" headers="CR Blocks|Received" class='awrnclb'>720</td><td align="right" headers="CR %|Immed" class='awrnc'>94.17</td><td align="right" headers="CR %|Busy" class='awrnc'>5.69</td><td align="right" headers="CR %|Congst" class='awrnc'>0.14</td><td align="right" headers="Current Blocks|Received" class='awrnclb'>17</td><td align="right" headers="Current %|Immed" class='awrnc'>0.00</td><td align="right" headers="Current %|Busy" class='awrnc'>100.00</td><td align="right" headers="Current %|Congst" class='awrncrb'>0.00</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>Others</td><td align="right" headers="CR Blocks|Received" class='awrclb'>12</td><td align="right" headers="CR %|Immed" class='awrc'>100.00</td><td align="right" headers="CR %|Busy" class='awrc'>0.00</td><td align="right" headers="CR %|Congst" class='awrc'>0.00</td><td align="right" headers="Current Blocks|Received" class='awrclb'>60</td><td align="right" headers="Current %|Immed" class='awrc'>18.33</td><td align="right" headers="Current %|Busy" class='awrc'>81.67</td><td align="right" headers="Current %|Congst" class='awrcrb'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5450"></a>
<h3 class="awr">Global Cache Transfer Times (us)</h3>
<ul>
<li class="awr"> Avg Time - average time of all blocks (Immed,Busy,Congst) in us </li>
<li class="awr"> Immed, Busy, Congst -	Average times in us </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer time statistics"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 4" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col">Inst No</th><th class="awrbg" scope="col">Block	Class  </th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Congst">Congst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Congst">Congst</th></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>data block</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>4009</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>3956</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>10827</td><td align="right" headers="CRAvgTime(us) Congst" class='awrc'>4338</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>1702</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>2962</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>1264</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrcrb'>3792</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>undo header</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>1126</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>814</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>6227</td><td align="right" headers="CRAvgTime(us) Congst" class='awrnc'>3320</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>1427</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>1427</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>others</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>960</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>960</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Congst" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>989</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>656</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>1064</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>undo block</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Congst" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5460"></a>
<h3 class="awr">Global Cache Transfer (Immediate)</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> % of Blocks Received requiring 2 or 3 hops </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer (immediate) statistics"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="CR">CR</th>
<th class="awrbg" colspan=" 3" id="Current">Current</th>
</tr><tr>
<th class="awrbg" scope="col">Src Inst#</th><th class="awrbg" scope="col">Block   Class  </th><th class="awrbg" scope="col">Blocks Lost</th><th class="awrbg" scope="col" id="ImmedBlks|Received">Immed Blks Received</th><th class="awrbg" scope="col" id="%|2hop">% 2hop</th><th class="awrbg" scope="col" id="%|3hop">% 3hop</th><th class="awrbg" scope="col" id="ImmedBlks|Received">Immed Blks Received</th><th class="awrbg" scope="col" id="%|2hop">% 2hop</th><th class="awrbg" scope="col" id="%|3hop">% 3hop</th></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>data block</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrclb'>2,549</td><td align="right" headers="CR %|2hop" class='awrc'>100.00</td><td align="right" headers="CR %|3hop" class='awrc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrclb'>626</td><td align="right" headers="Current %|2hop" class='awrc'>100.00</td><td align="right" headers="Current %|3hop" class='awrcrb'>0.00</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>undo header</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrnclb'>678</td><td align="right" headers="CR %|2hop" class='awrnc'>100.00</td><td align="right" headers="CR %|3hop" class='awrnc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrnclb'>&#160;</td><td align="right" headers="Current %|2hop" class='awrnc'>&#160;</td><td align="right" headers="Current %|3hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>others</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrclb'>12</td><td align="right" headers="CR %|2hop" class='awrc'>100.00</td><td align="right" headers="CR %|3hop" class='awrc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrclb'>11</td><td align="right" headers="Current %|2hop" class='awrc'>100.00</td><td align="right" headers="Current %|3hop" class='awrcrb'>0.00</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>undo block</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrnclb'>&#160;</td><td align="right" headers="CR %|2hop" class='awrnc'>&#160;</td><td align="right" headers="CR %|3hop" class='awrnc'>&#160;</td><td align="right" headers="Current ImmedBlks|Received" class='awrnclb'>&#160;</td><td align="right" headers="Current %|2hop" class='awrnc'>&#160;</td><td align="right" headers="Current %|3hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5470"></a>
<h3 class="awr">Global Cache Times (Immediate)</h3>
<ul>
<li class="awr"> Blocks Lost, 2-hop and 3-hop Average times in (us) </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache times (immediate) statistics"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 3" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col">Src Inst#</th><th class="awrbg" scope="col">Block   Class  </th><th class="awrbg" scope="col">Lost Time</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="2hop">2hop</th><th class="awrbg" scope="col" id="3hop">3hop</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="2hop">2hop</th><th class="awrbg" scope="col" id="3hop">3hop</th></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>data block</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrclb'>3956</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrc'>3956</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrclb'>2962</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrc'>2962</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>undo header</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnclb'>814</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrnc'>814</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>others</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrclb'>960</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrc'>960</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrclb'>656</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrc'>656</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>2</td><td class='awrnc'>undo block</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnclb'>&#160;</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="8"></a>
<h2 class="awr">
Interconnect Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#7800">Interconnect Latency Stats</a></li>
<li class="awr"><a class="awr" href="#7900">Interconnect Throughput by Client</a></li>
<li class="awr"><a class="awr" href="#8000">Interconnect Device Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7800"></a>
<h3 class="awr">Interconnect Ping Latency Statistics</h3>
<ul>
<li class="awr"> Ping latency of the roundtrip of a message from this instance to </li>
<li class="awr"> target instances.  </li>
<li class="awr"> The target instance is identified by an instance number. </li>
<li class="awr"> Average and standard deviation of ping latency is given in microseconds </li>
<li class="awr"> for message sizes of 500 bytes and 8K. </li>
<li class="awr"> Note that latency of a message from the instance to itself is used as </li>
<li class="awr"> control, since message latency can include wait for CPU</li>
</ul>
<table border="0" class="tdiff" summary="This table displays IC ping latency statistics"><tr><th class="awrbg" scope="col">Target Instance</th><th class="awrbg" scope="col">500B Ping Count</th><th class="awrbg" scope="col">Avg Latency 500B msg</th><th class="awrbg" scope="col">Stddev 500B msg</th><th class="awrbg" scope="col">8K Ping Count</th><th class="awrbg" scope="col">Avg Latency 8K msg</th><th class="awrbg" scope="col">Stddev 8K msg</th></tr>
<tr><td align="right" class='awrc'>1</td><td align="right" class='awrc'>57</td><td align="right" class='awrc'>727</td><td align="right" class='awrc'>0.65</td><td align="right" class='awrc'>62</td><td align="right" class='awrc'>720</td><td align="right" class='awrc'>0.64</td></tr>
<tr><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>57</td><td align="right" class='awrnc'>1232</td><td align="right" class='awrnc'>0.75</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>1319</td><td align="right" class='awrnc'>0.68</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7900"></a>
<h3 class="awr">Interconnect Throughput by Client</h3>
<ul>
<li class="awr"> Throughput of interconnect usage by major consumers </li>
<li class="awr"> All throughput numbers are megabytes per second</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Interconnect throughput by client statistics"><tr><th class="awrbg" scope="col">Used By</th><th class="awrbg" scope="col">Send Mbytes/sec</th><th class="awrbg" scope="col">Receive Mbytes/sec</th></tr>
<tr><td scope="row" class='awrc'>Global Cache</td><td align="right" class='awrc'>0.31</td><td align="right" class='awrc'>0.12</td></tr>
<tr><td scope="row" class='awrnc'>Parallel Query</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>DB Locks</td><td align="right" class='awrc'>5.38</td><td align="right" class='awrc'>4.50</td></tr>
<tr><td scope="row" class='awrnc'>DB Streams</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8000"></a>
<h3 class="awr">Interconnect Device Statistics</h3>
<ul>
<li class="awr"> Throughput and errors of interconnect devices (at OS level) </li>
<li class="awr"> All throughput numbers are megabytes per second</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Interconnect device statistics. IP address, public, source, etc. are displayed for each device"><tr><th class="awrbg" scope="col">Device Name</th><th class="awrbg" scope="col">IP Address</th><th class="awrbg" scope="col">Public</th><th class="awrbg" scope="col">Source</th><th class="awrbg" scope="col">Send Mbytes/sec</th><th class="awrbg" scope="col">Send Errors</th><th class="awrbg" scope="col">Send Dropped</th><th class="awrbg" scope="col">Send Buffer Overrun</th><th class="awrbg" scope="col">Send Carrier Lost</th><th class="awrbg" scope="col">Receive Mbytes/sec</th><th class="awrbg" scope="col">Receive Errors</th><th class="awrbg" scope="col">Receive Dropped</th><th class="awrbg" scope="col">Receive Buffer Overrun</th><th class="awrbg" scope="col">Receive Frame Errors</th></tr>
<tr><td scope="row" class='awrc'>fg-priv:1</td><td class='awrc'>169.254.22.248</td><td class='awrc'>NO</td><td class='awrc'>&#160;</td>
<td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td>
<td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="8790"></a>
<h3 class="awr">Dynamic Remastering Statistics</h3>
<ul>
<li class="awr"> Times are in seconds </li>
<li class="awr"> Affinity objects - Affinity objects mastered at the begin/end snapshot </li>
<li class="awr"> Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot</li>
</ul>
<table border="0" class="tdiff" summary="Dynamic Remastering Statistics. . Times are in seconds. Affinity objects - Affinity objects mastered at the begin/end snapshot. Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot"><tr><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Remaster Op</th><th class="awrbg" scope="col">Begin Snap</th><th class="awrbg" scope="col">End Snap</th></tr>
<tr><td scope="row" class='awrc'>affinity objects</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>4</td></tr>
<tr><td scope="row" class='awrnc'>read-mostly objects</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>5</td></tr>
<tr><td scope="row" class='awrc'>affinity objects (other inst)</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>13</td></tr>
<tr><td scope="row" class='awrnc'>read-mostly objects (persistent)</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>4</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<p />
End of Report
</body></html>
Report written to awr.html
SQL> Disconnected from Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0
Current Database
~~~~~~~~~~~~~~~~
DB Id	       DB Name	      Container Name
-------------- -------------- --------------
 2732778098	P80DB	       p80db











Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
* 2732778098	 1	P80DB	     p80db1	  mcracpoc1.ex
* 2732778098	 2	P80DB	     p80db2	  mcracpoc2.ex

Using 2732778098 for database Id
Using instances ALL (default 'ALL')


Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.


Enter value for num_days: 
Listing all Completed Snapshots
DB Name      Snap Id	   Snap Started    Snap Level
------------ ---------- ------------------ ----------

P80DB		     1	07 Feb 2020 09:00    1
		     2	07 Feb 2020 10:00    1
		     3	07 Feb 2020 11:00    1
		     4	07 Feb 2020 12:00    1
		     5	07 Feb 2020 13:00    1
		     6	07 Feb 2020 14:00    1
		     7	07 Feb 2020 15:00    1
		     8	07 Feb 2020 16:00    1
		     9	07 Feb 2020 17:00    1
		    10	07 Feb 2020 18:00    1
		    11	07 Feb 2020 19:00    1
		    12	07 Feb 2020 20:00    1
		    13	07 Feb 2020 21:00    1
		    14	10 Feb 2020 22:00    1
		    15	11 Feb 2020 12:56    1
		    16	11 Feb 2020 13:37    1
		    17	11 Feb 2020 13:41    1
		    18	11 Feb 2020 13:44    1
		    19	11 Feb 2020 13:54    1
		    20	11 Feb 2020 14:04    1
		    21	11 Feb 2020 14:14    1
		    22	11 Feb 2020 14:29    1
		    23	11 Feb 2020 14:32    1
		    24	11 Feb 2020 14:35    1
		    25	11 Feb 2020 14:38    1
		    26	11 Feb 2020 14:48    1
		    27	11 Feb 2020 14:54    1
		    28	11 Feb 2020 14:58    1
		    29	11 Feb 2020 15:08    1
		    30	11 Feb 2020 20:40    1
		    31	11 Feb 2020 20:47    1
		    32	11 Feb 2020 20:50    1
		    33	11 Feb 2020 20:51    1
		    34	11 Feb 2020 21:01    1
		    35	11 Feb 2020 21:16    1
		    36	11 Feb 2020 21:17    1
		    37	11 Feb 2020 21:22    1
		    38	11 Feb 2020 21:25    1
		    39	11 Feb 2020 21:27    1
		    40	11 Feb 2020 21:28    1
		    41	11 Feb 2020 21:39    1
		    42	11 Feb 2020 21:44    1
		    43	11 Feb 2020 21:54    1
		    44	12 Feb 2020 07:50    1
		    45	12 Feb 2020 08:17    1
		    46	12 Feb 2020 08:28    1
		    47	12 Feb 2020 08:30    1
		    48	12 Feb 2020 08:33    1
		    49	12 Feb 2020 08:36    1
		    50	12 Feb 2020 08:37    1
		    51	12 Feb 2020 08:39    1
		    52	12 Feb 2020 08:49    1
		    53	12 Feb 2020 08:54    1
		    54	12 Feb 2020 09:04    1
		    55	12 Feb 2020 09:07    1
		    56	12 Feb 2020 09:18    1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 55

End   Snapshot Id specified: 56



Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_rac_55_56.txt.  To use this name,
press <return> to continue, otherwise enter an alternative.


Using the report name awr_rac.txt

WORKLOAD REPOSITORY REPORT (RAC)

Database Summary
~~~~~~~~~~~~~~~~
				   Database					   Snapshot Ids     Number of Instances     Number of Hosts	Report Total (minutes)
-----------------------------------------------------------------------------	-----------------   ------------------	 ------------------   ------------------------
	 Id Name      Unique Name Role		   Edition RAC CDB Block Size	   Begin      End   In Report	 Total	 In Report    Total	  DB time Elapsed time
----------- --------- ----------- ---------------- ------- --- --- ----------	-------- --------   --------- --------	 --------- --------   ----------- ------------
 2732778098 P80DB     p80db	  PRIMARY	   EE	   YES NO	 8192	      55       56	    2	     2		 2	  2	 1,211.76	 10.35
Database Instances Included In Report
-> Listed in order of instance number, I#
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
																      Avg Active
  I# Instance  Host	  Startup	  Begin Snap Time End Snap Time   Release	  Elapsed Time(min) DB time(min) Up Time(hrs)	Sessions Platform
---- --------- ---------- --------------- --------------- --------------- --------------- ----------------- ------------ ------------ ---------- ---------------
   1 p80db1    mcracpoc1. 12-Feb-20 07:39 12-Feb-20 09:07 12-Feb-20 09:18 19.0.0.0.0		      10.33	  616.70	 1.64	   59.68 Linux x86 64-bi
   2 p80db2    mcracpoc2. 12-Feb-20 07:39 12-Feb-20 09:07 12-Feb-20 09:18 19.0.0.0.0		      10.35	  595.07	 1.64	   57.49 Linux x86 64-bi

Top ADDM Findings by Average Active Sessions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Finding Name				 Avg act Percen Task Name		       Begin Snap Time End Snap Time
---------------------------------------- ------- ------ ------------------------------ --------------- ---------------
Interconnect Latency			  117.08 1.E+02 ADDM:2732778098_56	       12-Feb-20 09:07 12-Feb-20 09:18
Top SQL Statements			  117.08  99.25 ADDM:2732778098_56	       12-Feb-20 09:07 12-Feb-20 09:18
"User I/O" wait Class			  117.08  68.21 ADDM:2732778098_56	       12-Feb-20 09:07 12-Feb-20 09:18
Global Cache Messaging			  117.08  27.31 ADDM:2732778098_56	       12-Feb-20 09:07 12-Feb-20 09:18
Buffer Busy - Hot Objects		  117.08  12.73 ADDM:2732778098_56	       12-Feb-20 09:07 12-Feb-20 09:18
Cache Sizes
-> All values are in Megabytes
-> Listed in order of instance number, I#
-> End values displayed only if different from Begin values
~~~~~~~~~~~
	 Memory Target	       Sga Target	    DB Cache	      Shared Pool	   Large Pool	       Java Pool	  Streams Pool	       PGA Target
       -----------------   -----------------   -----------------   -----------------   -----------------   -----------------   -----------------   -----------------
  I#	  Begin      End      Begin	 End	  Begin      End      Begin	 End	  Begin      End      Begin	 End	  Begin      End      Begin	 End   Log Buffer
----   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   ----------
   1			      9,664		  7,872 	      1,472		    160 						      3,232		     19.4
   2			      9,664		  7,872 	      1,472		    160 						      3,232		     19.4
 ~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~
 Avg			      9,664		  7,872 	      1,472		    160 						      3,232		     19.4
 Min			      9,664		  7,872 	      1,472		    160 						      3,232		     19.4
 Max			      9,664		  7,872 	      1,472		    160 						      3,232		     19.4

OS Statistics By Instance		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Listed in order of instance number, I#
-> End values are diplayed only if different from begin values

	      CPU		Load			  % CPU 				  Time (s)			 Memory 	    End Values
       -----------------   -------------   ----------------------------------	--------------------------------------------   ----------   -------------------------
  I#   #CPUs #Core #Sckt    Begin    End   % Busy  % Usr  % Sys  % WIO	% Idl		  Busy		 Idle	       Total	       MB   #CPU #Cor #Sck Memory (M)
----   ----- ----- -----   ------ ------   ------ ------ ------ ------ ------	-------------- -------------- --------------   ----------   ---- ---- ---- ----------
   1	  32	16     1     21.5   17.4     26.0    6.9   12.3   42.4	 74.0	       4,779.7	     13,607.0	    18,386.7	257,947.8
   2	  32	16     1     18.2   13.5     18.4    5.2    9.5   37.5	 81.6	       3,384.4	     15,003.3	    18,387.7	257,947.8
 ~~~										~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum										       8,164.1	     28,610.4	    36,774.5
			  --------------------------------------------------------------------------------------------------------------------


Time Model				   DB/Inst: P80DB/p80db1  Snaps: 55-56

					 SQL Exec		     Hard Parse
  I#	DB time (s)	DB CPU (s)	  Ela (s)  Parse Ela (s)	Ela (s) PL/SQL Ela (s)	 Java Ela (s)	 bg time (s)	 bg CPU (s)
---- -------------- -------------- -------------- -------------- -------------- -------------- -------------- -------------- --------------
   1	   37,001.9	   2,722.9	 37,000.5	     1.0	    0.9 	  46.0		  0.0	     2,822.7	    1,321.1
   2	   35,703.9	   1,725.5	 35,700.4	     9.5	    9.4 	  33.4		  0.0	     2,679.6	    1,134.2
 ~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum	   72,705.8	   4,448.4	 72,700.9	    10.5	   10.3 	  79.4		  0.0	     5,502.2	    2,455.3
 Avg	   36,352.9	   2,224.2	 36,350.4	     5.3	    5.1 	  39.7		  0.0	     2,751.1	    1,227.6
 Std	      917.8	     705.3	    919.3	     6.0	    6.0 	   8.9		  0.0	       101.2	      132.2
			  --------------------------------------------------------------------------------------------------------------------

Time Model - % of DB time		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]

							      % DB time 							      % bg time
		      ----------------------------------------------------------------------------------------- 		   --------------
	    % Total													 % Total
  I#	    DB time	      DB CPU   SQL Exec Ela	 Parse Ela     Hard Parse     PL/SQL Ela       Java Ela 	 bg time	   bg CPU
---- --------------   -------------- -------------- -------------- -------------- -------------- --------------   --------------   --------------
   1	       50.9		 7.4	      100.0	       0.0	      0.0	     0.0	    0.0 	    51.3	     46.8
   2	       49.1		 4.8	      100.0	       0.0	      0.0	     0.0	    0.0 	    48.7	     42.3
 ~~~ ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~
 Avg	       50.0		 6.1	      100.0	       0.0	      0.0	     0.0	    0.0 	    50.0	     44.6
			  --------------------------------------------------------------------------------------------------------------------


Foreground Wait Classes -  % of Total DB timeDB/Inst: P80DB/p80db1  Snaps: 55-
-> Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time

	  User I/O	 Sys I/O	 Other	      Applic	    Commit	 Network      Concurcy	      Config	   Cluster	   Admin     Scheduler	      DB CPU
---- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- -------------
	      68.2	     0.0	   1.1		 0.0	       0.0	     0.0	   0.1		 0.5	      27.5	     0.0	   N/A		 6.1
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Classes 		   DB/Inst: P80DB/p80db1  Snaps: 55-56

  I#   User I/O(s)    Sys I/O(s)      Other(s)	  Applic (s)	Commit (s)   Network (s)  Concurcy (s)	  Config (s)   Cluster (s)     Admin (s) Scheduler (s)	  DB CPU (s)	    DB time
---- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- --------------
   1	  26,823.5	     3.7	 709.8		 0.0	       0.2	     0.0	  64.3		99.9	   8,062.5	     0.0	   N/A	     2,722.9	   37,001.9
   2	  22,769.1	     1.2	  84.8		 0.0	       0.2	     0.0	  43.2	       261.2	  11,946.6	     0.0	   N/A	     1,725.5	   35,703.9
 ~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum	  49,592.6	     4.9	 794.7		 0.0	       0.4	     0.0	 107.5	       361.1	  20,009.1	     0.0	   0.0	     4,448.4	   72,705.8
 Avg	  24,796.3	     2.5	 397.3		 0.0	       0.2	     0.0	  53.8	       180.5	  10,004.6	     0.0	   N/A	     2,224.2	   36,352.9
 Std	   2,866.9	     1.8	 441.9		 0.0	       0.0	     0.0	  14.9	       114.1	   2,746.5	     0.0	   N/A	       705.3	      917.8
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Classes -  % of DB time    DB/Inst: P80DB/p80db1  Snaps: 55-56
-> % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time

										      % DB time
       -----------------------------------------------------------------------------------------------------------------------------------------------------------------------
																						       % Total
  I#	    User I/O	   Sys I/O	   Other	Applic	      Commit	   Network	Concurcy	Config	     Cluster	     Admin     Scheduler	DB CPU	       DB time
----   ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- -------------	 -------------
   1		72.5	       0.0	     1.9	   0.0		 0.0	       0.0	     0.2	   0.3		21.8	       0.0	     N/A	   7.4		  50.9
   2		63.8	       0.0	     0.2	   0.0		 0.0	       0.0	     0.1	   0.7		33.5	       0.0	     N/A	   4.8		  49.1
 ~~~   ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~
 Avg		68.1	       0.0	     1.1	   0.0		 0.0	       0.0	     0.1	   0.5		27.6	       0.0	     N/A	   6.1
			  --------------------------------------------------------------------------------------------------------------------


Top Timed Events			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time '	       : Per-instance 'Wait Time Avg ' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *   User I/O   db file sequential read			5,545,120	0.0	  37,013.53   6.67ms	50.91	    6.67ms     6.14ms	  7.20ms   744.84us    2
       User I/O   db file parallel read 			1,357,932	0.0	  12,586.45   9.27ms	17.31	    9.27ms     8.59ms	  9.95ms      .96ms    2
       Cluster	  gc cr multi block grant			1,059,171	0.0	   7,350.46   6.94ms	10.11	    7.46ms     4.20ms	 10.73ms     4.62ms    2
       Cluster	  gc cr grant busy				  963,728	0.0	   4,941.08   5.13ms	 6.80	    5.07ms     3.12ms	  7.01ms     2.75ms    2
		  DB CPU					      N/A	N/A	   4,448.37		 6.12						       2
       Cluster	  gc current grant busy 			  843,374	0.0	   4,200.27   4.98ms	 5.78	    4.92ms     3.08ms	  6.76ms     2.60ms    2
       System I/O log file parallel write			  169,654	0.0	   1,402.19   8.26ms	 1.93	    8.44ms     7.01ms	  9.88ms     2.03ms    2
       Cluster	  gc cr block lost				    2,030	0.0	   1,073.02 528.58ms	 1.48	  529.31ms   528.56ms	530.05ms     1.06ms    2
       Cluster	  gc current block lost 			    1,862	0.0	     990.93 532.18ms	 1.36	  557.09ms   531.64ms	582.53ms    35.99ms    2
       Cluster	  gc current grant 2-way			  263,182	0.0	     741.95   2.82ms	 1.02	    4.65ms     1.60ms	  7.70ms     4.31ms    2

   1   User I/O   db file sequential read			2,791,542	0.0	  20,093.66   7.20ms	54.30
       User I/O   db file parallel read 			  677,120	0.0	   6,736.90   9.95ms	18.21
		  DB CPU					      N/A	N/A	   2,722.91		 7.36
       Cluster	  gc cr multi block grant			  614,175	0.0	   2,577.34   4.20ms	 6.97
       Cluster	  gc cr grant busy				  467,384	0.0	   1,459.47   3.12ms	 3.94
       Cluster	  gc current grant busy 			  407,534	0.0	   1,255.38   3.08ms	 3.39
       Cluster	  gc cr block lost				    2,002	0.0	   1,058.18 528.56ms	 2.86
       Cluster	  gc current block lost 			    1,842	0.0	     979.28 531.64ms	 2.65
       System I/O log file parallel write			   74,241	0.0	     733.68   9.88ms	 1.98
       Other	  KJC: Wait for msg sends to complete		    7,497	0.0	     622.40  83.02ms	 1.68

   2   User I/O   db file sequential read			2,753,578	0.0	  16,919.87   6.14ms	47.39
       User I/O   db file parallel read 			  680,812	0.0	   5,849.55   8.59ms	16.38
       Cluster	  gc cr multi block grant			  444,996	0.0	   4,773.13  10.73ms	13.37
       Cluster	  gc cr grant busy				  496,344	0.0	   3,481.61   7.01ms	 9.75
       Cluster	  gc current grant busy 			  435,840	0.0	   2,944.88   6.76ms	 8.25
		  DB CPU					      N/A	N/A	   1,725.46		 4.83
       System I/O log file parallel write			   95,413	0.0	     668.51   7.01ms	 1.87
       Cluster	  gc current grant 2-way			   52,571	0.0	     404.82   7.70ms	 1.13
       System I/O db file parallel write			   84,370	0.0	     365.87   4.34ms	 1.02
       Configurat enq: HW - contention				      171	0.0	     259.93 1520.06m	 0.73
			  --------------------------------------------------------------------------------------------------------------------

Top Timed Foreground Events		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Foreground Activity is captured in release 11g and above
-> For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time'	      : Per-instance 'Wait Time Avg' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *   User I/O   db file sequential read			5,543,447	0.0	  37,001.63   6.67ms	50.89	    6.67ms     6.14ms	  7.20ms   744.77us    2
       User I/O   db file parallel read 			1,357,929	0.0	  12,586.43   9.27ms	17.31	    9.27ms     8.59ms	  9.95ms      .96ms    2
       Cluster	  gc cr multi block grant			1,059,162	0.0	   7,350.45   6.94ms	10.11	    7.46ms     4.20ms	 10.73ms     4.62ms    2
       Cluster	  gc cr grant busy				  963,342	0.0	   4,940.33   5.13ms	 6.79	    5.07ms     3.12ms	  7.02ms     2.75ms    2
		  DB CPU					      N/A	N/A	   4,448.37		 6.12						       2
       Cluster	  gc current grant busy 			  843,000	0.0	   4,199.57   4.98ms	 5.78	    4.92ms     3.08ms	  6.76ms     2.60ms    2
       Cluster	  gc cr block lost				    2,027	0.0	   1,071.87 528.80ms	 1.47	  529.42ms   528.78ms	530.05ms   900.35us    2
       Cluster	  gc current block lost 			    1,859	0.0	     989.32 532.18ms	 1.36	  557.08ms   531.63ms	582.53ms    35.99ms    2
       Cluster	  gc current grant 2-way			  263,019	0.0	     741.72   2.82ms	 1.02	    4.65ms     1.60ms	  7.70ms     4.32ms    2
       Other	  KJC: Wait for msg sends to complete		    8,103	0.0	     669.90  82.67ms	 0.92	   77.18ms    70.57ms	 83.79ms     9.34ms    2

   1   User I/O   db file sequential read			2,790,303	0.0	  20,084.45   7.20ms	54.28
       User I/O   db file parallel read 			  677,117	0.0	   6,736.88   9.95ms	18.21
		  DB CPU					      N/A	N/A	   2,722.91		 7.36
       Cluster	  gc cr multi block grant			  614,167	0.0	   2,577.32   4.20ms	 6.97
       Cluster	  gc cr grant busy				  467,175	0.0	   1,459.04   3.12ms	 3.94
       Cluster	  gc current grant busy 			  407,257	0.0	   1,254.84   3.08ms	 3.39
       Cluster	  gc cr block lost				    1,999	0.0	   1,057.03 528.78ms	 2.86
       Cluster	  gc current block lost 			    1,839	0.0	     977.67 531.63ms	 2.64
       Other	  KJC: Wait for msg sends to complete		    7,421	0.0	     621.77  83.79ms	 1.68
       Cluster	  gc current grant 2-way			  210,475	0.0	     336.92   1.60ms	 0.91

   2   User I/O   db file sequential read			2,753,144	0.0	  16,917.19   6.14ms	47.38
       User I/O   db file parallel read 			  680,812	0.0	   5,849.55   8.59ms	16.38
       Cluster	  gc cr multi block grant			  444,995	0.0	   4,773.13  10.73ms	13.37
       Cluster	  gc cr grant busy				  496,167	0.0	   3,481.29   7.02ms	 9.75
       Cluster	  gc current grant busy 			  435,743	0.0	   2,944.73   6.76ms	 8.25
		  DB CPU					      N/A	N/A	   1,725.46		 4.83
       Cluster	  gc current grant 2-way			   52,544	0.0	     404.81   7.70ms	 1.13
       Configurat enq: HW - contention				      170	0.0	     259.93 1528.99m	 0.73
       Cluster	  gc current block 2-way			   20,248	0.0	     152.64   7.54ms	 0.43
       Cluster	  gc current grant read-mostly invalidatio	   50,080	0.0	     108.04   2.16ms	 0.30
			  --------------------------------------------------------------------------------------------------------------------

Top Timed Background Events		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> % of bg time: % of background elapsed time
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time'	      : Per-instance 'Wait Time Avg' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *		  background cpu time				      N/A	N/A	   2,455.29		44.62						       2
       System I/O log file parallel write			  169,644	0.0	   1,402.11   8.27ms	25.48	    8.44ms     7.01ms	  9.88ms     2.03ms    2
       System I/O db file parallel write			  173,580	0.0	     715.52   4.12ms	13.00	    4.13ms     3.92ms	  4.34ms   294.92us    2
       Other	  LGWR any worker group 			   99,086	0.0	     427.85   4.32ms	 7.78	    4.38ms     3.41ms	  5.34ms     1.36ms    2
       Other	  LGWR worker group ordering			   16,874	0.0	      51.16   3.03ms	 0.93	    3.18ms     2.86ms	  3.50ms   450.53us    2
       Other	  enq: CR - block range reuse ckpt		    2,850	0.0	      44.21  15.51ms	 0.80	   15.29ms    12.22ms	 18.37ms     4.35ms    2
       Other	  LGWR all worker groups			    5,606	0.0	      36.45   6.50ms	 0.66	    6.11ms     4.82ms	  7.40ms     1.82ms    2
       System I/O control file sequential read			    7,272	0.0	      29.55   4.06ms	 0.54	    4.06ms     3.89ms	  4.23ms   235.98us    2
       User I/O   Disk file Mirror Read 			    1,655	0.0	      24.99  15.10ms	 0.45	   15.16ms     9.51ms	 20.82ms     8.00ms    2
       System I/O control file parallel write			      613	0.0	      22.51  36.72ms	 0.41	   37.37ms    28.95ms	 45.79ms    11.90ms    2

   1		  background cpu time				      N/A	N/A	   1,321.10		46.80
       System I/O log file parallel write			   74,235	0.0	     733.63   9.88ms	25.99
       System I/O db file parallel write			   89,210	0.0	     349.65   3.92ms	12.39
       Other	  LGWR any worker group 			   46,578	0.0	     248.71   5.34ms	 8.81
       Other	  LGWR worker group ordering			   12,366	0.0	      35.39   2.86ms	 1.25
       Other	  enq: CR - block range reuse ckpt		    1,526	0.0	      28.04  18.37ms	 0.99
       Other	  LGWR all worker groups			    3,661	0.0	      27.08   7.40ms	 0.96
       System I/O control file sequential read			    3,694	0.0	      15.62   4.23ms	 0.55
       Other	  ASM file metadata operation			    3,122	0.0	      10.09   3.23ms	 0.36
       System I/O control file parallel write			      330	0.0	       9.55  28.95ms	 0.34

   2		  background cpu time				      N/A	N/A	   1,134.19		42.33
       System I/O log file parallel write			   95,409	0.0	     668.48   7.01ms	24.95
       System I/O db file parallel write			   84,370	0.0	     365.87   4.34ms	13.65
       Other	  LGWR any worker group 			   52,508	0.0	     179.14   3.41ms	 6.69
       User I/O   Disk file Mirror Read 			      818	0.0	      17.03  20.82ms	 0.64
       Other	  enq: CR - block range reuse ckpt		    1,324	0.0	      16.17  12.22ms	 0.60
       Other	  LGWR worker group ordering			    4,508	0.0	      15.77   3.50ms	 0.59
       System I/O control file sequential read			    3,578	0.0	      13.93   3.89ms	 0.52
       Other	  IMR slave acknowledgement msg 		    1,860	0.0	      12.98   6.98ms	 0.48
       System I/O control file parallel write			      283	0.0	      12.96  45.79ms	 0.48
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Events (Global) 	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %DB time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
User I/O   db file sequential read			 5,543,447	 0.0	   37,001.63   6.67ms	 50.89	     6.67ms	6.14ms	   7.20ms   744.77us
User I/O   db file parallel read			 1,357,929	 0.0	   12,586.43   9.27ms	 17.31	     9.27ms	8.59ms	   9.95ms      .96ms
Cluster    gc cr multi block grant			 1,059,162	 0.0	    7,350.45   6.94ms	 10.11	     7.46ms	4.20ms	  10.73ms     4.62ms
Cluster    gc cr grant busy				   963,342	 0.0	    4,940.33   5.13ms	  6.79	     5.07ms	3.12ms	   7.02ms     2.75ms
Cluster    gc current grant busy			   843,000	 0.0	    4,199.57   4.98ms	  5.78	     4.92ms	3.08ms	   6.76ms     2.60ms
Cluster    gc cr block lost				     2,027	 0.0	    1,071.87 528.80ms	  1.47	   529.42ms   528.78ms	 530.05ms   900.35us
Cluster    gc current block lost			     1,859	 0.0	      989.32 532.18ms	  1.36	   557.08ms   531.63ms	 582.53ms    35.99ms
Cluster    gc current grant 2-way			   263,019	 0.0	      741.72   2.82ms	  1.02	     4.65ms	1.60ms	   7.70ms     4.32ms
Other	   KJC: Wait for msg sends to complete		     8,103	 0.0	      669.90  82.67ms	  0.92	    77.18ms    70.57ms	  83.79ms     9.34ms
Configurat enq: HW - contention 			       630	 0.0	      359.07 569.95ms	  0.49	   872.25ms   215.51ms	1528.99ms   928.77ms
Cluster    gc cr grant 2-way				   233,655	 0.0	      333.17   1.43ms	  0.46	     2.21ms	1.40ms	   3.02ms     1.15ms
Cluster    gc current block 2-way			    20,830	 0.0	      154.45   7.41ms	  0.21	     5.32ms	3.11ms	   7.54ms     3.13ms
Cluster    gc current grant read-mostly invalidatio	    64,599	 0.0	      151.19   2.34ms	  0.21	     2.56ms	2.16ms	   2.97ms   576.13us
Concurrenc buffer busy waits				       594	 0.0	      107.17 180.42ms	  0.15	   260.45ms   132.66ms	 388.24ms   180.72ms
Other	   enq: US - contention 			     1,700	 0.0	       69.87  41.10ms	  0.10	    39.89ms    37.65ms	  42.13ms     3.17ms
Other	   enq: CR - block range reuse ckpt		     1,053	 0.0	       31.52  29.94ms	  0.04	    30.92ms    28.63ms	  33.22ms     3.25ms
Cluster    gc current grant congested			     2,760	 0.0	       28.17  10.21ms	  0.04	    10.40ms	5.79ms	  15.01ms     6.52ms
Cluster    gc cr multi block mixed			     1,621	 0.0	       25.82  15.93ms	  0.04	    21.19ms	7.50ms	  34.88ms    19.36ms
Cluster    gc current block busy			     3,842	 0.0	       10.80   2.81ms	  0.01	     2.67ms	1.17ms	   4.16ms     2.12ms
Other	   DLM cross inst call completion			70	 0.0		9.73 139.03ms	  0.01	   135.83ms   127.83ms	 143.82ms    11.31ms
Cluster    gc cr grant congested			     1,582	 0.0		5.83   3.69ms	  0.01	     3.92ms	3.64ms	   4.21ms   401.75us
Other	   reliable message				       436	 0.0		4.13   9.47ms	  0.01	    10.56ms	8.69ms	  12.43ms     2.64ms
Cluster    gc cr block 2-way				     1,186	 0.0		3.64   3.07ms	  0.00	     2.78ms	1.38ms	   4.18ms     1.98ms
User I/O   Data file init write 				64	 0.0		2.54  39.63ms	  0.00	    41.03ms    29.79ms	  52.28ms    15.90ms
System I/O control file parallel write				66	 0.0		2.48  37.53ms	  0.00	    38.98ms    36.70ms	  41.27ms     3.23ms
Other	   IPC send completion sync			       322	 0.0		2.33   7.23ms	  0.00	     4.31ms   794.59us	   7.82ms     4.96ms
Other	   KSV master wait				       264	 0.0		2.28   8.64ms	  0.00	    10.90ms	7.34ms	  14.45ms     5.02ms
System I/O control file sequential read 		       620	 0.0		2.08   3.36ms	  0.00	     3.36ms	3.36ms	   3.36ms     5.85us
Configurat undo segment extension				52	98.1		1.99  38.31ms	  0.00	    54.59ms    19.31ms	  89.88ms    49.90ms
Other	   latch free					     4,236	 0.0		1.79 423.48us	  0.00	   388.36us   335.91us	 440.81us    74.18us
Cluster    gc current block congested			       382	 0.0		1.66   4.36ms	  0.00	     4.13ms	3.89ms	   4.37ms   336.46us
User I/O   db file single write 				44	 0.0		1.16  26.37ms	  0.00	    29.28ms    24.71ms	  33.86ms     6.47ms
Cluster    gc cr block busy					 4	 0.0		1.07 267.98ms	  0.00	   267.98ms   267.98ms	 267.98ms
Other	   latch: gc element				     1,397	 0.0		0.89 638.17us	  0.00	   536.57us   404.53us	 668.60us   186.72us
User I/O   Disk file Mirror Read				62	 0.0		0.63  10.13ms	  0.00	    10.47ms	5.19ms	  15.75ms     7.46ms
Other	   enq: CF - contention 				23	 0.0		0.36  15.86ms	  0.00	    10.19ms	1.50ms	  18.88ms    12.29ms
Commit	   log file sync					53	 0.0		0.36   6.80ms	  0.00	     6.85ms	6.35ms	   7.35ms   703.93us
System I/O kfk: async disk IO					44	 0.0		0.34   7.83ms	  0.00	     9.60ms	6.83ms	  12.37ms     3.92ms
Other	   latch: enqueue hash chains			       690	 0.0		0.32 458.16us	  0.00	   364.65us   209.55us	 519.75us   219.35us
Other	   latch: gcs resource hash			       880	 0.0		0.28 323.63us	  0.00	   292.65us   237.90us	 347.40us    77.43us
Other	   CSS initialization					40	 0.0		0.24   5.99ms	  0.00	     5.62ms	5.00ms	   6.23ms   867.35us
Other	   latch: redo allocation			       673	 0.0		0.18 272.12us	  0.00	   242.13us   162.35us	 321.91us   112.82us
Concurrenc row cache mutex					22	 0.0		0.16   7.12ms	  0.00	     3.92ms    14.00us	   7.83ms     5.53ms
Other	   PX Deq: Slave Session Stats			       208	 0.0		0.15 706.34us	  0.00	   708.84us   448.28us	    .97ms   368.50us
Other	   enq: PS - contention 			       107	 2.8		0.11   1.04ms	  0.00	     1.10ms	1.02ms	   1.18ms   112.62us
Other	   CSS operation: action				60	 0.0		0.09   1.54ms	  0.00	     1.44ms	1.26ms	   1.61ms   248.15us
User I/O   db file scattered read				13	 0.0		0.08   5.92ms	  0.00	     5.92ms	5.92ms	   5.92ms
User I/O   direct path write					 1	 0.0		0.07  74.16ms	  0.00	    74.16ms    74.16ms	  74.16ms
Other	   latch: cache buffers lru chain		       425	 0.0		0.06 152.68us	  0.00	   124.28us    65.39us	 183.17us    83.28us
Other	   lock deadlock retry				     1,859     100.0		0.06  33.10us	  0.00	    27.01us    20.80us	  33.23us     8.79us
Other	   PX Deq: reap credit				     2,292     100.0		0.06  25.74us	  0.00	    23.66us    21.01us	  26.32us     3.75us
Concurrenc latch: cache buffers chains			       174	 0.0		0.06 334.63us	  0.00	   268.77us   151.84us	 385.71us   165.37us
Concurrenc library cache lock					43	 2.3		0.05   1.14ms	  0.00	     1.50ms	1.12ms	   1.89ms   542.64us
Other	   latch: ges resource hash list		       112	 0.0		0.05 401.79us	  0.00	   593.27us   337.96us	 848.57us   361.06us
Cluster    gc cr block congested				13	 0.0		0.04   3.39ms	  0.00	     3.98ms	2.88ms	   5.08ms     1.55ms
Concurrenc library cache pin					40	 0.0		0.04   1.06ms	  0.00	     1.06ms	1.06ms	   1.06ms
Concurrenc row cache lock					20     100.0		0.04   1.77ms	  0.00	     1.44ms	1.07ms	   1.81ms   523.15us
Other	   CSS operation: query 			       120	 0.0		0.03 288.57us	  0.00	   281.32us   269.25us	 293.40us    17.07us
Other	   latch: object queue header operation 		76	 0.0		0.03 431.66us	  0.00	   405.56us   368.82us	 442.29us    51.95us
User I/O   Disk file operations I/O			       221	 0.0		0.03 146.26us	  0.00	   154.92us   139.37us	 170.47us    21.99us
Foreground Wait Events (Global) 	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %DB time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Other	   ges inquiry response 				18	 0.0		0.03   1.57ms	  0.00	     1.57ms	1.57ms	   1.57ms
Cluster    gc current multi block request			14	 0.0		0.03   1.80ms	  0.00	     1.80ms	1.80ms	   1.80ms
Other	   enq: CT - state					18	 0.0		0.02   1.23ms	  0.00	     1.23ms	1.23ms	   1.23ms
Other	   latch: undo global data				69	 0.0		0.02 248.04us	  0.00	   201.98us   139.67us	 264.30us    88.13us
Other	   PGA memory operation 			       369	 0.0		0.02  44.18us	  0.00	    43.80us    33.01us	  54.59us    15.26us
Other	   enq: WF - contention 				19	 0.0		0.02 830.79us	  0.00	   790.91us   682.67us	 899.15us   153.08us
Other	   enq: TO - contention 				11	 0.0		0.02   1.37ms	  0.00	     2.32ms	1.16ms	   3.48ms     1.64ms
Applicatio SQL*Net break/reset to client		       124	 0.0		0.01  82.40us	  0.00	    82.40us    82.40us	  82.40us
Other	   PX Deq: Join ACK					 2	 0.0		0.01   4.98ms	  0.00	     4.98ms	4.98ms	   4.98ms
Other	   datafile move cleanup during resize			22	 0.0		0.01 438.41us	  0.00	   439.13us   438.00us	 440.25us     1.59us
Other	   enq: WT - contention 				 9	 0.0		0.01 884.56us	  0.00	   673.00us   401.00us	 945.00us   384.67us
Other	   enq: FB - contention 				 9	 0.0		0.01 792.56us	  0.00	   782.69us   770.00us	 795.38us    17.94us
Other	   name-service call wait				 4	 0.0		0.01   1.28ms	  0.00	     1.28ms   923.00us	   1.65ms   511.24us
Other	   ASM file metadata operation			       132	 0.0		0.01  38.20us	  0.00	    53.62us    29.40us	  77.83us    34.25us
Other	   latch: messages					14	 0.0		0.00 348.93us	  0.00	   254.77us    90.00us	 419.55us   233.02us
User I/O   direct path sync					22	 0.0		0.00 135.09us	  0.00	   122.42us   102.50us	 142.33us    28.17us
Network    SQL*Net message to client			       401	 0.0		0.00   7.29us	  0.00	     7.01us	6.09us	   7.93us     1.30us
Other	   enq: AF - task serialization 			 2	 0.0		0.00   1.05ms	  0.00	     1.05ms	1.05ms	   1.05ms
User I/O   ASM IO for non-blocking poll 			48	 0.0		0.00  34.31us	  0.00	    36.36us    28.17us	  44.56us    11.59us
Other	   enq: SW - contention 				 1	 0.0		0.00   1.34ms	  0.00	     1.34ms	1.34ms	   1.34ms
Other	   enq: FD - Flashback logical operations		 1	 0.0		0.00   1.22ms	  0.00	     1.22ms	1.22ms	   1.22ms
Other	   wait list latch free 				 1	 0.0		0.00   1.13ms	  0.00	     1.13ms	1.13ms	   1.13ms
Other	   enq: RP - contention 				 1	 0.0		0.00   1.08ms	  0.00	     1.08ms	1.08ms	   1.08ms
Applicatio enq: TM - contention 				 1	 0.0		0.00   1.03ms	  0.00	     1.03ms	1.03ms	   1.03ms
Concurrenc latch: shared pool					 5	 0.0		0.00 196.00us	  0.00	   158.88us    97.00us	 220.75us    87.50us
Administra enq: MV - datafile move				 1	 0.0		0.00 685.00us	  0.00	   685.00us   685.00us	 685.00us
Other	   latch: call allocation				 3	 0.0		0.00 126.33us	  0.00	   119.00us    97.00us	 141.00us    31.11us
Network    IPC group service call				36	 0.0		0.00   9.19us	  0.00	     9.23us	9.15us	   9.30us   103.35ns
Other	   AWR Flush						 6	 0.0		0.00  45.83us	  0.00	    29.90us	6.00us	  53.80us    33.80us
Other	   PX qref latch					12     100.0		0.00  13.83us	  0.00	    13.83us    13.83us	  13.83us
Other	   PX Deq: Signal ACK EXT				 2	 0.0		0.00  71.00us	  0.00	    71.00us    71.00us	  71.00us
Concurrenc library cache: mutex X				 2	 0.0		0.00  25.00us	  0.00	    25.00us    25.00us	  25.00us
Other	   asynch descriptor resize				 2     100.0		0.00  11.00us	  0.00	    11.00us    10.00us	  12.00us     1.41us
Other	   latch: session allocation				 1	 0.0		0.00   9.00us	  0.00	     9.00us	9.00us	   9.00us
Other	   ges resource directory to be unfrozen		 2	 0.0		0.00   4.00us	  0.00	     4.00us	4.00us	   4.00us      .00ns
Idle	   watchdog main loop				     2,067	 0.0	    6,201.03 3000.01m	  8.53	  3000.01ms  3000.01ms	3000.02ms     7.56us
Idle	   SQL*Net message from client			       401	 0.0	    1,833.27 4571.73m	  2.52	  3506.77ms    90.38ms	6923.17ms  4831.51ms
Idle	   PX Deq: Execution Msg			       617	 0.0		9.34  15.13ms	  0.01	    15.12ms	4.78ms	  25.45ms    14.62ms
Idle	   PX Deq Credit: send blkd			       305	 0.0		0.59   1.92ms	  0.00	     1.68ms	1.22ms	   2.15ms   661.84us
Idle	   PX Deq: Msg Fragment 			       558	 0.0		0.43 767.47us	  0.00	   767.47us   703.49us	 831.46us    90.48us
Idle	   PX Deq Credit: need buffer				29	 0.0		0.01 456.55us	  0.00	   456.55us   456.55us	 456.55us
Idle	   PX Deq: Execute Reply				 2	 0.0		0.00 576.50us	  0.00	   576.50us   576.50us	 576.50us
Idle	   PX Deq: Parse Reply					 2	 0.0		0.00 550.50us	  0.00	   550.50us   550.50us	 550.50us
			  --------------------------------------------------------------------------------------------------------------------

Background Wait Events (Global) 	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
System I/O log file parallel write			   169,644	 0.0	    1,402.11   8.27ms	  0.25	     8.44ms	7.01ms	   9.88ms     2.03ms
System I/O db file parallel write			   173,580	 0.0	      715.52   4.12ms	  0.13	     4.13ms	3.92ms	   4.34ms   294.92us
Other	   LGWR any worker group			    99,086	 0.0	      427.85   4.32ms	  0.08	     4.38ms	3.41ms	   5.34ms     1.36ms
Other	   LGWR worker group ordering			    16,874	 0.0	       51.16   3.03ms	  0.01	     3.18ms	2.86ms	   3.50ms   450.53us
Other	   enq: CR - block range reuse ckpt		     2,850	 0.0	       44.21  15.51ms	  0.01	    15.29ms    12.22ms	  18.37ms     4.35ms
Other	   LGWR all worker groups			     5,606	 0.0	       36.45   6.50ms	  0.01	     6.11ms	4.82ms	   7.40ms     1.82ms
System I/O control file sequential read 		     7,272	 0.0	       29.55   4.06ms	  0.01	     4.06ms	3.89ms	   4.23ms   235.98us
User I/O   Disk file Mirror Read			     1,655	 0.0	       24.99  15.10ms	  0.00	    15.16ms	9.51ms	  20.82ms     8.00ms
System I/O control file parallel write			       613	 0.0	       22.51  36.72ms	  0.00	    37.37ms    28.95ms	  45.79ms    11.90ms
Other	   IMR slave acknowledgement msg		     3,717	 0.0	       19.63   5.28ms	  0.00	     5.28ms	3.58ms	   6.98ms     2.40ms
Other	   ASM file metadata operation			     6,027	 0.0	       12.79   2.12ms	  0.00	     2.08ms   927.34us	   3.23ms     1.63ms
User I/O   db file sequential read			     1,674	 0.0	       11.88   7.10ms	  0.00	     6.79ms	6.15ms	   7.43ms   906.51us
Other	   KSV master wait				     2,147	44.6	       10.26   4.78ms	  0.00	     4.80ms	1.75ms	   7.84ms     4.31ms
Other	   reliable message				       709	 0.0		7.23  10.19ms	  0.00	     8.75ms	5.89ms	  11.61ms     4.05ms
User I/O   ASM IO for non-blocking poll 		   168,246	 0.0		5.11  30.38us	  0.00	    30.32us    27.39us	  33.25us     4.14us
Applicatio enq: RO - fast object reuse			       256	 0.0		4.60  17.96ms	  0.00	    15.21ms	7.24ms	  23.19ms    11.28ms
Other	   PX Deq: Join ACK				       204	 0.0		4.47  21.89ms	  0.00	    12.79ms	2.11ms	  23.46ms    15.10ms
Other	   Sync ASM rebalance				       108	 0.0		3.34  30.90ms	  0.00	    30.90ms    29.37ms	  32.42ms     2.16ms
Other	   PX Deq: reap credit				    86,970     100.0		2.27  26.12us	  0.00	    26.05us    24.11us	  27.99us     2.74us
Other	   latch free					     3,397	 0.0		2.01 592.64us	  0.00	   532.55us   288.66us	 776.43us   344.91us
Cluster    gc current block lost				 3	 0.0		1.61 535.77ms	  0.00	   535.77ms   535.77ms	 535.77ms
User I/O   direct path write					35	 0.0		1.28  36.56ms	  0.00	    36.72ms    31.11ms	  42.34ms     7.94ms
Other	   enq: CF - contention 			       152	41.4		1.18   7.79ms	  0.00	     8.19ms	4.81ms	  11.57ms     4.78ms
Other	   ges inquiry response 			     1,030	 0.0		1.18   1.15ms	  0.00	     1.15ms	1.14ms	   1.16ms     8.22us
Cluster    gc cr multi block mixed				19	 0.0		1.18  62.08ms	  0.00	    35.90ms	2.74ms	  69.06ms    46.89ms
Cluster    gc cr block lost					 3	 0.0		1.15 382.48ms	  0.00	   382.48ms   382.48ms	 382.48ms
Other	   enq: PS - contention 			       119	11.8		1.13   9.52ms	  0.00	     6.00ms	1.07ms	  10.93ms     6.97ms
Other	   IPC send completion sync			     1,364	90.8		1.09 798.59us	  0.00	   742.30us    31.31us	   1.45ms     1.01ms
Concurrenc buffer busy waits					19	 0.0		0.77  40.67ms	  0.00	    27.66ms   200.40us	  55.12ms    38.83ms
Cluster    gc cr block 2-way				       877	 0.0		0.77 874.75us	  0.00	     1.01ms   863.87us	   1.15ms   204.58us
User I/O   direct path write temp				88	 0.0		0.75   8.56ms	  0.00	     7.60ms	4.33ms	  10.86ms     4.62ms
Cluster    gc cr grant busy				       386	 0.0		0.75   1.93ms	  0.00	     1.92ms	1.80ms	   2.05ms   177.56us
Other	   DFS lock handle				       213     100.0		0.70   3.27ms	  0.00	     2.64ms   843.74us	   4.43ms     2.54ms
Cluster    gc current grant busy			       373	 0.0		0.69   1.86ms	  0.00	     1.76ms	1.56ms	   1.97ms   293.68us
Other	   KJC: Wait for msg sends to complete		       101	 6.9		0.65   6.42ms	  0.00	     4.45ms   541.12us	   8.35ms     5.52ms
User I/O   db file scattered read				65	 0.0		0.54   8.29ms	  0.00	     7.75ms	6.68ms	   8.82ms     1.51ms
Cluster    gc cr block busy					70	 0.0		0.53   7.54ms	  0.00	     6.88ms	6.12ms	   7.65ms     1.08ms
Other	   gcs log flush sync				     1,430	 0.0		0.46 324.20us	  0.00	   333.07us   308.00us	 358.15us    35.46us
System I/O db file async I/O submit			    55,501	 0.0		0.43   7.74us	  0.00	     7.71us	6.82us	   8.60us     1.26us
Cluster    gc current block busy			       253	 0.0		0.42   1.66ms	  0.00	     1.68ms	1.60ms	   1.76ms   112.88us
System I/O log file sequential read			       816	 0.0		0.38 471.69us	  0.00	   471.93us   439.73us	 504.12us    45.52us
Other	   AQ: RAC AQ Network				    12,368     100.0		0.35  28.61us	  0.00	    28.60us    25.69us	  31.51us     4.12us
User I/O   Disk file operations I/O			       709	 0.0		0.34 479.36us	  0.00	   479.31us   468.69us	 489.94us    15.03us
Other	   latch: gcs resource hash			     1,140	 0.0		0.34 294.40us	  0.00	   257.88us   183.79us	 331.97us   104.78us
Other	   CGS wait for IPC msg 			    12,647     100.0		0.33  26.41us	  0.00	    26.40us    24.10us	  28.70us     3.25us
Other	   LGWR wait for redo copy			       662	 0.0		0.23 352.82us	  0.00	   328.68us   273.19us	 384.17us    78.48us
Cluster    gc current grant 2-way			       166	 0.0		0.23   1.37ms	  0.00	     1.08ms   619.97us	   1.55ms   656.46us
Concurrenc library cache pin					49	 0.0		0.22   4.46ms	  0.00	     3.26ms	1.67ms	   4.85ms     2.25ms
Other	   ksxr poll remote instances			     5,999     100.0		0.18  30.54us	  0.00	    30.50us    26.83us	  34.18us     5.19us
Other	   oracle thread bootstrap				 8	 0.0		0.17  20.96ms	  0.00	    20.96ms    19.08ms	  22.85ms     2.66ms
Applicatio enq: TM - contention 				26	 0.0		0.16   5.97ms	  0.00	     5.97ms   936.23us	  11.01ms     7.12ms
Other	   latch: cache buffers lru chain		       475	 0.0		0.15 326.00us	  0.00	   294.24us   213.56us	 374.92us   114.10us
Cluster    gc cr disk read					48	 0.0		0.11   2.36ms	  0.00	     3.22ms	2.32ms	   4.13ms     1.28ms
Network    IPC group service call			     1,809	 0.0		0.11  61.93us	  0.00	    62.08us    55.04us	  69.13us     9.96us
Other	   latch: redo allocation			       345	 0.0		0.11 313.79us	  0.00	   294.39us   236.21us	 352.57us    82.28us
Administra JS kgl get object wait				 1	 0.0		0.10  99.29ms	  0.00	    99.29ms    99.29ms	  99.29ms
Concurrenc row cache lock					51     100.0		0.09   1.82ms	  0.00	     1.77ms	1.62ms	   1.92ms   210.18us
Other	   latch: gc element				       130	 0.0		0.08 589.29us	  0.00	   523.30us   423.55us	 623.06us   141.07us
Concurrenc library cache lock					51	25.5		0.08   1.48ms	  0.00	     1.42ms	1.34ms	   1.50ms   114.50us
Cluster    gc current block 2-way				63	 0.0		0.07   1.18ms	  0.00	     1.24ms	1.03ms	   1.44ms   289.16us
Background Wait Events (Global) 	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Other	   DLM cross inst call completion		       104	 0.0		0.06 604.19us	  0.00	   569.79us   484.61us	 654.97us   120.46us
Other	   CSS operation: data query				39	 0.0		0.06   1.54ms	  0.00	     1.55ms	1.32ms	   1.77ms   317.78us
Other	   PX Deq: Slave Session Stats			       204	 0.0		0.06 281.62us	  0.00	   247.55us   207.60us	 287.49us    56.49us
Other	   CSS operation: data update				43	 0.0		0.05   1.20ms	  0.00	     1.19ms   908.90us	   1.47ms   396.82us
User I/O   direct path read					14	 0.0		0.05   3.66ms	  0.00	     3.66ms	3.66ms	   3.66ms
Cluster    gc cr grant 2-way					40	 0.0		0.05   1.27ms	  0.00	     1.43ms	1.23ms	   1.63ms   282.67us
Cluster    gc current grant congested				 8	 0.0		0.04   5.29ms	  0.00	     6.18ms	4.40ms	   7.96ms     2.52ms
Other	   PGA memory operation 			       522	 0.0		0.04  69.60us	  0.00	    69.91us    58.16us	  81.66us    16.62us
Other	   enq: TO - contention 				33	 0.0		0.03	.95ms	  0.00	   843.18us   683.60us	   1.00ms   225.67us
Commit	   log file sync					 3	 0.0		0.03  10.41ms	  0.00	    10.41ms    10.41ms	  10.41ms
Other	   latch: messages					91	 0.0		0.03 275.74us	  0.00	   266.56us   210.89us	 322.23us    78.72us
User I/O   db file parallel read				 3	 0.0		0.02   7.92ms	  0.00	     7.92ms	7.92ms	   7.92ms
Other	   CSS operation: action				42	 0.0		0.02 562.95us	  0.00	   598.69us   515.30us	 682.08us   117.93us
Cluster    gc cr multi block grant				 9	 0.0		0.02   2.01ms	  0.00	     2.42ms	1.90ms	   2.94ms   738.48us
Other	   enq: WF - contention 				17	 0.0		0.02   1.04ms	  0.00	     1.06ms   658.11us	   1.47ms   570.64us
Other	   latch: ges resource hash list			18	 0.0		0.02	.96ms	  0.00	   772.09us   426.75us	   1.12ms   488.38us
Cluster    gc cr block congested				 4	 0.0		0.02   4.14ms	  0.00	     4.10ms	4.04ms	   4.17ms    95.70us
Other	   PX Deq: Signal ACK EXT			       204	 0.0		0.02  79.81us	  0.00	    87.60us    78.47us	  96.73us    12.92us
Other	   os thread creation					 8	 0.0		0.02   1.91ms	  0.00	     1.91ms	1.42ms	   2.40ms   693.85us
Cluster    gc current block congested				 3	 0.0		0.01   4.84ms	  0.00	     4.35ms	2.88ms	   5.83ms     2.08ms
Other	   enq: FB - contention 				 6	 0.0		0.01   1.93ms	  0.00	     1.60ms	1.11ms	   2.09ms   693.39us
Configurat latch: redo writing					53	 0.0		0.01 215.62us	  0.00	   199.50us   162.33us	 236.66us    52.56us
Other	   enq: CO - master slave det				11     100.0		0.01	.99ms	  0.00	      .99ms	 .99ms	    .99ms
Other	   latch: checkpoint queue latch			32	 0.0		0.01 319.09us	  0.00	   250.21us   140.00us	 360.42us   155.86us
Other	   enq: DW - contention 				 3     100.0		0.01   3.16ms	  0.00	     3.88ms	1.73ms	   6.03ms     3.04ms
Concurrenc latch: cache buffers chains				28	 0.0		0.01 332.21us	  0.00	   351.57us   312.86us	 390.29us    54.75us
Other	   latch: object queue header operation 		21	 0.0		0.01 403.43us	  0.00	   304.14us   114.60us	 493.69us   268.06us
Concurrenc libcache interrupt action by LCK		     1,404	 0.0		0.01   5.59us	  0.00	     5.59us	5.54us	   5.65us    77.75ns
Concurrenc latch: MGA shared context root latch 		26	 0.0		0.01 275.31us	  0.00	   266.12us   146.67us	 385.57us   168.93us
Other	   enq: RA - RT ADDM flood control			 3     100.0		0.01   2.33ms	  0.00	     2.06ms	1.27ms	   2.86ms     1.13ms
Other	   enq: WT - contention 				 7	 0.0		0.01	.97ms	  0.00	     1.02ms   653.50us	   1.39ms   518.19us
Other	   enq: JS - job run lock - synchronize 		 4     100.0		0.01   1.58ms	  0.00	     1.24ms   536.00us	   1.93ms      .99ms
Configurat enq: HW - contention 				 6	 0.0		0.01   1.01ms	  0.00	     1.26ms   887.40us	   1.63ms   524.39us
Other	   enq: TT - contention 				 4	50.0		0.01   1.51ms	  0.00	     1.51ms	1.51ms	   1.51ms
User I/O   direct path sync					44	 0.0		0.01 122.80us	  0.00	   122.80us   115.91us	 129.68us     9.74us
Cluster    gc current multi block request			 3	 0.0		0.00   1.41ms	  0.00	     1.41ms	1.41ms	   1.41ms
Other	   enq: US - contention 				 5	 0.0		0.00 823.60us	  0.00	   823.60us   823.60us	 823.60us
Other	   enq: TA - contention 				 2	 0.0		0.00   1.54ms	  0.00	     1.54ms	1.14ms	   1.93ms   555.08us
Other	   enq: DR - contention 				 1	 0.0		0.00   2.75ms	  0.00	     2.75ms	2.75ms	   2.75ms
Other	   latch: enqueue hash chains				 7	 0.0		0.00 358.43us	  0.00	   333.33us   157.67us	 509.00us   248.43us
Other	   wait list latch free 				 2	 0.0		0.00   1.08ms	  0.00	     1.08ms	1.04ms	   1.12ms    54.45us
Other	   latch: undo global data				 1	 0.0		0.00   2.04ms	  0.00	     2.04ms	2.04ms	   2.04ms
Other	   enq: TD - KTF dump entries				 2	 0.0		0.00 881.50us	  0.00	   881.50us   815.00us	 948.00us    94.05us
Other	   GCR CSS group update 				40	 0.0		0.00  38.53us	  0.00	    38.53us    12.95us	  64.10us    36.17us
Concurrenc latch: MGA shared context latch			11	 0.0		0.00 123.55us	  0.00	   122.18us   107.20us	 137.17us    21.19us
Other	   kjctssqmg: quick message send wait			 5     100.0		0.00 256.00us	  0.00	   256.38us   255.75us	 257.00us   883.88ns
Cluster    gc buffer busy acquire				 1	 0.0		0.00   1.21ms	  0.00	     1.21ms	1.21ms	   1.21ms
Other	   asynch descriptor resize			       149     100.0		0.00   7.12us	  0.00	     7.12us	6.74us	   7.49us   530.39ns
Concurrenc latch: MGA heap latch				 7	 0.0		0.00 133.14us	  0.00	    81.42us	9.00us	 153.83us   102.41us
Network    SQL*Net message to client			       133	 0.0		0.00   5.71us	  0.00	     5.72us	5.43us	   6.00us   401.05ns
Other	   GCR CSS group query					39	 0.0		0.00  13.46us	  0.00	    13.47us    13.00us	  13.95us   669.89ns
Other	   latch: call allocation				 1	 0.0		0.00 126.00us	  0.00	   126.00us   126.00us	 126.00us
Other	   ges resource directory to be unfrozen		 6	 0.0		0.00   8.67us	  0.00	     8.67us	5.33us	  12.00us     4.71us
Other	   PX qref latch					 2     100.0		0.00  22.50us	  0.00	    22.50us    22.50us	  22.50us
Other	   undo_retention publish retry 			 4	 0.0		0.00   6.00us	  0.00	     6.00us	5.50us	   6.50us   707.11ns
Other	   buffer deadlock					 2     100.0		0.00  12.00us	  0.00	    12.00us    12.00us	  12.00us
Other	   AWR Flush						 4	 0.0		0.00   4.75us	  0.00	     4.50us	4.00us	   5.00us   707.11ns
Other	   lock deadlock retry					 1     100.0		0.00  12.00us	  0.00	    12.00us    12.00us	  12.00us
Idle	   PX Idle Wait 				       206	 0.0	   81,274.85 394.54 s	 14.77	   394.54 s   394.54 s	 394.54 s     2.76ms
Idle	   Space Manager: slave idle wait		    11,629	 0.0	   48,164.79 4141.78m	  8.75	  4145.90ms  4101.82ms	4189.98ms    62.34ms
Background Wait Events (Global) 	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Idle	   rdbms ipc message				   332,340	 8.4	   33,136.57  99.71ms	  6.02	   102.48ms    85.48ms	 119.48ms    24.04ms
Idle	   class slave wait				    15,789	76.8	    9,841.25 623.30ms	  1.79	   623.33ms   617.44ms	 629.23ms     8.34ms
Idle	   wait for unread message on broadcast cha	     1,901	99.9	    3,723.16 1958.53m	  0.68	  1958.53ms  1958.52ms	1958.53ms     5.16us
Idle	   LMS CR slave timer				   371,202	 0.0	    3,715.43  10.01ms	  0.68	    10.01ms    10.00ms	  10.02ms    14.34us
Idle	   gcs yield cpu				   126,308	99.9	    3,694.98  29.25ms	  0.67	    29.26ms    28.94ms	  29.57ms   442.48us
Idle	   gcs remote message				 7,032,912	 0.0	    2,590.91 368.40us	  0.47	   371.26us   343.77us	 398.75us    38.88us
Idle	   pmon timer					       827     100.0	    2,480.93 2999.91m	  0.45	  2999.91ms  2999.90ms	2999.92ms    15.61us
Idle	   ges remote message				    51,265	 0.0	    2,477.78  48.33ms	  0.45	    48.33ms    48.17ms	  48.50ms   234.77us
Idle	   GCR sleep					     8,251	 0.0	    2,477.25 300.24ms	  0.45	   300.24ms   300.18ms	 300.29ms    81.01us
Idle	   DIAG idle wait				    16,193	80.2	    2,475.57 152.88ms	  0.45	   152.88ms   152.49ms	 153.27ms   555.38us
Idle	   Data Guard: Gap Manager				22	 0.0	    1,320.01  60.00 s	  0.24	    60.00 s    60.00 s	  60.00 s   200.37us
Idle	   AQPC idle						42     100.0	    1,260.02  30.00 s	  0.23	    30.00 s    30.00 s	  30.00 s    36.40us
Idle	   ASM background timer 			     4,444	 0.0	    1,240.95 279.24ms	  0.23	   279.53ms   270.73ms	 288.32ms    12.43ms
Idle	   PING 					     1,204	19.6	    1,240.74 1030.52m	  0.23	  1031.00ms  1008.75ms	1053.25ms    31.47ms
Idle	   heartbeat redo informer			     1,240	 0.0	    1,240.18 1000.14m	  0.23	  1000.14ms  1000.13ms	1000.15ms    15.05us
Idle	   REPL Capture/Apply: RAC AQ qmn coordinat		22     100.0	    1,240.13  56.37 s	  0.23	    56.37 s    56.36 s	  56.38 s    14.94ms
Idle	   VKRM Idle						 0	 N/A	    1,240.09		  0.23
Idle	   lreg timer					       413     100.0	    1,240.08 3002.61m	  0.23	  3002.61ms  3002.57ms	3002.65ms    54.60us
Idle	   Streams AQ: waiting for time management		 0	 N/A	    1,240.01		  0.23
Idle	   ASM cluster membership changes		       708	85.0	    1,239.28 1750.40m	  0.23	  1750.40ms  1750.39ms	1750.41ms    13.87us
Idle	   OFS idle					       413     100.0	    1,239.01 3000.02m	  0.23	  3000.02ms  2999.99ms	3000.04ms    34.25us
Idle	   pman timer					       413     100.0	    1,238.88 2999.71m	  0.23	  2999.71ms  2999.69ms	2999.73ms    23.60us
Idle	   SCM slave idle				    12,469	 0.0	    1,236.81  99.19ms	  0.22	    99.19ms    99.10ms	  99.29ms   133.86us
Idle	   Streams AQ: qmn coordinator idle wait		88	 0.0	    1,232.04  14.00 s	  0.22	    14.00 s    14.00 s	  14.00 s    24.33us
Idle	   Streams AQ: qmn slave idle wait			44	 0.0	    1,232.04  28.00 s	  0.22	    28.00 s    28.00 s	  28.00 s    35.36us
Idle	   shared server idle wait				 0	 N/A	    1,230.23		  0.22
Idle	   dispatcher timer					20     100.0	    1,200.11  60.01 s	  0.22	    60.01 s    60.01 s	  60.01 s   278.95us
Idle	   Data Guard: Timer					 2	 0.0	    1,200.00 600.00 s	  0.22	   600.00 s   600.00 s	 600.00 s    24.04us
Idle	   LGWR worker group idle			   136,492	 0.0	      993.47   7.28ms	  0.18	     7.46ms	6.56ms	   8.36ms     1.27ms
Idle	   smon timer						64	 1.6	      675.47  10.55 s	  0.12	    11.63 s  7324.12ms	  15.94 s  6090.73ms
Idle	   jobq slave wait				       567	98.9	      282.87 498.89ms	  0.05	   498.89ms   498.54ms	 499.24ms   493.54us
Idle	   PX Deq: Parse Reply				       204	 0.0		2.54  12.45ms	  0.00	     7.68ms	2.08ms	  13.27ms     7.91ms
Idle	   PX Deq: Execute Reply			       603	 0.0		1.42   2.36ms	  0.00	    10.64ms	1.93ms	  19.35ms    12.32ms
Idle	   PX Deq Credit: send blkd			       285	 0.0		0.31   1.07ms	  0.00	      .98ms   804.98us	   1.15ms   241.78us
Idle	   RMA: IPC0 completion sync			     2,182	 0.0		0.08  37.99us	  0.00	    38.11us    29.92us	  46.31us    11.59us
Idle	   SQL*Net message from client			       135	 0.0		0.07 503.06us	  0.00	   504.02us   374.21us	 633.84us   183.59us
			  --------------------------------------------------------------------------------------------------------------------

Wait Event Histogram (Global)		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
AQ: RAC AQ Network	   12.3K					 0.0(4)     88.6      7.5      2.6	0.9	 0.3	  0.1	0.0(5)	 0.0(1) 	   0.0(1)
ASM IO for non-blocking p   167K				   0.2	   72.7     12.8      4.4      4.8	3.8	 1.0	  0.3	   0.1	0.0(24)   0.0(4)   0.0(1)
ASM file metadata operati   6145		       0.0(3)	  24.0	    1.4     35.1     11.3      5.5	5.1	 4.9	  0.6	   1.9	    4.0      4.3      0.9      0.4	0.2	 0.2   0.0(2)	0.0(1)		  0.0(1)
AWR Flush		      10				  90.0					       10.0
CGS wait for IPC msg	   12.6K					    5.9     83.7      6.6      2.4	0.9	 0.3	  0.1	0.0(4)	 0.0(1)
CSS initialization	      40						    45.0      2.5      2.5						     5.0     40.0      5.0
CSS operation: action	     102					   18.6      1.0	       1.0		 2.0	 27.5	  34.3	   15.7
CSS operation: data query     39											12.8	 25.6	  38.5	   23.1
CSS operation: data updat     43											 2.3	 62.8	  27.9	    4.7      2.3
CSS operation: query	     120			  2.5	  68.3	    9.2      0.8      1.7		0.8		  0.8	  13.3	    1.7      0.8
DFS lock handle 	     213											27.2	 45.5	  22.5	    3.3      0.9						   0.5
DLM cross inst call compl    172					    2.3     20.9      2.3      2.3	5.8	 7.0	 26.7	  14.0	    5.2      0.6	       1.2	1.7	 5.2	  2.9	   0.6	    0.6      0.6
Data file init write	      64																     25.0     26.6     32.8	15.6
Disk file Mirror Read	    1711														   31.0     22.3     11.5     20.6     13.9	 0.8
Disk file operations I/O     928				   2.3	    5.3     11.3      9.9      3.1     42.3	20.4	  3.3	   0.3	    0.5      0.1      0.3      0.8
GCR CSS group query	      39					   79.5     20.5
GCR CSS group update	      40					   87.5      7.5	       2.5			  2.5
IMR slave acknowledgement   3708					    9.8     11.6      3.9     19.6     15.2	 4.9	  1.3	   0.4	    9.5      7.8      3.9      6.7	5.2	 0.3
IPC group service call	    1841				   0.9	    2.7     17.6     50.6     23.3	3.8	 0.8	  0.3	   0.1
IPC send completion sync    1681						    67.6      4.2      1.9	4.2	 6.0	  8.9	   5.3	    1.5      0.1      0.1						    0.2
JS kgl get object wait	       1																			       100.0
KJC: Wait for msg sends t   8178					 0.0(1)      0.1     18.0     40.3	9.3	 3.3	  1.5	   0.7	    0.3   0.0(3)   0.0(1)					  26.0	    0.3
KSV master wait 	    2399					   12.2     19.3      5.1      2.9     22.9	 6.1	  1.3	   3.3	   11.4     11.1      2.6      0.9	0.4	 0.4	  0.1	0.0(1)		  0.0(1)
LGWR all worker groups	    5579						  0.0(1)   0.0(1)   0.0(2)	0.2	 0.1	  0.4	   1.5	   31.0     51.1     11.0      4.3	0.4
LGWR any worker group	   98.5K					    0.1  0.0(14)      0.1      0.5	1.2	 2.6	  5.6	  13.3	   40.0     28.8      4.8      2.7	0.3   0.0(3)   0.0(8)
LGWR wait for redo copy      662				   4.8	    3.9      1.5      5.3     19.0     20.8	21.0	 17.1	   6.0	    0.5
LGWR worker group orderin  16.8K				   0.3	    0.5      0.2      0.5      1.6	1.4	 1.8	  3.7	   8.9	   64.8     15.7      0.5      0.1   0.0(1)   0.0(1)   0.0(1)
PGA memory operation	     891				  22.1	   42.5     14.6      4.7      4.3	6.2	 2.8	  2.4	   0.4
PX Deq: Join ACK	     206					    1.0 					 4.4	 32.5	  15.0	   32.5     12.6      1.0						    0.5      0.5
PX Deq: Signal ACK EXT	     206					    1.9     75.2      6.8      6.3	2.9	 4.4	  1.5	   0.5	    0.5
PX Deq: Slave Session Sta    412					   21.4      8.5      1.5      4.6     10.0	21.6	 19.2	  10.7	    2.2      0.5
PX Deq: reap credit	     89K					    3.0     87.2      6.2      2.3	0.8	 0.3	  0.1  0.0(34)	 0.0(9)   0.0(2)
PX qref latch		      14					   71.4     28.6
SQL*Net break/reset to cl    124				  34.7	   14.5 	      0.8     33.9     12.1	 2.4	  1.6
SQL*Net message to client    534			  0.2	  93.8	    3.4      0.9      0.7      0.7	0.2
Sync ASM rebalance	     108					   38.0      1.9      4.6		0.9	 8.3	 11.1	   0.9	    0.9 			       18.5	 5.6	  9.3
asynch descriptor resize     151				  84.1	   12.6      1.3      2.0
buffer busy waits	     607					    1.0      2.1      1.0      1.6	2.1	 2.1	  1.2	   1.2	    1.0      3.3      7.9     14.5     19.1	14.2	  9.2	   8.9	    8.4      1.2
buffer deadlock 	       2					  100.0
control file parallel wri    669														    3.7     29.0     13.5     21.1     15.1	11.2	  6.0	   0.4
control file sequential r   7855					    7.9     12.2      0.9      0.5	4.2	 2.3	  0.6	   0.2	   50.0     11.4      4.5      4.6	0.6   0.0(1)
datafile move cleanup dur     22											68.2	 31.8
db file async I/O submit   55.1K		      0.0(14)	  93.3	    3.7      0.8      1.2      0.6	0.2	 0.1  0.0(12)	0.0(5)	 0.0(1)
db file parallel read	    1.3M														   15.5     59.2      7.9     13.5	3.9 0.0(198)  0.0(37)  0.0(23)
db file parallel write	  172.3K					    0.1      0.3      3.2      5.5	8.3	 8.6	 12.7	  17.7	   20.1     10.4      6.0      5.9	1.1	 0.1   0.0(9)
db file scattered read	      78														   56.4     21.8      6.4     11.5	3.8
db file sequential read     5.5M													0.0(3)	   60.5     23.4      4.5      9.4	2.2 0.0(164)  0.0(58)  0.0(15)
db file single write	      44														   25.0     15.9     15.9     20.5	9.1	 9.1	  4.5
direct path read	      14														   85.7     14.3
direct path sync	      66								      66.7     27.3	 6.1
direct path write	      36														   16.7     25.0      5.6     13.9     11.1	25.0	  2.8
direct path write temp	      88														   33.0     44.3      9.1      9.1	4.5
enq: AF - task serializat      2												 50.0	  50.0
enq: CF - contention	     172											 2.3	 49.4	  32.0	   11.0      0.6	       0.6	0.6	 0.6	  1.7	   1.2
enq: CO - master slave de     11												 63.6	  36.4
enq: CR - block range reu   3827							      0.1      0.1	0.1	 6.4	 33.6	  29.5	    7.5      2.0      3.4      5.4	4.7	 3.1	  2.6	   1.2	    0.3   0.0(1)
enq: CT - state 	      18											 5.6	 44.4	  38.9	   11.1
enq: DR - contention	       1														  100.0
enq: DW - contention	       3													  66.7		    33.3
enq: FB - contention	      20												 80.0	  10.0	    5.0      5.0
Wait Event Histogram (Global)		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
enq: FD - Flashback logic      1													 100.0
enq: HW - contention	     636					    0.3      0.2      0.2      1.4	1.7	 3.1	  4.6	   1.7	    1.4      2.0      3.6      6.8     11.2	10.5	 14.2	  16.8	   11.0      9.3
enq: JS - job run lock -       4											25.0	 25.0		   50.0
enq: MV - datafile move        1												100.0
enq: PS - contention	     226										0.4	 5.8	 57.5	  28.8	    5.3      1.8							    0.4
enq: RA - RT ADDM flood c      3													  66.7	   33.3
enq: RO - fast object reu    256										0.4	13.3	 42.2	  19.9	    5.9      3.1      3.1      1.2	3.9	 3.1	  2.3	   1.2	    0.4
enq: RP - contention	       1													 100.0
enq: SW - contention	       1													 100.0
enq: TA - contention	       2													 100.0
enq: TD - KTF dump entrie      2												100.0
enq: TM - contention	      27											 7.4	 44.4	  40.7						3.7	 3.7
enq: TO - contention	      44											11.4	 61.4	  15.9	   11.4
enq: TT - contention	       3												 33.3	  66.7
enq: US - contention	    1705					    2.8      2.2      1.3     10.7     14.7	14.2	 11.4	   6.8	    5.6      1.6      3.7      8.6	7.8	 2.6	  3.2	   0.5	    1.3      0.9
enq: WF - contention	      36											19.4	 52.8	  25.0	    2.8
enq: WT - contention	      16											12.5	 43.8	  37.5	    6.3
gc buffer busy acquire	       1													 100.0
gc buffer busy release	      27					   11.1      3.7      7.4     14.8     11.1	 3.7	  3.7		    3.7     25.9     11.1      3.7
gc cr block 2-way	    1992								       0.1	0.4	19.8	 36.0	  31.9	   10.9      0.7      0.2						    0.1
gc cr block busy	      69												  2.9	   4.3	   15.9     33.3     40.6      2.9
gc cr block congested	      17													  17.6	   58.8     17.6      5.9
gc cr block lost	    2029																						  49.9	   50.1
gc cr disk read 	      48											 2.1	 18.8	  29.2	   35.4     14.6
gc cr grant 2-way	  233.7K							      0.1      0.6	0.9	13.2	 38.9	  36.4	    9.1      0.8      0.1   0.0(8)					0.0(63)
gc cr grant busy	  955.3K					 0.0(7) 0.0(149)  0.0(96) 0.0(234)	0.1	 4.6	 23.6	  35.8	   27.9      6.8      0.7 0.0(354)  0.0(40) 0.0(476)   0.0(3)		    0.3  0.0(48)
gc cr grant congested	    1581											 0.1		  11.8	   59.1     26.4      2.7
gc cr multi block grant     1.1M					 0.0(5)  0.0(66)  0.0(27) 0.0(160) 0.0(392)	 1.4	 13.9	  29.5	   38.8     14.1      1.5      0.1 0.0(293)	 0.2   0.0(8)		    0.4 0.0(109)
gc cr multi block mixed     1634										0.1	 0.7	 12.1	  34.6	   38.6     10.5      1.2      0.1		 0.1		   0.3	    1.7
gc current block 2-way	   20.9K							   0.0(1)      0.1	0.1	 7.0	 38.2	  36.1	   16.1      1.8      0.1						    0.6   0.0(4)
gc current block busy	    4135							   0.0(1)      0.3	0.3	16.7	 37.0	  31.9	   10.4      2.7      0.5      0.1					    0.1
gc current block congeste    382													   1.8	   54.2     40.3      3.7
gc current block lost	    1862																						  48.3	   51.7
gc current grant 2-way	  262.8K							      0.2      0.5	0.7	10.2	 31.5	  35.0	   14.6      6.2      1.0 0.0(131)  0.0(17)  0.0(73)   0.0(1)		    0.1   0.0(5)
gc current grant busy	  837.2K					 0.0(7) 0.0(143)  0.0(87) 0.0(233)	0.1	 4.5	 23.5	  36.1	   27.9      6.9      0.7 0.0(305)  0.0(79)	 0.1   0.0(3)		    0.3  0.0(40)
gc current grant congeste   2750												  0.1	   5.1	   34.9     38.7     19.2      1.1	0.1	 0.5			    0.4
gc current grant read-mos  64.1K						  0.0(1)   0.0(2)   0.0(2)  0.0(11)	 0.9	 25.0	  32.4	   30.6      9.6      1.1      0.1  0.0(13)	 0.1
gc current multi block re     17											 5.9	 70.6	  11.8	    5.9      5.9
gc current retry	       1									      100.0
gc current split	       8									       12.5	25.0	 37.5			    25.0
gc index operation	      10					   10.0 					10.0	 40.0		   10.0 	     30.0
gcs log flush sync	    1436					    3.6      3.8     16.4     17.9     20.2	17.5	  8.4	   3.1	    3.8      4.5      0.6      0.2
ges inquiry response	    1035										0.1	 9.0	 46.5	  34.9	    8.9      0.6      0.1
ges resource directory to      8				  87.5		    12.5
kfk: async disk IO	      44														   63.6     20.5      4.5      6.8	2.3	 2.3
kjctssqmg: quick message       5									       60.0	40.0
ksxr poll remote instance   5917						    87.4      6.6      4.0	1.4	 0.4	  0.2
latch free		    7586					    9.9      2.1      3.8     14.4     23.7	19.6	 12.4	   9.3	    4.2      0.6
latch: MGA heap latch	       7					   57.1 	     28.6				 14.3
latch: MGA shared context     11						     9.1	      54.5     27.3	 9.1
latch: MGA shared context     26					    3.8      3.8      3.8      3.8     65.4	 7.7	  7.7	   3.8
latch: cache buffers chai    212					   22.6      1.9      9.0     15.1     17.0	13.2	 14.6	   5.2	    1.4
latch: cache buffers lru     892					   24.2      2.7      6.8     19.4     19.7	13.5	  9.5	   3.5	    0.7
latch: call allocation	       4					   25.0 		      50.0		25.0
latch: checkpoint queue l     32					   18.8 	      6.3     12.5     21.9	25.0	  9.4	   6.3
latch: enqueue hash chain    695					   14.1      1.3      3.0     16.0     19.7	20.3	 12.1	  10.1	    3.2      0.3
latch: gc element	    1517					    3.6      1.3      3.2     11.0     18.3	25.4	 21.1	  10.6	    4.6      0.6      0.3
latch: gcs resource hash    2011					   13.7      2.8      5.6     19.4     25.2	17.1	 10.3	   4.6	    1.1      0.1   0.0(1)
latch: ges resource hash     130					    7.7 	      3.8     18.5     22.3	19.2	 19.2	   5.4	    3.8
latch: messages 	     105					   12.4      1.9      6.7     10.5     31.4	22.9	 10.5	   3.8
Wait Event Histogram (Global)		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
latch: object queue heade     97					    5.2      1.0      2.1     13.4     23.7	20.6	 25.8	   8.2
latch: redo allocation	    1008					   14.9      2.4      6.4     20.5     23.1	18.2	  9.4	   4.0	    0.9      0.2
latch: redo writing	      53					   22.6      1.9      5.7     11.3     28.3	22.6	  7.5
latch: session allocation      1					  100.0
latch: shared pool	       5						    20.0	      20.0     40.0	20.0
latch: undo global data       70					   11.4      2.9      5.7     18.6     25.7	24.3	  7.1	   4.3
libcache interrupt action   1400			  1.0	  94.3	    3.2      0.4      0.6      0.5
library cache lock	      94											14.9	 44.7	  29.8	    7.4      1.1      2.1
library cache pin	      89											24.7	 40.4	  18.0	   14.6      1.1					  1.1
library cache: mutex X	       2					   50.0 	     50.0
lock deadlock retry	    1860					    6.3     80.5      6.3      3.7	2.0	 0.8	  0.3	   0.2
log file parallel write   168.7K														    8.4     56.9     29.8      4.0	1.0   0.0(9)  0.0(15)	0.0(2)
log file sequential read     813						     5.2     25.7      2.1     27.2	 5.8	 16.0	  17.0	    0.9      0.2
log file sync		      56														   33.9     33.9     30.4      1.8
name-service call wait	       4												 50.0	  25.0	   25.0
oracle thread bootstrap        8																	     100.0
os thread creation	       8													  62.5	   37.5
reliable message	    1119												  3.8	   5.1	   34.0     48.5      6.5      0.4	0.5	 0.3	  0.2	   0.6		     0.1
row cache lock		      69												 24.6	  47.8	   20.3      7.2
row cache mutex 	      22					   13.6     13.6	       4.5							     63.6      4.5
undo segment extension	      52					   15.4      7.7	       3.8							     23.1     19.2     15.4	 5.8	  5.8	   3.8
undo_retention publish re      4				  75.0	   25.0
wait list latch free	       3													 100.0
			  --------------------------------------------------------------------------------------------------------------------


System Statistics			   DB/Inst: P80DB/p80db1  Snaps: 55-56

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	       Reads	    Reads	Writes	   Size (k)	 Changes	Calls	     Execs	 Parses     Logons	   Txns
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ---------- ------------
   1	  11,686,333	8,848,730    1,377,434	  1,090,742    2,963,708	1,063	   806,212	  4,644        112	119,984
   2	  11,662,368	8,790,285    1,374,050	  1,090,275    2,953,140	  932	   808,968	  2,814        112	120,049
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	  23,348,701   17,639,015    2,751,484	  2,181,017    5,916,848	1,995	 1,615,180	  7,458        224	240,033
 Avg	  11,674,351	8,819,508    1,375,742	  1,090,509    2,958,424	  998	   807,590	  3,729        112	120,017
 Std	      16,946	   41,327	 2,393		330	   7,473	   93	     1,949	  1,294 	 0	     46
			  --------------------------------------------------------------------------------------------------------------------

System Statistics - Per Second		   DB/Inst: P80DB/p80db1  Snaps: 55-56

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	     Reads/s	  Reads/s     Writes/s	 Size (k)/s    Changes/s      Calls/s	   Execs/s     Parses/s   Logons/s	 Txns/s
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ---------- ------------
   1	   18,831.19	 14,258.7      2,219.6	    1,757.6	 4,775.7	  1.7	   1,299.1	    7.5       0.18	  193.3
   2	   18,785.21	 14,159.0      2,213.3	    1,756.2	 4,756.8	  1.5	   1,303.0	    4.5       0.18	  193.4
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	   37,616.40	 28,417.7      4,432.8	    3,513.8	 9,532.5	  3.2	   2,602.2	   12.0       0.36	  386.7
 Avg	   18,808.20	 14,208.9      2,216.4	    1,756.9	 4,766.2	  1.6	   1,301.1	    6.0       0.18	  193.4
 Std	       32.51	     70.5	   4.5		1.0	    13.4	  0.1	       2.8	    2.1       0.00	    0.0
			  --------------------------------------------------------------------------------------------------------------------

System Statistics - Per Transaction	   DB/Inst: P80DB/p80db1  Snaps: 55-56

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	    Reads/tx	 Reads/tx    Writes/tx	Size (k)/tx   Changes/tx     Calls/tx	  Execs/tx    Parses/tx  Logons/tx
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ----------
   1	       97.40	     73.7	  11.5		9.1	    24.7	  0.0	       6.7	    0.0       0.00
   2	       97.15	     73.2	  11.4		9.1	    24.6	  0.0	       6.7	    0.0       0.00
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~
 Avg	       97.27	     73.5	  11.5		9.1	    24.7	  0.0	       6.7	    0.0       0.00
			  --------------------------------------------------------------------------------------------------------------------


SysStat and Global Messaging  - RAC	   DB/Inst: P80DB/p80db1  Snaps: 55-56

	   Blocks Received	      Blocks Served	       CPU (seconds)						Messages				       GC Blks	   GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   -------	 --------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent   GES Sent   Sent Direct  Sent Indir	  Lost	  Failure
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   -------	 --------
   1	     2,538	 3,394	      25,053	   3,223	  N/A	       0       11,015,102	  10,258     12,196,214       7,106    1,338,418   5,001,442	 3,892		0
   2	    25,002	 3,192	       2,521	   3,353	  N/A	       0       12,124,980	   7,025     10,964,766      10,124    1,030,630   3,790,354	    48		0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~	 ~~~~~~~~
 Sum	    27,540	 6,586	      27,574	   6,576	    0	       0       23,140,082	  17,283     23,160,980      17,230    2,369,048   8,791,796	 3,940		0
 Avg	    13,770	 3,293	      13,787	   3,288	  N/A	       0       11,570,041	   8,642     11,580,490       8,615    1,184,524   4,395,898	 1,970		0
 Std	    15,884	   143	      15,933	      92	  N/A	       0	  784,802	   2,286	870,765       2,134	 217,639     856,369	 2,718		0
			  --------------------------------------------------------------------------------------------------------------------

SysStat and Global Messaging (per Sec)- RACDB/Inst: P80DB/p80db1  Snaps: 55-56

     Blocks Received Per Second   Blocks Served per Second   CPU seconds per Second				     Messages Per Second				  GC Blks     GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   -------	 --------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent    GES Sent  Sent Direct  Sent Indir	Lost/s	   Fail/s
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   -------	 --------
   1	      4.09	  5.47	       40.37	    5.19	  N/A	    0.00	17,749.57	   16.53      19,652.80       11.45	 2,156.7    8,059.25	     6		0
   2	     40.27	  5.14		4.06	    5.40	  N/A	    0.00	19,530.37	   11.32      17,661.55       16.31	 1,660.1    6,105.33	     0		0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~	 ~~~~~~~~
 Sum	     44.36	 10.61	       44.43	   10.59	 0.00	    0.00	37,279.94	   27.85      37,314.35       27.76	 3,816.8   14,164.58	     6		0
 Avg	     22.18	  5.31	       22.22	    5.30	  N/A	    0.00	18,639.97	   13.92      18,657.17       13.88	 1,908.4    7,082.29	     3		0
 Std	     25.58	  0.23	       25.67	    0.15	  N/A	    0.00	 1,259.21	    3.69       1,408.03        3.43	   351.2    1,381.63	     4		0
			  --------------------------------------------------------------------------------------------------------------------

SysStat and Global Messaging (per Tx)- RAC DB/Inst: P80DB/p80db1  Snaps: 55-56

	Blocks Received per Tx	      Blocks Served	    CPU (seconds) per Tx				Messages per Transaction			       GC Blks	   GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   ------	--------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent   GES Sent   Sent Direct  Sent Indir   Lost/T	 Fail/Tx
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   ------	--------
   1	      0.02	  0.03		0.21	    0.03	  N/A	    0.00	    91.80	    0.09	 101.65        0.06	    11.2       41.68	  0.0	     0.0
   2	      0.21	  0.03		0.02	    0.03	  N/A	    0.00	   101.00	    0.06	  91.34        0.08	     8.6       31.57	  0.0	     0.0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~	~~~~~~~~
 Avg	      0.11	  0.03		0.11	    0.03	  N/A	    0.00	    96.40	    0.07	  96.49        0.07	     9.9       36.63	  0.0	     0.0
			  --------------------------------------------------------------------------------------------------------------------


Global Cache Efficiency Percentages	   DB/Inst: P80DB/p80db1  Snaps: 55-56

	       Buffer Access
       -----------------------------
  I#	   Local % Remote %   Disk %	Locality %
----   ----------- -------- --------   -----------
   1	     24.22     0.05    75.73	     53.41
   2	     24.38     0.24    75.38	     65.57
			  --------------------------------------------------------------------------------------------------------------------

Global Latency Characteristics		   DB/Inst: P80DB/p80db1  Snaps: 55-56

				CR Blocks				  CU Blocks
		 ---------------------------------------   ---------------------------------------
	GE Get	   Receive     Build	 Flush Log Flush     Receive	   Pin	   Flush Log Flush
  I# Time (us)	 Time (us) Time (us) Time (us) CR Srvd %   Time (us) Time (us) Time (us) CU Srvd %
---- ---------	 --------- --------- --------- ---------   --------- --------- --------- ---------
   1	  1656	      3297	  98	  6923	     0.4	1631	   N/A	    6667       0.1
   2	  1605	      3208	  69	  6667	     1.8	7018	   N/A	    1818       0.9
			  --------------------------------------------------------------------------------------------------------------------

Global Messaging Statistics		   DB/Inst: P80DB/p80db1  Snaps: 55-56

	     Queue Time (us)	    Process Time (us)	      % Messages Sent
       --------------------------   -----------------	--------------------------
  I#	   Sent  on ksxp Received   GCS msgs GES msgs	  Direct Indirect Flow Ctr
----   -------- -------- --------   -------- --------	-------- -------- --------
   1	    215     2221       55	  29	   25	    21.0     78.6      0.4
   2	    119     4189       23	  21	   23	    21.3     78.4      0.3
			  --------------------------------------------------------------------------------------------------------------------


Global CR Server Statistics		   DB/Inst: P80DB/p80db1  Snaps: 55-56

			   Block Requests					   Results			 Fairness      Light		   Total
       -----------------------------------------------------   ----------------------------------------------	----------   --------	--------------------------
  I#		CR	    CU	      Data     Undo	  TX	   Current Private	 Zero  Dsk Rd	 Fail	 Down Conv	Works	   Flushes     Builds Erro
----   ----------- ----------- ----------- -------- --------   ----------- ------- ---------- ------- -------	----------   --------	---------- ---------- ----
   1	     3,159	    69	     3,159	  0	  24	     3,228	 0	    0	    1	    0	     3,103	2,225		13	3,160	 0
   2	     2,609	   780	     2,609	  0	 720	     3,318	 0	   18	   47	    0	     2,558	1,856		60	2,609	 0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~~ ~~~~~~~ ~~~~~~~~~~ ~~~~~~~ ~~~~~~~	~~~~~~~~~~   ~~~~~~~~	~~~~~~~~~~ ~~~~~~~~~~ ~~~~
 Sum	     5,768	   849	     5,768	  0	 744	     6,546	 0	   18	   48	    0	     5,661	4,081		73	5,769	 0
 Avg	     2,884	   425	     2,884	  0	 372	     3,273	 0	    9	   24	    0	     2,831	2,041		37	2,885	 0
 Std	       389	   503	       389	  0	 492		64	 0	   13	   33	    0	       385	  261		33	  390	 0
			  --------------------------------------------------------------------------------------------------------------------

Global Current Server Statistics	   DB/Inst: P80DB/p80db1  Snaps: 55-56

  I#	    Pins % <100us   % <1ms  % <10ms % <100ms	% <1s	% <10s	   Flushes % <100us   % <1ms  % <10ms % <100ms	  % <1s   % <10s
---- ----------- -------- -------- -------- -------- -------- -------- ----------- -------- -------- -------- -------- -------- --------
   1	       1     0.00     0.00   100.00	0.00	 0.00	  0.00		33     0.00	0.00	69.70	 30.30	   0.00     0.00
   2	       1     0.00   100.00     0.00	0.00	 0.00	  0.00		22     0.00	0.00	81.82	 18.18	   0.00     0.00
 ~~~ ~~~~~~~~~~~						       ~~~~~~~~~~~
 Sum	       2								55
 Avg	       1								28
 Std	       0								 8
			  --------------------------------------------------------------------------------------------------------------------


Global Cache Transfer Statistics	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
-> Busy        (Busy) - Block Transfer impacted by Remote Contention
-> Congested  (Cngst) - Block Transfer impacted by Remote System Load
-> All - average time of All blocks (Immed,Busy,Cngst) in us
-> Ordered by instance_number, CR + Current Blocks Received desc

Instance#	Block		       CR Blocks		       Current Blocks		       CR Avg Time (us) 	  Current Avg Time (us)
---------   ------------   --------------------------------   --------------------------------	 ---------------------------   ---------------------------
Dest  Src   Class	      Received %Immed  %Busy %Cngst	 Received %Immed  %Busy %Cngst	    All  Immed	 Busy  Cngst	  All  Immed   Busy  Cngst
---- ----   ------------   ----------- ------ ------ ------   ----------- ------ ------ ------	 ------ ------ ------ ------   ------ ------ ------ ------
   1	2   data block		 2,588	 98.5	 0.7	0.8	    2,485   25.2   74.4    0.4	   4009   3956	10827	4338	 1702	2962   1264   3792
	2   undo header 	   720	 94.2	 5.7	0.1	       17    0.0  100.0    0.0	   1126    814	 6227	3320	 1427	 N/A   1427    N/A
	2   others		    12	100.0	 0.0	0.0	       60   18.3   81.7    0.0	    960    960	  N/A	 N/A	  989	 656   1064    N/A

   2	1   data block		 3,141	 97.2	 0.1	2.7	   24,905   89.9    8.5    1.6	   3274   3258	 5331	3752	 7041	7362   4149   4320
	1   others		    32	 96.9	 3.1	0.0	       84   16.7   81.0    2.4	    993    892	 4142	 N/A	 1283	 839   1241   5827
	1   undo header 	    18	 72.2	27.8	0.0	       17    0.0  100.0    0.0	   2072    592	 5919	 N/A	 1675	 N/A   1675    N/A
			  --------------------------------------------------------------------------------------------------------------------

Global Cache Transfer (Immediate)	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Ordered by instance_number, CR + Current Blocks Received desc

Instance#	Block	     Lost Blocks	 Immediate CR Blocks	     Immediate Current Blocks	   Immed CR Avg Time (us)   Immed Current Avg Time (us)
---------   ------------   --------------   ----------------------------   ----------------------------   -----------------------   -----------------------
Dest  Src   Class	     Count Time(u      Received  %2-hop   %3-hop      Received	%2-hop	 %3-hop     Total   2-hop   3-hop     Total   2-hop   3-hop
---- ----   ------------   ------- ------   ----------- ------- --------   ----------- ------- --------   ------- ------- -------   ------- ------- -------
   1	2   data block		 0    N/A	  2,549   100.0      0.0	   626	 100.0	    0.0      3956    3956     N/A      2962    2962	N/A
	2   undo header 	 0    N/A	    678   100.0      0.0	     0	   N/A	    N/A       814     814     N/A	N/A	N/A	N/A
	2   others		 0    N/A	     12   100.0      0.0	    11	 100.0	    0.0       960     960     N/A	656	656	N/A
	2   undo block		 0    N/A	      0     N/A      N/A	     0	   N/A	    N/A       N/A     N/A     N/A	N/A	N/A	N/A

   2	1   data block		 0    N/A	  3,054   100.0      0.0	22,392	 100.0	    0.0      3258    3258     N/A      7362    7362	N/A
	1   others		 0    N/A	     31   100.0      0.0	    14	 100.0	    0.0       892     892     N/A	839	839	N/A
	1   undo header 	 0    N/A	     13   100.0      0.0	     0	   N/A	    N/A       592     592     N/A	N/A	N/A	N/A
	1   undo block		 0    N/A	      0     N/A      N/A	     0	   N/A	    N/A       N/A     N/A     N/A	N/A	N/A	N/A
			  --------------------------------------------------------------------------------------------------------------------


Cluster Interconnect			   DB/Inst: P80DB/p80db1  Snaps: 55-56

					 Begin					  End (if different from Begin)
		  --------------------------------------------------   --------------------------------------------------
  I# NAME	  IP Address	  Pub Source			       IP Address      Pub Source
---- ----------   --------------- --- ------------------------------   --------------- --- ------------------------------
   1 fg-priv:1	  169.254.22.248  N
   2 fg-priv:1	  169.254.31.173  N
			  --------------------------------------------------------------------------------------------------------------------

Ping Statistics 			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Latency of the roundtrip of a message from  Src Instance to the Target instances

 Instance#	       500 bytes		    8 Kbytes
-----------   --------------------------   --------------------------
		    Ping    Avg      Std	 Ping	 Avg	  Std
 Src Target	   Count Time(us)    Dev	Count Time(us)	  Dev
---- ------   ---------- -------- ------   ---------- -------- ------
   1	  1	      57      727    0.7	   62	   720	  0.6
	  2	      57     1232    0.8	   62	  1319	  0.7

   2	  1	      56     1095    0.6	   61	  1379	  0.7
	  2	      56      337    0.1	   61	   336	  0.1
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Client Statistics		   DB/Inst: P80DB/p80db1  Snaps: 55-56

				   Sent (MB)							     Received (MB)
       -----------------------------------------------------------------   -----------------------------------------------------------------
  I#	    Total      Cache	    IPQ        DLM	  PNG	    Misc	Total	   Cache	IPQ	   DLM	      PNG	Misc
----   ---------- ---------- ---------- ---------- ---------- ----------   ---------- ---------- ---------- ---------- ---------- ----------
   1	  3,564.2      192.4	    4.8    3,338.7	  1.0	    27.2      2,890.3	    73.6	6.5    2,793.0	      1.0	16.1
   2	  2,871.3	73.8	    6.5    2,774.1	  1.0	    15.8      3,541.9	   191.9	4.8    3,317.3	      1.0	26.8
 ~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~
 Sum	  6,435.5      266.3	   11.3    6,112.8	  2.1	    43.0      6,432.2	   265.6       11.3    6,110.3	      2.1	42.9
 Avg	  3,217.7      133.1	    5.7    3,056.4	  1.0	    21.5      3,216.1	   132.8	5.7    3,055.2	      1.0	21.5
 Std	    489.9	83.9	    1.2      399.2	  0.0	     8.1	460.7	    83.6	1.2	 370.7	      0.0	 7.5
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Client Statistics (per Second)DB/Inst: P80DB/p80db1  Snaps: 55-56

				  Sent (MB/s)							    Received (MB/s)
       -----------------------------------------------------------------   -----------------------------------------------------------------
  I#	    Total      Cache	    IPQ        DLM	  PNG	    Misc	Total	   Cache	IPQ	   DLM	      PNG	Misc
----   ---------- ---------- ---------- ---------- ---------- ----------   ---------- ---------- ---------- ---------- ---------- ----------
   1	      5.7	 0.3	    0.0        5.4	  0.0	     0.0	  4.7	     0.1	0.0	   4.5	      0.0	 0.0
   2	      4.6	 0.1	    0.0        4.5	  0.0	     0.0	  5.7	     0.3	0.0	   5.3	      0.0	 0.0
 ~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~
 Sum	     10.4	 0.4	    0.0        9.8	  0.0	     0.1	 10.4	     0.4	0.0	   9.8	      0.0	 0.1
 Avg	      5.2	 0.2	    0.0        4.9	  0.0	     0.0	  5.2	     0.2	0.0	   4.9	      0.0	 0.0
 Std	      0.8	 0.1	    0.0        0.6	  0.0	     0.0	  0.7	     0.1	0.0	   0.6	      0.0	 0.0
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Device Statistics		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs
-> null means begin value > end value

			Interface					       Sent							  Received
       ------------------------------------------   ----------------------------------------------------------	 ----------------------------------------------------------
										       Packets	Buffer Carrier					    Packets  Buffer   Frame
  I#   NAME	  IP Address	  IP Mask		   MBytes      Packets	Errors Dropped	Ovrrun	  Lost		MBytes	    Packets  Errors Dropped  Ovrrun  Errors
----   ---------- --------------- ---------------   ------------- ------------ ------- ------- ------- -------	 ------------- ------------ ------- ------- ------- -------
   1   eth0	  10.1.5.5	  255.255.255.0 	 18,145.9   12,947,339	     0	     0	     0	     0	      17,507.2	 13,299,247	  0	  0	  0	  0
       fg-priv	  192.168.2.1	  255.255.255.0 	  5,072.1    8,194,675	     0	     0	     0	     0	       4,558.5	  9,861,077	  0	  0	  0	  0
       fg-priv:1  169.254.22.248  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.1	  255.255.255.0 	      0.1	   539	     0	     0	     0	     0		   0.1		481	  0	  0	  0	  0
       fg-pub:1   192.168.1.21	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.11	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.1	  255.255.255.0 	      2.0	 3,086	     0	     0	     0	     0		   1.2	      3,125	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		    119.7    2,350,202	     0	     0	     0	     0		 119.7	  2,350,202	  0	  0	  0	  0
   2   eth0	  10.1.5.4	  255.255.255.0 	 17,717.2   13,687,508	     0	     0	     0	     0	      17,980.5	 12,674,838	  0	  0	  0	  0
       fg-priv	  192.168.2.2	  255.255.255.0 	  4,548.3    9,129,422	     0	     0	     0	     0	       5,096.5	  9,270,565	  0	  0	  0	  0
       fg-priv:1  169.254.31.173  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.2	  255.255.255.0 	      0.1	   481	     0	     0	     0	     0		   0.1		539	  0	  0	  0	  0
       fg-pub:1   192.168.1.12	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.23	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:3   192.168.1.22	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.2	  255.255.255.0 	      2.0	 3,048	     0	     0	     0	     0		   1.2	      3,110	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		    129.5    2,132,740	     0	     0	     0	     0		 129.5	  2,132,740	  0	  0	  0	  0
 ~~~						    ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~	 ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~
 Sum							 45,736.9   48,449,040	     0	     0	     0	     0	      45,394.3	 49,595,924	  0	  0	  0	  0
 Avg							  2,690.4    2,849,944	     0	     0	     0	     0	       2,670.3	  2,917,407	  0	  0	  0	  0
 Std							  5,950.7    4,857,182	     0	     0	     0	     0	       5,891.6	  4,912,269	  0	  0	  0	  0
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Device Statistics (per Second)DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs
-> Blank  means begin value > end value

			Interface					       Sent							  Received
       ------------------------------------------   ----------------------------------------------------------	 ----------------------------------------------------------
										       Packets	Buffer Carrier					    Packets  Buffer   Frame
  I#   NAME	  IP Address	  IP Mask		   MBytes      Packets	Errors Dropped	Ovrrun	  Lost		MBytes	    Packets  Errors Dropped  Ovrrun  Errors
----   ---------- --------------- ---------------   ------------- ------------ ------- ------- ------- -------	 ------------- ------------ ------- ------- ------- -------
   1   eth0	  10.1.5.5	  255.255.255.0 	     29.2	20,863	     0	     0	     0	     0		  28.2	     21,430	  0	  0	  0	  0
       fg-priv	  192.168.2.1	  255.255.255.0 	      8.2	13,205	     0	     0	     0	     0		   7.3	     15,890	  0	  0	  0	  0
       fg-priv:1  169.254.22.248  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.1	  255.255.255.0 	      0.0	     1	     0	     0	     0	     0		   0.0		  1	  0	  0	  0	  0
       fg-pub:1   192.168.1.21	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.11	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.1	  255.255.255.0 	      0.0	     5	     0	     0	     0	     0		   0.0		  5	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		      0.2	 3,787	     0	     0	     0	     0		   0.2	      3,787	  0	  0	  0	  0
   2   eth0	  10.1.5.4	  255.255.255.0 	     28.5	22,047	     0	     0	     0	     0		  29.0	     20,416	  0	  0	  0	  0
       fg-priv	  192.168.2.2	  255.255.255.0 	      7.3	14,705	     0	     0	     0	     0		   8.2	     14,933	  0	  0	  0	  0
       fg-priv:1  169.254.31.173  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.2	  255.255.255.0 	      0.0	     1	     0	     0	     0	     0		   0.0		  1	  0	  0	  0	  0
       fg-pub:1   192.168.1.12	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.23	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:3   192.168.1.22	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.2	  255.255.255.0 	      0.0	     5	     0	     0	     0	     0		   0.0		  5	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		      0.2	 3,435	     0	     0	     0	     0		   0.2	      3,435	  0	  0	  0	  0
 ~~~						    ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~	 ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~
 Sum							     73.7	78,054	     0	     0	     0	     0		  73.1	     79,903	  0	  0	  0	  0
 Avg							      4.3	 4,591	     0	     0	     0	     0		   4.3	      4,700	  0	  0	  0	  0
 Std							      9.6	 7,825	     0	     0	     0	     0		   9.5	      7,914	  0	  0	  0	  0
			  --------------------------------------------------------------------------------------------------------------------

Dynamic Remastering Statistics		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Affinity Objects - Affinity objects remastered at the begin/end snapshot
-> Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot

				   Counts per Ops					 Time per Ops (seconds) 			 Affinity Objects		  Read Mostly Objects
		---------------------------------------------------   -----------------------------------------------------------   -------------------------	--------------------------------------
     Remaster	  Remastered Replay Locks Replay Locks	  Resources														    Begin
  I#	  Ops	     Objects	 Received	  Sent	    Cleaned    Remaster    Freeze   Cleanup    Replay  Fixwrite      Sync	   Begin	  End	       Begin (persistent)	   End
---- --------	------------ ------------ ------------ ------------   --------- --------- --------- --------- --------- ---------   ------------ ------------	------------ ------------ ------------
   1	    0		 N/A	      N/A	   N/A		N/A	    N/A       N/A	N/A	  N/A	    N/A       N/A	       4	    4		   5		4	     5
   2	    0		 N/A	      N/A	   N/A		N/A	    N/A       N/A	N/A	  N/A	    N/A       N/A	      13	   13		   5		4	     5
 ~~~ ~~~~~~~~	~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~   ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~   ~~~~~~~~~~~~ ~~~~~~~~~~~~	~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~
 Avg	    0		 N/A	      N/A	   N/A		N/A	    N/A       N/A	N/A	  N/A	    N/A       N/A	       9	    9		   5		4	     5
 Max				      N/A	   N/A		N/A	    N/A       N/A	N/A	  N/A	    N/A       N/A	      13	   13		   5		4	     5
			  --------------------------------------------------------------------------------------------------------------------


SQL ordered by Elapsed Time (Global)	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Captured SQL account for   97.6% of Total DB Time (s):	   72,706
-> Captured PL/SQL account for	 67.1% of Total DB Time (s):	      72,706

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	  Elapsed (s)	  CPU (s)  IOWait (s)		Gets	    Reads	  Rows Cluster (s)	  Execs     Elapsed (s)     CPU (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	DB time   DB CPU  IO Wait     Gets    Reads  Cluster	Execs
-------------	------------- ----------- ----------- -------------- ------------ ------------ ----------- ------------   ------------- ----------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	    46,429.11	 2,899.61   31,796.08	  18,825,553   14,797,696    1,342,383	 13,536.56    1,342,302 	   0.03        0.00	   0.02 	  14.0	       11.0	     1.0	0.01	   63.9     65.2      0.6     80.6     83.9	67.6	 83.1
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	    24,488.09	 1,156.99   17,012.22	   3,823,710	2,609,144    2,606,120	  6,140.73	236,920 	   0.10        0.00	   0.07 	  16.1	       11.0	    11.0	0.03	   33.7     26.0      0.3     16.4     14.8	30.7	 14.7
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

f5bd91b8pq2rp	       567.18	    42.26      411.42	     172,564	  133,157	     1	    125.17	      1 	 567.18       42.26	 411.42      172,564.0	  133,157.0	     1.0      125.17	    0.8      1.0      0.0      0.7	0.8	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '87'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

dn5ztpzaw0pcu	       566.44	    41.93      404.99	     178,241	  133,909	     1	    132.56	      1 	 566.44       41.93	 404.99      178,241.0	  133,909.0	     1.0      132.56	    0.8      0.9      0.0      0.8	0.8	 0.7	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

a7ng116w7tgbq	       566.03	    41.14      406.48	     171,542	  131,932	     1	    125.47	      1 	 566.03       41.14	 406.48      171,542.0	  131,932.0	     1.0      125.47	    0.8      0.9      0.0      0.7	0.7	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

9uvmr65d5xzyk	       565.81	    42.08      401.37	     176,807	  133,255	     1	    134.85	      1 	 565.81       42.08	 401.37      176,807.0	  133,255.0	     1.0      134.85	    0.8      0.9      0.0      0.8	0.8	 0.7	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

dsjqgbvpsxkp0	       565.52	    40.75      408.27	     172,407	  133,177	     1	    124.66	      1 	 565.52       40.75	 408.27      172,407.0	  133,177.0	     1.0      124.66	    0.8      0.9      0.0      0.7	0.8	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '96'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

0bwq9jnxx14ju	       565.51	    41.27      412.79	     176,722	  135,921	     1	    121.49	      1 	 565.51       41.27	 412.79      176,722.0	  135,921.0	     1.0      121.49	    0.8      0.9      0.0      0.8	0.8	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '88'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

6a6qafya34rwa	       565.50	    41.44      394.21	     165,454	  127,356	     1	    137.82	      1 	 565.50       41.44	 394.21      165,454.0	  127,356.0	     1.0      137.82	    0.8      0.9      0.0      0.7	0.7	 0.7	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

bgxwnc1uyqzrn	       565.49	    41.37      396.10	     172,798	  130,696	     1	    138.79	      1 	 565.49       41.37	 396.10      172,798.0	  130,696.0	     1.0      138.79	    0.8      0.9      0.0      0.7	0.7	 0.7	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '68'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by CPU Time (Global)	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Captured SQL account for   91.5% of Total CPU Time (s):	     4,448
-> Captured PL/SQL account for	 67.3% of Total CPU Time (s):		4,448

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	    CPU (s)   Elapsed (s)  IOWait (s)		Gets	    Reads	  Rows Cluster (s)	  Execs       CPU (s)	Elapsed (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	 DB CPU  DB time  IO Wait     Gets    Reads  Cluster	Execs
-------------	----------- ------------- ----------- -------------- ------------ ------------ ----------- ------------   ----------- ------------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	   2,899.61	46,429.11   31,796.08	  18,825,553   14,797,696    1,342,383	 13,536.56    1,342,302 	 0.00	       0.03	   0.02 	  14.0	       11.0	     1.0	0.01	   65.2     63.9     64.1     80.6     83.9	67.6	 83.1
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	   1,156.99	24,488.09   17,012.22	   3,823,710	2,609,144    2,606,120	  6,140.73	236,920 	 0.00	       0.10	   0.07 	  16.1	       11.0	    11.0	0.03	   26.0     33.7     34.3     16.4     14.8	30.7	 14.7
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

5krxnvhvxxszv	      43.34	   563.76      360.14	     146,485	  111,522	     1	    170.00	      1 	43.34	     563.76	 360.14      146,485.0	  111,522.0	     1.0      170.00	    1.0      0.8      0.7      0.6	0.6	 0.8	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '26'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

bsr5npqqpj681	      42.89	   562.81      404.02	     177,672	  133,970	     1	    122.46	      1 	42.89	     562.81	 404.02      177,672.0	  133,970.0	     1.0      122.46	    1.0      0.8      0.8      0.8	0.8	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '12'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

7rfsk00ahr6jt	      42.77	   564.41      410.80	     178,548	  135,362	     1	    123.47	      1 	42.77	     564.41	 410.80      178,548.0	  135,362.0	     1.0      123.47	    1.0      0.8      0.8      0.8	0.8	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

fbdrcrjuy8a1m	      42.61	   562.82      408.59	     170,086	  131,302	     1	    122.17	      1 	42.61	     562.82	 408.59      170,086.0	  131,302.0	     1.0      122.17	    1.0      0.8      0.8      0.7	0.7	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

9pyjpd8qx4zrm	      42.58	   563.37      398.40	     176,759	  132,779	     1	    128.12	      1 	42.58	     563.37	 398.40      176,759.0	  132,779.0	     1.0      128.12	    1.0      0.8      0.8      0.8	0.8	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

3d08mtaxbsq1u	      42.56	   563.33      408.16	     176,996	  134,578	     1	    122.31	      1 	42.56	     563.33	 408.16      176,996.0	  134,578.0	     1.0      122.31	    1.0      0.8      0.8      0.8	0.8	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '36'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

9yraxx50ufhwk	      42.50	   563.44      361.22	     140,279	  108,723	     1	    172.97	      1 	42.50	     563.44	 361.22      140,279.0	  108,723.0	     1.0      172.97	    1.0      0.8      0.7      0.6	0.6	 0.9	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

3u87drbcgrv1a	      42.49	   564.07      404.03	     174,138	  132,165	     1	    129.78	      1 	42.49	     564.07	 404.03      174,138.0	  132,165.0	     1.0      129.78	    1.0      0.8      0.8      0.7	0.7	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '71'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by User I/O Time (Global)	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Captured SQL account for   98.3% of Total User I/O Wait Time (s):	      49,638
-> Captured PL/SQL account for	 67.8% of Total User I/O Wait Time (s): 	 49,638

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	 IOWait (s)   Elapsed (s)     CPU (s)		Gets	    Reads	  Rows Cluster (s)	  Execs    IOWait (s)	Elapsed (s)	CPU (s) 	  Gets	      Reads	    Rows Cluster (s)	IO Wait  DB time   DB CPU     Gets    Reads  Cluster	Execs
-------------	----------- ------------- ----------- -------------- ------------ ------------ ----------- ------------   ----------- ------------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	  31,796.08	46,429.11    2,899.61	  18,825,553   14,797,696    1,342,383	 13,536.56    1,342,302 	 0.02	       0.03	   0.00 	  14.0	       11.0	     1.0	0.01	   64.1     63.9     65.2     80.6     83.9	67.6	 83.1
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	  17,012.22	24,488.09    1,156.99	   3,823,710	2,609,144    2,606,120	  6,140.73	236,920 	 0.07	       0.10	   0.00 	  16.1	       11.0	    11.0	0.03	   34.3     33.7     26.0     16.4     14.8	30.7	 14.7
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

7rfsk00ahr6jt	     410.80	   564.41	42.77	     178,548	  135,362	     1	    123.47	      1        410.80	     564.41	  42.77      178,548.0	  135,362.0	     1.0      123.47	    0.8      0.8      1.0      0.8	0.8	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

fbdrcrjuy8a1m	     408.59	   562.82	42.61	     170,086	  131,302	     1	    122.17	      1        408.59	     562.82	  42.61      170,086.0	  131,302.0	     1.0      122.17	    0.8      0.8      1.0      0.7	0.7	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '95'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

3d08mtaxbsq1u	     408.16	   563.33	42.56	     176,996	  134,578	     1	    122.31	      1        408.16	     563.33	  42.56      176,996.0	  134,578.0	     1.0      122.31	    0.8      0.8      1.0      0.8	0.8	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '36'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

3u87drbcgrv1a	     404.03	   564.07	42.49	     174,138	  132,165	     1	    129.78	      1        404.03	     564.07	  42.49      174,138.0	  132,165.0	     1.0      129.78	    0.8      0.8      1.0      0.7	0.7	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '71'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

bsr5npqqpj681	     404.02	   562.81	42.89	     177,672	  133,970	     1	    122.46	      1        404.02	     562.81	  42.89      177,672.0	  133,970.0	     1.0      122.46	    0.8      0.8      1.0      0.8	0.8	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '12'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

9pyjpd8qx4zrm	     398.40	   563.37	42.58	     176,759	  132,779	     1	    128.12	      1        398.40	     563.37	  42.58      176,759.0	  132,779.0	     1.0      128.12	    0.8      0.8      1.0      0.8	0.8	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

9yraxx50ufhwk	     361.22	   563.44	42.50	     140,279	  108,723	     1	    172.97	      1        361.22	     563.44	  42.50      140,279.0	  108,723.0	     1.0      172.97	    0.7      0.8      1.0      0.6	0.6	 0.9	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

5krxnvhvxxszv	     360.14	   563.76	43.34	     146,485	  111,522	     1	    170.00	      1        360.14	     563.76	  43.34      146,485.0	  111,522.0	     1.0      170.00	    0.7      0.8      1.0      0.6	0.6	 0.8	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '26'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Gets (Global)		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Total Buffer Gets:	   23,348,701
-> Captured SQL account for   97.3% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id		  Gets	      Reads   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)	  Execs 	    Gets	Reads	Elapsed (s)	CPU (s)  IOWait (s)	    Rows Cluster (s)	   Gets    Reads  DB time   DB CPU  IO Wait  Cluster	Execs
-------------	-------------- ------------ ------------- ----------- ----------- ------------ ----------- ------------   -------------- ------------ ------------- ----------- ----------- ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	    18,825,553	 14,797,696	46,429.11    2,899.61	31,796.08    1,342,383	 13,536.56    1,342,302 	    14.0	 11.0	       0.03	   0.00        0.02	     1.0	0.01	   80.6     83.9     63.9     65.2     64.1	67.6	 83.1
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	     3,823,710	  2,609,144	24,488.09    1,156.99	17,012.22    2,606,120	  6,140.73	236,920 	    16.1	 11.0	       0.10	   0.00        0.07	    11.0	0.03	   16.4     14.8     33.7     26.0     34.3	30.7	 14.7
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

b8rb69y5nvtgv	       311,873	    232,995	   559.84	28.77	   539.53	     1	      0.03	      1        311,873.0    232,995.0	     559.84	  28.77      539.53	     1.0	0.03	    1.3      1.3      0.8      0.6	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '114'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

4shu00r5t3255	       311,544	    232,848	   556.72	28.94	   535.48	     1	      0.13	      1        311,544.0    232,848.0	     556.72	  28.94      535.48	     1.0	0.13	    1.3      1.3      0.8      0.7	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '24'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

1qgtsqmjvpysh	       309,545	    231,458	   558.98	28.72	   537.00	     1	      0.10	      1        309,545.0    231,458.0	     558.98	  28.72      537.00	     1.0	0.10	    1.3      1.3      0.8      0.6	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '108'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

7auc6hxj3tazj	       308,503	    230,598	   558.08	28.68	   536.93	     1	      0.23	      1        308,503.0    230,598.0	     558.08	  28.68      536.93	     1.0	0.23	    1.3      1.3      0.8      0.6	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '61'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

37t1xs69bxrq3	       308,380	    231,057	   557.04	28.84	   534.83	     1	      1.33	      1        308,380.0    231,057.0	     557.04	  28.84      534.83	     1.0	1.33	    1.3      1.3      0.8      0.6	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '41'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

cw2v1c2sykpss	       308,276	    230,388	   557.12	28.69	   533.90	     1	      0.04	      1        308,276.0    230,388.0	     557.12	  28.69      533.90	     1.0	0.04	    1.3      1.3      0.8      0.6	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '45'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

faz197axzpffs	       305,389	    228,611	   557.07	28.43	   533.09	     1	      1.31	      1        305,389.0    228,611.0	     557.07	  28.43      533.09	     1.0	1.31	    1.3      1.3      0.8      0.6	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '123'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

3fbzaw0xdxbp9	       305,165	    229,142	   557.35	28.68	   532.58	     1	      3.34	      1        305,165.0    229,142.0	     557.35	  28.68      532.58	     1.0	3.34	    1.3      1.3      0.8      0.6	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '38'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Reads (Global)		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Total Disk Reads:	  17,639,015
-> Captured SQL account for   98.7% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	       Reads	       Gets   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)	  Execs 	 Reads		 Gets	Elapsed (s)	CPU (s)  IOWait (s)	    Rows Cluster (s)	  Reads     Gets  DB time   DB CPU  IO Wait  Cluster	Execs
-------------	------------ -------------- ------------- ----------- ----------- ------------ ----------- ------------   ------------ -------------- ------------- ----------- ----------- ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	  14,797,696	 18,825,553	46,429.11    2,899.61	31,796.08    1,342,383	 13,536.56    1,342,302 	  11.0		 14.0	       0.03	   0.00        0.02	     1.0	0.01	   83.9     80.6     63.9     65.2     64.1	67.6	 83.1
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	   2,609,144	  3,823,710	24,488.09    1,156.99	17,012.22    2,606,120	  6,140.73	236,920 	  11.0		 16.1	       0.10	   0.00        0.07	    11.0	0.03	   14.8     16.4     33.7     26.0     34.3	30.7	 14.7
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

b8rb69y5nvtgv	     232,995	    311,873	   559.84	28.77	   539.53	     1	      0.03	      1      232,995.0	    311,873.0	     559.84	  28.77      539.53	     1.0	0.03	    1.3      1.3      0.8      0.6	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '114'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

4shu00r5t3255	     232,848	    311,544	   556.72	28.94	   535.48	     1	      0.13	      1      232,848.0	    311,544.0	     556.72	  28.94      535.48	     1.0	0.13	    1.3      1.3      0.8      0.7	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '24'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

1qgtsqmjvpysh	     231,458	    309,545	   558.98	28.72	   537.00	     1	      0.10	      1      231,458.0	    309,545.0	     558.98	  28.72      537.00	     1.0	0.10	    1.3      1.3      0.8      0.6	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '108'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

37t1xs69bxrq3	     231,057	    308,380	   557.04	28.84	   534.83	     1	      1.33	      1      231,057.0	    308,380.0	     557.04	  28.84      534.83	     1.0	1.33	    1.3      1.3      0.8      0.6	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '41'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

7auc6hxj3tazj	     230,598	    308,503	   558.08	28.68	   536.93	     1	      0.23	      1      230,598.0	    308,503.0	     558.08	  28.68      536.93	     1.0	0.23	    1.3      1.3      0.8      0.6	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '61'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

cw2v1c2sykpss	     230,388	    308,276	   557.12	28.69	   533.90	     1	      0.04	      1      230,388.0	    308,276.0	     557.12	  28.69      533.90	     1.0	0.04	    1.3      1.3      0.8      0.6	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '45'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

3fbzaw0xdxbp9	     229,142	    305,165	   557.35	28.68	   532.58	     1	      3.34	      1      229,142.0	    305,165.0	     557.35	  28.68      532.58	     1.0	3.34	    1.3      1.3      0.8      0.6	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '38'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

faz197axzpffs	     228,611	    305,389	   557.07	28.43	   533.09	     1	      1.31	      1      228,611.0	    305,389.0	     557.07	  28.43      533.09	     1.0	1.31	    1.3      1.3      0.8      0.6	1.1	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '123'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by UnOptimized Read Requests (Global)DB/Inst: P80DB/p80db1	Snaps:
-> Total Physical Read Requests:      17,638,020
-> Captured SQL account for    0.7% of Total
-> Total UnOptimized Read Requests:	 17,638,020
-> Captured SQL account for    0.7% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total

								       Total													 Per Execution									    Percentage of Total
		------------------------------------------------------------------------------------------------------------------   -----------------------------------------------------------------------------------------------------   -----------------------------------------------------------------
   SQL Id	 UnOptimized	 Requests	 Reads	 Elapsed (s)	 CPU (s)  IOWait (s)	     Rows Cluster (s)	     Execs    UnOptimized     Requests	      Reads   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)   UnOptimized Requests  Reads DB time DB CPU IO Wait Cluster  Execs
-------------	------------ ------------ ------------ ------------- ----------- ----------- ------------ ----------- ------------   ------------ ------------ ------------ ------------- ----------- ----------- ------------ -----------   ----------- -------- ------ ------- ------ ------- ------- ------
b8rb69y5nvtgv	     232,995	  232,995      232,995	      559.84	   28.77      539.53		1	 0.03		 1	232,995.0    232,995.0	  232,995.0	   559.84	28.77	   539.53	   1.0	      0.03	     1.3      1.3    1.3     0.8    0.6     1.1     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '114'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

4shu00r5t3255	     232,871	  232,871      232,848	      556.72	   28.94      535.48		1	 0.13		 1	232,871.0    232,871.0	  232,848.0	   556.72	28.94	   535.48	   1.0	      0.13	     1.3      1.3    1.3     0.8    0.7     1.1     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '24'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

1qgtsqmjvpysh	     231,458	  231,458      231,458	      558.98	   28.72      537.00		1	 0.10		 1	231,458.0    231,458.0	  231,458.0	   558.98	28.72	   537.00	   1.0	      0.10	     1.3      1.3    1.3     0.8    0.6     1.1     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '108'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

37t1xs69bxrq3	     231,080	  231,080      231,057	      557.04	   28.84      534.83		1	 1.33		 1	231,080.0    231,080.0	  231,057.0	   557.04	28.84	   534.83	   1.0	      1.33	     1.3      1.3    1.3     0.8    0.6     1.1     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '41'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

7auc6hxj3tazj	     230,598	  230,598      230,598	      558.08	   28.68      536.93		1	 0.23		 1	230,598.0    230,598.0	  230,598.0	   558.08	28.68	   536.93	   1.0	      0.23	     1.3      1.3    1.3     0.8    0.6     1.1     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '61'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

cw2v1c2sykpss	     230,388	  230,388      230,388	      557.12	   28.69      533.90		1	 0.04		 1	230,388.0    230,388.0	  230,388.0	   557.12	28.69	   533.90	   1.0	      0.04	     1.3      1.3    1.3     0.8    0.6     1.1     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '45'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

3fbzaw0xdxbp9	     229,142	  229,142      229,142	      557.35	   28.68      532.58		1	 3.34		 1	229,142.0    229,142.0	  229,142.0	   557.35	28.68	   532.58	   1.0	      3.34	     1.3      1.3    1.3     0.8    0.6     1.1     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '38'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

faz197axzpffs	     228,611	  228,611      228,611	      557.07	   28.43      533.09		1	 1.31		 1	228,611.0    228,611.0	  228,611.0	   557.07	28.43	   533.09	   1.0	      1.31	     1.3      1.3    1.3     0.8    0.6     1.1     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '123'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

4wcssh7tbjvs5	     228,200	  228,200      228,200	      557.90	   28.35      532.88		1	 1.31		 1	228,200.0    228,200.0	  228,200.0	   557.90	28.35	   532.88	   1.0	      1.31	     1.3      1.3    1.3     0.8    0.6     1.1     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '124'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

1naar97fs6vjd	     224,337	  224,337      224,337	      557.10	   28.20      522.69		1	12.80		 1	224,337.0    224,337.0	  224,337.0	   557.10	28.20	   522.69	   1.0	     12.80	     1.3      1.3    1.3     0.8    0.6     1.1     0.1    0.0
DECLARE v_default_schema_number PLS_INTEGER := '120'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Executions (Global)	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Total Executions:	   1,615,180
-> Captured SQL account for   98.3% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	       Execs   Elapsed (s)     CPU (s)	IOWait (s)	     Gets	 Reads	       Rows Cluster (s)     Elapsed (s)     CPU (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	  Execs  DB time   DB CPU  IO Wait     Gets    Reads  Cluster
-------------	------------ ------------- ----------- ----------- -------------- ------------ ------------ -----------   ------------- ----------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	   1,342,302	 46,429.11    2,899.61	 31,796.08     18,825,553   14,797,696	  1,342,383   13,536.56 	   0.03        0.00	   0.02 	  14.0	       11.0	     1.0	0.01	   83.1     63.9     65.2     64.1     80.6	83.9	 67.6
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	     236,920	 24,488.09    1,156.99	 17,012.22	3,823,710    2,609,144	  2,606,120    6,140.73 	   0.10        0.00	   0.07 	  16.1	       11.0	    11.0	0.03	   14.7     33.7     26.0     34.3     16.4	14.8	 30.7
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

87gaftwrm2h68	       2,737	      0.15	  0.12	      0.02	    5,556	     2		 82	   0.01 	   0.00        0.00	   0.00 	   2.0		0.0	     0.0	0.00	    0.2      0.0      0.0      0.0	0.0	 0.0	  0.0
select o.owner#,o.name,o.namespace,o.remoteowner,o.linkname,o.subname from obj$
o where o.obj#=:1

24djtk7r8fz33	       2,078	      0.18	  0.18	      0.00	    6,282	     0	      2,033	   0.00 	   0.00        0.00	   0.00 	   3.0		0.0	     1.0	0.00	    0.1      0.0      0.0      0.0	0.0	 0.0	  0.0
update svcobj_access$ set accesses = :5, inc_no = :6 where name = :1 AND pdb = :
2 AND tsn = :3 AND objid = :4

0sbbcuruzd66f		 753	      0.35	  0.06	      0.25	    2,223	    35		701	   0.06 	   0.00        0.00	   0.00 	   3.0		0.0	     0.9	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
select /*+ rule */ bucket_cnt, row_cnt, cache_cnt, null_cnt, timestamp#, sample_
size, minimum, maximum, distcnt, lowval, hival, density, col#, spare1, spare2, a
vgcln, minimum_enc, maximum_enc from hist_head$ where obj#=:1 and intcol#=:2

86708bvah4akq		 439	      0.08	  0.08	      0.00	    1,030	     0		439	   0.00 	   0.00        0.00	   0.00 	   2.3		0.0	     1.0	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
select name from undo$ where file#=:1 and block#=:2 and ts#=:3 and status$
 != 1

acmvv4fhdc9zh		 336	      0.43	  0.06	      0.36	    1,210	    30		202	   0.03 	   0.00        0.00	   0.00 	   3.6		0.1	     0.6	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
select obj#,type#,ctime,mtime,stime, status, dataobj#, flags, oid$, spare1, spar
e2, spare3, signature, spare7, spare8, spare9, nvl(dflcollid, 16382), creappid,
creverid, modappid, modverid, crepatchid, modpatchid from obj$ where owner#=:1 a
nd name=:2 and namespace=:3 and remoteowner is null and linkname is null and sub

fn5s5p6hr6702		 187	      0.23	  0.05	      0.16	    1,279	    21		187	   0.04 	   0.00        0.00	   0.00 	   6.8		0.1	     1.0	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
INSERT INTO wri$_adv_message_groups (task_id,id,seq,message#,fac,hdr,lm,nl,p1,p2
,p3,p4,p5) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13)

f7xnvp44nukp7		 185	      0.52	  0.07	      0.04	      899	    11		185	   0.44 	   0.00        0.00	   0.00 	   4.9		0.1	     1.0	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
insert into wrm$_snapshot_details (snap_id,dbid,instance_number,table_id,begin
_time,end_time,step_id) values (:snap_id,:dbid,:instance_number,:bind1,:bind2
,:bind3,:step_id)

grwydz59pu6mc		 173	      0.21	  0.03	      0.15	      363	    17		173	   0.04 	   0.00        0.00	   0.00 	   2.1		0.1	     1.0	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
select text from view$ where rowid=:1

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Cluster Wait Time (Global)  DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Total Cluster Wait Time (s): 	 20,017
-> Captured SQL account for   98.3% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	Cluster (s)   Elapsed (s)     CPU (s)  IOWait (s)	    Gets	Reads	      Rows	  Execs   Cluster (s)	Elapsed (s)	CPU (s)  IOWait (s)	      Gets	  Reads 	Rows	Cluster  DB time   DB CPU     Gets  IO Wait    Reads	Execs
-------------	----------- ------------- ----------- ----------- -------------- ------------ ------------ ------------   ----------- ------------- ----------- ----------- -------------- ------------ ------------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	  13,536.56	46,429.11    2,899.61	31,796.08     18,825,553   14,797,696	 1,342,383    1,342,302 	 0.01	       0.03	   0.00        0.02	      14.0	   11.0 	 1.0	   67.6     63.9     65.2     64.1     80.6	83.9	 83.1
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	   6,140.73	24,488.09    1,156.99	17,012.22      3,823,710    2,609,144	 2,606,120	236,920 	 0.03	       0.10	   0.00        0.07	      16.1	   11.0 	11.0	   30.7     33.7     26.0     34.3     16.4	14.8	 14.7
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

3mpqwg0bhu96w	     242.44	   558.29	25.31	   304.43	 146,460      112,249		 1	      1        242.44	     558.29	  25.31      304.43	 146,460.0    112,249.0 	 1.0	    1.2      0.8      0.6      0.6	0.6	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '127'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

cdxa5963ny7rv	     240.69	   557.81	25.72	   302.35	 138,150      107,746		 1	      1        240.69	     557.81	  25.72      302.35	 138,150.0    107,746.0 	 1.0	    1.2      0.8      0.6      0.6	0.6	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '50'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

879r9dt0g5p5w	     238.56	   558.28	25.37	   300.62	 148,114      112,497		 1	      1        238.56	     558.28	  25.37      300.62	 148,114.0    112,497.0 	 1.0	    1.2      0.8      0.6      0.6	0.6	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '20'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

7qs0jszf6qfw6	     238.52	   558.09	26.16	   307.27	 147,836      113,456		 1	      1        238.52	     558.09	  26.16      307.27	 147,836.0    113,456.0 	 1.0	    1.2      0.8      0.6      0.6	0.6	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '56'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

gpa68g0juqfxf	     237.03	   558.30	26.47	   304.21	 145,440      111,685		 1	      1        237.03	     558.30	  26.47      304.21	 145,440.0    111,685.0 	 1.0	    1.2      0.8      0.6      0.6	0.6	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '119'; v_update_pct PLS_INTEGER :
= '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_r
edo_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_d

gbb8vrauphx5k	     235.65	   557.52	26.95	   308.22	 153,287      115,860		 1	      1        235.65	     557.52	  26.95      308.22	 153,287.0    115,860.0 	 1.0	    1.2      0.8      0.6      0.6	0.7	 0.7	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '18'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

3q5pb4rskupya	     235.44	   557.83	26.56	   306.41	 151,143      114,471		 1	      1        235.44	     557.83	  26.56      306.41	 151,143.0    114,471.0 	 1.0	    1.2      0.8      0.6      0.6	0.6	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '6'; v_update_pct PLS_INTEGER :=
'15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_red
o_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_

0b4w7b9wmawht	     230.67	   558.03	26.39	   315.22	 152,595      117,281		 1	      1        230.67	     558.03	  26.39      315.22	 152,595.0    117,281.0 	 1.0	    1.2      0.8      0.6      0.6	0.7	 0.7	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '54'; v_update_pct PLS_INTEGER :=
 '15'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '1048576'; v_work_unit PLS_INTEGER := '12' ; v_re
do_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do

			  --------------------------------------------------------------------------------------------------------------------


System Statistics (Global)		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
ASSM bg: segment fix monitor						      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM cbk:blocks examined						  1,441 	   2.3		0.0		1.2	      0.1	    1.1 	  1.2
ASSM cbk:blocks marked full						    362 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
ASSM gsp:L1 bitmaps examined						  1,136 	   1.8		0.0		0.9	      0.1	    0.8 	  1.0
ASSM gsp:L2 bitmap full 						     23 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:L2 bitmaps examined						    247 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
ASSM gsp:Search all							     29 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:Search hint							     23 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:Search steal							      8 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:bump HWM							      8 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:get free block 						  1,079 	   1.7		0.0		0.9	      0.1	    0.8 	  1.0
ASSM gsp:get free data block						    856 	   1.4		0.0		0.7	      0.1	    0.6 	  0.8
ASSM gsp:get free index block						    223 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
ASSM gsp:good hint							    954 	   1.5		0.0		0.8	      0.1	    0.7 	  0.8
ASSM rsv:fill reserve							      5 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM wasted db state change						      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
Batched IO (bound) vector count 					     26 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
Batched IO block miss count					     12,111,743       19,512.9	       50.5	    9,756.4	      2.6	9,754.6       9,758.3
Batched IO double miss count					      1,356,268        2,185.0		5.7	    1,092.5	      0.2	1,092.4       1,092.7
Batched IO same unit count						     36 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
Batched IO single block count						  2,186 	   3.5		0.0		1.8	      0.2	    1.6 	  1.9
Batched IO vector block count					     12,110,011       19,510.1	       50.5	    9,755.0	      3.0	9,752.9       9,757.1
Batched IO vector read count					      1,353,338        2,180.3		5.6	    1,090.2	      0.2	1,090.0       1,090.3
Block Cleanout Optim referenced 					     11 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
CCursor + sql area evicted						    403 	   0.6		0.0		0.3	      0.1	    0.3 	  0.4
CPU used by this session						655,991        1,056.9		2.7	      528.4	    129.2	  437.1 	619.8
CPU used when call started						471,933 	 760.4		2.0	      380.2	    119.1	  296.0 	464.4
CR blocks created							  1,597 	   2.6		0.0		1.3	      0.9	    0.6 	  1.9
Cached Commit SCN referenced					     14,948,360       24,082.8	       62.3	   12,041.4	    128.3      11,950.7      12,132.2
Client Advertised Receive Window					    903 	   1.5		0.0		0.7	      0.0	    0.7 	  0.7
Client Advertised Send Window						    903 	   1.5		0.0		0.7	      0.0	    0.7 	  0.7
Client Path Maximum Transmission Unit(MTU)			      4,352,575        7,013.6	       18.1	    3,506.8	  4,748.0	  149.5       6,864.1
Client Send Congestion Window						  1,290 	   2.1		0.0		1.0	      0.0	    1.0 	  1.0
Client Time (usec) Last Ack Received					     45 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
Client Time (usec) Last Data Received					     41 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
Client Time (usec) Last Data Sent					    280 	   0.5		0.0		0.2	      0.0	    0.2 	  0.2
Client Time (usec) Round Trip Time					258,228 	 416.0		1.1	      208.0	     42.6	  177.9 	238.2
Client Time (usec) Round Trip Time Variance				266,510 	 429.4		1.1	      214.7	     29.6	  193.7 	235.6
Client Total Bytes Acked					      2,029,736        3,270.1		8.5	    1,635.0	     31.3	1,612.9       1,657.2
Client Total Bytes Received						786,859        1,267.7		3.3	      633.8	      8.2	  628.1 	639.6
Client Total Number of Retransmitted Packets				      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
Commit SCN cached							      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
DB time 							      7,686,495       12,383.5	       32.0	    6,191.8	    135.2	6,096.1       6,287.4
DBWR checkpoint buffers written 					 21,189 	  34.1		0.1	       17.1	      3.0	   15.0 	 19.2
DBWR checkpoints							  2,041 	   3.3		0.0		1.6	      0.0	    1.6 	  1.7
DBWR fusion writes							    359 	   0.6		0.0		0.3	      0.3	    0.1 	  0.5
DBWR object drop buffers written					     52 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
DBWR transaction table writes						    289 	   0.5		0.0		0.2	      0.0	    0.2 	  0.2
DBWR undo block writes							116,290 	 187.4		0.5	       93.7	      0.5	   93.3 	 94.1
DFO trees parallelized							     71 	   0.1		0.0		0.1	      0.1	    0.0 	  0.1
Effective IO time							117,544 	 189.4		0.5	      189.4	      N/A	  189.4 	189.4
HSC Heap Segment Block Changes					      2,640,800        4,254.5	       11.0	    2,127.3	      0.7	2,126.7       2,127.8
Heap Segment Array Inserts						    351 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
Heap Segment Array Updates						     16 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
KTFB alloc req								  1,303 	   2.1		0.0		1.0	      0.4	    0.8 	  1.3
KTFB alloc space (block)					    825,622,528    1,330,154.8	    3,439.6	  665,077.4	 69,168.6     616,167.8     713,987.0
KTFB alloc time (ms)						    103,744,825      167,143.1	      432.2	   83,571.5	 10,544.1      76,115.8      91,027.3
KTFB apply req								  2,254 	   3.6		0.0		1.8	      1.0	    1.1 	  2.5
KTFB apply time (ms)							154,624 	 249.1		0.6	      124.6	     89.3	   61.4 	187.7
KTFB free req								    961 	   1.5		0.0		0.8	      0.5	    0.4 	  1.2

System Statistics (Global)		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
KTFB free space (block) 						 64,928 	 104.6		0.3	       52.3	     23.9	   35.4 	 69.2
KTFB free time (ms)						     10,147,985       16,350.2	       42.3	    8,175.1	  3,802.9	5,486.0      10,864.2
PX local messages recv'd						    866 	   1.4		0.0		0.7	      0.8	    0.1 	  1.2
PX local messages sent							    867 	   1.4		0.0		0.7	      0.8	    0.1 	  1.2
PX remote messages recv'd						    915 	   1.5		0.0		0.7	      0.1	    0.7 	  0.8
PX remote messages sent 						    924 	   1.5		0.0		0.7	      0.1	    0.7 	  0.8
Parallel operations not downgraded					    104 	   0.2		0.0		0.1	      0.1	    0.0 	  0.2
Requests to/from client 						    528 	   0.9		0.0		0.4	      0.1	    0.3 	  0.5
SMON posted for undo segment shrink					     61 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
SQL*Net roundtrips to/from client					    401 	   0.6		0.0		0.3	      0.1	    0.2 	  0.4
TBS Extension: tasks created						     22 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
active txn count during cleanout					    501 	   0.8		0.0		0.4	      0.0	    0.4 	  0.4
application wait time							    476 	   0.8		0.0		0.4	      0.4	    0.1 	  0.6
auto extends on undo tablespace 					     22 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
background checkpoints completed					      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
background timeouts							 16,465 	  26.5		0.1	       13.3	      0.0	   13.2 	 13.3
blocks cleaned out using minact 					626,856        1,009.9		2.6	      505.0	      3.1	  502.8 	507.1
buffer is not pinned count					     42,176,289       67,948.9	      175.7	   33,974.5	     18.8      33,961.2      33,987.7
buffer is pinned count						     16,302,070       26,263.8	       67.9	   13,131.9	     13.6      13,122.3      13,141.5
bytes received via SQL*Net from client					522,830 	 842.4		2.2	      421.2	    446.2	  105.7 	736.7
bytes sent via SQL*Net to client					 97,467 	 157.0		0.4	       78.5	     23.8	   61.7 	 95.3
calls to get snapshot scn: kcmgss				      1,879,373        3,027.8		7.8	    1,513.9	      3.4	1,511.5       1,516.3
calls to kcmgas 							417,124 	 672.0		1.7	      336.0	     21.9	  320.5 	351.5
calls to kcmgcs 							 12,222 	  19.7		0.1		9.8	      1.0	    9.2 	 10.5
cell physical IO interconnect bytes				197,747,698,176  318,585,555.8	  823,835.5   1.5929278E+08	631,498.4 1.5884624E+08 1.5973931E+08
change write time							  5,951 	   9.6		0.0		4.8	      1.2	    4.0 	  5.6
cleanout - number of ktugct calls					  4,632 	   7.5		0.0		3.7	      0.4	    3.4 	  4.0
cleanouts and rollbacks - consistent read gets				     18 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
cleanouts only - consistent read gets					     51 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
cluster key scan block gets						  2,202 	   3.5		0.0		1.8	      1.7	    0.6 	  2.9
cluster key scans							  1,523 	   2.5		0.0		1.2	      1.0	    0.5 	  1.9
cluster wait time						      1,993,292        3,211.2		8.3	    1,605.6	    432.7	1,299.6       1,911.6
commit batch/immediate performed					      6 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit batch/immediate requested					      6 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit cleanout failures: block lost					      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit cleanout failures: buffer being written				      6 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit cleanout failures: callback failure				     40 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
commit cleanouts						      2,641,018        4,254.9	       11.0	    2,127.4	      0.3	2,127.2       2,127.6
commit cleanouts successfully completed 			      2,640,969        4,254.8	       11.0	    2,127.4	      0.3	2,127.2       2,127.6
commit immediate performed						      6 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit immediate requested						      6 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit txn count during cleanout					    307 	   0.5		0.0		0.2	      0.0	    0.2 	  0.2
concurrency wait time							 10,862 	  17.5		0.0		8.8	      2.5	    7.0 	 10.5
consistent changes							 15,066 	  24.3		0.1	       12.1	      6.6	    7.5 	 16.8
consistent gets 						     19,896,471       32,054.6	       82.9	   16,027.3	      9.9      16,020.3      16,034.3
consistent gets examination					      3,231,159        5,205.6	       13.5	    2,602.8	      1.5	2,601.8       2,603.9
consistent gets examination (fastpath)				      3,230,524        5,204.6	       13.5	    2,602.3	      1.5	2,601.3       2,603.3
consistent gets from cache					     19,896,460       32,054.6	       82.9	   16,027.3	      9.9      16,020.3      16,034.3
consistent gets pin						     16,665,301       26,849.0	       69.4	   13,424.5	     11.4      13,416.4      13,432.5
consistent gets pin (fastpath)					     12,361,490       19,915.2	       51.5	    9,957.6	     50.8	9,921.7       9,993.5
cursor authentications							    170 	   0.3		0.0		0.1	      0.0	    0.1 	  0.1
data blocks consistent reads - undo records applied			    109 	   0.2		0.0		0.1	      0.1	    0.0 	  0.1
db block changes						      5,916,848        9,532.5	       24.7	    4,766.2	     13.4	4,756.8       4,775.7
db block gets							      3,452,160        5,561.7	       14.4	    2,780.8	     42.3	2,750.9       2,810.8
db block gets direct							  1,374 	   2.2		0.0		1.1	      0.9	    0.5 	  1.7
db block gets from cache					      3,450,786        5,559.5	       14.4	    2,779.7	     41.5	2,750.4       2,809.1
db block gets from cache (fastpath)					679,638        1,095.0		2.8	      547.5	     38.1	  520.5 	574.4
deferred (CURRENT) block cleanout applications				629,435        1,014.1		2.6	      507.0	      3.4	  504.7 	509.4
dirty buffers inspected 					      2,492,802        4,016.1	       10.4	    2,008.1	     90.0	1,944.4       2,071.7
enqueue conversions							 25,372 	  40.9		0.1	       20.4	      9.3	   13.9 	 27.0

System Statistics (Global)		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
enqueue releases							736,866        1,187.1		3.1	      593.6	     24.1	  576.5 	610.6
enqueue requests							736,664        1,186.8		3.1	      593.4	     24.2	  576.3 	610.5
enqueue timeouts							     15 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
enqueue waits								  7,058 	  11.4		0.0		5.7	      2.3	    4.1 	  7.3
exchange deadlocks							      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
execute count							      1,615,180        2,602.2		6.7	    1,301.1	      2.8	1,299.1       1,303.0
file io service time						  7,359,154,268   11,856,153.8	   30,658.9	5,928,076.9	149,039.8   5,822,689.8   6,033,464.0
file io wait time						318,964,559,439  513,850,588.5	1,328,836.3   2.5692529E+08  85,393,967.6 1.9654264E+08 3.1730795E+08
free buffer inspected						     17,892,499       28,826.1	       74.5	   14,413.0	     78.6      14,357.5      14,468.6
free buffer requested						     17,793,643       28,666.8	       74.1	   14,333.4	     50.3      14,297.9      14,369.0
gc blocks compressed							 13,136 	  21.2		0.1	       10.6	      3.3	    8.2 	 12.9
gc blocks lost								  3,940 	   6.3		0.0		3.2	      4.4	    0.1 	  6.3
gc cleanout saved							      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc cr anti locks created						122,076 	 196.7		0.5	       98.3	      1.6	   97.2 	 99.4
gc cr anti locks expanded						     27 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc cr anti locks shrunk 						     37 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
gc cr block build time							     49 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
gc cr block flush time							     49 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
gc cr block receive time						  2,143 	   3.5		0.0		1.7	      0.1	    1.6 	  1.8
gc cr blocks built							  5,788 	   9.3		0.0		4.7	      0.6	    4.2 	  5.1
gc cr blocks flushed							     71 	   0.1		0.0		0.1	      0.1	    0.0 	  0.1
gc cr blocks received							  6,586 	  10.6		0.0		5.3	      0.2	    5.1 	  5.5
gc cr blocks served							  6,576 	  10.6		0.0		5.3	      0.1	    5.2 	  5.4
gc cr multiblock grant time					      2,406,175        3,876.3	       10.0	    1,938.1	    791.7	1,378.3       2,498.0
gc cr multiblock grants received				      9,465,656       15,250.3	       39.4	    7,625.2	  1,741.3	6,393.9       8,856.4
gc current block flush time						     26 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc current block receive time						 17,961 	  28.9		0.1	       14.5	     19.5	    0.7 	 28.3
gc current blocks flushed						     22 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc current blocks received						 27,540 	  44.4		0.1	       22.2	     25.6	    4.1 	 40.3
gc current blocks served						 27,574 	  44.4		0.1	       22.2	     25.7	    4.1 	 40.4
gc force cr read cr							    104 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
gc force cr read current						      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gc kbytes saved 							 53,971 	  87.0		0.2	       43.5	     14.7	   33.1 	 53.8
gc kbytes sent								219,229 	 353.2		0.9	      176.6	    189.6	   42.6 	310.7
gc local grants 						     10,570,665       17,029.8	       44.0	    8,514.9	  1,191.3	7,672.5       9,357.3
gc merge pi fg								     50 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
gc no change made							      6 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc reader bypass grants 						     56 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
gc reader bypass waits							     15 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc remote grants						      7,203,551       11,605.8	       30.0	    5,802.9	  1,258.0	4,913.4       6,692.4
gc status messages received						448,610 	 722.9		1.9	      361.4	    491.7	   13.7 	709.2
gc status messages sent 						452,459 	 728.8		1.9	      364.4	    495.9	   13.8 	715.1
gcs affinity lock failures						  2,058 	   3.3		0.0		1.7	      1.8	    0.4 	  2.9
gcs affinity lock grants					      3,061,378        4,931.6	       12.8	    2,465.8	  1,942.0	1,092.6       3,839.0
gcs anti-locks created							122,073 	 196.7		0.5	       98.3	      1.6	   97.2 	 99.4
gcs data block access records					     17,676,196       28,477.6	       73.6	   14,238.8	     46.6      14,205.9      14,271.8
gcs messages sent						     22,708,521       36,585.5	       94.6	   18,292.8	  1,903.9      16,946.5      19,639.0
gcs read-mostly lock failures						120,659 	 194.4		0.5	       97.2	     87.0	   35.7 	158.7
gcs read-mostly lock grants						682,758        1,099.8		2.8	      549.9	    493.1	  201.3 	898.6
gcs stats management (SCM) process posts				     11 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
ges messages sent							 17,230 	  27.8		0.1	       13.9	      3.4	   11.5 	 16.3
global enqueue get time 						 77,721 	 125.2		0.3	       62.6	     14.6	   52.3 	 73.0
global enqueue gets sync						475,580 	 766.2		2.0	      383.1	     81.3	  325.7 	440.6
global enqueue releases 						456,888 	 736.1		1.9	      368.0	     71.9	  317.2 	418.9
global undo segment hints helped					      5 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
global undo segment hints were stale					      4 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
heap block compress							  6,874 	  11.1		0.0		5.5	      1.4	    4.6 	  6.5
hot buffers moved to head of LRU					278,550 	 448.8		1.2	      224.4	     30.3	  203.0 	245.8
immediate (CR) block cleanout applications				     69 	   0.1		0.0		0.1	      0.0	    0.0 	  0.1
immediate (CURRENT) block cleanout applications 			    627 	   1.0		0.0		0.5	      0.1	    0.4 	  0.6

System Statistics (Global)		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
in call idle wait time						     14,275,476       22,998.9	       59.5	   11,499.5	    453.9      11,178.5      11,820.4
index crx upgrade (positioned)						     62 	   0.1		0.0		0.1	      N/A	    0.1 	  0.1
index fast full scans (full)						      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
index fetch by key							  9,110 	  14.7		0.0		7.3	      1.7	    6.1 	  8.6
index range scans						      1,610,003        2,593.8		6.7	    1,296.9	      4.9	1,293.5       1,300.4
leaf node 90-10 splits							     30 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
leaf node splits							    216 	   0.3		0.0		0.2	      0.0	    0.2 	  0.2
lob reads								    997 	   1.6		0.0		0.8	      0.7	    0.3 	  1.3
lob writes								  7,825 	  12.6		0.0		6.3	      1.8	    5.0 	  7.6
lob writes unaligned							  7,824 	  12.6		0.0		6.3	      1.8	    5.0 	  7.6
logical read bytes from cache					191,260,565,504  308,134,227.8	  796,809.5   1.5406711E+08	258,627.4 1.5388424E+08 1.5424999E+08
logons cumulative							    224 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
max cf enq hold time							  9,873 	  15.9		0.0		8.0	      9.7	    1.1 	 14.8
messages received							386,563 	 622.8		1.6	      311.4	     13.9	  301.5 	321.2
messages sent								386,558 	 622.8		1.6	      311.4	     13.9	  301.5 	321.2
no work - consistent read gets					     16,635,377       26,800.8	       69.3	   13,400.4	     17.6      13,387.9      13,412.9
non-idle wait count						     14,924,497       24,044.7	       62.2	   12,022.4	  1,147.6      11,210.9      12,833.9
non-idle wait time						      7,351,961       11,844.6	       30.6	    5,922.3	    120.2	5,837.3       6,007.3
opened cursors cumulative					      1,856,373        2,990.7		7.7	    1,495.4	      2.5	1,493.6       1,497.1
parse count (describe)							      6 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
parse count (hard)							    672 	   1.1		0.0		0.5	      0.3	    0.3 	  0.7
parse count (total)							  7,458 	  12.0		0.0		6.0	      2.1	    4.5 	  7.5
parse time cpu								    216 	   0.3		0.0		0.2	      0.1	    0.1 	  0.2
parse time elapsed							    585 	   0.9		0.0		0.5	      0.3	    0.3 	  0.7
physical read IO requests					     17,638,020       28,416.1	       73.5	   14,208.1	     69.7      14,158.8      14,257.3
physical read bytes						144,498,802,688  232,797,843.7	  601,995.6   1.1639892E+08	577,639.9 1.1599047E+08 1.1680737E+08
physical read total IO requests 				     17,648,774       28,433.4	       73.5	   14,216.7	     70.1      14,167.2      14,266.3
physical read total bytes					147,462,422,016  237,572,443.9	  614,342.3   1.1878622E+08	585,346.1 1.1837232E+08 1.1920012E+08
physical read total multi block requests				  2,715 	   4.4		0.0		2.2	      0.0	    2.2 	  2.2
physical reads							     17,639,015       28,417.7	       73.5	   14,208.9	     70.5      14,159.0      14,258.7
physical reads cache						     17,639,001       28,417.7	       73.5	   14,208.8	     70.5      14,159.0      14,258.7
physical reads cache prefetch					     10,750,794       17,320.3	       44.8	    8,660.1	      7.2	8,655.0       8,665.2
physical reads direct							     14 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
physical reads direct (lob)						     14 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
physical write IO requests					      2,636,968        4,248.3	       11.0	    2,124.2	      3.6	2,121.6       2,126.7
physical write bytes						 22,540,156,928   36,313,780.4	   93,904.4    18,156,890.2	 36,606.8  18,131,005.3  18,182,775.1
physical write total IO requests				      2,873,802        4,629.9	       12.0	    2,314.9	     13.1	2,305.7       2,324.2
physical write total bytes					 25,132,156,416   40,489,668.9	  104,702.9    20,244,834.4	 21,883.9  20,229,360.2  20,260,308.7
physical write total multi block requests				  7,020 	  11.3		0.0		5.7	      0.2	    5.5 	  5.8
physical writes 						      2,751,484        4,432.8	       11.5	    2,216.4	      4.5	2,213.3       2,219.6
physical writes direct							  1,446 	   2.3		0.0		1.2	      0.9	    0.5 	  1.8
physical writes direct (lob)						     72 	   0.1		0.0		0.1	      0.0	    0.0 	  0.1
physical writes direct temporary tablespace				    954 	   1.5		0.0		0.8	      0.9	    0.2 	  1.4
physical writes from cache					      2,750,038        4,430.5	       11.5	    2,215.3	      3.6	2,212.7       2,217.8
physical writes non checkpoint					      2,748,079        4,427.3	       11.4	    2,213.7	      4.4	2,210.6       2,216.8
pinned buffers inspected						    607 	   1.0		0.0		0.5	      0.2	    0.4 	  0.6
process last non-idle time						    686 	   1.1		0.0		0.6	      0.6	    0.1 	  1.0
queries parallelized							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
recursive calls 						      2,160,116        3,480.1		9.0	    1,740.1	     17.7	1,727.5       1,752.6
recursive cpu usage							631,547        1,017.5		2.6	      508.8	    127.1	  418.9 	598.6
redo KB read							      1,658,880        2,672.6		6.9	    1,336.3	      5.0	1,332.7       1,339.8
redo blocks checksummed by FG (exclusive)			      1,614,978        2,601.8		6.7	    1,300.9	      6.9	1,296.1       1,305.8
redo blocks written						      4,620,140        7,443.4	       19.2	    3,721.7	      6.0	3,717.4       3,725.9
redo blocks written (group 0)					      2,815,686        4,536.2	       11.7	    2,268.1	    185.6	2,136.9       2,399.3
redo blocks written (group 1)					      1,804,454        2,907.2		7.5	    1,453.6	    179.6	1,326.6       1,580.6
redo entries							      3,094,895        4,986.1	       12.9	    2,493.0	     13.1	2,483.8       2,502.3
redo size							  2,233,361,720    3,598,102.3	    9,304.4	1,799,051.2	  1,043.0   1,798,313.7   1,799,788.6
redo size for direct writes						  1,916 	   3.1		0.0		1.5	      0.0	    1.5 	  1.6
redo subscn max counts							    243 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
redo synch time 							     42 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0

System Statistics (Global)		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
redo synch time (usec)							393,255 	 633.6		1.6	      316.8	     44.6	  285.3 	348.3
redo synch time overhead (usec) 					  6,780 	  10.9		0.0		5.5	      4.4	    2.3 	  8.6
redo synch time overhead count (  2ms)					     55 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
redo synch writes							    134 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
redo wastage							     56,978,636       91,795.5	      237.4	   45,897.7	  3,977.4      43,085.3      48,710.2
redo write active strands						234,439 	 377.7		1.0	      188.8	     16.5	  177.2 	200.5
redo write broadcast ack count						     11 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
redo write broadcast ack time						 30,452 	  49.1		0.1	       24.5	     14.3	   14.4 	 34.7
redo write finish time						  1,472,877,348    2,372,936.0	    6,136.1	1,186,468.0	 99,263.1   1,116,278.4   1,256,657.6
redo write gather time						     67,502,744      108,757.3	      281.2	   54,378.7	 20,497.8      39,884.5      68,872.8
redo write info find							     56 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
redo write info find fail						      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
redo write schedule time					     69,621,079      112,170.2	      290.0	   56,085.1	 20,668.3      41,470.4      70,699.8
redo write size count (   4KB)						 19,939 	  32.1		0.1	       16.1	      2.7	   14.2 	 18.0
redo write size count (   8KB)						 33,794 	  54.4		0.1	       27.2	      8.7	   21.0 	 33.4
redo write size count (  16KB)						 64,014 	 103.1		0.3	       51.6	     14.5	   41.3 	 61.8
redo write size count (  32KB)						 41,910 	  67.5		0.2	       33.8	      2.0	   32.4 	 35.1
redo write size count ( 128KB)						  9,304 	  15.0		0.0		7.5	      4.4	    4.4 	 10.6
redo write size count ( 256KB)						     36 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
redo write size count ( 512KB)						      9 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
redo write size count (1024KB)						      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
redo write time 							147,956 	 238.4		0.6	      119.2	      9.9	  112.2 	126.2
redo write time (usec)						  1,479,553,090    2,383,691.1	    6,164.0	1,191,845.5	 99,260.8   1,121,657.6   1,262,033.5
redo write total time						  1,536,734,239    2,475,820.2	    6,402.2	1,237,910.1	122,040.2   1,151,614.6   1,324,205.6
redo write worker delay (usec)					     56,781,632       91,484.9	      236.6	   45,742.5	 20,762.2      31,061.4      60,423.6
redo write worker delay count						169,007 	 272.3		0.7	      136.1	     23.5	  119.5 	152.8
redo writes								169,007 	 272.3		0.7	      136.1	     23.5	  119.5 	152.8
redo writes (group 0)							 92,914 	 149.7		0.4	       74.8	     14.7	   64.5 	 85.2
redo writes (group 1)							 76,093 	 122.6		0.3	       61.3	      8.9	   55.0 	 67.6
redo writes adaptive all						169,007 	 272.3		0.7	      136.1	     23.5	  119.5 	152.8
redo writes adaptive worker						169,007 	 272.3		0.7	      136.1	     23.5	  119.5 	152.8
rollback changes - undo records applied 				      6 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
rollbacks only - consistent read gets					     31 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
rows fetched via callback						  4,515 	   7.3		0.0		3.6	      0.7	    3.2 	  4.1
securefile allocation bytes						589,824 	 950.3		2.5	      475.1	    149.4	  369.5 	580.8
securefile allocation chunks						     29 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
securefile bytes non-transformed					509,732 	 821.2		2.1	      410.6	    127.3	  320.6 	500.6
securefile direct read bytes						114,688 	 184.8		0.5	      184.8	      N/A	  184.8 	184.8
securefile direct read ops						     14 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
securefile direct write bytes						589,824 	 950.3		2.5	      475.1	    149.4	  369.5 	580.8
securefile direct write ops						     28 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
securefile number of non-transformed flushes				     32 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
segment chunks allocation from dispenser				     29 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
segment dispenser allocations						     28 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
segment dispenser load empty						      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
segment dispenser load tasks						      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
segment prealloc ops							      6 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
segment prealloc tasks							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
segment prealloc time (ms)						  3,063 	   4.9		0.0		2.5	      0.1	    2.4 	  2.6
session connect time							  5,870 	   9.5		0.0		4.7	      6.5	    0.1 	  9.3
session cursor cache hits					      1,852,835        2,985.0		7.7	    1,492.5	      2.3	1,490.9       1,494.1
session logical reads						     23,348,701       37,616.4	       97.3	   18,808.2	     32.5      18,785.2      18,831.2
shared hash latch upgrades - no wait				      5,746,351        9,257.8	       23.9	    4,628.9	     21.6	4,613.6       4,644.1
shared hash latch upgrades - wait					     27 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
shared io pool buffer get success					     42 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
sorts (memory)								  2,183 	   3.5		0.0		1.8	      0.7	    1.2 	  2.3
sorts (rows)							      1,043,831        1,682.0		4.3	      841.0	    990.3	  140.7       1,541.2
sql area evicted							    426 	   0.7		0.0		0.3	      0.0	    0.3 	  0.4
sql area purged 							     58 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
summed dirty queue length					     11,156,572       17,973.9	       46.5	    8,987.0	    278.7	8,789.9       9,184.1

System Statistics (Global)		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
switch current caused by our pin					     48 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
switch current to new buffer						     52 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
table fetch by rowid						     27,093,180       43,649.0	      112.9	   21,824.5	     20.9      21,809.7      21,839.3
table fetch continued row						    240 	   0.4		0.0		0.2	      0.1	    0.1 	  0.2
table scan blocks gotten						 16,644 	  26.8		0.1	       13.4	      2.2	   11.9 	 15.0
table scan disk non-IMC rows gotten				      1,080,741        1,741.2		4.5	      870.6	      3.7	  868.0 	873.2
table scan rows gotten						      1,080,741        1,741.2		4.5	      870.6	      3.7	  868.0 	873.2
table scans (short tables)						  1,345 	   2.2		0.0		1.1	      0.1	    1.0 	  1.2
temp space allocated (bytes)					      3,145,728        5,069.0	       13.1	    5,069.0	      N/A	5,069.0       5,069.0
total cf enq hold time							 27,161 	  43.8		0.1	       21.9	     12.3	   13.2 	 30.6
total number of cf enq holders						    567 	   0.9		0.0		0.5	      0.1	    0.4 	  0.5
total number of times SMON posted					     62 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
transaction rollbacks							      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
transaction tables consistent reads - undo records applied		  3,099 	   5.0		0.0		2.5	      1.9	    1.1 	  3.9
undo change vector size 					    916,422,388    1,476,420.8	    3,817.9	  738,210.4	    672.3     737,735.0     738,685.8
user I/O wait time						      4,952,692        7,979.3	       20.6	    3,989.6	    474.8	3,653.9       4,325.4
user calls								  1,995 	   3.2		0.0		1.6	      0.1	    1.5 	  1.7
user commits								240,033 	 386.7		1.0	      193.4	      0.0	  193.3 	193.4
user logons cumulative							      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
user logouts cumulative 						    130 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
workarea executions - optimal						  2,221 	   3.6		0.0		1.8	      0.2	    1.7 	  1.9
write clones created in foreground					    153 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
			  --------------------------------------------------------------------------------------------------------------------


Global Messaging Statistics (Global)	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
Global Enqueue S-optim Broadcasts sent					    188 	   0.3		0.0		0.2	      0.0	    0.1 	  0.2
Global Enqueue S-optim S-lock gets					144,045 	 232.1		0.6	      116.0	     47.9	   82.2 	149.9
Global Enqueue S-optim anti-locks crea					     95 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
acks for commit broadcast(actual)					 18,984 	  30.6		0.1	       15.3	     10.1	    8.1 	 22.4
acks for commit broadcast(logical)					 96,393 	 155.3		0.4	       77.7	     22.0	   62.1 	 93.2
broadcast msgs on commit(actual)					 96,260 	 155.1		0.4	       77.5	     21.5	   62.3 	 92.7
broadcast msgs on commit(logical)					168,389 	 271.3		0.7	      135.6	     23.7	  118.9 	152.4
broadcast msgs on commit(wasted)					 75,204 	 121.2		0.3	       60.6	     10.3	   53.3 	 67.9
gcs assume no cvt							 15,357 	  24.7		0.1	       12.4	     14.4	    2.2 	 22.6
gcs ast to fg								452,402 	 728.7		1.9	      364.4	    495.9	   13.7 	715.0
gcs ast xid								      3 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs bidless ast to lms							  1,520 	   2.4		0.0		1.2	      1.7	    0.0 	  2.4
gcs blocked converts							126,503 	 203.8		0.5	      101.9	      1.1	  101.1 	102.7
gcs blocked cr converts 						  6,511 	  10.5		0.0		5.2	      1.0	    4.5 	  6.0
gcs compatible basts							     25 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gcs compatible cr basts (global)					     47 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
gcs compatible cr basts (local) 					 23,342 	  37.6		0.1	       18.8	      3.4	   16.4 	 21.2
gcs cr requests to slave						      4 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs dbwr flush pi msgs						      1,114,403        1,795.4		4.6	      897.7	    155.5	  787.8       1,007.7
gcs dbwr write request msgs						    357 	   0.6		0.0		0.3	      0.3	    0.1 	  0.5
gcs force cr block only 						      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs force cr grant							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs grant ast								453,922 	 731.2		1.9	      365.6	    497.7	   13.7 	717.5
gcs immediate (compatible) converts					 14,735 	  23.7		0.1	       11.9	      0.4	   11.6 	 12.2
gcs immediate (null) converts					      2,048,574        3,300.4		8.5	    1,650.2	     10.5	1,642.8       1,657.6
gcs immediate cr (compatible) converts					165,531 	 266.7		0.7	      133.3	      6.8	  128.5 	138.2
gcs immediate cr (null) converts				     11,662,220       18,788.6	       48.6	    9,394.3	     55.2	9,355.3       9,433.4
gcs lms write request msgs						    208 	   0.3		0.0		0.2	      0.2	    0.1 	  0.3
gcs msgs process time(ms)						567,810 	 914.8		2.4	      457.4	     56.1	  417.7 	497.1
gcs msgs received						     22,691,472       36,557.1	       94.5	   18,278.5	  1,751.0      17,040.4      19,516.6
gcs new served by master						    437 	   0.7		0.0		0.4	      0.3	    0.1 	  0.6
gcs out-of-order msgs							     93 	   0.1		0.0		0.1	      0.1	    0.0 	  0.1
gcs pings refused							  2,015 	   3.2		0.0		1.6	      0.0	    1.6 	  1.7
gcs reader bypass grant immediate					     56 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
gcs refuse xid								      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs refuse xid to fg							      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs side channel msgs actual						  6,679 	  10.8		0.0		5.4	      0.1	    5.3 	  5.5
gcs side channel msgs logical						486,562 	 784.0		2.0	      392.0	    470.8	   59.1 	724.9
gcs stale cr								    102 	   0.2		0.0		0.1	      0.1	    0.0 	  0.2
gcs undo cr								     50 	   0.1		0.0		0.1	      N/A	    0.1 	  0.1
gcs writes refused							      4 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ges msgs process time(ms)						    420 	   0.7		0.0		0.3	      0.1	    0.3 	  0.4
ges msgs received							 17,283 	  27.8		0.1	       13.9	      3.7	   11.3 	 16.5
implicit batch messages received					365,298 	 588.5		1.5	      294.3	     35.7	  269.0 	319.5
implicit batch messages sent						365,500 	 588.9		1.5	      294.4	     38.1	  267.5 	321.4
messages flow controlled						 36,964 	  59.6		0.2	       29.8	     12.4	   21.0 	 38.5
messages queue sent actual					      3,856,697        6,213.3	       16.1	    3,106.7	    276.1	2,911.4       3,301.9
messages queue sent logical					      2,269,519        3,656.4		9.5	    1,828.2	    280.1	1,630.1       2,026.3
messages received actual					      8,793,250       14,166.4	       36.6	    7,083.2	    483.0	6,741.7       7,424.7
messages received logical					     22,708,755       36,584.9	       94.6	   18,292.5	  1,747.3      17,056.9      19,528.0
messages sent directly						      2,369,048        3,816.8		9.9	    1,908.4	    351.2	1,660.1       2,156.7
messages sent indirectly					      8,791,796       14,164.6	       36.6	    7,082.3	  1,381.6	6,105.3       8,059.3
messages sent not implicit batched					159,365 	 256.7		0.7	      128.4	      2.2	  126.8 	130.0
messages sent pbatched						     18,890,858       30,434.9	       78.7	   15,217.4	  1,389.1      14,235.2      16,199.7
msgs received kernel queue time (ns)			      2,962,291,883,260 4.77283321E+09 1.234119E+07   2.3864166E+09 1.3498570E+09 1.4319236E+09 3.3409096E+09
msgs received queue time (ms)						866,509        1,396.1		3.6	      698.1	    340.6	  457.2 	938.9
msgs received queued						     22,708,755       36,584.9	       94.6	   18,292.5	  1,747.3      17,056.9      19,528.0
msgs sent queue time (ms)						809,125        1,303.6		3.4	      651.8	    246.4	  477.6 	826.1
msgs sent queue time on ksxp (ms)				     27,708,161       44,637.5	      115.4	   22,318.8	  8,122.6      16,575.2      28,062.3
msgs sent queued						      4,873,534        7,851.6	       20.3	    3,925.8	    111.4	3,847.0       4,004.6

Global Messaging Statistics (Global)	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
msgs sent queued on ksxp					      8,790,546       14,162.3	       36.6	    7,081.2	    539.7	6,699.6       7,462.8
number of directly freed master res					     22 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
process batch messages received 				      5,709,859        9,198.9	       23.8	    4,599.5	    127.5	4,509.3       4,689.6
process batch messages sent					      5,988,545        9,648.0	       24.9	    4,824.0	    201.5	4,681.5       4,966.5
receiver cycle time						      1,834,030        2,954.8		7.6	    1,477.4	      2.0	1,476.0       1,478.8
receiver loop count						      7,058,752       11,371.9	       29.4	    5,686.0	    810.2	5,113.0       6,258.9
			  --------------------------------------------------------------------------------------------------------------------


System Statistics (Absolute Values)	   DB/Inst: P80DB/p80db1  Snaps: 55-56

	    Sessions		   Open Cursors 	    Session Cached Cursors
       -----------------   ---------------------------	 ---------------------------
  I#	  Begin      End	    Begin	   End		  Begin 	 End
----   -------- --------   -------------- ------------	 -------------- ------------
   1	    192      127	      391	   126		 14,774       15,073
   2	    183      120	      410	    93		 20,645       21,010
 ~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~	 ~~~~~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	    375      247	      801	   219		 35,419       36,083
 Avg	    188      124	      401	   110		 17,710       18,042
 Std	      6        5	       13	    23		  4,151        4,198
			  --------------------------------------------------------------------------------------------------------------------

IO Profile (Global)			   DB/Inst: P80DB/p80db1  Snaps: 55-56

Statistic			  Read+Write/s	      Reads/s	    Writes/s
------------------------------ --------------- -------------- --------------
Total Requests			     33,056.84	    28,427.85	    4,628.99
Database Requests		     32,658.03	    28,410.52	    4,247.51
Optimized Requests			  0.00		 0.00		0.00
Redo Requests				272.23		  N/A	      272.23
Total (MB)				265.13	       226.52	       38.61
Database (MB)				256.59	       221.97	       34.62
Optimized Total (MB)			  0.00		 0.00		0.00
Redo (MB)				  3.43		  N/A		3.43
Database (blocks)		     32,844.09	    28,412.13	    4,431.97
Via Buffer Cache (blocks)	     32,841.74	    28,412.10	    4,429.64
Direct (blocks) 			  2.35		 0.02		2.33
			  --------------------------------------------------------------------------------------------------------------------

IOStat by Function			   DB/Inst: P80DB/p80db1  Snaps: 55-56

					   Requests						 MB
		       ------------------------------------------------   ------------------------------------------------
															      Waits:	Avg
  I# Function Name	      Total	  IOs/s     Reads/s    Writes/s 	 Total	   IO MB/s   Read MB/s	Write MB/s     Count	Time
---- ---------------   ------------ ----------- ----------- -----------   ------------ ----------- ----------- -----------   ------- --------
   * Total		 20,327,545   32,742.69   28,153.52    4,589.17        163,055	    262.64	224.37	     38.27	  7M   7.23ms
     Buffer Cache Re	 17,467,635   28,136.07   28,136.07	   0.00        136,482	    219.84	219.84	      0.00	6.8M   7.21ms
     DBWR		  2,614,577    4,211.44        0.43    4,211.02 	21,307	     34.32	  0.01	     34.31	 264   4.39ms
     Others		     12,390	  19.96       16.99	   2.96 	 3,025	      4.87	  4.52	      0.35	6935   8.29ms
     LGWR		    232,900	 375.14        0.00	 375.14 	 2,236	      3.60	  0.00	      3.60    167.8K   8.28ms
     Direct Reads		 17	   0.03        0.02	   0.00 	     3	      0.00	  0.00	      0.00	   0
     Direct Writes		 26	   0.04        0.00	   0.04 	     2	      0.00	  0.00	      0.00	   0

   1 Total		 10,221,971   16,465.09   14,171.94    2,293.15 	82,050	    132.16	112.95	     19.21	3.5M   7.80ms
     Buffer Cache Re	  8,792,672   14,162.84   14,162.84	   0.00 	68,710	    110.67	110.67	      0.00	3.4M   7.75ms
     DBWR		  1,313,093    2,115.07        0.21    2,114.86 	10,699	     17.23	  0.00	     17.23	 132   4.57ms
     Others		      6,573	  10.59        8.86	   1.73 	 1,516	      2.44	  2.27	      0.17	3749   7.94ms
     LGWR		    109,600	 176.54        0.00	 176.54 	 1,120	      1.80	  0.00	      1.80     73.9K   9.89ms
     Direct Reads		 17	   0.03        0.02	   0.00 	     3	      0.00	  0.00	      0.00	   0
     Direct Writes		 16	   0.03        0.00	   0.03 	     2	      0.00	  0.00	      0.00	   0

   2 Total		 10,105,574   16,277.60   13,981.58    2,296.02 	81,005	    130.48	111.42	     19.06	3.5M   6.66ms
     Buffer Cache Re	  8,674,963   13,973.24   13,973.24	   0.00 	67,772	    109.16	109.16	      0.00	3.4M   6.65ms
     DBWR		  1,301,484    2,096.37        0.21    2,096.16 	10,608	     17.09	  0.00	     17.08	 132   4.20ms
     Others		      5,817	   9.37        8.13	   1.24 	 1,509	      2.43	  2.25	      0.18	3186   8.70ms
     LGWR		    123,300	 198.61        0.00	 198.61 	 1,116	      1.80	  0.00	      1.80     93.9K   7.01ms
     Direct Writes		 10	   0.02        0.00	   0.02 	     0	      0.00	  0.00	      0.00	   0
			  --------------------------------------------------------------------------------------------------------------------

IOStat by File Type			   DB/Inst: P80DB/p80db1  Snaps: 55-56

					   Requests						 MB				Service Time
		       ------------------------------------------------   ------------------------------------------------   -----------------
																Small	 Large
  I# Filetype Name	      Total	  IOs/s     Reads/s    Writes/s 	 Total	   IO MB/s   Read MB/s	Write MB/s	 Read	  Read
---- ---------------   ------------ ----------- ----------- -----------   ------------ ----------- ----------- -----------   -------- --------
   * Total		 20,320,070   32,730.65   28,143.63    4,587.02        162,810	    262.25	224.29	     37.95     2.29ms 1799.19m
     Data File		 20,074,746   32,335.49   28,126.05    4,209.44        157,727	    254.06	219.76	     34.30     2.29ms	6.50ms
     Log File		    235,747	 379.73        4.76	 374.97 	 4,924	      7.93	  4.33	      3.60    33.33us 1806.48m
     Control File	      9,145	  14.73       12.58	   2.15 	   142	      0.23	  0.19	      0.03     3.61ms
     Temp File			300	   0.48        0.24	   0.25 	    17	      0.03	  0.01	      0.01     4.04ms  21.22ms
     Other			132	   0.21        0.00	   0.21 	     0	      0.00	  0.00	      0.00

   1 Total		 10,218,541   16,459.56   14,167.56    2,292.00 	81,931	    131.97	112.91	     19.06     2.52ms 1797.27m
     Data File		 10,102,343   16,272.40   14,158.39    2,114.00 	79,372	    127.85	110.62	     17.23     2.52ms	9.00ms
     Log File		    111,036	 178.85        2.39	 176.46 	 2,468	      3.98	  2.17	      1.80    22.22us 1810.45m
     Control File	      4,863	   7.83        6.63	   1.21 	    76	      0.12	  0.10	      0.02     3.69ms
     Temp File			191	   0.31        0.15	   0.15 	    15	      0.02	  0.01	      0.01     4.37ms  21.22ms
     Other			108	   0.17        0.00	   0.17 	     0	      0.00	  0.00	      0.00

   2 Total		 10,101,529   16,271.09   13,976.07    2,295.01 	80,879	    130.28	111.39	     18.89     2.06ms 1801.14m
     Data File		  9,972,403   16,063.09   13,967.66    2,095.44 	78,355	    126.21	109.13	     17.08     2.06ms	4.00ms
     Log File		    124,711	 200.88        2.38	 198.50 	 2,456	      3.96	  2.16	      1.80    44.44us 1802.48m
     Control File	      4,282	   6.90        5.96	   0.94 	    66	      0.11	  0.09	      0.01     3.51ms
     Temp File			109	   0.18        0.08	   0.09 	     2	      0.00	  0.00	      0.00     3.49ms
     Other			 24	   0.04        0.00	   0.04 	     0	      0.00	  0.00	      0.00
			  --------------------------------------------------------------------------------------------------------------------


Segment Statistics (Global)		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> % Total shows % of statistic for each segment compared to the global cluster-wide total
   (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants)
-> % Capture shows % of statistic for each segment compared to the  total captured
   by AWR for all segments during the snapshot interval
-> Captured Segments account for   57.5% of Total Logical Reads:      23,348,701
-> Captured Segments account for   75.1% of Total Physical Reads:      17,639,015
-> Captured Segments account for   75.1% of Total Physical Read Requests:      17,638,020
-> Captured Segments account for   75.1% of Total UnOptimized Read Requests:	  17,638,020
-> Captured Segments account for    0.0% of Total Optimized  Read Requests:		  1
-> Captured Segments account for    0.0% of Total Direct Physical Reads:	      14
-> Captured Segments account for   72.7% of Total Physical Writes:	 2,751,484
-> Captured Segments account for   75.7% of Total Physical Write Requests:	 2,636,968
-> Captured Segments account for   29.0% of Total Direct Physical Writes:	    1,446
-> Captured Segments account for    0.0% of Total Table Scans:		     2
-> Captured Segments account for   59.0% of Total CR Blocks Received:		6,586
-> Captured Segments account for   17.3% of Total Current Blocks Received:	    27,540
-> Captured Segments account for   59.1% of Total CR Blocks Served:	      6,576
-> Captured Segments account for   17.3% of Total Current Blocks Served:	  27,574
-> Captured Segments account for   70.5% of Total Global Cache Remote Grants:	    7,203,551
-> When ** MISSING ** occurs, some of the object attributes may not be available

				    Tablespace Object		    Subobject  Obj.
Statistic		 Owner	    Name       Name		    Name       Type	   Obj#   Dataobj#	  Value %Total %Capture
------------------------ ---------- ---------- -------------------- ---------- ----- ---------- ---------- ------------ ------ --------
buffer busy waits	 SYS	    SYSTEM     SEG$			       TABLE	     14 	 8	      1    N/A	  100.0
db block changes	 USER61     IOPS       CF1			       TABLE	  73520      73523	 36,096    N/A	   17.0
			 USER24     IOPS       CF1			       TABLE	  73341      73340	 35,584    N/A	   16.7
			 USER114    IOPS       CF1			       TABLE	  73788      73792	 35,376    N/A	   16.6
			 USER45     IOPS       CF1			       TABLE	  73442      73445	 35,184    N/A	   16.6
			 USER108    IOPS       CF1			       TABLE	  73749      73760	 35,152    N/A	   16.5
			 USER41     IOPS       CF1			       TABLE	  73423      73426	 35,152    N/A	   16.5
gc buffer busy		 SYS	    SYSTEM     SEG$			       TABLE	     14 	 8	      2    N/A	  100.0
gc cr blocks received	 USER40     IOPS       CF1			       TABLE	  73421      73425	    156    2.4	   22.4
			 USER109    IOPS       CF1			       TABLE	  73761      73763	    132    2.0	   18.9
			 USER27     IOPS       CF1			       TABLE	  73351      73354	    117    1.8	   16.8
			 USER122    IOPS       CF1			       TABLE	  73830      73834	     98    1.5	   14.1
			 USER115    IOPS       CF1			       TABLE	  73790      73793	     97    1.5	   13.9
			 USER51     IOPS       CF1			       TABLE	  73471      73476	     97    1.5	   13.9
gc cr blocks served	 USER40     IOPS       CF1			       TABLE	  73421      73425	    156    2.4	   22.4
			 USER109    IOPS       CF1			       TABLE	  73761      73763	    132    2.0	   18.9
			 USER27     IOPS       CF1			       TABLE	  73351      73354	    117    1.8	   16.8
			 USER122    IOPS       CF1			       TABLE	  73830      73834	     98    1.5	   14.1
			 USER115    IOPS       CF1			       TABLE	  73790      73793	     97    1.5	   13.9
			 USER51     IOPS       CF1			       TABLE	  73471      73476	     97    1.5	   13.9
gc cu blocks received	 USER47     IOPS       CF1			       TABLE	  73450      73453	    179    0.6	   22.8
			 USER38     IOPS       CF1			       TABLE	  73409      73412	    166    0.6	   21.1
			 USER10     IOPS       CF1			       TABLE	  73264      73272	    164    0.6	   20.9
			 USER126    IOPS       CF1			       TABLE	  73845      73854	    149    0.5	   19.0
			 USER122    IOPS       CF1			       TABLE	  73830      73834	    127    0.5	   16.2
gc cu blocks served	 USER47     IOPS       CF1			       TABLE	  73450      73453	    179    0.6	   22.8
			 USER38     IOPS       CF1			       TABLE	  73409      73412	    166    0.6	   21.1
			 USER10     IOPS       CF1			       TABLE	  73264      73272	    164    0.6	   20.9
			 USER126    IOPS       CF1			       TABLE	  73845      73854	    149    0.5	   19.0
			 USER122    IOPS       CF1			       TABLE	  73830      73834	    127    0.5	   16.2
gc remote grants	 USER26     IOPS       CF1			       TABLE	  73349      73353	110,869    1.5	   25.0
			 USER46     IOPS       CF1			       TABLE	  73448      73452	105,843    1.5	   23.8
			 USER73     IOPS       CF1			       TABLE	  73582      73585	 77,941    1.1	   17.6
			 USER78     IOPS       CF1			       TABLE	  73610      73614	 75,201    1.0	   16.9
			 USER43     IOPS       CF1			       TABLE	  73432      73435	 74,076    1.0	   16.7
logical reads		 USER24     IOPS       CF1			       TABLE	  73341      73340	237,376    1.0	   16.8
			 USER114    IOPS       CF1			       TABLE	  73788      73792	236,208    1.0	   16.7
			 USER45     IOPS       CF1			       TABLE	  73442      73445	234,528    1.0	   16.6
			 USER61     IOPS       CF1			       TABLE	  73520      73523	234,528    1.0	   16.6
			 USER41     IOPS       CF1			       TABLE	  73423      73426	234,432    1.0	   16.6
			 USER108    IOPS       CF1			       TABLE	  73749      73760	234,320    1.0	   16.6
physical reads		 USER24     IOPS       CF1			       TABLE	  73341      73340	233,359    1.3	   20.2
			 USER114    IOPS       CF1			       TABLE	  73788      73792	232,166    1.3	   20.0
			 USER108    IOPS       CF1			       TABLE	  73749      73760	231,053    1.3	   20.0
			 USER41     IOPS       CF1			       TABLE	  73423      73426	230,684    1.3	   19.9
			 USER45     IOPS       CF1			       TABLE	  73442      73445	230,678    1.3	   19.9
physical read requests	 USER24     IOPS       CF1			       TABLE	  73341      73340	233,359    1.3	   20.2
			 USER114    IOPS       CF1			       TABLE	  73788      73792	232,166    1.3	   20.0
			 USER108    IOPS       CF1			       TABLE	  73749      73760	231,053    1.3	   20.0
			 USER41     IOPS       CF1			       TABLE	  73423      73426	230,684    1.3	   19.9
			 USER45     IOPS       CF1			       TABLE	  73442      73445	230,678    1.3	   19.9
physical writes 	 USER24     IOPS       CF1			       TABLE	  73341      73340	 35,085    N/A	   20.1
			 USER114    IOPS       CF1			       TABLE	  73788      73792	 34,934    N/A	   20.1
			 USER108    IOPS       CF1			       TABLE	  73749      73760	 34,795    N/A	   20.0
			 USER41     IOPS       CF1			       TABLE	  73423      73426	 34,707    N/A	   19.9
			 USER61     IOPS       CF1			       TABLE	  73520      73523	 34,684    N/A	   19.9
physical writes direct	 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 32778098_0 TABLE	  73031      73031	    420    N/A	  100.0
physical write requests  USER24     IOPS       CF1			       TABLE	  73341      73340	 34,981    1.3	   20.1
			 USER114    IOPS       CF1			       TABLE	  73788      73792	 34,849    1.3	   20.1
			 USER108    IOPS       CF1			       TABLE	  73749      73760	 34,692    1.3	   20.0

Segment Statistics (Global)		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> % Total shows % of statistic for each segment compared to the global cluster-wide total
   (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants)
-> % Capture shows % of statistic for each segment compared to the  total captured
   by AWR for all segments during the snapshot interval
-> Captured Segments account for   57.5% of Total Logical Reads:      23,348,701
-> Captured Segments account for   75.1% of Total Physical Reads:      17,639,015
-> Captured Segments account for   75.1% of Total Physical Read Requests:      17,638,020
-> Captured Segments account for   75.1% of Total UnOptimized Read Requests:	  17,638,020
-> Captured Segments account for    0.0% of Total Optimized  Read Requests:		  1
-> Captured Segments account for    0.0% of Total Direct Physical Reads:	      14
-> Captured Segments account for   72.7% of Total Physical Writes:	 2,751,484
-> Captured Segments account for   75.7% of Total Physical Write Requests:	 2,636,968
-> Captured Segments account for   29.0% of Total Direct Physical Writes:	    1,446
-> Captured Segments account for    0.0% of Total Table Scans:		     2
-> Captured Segments account for   59.0% of Total CR Blocks Received:		6,586
-> Captured Segments account for   17.3% of Total Current Blocks Received:	    27,540
-> Captured Segments account for   59.1% of Total CR Blocks Served:	      6,576
-> Captured Segments account for   17.3% of Total Current Blocks Served:	  27,574
-> Captured Segments account for   70.5% of Total Global Cache Remote Grants:	    7,203,551
-> When ** MISSING ** occurs, some of the object attributes may not be available

				    Tablespace Object		    Subobject  Obj.
Statistic		 Owner	    Name       Name		    Name       Type	   Obj#   Dataobj#	  Value %Total %Capture
------------------------ ---------- ---------- -------------------- ---------- ----- ---------- ---------- ------------ ------ --------
			 USER41     IOPS       CF1			       TABLE	  73423      73426	 34,606    1.3	   19.9
			 USER61     IOPS       CF1			       TABLE	  73520      73523	 34,582    1.3	   19.9
			  --------------------------------------------------------------------------------------------------------------------

Library Cache Activity			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Summarized for all instances in the report
-> "Pct Misses"  should be very low

			 Get	Pct	       Pin    Pct	      Invali-	  GES Lock	GES Pin      GES Pin   GES Inval GES Invali-
Namespace	    Requests   Miss	  Requests   Miss    Reloads  dations	  Requests     Requests     Releases	Requests     dations
--------------- ------------ ------ -------------- ------ ---------- -------- ------------ ------------ ------------ ----------- -----------
ACCOUNT_STATUS		   8	0.0		 0    N/A	   0	    0		 8	      0 	   0	       0	   0
AUDIT POLICY		   4	0.0		 4    0.0	   0	    0		 4	      4 	   4	       0	   0
BODY			 342	1.8	       978    1.1	   4	    0	       273	    929 	 929	       0	   0
CLUSTER 		  35	2.9		35    2.9	   0	    0		35	     35 	  35	       0	   0
DBLINK			  10	0.0		 0    N/A	   0	    0		10	      0 	   0	       0	   0
EDITION 		   7	0.0		14    0.0	   0	    0		 7	      7 	   7	       0	   0
HINTSET OBJECT		   3	0.0		 3    0.0	   0	    0		 3	      3 	   3	       0	   0
INDEX			  77	0.0		77   16.9	  13	    0		77	     77 	  77	       0	   0
OBJECT ID		  55  100.0		 0    N/A	   0	    0		 0	      0 	   0	       0	   0
QUEUE			  62	0.0		62    0.0	   0	    0		62	     62 	  62	       0	   0
SCHEMA			 446	0.2		 0    N/A	   0	    0		60	      0 	   0	       0	   0
SQL AREA	       3,295   20.9	 1,623,965    0.1	 199	   58		 0	      0 	   0	       0	   0
SQL AREA BUILD		 579   89.3		 0    N/A	   0	    0		 0	      0 	   0	       0	   0
SQL AREA STATS		 550   81.3	       550   81.3	   0	    0		 0	      0 	   0	       0	   0
TABLE/PROCEDURE        3,573	6.0	    20,250    7.1	 556	    0	     7,366	 15,089       15,089	       0	   0
TRANSFORMATION		  62	0.0		62    0.0	   0	    0		62	     62 	  62	       0	   0
TRIGGER 		  14   21.4		14   21.4	   0	    0		 0	     14 	  14	       0	   0
			  --------------------------------------------------------------------------------------------------------------------


PGA Aggregate Target Statistics 	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> all stats are reported in MegaBytes

	  PGA Aggr Target	   Auto PGA Target	      PGA Mem Alloc		Auto Workareas		 Manual Workarea	   Global Mem Bound
       ---------------------   -----------------------	 -----------------------   -----------------------   -----------------------   -----------------------
  I#	    Begin	 End	      Begin	   End		Begin	     End	  Begin        End	    Begin	 End	      Begin	   End
----   ---------- ----------   ------------ ----------	 ------------ ----------   ------------ ----------   ------------ ----------   ------------ ----------
   1	  3,215.0    3,215.0	    1,534.7    1,799.5	      1,843.9	 1,474.2	    0.0        0.0	      0.0	 0.0	      321.5	 321.5
   2	  3,215.0    3,215.0	    1,538.7    1,822.5	      1,859.7	 1,466.6	    0.0        0.0	      0.0	 0.0	      321.5	 321.5
			  --------------------------------------------------------------------------------------------------------------------


Process Memory Summary			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> B: Begin Snap   E: End Snap I#: Instance number
-> Max Alloc is Maximum PGA allocation size at snapshot time
-> Hist Max Alloc is the Historical Max Allocation for still-connected processes
-> ordered by instance, Begin/End snapshot, Alloc (MB)

							     Hist
					Avg Std Dev    Max    Max
		     Alloc     Used   Alloc   Alloc  Alloc  Alloc   Num   Num
  I#   Category       (MB)     (MB)    (MB)    (MB)   (MB)   (MB)  Proc Alloc
---- - ---------- -------- -------- ------- ------- ------ ------ ----- -----
   1 B Freeable      201.8	 .0	3.4	7.1	35    N/A    59    59
       Other	    1062.2	N/A	4.1	5.5	38     38   260   260
       PL/SQL	      37.4     36.0	 .2	 .3	 1	3   196   192
       SQL	      30.6     26.7	 .2	 .4	 1     18   135   110
       Total	    1332.0     62.7	7.9    13.3	75     58   650   621
     E Freeable      179.2	 .0	5.1	8.9	33    N/A    35    35
       Other	     771.8	N/A	4.0	6.4	39     39   194   194
       PL/SQL	       7.4	6.4	 .1	 .3	 1	3   130   128
       SQL	       3.9	2.3	 .1	 .2	 1     18    69    32
       Total	     962.2	8.7	9.2    15.7	74     60   428   389
   2 B Freeable      231.6	 .0	2.5	7.1	45    N/A    93    93
       Other	    1054.9	N/A	4.2	5.5	39     39   251   251
       PL/SQL	      39.0     37.5	 .2	 .3	 2	3   187   184
       SQL	      22.2     15.6	 .2	 .3	 1     11   124   110
       Total	    1347.8     53.1	7.1    13.3	87     53   655   638
     E Freeable      189.1	 .0	4.8    10.5	45    N/A    39    39
       Other	     752.8	N/A	4.0	6.8	50     50   187   187
       PL/SQL	       9.5	8.2	 .1	 .4	 2	3   123   121
       SQL	       3.3	1.9	 .1	 .2	 1     11    61    35
       Total	     954.7     10.1	9.0    17.9	98     65   410   382
			  --------------------------------------------------------------------------------------------------------------------


init.ora Parameters			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> '*' indicates same value across all instances

Parameter Name		      I#  Begin value						End value (if different)
----------------------------- --- ----------------------------------------------------- ------------------------
_ipddb_enable			* TRUE
audit_file_dest 		* /u01/app/oracle/admin/p80db/adump
audit_trail			* DB
cluster_database		* TRUE
compatible			* 19.0.0
control_files			* +P80/P80DB/CONTROLFILE/current.266.1031731955, +FRA/P
db_block_size			* 8192
db_create_file_dest		* +P80
db_domain			* example.com
db_name 			* p80db
db_recovery_file_dest		* +FRA
db_recovery_file_dest_size	* 274877906944
diagnostic_dest 		* /u01/app/oracle
dispatchers			* (PROTOCOL=TCP) (SERVICE=p80dbXDB)
instance_number 		1 1
				2 2
listener_networks		*
local_listener			1  (ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.11)(PORT=1522
				2  (ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.12)(PORT=1522
nls_language			* AMERICAN
nls_territory			* AMERICA
open_cursors			* 300
pga_aggregate_target		* 3371171840
processes			* 640
remote_listener 		*  mcracpoc-scan.example.com:1521
remote_login_passwordfile	* EXCLUSIVE
sga_target			* 10133438464
thread				1 1
				2 2
undo_tablespace 		1 UNDOTBS1
				2 UNDOTBS2
			  --------------------------------------------------------------------------------------------------------------------


init.ora Multi-valued Parameters	   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> This section only displays parameters that have more one value
-> '*' indicates same value across all instances
-> '(NULL)' indicates that the	parameter value was not set
-> A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot

Parameter Name		      I#  Begin value						End value (if different)
----------------------------- --- ----------------------------------------------------- ------------------------
control_files			* +FRA/P80DB/CONTROLFILE/current.265.1031731955
				* +P80/P80DB/CONTROLFILE/current.266.1031731955
			  --------------------------------------------------------------------------------------------------------------------

Top SQL with Top Events 		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Top SQL statements by DB Time along with the top events by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Event is the percentage of DB Time due to the event that the SQL is
   waiting on.
-> % Row Source is the percentage of DB Time due to the row source for the
   SQL waiting on the event.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
									   % Row
Event			       % Event Top Row Source			  Source
------------------------------ ------- --------------------------------- -------
	  bhdvtsvjhgvrh 	  1497866750		     4724	   58.67
db file sequential read 	 26.50 TABLE ACCESS - BY INDEX ROWID BAT   24.42
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


db file parallel read		 15.09 TABLE ACCESS - BY INDEX ROWID BAT   15.09


gc cr multi block request	  9.09 TABLE ACCESS - BY INDEX ROWID BAT    9.09

	  35dumc2tpr9dv 	   203653710		     2614	   32.86
db file sequential read 	 23.44 UPDATE				   23.01
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


gc current grant busy		  4.92 UPDATE				    4.92


gc current block lost		  1.25 UPDATE				    1.25

			  --------------------------------------------------------------------------------------------------------------------

Top SQL with Top Row Sources		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Top SQL statements by DB Time along with the top row sources by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Row Source is the percentage of DB Time spent on the row source by
   that SQL.
-> % Event is the percentage of DB Time spent on the event by the
   SQL executing the row source.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
					   % Row
Row Source				  Source Top Event		 % Event
---------------------------------------- ------- ----------------------- -------
	  bhdvtsvjhgvrh 	  1497866750		     4724	   58.67
TABLE ACCESS - BY INDEX ROWID BATCHED	   55.81 db file sequential read   24.42
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


INDEX - RANGE SCAN			    2.71 db file sequential read    2.09

	  35dumc2tpr9dv 	   203653710		     2614	   32.86
UPDATE					   30.40 db file sequential read   23.01
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


UPDATE STATEMENT			    1.92 enq: HW - contention	    1.04

			  --------------------------------------------------------------------------------------------------------------------

Top Sessions				   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.
			  --------------------------------------------------------------------------------------------------------------------

Top Blocking Sessions			   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.
			  --------------------------------------------------------------------------------------------------------------------

Top PL/SQL Procedures			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> 'PL/SQL entry subprogram' represents the application's top-level
      entry-point (procedure, function, trigger, package initialization
      or RPC call) into PL/SQL.
-> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed
      at the point of sampling . If the value is 'SQL', it represents
      the percentage of time spent executing SQL for the particular
      PL/SQL entry subprogram

PL/SQL Entry Subprogram 					  % Activity
----------------------------------------------------------------- ----------
PL/SQL Current Subprogram					   % Current
----------------------------------------------------------------- ----------
USER1.SLOBUPDATE						       33.38
   SQL								       33.38
			  --------------------------------------------------------------------------------------------------------------------

Top Events				   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Top Events by DB Time
-> % Activity is the percentage of DB Time due to the event

Event				    Event Class     Session Type
----------------------------------- --------------- ---------------
	   Avg Active
% Activity   Sessions
---------- ----------
db file sequential read 	    User I/O	    FOREGROUND
     49.95	64.77
db file parallel read		    User I/O	    FOREGROUND
     15.09	19.57
gc cr multi block request	    Cluster	    FOREGROUND
      9.09	11.79
gc cr grant busy		    Cluster	    FOREGROUND
      5.79	 7.50
gc current grant busy		    Cluster	    FOREGROUND
      4.92	 6.38
			  --------------------------------------------------------------------------------------------------------------------

Top Event P1/P2/P3 Values		   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Top Events by DB Time and the top P1/P2/P3 values for those events.
-> % Event is the percentage of DB Time due to the event
-> % Activity is the percentage of DB Time due to the event with the given
   P1,P2,P3 Values.

Event			       % Event		   P1, P2, P3 Values % Activity
------------------------------ ------- ----------------------------- ----------
Parameter 1		   Parameter 2		      Parameter 3
-------------------------- -------------------------- --------------------------
db file sequential read 	 49.96		       "2","490","1"	   0.01
file#			   block#		      blocks

db file parallel read		 15.09			 "1","9","9"	  14.90
files			   blocks		      requests

gc cr multi block request	  9.10		     "1","20846","1"	   0.01
file#			   block#		      class#

log file parallel write 	  2.04			"1","19","2"	   0.07
files			   blocks		      requests

enq: HW - contention		  1.04	 "1213661190","5","20971928"	   0.19
name|mode		   table space #	      block

			  --------------------------------------------------------------------------------------------------------------------

Top DB Objects				   DB/Inst: P80DB/p80db1  Snaps: 55-56

		  No data exists for this section of the report.
			  --------------------------------------------------------------------------------------------------------------------

Activity Over Time			   DB/Inst: P80DB/p80db1  Snaps: 55-56
-> Analysis period is divided into smaller time slots as indicated
   in the 'Slot Time (Duration)'.
-> Top 3 events are reported in each of those slots
-> 'Slot Count' shows the number of ASH samples in that slot
-> 'Event Count' shows the number of ASH samples waiting for
   that event in that slot
-> '% Event' is 'Event Count' over all ASH samples in the analysis period

			 Slot					Event
Slot Time (Duration)	Count Event				Count % Event
-------------------- -------- ------------------------------ -------- -------
09:07:41   (2.3 min)	2,090 db file sequential read		1,115	13.85
			      db file parallel read		  325	 4.04
			      gc cr multi block request 	  180	 2.24
09:10:00   (5.0 min)	4,145 db file sequential read		2,083	25.87
			      db file parallel read		  613	 7.61
			      gc cr multi block request 	  397	 4.93
09:15:00   (3.0 min)	1,817 db file sequential read		  825	10.25
			      db file parallel read		  277	 3.44
			      gc cr multi block request 	  156	 1.94
			  --------------------------------------------------------------------------------------------------------------------



	  ADDM Report for Task 'ADDM:2732778098_56'
	  -----------------------------------------

Analysis Period
---------------
AWR snapshot range from 55 to 56.
Time period starts at 12-FEB-20 09.07.41 AM
Time period ends at 12-FEB-20 09.18.02 AM

Analysis Target
---------------
Database 'P80DB' with DB ID 2732778098.
Database version 19.0.0.0.0.
ADDM performed an analysis of all instances.

Activity During the Analysis Period
-----------------------------------
Total database time was 72706 seconds.
The average number of active sessions was 117.08.

Summary of Findings
-------------------
   Description		      Active Sessions	   Recommendations
			      Percent of Activity
   -------------------------  -------------------  ---------------
1  Interconnect Latency       117.08 | 100	   1
2  Top SQL Statements	      116.2 | 99.25	   2
3  "User I/O" wait Class      79.86 | 68.21	   0
4  Global Cache Messaging     31.98 | 27.31	   1
5  Buffer Busy - Hot Objects  14.91 | 12.73	   0
6  Global Cache Lost Blocks   3.32 | 2.83	   1


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 117.08 active sessions, 100% of total activity.
---------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time.
The database was consuming 84894 kilo bits per second of interconnect
bandwidth.
4% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 94% for database lock management.
The average latency for 8K interconnect messages was 1349 microseconds.

Instances that were significantly affected by this finding:
    Number  Name    Percent Impact  ADDM Task Name
    ------  ------  --------------  --------------
    2	    p80db2  49.11	    ADDM:2732778098_2_56
    1	    p80db1  42.66	    ADDM:2732778098_1_56

   Recommendation 1: Host Configuration
   Estimated benefit is 117.08 active sessions, 100% of total activity.
   --------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle's recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS's socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter "db_file_multiblock_read_count" may be decreased as a
      workaround.
   Action
      Look at the instance level ADDM tasks for a list of interconnect devices
      used by a specific instance.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 31.98 active sessions, 27.31% of total activity.
	 Wait class "Cluster" was consuming significant database time.
	 Impact is 32.22 active sessions, 27.52% of total activity.


Finding 2: Top SQL Statements
Impact is 116.2 active sessions, 99.25% of total activity.
----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

Instances that were significantly affected by this finding:
    Number  Name    Percent Impact  ADDM Task Name
    ------  ------  --------------  --------------
    1	    p80db1  50.62	    ADDM:2732778098_1_56
    2	    p80db2  49.38	    ADDM:2732778098_2_56

   Recommendation 1: SQL Tuning
   Estimated benefit is 74.48 active sessions, 63.62% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      "bhdvtsvjhgvrh".
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND
	 (CUSTID < :B1 )
   Rationale
      The SQL spent 100% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID "bhdvtsvjhgvrh" was executed 1342302 times and
      had an average elapsed time of 0.034 seconds.

   Recommendation 2: SQL Tuning
   Estimated benefit is 39.3 active sessions, 33.57% of total activity.
   --------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      "35dumc2tpr9dv".
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 ))
	 AND (CUSTID < :B1 )
   Rationale
      The SQL spent 94% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID "35dumc2tpr9dv" was executed 236920 times and
      had an average elapsed time of 0.1 seconds.


Finding 3: "User I/O" wait Class
Impact is 79.86 active sessions, 68.21% of total activity.
----------------------------------------------------------
Wait class "User I/O" was consuming significant database time.
The throughput of the I/O subsystem was not significantly lower than expected.

Instances that were significantly affected by this finding:
    Number  Name    Percent Impact  ADDM Task Name
    ------  ------  --------------  --------------
    1	    p80db1  54.09	    ADDM:2732778098_1_56
    2	    p80db2  45.91	    ADDM:2732778098_2_56

   No recommendations are available.


Finding 4: Global Cache Messaging
Impact is 31.98 active sessions, 27.31% of total activity.
----------------------------------------------------------
Inter-instance messaging was consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name    Percent Impact  ADDM Task Name
    ------  ------  --------------  --------------
    2	    p80db2  63.3	    ADDM:2732778098_2_56
    1	    p80db1  36.7	    ADDM:2732778098_1_56

   Recommendation 1: Application Analysis
   Estimated benefit is 31.98 active sessions, 27.31% of total activity.
   ---------------------------------------------------------------------
   Action
      Look at the "Top SQL Statements" finding for SQL statements consuming
      significant time on Cluster waits. For example, the SELECT statement
      with SQL_ID "bhdvtsvjhgvrh" is responsible for 63% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "Cluster" was consuming significant database time.
      Impact is 32.22 active sessions, 27.52% of total activity.


Finding 5: Buffer Busy - Hot Objects
Impact is 14.91 active sessions, 12.73% of total activity.
----------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

Instances that were significantly affected by this finding:
    Number  Name    Percent Impact  ADDM Task Name
    ------  ------  --------------  --------------
    2	    p80db2  100 	    ADDM:2732778098_2_56

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 14.91 active sessions, 12.73% of total activity.
	 Inter-instance messaging was consuming significant database time.
	 Impact is 31.98 active sessions, 27.31% of total activity.
	    Wait class "Cluster" was consuming significant database time.
	    Impact is 32.22 active sessions, 27.52% of total activity.


Finding 6: Global Cache Lost Blocks
Impact is 3.32 active sessions, 2.83% of total activity.
--------------------------------------------------------
Cluster communications that were retried due to lost blocks consumed
significant database time.
The database was consuming 84894 kilo bits per second of interconnect
bandwidth.
4% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 94% for database lock management.
The average latency for 8K interconnect messages was 1349 microseconds.

Instances that were significantly affected by this finding:
    Number  Name    Percent Impact  ADDM Task Name
    ------  ------  --------------  --------------
    1	    p80db1  98.71	    ADDM:2732778098_1_56

   Recommendation 1: Host Configuration
   Estimated benefit is 3.32 active sessions, 2.83% of total activity.
   -------------------------------------------------------------------
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS's socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter "db_file_multiblock_read_count" may be decreased as a
      workaround.
   Action
      Look at the instance level ADDM tasks for a list of interconnect devices
      used by a specific instance.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 31.98 active sessions, 27.31% of total activity.
	 Wait class "Cluster" was consuming significant database time.
	 Impact is 32.22 active sessions, 27.52% of total activity.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Instances that were analyzed:
-----------------------------
    Number  Name    Host Name		   Active Sessions  Percent of Activity
    ------  ------  ---------------------  ---------------  -------------------
    1	    p80db1  mcracpoc1.example.com  59.68	    50.89
    2	    p80db2  mcracpoc2.example.com  57.49	    49.11

Miscellaneous Information
-------------------------
Wait class "Application" was not consuming significant database time.
Wait class "Commit" was not consuming significant database time.
Wait class "Concurrency" was not consuming significant database time.
Wait class "Configuration" was not consuming significant database time.
Wait class "Network" was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.

End of Report
Report written to awr_rac.txt
SQL> SQL> SQL> SQL> SQL> SQL> 




Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt.  Default value is 'html'.

'html'		HTML format (default)
'text'		Text format
'active-html'	Includes Performance Hub active report


Type Specified:  html







Current Database
~~~~~~~~~~~~~~~~
DB Id	       DB Name	      Container Name
-------------- -------------- --------------
 2732778098	P80DB	       p80db











Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
* 2732778098	 1	P80DB	     p80db1	  mcracpoc1.ex
* 2732778098	 2	P80DB	     p80db2	  mcracpoc2.ex

Using 2732778098 for database Id
Using instances ALL (default 'ALL')


Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.


Enter value for num_days: 
Listing all Completed Snapshots
DB Name      Snap Id	   Snap Started    Snap Level
------------ ---------- ------------------ ----------

P80DB		     1	07 Feb 2020 09:00    1
		     2	07 Feb 2020 10:00    1
		     3	07 Feb 2020 11:00    1
		     4	07 Feb 2020 12:00    1
		     5	07 Feb 2020 13:00    1
		     6	07 Feb 2020 14:00    1
		     7	07 Feb 2020 15:00    1
		     8	07 Feb 2020 16:00    1
		     9	07 Feb 2020 17:00    1
		    10	07 Feb 2020 18:00    1
		    11	07 Feb 2020 19:00    1
		    12	07 Feb 2020 20:00    1
		    13	07 Feb 2020 21:00    1
		    14	10 Feb 2020 22:00    1
		    15	11 Feb 2020 12:56    1
		    16	11 Feb 2020 13:37    1
		    17	11 Feb 2020 13:41    1
		    18	11 Feb 2020 13:44    1
		    19	11 Feb 2020 13:54    1
		    20	11 Feb 2020 14:04    1
		    21	11 Feb 2020 14:14    1
		    22	11 Feb 2020 14:29    1
		    23	11 Feb 2020 14:32    1
		    24	11 Feb 2020 14:35    1
		    25	11 Feb 2020 14:38    1
		    26	11 Feb 2020 14:48    1
		    27	11 Feb 2020 14:54    1
		    28	11 Feb 2020 14:58    1
		    29	11 Feb 2020 15:08    1
		    30	11 Feb 2020 20:40    1
		    31	11 Feb 2020 20:47    1
		    32	11 Feb 2020 20:50    1
		    33	11 Feb 2020 20:51    1
		    34	11 Feb 2020 21:01    1
		    35	11 Feb 2020 21:16    1
		    36	11 Feb 2020 21:17    1
		    37	11 Feb 2020 21:22    1
		    38	11 Feb 2020 21:25    1
		    39	11 Feb 2020 21:27    1
		    40	11 Feb 2020 21:28    1
		    41	11 Feb 2020 21:39    1
		    42	11 Feb 2020 21:44    1
		    43	11 Feb 2020 21:54    1
		    44	12 Feb 2020 07:50    1
		    45	12 Feb 2020 08:17    1
		    46	12 Feb 2020 08:28    1
		    47	12 Feb 2020 08:30    1
		    48	12 Feb 2020 08:33    1
		    49	12 Feb 2020 08:36    1
		    50	12 Feb 2020 08:37    1
		    51	12 Feb 2020 08:39    1
		    52	12 Feb 2020 08:49    1
		    53	12 Feb 2020 08:54    1
		    54	12 Feb 2020 09:04    1
		    55	12 Feb 2020 09:07    1
		    56	12 Feb 2020 09:18    1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 55

End   Snapshot Id specified: 56



Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_rac_55_56.html.	To use this name,
press <return> to continue, otherwise enter an alternative.


Using the report name awr_rac.html

<html lang="en"><head><title>AWR RAC Report for DB: P80DB, Snaps: 55-56</title>
<style type="text/css">
body.awr {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black; background:White;}
pre.awr  {font:8pt Courier;color:black; background:White;}
pre_sqltext.awr  {white-space: pre-wrap;}
h1.awr	 {font:bold 20pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;border-bottom:1px solid #cccc99;margin-top:0pt; margin-bottom:0pt;padding:0px 0px 0px 0px;}
h2.awr	 {font:bold 18pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
h3.awr {font:bold 16pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
li.awr {font: 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;}
th.awrnobg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;padding-left:4px; padding-right:4px;padding-bottom:2px}
th.awrbg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#0066CC;padding-left:4px; padding-right:4px;padding-bottom:2px}
td.awrnc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;}
td.awrc    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;}
td.awrncbb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
td.awrncrb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-right: thin solid black;}
td.awrcrb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-right: thin solid black;}
td.awrclb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;}
td.awrcbb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
a.awr {font:bold 8pt Arial,Helvetica,sans-serif;color:#663300; vertical-align:top;margin-top:0pt; margin-bottom:0pt;}
td.awrnct {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:White;vertical-align:top;}
td.awrct   {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrncbbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;border-top: thin solid black;}
td.awrncrbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrcrbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrclbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrcbbt   {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;border-right: thin solid black;}
table.tdiff {  border_collapse: collapse; }
table.tscl {width: 600;}
table.tscl tbody, table.tscl thead { display: block; }
table.tscl thead tr th {height: 12px;line-height: 12px;}
table.tscl tbody { height: 100px;overflow-y: auto; overflow-x: hidden;}
table.tscl tbody td, thead th {width: 200;}
.hidden   {position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden;}
.pad   {margin-left:17px;}
.doublepad {margin-left:34px;}
</style></head><body class="awr">
<h1 class="awr">
WORKLOAD REPOSITORY REPORT (RAC)

</h1>
<p />Database Summary<p />
<ul>
</ul>
<table border="0" class="tdiff" summary="Database Summary"><tr>
<th class="awrbg" colspan=" 8" id="Database">Database</th>
<th class="awrbg" colspan=" 2" id="SnapshotIds">Snapshot Ids</th>
<th class="awrbg" colspan=" 2" id="NumberofInstances">Number of Instances</th>
<th class="awrbg" colspan=" 2" id="NumberofHosts">Number of Hosts</th>
<th class="awrbg" colspan=" 2" id="ReportTotal(minutes)">Report Total (minutes)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Id">Id</th><th class="awrbg" scope="col" id="Name">Name</th><th class="awrbg" scope="col" id="UniqueName">Unique Name</th><th class="awrbg" scope="col" id="Role">Role</th><th class="awrbg" scope="col" id="Edition">Edition</th><th class="awrbg" scope="col" id="RAC">RAC</th><th class="awrbg" scope="col" id="CDB">CDB</th><th class="awrbg" scope="col" id="BlockSize">Block Size</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="InReport">In Report</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="InReport">In Report</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="Elapsedtime">Elapsed time</th></tr>
<tr><td align="right" headers="Database Id" class='awrclb'>2732778098</td><td headers="Database Name" class='awrc'>P80DB</td><td headers="Database UniqueName" class='awrc'>p80db</td><td headers="Database Role" class='awrc'>PRIMARY</td><td headers="Database Edition" class='awrc'>EE</td><td headers="Database RAC" class='awrc'>YES</td><td headers="Database CDB" class='awrc'>NO</td><td align="right" headers="Database BlockSize" class='awrc'>8192</td><td align="right" headers="SnapshotIds Begin" class='awrclb'>55</td><td align="right" headers="SnapshotIds End" class='awrc'>56</td><td align="right" headers="NumberofInstances InReport" class='awrclb'>2</td><td align="right" headers="NumberofInstances Total" class='awrc'>2</td><td align="right" headers="NumberofHosts InReport" class='awrclb'>2</td><td align="right" headers="NumberofHosts Total" class='awrc'>2</td><td align="right" headers="ReportTotal(minutes) DBtime" class='awrclb'>1,211.76</td><td align="right" headers="ReportTotal(minutes) Elapsedtime" class='awrcrb'>10.35</td></tr>
</table><p />
<p />Database Instances Included In Report<p />
<ul>
<li class="awr"> Listed in order of instance number, I#</li>
</ul>
<table border="0" class="tdiff" summary="Database Instances Included In Report. . Listed in order of instance number, I#"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Instance</th><th class="awrbg" scope="col">Host</th><th class="awrbg" scope="col">Startup</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th><th class="awrbg" scope="col">Release</th><th class="awrbg" scope="col">Elapsed Time(min)</th><th class="awrbg" scope="col">DB time(min)</th><th class="awrbg" scope="col">Up Time(hrs)</th><th class="awrbg" scope="col">Avg Active Sessions</th><th class="awrbg" scope="col">Platform</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td class='awrc'>p80db1</td><td class='awrc'>mcracpoc1.example.com</td><td class='awrc'>12-Feb-20 07:39</td><td class='awrc'>12-Feb-20 09:07</td><td class='awrc'>12-Feb-20 09:18</td><td class='awrc'>19.0.0.0.0</td><td align="right" class='awrc'>10.33</td><td align="right" class='awrc'>616.70</td><td align="right" class='awrc'>1.64</td><td align="right" class='awrc'>59.68</td><td class='awrc'>Linux x86 64-bit</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td class='awrnc'>p80db2</td><td class='awrnc'>mcracpoc2.example.com</td><td class='awrnc'>12-Feb-20 07:39</td><td class='awrnc'>12-Feb-20 09:07</td><td class='awrnc'>12-Feb-20 09:18</td><td class='awrnc'>19.0.0.0.0</td><td align="right" class='awrnc'>10.35</td><td align="right" class='awrnc'>595.07</td><td align="right" class='awrnc'>1.64</td><td align="right" class='awrnc'>57.49</td><td class='awrnc'>Linux x86 64-bit</td></tr>
</table><p />
<h3 class="awr"><a class="awr" name="99999"></a>Report Summary</h3>
<p />Top ADDM Findings by Average Active Sessions<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top ADDM findings by average active sessions"><tr><th class="awrbg" scope="col">Finding Name</th><th class="awrbg" scope="col">Avg active sessions of the task</th><th class="awrbg" scope="col">Percent active sessions of finding</th><th class="awrbg" scope="col">Task Name</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th></tr>
<tr><td class='awrc'>Interconnect Latency</td><td align="right" class='awrc'>117.08</td><td align="right" class='awrc'>1.0E+02</td><td scope="row" class='awrc'>ADDM:2732778098_56</td><td class='awrc'>12-Feb-20 09:07</td><td class='awrc'>12-Feb-20 09:18</td></tr>
<tr><td class='awrnc'>Top SQL Statements</td><td align="right" class='awrnc'>117.08</td><td align="right" class='awrnc'>99.25</td><td scope="row" class='awrnc'>ADDM:2732778098_56</td><td class='awrnc'>12-Feb-20 09:07</td><td class='awrnc'>12-Feb-20 09:18</td></tr>
<tr><td class='awrc'>&quot;User I/O&quot; wait Class</td><td align="right" class='awrc'>117.08</td><td align="right" class='awrc'>68.21</td><td scope="row" class='awrc'>ADDM:2732778098_56</td><td class='awrc'>12-Feb-20 09:07</td><td class='awrc'>12-Feb-20 09:18</td></tr>
<tr><td class='awrnc'>Global Cache Messaging</td><td align="right" class='awrnc'>117.08</td><td align="right" class='awrnc'>27.31</td><td scope="row" class='awrnc'>ADDM:2732778098_56</td><td class='awrnc'>12-Feb-20 09:07</td><td class='awrnc'>12-Feb-20 09:18</td></tr>
<tr><td class='awrc'>Buffer Busy - Hot Objects</td><td align="right" class='awrc'>117.08</td><td align="right" class='awrc'>12.73</td><td scope="row" class='awrc'>ADDM:2732778098_56</td><td class='awrc'>12-Feb-20 09:07</td><td class='awrc'>12-Feb-20 09:18</td></tr>
</table><p />
<p />Cache Sizes<p />
<ul>
<li class="awr"> All values are in Megabytes </li>
<li class="awr"> Listed in order of instance number, I# </li>
<li class="awr"> End values displayed only if different from Begin values</li>
</ul>
<table border="0" class="tdiff" summary="Cache Sizes. . All values are in Megabytes. Listed in order of instance number, I#. End values displayed only if different from Begin values"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="MemoryTarget">Memory Target</th>
<th class="awrbg" colspan=" 2" id="SgaTarget">Sga Target</th>
<th class="awrbg" colspan=" 2" id="DBCache">DB Cache</th>
<th class="awrbg" colspan=" 2" id="SharedPool">Shared Pool</th>
<th class="awrbg" colspan=" 2" id="LargePool">Large Pool</th>
<th class="awrbg" colspan=" 2" id="JavaPool">Java Pool</th>
<th class="awrbg" colspan=" 2" id="StreamsPool">Streams Pool</th>
<th class="awrbg" colspan=" 2" id="PGATarget">PGA Target</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col">Log Buffer</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="MemoryTarget Begin" class='awrclb'>&#160;</td><td align="right" headers="MemoryTarget End" class='awrc'>&#160;</td><td align="right" headers="SgaTarget Begin" class='awrclb'>9,664</td><td align="right" headers="SgaTarget End" class='awrc'>&#160;</td><td align="right" headers="DBCache Begin" class='awrclb'>7,872</td><td align="right" headers="DBCache End" class='awrc'>&#160;</td><td align="right" headers="SharedPool Begin" class='awrclb'>1,472</td><td align="right" headers="SharedPool End" class='awrc'>&#160;</td><td align="right" headers="LargePool Begin" class='awrclb'>160</td><td align="right" headers="LargePool End" class='awrc'>&#160;</td><td align="right" headers="JavaPool Begin" class='awrclb'>&#160;</td><td align="right" headers="JavaPool End" class='awrc'>&#160;</td><td align="right" headers="StreamsPool Begin" class='awrclb'>&#160;</td><td align="right" headers="StreamsPool End" class='awrc'>&#160;</td><td align="right" headers="PGATarget Begin" class='awrclb'>3,232</td><td align="right" headers="PGATarget End" class='awrcrb'>&#160;</td><td align="right" class='awrc'>19.42</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="MemoryTarget Begin" class='awrnclb'>&#160;</td><td align="right" headers="MemoryTarget End" class='awrnc'>&#160;</td><td align="right" headers="SgaTarget Begin" class='awrnclb'>9,664</td><td align="right" headers="SgaTarget End" class='awrnc'>&#160;</td><td align="right" headers="DBCache Begin" class='awrnclb'>7,872</td><td align="right" headers="DBCache End" class='awrnc'>&#160;</td><td align="right" headers="SharedPool Begin" class='awrnclb'>1,472</td><td align="right" headers="SharedPool End" class='awrnc'>&#160;</td><td align="right" headers="LargePool Begin" class='awrnclb'>160</td><td align="right" headers="LargePool End" class='awrnc'>&#160;</td><td align="right" headers="JavaPool Begin" class='awrnclb'>&#160;</td><td align="right" headers="JavaPool End" class='awrnc'>&#160;</td><td align="right" headers="StreamsPool Begin" class='awrnclb'>&#160;</td><td align="right" headers="StreamsPool End" class='awrnc'>&#160;</td><td align="right" headers="PGATarget Begin" class='awrnclb'>3,232</td><td align="right" headers="PGATarget End" class='awrncrb'>&#160;</td><td align="right" class='awrnc'>19.42</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>9,664</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>7,872</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>1,472</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>160</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>3,232</td><td align="right" class='awrcrbt'>&#160;</td><td align="right" class='awrct'>19.42</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Min</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>9,664</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>7,872</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>1,472</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>160</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>3,232</td><td align="right" class='awrncrb'>&#160;</td><td align="right" class='awrnc'>19.42</td></tr>
<tr><td align="right" scope="row" class='awrc'>Max</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>9,664</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>7,872</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>1,472</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>160</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>3,232</td><td align="right" class='awrcrb'>&#160;</td><td align="right" class='awrc'>19.42</td></tr>
</table><p />

<a class="awr" name="top"></a>
<h2 class="awr">
Main Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#99999">Report Summary</a></li>
<li class="awr"><a class="awr" href="#12010">OS Statistics</a></li>
<li class="awr"><a class="awr" href="#629">Time Model Statistics</a></li>
<li class="awr"><a class="awr" href="#621">Wait Events Statistics</a></li>
<li class="awr"><a class="awr" href="#639">Global Activity Load Profile</a></li>
<li class="awr"><a class="awr" href="#605">Global Cache and Enqueue Statistics Summary</a></li>
<li class="awr"><a class="awr" href="#12033">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#12034">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#607">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#608">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#622">SQL Statistics</a></li>
<li class="awr"><a class="awr" href="#623">Global Activity Statistics</a></li>
<li class="awr"><a class="awr" href="#630">I/O Statistics</a></li>
<li class="awr"><a class="awr" href="#12083">Library Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#633">Memory Statistics</a></li>
<li class="awr"><a class="awr" href="#638">Supplemental Information</a></li>
<li class="awr"><a class="awr" href="#43">Active Session History(ASH) Report</a></li>
<li class="awr"><a class="awr" href="#99994">ADDM Reports</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<a class="awr" name="12010"></a>
<h3 class="awr">OS Statistics By Instance</h3>
<ul>
<li class="awr"> Listed in order of instance number, I# </li>
<li class="awr"> End values are diplayed only if different from begin values</li>
</ul>
<table border="0" class="tdiff" summary="OS Statistics By Instance. . Listed in order of instance number, I#. End values are diplayed only if different from begin values"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="CPU">CPU</th>
<th class="awrbg" colspan=" 2" id="Load">Load</th>
<th class="awrbg" colspan=" 5" id="%CPU">% CPU</th>
<th class="awrbg" colspan=" 3" id="Time(s)">Time (s)</th>
<th class="awrbg" colspan=" 1" id="Memory">Memory</th>
<th class="awrbg" colspan=" 4" id="EndValues">End Values</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="#CPUs">#CPUs</th><th class="awrbg" scope="col" id="#Cores">#Cores</th><th class="awrbg" scope="col" id="#Sckts">#Sckts</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="%Busy">% Busy</th><th class="awrbg" scope="col" id="%Usr">% Usr</th><th class="awrbg" scope="col" id="%Sys">% Sys</th><th class="awrbg" scope="col" id="%WIO">% WIO</th><th class="awrbg" scope="col" id="%Idl">% Idl</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Idle">Idle</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="MB">MB</th><th class="awrbg" scope="col" id="#CPUs">#CPUs</th><th class="awrbg" scope="col" id="#Cores">#Cores</th><th class="awrbg" scope="col" id="#Sckts">#Sckts</th><th class="awrbg" scope="col" id="Memory(M)">Memory (M)</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="CPU #CPUs" class='awrclb'>32</td><td align="right" headers="CPU #Cores" class='awrc'>16</td><td align="right" headers="CPU #Sckts" class='awrc'>1</td><td align="right" headers="Load Begin" class='awrclb'>21.52</td><td align="right" headers="Load End" class='awrc'>17.44</td><td align="right" headers="%CPU %Busy" class='awrclb'>26.00</td><td align="right" headers="%CPU %Usr" class='awrc'>6.92</td><td align="right" headers="%CPU %Sys" class='awrc'>12.31</td><td align="right" headers="%CPU %WIO" class='awrc'>42.38</td><td align="right" headers="%CPU %Idl" class='awrc'>74.00</td><td align="right" headers="Time(s) Busy" class='awrclb'>4,779.71</td><td align="right" headers="Time(s) Idle" class='awrc'>13,607.01</td><td align="right" headers="Time(s) Total" class='awrc'>18,386.72</td><td align="right" headers="Memory MB" class='awrclb'>257,947.84</td><td align="right" headers="EndValues #CPUs" class='awrclb'>&#160;</td><td align="right" headers="EndValues #Cores" class='awrc'>&#160;</td><td align="right" headers="EndValues #Sckts" class='awrc'>&#160;</td><td align="right" headers="EndValues Memory(M)" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="CPU #CPUs" class='awrnclb'>32</td><td align="right" headers="CPU #Cores" class='awrnc'>16</td><td align="right" headers="CPU #Sckts" class='awrnc'>1</td><td align="right" headers="Load Begin" class='awrnclb'>18.23</td><td align="right" headers="Load End" class='awrnc'>13.46</td><td align="right" headers="%CPU %Busy" class='awrnclb'>18.41</td><td align="right" headers="%CPU %Usr" class='awrnc'>5.21</td><td align="right" headers="%CPU %Sys" class='awrnc'>9.55</td><td align="right" headers="%CPU %WIO" class='awrnc'>37.52</td><td align="right" headers="%CPU %Idl" class='awrnc'>81.59</td><td align="right" headers="Time(s) Busy" class='awrnclb'>3,384.39</td><td align="right" headers="Time(s) Idle" class='awrnc'>15,003.34</td><td align="right" headers="Time(s) Total" class='awrnc'>18,387.73</td><td align="right" headers="Memory MB" class='awrnclb'>257,947.84</td><td align="right" headers="EndValues #CPUs" class='awrnclb'>&#160;</td><td align="right" headers="EndValues #Cores" class='awrnc'>&#160;</td><td align="right" headers="EndValues #Sckts" class='awrnc'>&#160;</td><td align="right" headers="EndValues Memory(M)" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclbt'>8,164.10</td><td align="right" class='awrct'>28,610.35</td><td align="right" class='awrct'>36,774.45</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="629"></a>
<h2 class="awr">
Time Model Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12014">Time Model</a></li>
<li class="awr"><a class="awr" href="#12015">Time Model - % of DB time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12014"></a>
<h3 class="awr">Time Model</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Time Model"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">DB time (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">SQL Exec Ela (s)</th><th class="awrbg" scope="col">Parse Ela (s)</th><th class="awrbg" scope="col">Hard Parse Ela (s)</th><th class="awrbg" scope="col">PL/SQL Ela (s)</th><th class="awrbg" scope="col">Java Ela (s)</th><th class="awrbg" scope="col">bg time (s)</th><th class="awrbg" scope="col">bg CPU (s)</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>37,001.92</td><td align="right" class='awrc'>2,722.91</td><td align="right" class='awrc'>37,000.50</td><td align="right" class='awrc'>1.03</td><td align="right" class='awrc'>0.90</td><td align="right" class='awrc'>46.01</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2,822.65</td><td align="right" class='awrc'>1,321.10</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>35,703.92</td><td align="right" class='awrnc'>1,725.46</td><td align="right" class='awrnc'>35,700.39</td><td align="right" class='awrnc'>9.51</td><td align="right" class='awrnc'>9.38</td><td align="right" class='awrnc'>33.40</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2,679.56</td><td align="right" class='awrnc'>1,134.19</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>72,705.85</td><td align="right" class='awrct'>4,448.37</td><td align="right" class='awrct'>72,700.89</td><td align="right" class='awrct'>10.53</td><td align="right" class='awrct'>10.27</td><td align="right" class='awrct'>79.41</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>5,502.21</td><td align="right" class='awrct'>2,455.29</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>36,352.92</td><td align="right" class='awrnc'>2,224.18</td><td align="right" class='awrnc'>36,350.45</td><td align="right" class='awrnc'>5.27</td><td align="right" class='awrnc'>5.14</td><td align="right" class='awrnc'>39.70</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2,751.10</td><td align="right" class='awrnc'>1,227.64</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>917.83</td><td align="right" class='awrc'>705.30</td><td align="right" class='awrc'>919.31</td><td align="right" class='awrc'>6.00</td><td align="right" class='awrc'>6.00</td><td align="right" class='awrc'>8.91</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>101.19</td><td align="right" class='awrc'>132.17</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#629">Back to Time Model Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12015"></a>
<h3 class="awr">Time Model - % of DB time</h3>
<ul>
<li class="awr"> % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]</li>
</ul>
<table border="0" class="tdiff" summary="Time Model - % of DB time. . % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 6" id="%DBtime">% DB time</th>
<td>&#160;</td><th class="awrbg" colspan=" 1" id="%bgtime">% bg time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">% Total DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="SQLExecEla">SQL Exec Ela</th><th class="awrbg" scope="col" id="ParseEla">Parse Ela</th><th class="awrbg" scope="col" id="HardParse">Hard Parse</th><th class="awrbg" scope="col" id="PL/SQLEla">PL/SQL Ela</th><th class="awrbg" scope="col" id="JavaEla">Java Ela</th><th class="awrbg" scope="col">% Total bg time</th><th class="awrbg" scope="col" id="bgCPU">bg CPU</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>50.89</td><td align="right" headers="%DBtime DBCPU" class='awrclb'>7.36</td><td align="right" headers="%DBtime SQLExecEla" class='awrc'>100.00</td><td align="right" headers="%DBtime ParseEla" class='awrc'>0.00</td><td align="right" headers="%DBtime HardParse" class='awrc'>0.00</td><td align="right" headers="%DBtime PL/SQLEla" class='awrc'>0.00</td><td align="right" headers="%DBtime JavaEla" class='awrc'>0.00</td><td align="right" class='awrc'>51.30</td><td align="right" headers="%bgtime bgCPU" class='awrcbb'>46.80</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>49.11</td><td align="right" headers="%DBtime DBCPU" class='awrnclb'>4.83</td><td align="right" headers="%DBtime SQLExecEla" class='awrnc'>99.99</td><td align="right" headers="%DBtime ParseEla" class='awrnc'>0.03</td><td align="right" headers="%DBtime HardParse" class='awrnc'>0.03</td><td align="right" headers="%DBtime PL/SQLEla" class='awrnc'>0.00</td><td align="right" headers="%DBtime JavaEla" class='awrnc'>0.00</td><td align="right" class='awrnc'>48.70</td><td align="right" headers="%bgtime bgCPU" class='awrncbb'>42.33</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>50.00</td><td align="right" class='awrclbt'>6.10</td><td align="right" class='awrct'>99.99</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>50.00</td><td align="right" class='awrcbbt'>44.57</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#629">Back to Time Model Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="621"></a>
<h2 class="awr">
Wait Events Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12011">Foreground Wait Classes -	% of Total DB time</a></li>
<li class="awr"><a class="awr" href="#12012">Foreground Wait Classes</a></li>
<li class="awr"><a class="awr" href="#12013">Foreground Wait Classes -	% of DB time </a></li>
<li class="awr"><a class="awr" href="#12050">Top Timed Events</a></li>
<li class="awr"><a class="awr" href="#12051">Top Timed Foreground Events</a></li>
<li class="awr"><a class="awr" href="#12052">Top Timed Background Events</a></li>
<li class="awr"><a class="awr" href="#12053">Foreground Wait Events (Global)</a></li>
<li class="awr"><a class="awr" href="#12054">Background Wait Events (Global)</a></li>
<li class="awr"><a class="awr" href="#12055">Wait Event Histogram (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12011"></a>
<h3 class="awr">Foreground Wait Classes -  % of Total DB time</h3>
<ul>
<li class="awr"> Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time</li>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes -  % of Total DB time. . Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time"><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">User I/O</th><th class="awrbg" scope="col">Sys I/O</th><th class="awrbg" scope="col">Other</th><th class="awrbg" scope="col">Applic</th><th class="awrbg" scope="col">Commit</th><th class="awrbg" scope="col">Network</th><th class="awrbg" scope="col">Concurcy</th><th class="awrbg" scope="col">Config</th><th class="awrbg" scope="col">Cluster</th><th class="awrbg" scope="col">Admin</th><th class="awrbg" scope="col">Scheduler</th><th class="awrbg" scope="col">DB CPU</th></tr>
<tr><td class='awrc'>&#160;</td><td align="right" class='awrc'>68.21</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>1.09</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>27.52</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>6.12</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12012"></a>
<h3 class="awr">Foreground Wait Classes</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">User I/O(s)</th><th class="awrbg" scope="col">Sys I/O(s)</th><th class="awrbg" scope="col">Other(s)</th><th class="awrbg" scope="col">Applic (s)</th><th class="awrbg" scope="col">Commit (s)</th><th class="awrbg" scope="col">Network (s)</th><th class="awrbg" scope="col">Concurcy (s)</th><th class="awrbg" scope="col">Config (s)</th><th class="awrbg" scope="col">Cluster (s)</th><th class="awrbg" scope="col">Admin (s)</th><th class="awrbg" scope="col">Scheduler (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">DB time</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>26,823.49</td><td align="right" class='awrc'>3.69</td><td align="right" class='awrc'>709.83</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>64.29</td><td align="right" class='awrc'>99.87</td><td align="right" class='awrc'>8,062.51</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2,722.91</td><td align="right" class='awrc'>37,001.92</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>22,769.09</td><td align="right" class='awrnc'>1.21</td><td align="right" class='awrnc'>84.83</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>43.22</td><td align="right" class='awrnc'>261.19</td><td align="right" class='awrnc'>11,946.63</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1,725.46</td><td align="right" class='awrnc'>35,703.92</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>49,592.57</td><td align="right" class='awrct'>4.90</td><td align="right" class='awrct'>794.65</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>0.36</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>107.51</td><td align="right" class='awrct'>361.06</td><td align="right" class='awrct'>20,009.15</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>4,448.37</td><td align="right" class='awrct'>72,705.85</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>24,796.29</td><td align="right" class='awrnc'>2.45</td><td align="right" class='awrnc'>397.33</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>53.76</td><td align="right" class='awrnc'>180.53</td><td align="right" class='awrnc'>10,004.57</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2,224.18</td><td align="right" class='awrnc'>36,352.92</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>2,866.89</td><td align="right" class='awrc'>1.76</td><td align="right" class='awrc'>441.94</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>14.89</td><td align="right" class='awrc'>114.07</td><td align="right" class='awrc'>2,746.49</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>705.30</td><td align="right" class='awrc'>917.83</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12013"></a>
<h3 class="awr">Foreground Wait Classes -  % of DB time </h3>
<ul>
<li class="awr"> % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time</li>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes -  % of DB time . . % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 12" id="%DBtime">% DB time</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="UserI/O">User I/O</th><th class="awrbg" scope="col" id="SysI/O">Sys I/O</th><th class="awrbg" scope="col" id="Other">Other</th><th class="awrbg" scope="col" id="Applic">Applic</th><th class="awrbg" scope="col" id="Commit">Commit</th><th class="awrbg" scope="col" id="Network">Network</th><th class="awrbg" scope="col" id="Concurcy">Concurcy</th><th class="awrbg" scope="col" id="Config">Config</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Admin">Admin</th><th class="awrbg" scope="col" id="Scheduler">Scheduler</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col">% Total DB time</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="%DBtime UserI/O" class='awrclb'>72.49</td><td align="right" headers="%DBtime SysI/O" class='awrc'>0.01</td><td align="right" headers="%DBtime Other" class='awrc'>1.92</td><td align="right" headers="%DBtime Applic" class='awrc'>0.00</td><td align="right" headers="%DBtime Commit" class='awrc'>0.00</td><td align="right" headers="%DBtime Network" class='awrc'>0.00</td><td align="right" headers="%DBtime Concurcy" class='awrc'>0.17</td><td align="right" headers="%DBtime Config" class='awrc'>0.27</td><td align="right" headers="%DBtime Cluster" class='awrc'>21.79</td><td align="right" headers="%DBtime Admin" class='awrc'>0.00</td><td align="right" headers="%DBtime Scheduler" class='awrc'>&#160;</td><td align="right" headers="%DBtime DBCPU" class='awrcrb'>7.36</td><td align="right" class='awrc'>50.89</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="%DBtime UserI/O" class='awrnclb'>63.77</td><td align="right" headers="%DBtime SysI/O" class='awrnc'>0.00</td><td align="right" headers="%DBtime Other" class='awrnc'>0.24</td><td align="right" headers="%DBtime Applic" class='awrnc'>0.00</td><td align="right" headers="%DBtime Commit" class='awrnc'>0.00</td><td align="right" headers="%DBtime Network" class='awrnc'>0.00</td><td align="right" headers="%DBtime Concurcy" class='awrnc'>0.12</td><td align="right" headers="%DBtime Config" class='awrnc'>0.73</td><td align="right" headers="%DBtime Cluster" class='awrnc'>33.46</td><td align="right" headers="%DBtime Admin" class='awrnc'>0.00</td><td align="right" headers="%DBtime Scheduler" class='awrnc'>&#160;</td><td align="right" headers="%DBtime DBCPU" class='awrncrb'>4.83</td><td align="right" class='awrnc'>49.11</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>68.13</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>1.08</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.15</td><td align="right" class='awrct'>0.50</td><td align="right" class='awrct'>27.62</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrcrbt'>6.10</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12050"></a>
<h3 class="awr">Top Timed Events</h3>
<ul>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time ' 	     : Per-instance 'Wait Time Avg ' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Events. . Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time ' : Per-instance 'Wait Time Avg ' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>5,545,120</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>37,013.53</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.67ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>50.91</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.67ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.14ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.20ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>744.84us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>1,357,932</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>12,586.45</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.27ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>17.31</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.27ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.59ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.95ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>.96ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>1,059,171</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>7,350.46</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.94ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>10.11</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.46ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.20ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>10.73ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>4.62ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>963,728</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4,941.08</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.13ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>6.80</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.07ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.12ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.01ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>2.75ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4,448.37</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>6.12</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>843,374</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4,200.27</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.98ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>5.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.92ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.08ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.76ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>2.60ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>169,654</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,402.19</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.26ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.93</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>8.44ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.01ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.88ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>2.03ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrnclb'>2,030</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,073.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>528.58ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.48</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>529.31ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>528.56ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>530.05ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>1.06ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrclb'>1,862</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>990.93</td><td align="right" headers="WaitTime AvgWait" class='awrc'>532.18ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.36</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>557.09ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>531.64ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>582.53ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>35.99ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>263,182</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>741.95</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.82ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.65ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.60ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.70ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>4.31ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>User I/O</td><td headers="Wait Event" class='awrct'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclbt'>2,791,542</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>20,093.66</td><td align="right" headers="WaitTime AvgWait" class='awrct'>7.20ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>54.30</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>677,120</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6,736.90</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.95ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>18.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,722.91</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>7.36</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrnclb'>614,175</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,577.34</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.20ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>6.97</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>467,384</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,459.47</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.12ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>3.94</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>407,534</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,255.38</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.08ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>3.39</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrclb'>2,002</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,058.18</td><td align="right" headers="WaitTime AvgWait" class='awrc'>528.56ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.86</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrnclb'>1,842</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>979.28</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>531.64ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.65</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>74,241</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>733.68</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.88ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.98</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrnclb'>7,497</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>622.40</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>83.02ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.68</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>User I/O</td><td headers="Wait Event" class='awrct'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclbt'>2,753,578</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>16,919.87</td><td align="right" headers="WaitTime AvgWait" class='awrct'>6.14ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>47.39</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>680,812</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>5,849.55</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.59ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>16.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>444,996</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4,773.13</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.73ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>13.37</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>496,344</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3,481.61</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.01ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>9.75</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>435,840</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,944.88</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.76ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>8.25</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>&#160;</td><td headers="Wait Event" class='awrnc'>DB CPU</td><td align="right" headers="Event Waits" class='awrnclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,725.46</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>4.83</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>95,413</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>668.51</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.01ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.87</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>52,571</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>404.82</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.70ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>84,370</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>365.87</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.34ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrnclb'>171</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>259.93</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1520.06ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.73</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12051"></a>
<h3 class="awr">Top Timed Foreground Events</h3>
<ul>
<li class="awr"> Foreground Activity is captured in release 11g and above </li>
<li class="awr"> For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity </li>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time'		    : Per-instance 'Wait Time Avg' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Foreground Events. . Foreground Activity is captured in release 11g and above. For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity. Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time' : Per-instance 'Wait Time Avg' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>5,543,447</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>37,001.63</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.67ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>50.89</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.67ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.14ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.20ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>744.77us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>1,357,929</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>12,586.43</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.27ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>17.31</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.27ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.59ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.95ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>.96ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>1,059,162</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>7,350.45</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.94ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>10.11</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.46ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.20ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>10.73ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>4.62ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>963,342</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4,940.33</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.13ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>6.79</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.07ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.12ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.02ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>2.75ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4,448.37</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>6.12</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>843,000</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4,199.57</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.98ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>5.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.92ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.08ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.76ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>2.60ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrclb'>2,027</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,071.87</td><td align="right" headers="WaitTime AvgWait" class='awrc'>528.80ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.47</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>529.42ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>528.78ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>530.05ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>900.35us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrnclb'>1,859</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>989.32</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>532.18ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.36</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>557.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>531.63ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>582.53ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>35.99ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>263,019</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>741.72</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.82ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.65ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.60ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.70ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>4.32ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrnclb'>8,103</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>669.90</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>82.67ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.92</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>77.18ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>70.57ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>83.79ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>9.34ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>User I/O</td><td headers="Wait Event" class='awrct'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclbt'>2,790,303</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>20,084.45</td><td align="right" headers="WaitTime AvgWait" class='awrct'>7.20ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>54.28</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>677,117</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6,736.88</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.95ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>18.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,722.91</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>7.36</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrnclb'>614,167</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,577.32</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.20ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>6.97</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>467,175</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,459.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.12ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>3.94</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>407,257</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,254.84</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.08ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>3.39</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrclb'>1,999</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,057.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>528.78ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.86</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrnclb'>1,839</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>977.67</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>531.63ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.64</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrclb'>7,421</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>621.77</td><td align="right" headers="WaitTime AvgWait" class='awrc'>83.79ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.68</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>210,475</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>336.92</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.60ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.91</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>User I/O</td><td headers="Wait Event" class='awrct'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclbt'>2,753,144</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>16,917.19</td><td align="right" headers="WaitTime AvgWait" class='awrct'>6.14ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>47.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>680,812</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>5,849.55</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.59ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>16.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>444,995</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4,773.13</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.73ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>13.37</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>496,167</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3,481.29</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.02ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>9.75</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>435,743</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,944.73</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.76ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>8.25</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>&#160;</td><td headers="Wait Event" class='awrnc'>DB CPU</td><td align="right" headers="Event Waits" class='awrnclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,725.46</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>4.83</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>52,544</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>404.81</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.70ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrnclb'>170</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>259.93</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1528.99ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.73</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block 2-way</td><td align="right" headers="Event Waits" class='awrclb'>20,248</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>152.64</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.54ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.43</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrnclb'>50,080</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>108.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.16ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.30</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12052"></a>
<h3 class="awr">Top Timed Background Events</h3>
<ul>
<li class="awr"> % of bg time: % of background elapsed time </li>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time'		    : Per-instance 'Wait Time Avg' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Background Events. . % of bg time: % of background elapsed time. Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time' : Per-instance 'Wait Time Avg' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>background cpu time</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,455.29</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>44.62</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>169,644</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,402.11</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.27ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>25.48</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>8.44ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.01ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.88ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>2.03ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>173,580</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>715.52</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.12ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>13.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.13ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.92ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.34ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>294.92us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR any worker group</td><td align="right" headers="Event Waits" class='awrnclb'>99,086</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>427.85</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.32ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>7.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.38ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.41ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.34ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>1.36ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR worker group ordering</td><td align="right" headers="Event Waits" class='awrclb'>16,874</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>51.16</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.03ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.93</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.18ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.86ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.50ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>450.53us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" headers="Event Waits" class='awrnclb'>2,850</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>44.21</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>15.51ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.80</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>15.29ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>12.22ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>18.37ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>4.35ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR all worker groups</td><td align="right" headers="Event Waits" class='awrclb'>5,606</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>36.45</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.50ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.66</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.11ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.82ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.40ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>1.82ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>7,272</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>29.55</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.06ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.54</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.06ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.89ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.23ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>235.98us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrclb'>1,655</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>24.99</td><td align="right" headers="WaitTime AvgWait" class='awrc'>15.10ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.45</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>15.16ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.51ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>20.82ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>8.00ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>613</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>22.51</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>36.72ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.41</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>37.37ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>28.95ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>45.79ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>11.90ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>&#160;</td><td headers="Wait Event" class='awrct'>background cpu time</td><td align="right" headers="Event Waits" class='awrclbt'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrct'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>1,321.10</td><td align="right" headers="WaitTime AvgWait" class='awrct'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrct'>46.80</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>74,235</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>733.63</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.88ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>25.99</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>89,210</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>349.65</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.92ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>12.39</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR any worker group</td><td align="right" headers="Event Waits" class='awrnclb'>46,578</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>248.71</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.34ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>8.81</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR worker group ordering</td><td align="right" headers="Event Waits" class='awrclb'>12,366</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>35.39</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.86ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.25</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" headers="Event Waits" class='awrnclb'>1,526</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>28.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>18.37ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.99</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR all worker groups</td><td align="right" headers="Event Waits" class='awrclb'>3,661</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>27.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.40ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.96</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>3,694</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>15.62</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.23ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.55</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ASM file metadata operation</td><td align="right" headers="Event Waits" class='awrclb'>3,122</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>10.09</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.23ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.36</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>330</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>9.55</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>28.95ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.34</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>&#160;</td><td headers="Wait Event" class='awrct'>background cpu time</td><td align="right" headers="Event Waits" class='awrclbt'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrct'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>1,134.19</td><td align="right" headers="WaitTime AvgWait" class='awrct'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrct'>42.33</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>95,409</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>668.48</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.01ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>24.95</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>84,370</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>365.87</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.34ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>13.65</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR any worker group</td><td align="right" headers="Event Waits" class='awrnclb'>52,508</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>179.14</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.41ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>6.69</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrclb'>818</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>17.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>20.82ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.64</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" headers="Event Waits" class='awrnclb'>1,324</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>16.17</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>12.22ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.60</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR worker group ordering</td><td align="right" headers="Event Waits" class='awrclb'>4,508</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>15.77</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.50ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.59</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>3,578</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>13.93</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.89ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.52</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>IMR slave acknowledgement msg</td><td align="right" headers="Event Waits" class='awrclb'>1,860</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>12.98</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.98ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.48</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>283</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>12.96</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>45.79ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.48</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12053"></a>
<h3 class="awr">Foreground Wait Events (Global)</h3>
<ul>
<li class="awr"> s - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]  </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
</ul>
<table border="0" class="tdiff" summary="This table displays foreground wait event information"><tr>
<th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 4" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>5,543,447</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>37,001.63</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.67ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>50.89</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.67ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.14ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.20ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>744.77us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>1,357,929</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>12,586.43</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.27ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>17.31</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.27ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.59ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.95ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>.96ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>1,059,162</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>7,350.45</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.94ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>10.11</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.46ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.20ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>10.73ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.62ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>963,342</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4,940.33</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.13ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>6.79</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.07ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.12ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.02ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.75ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>843,000</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4,199.57</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.98ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>5.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.92ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.08ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>6.76ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.60ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrnclb'>2,027</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,071.87</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>528.80ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.47</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>529.42ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>528.78ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>530.05ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>900.35us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrclb'>1,859</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>989.32</td><td align="right" headers="WaitTime AvgWait" class='awrc'>532.18ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.36</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>557.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>531.63ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>582.53ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>35.99ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>263,019</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>741.72</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.82ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.65ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.60ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.70ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4.32ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrclb'>8,103</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>669.90</td><td align="right" headers="WaitTime AvgWait" class='awrc'>82.67ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.92</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>77.18ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>70.57ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>83.79ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>9.34ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrnclb'>630</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>359.07</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>569.95ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.49</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>872.25ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>215.51ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1528.99ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>928.77ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>233,655</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>333.17</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.43ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.46</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.21ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.40ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.02ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.15ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>20,830</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>154.45</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.41ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.32ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.11ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.54ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.13ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrclb'>64,599</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>151.19</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.34ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.56ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.16ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>576.13us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>buffer busy waits</td><td align="right" headers="Event Waits" class='awrnclb'>594</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>107.17</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>180.42ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.15</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>260.45ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>132.66ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>388.24ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>180.72ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: US - contention</td><td align="right" headers="Event Waits" class='awrclb'>1,700</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>69.87</td><td align="right" headers="WaitTime AvgWait" class='awrc'>41.10ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.10</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>39.89ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>37.65ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>42.13ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.17ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" headers="Event Waits" class='awrnclb'>1,053</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>31.52</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>29.94ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.04</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>30.92ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>28.63ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>33.22ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.25ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant congested</td><td align="right" headers="Event Waits" class='awrclb'>2,760</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>28.17</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.21ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.04</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.40ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.79ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>15.01ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>6.52ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrnclb'>1,621</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>25.82</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>15.93ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.04</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>21.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.50ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>34.88ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>19.36ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block busy</td><td align="right" headers="Event Waits" class='awrclb'>3,842</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>10.80</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.81ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.67ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.17ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.16ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.12ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>DLM cross inst call completion</td><td align="right" headers="Event Waits" class='awrnclb'>70</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>9.73</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>139.03ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>135.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>127.83ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>143.82ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>11.31ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant congested</td><td align="right" headers="Event Waits" class='awrclb'>1,582</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>5.83</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.69ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.92ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.64ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.21ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>401.75us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>reliable message</td><td align="right" headers="Event Waits" class='awrnclb'>436</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4.13</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.47ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.56ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.69ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>12.43ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.64ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block 2-way</td><td align="right" headers="Event Waits" class='awrclb'>1,186</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3.64</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.78ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.38ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.18ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.98ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>Data file init write</td><td align="right" headers="Event Waits" class='awrnclb'>64</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.54</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>39.63ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>41.03ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>29.79ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>52.28ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>15.90ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>66</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.48</td><td align="right" headers="WaitTime AvgWait" class='awrc'>37.53ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>38.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>36.70ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>41.27ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.23ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>IPC send completion sync</td><td align="right" headers="Event Waits" class='awrnclb'>322</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.33</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.23ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.31ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>794.59us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.82ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4.96ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KSV master wait</td><td align="right" headers="Event Waits" class='awrclb'>264</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.28</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.64ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.90ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.34ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>14.45ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>5.02ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>620</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.08</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.36ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.36ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.36ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>5.85us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>undo segment extension</td><td align="right" headers="Event Waits" class='awrclb'>52</td><td align="right" headers="Event %Timeouts" class='awrc'>98.08</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.99</td><td align="right" headers="WaitTime AvgWait" class='awrc'>38.31ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>54.59ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>19.31ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>89.88ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>49.90ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch free</td><td align="right" headers="Event Waits" class='awrnclb'>4,236</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.79</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>423.48us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>388.36us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>335.91us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>440.81us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>74.18us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block congested</td><td align="right" headers="Event Waits" class='awrclb'>382</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.66</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.13ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.89ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.37ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>336.46us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file single write</td><td align="right" headers="Event Waits" class='awrnclb'>44</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.16</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>26.37ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>29.28ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>24.71ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>33.86ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>6.47ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block busy</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.07</td><td align="right" headers="WaitTime AvgWait" class='awrc'>267.98ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>267.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>267.98ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>267.98ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: gc element</td><td align="right" headers="Event Waits" class='awrnclb'>1,397</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.89</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>638.17us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>536.57us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>404.53us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>668.60us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>186.72us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrclb'>62</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.63</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.13ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.47ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.19ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>15.75ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>7.46ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: CF - contention</td><td align="right" headers="Event Waits" class='awrnclb'>23</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.36</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>15.86ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.50ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>18.88ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>12.29ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Commit</td><td headers="Wait Event" class='awrc'>log file sync</td><td align="right" headers="Event Waits" class='awrclb'>53</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.36</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.80ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.85ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.35ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.35ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>703.93us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>kfk: async disk IO</td><td align="right" headers="Event Waits" class='awrnclb'>44</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.34</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.83ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.60ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.83ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>12.37ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.92ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: enqueue hash chains</td><td align="right" headers="Event Waits" class='awrclb'>690</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.32</td><td align="right" headers="WaitTime AvgWait" class='awrc'>458.16us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>364.65us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>209.55us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>519.75us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>219.35us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: gcs resource hash</td><td align="right" headers="Event Waits" class='awrnclb'>880</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.28</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>323.63us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>292.65us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>237.90us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>347.40us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>77.43us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS initialization</td><td align="right" headers="Event Waits" class='awrclb'>40</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.24</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.99ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.62ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.00ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>6.23ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>867.35us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: redo allocation</td><td align="right" headers="Event Waits" class='awrnclb'>673</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.18</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>272.12us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>242.13us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>162.35us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>321.91us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>112.82us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>row cache mutex</td><td align="right" headers="Event Waits" class='awrclb'>22</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.16</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.12ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.92ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>14.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.83ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>5.53ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" headers="Event Waits" class='awrnclb'>208</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.15</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>706.34us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>708.84us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>448.28us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>368.50us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: PS - contention</td><td align="right" headers="Event Waits" class='awrclb'>107</td><td align="right" headers="Event %Timeouts" class='awrc'>2.80</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.11</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.04ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.10ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.18ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>112.62us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS operation: action</td><td align="right" headers="Event Waits" class='awrnclb'>60</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.09</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.54ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.44ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.26ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.61ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>248.15us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file scattered read</td><td align="right" headers="Event Waits" class='awrclb'>13</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.92ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.92ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.92ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.92ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>direct path write</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.07</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>74.16ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>74.16ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>74.16ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>74.16ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: cache buffers lru chain</td><td align="right" headers="Event Waits" class='awrclb'>425</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrc'>152.68us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>124.28us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>65.39us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>183.17us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>83.28us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>lock deadlock retry</td><td align="right" headers="Event Waits" class='awrnclb'>1,859</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>33.10us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>27.01us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>20.80us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>33.23us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>8.79us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: reap credit</td><td align="right" headers="Event Waits" class='awrclb'>2,292</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrc'>25.74us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>23.66us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>21.01us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>26.32us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.75us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: cache buffers chains</td><td align="right" headers="Event Waits" class='awrnclb'>174</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>334.63us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>268.77us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>151.84us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>385.71us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>165.37us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>library cache lock</td><td align="right" headers="Event Waits" class='awrclb'>43</td><td align="right" headers="Event %Timeouts" class='awrc'>2.33</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.14ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.50ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.12ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.89ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>542.64us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: ges resource hash list</td><td align="right" headers="Event Waits" class='awrnclb'>112</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>401.79us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>593.27us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>337.96us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>848.57us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>361.06us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block congested</td><td align="right" headers="Event Waits" class='awrclb'>13</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.39ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.88ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.08ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.55ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache pin</td><td align="right" headers="Event Waits" class='awrnclb'>40</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.06ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.06ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.06ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.06ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>row cache lock</td><td align="right" headers="Event Waits" class='awrclb'>20</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.77ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.44ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.07ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.81ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>523.15us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS operation: query</td><td align="right" headers="Event Waits" class='awrnclb'>120</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>288.57us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>281.32us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>269.25us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>293.40us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>17.07us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: object queue header operation</td><td align="right" headers="Event Waits" class='awrclb'>76</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>431.66us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>405.56us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>368.82us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>442.29us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>51.95us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>Disk file operations I/O</td><td align="right" headers="Event Waits" class='awrnclb'>221</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>146.26us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>154.92us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>139.37us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>170.47us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>21.99us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges inquiry response</td><td align="right" headers="Event Waits" class='awrclb'>18</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.57ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.57ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.57ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.57ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current multi block request</td><td align="right" headers="Event Waits" class='awrnclb'>14</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.80ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.80ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.80ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.80ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: CT - state</td><td align="right" headers="Event Waits" class='awrclb'>18</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.23ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.23ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.23ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.23ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: undo global data</td><td align="right" headers="Event Waits" class='awrnclb'>69</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>248.04us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>201.98us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>139.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>264.30us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>88.13us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PGA memory operation</td><td align="right" headers="Event Waits" class='awrclb'>369</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>44.18us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>43.80us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>33.01us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>54.59us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>15.26us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: WF - contention</td><td align="right" headers="Event Waits" class='awrnclb'>19</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>830.79us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>790.91us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>682.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>899.15us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>153.08us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: TO - contention</td><td align="right" headers="Event Waits" class='awrclb'>11</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.37ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.32ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.16ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.48ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.64ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>SQL*Net break/reset to client</td><td align="right" headers="Event Waits" class='awrnclb'>124</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>82.40us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>82.40us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>82.40us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>82.40us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: Join ACK</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.98ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.98ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.98ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>datafile move cleanup during resize</td><td align="right" headers="Event Waits" class='awrnclb'>22</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>438.41us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>439.13us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>438.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>440.25us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.59us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: WT - contention</td><td align="right" headers="Event Waits" class='awrclb'>9</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>884.56us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>673.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>401.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>945.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>384.67us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: FB - contention</td><td align="right" headers="Event Waits" class='awrnclb'>9</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>792.56us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>782.69us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>770.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>795.38us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>17.94us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>name-service call wait</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.28ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.28ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>923.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.65ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>511.24us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ASM file metadata operation</td><td align="right" headers="Event Waits" class='awrnclb'>132</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>38.20us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>53.62us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>29.40us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>77.83us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>34.25us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: messages</td><td align="right" headers="Event Waits" class='awrclb'>14</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>348.93us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>254.77us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>90.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>419.55us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>233.02us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>direct path sync</td><td align="right" headers="Event Waits" class='awrnclb'>22</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>135.09us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>122.42us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>102.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>142.33us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>28.17us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Network</td><td headers="Wait Event" class='awrc'>SQL*Net message to client</td><td align="right" headers="Event Waits" class='awrclb'>401</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.29us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.01us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.09us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.93us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.30us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: AF - task serialization</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.05ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.05ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.05ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.05ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>ASM IO for non-blocking poll</td><td align="right" headers="Event Waits" class='awrclb'>48</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>34.31us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>36.36us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>28.17us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>44.56us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>11.59us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: SW - contention</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.34ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.34ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.34ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.34ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: FD - Flashback logical operations</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.22ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.22ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.22ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.22ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>wait list latch free</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.13ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.13ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.13ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.13ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: RP - contention</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.08ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.08ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.08ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>enq: TM - contention</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.03ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.03ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.03ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: shared pool</td><td align="right" headers="Event Waits" class='awrclb'>5</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>196.00us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>158.88us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>97.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>220.75us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>87.50us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Administrative</td><td headers="Wait Event" class='awrnc'>enq: MV - datafile move</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>685.00us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>685.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>685.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>685.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: call allocation</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>126.33us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>119.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>97.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>141.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>31.11us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Network</td><td headers="Wait Event" class='awrnc'>IPC group service call</td><td align="right" headers="Event Waits" class='awrnclb'>36</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.19us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.23us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>9.15us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.30us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>103.35ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>AWR Flush</td><td align="right" headers="Event Waits" class='awrclb'>6</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>45.83us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>29.90us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>53.80us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>33.80us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX qref latch</td><td align="right" headers="Event Waits" class='awrnclb'>12</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>13.83us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>13.83us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>13.83us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>13.83us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>71.00us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>71.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>71.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>71.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache: mutex X</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>25.00us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>25.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>25.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>25.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>asynch descriptor resize</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>11.00us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>11.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>10.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>12.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.41us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: session allocation</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.00us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>9.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges resource directory to be unfrozen</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.00us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>.00ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>watchdog main loop</td><td align="right" headers="Event Waits" class='awrnclb'>2,067</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6,201.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3000.01ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>8.53</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3000.01ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3000.01ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3000.02ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>7.56us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>SQL*Net message from client</td><td align="right" headers="Event Waits" class='awrclb'>401</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,833.27</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4571.73ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.52</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3506.77ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>90.38ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>6923.17ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4831.51ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq: Execution Msg</td><td align="right" headers="Event Waits" class='awrnclb'>617</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>9.34</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>15.13ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>15.12ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.78ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>25.45ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>14.62ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq Credit: send blkd</td><td align="right" headers="Event Waits" class='awrclb'>305</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.59</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.92ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.68ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.22ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.15ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>661.84us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq: Msg Fragment</td><td align="right" headers="Event Waits" class='awrnclb'>558</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.43</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>767.47us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>767.47us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>703.49us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>831.46us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>90.48us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq Credit: need buffer</td><td align="right" headers="Event Waits" class='awrclb'>29</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>456.55us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>456.55us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>456.55us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>456.55us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq: Execute Reply</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>576.50us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>576.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>576.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>576.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq: Parse Reply</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>550.50us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>550.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>550.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>550.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12054"></a>
<h3 class="awr">Background Wait Events (Global)</h3>
<ul>
<li class="awr"> s - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]  </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
</ul>
<table border="0" class="tdiff" summary="This table displays background wait event information"><tr>
<th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 4" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%bgtime">%bg time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>169,644</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,402.11</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.27ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.25</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>8.44ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.01ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.88ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.03ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>173,580</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>715.52</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.12ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.13ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.92ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.34ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>294.92us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR any worker group</td><td align="right" headers="Event Waits" class='awrclb'>99,086</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>427.85</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.32ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.08</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.38ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.41ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.34ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.36ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR worker group ordering</td><td align="right" headers="Event Waits" class='awrnclb'>16,874</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>51.16</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.03ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.18ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.86ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.50ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>450.53us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" headers="Event Waits" class='awrclb'>2,850</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>44.21</td><td align="right" headers="WaitTime AvgWait" class='awrc'>15.51ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>15.29ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>12.22ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>18.37ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.35ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR all worker groups</td><td align="right" headers="Event Waits" class='awrnclb'>5,606</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>36.45</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.50ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.11ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.82ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.40ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.82ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>7,272</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>29.55</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.06ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.06ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.89ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.23ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>235.98us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrnclb'>1,655</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>24.99</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>15.10ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>15.16ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>9.51ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>20.82ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>8.00ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>613</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>22.51</td><td align="right" headers="WaitTime AvgWait" class='awrc'>36.72ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>37.37ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>28.95ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>45.79ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>11.90ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" headers="Event Waits" class='awrnclb'>3,717</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>19.63</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.28ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.28ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.58ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.98ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.40ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ASM file metadata operation</td><td align="right" headers="Event Waits" class='awrclb'>6,027</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>12.79</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.12ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>927.34us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.23ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.63ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>1,674</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>11.88</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.10ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.79ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.15ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.43ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>906.51us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KSV master wait</td><td align="right" headers="Event Waits" class='awrclb'>2,147</td><td align="right" headers="Event %Timeouts" class='awrc'>44.57</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>10.26</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.78ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.80ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.75ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.84ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.31ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>reliable message</td><td align="right" headers="Event Waits" class='awrnclb'>709</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>7.23</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.19ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>8.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.89ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>11.61ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4.05ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>ASM IO for non-blocking poll</td><td align="right" headers="Event Waits" class='awrclb'>168,246</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>5.11</td><td align="right" headers="WaitTime AvgWait" class='awrc'>30.38us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>30.32us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>27.39us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>33.25us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.14us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>enq: RO - fast object reuse</td><td align="right" headers="Event Waits" class='awrnclb'>256</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4.60</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>17.96ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>15.21ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.24ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>23.19ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>11.28ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: Join ACK</td><td align="right" headers="Event Waits" class='awrclb'>204</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4.47</td><td align="right" headers="WaitTime AvgWait" class='awrc'>21.89ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>12.79ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.11ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>23.46ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>15.10ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>Sync ASM rebalance</td><td align="right" headers="Event Waits" class='awrnclb'>108</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3.34</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>30.90ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>30.90ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>29.37ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>32.42ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.16ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: reap credit</td><td align="right" headers="Event Waits" class='awrclb'>86,970</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.27</td><td align="right" headers="WaitTime AvgWait" class='awrc'>26.12us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>26.05us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>24.11us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>27.99us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.74us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch free</td><td align="right" headers="Event Waits" class='awrnclb'>3,397</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>592.64us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>532.55us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>288.66us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>776.43us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>344.91us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.61</td><td align="right" headers="WaitTime AvgWait" class='awrc'>535.77ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>535.77ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>535.77ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>535.77ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>direct path write</td><td align="right" headers="Event Waits" class='awrnclb'>35</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.28</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>36.56ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>36.72ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>31.11ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>42.34ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>7.94ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: CF - contention</td><td align="right" headers="Event Waits" class='awrclb'>152</td><td align="right" headers="Event %Timeouts" class='awrc'>41.45</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.18</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.79ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>8.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.81ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>11.57ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.78ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges inquiry response</td><td align="right" headers="Event Waits" class='awrnclb'>1,030</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.18</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.15ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.15ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.14ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.16ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>8.22us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrclb'>19</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.18</td><td align="right" headers="WaitTime AvgWait" class='awrc'>62.08ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>35.90ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.74ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>69.06ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>46.89ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.15</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>382.48ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>382.48ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>382.48ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>382.48ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: PS - contention</td><td align="right" headers="Event Waits" class='awrclb'>119</td><td align="right" headers="Event %Timeouts" class='awrc'>11.76</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.13</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.52ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.00ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.07ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>10.93ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>6.97ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>IPC send completion sync</td><td align="right" headers="Event Waits" class='awrnclb'>1,364</td><td align="right" headers="Event %Timeouts" class='awrnc'>90.84</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.09</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>798.59us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>742.30us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>31.31us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.45ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.01ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>buffer busy waits</td><td align="right" headers="Event Waits" class='awrclb'>19</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.77</td><td align="right" headers="WaitTime AvgWait" class='awrc'>40.67ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>27.66ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>200.40us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>55.12ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>38.83ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>877</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.77</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>874.75us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.01ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>863.87us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.15ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>204.58us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>direct path write temp</td><td align="right" headers="Event Waits" class='awrclb'>88</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.75</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.56ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.60ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.33ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>10.86ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.62ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>386</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.75</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.93ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.92ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.80ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.05ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>177.56us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>DFS lock handle</td><td align="right" headers="Event Waits" class='awrclb'>213</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.70</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.27ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.64ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>843.74us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.43ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.54ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>373</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.69</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.86ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.76ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.56ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>293.68us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrclb'>101</td><td align="right" headers="Event %Timeouts" class='awrc'>6.93</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.65</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.42ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.45ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>541.12us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>8.35ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>5.52ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file scattered read</td><td align="right" headers="Event Waits" class='awrnclb'>65</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.54</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.29ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.68ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>8.82ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.51ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block busy</td><td align="right" headers="Event Waits" class='awrclb'>70</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.53</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.54ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.88ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.12ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.65ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.08ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>gcs log flush sync</td><td align="right" headers="Event Waits" class='awrnclb'>1,430</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.46</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>324.20us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>333.07us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>308.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>358.15us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>35.46us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file async I/O submit</td><td align="right" headers="Event Waits" class='awrclb'>55,501</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.43</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.74us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.71us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.82us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>8.60us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.26us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block busy</td><td align="right" headers="Event Waits" class='awrnclb'>253</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.42</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.66ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.68ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.60ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.76ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>112.88us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>816</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.38</td><td align="right" headers="WaitTime AvgWait" class='awrc'>471.69us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>471.93us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>439.73us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>504.12us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>45.52us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>AQ: RAC AQ Network</td><td align="right" headers="Event Waits" class='awrnclb'>12,368</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.35</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>28.61us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>28.60us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>25.69us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>31.51us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4.12us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file operations I/O</td><td align="right" headers="Event Waits" class='awrclb'>709</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.34</td><td align="right" headers="WaitTime AvgWait" class='awrc'>479.36us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>479.31us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>468.69us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>489.94us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>15.03us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: gcs resource hash</td><td align="right" headers="Event Waits" class='awrnclb'>1,140</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.34</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>294.40us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>257.88us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>183.79us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>331.97us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>104.78us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CGS wait for IPC msg</td><td align="right" headers="Event Waits" class='awrclb'>12,647</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.33</td><td align="right" headers="WaitTime AvgWait" class='awrc'>26.41us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>26.40us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>24.10us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>28.70us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.25us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>LGWR wait for redo copy</td><td align="right" headers="Event Waits" class='awrnclb'>662</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.23</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>352.82us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>328.68us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>273.19us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>384.17us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>78.48us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>166</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.23</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.37ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>619.97us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.55ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>656.46us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache pin</td><td align="right" headers="Event Waits" class='awrnclb'>49</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.22</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.46ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.26ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.67ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.85ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.25ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ksxr poll remote instances</td><td align="right" headers="Event Waits" class='awrclb'>5,999</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.18</td><td align="right" headers="WaitTime AvgWait" class='awrc'>30.54us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>30.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>26.83us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>34.18us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>5.19us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>oracle thread bootstrap</td><td align="right" headers="Event Waits" class='awrnclb'>8</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.17</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>20.96ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>20.96ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>19.08ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>22.85ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.66ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Application</td><td headers="Wait Event" class='awrc'>enq: TM - contention</td><td align="right" headers="Event Waits" class='awrclb'>26</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.16</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.97ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.97ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>936.23us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>11.01ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>7.12ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: cache buffers lru chain</td><td align="right" headers="Event Waits" class='awrnclb'>475</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.15</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>326.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>294.24us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>213.56us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>374.92us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>114.10us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr disk read</td><td align="right" headers="Event Waits" class='awrclb'>48</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.11</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.36ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.22ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.32ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.13ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.28ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Network</td><td headers="Wait Event" class='awrnc'>IPC group service call</td><td align="right" headers="Event Waits" class='awrnclb'>1,809</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.11</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>61.93us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>62.08us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>55.04us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>69.13us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>9.96us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: redo allocation</td><td align="right" headers="Event Waits" class='awrclb'>345</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.11</td><td align="right" headers="WaitTime AvgWait" class='awrc'>313.79us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>294.39us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>236.21us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>352.57us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>82.28us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Administrative</td><td headers="Wait Event" class='awrnc'>JS kgl get object wait</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.10</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>99.29ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>99.29ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>99.29ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>99.29ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>row cache lock</td><td align="right" headers="Event Waits" class='awrclb'>51</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.09</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.82ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.77ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.62ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.92ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>210.18us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: gc element</td><td align="right" headers="Event Waits" class='awrnclb'>130</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.08</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>589.29us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>523.30us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>423.55us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>623.06us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>141.07us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>library cache lock</td><td align="right" headers="Event Waits" class='awrclb'>51</td><td align="right" headers="Event %Timeouts" class='awrc'>25.49</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.48ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.42ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.34ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.50ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>114.50us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>63</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.07</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.18ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.24ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.44ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>289.16us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>DLM cross inst call completion</td><td align="right" headers="Event Waits" class='awrclb'>104</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrc'>604.19us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>569.79us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>484.61us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>654.97us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>120.46us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS operation: data query</td><td align="right" headers="Event Waits" class='awrnclb'>39</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.54ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.55ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.32ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.77ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>317.78us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" headers="Event Waits" class='awrclb'>204</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrc'>281.62us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>247.55us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>207.60us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>287.49us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>56.49us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS operation: data update</td><td align="right" headers="Event Waits" class='awrnclb'>43</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.20ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>908.90us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.47ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>396.82us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>direct path read</td><td align="right" headers="Event Waits" class='awrclb'>14</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.66ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.66ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.66ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>40</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.27ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.43ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.23ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.63ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>282.67us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant congested</td><td align="right" headers="Event Waits" class='awrclb'>8</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.29ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.18ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.40ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.96ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.52ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PGA memory operation</td><td align="right" headers="Event Waits" class='awrnclb'>522</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>69.60us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>69.91us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>58.16us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>81.66us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>16.62us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: TO - contention</td><td align="right" headers="Event Waits" class='awrclb'>33</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>.95ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>843.18us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>683.60us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.00ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>225.67us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Commit</td><td headers="Wait Event" class='awrnc'>log file sync</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.41ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.41ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>10.41ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.41ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: messages</td><td align="right" headers="Event Waits" class='awrclb'>91</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>275.74us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>266.56us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>210.89us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>322.23us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>78.72us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.92ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.92ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.92ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.92ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS operation: action</td><td align="right" headers="Event Waits" class='awrclb'>42</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>562.95us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>598.69us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>515.30us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>682.08us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>117.93us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrnclb'>9</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.01ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.42ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.90ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.94ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>738.48us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: WF - contention</td><td align="right" headers="Event Waits" class='awrclb'>17</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.04ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.06ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>658.11us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.47ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>570.64us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: ges resource hash list</td><td align="right" headers="Event Waits" class='awrnclb'>18</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>.96ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>772.09us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>426.75us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.12ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>488.38us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block congested</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.14ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.10ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.17ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>95.70us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" headers="Event Waits" class='awrnclb'>204</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>79.81us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>87.60us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>78.47us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>96.73us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>12.92us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>os thread creation</td><td align="right" headers="Event Waits" class='awrclb'>8</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.91ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.91ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.42ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.40ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>693.85us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block congested</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.84ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.35ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.88ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.83ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.08ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: FB - contention</td><td align="right" headers="Event Waits" class='awrclb'>6</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.93ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.60ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.11ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.09ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>693.39us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>latch: redo writing</td><td align="right" headers="Event Waits" class='awrnclb'>53</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>215.62us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>199.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>162.33us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>236.66us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>52.56us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: CO - master slave det</td><td align="right" headers="Event Waits" class='awrclb'>11</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>.99ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>.99ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>.99ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>.99ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: checkpoint queue latch</td><td align="right" headers="Event Waits" class='awrnclb'>32</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>319.09us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>250.21us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>140.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>360.42us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>155.86us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: DW - contention</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.16ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.88ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.73ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>6.03ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.04ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: cache buffers chains</td><td align="right" headers="Event Waits" class='awrnclb'>28</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>332.21us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>351.57us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>312.86us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>390.29us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>54.75us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: object queue header operation</td><td align="right" headers="Event Waits" class='awrclb'>21</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>403.43us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>304.14us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>114.60us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>493.69us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>268.06us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>libcache interrupt action by LCK</td><td align="right" headers="Event Waits" class='awrnclb'>1,404</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.59us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.59us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.54us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.65us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>77.75ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: MGA shared context root latch</td><td align="right" headers="Event Waits" class='awrclb'>26</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>275.31us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>266.12us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>146.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>385.57us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>168.93us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: RA - RT ADDM flood control</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.33ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.06ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.27ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.86ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.13ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: WT - contention</td><td align="right" headers="Event Waits" class='awrclb'>7</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>.97ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.02ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>653.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.39ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>518.19us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: JS - job run lock - synchronize</td><td align="right" headers="Event Waits" class='awrnclb'>4</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.58ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.24ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>536.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.93ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>.99ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrclb'>6</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.01ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.26ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>887.40us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.63ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>524.39us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: TT - contention</td><td align="right" headers="Event Waits" class='awrnclb'>4</td><td align="right" headers="Event %Timeouts" class='awrnc'>50.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.51ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.51ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.51ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.51ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>direct path sync</td><td align="right" headers="Event Waits" class='awrclb'>44</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>122.80us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>122.80us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>115.91us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>129.68us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>9.74us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current multi block request</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.41ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.41ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.41ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.41ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: US - contention</td><td align="right" headers="Event Waits" class='awrclb'>5</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>823.60us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>823.60us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>823.60us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>823.60us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: TA - contention</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.54ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.54ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.14ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.93ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>555.08us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: DR - contention</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.75ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.75ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.75ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: enqueue hash chains</td><td align="right" headers="Event Waits" class='awrnclb'>7</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>358.43us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>333.33us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>157.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>509.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>248.43us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>wait list latch free</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.08ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.12ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>54.45us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: undo global data</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.04ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.04ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.04ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: TD - KTF dump entries</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>881.50us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>881.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>815.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>948.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>94.05us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>GCR CSS group update</td><td align="right" headers="Event Waits" class='awrnclb'>40</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>38.53us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>38.53us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>12.95us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>64.10us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>36.17us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: MGA shared context latch</td><td align="right" headers="Event Waits" class='awrclb'>11</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>123.55us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>122.18us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>107.20us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>137.17us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>21.19us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>kjctssqmg: quick message send wait</td><td align="right" headers="Event Waits" class='awrnclb'>5</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>256.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>256.38us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>255.75us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>257.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>883.88ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc buffer busy acquire</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.21ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.21ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.21ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.21ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>asynch descriptor resize</td><td align="right" headers="Event Waits" class='awrnclb'>149</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.12us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.12us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.74us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.49us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>530.39ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: MGA heap latch</td><td align="right" headers="Event Waits" class='awrclb'>7</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>133.14us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>81.42us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>153.83us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>102.41us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Network</td><td headers="Wait Event" class='awrnc'>SQL*Net message to client</td><td align="right" headers="Event Waits" class='awrnclb'>133</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.71us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.72us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.43us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>401.05ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>GCR CSS group query</td><td align="right" headers="Event Waits" class='awrclb'>39</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.46us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>13.47us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>13.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.95us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>669.89ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: call allocation</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>126.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>126.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>126.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>126.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges resource directory to be unfrozen</td><td align="right" headers="Event Waits" class='awrclb'>6</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.67us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>8.67us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.33us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>12.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.71us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX qref latch</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>22.50us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>22.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>22.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>22.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>undo_retention publish retry</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>6.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>707.11ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>buffer deadlock</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>12.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>12.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>12.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>12.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>AWR Flush</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.75us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>707.11ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>lock deadlock retry</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>12.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>12.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>12.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>12.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Idle Wait</td><td align="right" headers="Event Waits" class='awrclb'>206</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>81,274.85</td><td align="right" headers="WaitTime AvgWait" class='awrc'>394.54 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>14.77</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>394.54 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>394.54 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>394.54 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.76ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Space Manager: slave idle wait</td><td align="right" headers="Event Waits" class='awrnclb'>11,629</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>48,164.79</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4141.78ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>8.75</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4145.90ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4101.82ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4189.98ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>62.34ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>rdbms ipc message</td><td align="right" headers="Event Waits" class='awrclb'>332,340</td><td align="right" headers="Event %Timeouts" class='awrc'>8.36</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>33,136.57</td><td align="right" headers="WaitTime AvgWait" class='awrc'>99.71ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>6.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>102.48ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>85.48ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>119.48ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>24.04ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>class slave wait</td><td align="right" headers="Event Waits" class='awrnclb'>15,789</td><td align="right" headers="Event %Timeouts" class='awrnc'>76.81</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>9,841.25</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>623.30ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>1.79</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>623.33ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>617.44ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>629.23ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>8.34ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>wait for unread message on broadcast channel</td><td align="right" headers="Event Waits" class='awrclb'>1,901</td><td align="right" headers="Event %Timeouts" class='awrc'>99.95</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3,723.16</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1958.53ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.68</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1958.53ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1958.52ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1958.53ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>5.16us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>LMS CR slave timer</td><td align="right" headers="Event Waits" class='awrnclb'>371,202</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3,715.43</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.01ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.68</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.01ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>10.00ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.02ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>14.34us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>gcs yield cpu</td><td align="right" headers="Event Waits" class='awrclb'>126,308</td><td align="right" headers="Event %Timeouts" class='awrc'>99.93</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3,694.98</td><td align="right" headers="WaitTime AvgWait" class='awrc'>29.25ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.67</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>29.26ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>28.94ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>29.57ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>442.48us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>gcs remote message</td><td align="right" headers="Event Waits" class='awrnclb'>7,032,912</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,590.91</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>368.40us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.47</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>371.26us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>343.77us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>398.75us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>38.88us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>pmon timer</td><td align="right" headers="Event Waits" class='awrclb'>827</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,480.93</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2999.91ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.45</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2999.91ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2999.90ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2999.92ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>15.61us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>ges remote message</td><td align="right" headers="Event Waits" class='awrnclb'>51,265</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,477.78</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>48.33ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.45</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>48.33ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>48.17ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>48.50ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>234.77us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>GCR sleep</td><td align="right" headers="Event Waits" class='awrclb'>8,251</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,477.25</td><td align="right" headers="WaitTime AvgWait" class='awrc'>300.24ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.45</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>300.24ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>300.18ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>300.29ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>81.01us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>DIAG idle wait</td><td align="right" headers="Event Waits" class='awrnclb'>16,193</td><td align="right" headers="Event %Timeouts" class='awrnc'>80.20</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,475.57</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>152.88ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.45</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>152.88ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>152.49ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>153.27ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>555.38us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>Data Guard: Gap Manager</td><td align="right" headers="Event Waits" class='awrclb'>22</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,320.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>60.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.24</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>200.37us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>AQPC idle</td><td align="right" headers="Event Waits" class='awrnclb'>42</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,260.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>30.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.23</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>36.40us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>ASM background timer</td><td align="right" headers="Event Waits" class='awrclb'>4,444</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,240.95</td><td align="right" headers="WaitTime AvgWait" class='awrc'>279.24ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.23</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>279.53ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>270.73ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>288.32ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>12.43ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PING</td><td align="right" headers="Event Waits" class='awrnclb'>1,204</td><td align="right" headers="Event %Timeouts" class='awrnc'>19.60</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,240.74</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1030.52ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.23</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1031.00ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1008.75ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1053.25ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>31.47ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>heartbeat redo informer</td><td align="right" headers="Event Waits" class='awrclb'>1,240</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,240.18</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1000.14ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.23</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1000.14ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1000.13ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1000.15ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>15.05us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" headers="Event Waits" class='awrnclb'>22</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,240.13</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>56.37 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.23</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>56.37 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>56.36 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>56.38 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>14.94ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>VKRM Idle</td><td align="right" headers="Event Waits" class='awrclb'>0</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,240.09</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.23</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>lreg timer</td><td align="right" headers="Event Waits" class='awrnclb'>413</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,240.08</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3002.61ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.23</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3002.61ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3002.57ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3002.65ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>54.60us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>Streams AQ: waiting for time management or cleanup tasks</td><td align="right" headers="Event Waits" class='awrclb'>0</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,240.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.23</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>ASM cluster membership changes</td><td align="right" headers="Event Waits" class='awrnclb'>708</td><td align="right" headers="Event %Timeouts" class='awrnc'>85.03</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,239.28</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1750.40ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.23</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1750.40ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1750.39ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1750.41ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>13.87us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>OFS idle</td><td align="right" headers="Event Waits" class='awrclb'>413</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,239.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3000.02ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.23</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3000.02ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2999.99ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3000.04ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>34.25us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>pman timer</td><td align="right" headers="Event Waits" class='awrnclb'>413</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,238.88</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2999.71ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.23</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2999.71ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2999.69ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2999.73ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>23.60us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>SCM slave idle</td><td align="right" headers="Event Waits" class='awrclb'>12,469</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,236.81</td><td align="right" headers="WaitTime AvgWait" class='awrc'>99.19ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.22</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>99.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>99.10ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>99.29ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>133.86us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Streams AQ: qmn coordinator idle wait</td><td align="right" headers="Event Waits" class='awrnclb'>88</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,232.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>14.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.22</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>14.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>14.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>14.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>24.33us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>Streams AQ: qmn slave idle wait</td><td align="right" headers="Event Waits" class='awrclb'>44</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,232.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>28.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.22</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>28.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>28.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>28.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>35.36us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>shared server idle wait</td><td align="right" headers="Event Waits" class='awrnclb'>0</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,230.23</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.22</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>dispatcher timer</td><td align="right" headers="Event Waits" class='awrclb'>20</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,200.11</td><td align="right" headers="WaitTime AvgWait" class='awrc'>60.01 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.22</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>60.01 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>60.01 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>60.01 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>278.95us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Data Guard: Timer</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,200.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>600.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.22</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>600.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>600.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>600.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>24.04us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>LGWR worker group idle</td><td align="right" headers="Event Waits" class='awrclb'>136,492</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>993.47</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.28ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.18</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.46ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.56ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>8.36ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.27ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>smon timer</td><td align="right" headers="Event Waits" class='awrnclb'>64</td><td align="right" headers="Event %Timeouts" class='awrnc'>1.56</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>675.47</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.55 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.12</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>11.63 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7324.12ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>15.94 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>6090.73ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>jobq slave wait</td><td align="right" headers="Event Waits" class='awrclb'>567</td><td align="right" headers="Event %Timeouts" class='awrc'>98.94</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>282.87</td><td align="right" headers="WaitTime AvgWait" class='awrc'>498.89ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>498.89ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>498.54ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>499.24ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>493.54us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq: Parse Reply</td><td align="right" headers="Event Waits" class='awrnclb'>204</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.54</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>12.45ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.68ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.08ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>13.27ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>7.91ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq: Execute Reply</td><td align="right" headers="Event Waits" class='awrclb'>603</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.42</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.36ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.64ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.93ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>19.35ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>12.32ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq Credit: send blkd</td><td align="right" headers="Event Waits" class='awrnclb'>285</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.31</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.07ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>804.98us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.15ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>241.78us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>RMA: IPC0 completion sync</td><td align="right" headers="Event Waits" class='awrclb'>2,182</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.08</td><td align="right" headers="WaitTime AvgWait" class='awrc'>37.99us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>38.11us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>29.92us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>46.31us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>11.59us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>SQL*Net message from client</td><td align="right" headers="Event Waits" class='awrnclb'>135</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.07</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>503.06us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>504.02us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>374.21us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>633.84us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>183.59us</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12055"></a>
<h3 class="awr">Wait Event Histogram (Global)</h3>
<ul>
<li class="awr"> When % of Total Waits is  0.0 the count is displayed in parenthesis</li>
</ul>
<table border="0" class="tdiff" summary="This table displays wait event histogram information"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 22" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col" id="&lt;1us"> &lt;1us</th><th class="awrbg" scope="col" id="&lt;2us"> &lt;2us</th><th class="awrbg" scope="col" id="&lt;4us"> &lt;4us</th><th class="awrbg" scope="col" id="&lt;8us"> &lt;8us</th><th class="awrbg" scope="col" id="&lt;16us"> &lt;16us</th><th class="awrbg" scope="col" id="&lt;32us"> &lt;32us</th><th class="awrbg" scope="col" id="&lt;64us"> &lt;64us</th><th class="awrbg" scope="col" id="&lt;128us"> &lt;128us</th><th class="awrbg" scope="col" id="&lt;256us"> &lt;256us</th><th class="awrbg" scope="col" id="&lt;512us"> &lt;512us</th><th class="awrbg" scope="col" id="&lt;1ms"> &lt;1ms</th><th class="awrbg" scope="col" id="&lt;2ms"> &lt;2ms</th><th class="awrbg" scope="col" id="&lt;4ms"> &lt;4ms</th><th class="awrbg" scope="col" id="&lt;8ms"> &lt;8ms</th><th class="awrbg" scope="col" id="&lt;16ms"> &lt;16ms</th><th class="awrbg" scope="col" id="&lt;32ms"> &lt;32ms</th><th class="awrbg" scope="col" id="&lt;64ms"> &lt;64ms</th><th class="awrbg" scope="col" id="&lt;128ms"> &lt;128ms</th><th class="awrbg" scope="col" id="&lt;256ms"> &lt;256ms</th><th class="awrbg" scope="col" id="&lt;512ms"> &lt;512ms</th><th class="awrbg" scope="col" id="&lt;1s"> &lt;1s</th><th class="awrbg" scope="col" id="&gt;=1s"> &gt;=1s</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>12.3K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.0(4)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>88.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.0(5)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>167K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>72.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.0(24)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.0(4)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>6145</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>24.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>35.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.0(1)</td></tr>
<tr><td scope="row" class='awrnc'>AWR Flush</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>90.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>12.6K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>83.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.0(4)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS initialization</td><td align="right" class='awrnc'>40</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>45.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: action</td><td align="right" class='awrc'>102</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>18.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>27.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>34.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>15.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data query</td><td align="right" class='awrnc'>39</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>25.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>38.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data update</td><td align="right" class='awrc'>43</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>62.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>27.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: query</td><td align="right" class='awrnc'>120</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>68.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>9.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DFS lock handle</td><td align="right" class='awrc'>213</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>27.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>45.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>22.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>172</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>20.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>26.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.6</td></tr>
<tr><td scope="row" class='awrc'>Data file init write</td><td align="right" class='awrc'>64</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>26.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>32.8</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>1711</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>31.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>22.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>20.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Disk file operations I/O</td><td align="right" class='awrc'>928</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>42.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group query</td><td align="right" class='awrnc'>39</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>79.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group update</td><td align="right" class='awrc'>40</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>87.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" class='awrnc'>3708</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC group service call</td><td align="right" class='awrc'>1841</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>50.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>23.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC send completion sync</td><td align="right" class='awrnc'>1681</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>67.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS kgl get object wait</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>8178</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>18.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>40.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>26.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>2399</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>22.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.0(1)</td></tr>
<tr><td scope="row" class='awrnc'>LGWR all worker groups</td><td align="right" class='awrnc'>5579</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>31.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>51.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR any worker group</td><td align="right" class='awrc'>98.5K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.0(14)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>28.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.0(8)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>662</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>20.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>21.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>17.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR worker group ordering</td><td align="right" class='awrc'>16.8K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>64.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>15.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PGA memory operation</td><td align="right" class='awrnc'>891</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>22.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>42.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>14.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Join ACK</td><td align="right" class='awrc'>206</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>32.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>15.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>32.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.5</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>206</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>75.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>412</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>21.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>89K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>87.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.0(34)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.0(9)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX qref latch</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>71.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net break/reset to client</td><td align="right" class='awrnc'>124</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>34.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>14.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>33.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message to client</td><td align="right" class='awrc'>534</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>93.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>108</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>38.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>18.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>asynch descriptor resize</td><td align="right" class='awrc'>151</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>84.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>607</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>14.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>19.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>14.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>9.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>8.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>1.2</td></tr>
<tr><td scope="row" class='awrc'>buffer deadlock</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>669</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>29.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>13.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>21.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>7855</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>datafile move cleanup during resize</td><td align="right" class='awrnc'>22</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>68.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>31.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file async I/O submit</td><td align="right" class='awrc'>55.1K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>0.0(14)</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>93.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.0(12)</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.0(5)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>1.3M</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>59.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>13.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.0(198)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.0(37)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.0(23)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>172.3K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>17.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>20.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>10.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.0(9)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>78</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>56.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>21.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>5.5M</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>60.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>23.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.0(164)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.0(58)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.0(15)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file single write</td><td align="right" class='awrnc'>44</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>15.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>15.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>direct path read</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>85.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path sync</td><td align="right" class='awrnc'>66</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>direct path write</td><td align="right" class='awrc'>36</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path write temp</td><td align="right" class='awrnc'>88</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>33.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>44.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: AF - task serialization</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: CF - contention</td><td align="right" class='awrnc'>172</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>49.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>32.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CO - master slave det</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>63.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>36.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrnc'>3827</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>33.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>29.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.0(1)</td></tr>
<tr><td scope="row" class='awrc'>enq: CT - state</td><td align="right" class='awrc'>18</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>44.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>38.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: DR - contention</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: DW - contention</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: FB - contention</td><td align="right" class='awrnc'>20</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>80.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: FD - Flashback logical operations</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>636</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>14.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>16.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>11.0</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>9.3</td></tr>
<tr><td scope="row" class='awrc'>enq: JS - job run lock - synchronize</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: MV - datafile move</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>226</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>57.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>28.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: RA - RT ADDM flood control</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: RO - fast object reuse</td><td align="right" class='awrc'>256</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>42.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>19.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: RP - contention</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: SW - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TA - contention</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TD - KTF dump entries</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TM - contention</td><td align="right" class='awrnc'>27</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>44.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>40.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TO - contention</td><td align="right" class='awrc'>44</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>61.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>15.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TT - contention</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: US - contention</td><td align="right" class='awrc'>1705</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>14.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>14.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.9</td></tr>
<tr><td scope="row" class='awrnc'>enq: WF - contention</td><td align="right" class='awrnc'>36</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>19.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>52.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: WT - contention</td><td align="right" class='awrc'>16</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>43.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy acquire</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>27</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>25.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>1992</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>19.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>36.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>31.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block busy</td><td align="right" class='awrc'>69</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>15.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>40.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block congested</td><td align="right" class='awrnc'>17</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>58.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block lost</td><td align="right" class='awrc'>2029</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>49.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>50.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr disk read</td><td align="right" class='awrnc'>48</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>29.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>35.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>14.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>233.7K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>38.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>36.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.0(8)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.0(63)</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>955.3K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.0(7)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.0(149)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.0(96)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(234)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>23.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>35.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>27.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.0(354)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.0(40)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.0(476)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.0(48)</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant congested</td><td align="right" class='awrc'>1581</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>59.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>26.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>1.1M</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.0(5)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.0(66)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.0(27)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(160)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.0(392)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>29.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>38.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.0(293)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.0(8)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.0(109)</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>1634</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>34.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>38.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>20.9K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>38.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>36.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.0(4)</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>4135</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>37.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>31.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current block congested</td><td align="right" class='awrnc'>382</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>54.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>40.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>1862</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>48.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>51.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>262.8K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>31.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>35.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>14.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.0(131)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.0(17)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.0(73)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.0(5)</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>837.2K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.0(7)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.0(143)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.0(87)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.0(233)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>23.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>36.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>27.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.0(305)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.0(79)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.0(40)</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>2750</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>34.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>38.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>64.1K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.0(11)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>32.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>30.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.0(13)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>17</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>70.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current retry</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current split</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc index operation</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>30.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs log flush sync</td><td align="right" class='awrnc'>1436</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>20.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>17.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges inquiry response</td><td align="right" class='awrc'>1035</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>46.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>34.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges resource directory to be unfrozen</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>87.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kfk: async disk IO</td><td align="right" class='awrc'>44</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>63.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjctssqmg: quick message send wait</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>60.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>5917</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>87.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>7586</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>23.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>12.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA heap latch</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>57.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context latch</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>54.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context root latch</td><td align="right" class='awrc'>26</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>65.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>212</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>22.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>17.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>14.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>892</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>24.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>19.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>19.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>13.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: call allocation</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: checkpoint queue latch</td><td align="right" class='awrc'>32</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>21.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: enqueue hash chains</td><td align="right" class='awrnc'>695</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>19.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>20.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>1517</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>18.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>25.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>21.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>2011</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>13.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>19.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>25.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>17.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: ges resource hash list</td><td align="right" class='awrc'>130</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>18.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>22.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>105</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>31.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>22.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>97</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>23.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>25.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo allocation</td><td align="right" class='awrnc'>1008</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: redo writing</td><td align="right" class='awrc'>53</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>22.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>28.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>22.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: session allocation</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: shared pool</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: undo global data</td><td align="right" class='awrnc'>70</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>18.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>25.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>24.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>libcache interrupt action by LCK</td><td align="right" class='awrc'>1400</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>94.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache lock</td><td align="right" class='awrnc'>94</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>44.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>29.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache pin</td><td align="right" class='awrc'>89</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>24.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>40.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>18.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>14.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache: mutex X</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lock deadlock retry</td><td align="right" class='awrc'>1860</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>80.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log file parallel write</td><td align="right" class='awrnc'>168.7K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>56.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>29.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.0(9)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.0(15)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file sequential read</td><td align="right" class='awrc'>813</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>25.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>27.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>17.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log file sync</td><td align="right" class='awrnc'>56</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>33.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>33.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>30.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service call wait</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>oracle thread bootstrap</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>os thread creation</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>62.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>1119</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>34.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>48.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.1</td></tr>
<tr><td scope="row" class='awrc'>row cache lock</td><td align="right" class='awrc'>69</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>24.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>47.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>20.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>7.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>row cache mutex</td><td align="right" class='awrnc'>22</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>63.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>undo segment extension</td><td align="right" class='awrc'>52</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>undo_retention publish retry</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>75.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>wait list latch free</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="639"></a>
<h2 class="awr">
Global Activity Load Profile
</h2>
<ul>
<li class="awr"><a class="awr" href="#12016">System Statistics</a></li>
<li class="awr"><a class="awr" href="#12017">System Statistics - Per Second</a></li>
<li class="awr"><a class="awr" href="#12018">System Statistics - Per Transaction</a></li>
<li class="awr"><a class="awr" href="#12030">SysStat and Global Messaging  - RAC</a></li>
<li class="awr"><a class="awr" href="#12031">SysStat and Global Messaging (per Sec)- RAC</a></li>
<li class="awr"><a class="awr" href="#12032">SysStat and Global Messaging (per Tx)- RAC</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12016"></a>
<h3 class="awr">System Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">Redo Size (k)</th><th class="awrbg" scope="col">Block Changes</th><th class="awrbg" scope="col">User Calls</th><th class="awrbg" scope="col">Execs</th><th class="awrbg" scope="col">Parses</th><th class="awrbg" scope="col">Logons</th><th class="awrbg" scope="col">Txns</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>11,686,333</td><td align="right" class='awrc'>8,848,730</td><td align="right" class='awrc'>1,377,434</td><td align="right" class='awrc'>1,090,742</td><td align="right" class='awrc'>2,963,708</td><td align="right" class='awrc'>1,063</td><td align="right" class='awrc'>806,212</td><td align="right" class='awrc'>4,644</td><td align="right" class='awrc'>112</td><td align="right" class='awrc'>119,984</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>11,662,368</td><td align="right" class='awrnc'>8,790,285</td><td align="right" class='awrnc'>1,374,050</td><td align="right" class='awrnc'>1,090,275</td><td align="right" class='awrnc'>2,953,140</td><td align="right" class='awrnc'>932</td><td align="right" class='awrnc'>808,968</td><td align="right" class='awrnc'>2,814</td><td align="right" class='awrnc'>112</td><td align="right" class='awrnc'>120,049</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>23,348,701</td><td align="right" class='awrct'>17,639,015</td><td align="right" class='awrct'>2,751,484</td><td align="right" class='awrct'>2,181,017</td><td align="right" class='awrct'>5,916,848</td><td align="right" class='awrct'>1,995</td><td align="right" class='awrct'>1,615,180</td><td align="right" class='awrct'>7,458</td><td align="right" class='awrct'>224</td><td align="right" class='awrct'>240,033</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>11,674,351</td><td align="right" class='awrnc'>8,819,508</td><td align="right" class='awrnc'>1,375,742</td><td align="right" class='awrnc'>1,090,509</td><td align="right" class='awrnc'>2,958,424</td><td align="right" class='awrnc'>998</td><td align="right" class='awrnc'>807,590</td><td align="right" class='awrnc'>3,729</td><td align="right" class='awrnc'>112</td><td align="right" class='awrnc'>120,017</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>16,946</td><td align="right" class='awrc'>41,327</td><td align="right" class='awrc'>2,393</td><td align="right" class='awrc'>330</td><td align="right" class='awrc'>7,473</td><td align="right" class='awrc'>93</td><td align="right" class='awrc'>1,949</td><td align="right" class='awrc'>1,294</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>46</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12017"></a>
<h3 class="awr">System Statistics - Per Second</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics - Per Second"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads/s</th><th class="awrbg" scope="col">Physical Reads/s</th><th class="awrbg" scope="col">Physical Writes/s</th><th class="awrbg" scope="col">Redo Size (k)/s</th><th class="awrbg" scope="col">Block Changes/s</th><th class="awrbg" scope="col">User Calls/s</th><th class="awrbg" scope="col">Execs/s</th><th class="awrbg" scope="col">Parses/s</th><th class="awrbg" scope="col">Logons/s</th><th class="awrbg" scope="col">Txns/s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>18,831.19</td><td align="right" class='awrc'>14,258.71</td><td align="right" class='awrc'>2,219.58</td><td align="right" class='awrc'>1,757.61</td><td align="right" class='awrc'>4,775.68</td><td align="right" class='awrc'>1.71</td><td align="right" class='awrc'>1,299.12</td><td align="right" class='awrc'>7.48</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>193.34</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>18,785.21</td><td align="right" class='awrnc'>14,158.99</td><td align="right" class='awrnc'>2,213.26</td><td align="right" class='awrnc'>1,756.17</td><td align="right" class='awrnc'>4,756.78</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>1,303.05</td><td align="right" class='awrnc'>4.53</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>193.37</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>37,616.40</td><td align="right" class='awrct'>28,417.71</td><td align="right" class='awrct'>4,432.83</td><td align="right" class='awrct'>3,513.77</td><td align="right" class='awrct'>9,532.46</td><td align="right" class='awrct'>3.21</td><td align="right" class='awrct'>2,602.17</td><td align="right" class='awrct'>12.02</td><td align="right" class='awrct'>0.36</td><td align="right" class='awrct'>386.71</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>18,808.20</td><td align="right" class='awrnc'>14,208.85</td><td align="right" class='awrnc'>2,216.42</td><td align="right" class='awrnc'>1,756.89</td><td align="right" class='awrnc'>4,766.23</td><td align="right" class='awrnc'>1.61</td><td align="right" class='awrnc'>1,301.08</td><td align="right" class='awrnc'>6.01</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>193.35</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>32.51</td><td align="right" class='awrc'>70.51</td><td align="right" class='awrc'>4.47</td><td align="right" class='awrc'>1.02</td><td align="right" class='awrc'>13.36</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>2.78</td><td align="right" class='awrc'>2.09</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12018"></a>
<h3 class="awr">System Statistics - Per Transaction</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics - Per Transaction"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads/tx</th><th class="awrbg" scope="col">Physical Reads/tx</th><th class="awrbg" scope="col">Physical Writes/tx</th><th class="awrbg" scope="col">Redo Size (k)/tx</th><th class="awrbg" scope="col">Block Changes/tx</th><th class="awrbg" scope="col">User Calls/tx</th><th class="awrbg" scope="col">Execs/tx</th><th class="awrbg" scope="col">Parses/tx</th><th class="awrbg" scope="col">Logons/tx</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>97.40</td><td align="right" class='awrc'>73.75</td><td align="right" class='awrc'>11.48</td><td align="right" class='awrc'>9.09</td><td align="right" class='awrc'>24.70</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>6.72</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>97.15</td><td align="right" class='awrnc'>73.22</td><td align="right" class='awrnc'>11.45</td><td align="right" class='awrnc'>9.08</td><td align="right" class='awrnc'>24.60</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>6.74</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>97.27</td><td align="right" class='awrct'>73.49</td><td align="right" class='awrct'>11.46</td><td align="right" class='awrct'>9.09</td><td align="right" class='awrct'>24.65</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>6.73</td><td align="right" class='awrct'>0.03</td><td align="right" class='awrct'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12030"></a>
<h3 class="awr">SysStat and Global Messaging  - RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging  - RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceived">Blocks Received</th>
<th class="awrbg" colspan=" 2" id="BlocksServed">Blocks Served</th>
<th class="awrbg" colspan=" 2" id="CPU(seconds)">CPU (seconds)</th>
<th class="awrbg" colspan=" 6" id="Messages">Messages</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent </th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost">Lost</th><th class="awrbg" scope="col" id="Failure">Failure</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceived GCCurrent" class='awrclb'>2,538</td><td align="right" headers="BlocksReceived GCCR" class='awrc'>3,394</td><td align="right" headers="BlocksServed GCCurrent" class='awrclb'>25,053</td><td align="right" headers="BlocksServed GCCR" class='awrc'>3,223</td><td align="right" headers="CPU(seconds) GC" class='awrclb'>&#160;</td><td align="right" headers="CPU(seconds) IPC" class='awrc'>0</td><td align="right" headers="Messages GCSReceived" class='awrclb'>11,015,102</td><td align="right" headers="Messages GESReceived" class='awrc'>10,258</td><td align="right" headers="Messages GCSSent" class='awrc'>12,196,214</td><td align="right" headers="Messages GESSent" class='awrc'>7,106</td><td align="right" headers="Messages SentDirect" class='awrc'>1,338,418</td><td align="right" headers="Messages SentIndir" class='awrc'>5,001,442</td><td align="right" headers="GCBlks Lost" class='awrclb'>3,892</td><td align="right" headers="GCCR Failure" class='awrcbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceived GCCurrent" class='awrnclb'>25,002</td><td align="right" headers="BlocksReceived GCCR" class='awrnc'>3,192</td><td align="right" headers="BlocksServed GCCurrent" class='awrnclb'>2,521</td><td align="right" headers="BlocksServed GCCR" class='awrnc'>3,353</td><td align="right" headers="CPU(seconds) GC" class='awrnclb'>&#160;</td><td align="right" headers="CPU(seconds) IPC" class='awrnc'>0</td><td align="right" headers="Messages GCSReceived" class='awrnclb'>12,124,980</td><td align="right" headers="Messages GESReceived" class='awrnc'>7,025</td><td align="right" headers="Messages GCSSent" class='awrnc'>10,964,766</td><td align="right" headers="Messages GESSent" class='awrnc'>10,124</td><td align="right" headers="Messages SentDirect" class='awrnc'>1,030,630</td><td align="right" headers="Messages SentIndir" class='awrnc'>3,790,354</td><td align="right" headers="GCBlks Lost" class='awrnclb'>48</td><td align="right" headers="GCCR Failure" class='awrncbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>27,540</td><td align="right" class='awrct'>6,586</td><td align="right" class='awrclbt'>27,574</td><td align="right" class='awrct'>6,576</td><td align="right" class='awrclbt'>0</td><td align="right" class='awrct'>0</td><td align="right" class='awrclbt'>23,140,082</td><td align="right" class='awrct'>17,283</td><td align="right" class='awrct'>23,160,980</td><td align="right" class='awrct'>17,230</td><td align="right" class='awrct'>2,369,048</td><td align="right" class='awrct'>8,791,796</td><td align="right" class='awrclbt'>3,940</td><td align="right" class='awrcbbt'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>13,770</td><td align="right" class='awrnc'>3,293</td><td align="right" class='awrnclb'>13,787</td><td align="right" class='awrnc'>3,288</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>11,570,041</td><td align="right" class='awrnc'>8,642</td><td align="right" class='awrnc'>11,580,490</td><td align="right" class='awrnc'>8,615</td><td align="right" class='awrnc'>1,184,524</td><td align="right" class='awrnc'>4,395,898</td><td align="right" class='awrnclb'>1,970</td><td align="right" class='awrncbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>15,884</td><td align="right" class='awrc'>143</td><td align="right" class='awrclb'>15,933</td><td align="right" class='awrc'>92</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>784,802</td><td align="right" class='awrc'>2,286</td><td align="right" class='awrc'>870,765</td><td align="right" class='awrc'>2,134</td><td align="right" class='awrc'>217,639</td><td align="right" class='awrc'>856,369</td><td align="right" class='awrclb'>2,718</td><td align="right" class='awrcbb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12031"></a>
<h3 class="awr">SysStat and Global Messaging (per Sec)- RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging (per Sec)- RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceivedPerSecond">Blocks Received Per Second</th>
<th class="awrbg" colspan=" 2" id="BlocksServedperSecond">Blocks Served per Second</th>
<th class="awrbg" colspan=" 2" id="CPUsecondsperSecond">CPU seconds per Second</th>
<th class="awrbg" colspan=" 6" id="MessagesPerSecond">Messages Per Second</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent</th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost/s">Lost/s</th><th class="awrbg" scope="col" id="Fail/s">Fail/s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceivedPerSecond GCCurrent" class='awrclb'>4.09</td><td align="right" headers="BlocksReceivedPerSecond GCCR" class='awrc'>5.47</td><td align="right" headers="BlocksServedperSecond GCCurrent" class='awrclb'>40.37</td><td align="right" headers="BlocksServedperSecond GCCR" class='awrc'>5.19</td><td align="right" headers="CPUsecondsperSecond GC" class='awrclb'>&#160;</td><td align="right" headers="CPUsecondsperSecond IPC" class='awrc'>0.00</td><td align="right" headers="MessagesPerSecond GCSReceived" class='awrclb'>17,749.57</td><td align="right" headers="MessagesPerSecond GESReceived" class='awrc'>16.53</td><td align="right" headers="MessagesPerSecond GCSSent" class='awrc'>19,652.80</td><td align="right" headers="MessagesPerSecond GESSent" class='awrc'>11.45</td><td align="right" headers="MessagesPerSecond SentDirect" class='awrc'>2,156.71</td><td align="right" headers="MessagesPerSecond SentIndir" class='awrc'>8,059.25</td><td align="right" headers="GCBlks Lost/s" class='awrclb'>6</td><td align="right" headers="GCCR Fail/s" class='awrcbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceivedPerSecond GCCurrent" class='awrnclb'>40.27</td><td align="right" headers="BlocksReceivedPerSecond GCCR" class='awrnc'>5.14</td><td align="right" headers="BlocksServedperSecond GCCurrent" class='awrnclb'>4.06</td><td align="right" headers="BlocksServedperSecond GCCR" class='awrnc'>5.40</td><td align="right" headers="CPUsecondsperSecond GC" class='awrnclb'>&#160;</td><td align="right" headers="CPUsecondsperSecond IPC" class='awrnc'>0.00</td><td align="right" headers="MessagesPerSecond GCSReceived" class='awrnclb'>19,530.37</td><td align="right" headers="MessagesPerSecond GESReceived" class='awrnc'>11.32</td><td align="right" headers="MessagesPerSecond GCSSent" class='awrnc'>17,661.55</td><td align="right" headers="MessagesPerSecond GESSent" class='awrnc'>16.31</td><td align="right" headers="MessagesPerSecond SentDirect" class='awrnc'>1,660.09</td><td align="right" headers="MessagesPerSecond SentIndir" class='awrnc'>6,105.33</td><td align="right" headers="GCBlks Lost/s" class='awrnclb'>0</td><td align="right" headers="GCCR Fail/s" class='awrncbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>44.36</td><td align="right" class='awrct'>10.61</td><td align="right" class='awrclbt'>44.43</td><td align="right" class='awrct'>10.59</td><td align="right" class='awrclbt'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>37,279.94</td><td align="right" class='awrct'>27.85</td><td align="right" class='awrct'>37,314.35</td><td align="right" class='awrct'>27.76</td><td align="right" class='awrct'>3,816.80</td><td align="right" class='awrct'>14,164.58</td><td align="right" class='awrclbt'>6</td><td align="right" class='awrcbbt'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>22.18</td><td align="right" class='awrnc'>5.31</td><td align="right" class='awrnclb'>22.22</td><td align="right" class='awrnc'>5.30</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnclb'>18,639.97</td><td align="right" class='awrnc'>13.92</td><td align="right" class='awrnc'>18,657.17</td><td align="right" class='awrnc'>13.88</td><td align="right" class='awrnc'>1,908.40</td><td align="right" class='awrnc'>7,082.29</td><td align="right" class='awrnclb'>3</td><td align="right" class='awrncbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>25.58</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrclb'>25.67</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrclb'>1,259.21</td><td align="right" class='awrc'>3.69</td><td align="right" class='awrc'>1,408.03</td><td align="right" class='awrc'>3.43</td><td align="right" class='awrc'>351.16</td><td align="right" class='awrc'>1,381.63</td><td align="right" class='awrclb'>4</td><td align="right" class='awrcbb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12032"></a>
<h3 class="awr">SysStat and Global Messaging (per Tx)- RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging (per Tx)- RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceivedperTx">Blocks Received per Tx</th>
<th class="awrbg" colspan=" 2" id="BlocksServed">Blocks Served</th>
<th class="awrbg" colspan=" 2" id="CPU(seconds)perTx">CPU (seconds) per Tx</th>
<th class="awrbg" colspan=" 6" id="MessagesperTransaction">Messages per Transaction</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent </th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost/Tx">Lost/Tx</th><th class="awrbg" scope="col" id="Fail/Tx">Fail/Tx</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceivedperTx GCCurrent" class='awrclb'>0.02</td><td align="right" headers="BlocksReceivedperTx GCCR" class='awrc'>0.03</td><td align="right" headers="BlocksServed GCCurrent" class='awrclb'>0.21</td><td align="right" headers="BlocksServed GCCR" class='awrc'>0.03</td><td align="right" headers="CPU(seconds)perTx GC" class='awrclb'>&#160;</td><td align="right" headers="CPU(seconds)perTx IPC" class='awrc'>0.00</td><td align="right" headers="MessagesperTransaction GCSReceived" class='awrclb'>91.80</td><td align="right" headers="MessagesperTransaction GESReceived" class='awrc'>0.09</td><td align="right" headers="MessagesperTransaction GCSSent" class='awrc'>101.65</td><td align="right" headers="MessagesperTransaction GESSent" class='awrc'>0.06</td><td align="right" headers="MessagesperTransaction SentDirect" class='awrc'>11.15</td><td align="right" headers="MessagesperTransaction SentIndir" class='awrc'>41.68</td><td align="right" headers="GCBlks Lost/Tx" class='awrclb'>0.03</td><td align="right" headers="GCCR Fail/Tx" class='awrcbb'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceivedperTx GCCurrent" class='awrnclb'>0.21</td><td align="right" headers="BlocksReceivedperTx GCCR" class='awrnc'>0.03</td><td align="right" headers="BlocksServed GCCurrent" class='awrnclb'>0.02</td><td align="right" headers="BlocksServed GCCR" class='awrnc'>0.03</td><td align="right" headers="CPU(seconds)perTx GC" class='awrnclb'>&#160;</td><td align="right" headers="CPU(seconds)perTx IPC" class='awrnc'>0.00</td><td align="right" headers="MessagesperTransaction GCSReceived" class='awrnclb'>101.00</td><td align="right" headers="MessagesperTransaction GESReceived" class='awrnc'>0.06</td><td align="right" headers="MessagesperTransaction GCSSent" class='awrnc'>91.34</td><td align="right" headers="MessagesperTransaction GESSent" class='awrnc'>0.08</td><td align="right" headers="MessagesperTransaction SentDirect" class='awrnc'>8.59</td><td align="right" headers="MessagesperTransaction SentIndir" class='awrnc'>31.57</td><td align="right" headers="GCBlks Lost/Tx" class='awrnclb'>0.00</td><td align="right" headers="GCCR Fail/Tx" class='awrncbb'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>0.11</td><td align="right" class='awrct'>0.03</td><td align="right" class='awrclbt'>0.11</td><td align="right" class='awrct'>0.03</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>96.40</td><td align="right" class='awrct'>0.07</td><td align="right" class='awrct'>96.49</td><td align="right" class='awrct'>0.07</td><td align="right" class='awrct'>9.87</td><td align="right" class='awrct'>36.63</td><td align="right" class='awrclbt'>0.02</td><td align="right" class='awrcbbt'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="605"></a>
<h2 class="awr">
Global Cache and Enqueue Statistics Summary
</h2>
<ul>
<li class="awr"><a class="awr" href="#12019">Global Cache Efficiency Percentages</a></li>
<li class="awr"><a class="awr" href="#12020">Global Latency Characteristics</a></li>
<li class="awr"><a class="awr" href="#12021">Global Messaging Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12019"></a>
<h3 class="awr">Global Cache Efficiency Percentages</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Cache Efficiency Percentages"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="BufferAccess">Buffer Access</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Local%">Local %</th><th class="awrbg" scope="col" id="Remote%">Remote %</th><th class="awrbg" scope="col" id="Disk%">Disk %</th><th class="awrbg" scope="col">Locality %</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BufferAccess Local%" class='awrclb'>24.22</td><td align="right" headers="BufferAccess Remote%" class='awrc'>0.05</td><td align="right" headers="BufferAccess Disk%" class='awrcrb'>75.73</td><td align="right" class='awrc'>53.41</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BufferAccess Local%" class='awrnclb'>24.38</td><td align="right" headers="BufferAccess Remote%" class='awrnc'>0.24</td><td align="right" headers="BufferAccess Disk%" class='awrncrb'>75.38</td><td align="right" class='awrnc'>65.57</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12020"></a>
<h3 class="awr">Global Latency Characteristics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Latency Characteristics"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CRBlocks">CR Blocks</th>
<th class="awrbg" colspan=" 4" id="CUBlocks">CU Blocks</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">GE Get Time (us)</th><th class="awrbg" scope="col" id="Receive|Time(us)">Receive Time (us)</th><th class="awrbg" scope="col" id="Build|Time(us)">Build Time (us)</th><th class="awrbg" scope="col" id="Flush|Time(us)">Flush Time (us)</th><th class="awrbg" scope="col" id="LogFlush|CRSrvd%">Log Flush CR Srvd %</th><th class="awrbg" scope="col" id="Receive|Time(us)">Receive Time (us)</th><th class="awrbg" scope="col" id="Pin|Time(us)">Pin Time (us)</th><th class="awrbg" scope="col" id="Flush|Time(us)">Flush Time (us)</th><th class="awrbg" scope="col" id="LogFlush|CUSrvd%">Log Flush CU Srvd %</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>1656</td><td align="right" headers="CRBlocks Receive|Time(us)" class='awrclb'>3297</td><td align="right" headers="CRBlocks Build|Time(us)" class='awrc'>98</td><td align="right" headers="CRBlocks Flush|Time(us)" class='awrc'>6923</td><td align="right" headers="CRBlocks LogFlush|CRSrvd%" class='awrc'>0.40</td><td align="right" headers="CUBlocks Receive|Time(us)" class='awrclb'>1631</td><td align="right" headers="CUBlocks Pin|Time(us)" class='awrc'>&#160;</td><td align="right" headers="CUBlocks Flush|Time(us)" class='awrc'>6667</td><td align="right" headers="CUBlocks LogFlush|CUSrvd%" class='awrcrb'>0.13</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>1605</td><td align="right" headers="CRBlocks Receive|Time(us)" class='awrnclb'>3208</td><td align="right" headers="CRBlocks Build|Time(us)" class='awrnc'>69</td><td align="right" headers="CRBlocks Flush|Time(us)" class='awrnc'>6667</td><td align="right" headers="CRBlocks LogFlush|CRSrvd%" class='awrnc'>1.79</td><td align="right" headers="CUBlocks Receive|Time(us)" class='awrnclb'>7018</td><td align="right" headers="CUBlocks Pin|Time(us)" class='awrnc'>&#160;</td><td align="right" headers="CUBlocks Flush|Time(us)" class='awrnc'>1818</td><td align="right" headers="CUBlocks LogFlush|CUSrvd%" class='awrncrb'>0.87</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12021"></a>
<h3 class="awr">Global Messaging Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Messaging Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="QueueTime(us)">Queue Time (us)</th>
<th class="awrbg" colspan=" 2" id="ProcessTime(us)">Process Time (us)</th>
<th class="awrbg" colspan=" 3" id="%MessagesSent">% Messages Sent</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Sent">Sent</th><th class="awrbg" scope="col" id="onksxp">on ksxp</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="GCSmsgs">GCS msgs</th><th class="awrbg" scope="col" id="GESmsgs">GES msgs</th><th class="awrbg" scope="col" id="Direct">Direct</th><th class="awrbg" scope="col" id="Indirect">Indirect</th><th class="awrbg" scope="col" id="FlowCtrl">Flow Ctrl</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="QueueTime(us) Sent" class='awrclb'>215</td><td align="right" headers="QueueTime(us) onksxp" class='awrc'>2221</td><td align="right" headers="QueueTime(us) Received" class='awrc'>55</td><td align="right" headers="ProcessTime(us) GCSmsgs" class='awrclb'>29</td><td align="right" headers="ProcessTime(us) GESmsgs" class='awrc'>25</td><td align="right" headers="%MessagesSent Direct" class='awrclb'>21.03</td><td align="right" headers="%MessagesSent Indirect" class='awrc'>78.59</td><td align="right" headers="%MessagesSent FlowCtrl" class='awrcrb'>0.38</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="QueueTime(us) Sent" class='awrnclb'>119</td><td align="right" headers="QueueTime(us) onksxp" class='awrnc'>4189</td><td align="right" headers="QueueTime(us) Received" class='awrnc'>23</td><td align="right" headers="ProcessTime(us) GCSmsgs" class='awrnclb'>21</td><td align="right" headers="ProcessTime(us) GESmsgs" class='awrnc'>23</td><td align="right" headers="%MessagesSent Direct" class='awrnclb'>21.32</td><td align="right" headers="%MessagesSent Indirect" class='awrnc'>78.41</td><td align="right" headers="%MessagesSent FlowCtrl" class='awrncrb'>0.27</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12033"></a>
<h3 class="awr">Global CR Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global CR Server Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 5" id="BlockRequests">Block Requests</th>
<th class="awrbg" colspan=" 5" id="Results">Results</th>
<th class="awrbg" colspan=" 1" id="Fairness">Fairness</th>
<th class="awrbg" colspan=" 1" id="Light">Light</th>
<th class="awrbg" colspan=" 3" id="Total">Total</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="CR">CR</th><th class="awrbg" scope="col" id="CU">CU</th><th class="awrbg" scope="col" id="Data">Data</th><th class="awrbg" scope="col" id="Undo">Undo</th><th class="awrbg" scope="col" id="TX">TX</th><th class="awrbg" scope="col" id="Current">Current</th><th class="awrbg" scope="col" id="Private">Private</th><th class="awrbg" scope="col" id="Zero">Zero</th><th class="awrbg" scope="col" id="DskRd">Dsk Rd</th><th class="awrbg" scope="col" id="Fail">Fail</th><th class="awrbg" scope="col" id="DownConv">Down Conv</th><th class="awrbg" scope="col" id="Works">Works</th><th class="awrbg" scope="col" id="Flushes">Flushes</th><th class="awrbg" scope="col" id="Builds">Builds</th><th class="awrbg" scope="col" id="Errors">Errors</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlockRequests CR" class='awrclb'>3,159</td><td align="right" headers="BlockRequests CU" class='awrc'>69</td><td align="right" headers="BlockRequests Data" class='awrc'>3,159</td><td align="right" headers="BlockRequests Undo" class='awrc'>0</td><td align="right" headers="BlockRequests TX" class='awrc'>24</td><td align="right" headers="Results Current" class='awrclb'>3,228</td><td align="right" headers="Results Private" class='awrc'>0</td><td align="right" headers="Results Zero" class='awrc'>0</td><td align="right" headers="Results DskRd" class='awrc'>1</td><td align="right" headers="Results Fail" class='awrc'>0</td><td align="right" headers="Fairness DownConv" class='awrclb'>3,103</td><td align="right" headers="Light Works" class='awrclb'>2,225</td><td align="right" headers="Total Flushes" class='awrclb'>13</td><td align="right" headers="Total Builds" class='awrc'>3,160</td><td align="right" headers="Total Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlockRequests CR" class='awrnclb'>2,609</td><td align="right" headers="BlockRequests CU" class='awrnc'>780</td><td align="right" headers="BlockRequests Data" class='awrnc'>2,609</td><td align="right" headers="BlockRequests Undo" class='awrnc'>0</td><td align="right" headers="BlockRequests TX" class='awrnc'>720</td><td align="right" headers="Results Current" class='awrnclb'>3,318</td><td align="right" headers="Results Private" class='awrnc'>0</td><td align="right" headers="Results Zero" class='awrnc'>18</td><td align="right" headers="Results DskRd" class='awrnc'>47</td><td align="right" headers="Results Fail" class='awrnc'>0</td><td align="right" headers="Fairness DownConv" class='awrnclb'>2,558</td><td align="right" headers="Light Works" class='awrnclb'>1,856</td><td align="right" headers="Total Flushes" class='awrnclb'>60</td><td align="right" headers="Total Builds" class='awrnc'>2,609</td><td align="right" headers="Total Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>5,768</td><td align="right" class='awrct'>849</td><td align="right" class='awrct'>5,768</td><td align="right" class='awrct'>0</td><td align="right" class='awrct'>744</td><td align="right" class='awrclbt'>6,546</td><td align="right" class='awrct'>0</td><td align="right" class='awrct'>18</td><td align="right" class='awrct'>48</td><td align="right" class='awrct'>0</td><td align="right" class='awrclbt'>5,661</td><td align="right" class='awrclbt'>4,081</td><td align="right" class='awrclbt'>73</td><td align="right" class='awrct'>5,769</td><td align="right" class='awrcrbt'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>2,884</td><td align="right" class='awrnc'>425</td><td align="right" class='awrnc'>2,884</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>372</td><td align="right" class='awrnclb'>3,273</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>2,831</td><td align="right" class='awrnclb'>2,041</td><td align="right" class='awrnclb'>37</td><td align="right" class='awrnc'>2,885</td><td align="right" class='awrncrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>389</td><td align="right" class='awrc'>503</td><td align="right" class='awrc'>389</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>492</td><td align="right" class='awrclb'>64</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>385</td><td align="right" class='awrclb'>261</td><td align="right" class='awrclb'>33</td><td align="right" class='awrc'>390</td><td align="right" class='awrcrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12034"></a>
<h3 class="awr">Global Current Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Current Server Statistics"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Pins</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th><th class="awrbg" scope="col">Flushes</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>69.70</td><td align="right" class='awrc'>30.30</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>81.82</td><td align="right" class='awrnc'>18.18</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>2</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrct'>55</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="607"></a>
<h2 class="awr">
Global Cache Transfer Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12035">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#12036">Global Cache Transfer (Immediate)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12035"></a>
<h3 class="awr">Global Cache Transfer Statistics</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> Busy	     (Busy) - Block Transfer impacted by Remote Contention </li>
<li class="awr"> Congested  (Cngst) - Block Transfer impacted by Remote System Load </li>
<li class="awr"> All - average time of All blocks (Immed,Busy,Cngst) in us </li>
<li class="awr"> Ordered by instance_number, CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="Global Cache Transfer Statistics. . Immediate (Immed) - Block Transfer NOT impacted by Remote Processing Delays. Busy (Busy) - Block Transfer impacted by Remote Contention. Congested (Cngst) - Block Transfer impacted by Remote System Load. All - average time of All blocks (Immed,Busy,Cngst) in us. Ordered by instance_number, CR + Current Blocks Received desc"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 1" id="Block">Block</th>
<th class="awrbg" colspan=" 4" id="CRBlocks">CR Blocks</th>
<th class="awrbg" colspan=" 4" id="CurrentBlocks">Current Blocks</th>
<th class="awrbg" colspan=" 4" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 4" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Dest">Dest</th><th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%Immed">%Immed</th><th class="awrbg" scope="col" id="%Busy">%Busy</th><th class="awrbg" scope="col" id="%Cngst">%Cngst</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%Immed">%Immed</th><th class="awrbg" scope="col" id="%Busy">%Busy</th><th class="awrbg" scope="col" id="%Cngst">%Cngst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Cngst">Cngst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Cngst">Cngst</th></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'>1</td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>data block</td><td align="right" headers="CRBlocks Received" class='awrclb'>2,588</td><td align="right" headers="CRBlocks %Immed" class='awrc'>98.49</td><td align="right" headers="CRBlocks %Busy" class='awrc'>0.73</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>0.77</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>2,485</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>25.19</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>74.41</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>0.40</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>4009</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>3956</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>10827</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>4338</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>1702</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>2962</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>1264</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>3792</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo header</td><td align="right" headers="CRBlocks Received" class='awrnclb'>720</td><td align="right" headers="CRBlocks %Immed" class='awrnc'>94.17</td><td align="right" headers="CRBlocks %Busy" class='awrnc'>5.69</td><td align="right" headers="CRBlocks %Cngst" class='awrnc'>0.14</td><td align="right" headers="CurrentBlocks Received" class='awrnclb'>17</td><td align="right" headers="CurrentBlocks %Immed" class='awrnc'>0.00</td><td align="right" headers="CurrentBlocks %Busy" class='awrnc'>100.00</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnc'>0.00</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>1126</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>814</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>6227</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnc'>3320</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>1427</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>1427</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>others</td><td align="right" headers="CRBlocks Received" class='awrclb'>12</td><td align="right" headers="CRBlocks %Immed" class='awrc'>100.00</td><td align="right" headers="CRBlocks %Busy" class='awrc'>0.00</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>60</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>18.33</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>81.67</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>0.00</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>960</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>960</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>989</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>656</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>1064</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclbt'>2</td><td align="right" headers="Instance# Src" class='awrnct'>1</td><td headers="Block Class" class='awrnclbt'>data block</td><td align="right" headers="CRBlocks Received" class='awrnclbt'>3,141</td><td align="right" headers="CRBlocks %Immed" class='awrnct'>97.23</td><td align="right" headers="CRBlocks %Busy" class='awrnct'>0.10</td><td align="right" headers="CRBlocks %Cngst" class='awrnct'>2.67</td><td align="right" headers="CurrentBlocks Received" class='awrnclbt'>24,905</td><td align="right" headers="CurrentBlocks %Immed" class='awrnct'>89.91</td><td align="right" headers="CurrentBlocks %Busy" class='awrnct'>8.53</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnct'>1.56</td><td align="right" headers="CRAvgTime(us) All" class='awrnclbt'>3274</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnct'>3258</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnct'>5331</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnct'>3752</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclbt'>7041</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnct'>7362</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnct'>4149</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrbt'>4320</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrc'>1</td><td headers="Block Class" class='awrclb'>others</td><td align="right" headers="CRBlocks Received" class='awrclb'>32</td><td align="right" headers="CRBlocks %Immed" class='awrc'>96.88</td><td align="right" headers="CRBlocks %Busy" class='awrc'>3.13</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>84</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>16.67</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>80.95</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>2.38</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>993</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>892</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>4142</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>1283</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>839</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>1241</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>5827</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>undo header</td><td align="right" headers="CRBlocks Received" class='awrnclb'>18</td><td align="right" headers="CRBlocks %Immed" class='awrnc'>72.22</td><td align="right" headers="CRBlocks %Busy" class='awrnc'>27.78</td><td align="right" headers="CRBlocks %Cngst" class='awrnc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrnclb'>17</td><td align="right" headers="CurrentBlocks %Immed" class='awrnc'>0.00</td><td align="right" headers="CurrentBlocks %Busy" class='awrnc'>100.00</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnc'>0.00</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>2072</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>592</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>5919</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>1675</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>1675</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#607">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12036"></a>
<h3 class="awr">Global Cache Transfer (Immediate)</h3>
<ul>
<li class="awr"> Ordered by instance_number, CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="Global Cache Transfer (Immediate). . Ordered by instance_number, CR + Current Blocks Received desc"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 1" id="Block">Block</th>
<th class="awrbg" colspan=" 2" id="LostBlocks">Lost Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmediateCRBlocks">Immediate CR Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmediateCurrentBlocks">Immediate Current Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmedCRAvgTime(us)">Immed CR Avg Time (us)</th>
<th class="awrbg" colspan=" 3" id="ImmedCurrentAvgTime(us)">Immed Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Dest">Dest</th><th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Count">Count</th><th class="awrbg" scope="col" id="Time(us)">Time(us)</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%2-hop">%2-hop</th><th class="awrbg" scope="col" id="%3-hop">%3-hop</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%2-hop">%2-hop</th><th class="awrbg" scope="col" id="%3-hop">%3-hop</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="2-hop">2-hop</th><th class="awrbg" scope="col" id="3-hop">3-hop</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="2-hop">2-hop</th><th class="awrbg" scope="col" id="3-hop">3-hop</th></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'>1</td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>data block</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>2,549</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>626</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>3956</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>3956</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>2962</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>2962</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo header</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>678</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>814</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>814</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>others</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>12</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>11</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>960</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>960</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>656</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>656</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo block</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclbt'>2</td><td align="right" headers="Instance# Src" class='awrct'>1</td><td headers="Block Class" class='awrclbt'>data block</td><td align="right" headers="LostBlocks Count" class='awrclbt'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrct'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclbt'>3,054</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrct'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrct'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclbt'>22,392</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrct'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrct'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclbt'>3258</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrct'>3258</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrct'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclbt'>7362</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrct'>7362</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>others</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>31</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>14</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>892</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>892</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>839</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>839</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrc'>1</td><td headers="Block Class" class='awrclb'>undo header</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>13</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>592</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>592</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>undo block</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#607">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="608"></a>
<h2 class="awr">
Interconnect Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12040">Cluster Interconnect</a></li>
<li class="awr"><a class="awr" href="#12045">Ping Statistics</a></li>
<li class="awr"><a class="awr" href="#12041">Interconnect Client Statistics</a></li>
<li class="awr"><a class="awr" href="#12042">Interconnect Client Statistics (per Second)</a></li>
<li class="awr"><a class="awr" href="#12043">Interconnect Device Statistics</a></li>
<li class="awr"><a class="awr" href="#12044">Interconnect Device Statistics (per Second)</a></li>
<li class="awr"><a class="awr" href="#12078">Dynamic Remastering Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12040"></a>
<h3 class="awr">Cluster Interconnect</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Cluster Interconnect"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="Begin">Begin</th>
<th class="awrbg" colspan=" 3" id="End(ifdifferentfromBegin)">End (if different from Begin)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td class='awrc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrclb'>169.254.22.248</td><td headers="Begin Pub" class='awrc'>N</td><td headers="Begin Source" class='awrc'>&#160;</td><td headers="End(ifdifferentfromBegin) IPAddress" class='awrclb'>&#160;</td><td headers="End(ifdifferentfromBegin) Pub" class='awrc'>&#160;</td><td headers="End(ifdifferentfromBegin) Source" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td class='awrnc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrnclb'>169.254.31.173</td><td headers="Begin Pub" class='awrnc'>N</td><td headers="Begin Source" class='awrnc'>&#160;</td><td headers="End(ifdifferentfromBegin) IPAddress" class='awrnclb'>&#160;</td><td headers="End(ifdifferentfromBegin) Pub" class='awrnc'>&#160;</td><td headers="End(ifdifferentfromBegin) Source" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12045"></a>
<h3 class="awr">Ping Statistics</h3>
<ul>
<li class="awr"> Latency of the roundtrip of a message from  Src Instance to the Target instances</li>
</ul>
<table border="0" class="tdiff" summary="Ping Statistics. . Latency of the roundtrip of a message from Src Instance to the Target instances"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 3" id="500bytes">500 bytes</th>
<th class="awrbg" colspan=" 3" id="8Kbytes">8 Kbytes</th>
</tr><tr>
<th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Target">Target</th><th class="awrbg" scope="col" id="Ping|Count">Ping Count</th><th class="awrbg" scope="col" id="Avg|Time(us)">Avg   Time(us)</th><th class="awrbg" scope="col" id="Std|Dev">Std Dev</th><th class="awrbg" scope="col" id="Ping|Count">Ping Count</th><th class="awrbg" scope="col" id="Avg|Time(us)">Avg   Time(us)</th><th class="awrbg" scope="col" id="Std|Dev">Std Dev</th></tr>
<tr><td align="right" headers="Instance# Src" class='awrclb'>1</td><td align="right" headers="Instance# Target" class='awrc'>1</td><td align="right" headers="500bytes Ping|Count" class='awrclb'>57</td><td align="right" headers="500bytes Avg|Time(us)" class='awrc'>727</td><td align="right" headers="500bytes Std|Dev" class='awrc'>0.65</td><td align="right" headers="8Kbytes Ping|Count" class='awrclb'>62</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrc'>720</td><td align="right" headers="8Kbytes Std|Dev" class='awrcrb'>0.64</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Target" class='awrnc'>2</td><td align="right" headers="500bytes Ping|Count" class='awrnclb'>57</td><td align="right" headers="500bytes Avg|Time(us)" class='awrnc'>1232</td><td align="right" headers="500bytes Std|Dev" class='awrnc'>0.75</td><td align="right" headers="8Kbytes Ping|Count" class='awrnclb'>62</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrnc'>1319</td><td align="right" headers="8Kbytes Std|Dev" class='awrncrb'>0.68</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrclbt'>2</td><td align="right" headers="Instance# Target" class='awrct'>1</td><td align="right" headers="500bytes Ping|Count" class='awrclbt'>56</td><td align="right" headers="500bytes Avg|Time(us)" class='awrct'>1095</td><td align="right" headers="500bytes Std|Dev" class='awrct'>0.61</td><td align="right" headers="8Kbytes Ping|Count" class='awrclbt'>61</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrct'>1379</td><td align="right" headers="8Kbytes Std|Dev" class='awrcrbt'>0.73</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Target" class='awrnc'>2</td><td align="right" headers="500bytes Ping|Count" class='awrnclb'>56</td><td align="right" headers="500bytes Avg|Time(us)" class='awrnc'>337</td><td align="right" headers="500bytes Std|Dev" class='awrnc'>0.11</td><td align="right" headers="8Kbytes Ping|Count" class='awrnclb'>61</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrnc'>336</td><td align="right" headers="8Kbytes Std|Dev" class='awrncrb'>0.11</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12041"></a>
<h3 class="awr">Interconnect Client Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Interconnect Client Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 6" id="Sent(MB)">Sent (MB)</th>
<th class="awrbg" colspan=" 6" id="Received(MB)">Received (MB)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sent(MB) Total" class='awrclb'>3,564.16</td><td align="right" headers="Sent(MB) Cache" class='awrc'>192.45</td><td align="right" headers="Sent(MB) IPQ" class='awrc'>4.81</td><td align="right" headers="Sent(MB) DLM" class='awrc'>3,338.66</td><td align="right" headers="Sent(MB) PNG" class='awrc'>1.04</td><td align="right" headers="Sent(MB) Misc" class='awrc'>27.20</td><td align="right" headers="Received(MB) Total" class='awrclb'>2,890.34</td><td align="right" headers="Received(MB) Cache" class='awrc'>73.65</td><td align="right" headers="Received(MB) IPQ" class='awrc'>6.50</td><td align="right" headers="Received(MB) DLM" class='awrc'>2,793.01</td><td align="right" headers="Received(MB) PNG" class='awrc'>1.04</td><td align="right" headers="Received(MB) Misc" class='awrcrb'>16.14</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sent(MB) Total" class='awrnclb'>2,871.30</td><td align="right" headers="Sent(MB) Cache" class='awrnc'>73.84</td><td align="right" headers="Sent(MB) IPQ" class='awrnc'>6.50</td><td align="right" headers="Sent(MB) DLM" class='awrnc'>2,774.14</td><td align="right" headers="Sent(MB) PNG" class='awrnc'>1.03</td><td align="right" headers="Sent(MB) Misc" class='awrnc'>15.79</td><td align="right" headers="Received(MB) Total" class='awrnclb'>3,541.88</td><td align="right" headers="Received(MB) Cache" class='awrnc'>191.92</td><td align="right" headers="Received(MB) IPQ" class='awrnc'>4.81</td><td align="right" headers="Received(MB) DLM" class='awrnc'>3,317.32</td><td align="right" headers="Received(MB) PNG" class='awrnc'>1.03</td><td align="right" headers="Received(MB) Misc" class='awrncrb'>26.80</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>6,435.46</td><td align="right" class='awrct'>266.29</td><td align="right" class='awrct'>11.32</td><td align="right" class='awrct'>6,112.80</td><td align="right" class='awrct'>2.07</td><td align="right" class='awrct'>42.99</td><td align="right" class='awrclbt'>6,432.22</td><td align="right" class='awrct'>265.57</td><td align="right" class='awrct'>11.32</td><td align="right" class='awrct'>6,110.33</td><td align="right" class='awrct'>2.08</td><td align="right" class='awrcrbt'>42.94</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>3,217.73</td><td align="right" class='awrnc'>133.15</td><td align="right" class='awrnc'>5.66</td><td align="right" class='awrnc'>3,056.40</td><td align="right" class='awrnc'>1.03</td><td align="right" class='awrnc'>21.50</td><td align="right" class='awrnclb'>3,216.11</td><td align="right" class='awrnc'>132.78</td><td align="right" class='awrnc'>5.66</td><td align="right" class='awrnc'>3,055.16</td><td align="right" class='awrnc'>1.04</td><td align="right" class='awrncrb'>21.47</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>489.93</td><td align="right" class='awrc'>83.87</td><td align="right" class='awrc'>1.20</td><td align="right" class='awrc'>399.18</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>8.07</td><td align="right" class='awrclb'>460.71</td><td align="right" class='awrc'>83.63</td><td align="right" class='awrc'>1.20</td><td align="right" class='awrc'>370.74</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrcrb'>7.54</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12042"></a>
<h3 class="awr">Interconnect Client Statistics (per Second)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Interconnect Client Statistics (per Second)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 6" id="Sent(MB/s)">Sent (MB/s)</th>
<th class="awrbg" colspan=" 6" id="Received(MB/s)">Received (MB/s)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sent(MB/s) Total" class='awrclb'>5.74</td><td align="right" headers="Sent(MB/s) Cache" class='awrc'>0.31</td><td align="right" headers="Sent(MB/s) IPQ" class='awrc'>0.01</td><td align="right" headers="Sent(MB/s) DLM" class='awrc'>5.38</td><td align="right" headers="Sent(MB/s) PNG" class='awrc'>0.00</td><td align="right" headers="Sent(MB/s) Misc" class='awrc'>0.04</td><td align="right" headers="Received(MB/s) Total" class='awrclb'>4.66</td><td align="right" headers="Received(MB/s) Cache" class='awrc'>0.12</td><td align="right" headers="Received(MB/s) IPQ" class='awrc'>0.01</td><td align="right" headers="Received(MB/s) DLM" class='awrc'>4.50</td><td align="right" headers="Received(MB/s) PNG" class='awrc'>0.00</td><td align="right" headers="Received(MB/s) Misc" class='awrcrb'>0.03</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sent(MB/s) Total" class='awrnclb'>4.62</td><td align="right" headers="Sent(MB/s) Cache" class='awrnc'>0.12</td><td align="right" headers="Sent(MB/s) IPQ" class='awrnc'>0.01</td><td align="right" headers="Sent(MB/s) DLM" class='awrnc'>4.47</td><td align="right" headers="Sent(MB/s) PNG" class='awrnc'>0.00</td><td align="right" headers="Sent(MB/s) Misc" class='awrnc'>0.03</td><td align="right" headers="Received(MB/s) Total" class='awrnclb'>5.71</td><td align="right" headers="Received(MB/s) Cache" class='awrnc'>0.31</td><td align="right" headers="Received(MB/s) IPQ" class='awrnc'>0.01</td><td align="right" headers="Received(MB/s) DLM" class='awrnc'>5.34</td><td align="right" headers="Received(MB/s) PNG" class='awrnc'>0.00</td><td align="right" headers="Received(MB/s) Misc" class='awrncrb'>0.04</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>10.37</td><td align="right" class='awrct'>0.43</td><td align="right" class='awrct'>0.02</td><td align="right" class='awrct'>9.85</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.07</td><td align="right" class='awrclbt'>10.36</td><td align="right" class='awrct'>0.43</td><td align="right" class='awrct'>0.02</td><td align="right" class='awrct'>9.84</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrcrbt'>0.07</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>5.18</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>4.92</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnclb'>5.18</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>4.92</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrncrb'>0.03</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>0.79</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.64</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrclb'>0.74</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.60</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrcrb'>0.01</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12043"></a>
<h3 class="awr">Interconnect Device Statistics</h3>
<ul>
<li class="awr"> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs </li>
<li class="awr"> null means begin value &gt; end value</li>
</ul>
<table border="0" class="tdiff" summary="Interconnect Device Statistics. . Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs. null means begin value &gt; end value"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Interface">Interface</th>
<th class="awrbg" colspan=" 6" id="Sent">Sent</th>
<th class="awrbg" colspan=" 6" id="Received">Received</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="NAME">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="IPMask">IP Mask</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Carrier|Lost">Carrier Lost</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Frame|Errors">Frame Errors</th></tr>
<tr><td align="right" class='awrc'>1</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.5</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>18,145.88</td><td align="right" headers="Sent Packets" class='awrc'>12,947,339</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>17,507.15</td><td align="right" headers="Received Packets" class='awrc'>13,299,247</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>5,072.11</td><td align="right" headers="Sent Packets" class='awrnc'>8,194,675</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>4,558.49</td><td align="right" headers="Received Packets" class='awrnc'>9,861,077</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.22.248</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.11</td><td align="right" headers="Sent Packets" class='awrnc'>539</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.08</td><td align="right" headers="Received Packets" class='awrnc'>481</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.21</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.11</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-storage</td><td headers="Interface IPAddress" class='awrc'>192.168.3.1</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>2.02</td><td align="right" headers="Sent Packets" class='awrc'>3,086</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>1.16</td><td align="right" headers="Received Packets" class='awrc'>3,125</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>lo</td><td headers="Interface IPAddress" class='awrnc'>127.0.0.1</td><td headers="Interface IPMask" class='awrnc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>119.65</td><td align="right" headers="Sent Packets" class='awrnc'>2,350,202</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>119.65</td><td align="right" headers="Received Packets" class='awrnc'>2,350,202</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'>2</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.4</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>17,717.19</td><td align="right" headers="Sent Packets" class='awrc'>13,687,508</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>17,980.51</td><td align="right" headers="Received Packets" class='awrc'>12,674,838</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>4,548.29</td><td align="right" headers="Sent Packets" class='awrnc'>9,129,422</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>5,096.49</td><td align="right" headers="Received Packets" class='awrnc'>9,270,565</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.31.173</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.08</td><td align="right" headers="Sent Packets" class='awrnc'>481</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.11</td><td align="right" headers="Received Packets" class='awrnc'>539</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.12</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.23</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:3</td><td headers="Interface IPAddress" class='awrc'>192.168.1.22</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-storage</td><td headers="Interface IPAddress" class='awrnc'>192.168.3.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>2.02</td><td align="right" headers="Sent Packets" class='awrnc'>3,048</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>1.16</td><td align="right" headers="Received Packets" class='awrnc'>3,110</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>lo</td><td headers="Interface IPAddress" class='awrc'>127.0.0.1</td><td headers="Interface IPMask" class='awrc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrclb'>129.53</td><td align="right" headers="Sent Packets" class='awrc'>2,132,740</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>129.53</td><td align="right" headers="Received Packets" class='awrc'>2,132,740</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnct'>Sum</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclbt'>45,736.88</td><td align="right" class='awrnct'>48,449,040</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnclbt'>45,394.34</td><td align="right" class='awrnct'>49,595,924</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrncrbt'>0</td></tr>
<tr><td align="right" class='awrc'>Avg</td><td class='awrclb'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td align="right" class='awrclb'>2,690.40</td><td align="right" class='awrc'>2,849,944</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>2,670.26</td><td align="right" class='awrc'>2,917,407</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'>Std</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclb'>5,950.66</td><td align="right" class='awrnc'>4,857,182</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>5,891.57</td><td align="right" class='awrnc'>4,912,269</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrncrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12044"></a>
<h3 class="awr">Interconnect Device Statistics (per Second)</h3>
<ul>
<li class="awr"> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs </li>
<li class="awr"> Blank	means begin value &gt; end value</li>
</ul>
<table border="0" class="tdiff" summary="Interconnect Device Statistics (per Second). . Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs. Blank means begin value &gt; end value"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Interface">Interface</th>
<th class="awrbg" colspan=" 6" id="Sent">Sent</th>
<th class="awrbg" colspan=" 6" id="Received">Received</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="NAME">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="IPMask">IP Mask</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Carrier|Lost">Carrier Lost</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Frame|Errors">Frame Errors</th></tr>
<tr><td align="right" class='awrc'>1</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.5</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>29.24</td><td align="right" headers="Sent Packets" class='awrc'>20,863</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>28.21</td><td align="right" headers="Received Packets" class='awrc'>21,430</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>8.17</td><td align="right" headers="Sent Packets" class='awrnc'>13,205</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>7.35</td><td align="right" headers="Received Packets" class='awrnc'>15,890</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.22.248</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>1</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>1</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.21</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.11</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-storage</td><td headers="Interface IPAddress" class='awrc'>192.168.3.1</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>5</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>5</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>lo</td><td headers="Interface IPAddress" class='awrnc'>127.0.0.1</td><td headers="Interface IPMask" class='awrnc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.19</td><td align="right" headers="Sent Packets" class='awrnc'>3,787</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.19</td><td align="right" headers="Received Packets" class='awrnc'>3,787</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'>2</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.4</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>28.54</td><td align="right" headers="Sent Packets" class='awrc'>22,047</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>28.96</td><td align="right" headers="Received Packets" class='awrc'>20,416</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>7.33</td><td align="right" headers="Sent Packets" class='awrnc'>14,705</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>8.21</td><td align="right" headers="Received Packets" class='awrnc'>14,933</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.31.173</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>1</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>1</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.12</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.23</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:3</td><td headers="Interface IPAddress" class='awrc'>192.168.1.22</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-storage</td><td headers="Interface IPAddress" class='awrnc'>192.168.3.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>5</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>5</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>lo</td><td headers="Interface IPAddress" class='awrc'>127.0.0.1</td><td headers="Interface IPMask" class='awrc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.21</td><td align="right" headers="Sent Packets" class='awrc'>3,435</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.21</td><td align="right" headers="Received Packets" class='awrc'>3,435</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnct'>Sum</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclbt'>73.69</td><td align="right" class='awrnct'>78,054</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnclbt'>73.13</td><td align="right" class='awrnct'>79,903</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrncrbt'>0</td></tr>
<tr><td align="right" class='awrc'>Avg</td><td class='awrclb'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td align="right" class='awrclb'>4.33</td><td align="right" class='awrc'>4,591</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>4.30</td><td align="right" class='awrc'>4,700</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'>Std</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclb'>9.59</td><td align="right" class='awrnc'>7,825</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>9.49</td><td align="right" class='awrnc'>7,914</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrncrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12078"></a>
<h3 class="awr">Dynamic Remastering Statistics</h3>
<ul>
<li class="awr"> Affinity Objects - Affinity objects remastered at the begin/end snapshot  </li>
<li class="awr"> Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot</li>
</ul>
<table border="0" class="tdiff" summary="Dynamic Remastering Statistics. . Affinity Objects - Affinity objects remastered at the begin/end snapshot . Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CountsperOps">Counts per Ops</th>
<th class="awrbg" colspan=" 6" id="TimeperOps(seconds)">Time per Ops (seconds)</th>
<th class="awrbg" colspan=" 2" id="AffinityObjects">Affinity Objects</th>
<th class="awrbg" colspan=" 3" id="ReadMostlyObjects">Read Mostly Objects</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Remaster Ops</th><th class="awrbg" scope="col" id="Remastered|Objects">Remastered Objects</th><th class="awrbg" scope="col" id="ReplayLocks|Received">Replay Locks Received</th><th class="awrbg" scope="col" id="ReplayLocks|Sent">Replay Locks Sent</th><th class="awrbg" scope="col" id="Resources|Cleaned">Resources Cleaned</th><th class="awrbg" scope="col" id="Remaster">Remaster</th><th class="awrbg" scope="col" id="Freeze">Freeze</th><th class="awrbg" scope="col" id="Cleanup">Cleanup</th><th class="awrbg" scope="col" id="Replay">Replay</th><th class="awrbg" scope="col" id="Fixwrite">Fixwrite</th><th class="awrbg" scope="col" id="Sync">Sync</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="Begin|(persistent)">Begin (persistent)</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" headers="CountsperOps Remastered|Objects" class='awrclb'>&#160;</td><td align="right" headers="CountsperOps ReplayLocks|Received" class='awrc'>&#160;</td><td align="right" headers="CountsperOps ReplayLocks|Sent" class='awrc'>&#160;</td><td align="right" headers="CountsperOps Resources|Cleaned" class='awrc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Remaster" class='awrclb'>&#160;</td><td align="right" headers="TimeperOps(seconds) Freeze" class='awrc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Cleanup" class='awrc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Replay" class='awrc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Fixwrite" class='awrc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Sync" class='awrc'>&#160;</td><td align="right" headers="AffinityObjects Begin" class='awrclb'>4</td><td align="right" headers="AffinityObjects End" class='awrc'>4</td><td align="right" headers="ReadMostlyObjects Begin" class='awrclb'>5</td><td align="right" headers="ReadMostlyObjects Begin|(persistent)" class='awrc'>4</td><td align="right" headers="ReadMostlyObjects End" class='awrcrb'>5</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" headers="CountsperOps Remastered|Objects" class='awrnclb'>&#160;</td><td align="right" headers="CountsperOps ReplayLocks|Received" class='awrnc'>&#160;</td><td align="right" headers="CountsperOps ReplayLocks|Sent" class='awrnc'>&#160;</td><td align="right" headers="CountsperOps Resources|Cleaned" class='awrnc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Remaster" class='awrnclb'>&#160;</td><td align="right" headers="TimeperOps(seconds) Freeze" class='awrnc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Cleanup" class='awrnc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Replay" class='awrnc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Fixwrite" class='awrnc'>&#160;</td><td align="right" headers="TimeperOps(seconds) Sync" class='awrnc'>&#160;</td><td align="right" headers="AffinityObjects Begin" class='awrnclb'>13</td><td align="right" headers="AffinityObjects End" class='awrnc'>13</td><td align="right" headers="ReadMostlyObjects Begin" class='awrnclb'>5</td><td align="right" headers="ReadMostlyObjects Begin|(persistent)" class='awrnc'>4</td><td align="right" headers="ReadMostlyObjects End" class='awrncrb'>5</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>0</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>9</td><td align="right" class='awrct'>9</td><td align="right" class='awrclbt'>5</td><td align="right" class='awrct'>4</td><td align="right" class='awrcrbt'>5</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Max</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>13</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnclb'>5</td><td align="right" class='awrnc'>4</td><td align="right" class='awrncrb'>5</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="622"></a>
<h2 class="awr">
SQL Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12060">SQL ordered by Elapsed Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12061">SQL ordered by CPU Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12066">SQL ordered by User I/O Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12062">SQL ordered by Gets (Global)</a></li>
<li class="awr"><a class="awr" href="#12063">SQL ordered by Reads (Global)</a></li>
<li class="awr"><a class="awr" href="#12081">SQL ordered by UnOptimized Read Requests (Global)</a></li>
<li class="awr"><a class="awr" href="#12065">SQL ordered by Executions (Global)</a></li>
<li class="awr"><a class="awr" href="#12064">SQL ordered by Cluster Wait Time (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12060"></a>
<h3 class="awr">SQL ordered by Elapsed Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   97.6% of Total DB Time (s):		72,706</li>
<li class="awr">Captured PL/SQL account for   67.1% of Total DB Time (s):	   72,706</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Elapsed Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>46,429.11</td><td align="right" headers="Total CPU(s)" class='awrc'>2,899.61</td><td align="right" headers="Total IOWait(s)" class='awrc'>31,796.08</td><td align="right" headers="Total Gets" class='awrc'>18,825,553</td><td align="right" headers="Total Reads" class='awrc'>14,797,696</td><td align="right" headers="Total Rows" class='awrc'>1,342,383</td><td align="right" headers="Total Cluster(s)" class='awrc'>13,536.56</td><td align="right" headers="Total Execs" class='awrc'>1,342,302</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.03</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.02</td><td align="right" headers="PerExecution Gets" class='awrc'>14.02</td><td align="right" headers="PerExecution Reads" class='awrc'>11.02</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>63.86</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>65.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.64</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>80.63</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>83.89</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>67.63</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>83.11</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>24,488.09</td><td align="right" headers="Total CPU(s)" class='awrnc'>1,156.99</td><td align="right" headers="Total IOWait(s)" class='awrnc'>17,012.22</td><td align="right" headers="Total Gets" class='awrnc'>3,823,710</td><td align="right" headers="Total Reads" class='awrnc'>2,609,144</td><td align="right" headers="Total Rows" class='awrnc'>2,606,120</td><td align="right" headers="Total Cluster(s)" class='awrnc'>6,140.73</td><td align="right" headers="Total Execs" class='awrnc'>236,920</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.10</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.07</td><td align="right" headers="PerExecution Gets" class='awrnc'>16.14</td><td align="right" headers="PerExecution Reads" class='awrnc'>11.01</td><td align="right" headers="PerExecution Rows" class='awrnc'>11.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.03</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>33.68</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>26.01</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>16.38</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>14.79</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>30.68</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>14.67</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#f5bd91b8pq2rp">f5bd91b8pq2rp</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>567.18</td><td align="right" headers="Total CPU(s)" class='awrc'>42.26</td><td align="right" headers="Total IOWait(s)" class='awrc'>411.42</td><td align="right" headers="Total Gets" class='awrc'>172,564</td><td align="right" headers="Total Reads" class='awrc'>133,157</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>125.17</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>567.18</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>42.26</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>411.42</td><td align="right" headers="PerExecution Gets" class='awrc'>172,564.00</td><td align="right" headers="PerExecution Reads" class='awrc'>133,157.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>125.17</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.95</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.74</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.63</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#dn5ztpzaw0pcu">dn5ztpzaw0pcu</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>566.44</td><td align="right" headers="Total CPU(s)" class='awrnc'>41.93</td><td align="right" headers="Total IOWait(s)" class='awrnc'>404.99</td><td align="right" headers="Total Gets" class='awrnc'>178,241</td><td align="right" headers="Total Reads" class='awrnc'>133,909</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>132.56</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>566.44</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>41.93</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>404.99</td><td align="right" headers="PerExecution Gets" class='awrnc'>178,241.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>133,909.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>132.56</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.94</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.66</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#a7ng116w7tgbq">a7ng116w7tgbq</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>566.03</td><td align="right" headers="Total CPU(s)" class='awrc'>41.14</td><td align="right" headers="Total IOWait(s)" class='awrc'>406.48</td><td align="right" headers="Total Gets" class='awrc'>171,542</td><td align="right" headers="Total Reads" class='awrc'>131,932</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>125.47</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>566.03</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>41.14</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>406.48</td><td align="right" headers="PerExecution Gets" class='awrc'>171,542.00</td><td align="right" headers="PerExecution Reads" class='awrc'>131,932.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>125.47</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.92</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.73</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.63</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#9uvmr65d5xzyk">9uvmr65d5xzyk</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>565.81</td><td align="right" headers="Total CPU(s)" class='awrnc'>42.08</td><td align="right" headers="Total IOWait(s)" class='awrnc'>401.37</td><td align="right" headers="Total Gets" class='awrnc'>176,807</td><td align="right" headers="Total Reads" class='awrnc'>133,255</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>134.85</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>565.81</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>42.08</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>401.37</td><td align="right" headers="PerExecution Gets" class='awrnc'>176,807.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>133,255.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>134.85</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.95</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.67</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#dsjqgbvpsxkp0">dsjqgbvpsxkp0</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>565.52</td><td align="right" headers="Total CPU(s)" class='awrc'>40.75</td><td align="right" headers="Total IOWait(s)" class='awrc'>408.27</td><td align="right" headers="Total Gets" class='awrc'>172,407</td><td align="right" headers="Total Reads" class='awrc'>133,177</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>124.66</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>565.52</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>40.75</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>408.27</td><td align="right" headers="PerExecution Gets" class='awrc'>172,407.00</td><td align="right" headers="PerExecution Reads" class='awrc'>133,177.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>124.66</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.92</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.74</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.62</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#0bwq9jnxx14ju">0bwq9jnxx14ju</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>565.51</td><td align="right" headers="Total CPU(s)" class='awrnc'>41.27</td><td align="right" headers="Total IOWait(s)" class='awrnc'>412.79</td><td align="right" headers="Total Gets" class='awrnc'>176,722</td><td align="right" headers="Total Reads" class='awrnc'>135,921</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>121.49</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>565.51</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>41.27</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>412.79</td><td align="right" headers="PerExecution Gets" class='awrnc'>176,722.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>135,921.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>121.49</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.93</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.61</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#6a6qafya34rwa">6a6qafya34rwa</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>565.50</td><td align="right" headers="Total CPU(s)" class='awrc'>41.44</td><td align="right" headers="Total IOWait(s)" class='awrc'>394.21</td><td align="right" headers="Total Gets" class='awrc'>165,454</td><td align="right" headers="Total Reads" class='awrc'>127,356</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>137.82</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>565.50</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>41.44</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>394.21</td><td align="right" headers="PerExecution Gets" class='awrc'>165,454.00</td><td align="right" headers="PerExecution Reads" class='awrc'>127,356.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>137.82</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.93</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.71</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.72</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.69</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bgxwnc1uyqzrn">bgxwnc1uyqzrn</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>565.49</td><td align="right" headers="Total CPU(s)" class='awrnc'>41.37</td><td align="right" headers="Total IOWait(s)" class='awrnc'>396.10</td><td align="right" headers="Total Gets" class='awrnc'>172,798</td><td align="right" headers="Total Reads" class='awrnc'>130,696</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>138.79</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>565.49</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>41.37</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>396.10</td><td align="right" headers="PerExecution Gets" class='awrnc'>172,798.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>130,696.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>138.79</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.93</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.74</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.74</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.69</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12061"></a>
<h3 class="awr">SQL ordered by CPU Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   91.5% of Total CPU Time (s): 	  4,448</li>
<li class="awr">Captured PL/SQL account for   67.3% of Total CPU Time (s):	     4,448</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by CPU Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>2,899.61</td><td align="right" headers="Total Elapsed(s)" class='awrc'>46,429.11</td><td align="right" headers="Total IOWait(s)" class='awrc'>31,796.08</td><td align="right" headers="Total Gets" class='awrc'>18,825,553</td><td align="right" headers="Total Reads" class='awrc'>14,797,696</td><td align="right" headers="Total Rows" class='awrc'>1,342,383</td><td align="right" headers="Total Cluster(s)" class='awrc'>13,536.56</td><td align="right" headers="Total Execs" class='awrc'>1,342,302</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.03</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.02</td><td align="right" headers="PerExecution Gets" class='awrc'>14.02</td><td align="right" headers="PerExecution Reads" class='awrc'>11.02</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>65.18</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>63.86</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>64.06</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>80.63</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>83.89</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>67.63</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>83.11</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>1,156.99</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>24,488.09</td><td align="right" headers="Total IOWait(s)" class='awrnc'>17,012.22</td><td align="right" headers="Total Gets" class='awrnc'>3,823,710</td><td align="right" headers="Total Reads" class='awrnc'>2,609,144</td><td align="right" headers="Total Rows" class='awrnc'>2,606,120</td><td align="right" headers="Total Cluster(s)" class='awrnc'>6,140.73</td><td align="right" headers="Total Execs" class='awrnc'>236,920</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.10</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.07</td><td align="right" headers="PerExecution Gets" class='awrnc'>16.14</td><td align="right" headers="PerExecution Reads" class='awrnc'>11.01</td><td align="right" headers="PerExecution Rows" class='awrnc'>11.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.03</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>26.01</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>33.68</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>34.27</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>16.38</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>14.79</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>30.68</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>14.67</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#5krxnvhvxxszv">5krxnvhvxxszv</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>43.34</td><td align="right" headers="Total Elapsed(s)" class='awrc'>563.76</td><td align="right" headers="Total IOWait(s)" class='awrc'>360.14</td><td align="right" headers="Total Gets" class='awrc'>146,485</td><td align="right" headers="Total Reads" class='awrc'>111,522</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>170.00</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>43.34</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>563.76</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>360.14</td><td align="right" headers="PerExecution Gets" class='awrc'>146,485.00</td><td align="right" headers="PerExecution Reads" class='awrc'>111,522.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>170.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>0.97</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.78</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.73</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.63</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.63</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.85</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#bsr5npqqpj681">bsr5npqqpj681</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>42.89</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>562.81</td><td align="right" headers="Total IOWait(s)" class='awrnc'>404.02</td><td align="right" headers="Total Gets" class='awrnc'>177,672</td><td align="right" headers="Total Reads" class='awrnc'>133,970</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>122.46</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>42.89</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>562.81</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>404.02</td><td align="right" headers="PerExecution Gets" class='awrnc'>177,672.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>133,970.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>122.46</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>0.96</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.81</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.61</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#7rfsk00ahr6jt">7rfsk00ahr6jt</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>42.77</td><td align="right" headers="Total Elapsed(s)" class='awrc'>564.41</td><td align="right" headers="Total IOWait(s)" class='awrc'>410.80</td><td align="right" headers="Total Gets" class='awrc'>178,548</td><td align="right" headers="Total Reads" class='awrc'>135,362</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>123.47</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>42.77</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>564.41</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>410.80</td><td align="right" headers="PerExecution Gets" class='awrc'>178,548.00</td><td align="right" headers="PerExecution Reads" class='awrc'>135,362.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>123.47</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>0.96</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.78</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.83</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.62</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#fbdrcrjuy8a1m">fbdrcrjuy8a1m</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>42.61</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>562.82</td><td align="right" headers="Total IOWait(s)" class='awrnc'>408.59</td><td align="right" headers="Total Gets" class='awrnc'>170,086</td><td align="right" headers="Total Reads" class='awrnc'>131,302</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>122.17</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>42.61</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>562.82</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>408.59</td><td align="right" headers="PerExecution Gets" class='awrnc'>170,086.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>131,302.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>122.17</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>0.96</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.82</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.74</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.61</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#9pyjpd8qx4zrm">9pyjpd8qx4zrm</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>42.58</td><td align="right" headers="Total Elapsed(s)" class='awrc'>563.37</td><td align="right" headers="Total IOWait(s)" class='awrc'>398.40</td><td align="right" headers="Total Gets" class='awrc'>176,759</td><td align="right" headers="Total Reads" class='awrc'>132,779</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>128.12</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>42.58</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>563.37</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>398.40</td><td align="right" headers="PerExecution Gets" class='awrc'>176,759.00</td><td align="right" headers="PerExecution Reads" class='awrc'>132,779.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>128.12</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>0.96</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.80</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.75</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.64</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3d08mtaxbsq1u">3d08mtaxbsq1u</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>42.56</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>563.33</td><td align="right" headers="Total IOWait(s)" class='awrnc'>408.16</td><td align="right" headers="Total Gets" class='awrnc'>176,996</td><td align="right" headers="Total Reads" class='awrnc'>134,578</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>122.31</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>42.56</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>563.33</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>408.16</td><td align="right" headers="PerExecution Gets" class='awrnc'>176,996.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>134,578.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>122.31</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>0.96</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.82</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.61</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#9yraxx50ufhwk">9yraxx50ufhwk</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>42.50</td><td align="right" headers="Total Elapsed(s)" class='awrc'>563.44</td><td align="right" headers="Total IOWait(s)" class='awrc'>361.22</td><td align="right" headers="Total Gets" class='awrc'>140,279</td><td align="right" headers="Total Reads" class='awrc'>108,723</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>172.97</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>42.50</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>563.44</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>361.22</td><td align="right" headers="PerExecution Gets" class='awrc'>140,279.00</td><td align="right" headers="PerExecution Reads" class='awrc'>108,723.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>172.97</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>0.96</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.73</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.60</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.62</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.86</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3u87drbcgrv1a">3u87drbcgrv1a</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>42.49</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>564.07</td><td align="right" headers="Total IOWait(s)" class='awrnc'>404.03</td><td align="right" headers="Total Gets" class='awrnc'>174,138</td><td align="right" headers="Total Reads" class='awrnc'>132,165</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>129.78</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>42.49</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>564.07</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>404.03</td><td align="right" headers="PerExecution Gets" class='awrnc'>174,138.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>132,165.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>129.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>0.96</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.78</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.81</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.65</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12066"></a>
<h3 class="awr">SQL ordered by User I/O Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   98.3% of Total User I/O Wait Time (s):	   49,638</li>
<li class="awr">Captured PL/SQL account for   67.8% of Total User I/O Wait Time (s):	      49,638</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by User I/O Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>31,796.08</td><td align="right" headers="Total Elapsed(s)" class='awrc'>46,429.11</td><td align="right" headers="Total CPU(s)" class='awrc'>2,899.61</td><td align="right" headers="Total Gets" class='awrc'>18,825,553</td><td align="right" headers="Total Reads" class='awrc'>14,797,696</td><td align="right" headers="Total Rows" class='awrc'>1,342,383</td><td align="right" headers="Total Cluster(s)" class='awrc'>13,536.56</td><td align="right" headers="Total Execs" class='awrc'>1,342,302</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>0.02</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.03</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>14.02</td><td align="right" headers="PerExecution Reads" class='awrc'>11.02</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>64.06</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>63.86</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>65.18</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>80.63</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>83.89</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>67.63</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>83.11</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>17,012.22</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>24,488.09</td><td align="right" headers="Total CPU(s)" class='awrnc'>1,156.99</td><td align="right" headers="Total Gets" class='awrnc'>3,823,710</td><td align="right" headers="Total Reads" class='awrnc'>2,609,144</td><td align="right" headers="Total Rows" class='awrnc'>2,606,120</td><td align="right" headers="Total Cluster(s)" class='awrnc'>6,140.73</td><td align="right" headers="Total Execs" class='awrnc'>236,920</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>0.07</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.10</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>16.14</td><td align="right" headers="PerExecution Reads" class='awrnc'>11.01</td><td align="right" headers="PerExecution Rows" class='awrnc'>11.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.03</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>34.27</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>33.68</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>26.01</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>16.38</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>14.79</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>30.68</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>14.67</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#7rfsk00ahr6jt">7rfsk00ahr6jt</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>410.80</td><td align="right" headers="Total Elapsed(s)" class='awrc'>564.41</td><td align="right" headers="Total CPU(s)" class='awrc'>42.77</td><td align="right" headers="Total Gets" class='awrc'>178,548</td><td align="right" headers="Total Reads" class='awrc'>135,362</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>123.47</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>410.80</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>564.41</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>42.77</td><td align="right" headers="PerExecution Gets" class='awrc'>178,548.00</td><td align="right" headers="PerExecution Reads" class='awrc'>135,362.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>123.47</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.83</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.96</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.62</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#fbdrcrjuy8a1m">fbdrcrjuy8a1m</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>408.59</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>562.82</td><td align="right" headers="Total CPU(s)" class='awrnc'>42.61</td><td align="right" headers="Total Gets" class='awrnc'>170,086</td><td align="right" headers="Total Reads" class='awrnc'>131,302</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>122.17</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>408.59</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>562.82</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>42.61</td><td align="right" headers="PerExecution Gets" class='awrnc'>170,086.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>131,302.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>122.17</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.82</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.96</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.73</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.74</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.61</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#3d08mtaxbsq1u">3d08mtaxbsq1u</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>408.16</td><td align="right" headers="Total Elapsed(s)" class='awrc'>563.33</td><td align="right" headers="Total CPU(s)" class='awrc'>42.56</td><td align="right" headers="Total Gets" class='awrc'>176,996</td><td align="right" headers="Total Reads" class='awrc'>134,578</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>122.31</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>408.16</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>563.33</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>42.56</td><td align="right" headers="PerExecution Gets" class='awrc'>176,996.00</td><td align="right" headers="PerExecution Reads" class='awrc'>134,578.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>122.31</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.82</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.96</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.61</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3u87drbcgrv1a">3u87drbcgrv1a</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>404.03</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>564.07</td><td align="right" headers="Total CPU(s)" class='awrnc'>42.49</td><td align="right" headers="Total Gets" class='awrnc'>174,138</td><td align="right" headers="Total Reads" class='awrnc'>132,165</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>129.78</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>404.03</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>564.07</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>42.49</td><td align="right" headers="PerExecution Gets" class='awrnc'>174,138.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>132,165.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>129.78</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.81</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.96</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.65</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bsr5npqqpj681">bsr5npqqpj681</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>404.02</td><td align="right" headers="Total Elapsed(s)" class='awrc'>562.81</td><td align="right" headers="Total CPU(s)" class='awrc'>42.89</td><td align="right" headers="Total Gets" class='awrc'>177,672</td><td align="right" headers="Total Reads" class='awrc'>133,970</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>122.46</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>404.02</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>562.81</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>42.89</td><td align="right" headers="PerExecution Gets" class='awrc'>177,672.00</td><td align="right" headers="PerExecution Reads" class='awrc'>133,970.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>122.46</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.81</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.96</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.76</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.61</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#9pyjpd8qx4zrm">9pyjpd8qx4zrm</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>398.40</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>563.37</td><td align="right" headers="Total CPU(s)" class='awrnc'>42.58</td><td align="right" headers="Total Gets" class='awrnc'>176,759</td><td align="right" headers="Total Reads" class='awrnc'>132,779</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>128.12</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>398.40</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>563.37</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>42.58</td><td align="right" headers="PerExecution Gets" class='awrnc'>176,759.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>132,779.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>128.12</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.80</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.96</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.76</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.75</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.64</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#9yraxx50ufhwk">9yraxx50ufhwk</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>361.22</td><td align="right" headers="Total Elapsed(s)" class='awrc'>563.44</td><td align="right" headers="Total CPU(s)" class='awrc'>42.50</td><td align="right" headers="Total Gets" class='awrc'>140,279</td><td align="right" headers="Total Reads" class='awrc'>108,723</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>172.97</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>361.22</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>563.44</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>42.50</td><td align="right" headers="PerExecution Gets" class='awrc'>140,279.00</td><td align="right" headers="PerExecution Reads" class='awrc'>108,723.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>172.97</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.73</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.96</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.60</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.62</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.86</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#5krxnvhvxxszv">5krxnvhvxxszv</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>360.14</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>563.76</td><td align="right" headers="Total CPU(s)" class='awrnc'>43.34</td><td align="right" headers="Total Gets" class='awrnc'>146,485</td><td align="right" headers="Total Reads" class='awrnc'>111,522</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>170.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>360.14</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>563.76</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>43.34</td><td align="right" headers="PerExecution Gets" class='awrnc'>146,485.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>111,522.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>170.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.73</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.78</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.97</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.63</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.63</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.85</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12062"></a>
<h3 class="awr">SQL ordered by Gets (Global)</h3>
<ul>
<li class="awr">Total Buffer Gets:	23,348,701</li>
<li class="awr">Captured SQL account for   97.3% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Gets (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Gets" class='awrclb'>18,825,553</td><td align="right" headers="Total Reads" class='awrc'>14,797,696</td><td align="right" headers="Total Elapsed(s)" class='awrc'>46,429.11</td><td align="right" headers="Total CPU(s)" class='awrc'>2,899.61</td><td align="right" headers="Total IOWait(s)" class='awrc'>31,796.08</td><td align="right" headers="Total Rows" class='awrc'>1,342,383</td><td align="right" headers="Total Cluster(s)" class='awrc'>13,536.56</td><td align="right" headers="Total Execs" class='awrc'>1,342,302</td><td align="right" headers="PerExecution Gets" class='awrclb'>14.02</td><td align="right" headers="PerExecution Reads" class='awrc'>11.02</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.03</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.02</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>80.63</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>83.89</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>63.86</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>65.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>64.06</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>67.63</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>83.11</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Gets" class='awrnclb'>3,823,710</td><td align="right" headers="Total Reads" class='awrnc'>2,609,144</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>24,488.09</td><td align="right" headers="Total CPU(s)" class='awrnc'>1,156.99</td><td align="right" headers="Total IOWait(s)" class='awrnc'>17,012.22</td><td align="right" headers="Total Rows" class='awrnc'>2,606,120</td><td align="right" headers="Total Cluster(s)" class='awrnc'>6,140.73</td><td align="right" headers="Total Execs" class='awrnc'>236,920</td><td align="right" headers="PerExecution Gets" class='awrnclb'>16.14</td><td align="right" headers="PerExecution Reads" class='awrnc'>11.01</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.10</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.07</td><td align="right" headers="PerExecution Rows" class='awrnc'>11.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.03</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>16.38</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>14.79</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>33.68</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>26.01</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>34.27</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>30.68</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>14.67</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#b8rb69y5nvtgv">b8rb69y5nvtgv</a></td><td align="right" headers="Total Gets" class='awrclb'>311,873</td><td align="right" headers="Total Reads" class='awrc'>232,995</td><td align="right" headers="Total Elapsed(s)" class='awrc'>559.84</td><td align="right" headers="Total CPU(s)" class='awrc'>28.77</td><td align="right" headers="Total IOWait(s)" class='awrc'>539.53</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.03</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Gets" class='awrclb'>311,873.00</td><td align="right" headers="PerExecution Reads" class='awrc'>232,995.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>559.84</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>28.77</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>539.53</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.03</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>1.34</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.32</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.65</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.09</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#4shu00r5t3255">4shu00r5t3255</a></td><td align="right" headers="Total Gets" class='awrnclb'>311,544</td><td align="right" headers="Total Reads" class='awrnc'>232,848</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>556.72</td><td align="right" headers="Total CPU(s)" class='awrnc'>28.94</td><td align="right" headers="Total IOWait(s)" class='awrnc'>535.48</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.13</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>311,544.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>232,848.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>556.72</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>28.94</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>535.48</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.13</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>1.33</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.32</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.65</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#1qgtsqmjvpysh">1qgtsqmjvpysh</a></td><td align="right" headers="Total Gets" class='awrclb'>309,545</td><td align="right" headers="Total Reads" class='awrc'>231,458</td><td align="right" headers="Total Elapsed(s)" class='awrc'>558.98</td><td align="right" headers="Total CPU(s)" class='awrc'>28.72</td><td align="right" headers="Total IOWait(s)" class='awrc'>537.00</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.10</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Gets" class='awrclb'>309,545.00</td><td align="right" headers="PerExecution Reads" class='awrc'>231,458.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>558.98</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>28.72</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>537.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.10</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>1.33</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.31</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.65</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#7auc6hxj3tazj">7auc6hxj3tazj</a></td><td align="right" headers="Total Gets" class='awrnclb'>308,503</td><td align="right" headers="Total Reads" class='awrnc'>230,598</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>558.08</td><td align="right" headers="Total CPU(s)" class='awrnc'>28.68</td><td align="right" headers="Total IOWait(s)" class='awrnc'>536.93</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.23</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>308,503.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>230,598.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>558.08</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>28.68</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>536.93</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>1.32</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.31</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.64</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#37t1xs69bxrq3">37t1xs69bxrq3</a></td><td align="right" headers="Total Gets" class='awrclb'>308,380</td><td align="right" headers="Total Reads" class='awrc'>231,057</td><td align="right" headers="Total Elapsed(s)" class='awrc'>557.04</td><td align="right" headers="Total CPU(s)" class='awrc'>28.84</td><td align="right" headers="Total IOWait(s)" class='awrc'>534.83</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>1.33</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Gets" class='awrclb'>308,380.00</td><td align="right" headers="PerExecution Reads" class='awrc'>231,057.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>557.04</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>28.84</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>534.83</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>1.33</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>1.32</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.31</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.65</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#cw2v1c2sykpss">cw2v1c2sykpss</a></td><td align="right" headers="Total Gets" class='awrnclb'>308,276</td><td align="right" headers="Total Reads" class='awrnc'>230,388</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>557.12</td><td align="right" headers="Total CPU(s)" class='awrnc'>28.69</td><td align="right" headers="Total IOWait(s)" class='awrnc'>533.90</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.04</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>308,276.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>230,388.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>557.12</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>28.69</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>533.90</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.04</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>1.32</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.31</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.65</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#faz197axzpffs">faz197axzpffs</a></td><td align="right" headers="Total Gets" class='awrclb'>305,389</td><td align="right" headers="Total Reads" class='awrc'>228,611</td><td align="right" headers="Total Elapsed(s)" class='awrc'>557.07</td><td align="right" headers="Total CPU(s)" class='awrc'>28.43</td><td align="right" headers="Total IOWait(s)" class='awrc'>533.09</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>1.31</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Gets" class='awrclb'>305,389.00</td><td align="right" headers="PerExecution Reads" class='awrc'>228,611.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>557.07</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>28.43</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>533.09</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>1.31</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>1.31</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.30</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.64</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.07</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3fbzaw0xdxbp9">3fbzaw0xdxbp9</a></td><td align="right" headers="Total Gets" class='awrnclb'>305,165</td><td align="right" headers="Total Reads" class='awrnc'>229,142</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>557.35</td><td align="right" headers="Total CPU(s)" class='awrnc'>28.68</td><td align="right" headers="Total IOWait(s)" class='awrnc'>532.58</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>3.34</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>305,165.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>229,142.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>557.35</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>28.68</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>532.58</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>3.34</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>1.31</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.30</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.64</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.07</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.02</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12063"></a>
<h3 class="awr">SQL ordered by Reads (Global)</h3>
<ul>
<li class="awr">Total Disk Reads:      17,639,015</li>
<li class="awr">Captured SQL account for   98.7% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Reads (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Reads" class='awrclb'>14,797,696</td><td align="right" headers="Total Gets" class='awrc'>18,825,553</td><td align="right" headers="Total Elapsed(s)" class='awrc'>46,429.11</td><td align="right" headers="Total CPU(s)" class='awrc'>2,899.61</td><td align="right" headers="Total IOWait(s)" class='awrc'>31,796.08</td><td align="right" headers="Total Rows" class='awrc'>1,342,383</td><td align="right" headers="Total Cluster(s)" class='awrc'>13,536.56</td><td align="right" headers="Total Execs" class='awrc'>1,342,302</td><td align="right" headers="PerExecution Reads" class='awrclb'>11.02</td><td align="right" headers="PerExecution Gets" class='awrc'>14.02</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.03</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.02</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>83.89</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>80.63</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>63.86</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>65.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>64.06</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>67.63</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>83.11</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Reads" class='awrnclb'>2,609,144</td><td align="right" headers="Total Gets" class='awrnc'>3,823,710</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>24,488.09</td><td align="right" headers="Total CPU(s)" class='awrnc'>1,156.99</td><td align="right" headers="Total IOWait(s)" class='awrnc'>17,012.22</td><td align="right" headers="Total Rows" class='awrnc'>2,606,120</td><td align="right" headers="Total Cluster(s)" class='awrnc'>6,140.73</td><td align="right" headers="Total Execs" class='awrnc'>236,920</td><td align="right" headers="PerExecution Reads" class='awrnclb'>11.01</td><td align="right" headers="PerExecution Gets" class='awrnc'>16.14</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.10</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.07</td><td align="right" headers="PerExecution Rows" class='awrnc'>11.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.03</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>14.79</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>16.38</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>33.68</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>26.01</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>34.27</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>30.68</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>14.67</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#b8rb69y5nvtgv">b8rb69y5nvtgv</a></td><td align="right" headers="Total Reads" class='awrclb'>232,995</td><td align="right" headers="Total Gets" class='awrc'>311,873</td><td align="right" headers="Total Elapsed(s)" class='awrc'>559.84</td><td align="right" headers="Total CPU(s)" class='awrc'>28.77</td><td align="right" headers="Total IOWait(s)" class='awrc'>539.53</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.03</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>232,995.00</td><td align="right" headers="PerExecution Gets" class='awrc'>311,873.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>559.84</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>28.77</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>539.53</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.03</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>1.32</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.34</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.65</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.09</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#4shu00r5t3255">4shu00r5t3255</a></td><td align="right" headers="Total Reads" class='awrnclb'>232,848</td><td align="right" headers="Total Gets" class='awrnc'>311,544</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>556.72</td><td align="right" headers="Total CPU(s)" class='awrnc'>28.94</td><td align="right" headers="Total IOWait(s)" class='awrnc'>535.48</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.13</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>232,848.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>311,544.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>556.72</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>28.94</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>535.48</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.13</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>1.32</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>1.33</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.65</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#1qgtsqmjvpysh">1qgtsqmjvpysh</a></td><td align="right" headers="Total Reads" class='awrclb'>231,458</td><td align="right" headers="Total Gets" class='awrc'>309,545</td><td align="right" headers="Total Elapsed(s)" class='awrc'>558.98</td><td align="right" headers="Total CPU(s)" class='awrc'>28.72</td><td align="right" headers="Total IOWait(s)" class='awrc'>537.00</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.10</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>231,458.00</td><td align="right" headers="PerExecution Gets" class='awrc'>309,545.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>558.98</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>28.72</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>537.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.10</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>1.31</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.33</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.65</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#37t1xs69bxrq3">37t1xs69bxrq3</a></td><td align="right" headers="Total Reads" class='awrnclb'>231,057</td><td align="right" headers="Total Gets" class='awrnc'>308,380</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>557.04</td><td align="right" headers="Total CPU(s)" class='awrnc'>28.84</td><td align="right" headers="Total IOWait(s)" class='awrnc'>534.83</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>1.33</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>231,057.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>308,380.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>557.04</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>28.84</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>534.83</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>1.33</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>1.31</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>1.32</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.65</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#7auc6hxj3tazj">7auc6hxj3tazj</a></td><td align="right" headers="Total Reads" class='awrclb'>230,598</td><td align="right" headers="Total Gets" class='awrc'>308,503</td><td align="right" headers="Total Elapsed(s)" class='awrc'>558.08</td><td align="right" headers="Total CPU(s)" class='awrc'>28.68</td><td align="right" headers="Total IOWait(s)" class='awrc'>536.93</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.23</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>230,598.00</td><td align="right" headers="PerExecution Gets" class='awrc'>308,503.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>558.08</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>28.68</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>536.93</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>1.31</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.32</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.64</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#cw2v1c2sykpss">cw2v1c2sykpss</a></td><td align="right" headers="Total Reads" class='awrnclb'>230,388</td><td align="right" headers="Total Gets" class='awrnc'>308,276</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>557.12</td><td align="right" headers="Total CPU(s)" class='awrnc'>28.69</td><td align="right" headers="Total IOWait(s)" class='awrnc'>533.90</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.04</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>230,388.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>308,276.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>557.12</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>28.69</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>533.90</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.04</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>1.31</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>1.32</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.65</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#3fbzaw0xdxbp9">3fbzaw0xdxbp9</a></td><td align="right" headers="Total Reads" class='awrclb'>229,142</td><td align="right" headers="Total Gets" class='awrc'>305,165</td><td align="right" headers="Total Elapsed(s)" class='awrc'>557.35</td><td align="right" headers="Total CPU(s)" class='awrc'>28.68</td><td align="right" headers="Total IOWait(s)" class='awrc'>532.58</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>3.34</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>229,142.00</td><td align="right" headers="PerExecution Gets" class='awrc'>305,165.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>557.35</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>28.68</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>532.58</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>3.34</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>1.30</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.31</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.64</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.07</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.02</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#faz197axzpffs">faz197axzpffs</a></td><td align="right" headers="Total Reads" class='awrnclb'>228,611</td><td align="right" headers="Total Gets" class='awrnc'>305,389</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>557.07</td><td align="right" headers="Total CPU(s)" class='awrnc'>28.43</td><td align="right" headers="Total IOWait(s)" class='awrnc'>533.09</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>1.31</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>228,611.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>305,389.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>557.07</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>28.43</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>533.09</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>1.31</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>1.30</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>1.31</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.64</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.07</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12081"></a>
<h3 class="awr">SQL ordered by UnOptimized Read Requests (Global)</h3>
<ul>
<li class="awr">Total Physical Read Requests:	   17,638,020</li>
<li class="awr">Captured SQL account for    0.7% of Total</li>
<li class="awr">Total UnOptimized Read Requests:      17,638,020</li>
<li class="awr">Captured SQL account for    0.7% of Total</li>
<li class="awr">Total Optimized Read Requests:		     1</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by UnOptimized Read Requests (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 9" id="Total">Total</th>
<th class="awrbg" colspan=" 8" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 8" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#b8rb69y5nvtgv">b8rb69y5nvtgv</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>232,995</td><td align="right" headers="Total Requests" class='awrc'>232,995</td><td align="right" headers="Total Reads" class='awrc'>232,995</td><td align="right" headers="Total Elapsed(s)" class='awrc'>559.84</td><td align="right" headers="Total CPU(s)" class='awrc'>28.77</td><td align="right" headers="Total IOWait(s)" class='awrc'>539.53</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.03</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>232,995.00</td><td align="right" headers="PerExecution Requests" class='awrc'>232,995.00</td><td align="right" headers="PerExecution Reads" class='awrc'>232,995.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>559.84</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>28.77</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>539.53</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.03</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>1.32</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>1.32</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.32</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.65</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.09</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#4shu00r5t3255">4shu00r5t3255</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>232,871</td><td align="right" headers="Total Requests" class='awrnc'>232,871</td><td align="right" headers="Total Reads" class='awrnc'>232,848</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>556.72</td><td align="right" headers="Total CPU(s)" class='awrnc'>28.94</td><td align="right" headers="Total IOWait(s)" class='awrnc'>535.48</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.13</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>232,871.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>232,871.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>232,848.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>556.72</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>28.94</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>535.48</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.13</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>1.32</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>1.32</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.32</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.65</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#1qgtsqmjvpysh">1qgtsqmjvpysh</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>231,458</td><td align="right" headers="Total Requests" class='awrc'>231,458</td><td align="right" headers="Total Reads" class='awrc'>231,458</td><td align="right" headers="Total Elapsed(s)" class='awrc'>558.98</td><td align="right" headers="Total CPU(s)" class='awrc'>28.72</td><td align="right" headers="Total IOWait(s)" class='awrc'>537.00</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.10</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>231,458.00</td><td align="right" headers="PerExecution Requests" class='awrc'>231,458.00</td><td align="right" headers="PerExecution Reads" class='awrc'>231,458.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>558.98</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>28.72</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>537.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.10</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>1.31</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>1.31</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.31</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.65</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#37t1xs69bxrq3">37t1xs69bxrq3</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>231,080</td><td align="right" headers="Total Requests" class='awrnc'>231,080</td><td align="right" headers="Total Reads" class='awrnc'>231,057</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>557.04</td><td align="right" headers="Total CPU(s)" class='awrnc'>28.84</td><td align="right" headers="Total IOWait(s)" class='awrnc'>534.83</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>1.33</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>231,080.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>231,080.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>231,057.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>557.04</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>28.84</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>534.83</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>1.33</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>1.31</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>1.31</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.31</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.65</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#7auc6hxj3tazj">7auc6hxj3tazj</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>230,598</td><td align="right" headers="Total Requests" class='awrc'>230,598</td><td align="right" headers="Total Reads" class='awrc'>230,598</td><td align="right" headers="Total Elapsed(s)" class='awrc'>558.08</td><td align="right" headers="Total CPU(s)" class='awrc'>28.68</td><td align="right" headers="Total IOWait(s)" class='awrc'>536.93</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.23</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>230,598.00</td><td align="right" headers="PerExecution Requests" class='awrc'>230,598.00</td><td align="right" headers="PerExecution Reads" class='awrc'>230,598.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>558.08</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>28.68</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>536.93</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>1.31</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>1.31</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.31</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.64</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#cw2v1c2sykpss">cw2v1c2sykpss</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>230,388</td><td align="right" headers="Total Requests" class='awrnc'>230,388</td><td align="right" headers="Total Reads" class='awrnc'>230,388</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>557.12</td><td align="right" headers="Total CPU(s)" class='awrnc'>28.69</td><td align="right" headers="Total IOWait(s)" class='awrnc'>533.90</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.04</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>230,388.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>230,388.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>230,388.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>557.12</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>28.69</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>533.90</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.04</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>1.31</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>1.31</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.31</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.65</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.08</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#3fbzaw0xdxbp9">3fbzaw0xdxbp9</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>229,142</td><td align="right" headers="Total Requests" class='awrc'>229,142</td><td align="right" headers="Total Reads" class='awrc'>229,142</td><td align="right" headers="Total Elapsed(s)" class='awrc'>557.35</td><td align="right" headers="Total CPU(s)" class='awrc'>28.68</td><td align="right" headers="Total IOWait(s)" class='awrc'>532.58</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>3.34</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>229,142.00</td><td align="right" headers="PerExecution Requests" class='awrc'>229,142.00</td><td align="right" headers="PerExecution Reads" class='awrc'>229,142.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>557.35</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>28.68</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>532.58</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>3.34</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>1.30</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>1.30</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.30</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.64</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.07</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.02</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#faz197axzpffs">faz197axzpffs</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>228,611</td><td align="right" headers="Total Requests" class='awrnc'>228,611</td><td align="right" headers="Total Reads" class='awrnc'>228,611</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>557.07</td><td align="right" headers="Total CPU(s)" class='awrnc'>28.43</td><td align="right" headers="Total IOWait(s)" class='awrnc'>533.09</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>1.31</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>228,611.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>228,611.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>228,611.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>557.07</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>28.43</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>533.09</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>1.31</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>1.30</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>1.30</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.30</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.64</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.07</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#4wcssh7tbjvs5">4wcssh7tbjvs5</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>228,200</td><td align="right" headers="Total Requests" class='awrc'>228,200</td><td align="right" headers="Total Reads" class='awrc'>228,200</td><td align="right" headers="Total Elapsed(s)" class='awrc'>557.90</td><td align="right" headers="Total CPU(s)" class='awrc'>28.35</td><td align="right" headers="Total IOWait(s)" class='awrc'>532.88</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>1.31</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>228,200.00</td><td align="right" headers="PerExecution Requests" class='awrc'>228,200.00</td><td align="right" headers="PerExecution Reads" class='awrc'>228,200.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>557.90</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>28.35</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>532.88</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>1.31</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>1.29</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>1.29</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.29</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.64</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>1.07</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#1naar97fs6vjd">1naar97fs6vjd</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>224,337</td><td align="right" headers="Total Requests" class='awrnc'>224,337</td><td align="right" headers="Total Reads" class='awrnc'>224,337</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>557.10</td><td align="right" headers="Total CPU(s)" class='awrnc'>28.20</td><td align="right" headers="Total IOWait(s)" class='awrnc'>522.69</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>12.80</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>224,337.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>224,337.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>224,337.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>557.10</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>28.20</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>522.69</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>12.80</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>1.27</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>1.27</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.27</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.63</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>1.05</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.06</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12065"></a>
<h3 class="awr">SQL ordered by Executions (Global)</h3>
<ul>
<li class="awr">Total Executions:	1,615,180</li>
<li class="awr">Captured SQL account for   98.3% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Executions (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Execs" class='awrclb'>1,342,302</td><td align="right" headers="Total Elapsed(s)" class='awrc'>46,429.11</td><td align="right" headers="Total CPU(s)" class='awrc'>2,899.61</td><td align="right" headers="Total IOWait(s)" class='awrc'>31,796.08</td><td align="right" headers="Total Gets" class='awrc'>18,825,553</td><td align="right" headers="Total Reads" class='awrc'>14,797,696</td><td align="right" headers="Total Rows" class='awrc'>1,342,383</td><td align="right" headers="Total Cluster(s)" class='awrc'>13,536.56</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.03</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.02</td><td align="right" headers="PerExecution Gets" class='awrc'>14.02</td><td align="right" headers="PerExecution Reads" class='awrc'>11.02</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>83.11</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>63.86</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>65.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>64.06</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>80.63</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>83.89</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>67.63</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Execs" class='awrnclb'>236,920</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>24,488.09</td><td align="right" headers="Total CPU(s)" class='awrnc'>1,156.99</td><td align="right" headers="Total IOWait(s)" class='awrnc'>17,012.22</td><td align="right" headers="Total Gets" class='awrnc'>3,823,710</td><td align="right" headers="Total Reads" class='awrnc'>2,609,144</td><td align="right" headers="Total Rows" class='awrnc'>2,606,120</td><td align="right" headers="Total Cluster(s)" class='awrnc'>6,140.73</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.10</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.07</td><td align="right" headers="PerExecution Gets" class='awrnc'>16.14</td><td align="right" headers="PerExecution Reads" class='awrnc'>11.01</td><td align="right" headers="PerExecution Rows" class='awrnc'>11.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.03</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>14.67</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>33.68</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>26.01</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>34.27</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>16.38</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>14.79</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>30.68</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#87gaftwrm2h68">87gaftwrm2h68</a></td><td align="right" headers="Total Execs" class='awrclb'>2,737</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.15</td><td align="right" headers="Total CPU(s)" class='awrc'>0.12</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.02</td><td align="right" headers="Total Gets" class='awrc'>5,556</td><td align="right" headers="Total Reads" class='awrc'>2</td><td align="right" headers="Total Rows" class='awrc'>82</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>2.03</td><td align="right" headers="PerExecution Reads" class='awrc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrc'>0.03</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.17</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.02</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>select o.owner#, o.name, o.nam...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#24djtk7r8fz33">24djtk7r8fz33</a></td><td align="right" headers="Total Execs" class='awrnclb'>2,078</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.18</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.18</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="Total Gets" class='awrnc'>6,282</td><td align="right" headers="Total Reads" class='awrnc'>0</td><td align="right" headers="Total Rows" class='awrnc'>2,033</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>3.02</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>0.98</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.13</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.03</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>update svcobj_access$ set acce...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#0sbbcuruzd66f">0sbbcuruzd66f</a></td><td align="right" headers="Total Execs" class='awrclb'>753</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.35</td><td align="right" headers="Total CPU(s)" class='awrc'>0.06</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.25</td><td align="right" headers="Total Gets" class='awrc'>2,223</td><td align="right" headers="Total Reads" class='awrc'>35</td><td align="right" headers="Total Rows" class='awrc'>701</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.06</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>2.95</td><td align="right" headers="PerExecution Reads" class='awrc'>0.05</td><td align="right" headers="PerExecution Rows" class='awrc'>0.93</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.05</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>select /*+ rule */ bucket_cnt,...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#86708bvah4akq">86708bvah4akq</a></td><td align="right" headers="Total Execs" class='awrnclb'>439</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.08</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.08</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="Total Gets" class='awrnc'>1,030</td><td align="right" headers="Total Reads" class='awrnc'>0</td><td align="right" headers="Total Rows" class='awrnc'>439</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>2.35</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.03</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>select name from undo$ where f...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#acmvv4fhdc9zh">acmvv4fhdc9zh</a></td><td align="right" headers="Total Execs" class='awrclb'>336</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.43</td><td align="right" headers="Total CPU(s)" class='awrc'>0.06</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.36</td><td align="right" headers="Total Gets" class='awrc'>1,210</td><td align="right" headers="Total Reads" class='awrc'>30</td><td align="right" headers="Total Rows" class='awrc'>202</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.03</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>3.60</td><td align="right" headers="PerExecution Reads" class='awrc'>0.09</td><td align="right" headers="PerExecution Rows" class='awrc'>0.60</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.02</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>select obj#, type#, ctime, mti...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#fn5s5p6hr6702">fn5s5p6hr6702</a></td><td align="right" headers="Total Execs" class='awrnclb'>187</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.23</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.05</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.16</td><td align="right" headers="Total Gets" class='awrnc'>1,279</td><td align="right" headers="Total Reads" class='awrnc'>21</td><td align="right" headers="Total Rows" class='awrnc'>187</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.04</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>6.84</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.11</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.01</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>INSERT INTO wri$_adv_message_g...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#f7xnvp44nukp7">f7xnvp44nukp7</a></td><td align="right" headers="Total Execs" class='awrclb'>185</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.52</td><td align="right" headers="Total CPU(s)" class='awrc'>0.07</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.04</td><td align="right" headers="Total Gets" class='awrc'>899</td><td align="right" headers="Total Reads" class='awrc'>11</td><td align="right" headers="Total Rows" class='awrc'>185</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.44</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>4.86</td><td align="right" headers="PerExecution Reads" class='awrc'>0.06</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.01</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>insert into wrm$_snapshot_deta...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#grwydz59pu6mc">grwydz59pu6mc</a></td><td align="right" headers="Total Execs" class='awrnclb'>173</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.21</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.03</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.15</td><td align="right" headers="Total Gets" class='awrnc'>363</td><td align="right" headers="Total Reads" class='awrnc'>17</td><td align="right" headers="Total Rows" class='awrnc'>173</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.04</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>2.10</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.10</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.01</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>select text from view$ where r...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12064"></a>
<h3 class="awr">SQL ordered by Cluster Wait Time (Global)</h3>
<ul>
<li class="awr">Total Cluster Wait Time (s):	      20,017</li>
<li class="awr">Captured SQL account for   98.3% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Cluster Wait Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>13,536.56</td><td align="right" headers="Total Elapsed(s)" class='awrc'>46,429.11</td><td align="right" headers="Total CPU(s)" class='awrc'>2,899.61</td><td align="right" headers="Total IOWait(s)" class='awrc'>31,796.08</td><td align="right" headers="Total Gets" class='awrc'>18,825,553</td><td align="right" headers="Total Reads" class='awrc'>14,797,696</td><td align="right" headers="Total Rows" class='awrc'>1,342,383</td><td align="right" headers="Total Execs" class='awrc'>1,342,302</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>0.01</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.03</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.02</td><td align="right" headers="PerExecution Gets" class='awrc'>14.02</td><td align="right" headers="PerExecution Reads" class='awrc'>11.02</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>67.63</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>63.86</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>65.18</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>64.06</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>80.63</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>83.89</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>83.11</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>6,140.73</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>24,488.09</td><td align="right" headers="Total CPU(s)" class='awrnc'>1,156.99</td><td align="right" headers="Total IOWait(s)" class='awrnc'>17,012.22</td><td align="right" headers="Total Gets" class='awrnc'>3,823,710</td><td align="right" headers="Total Reads" class='awrnc'>2,609,144</td><td align="right" headers="Total Rows" class='awrnc'>2,606,120</td><td align="right" headers="Total Execs" class='awrnc'>236,920</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>0.03</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.10</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.07</td><td align="right" headers="PerExecution Gets" class='awrnc'>16.14</td><td align="right" headers="PerExecution Reads" class='awrnc'>11.01</td><td align="right" headers="PerExecution Rows" class='awrnc'>11.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>30.68</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>33.68</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>26.01</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>34.27</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>16.38</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>14.79</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>14.67</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#3mpqwg0bhu96w">3mpqwg0bhu96w</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>242.44</td><td align="right" headers="Total Elapsed(s)" class='awrc'>558.29</td><td align="right" headers="Total CPU(s)" class='awrc'>25.31</td><td align="right" headers="Total IOWait(s)" class='awrc'>304.43</td><td align="right" headers="Total Gets" class='awrc'>146,460</td><td align="right" headers="Total Reads" class='awrc'>112,249</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>242.44</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>558.29</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>25.31</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>304.43</td><td align="right" headers="PerExecution Gets" class='awrc'>146,460.00</td><td align="right" headers="PerExecution Reads" class='awrc'>112,249.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>1.21</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.57</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.61</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.63</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.64</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#cdxa5963ny7rv">cdxa5963ny7rv</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>240.69</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>557.81</td><td align="right" headers="Total CPU(s)" class='awrnc'>25.72</td><td align="right" headers="Total IOWait(s)" class='awrnc'>302.35</td><td align="right" headers="Total Gets" class='awrnc'>138,150</td><td align="right" headers="Total Reads" class='awrnc'>107,746</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>240.69</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>557.81</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>25.72</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>302.35</td><td align="right" headers="PerExecution Gets" class='awrnc'>138,150.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>107,746.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>1.20</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.58</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.61</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.59</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.61</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#879r9dt0g5p5w">879r9dt0g5p5w</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>238.56</td><td align="right" headers="Total Elapsed(s)" class='awrc'>558.28</td><td align="right" headers="Total CPU(s)" class='awrc'>25.37</td><td align="right" headers="Total IOWait(s)" class='awrc'>300.62</td><td align="right" headers="Total Gets" class='awrc'>148,114</td><td align="right" headers="Total Reads" class='awrc'>112,497</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>238.56</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>558.28</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>25.37</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>300.62</td><td align="right" headers="PerExecution Gets" class='awrc'>148,114.00</td><td align="right" headers="PerExecution Reads" class='awrc'>112,497.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>1.19</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.57</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.61</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.63</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.64</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#7qs0jszf6qfw6">7qs0jszf6qfw6</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>238.52</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>558.09</td><td align="right" headers="Total CPU(s)" class='awrnc'>26.16</td><td align="right" headers="Total IOWait(s)" class='awrnc'>307.27</td><td align="right" headers="Total Gets" class='awrnc'>147,836</td><td align="right" headers="Total Reads" class='awrnc'>113,456</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>238.52</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>558.09</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>26.16</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>307.27</td><td align="right" headers="PerExecution Gets" class='awrnc'>147,836.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>113,456.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>1.19</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.59</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.62</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.63</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.64</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#gpa68g0juqfxf">gpa68g0juqfxf</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>237.03</td><td align="right" headers="Total Elapsed(s)" class='awrc'>558.30</td><td align="right" headers="Total CPU(s)" class='awrc'>26.47</td><td align="right" headers="Total IOWait(s)" class='awrc'>304.21</td><td align="right" headers="Total Gets" class='awrc'>145,440</td><td align="right" headers="Total Reads" class='awrc'>111,685</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>237.03</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>558.30</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>26.47</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>304.21</td><td align="right" headers="PerExecution Gets" class='awrc'>145,440.00</td><td align="right" headers="PerExecution Reads" class='awrc'>111,685.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>1.18</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.60</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.61</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.62</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.63</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#gbb8vrauphx5k">gbb8vrauphx5k</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>235.65</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>557.52</td><td align="right" headers="Total CPU(s)" class='awrnc'>26.95</td><td align="right" headers="Total IOWait(s)" class='awrnc'>308.22</td><td align="right" headers="Total Gets" class='awrnc'>153,287</td><td align="right" headers="Total Reads" class='awrnc'>115,860</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>235.65</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>557.52</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>26.95</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>308.22</td><td align="right" headers="PerExecution Gets" class='awrnc'>153,287.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>115,860.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>1.18</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.61</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.62</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.66</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.66</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#3q5pb4rskupya">3q5pb4rskupya</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>235.44</td><td align="right" headers="Total Elapsed(s)" class='awrc'>557.83</td><td align="right" headers="Total CPU(s)" class='awrc'>26.56</td><td align="right" headers="Total IOWait(s)" class='awrc'>306.41</td><td align="right" headers="Total Gets" class='awrc'>151,143</td><td align="right" headers="Total Reads" class='awrc'>114,471</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>235.44</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>557.83</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>26.56</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>306.41</td><td align="right" headers="PerExecution Gets" class='awrc'>151,143.00</td><td align="right" headers="PerExecution Reads" class='awrc'>114,471.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>1.18</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.60</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.62</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.65</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.65</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#0b4w7b9wmawht">0b4w7b9wmawht</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>230.67</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>558.03</td><td align="right" headers="Total CPU(s)" class='awrnc'>26.39</td><td align="right" headers="Total IOWait(s)" class='awrnc'>315.22</td><td align="right" headers="Total Gets" class='awrnc'>152,595</td><td align="right" headers="Total Reads" class='awrnc'>117,281</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>230.67</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>558.03</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>26.39</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>315.22</td><td align="right" headers="PerExecution Gets" class='awrnc'>152,595.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>117,281.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>1.15</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.77</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.59</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.64</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.65</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.66</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="623"></a>
<h2 class="awr">
Global Activity Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12071">System Statistics (Global)</a></li>
<li class="awr"><a class="awr" href="#12072">Global Messaging Statistics (Global)</a></li>
<li class="awr"><a class="awr" href="#12073">System Statistics (Absolute Values)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12071"></a>
<h3 class="awr">System Statistics (Global)</h3>
<ul>
<li class="awr"> per Second Average - average of per-instance per Second rates </li>
<li class="awr"> per Second Std Dev - standard deviation of per-instance per Second rates </li>
<li class="awr"> per Second Min     - minimum of per-instance per Second rates </li>
<li class="awr"> per Second Max     - maximum of per-instance per Second rates</li>
</ul>
<table border="0" class="tdiff" summary="System Statistics (Global). . per Second Average - average of per-instance per Second rates. per Second Std Dev - standard deviation of per-instance per Second rates. per Second Min - minimum of per-instance per Second rates. per Second Max - maximum of per-instance per Second rates"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="perSecond">per Second</th>
</tr><tr>
<th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th><th class="awrbg" scope="col" id="Average">Average</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th></tr>
<tr><td scope="row" class='awrc'>ASSM bg: segment fix monitor</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM cbk:blocks examined</td><td align="right" class='awrnc'>1,441</td><td align="right" class='awrnc'>2.32</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>1.16</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.11</td><td align="right" headers="perSecond Min" class='awrnc'>1.09</td><td align="right" headers="perSecond Max" class='awrncrb'>1.24</td></tr>
<tr><td scope="row" class='awrc'>ASSM cbk:blocks marked full</td><td align="right" class='awrc'>362</td><td align="right" class='awrc'>0.58</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.29</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.28</td><td align="right" headers="perSecond Max" class='awrcrb'>0.30</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L1 bitmaps examined</td><td align="right" class='awrnc'>1,136</td><td align="right" class='awrnc'>1.83</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.92</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.13</td><td align="right" headers="perSecond Min" class='awrnc'>0.83</td><td align="right" headers="perSecond Max" class='awrncrb'>1.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:L2 bitmap full</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L2 bitmaps examined</td><td align="right" class='awrnc'>247</td><td align="right" class='awrnc'>0.40</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.20</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.19</td><td align="right" headers="perSecond Max" class='awrncrb'>0.21</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search all</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:Search hint</td><td align="right" class='awrnc'>23</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search steal</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:bump HWM</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free block</td><td align="right" class='awrc'>1,079</td><td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.87</td><td align="right" headers="perSecond StdDev" class='awrc'>0.12</td><td align="right" headers="perSecond Min" class='awrc'>0.78</td><td align="right" headers="perSecond Max" class='awrcrb'>0.95</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:get free data block</td><td align="right" class='awrnc'>856</td><td align="right" class='awrnc'>1.38</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.69</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.14</td><td align="right" headers="perSecond Min" class='awrnc'>0.59</td><td align="right" headers="perSecond Max" class='awrncrb'>0.79</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free index block</td><td align="right" class='awrc'>223</td><td align="right" class='awrc'>0.36</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.18</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.16</td><td align="right" headers="perSecond Max" class='awrcrb'>0.20</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:good hint</td><td align="right" class='awrnc'>954</td><td align="right" class='awrnc'>1.54</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.77</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.08</td><td align="right" headers="perSecond Min" class='awrnc'>0.71</td><td align="right" headers="perSecond Max" class='awrncrb'>0.82</td></tr>
<tr><td scope="row" class='awrc'>ASSM rsv:fill reserve</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM wasted db state change</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO (bound) vector count</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO block miss count</td><td align="right" class='awrnc'>12,111,743</td><td align="right" class='awrnc'>19,512.87</td><td align="right" class='awrnc'>50.46</td><td align="right" headers="perSecond Average" class='awrnclb'>9,756.43</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.65</td><td align="right" headers="perSecond Min" class='awrnc'>9,754.56</td><td align="right" headers="perSecond Max" class='awrncrb'>9,758.31</td></tr>
<tr><td scope="row" class='awrc'>Batched IO double miss count</td><td align="right" class='awrc'>1,356,268</td><td align="right" class='awrc'>2,185.04</td><td align="right" class='awrc'>5.65</td><td align="right" headers="perSecond Average" class='awrclb'>1,092.52</td><td align="right" headers="perSecond StdDev" class='awrc'>0.21</td><td align="right" headers="perSecond Min" class='awrc'>1,092.37</td><td align="right" headers="perSecond Max" class='awrcrb'>1,092.67</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO same unit count</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>Batched IO single block count</td><td align="right" class='awrc'>2,186</td><td align="right" class='awrc'>3.52</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>1.76</td><td align="right" headers="perSecond StdDev" class='awrc'>0.17</td><td align="right" headers="perSecond Min" class='awrc'>1.64</td><td align="right" headers="perSecond Max" class='awrcrb'>1.88</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO vector block count</td><td align="right" class='awrnc'>12,110,011</td><td align="right" class='awrnc'>19,510.08</td><td align="right" class='awrnc'>50.45</td><td align="right" headers="perSecond Average" class='awrnclb'>9,755.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.97</td><td align="right" headers="perSecond Min" class='awrnc'>9,752.93</td><td align="right" headers="perSecond Max" class='awrncrb'>9,757.14</td></tr>
<tr><td scope="row" class='awrc'>Batched IO vector read count</td><td align="right" class='awrc'>1,353,338</td><td align="right" class='awrc'>2,180.32</td><td align="right" class='awrc'>5.64</td><td align="right" headers="perSecond Average" class='awrclb'>1,090.16</td><td align="right" headers="perSecond StdDev" class='awrc'>0.21</td><td align="right" headers="perSecond Min" class='awrc'>1,090.01</td><td align="right" headers="perSecond Max" class='awrcrb'>1,090.31</td></tr>
<tr><td scope="row" class='awrnc'>Block Cleanout Optim referenced</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>CCursor + sql area evicted</td><td align="right" class='awrc'>403</td><td align="right" class='awrc'>0.65</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.32</td><td align="right" headers="perSecond StdDev" class='awrc'>0.09</td><td align="right" headers="perSecond Min" class='awrc'>0.26</td><td align="right" headers="perSecond Max" class='awrcrb'>0.39</td></tr>
<tr><td scope="row" class='awrnc'>CPU used by this session</td><td align="right" class='awrnc'>655,991</td><td align="right" class='awrnc'>1,056.88</td><td align="right" class='awrnc'>2.73</td><td align="right" headers="perSecond Average" class='awrnclb'>528.44</td><td align="right" headers="perSecond StdDev" class='awrnc'>129.18</td><td align="right" headers="perSecond Min" class='awrnc'>437.10</td><td align="right" headers="perSecond Max" class='awrncrb'>619.78</td></tr>
<tr><td scope="row" class='awrc'>CPU used when call started</td><td align="right" class='awrc'>471,933</td><td align="right" class='awrc'>760.35</td><td align="right" class='awrc'>1.97</td><td align="right" headers="perSecond Average" class='awrclb'>380.18</td><td align="right" headers="perSecond StdDev" class='awrc'>119.08</td><td align="right" headers="perSecond Min" class='awrc'>295.97</td><td align="right" headers="perSecond Max" class='awrcrb'>464.38</td></tr>
<tr><td scope="row" class='awrnc'>CR blocks created</td><td align="right" class='awrnc'>1,597</td><td align="right" class='awrnc'>2.57</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>1.29</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.93</td><td align="right" headers="perSecond Min" class='awrnc'>0.63</td><td align="right" headers="perSecond Max" class='awrncrb'>1.94</td></tr>
<tr><td scope="row" class='awrc'>Cached Commit SCN referenced</td><td align="right" class='awrc'>14,948,360</td><td align="right" class='awrc'>24,082.82</td><td align="right" class='awrc'>62.28</td><td align="right" headers="perSecond Average" class='awrclb'>12,041.41</td><td align="right" headers="perSecond StdDev" class='awrc'>128.34</td><td align="right" headers="perSecond Min" class='awrc'>11,950.66</td><td align="right" headers="perSecond Max" class='awrcrb'>12,132.16</td></tr>
<tr><td scope="row" class='awrnc'>Client Advertised Receive Window</td><td align="right" class='awrnc'>903</td><td align="right" class='awrnc'>1.45</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.73</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.72</td><td align="right" headers="perSecond Max" class='awrncrb'>0.73</td></tr>
<tr><td scope="row" class='awrc'>Client Advertised Send Window</td><td align="right" class='awrc'>903</td><td align="right" class='awrc'>1.45</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.73</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.72</td><td align="right" headers="perSecond Max" class='awrcrb'>0.73</td></tr>
<tr><td scope="row" class='awrnc'>Client Path Maximum Transmission Unit(MTU)</td><td align="right" class='awrnc'>4,352,575</td><td align="right" class='awrnc'>7,013.62</td><td align="right" class='awrnc'>18.13</td><td align="right" headers="perSecond Average" class='awrnclb'>3,506.81</td><td align="right" headers="perSecond StdDev" class='awrnc'>4,747.98</td><td align="right" headers="perSecond Min" class='awrnc'>149.48</td><td align="right" headers="perSecond Max" class='awrncrb'>6,864.14</td></tr>
<tr><td scope="row" class='awrc'>Client Send Congestion Window</td><td align="right" class='awrc'>1,290</td><td align="right" class='awrc'>2.08</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>1.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>1.03</td><td align="right" headers="perSecond Max" class='awrcrb'>1.05</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Ack Received</td><td align="right" class='awrnc'>45</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Last Data Received</td><td align="right" class='awrc'>41</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Data Sent</td><td align="right" class='awrnc'>280</td><td align="right" class='awrnc'>0.45</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.23</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.21</td><td align="right" headers="perSecond Max" class='awrncrb'>0.24</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Round Trip Time</td><td align="right" class='awrc'>258,228</td><td align="right" class='awrc'>416.01</td><td align="right" class='awrc'>1.08</td><td align="right" headers="perSecond Average" class='awrclb'>208.01</td><td align="right" headers="perSecond StdDev" class='awrc'>42.64</td><td align="right" headers="perSecond Min" class='awrc'>177.85</td><td align="right" headers="perSecond Max" class='awrcrb'>238.16</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Round Trip Time Variance</td><td align="right" class='awrnc'>266,510</td><td align="right" class='awrnc'>429.36</td><td align="right" class='awrnc'>1.11</td><td align="right" headers="perSecond Average" class='awrnclb'>214.68</td><td align="right" headers="perSecond StdDev" class='awrnc'>29.62</td><td align="right" headers="perSecond Min" class='awrnc'>193.73</td><td align="right" headers="perSecond Max" class='awrncrb'>235.63</td></tr>
<tr><td scope="row" class='awrc'>Client Total Bytes Acked</td><td align="right" class='awrc'>2,029,736</td><td align="right" class='awrc'>3,270.06</td><td align="right" class='awrc'>8.46</td><td align="right" headers="perSecond Average" class='awrclb'>1,635.03</td><td align="right" headers="perSecond StdDev" class='awrc'>31.33</td><td align="right" headers="perSecond Min" class='awrc'>1,612.87</td><td align="right" headers="perSecond Max" class='awrcrb'>1,657.18</td></tr>
<tr><td scope="row" class='awrnc'>Client Total Bytes Received</td><td align="right" class='awrnc'>786,859</td><td align="right" class='awrnc'>1,267.69</td><td align="right" class='awrnc'>3.28</td><td align="right" headers="perSecond Average" class='awrnclb'>633.84</td><td align="right" headers="perSecond StdDev" class='awrnc'>8.16</td><td align="right" headers="perSecond Min" class='awrnc'>628.07</td><td align="right" headers="perSecond Max" class='awrncrb'>639.61</td></tr>
<tr><td scope="row" class='awrc'>Client Total Number of Retransmitted Packets</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Commit SCN cached</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DB time</td><td align="right" class='awrc'>7,686,495</td><td align="right" class='awrc'>12,383.52</td><td align="right" class='awrc'>32.02</td><td align="right" headers="perSecond Average" class='awrclb'>6,191.76</td><td align="right" headers="perSecond StdDev" class='awrc'>135.22</td><td align="right" headers="perSecond Min" class='awrc'>6,096.14</td><td align="right" headers="perSecond Max" class='awrcrb'>6,287.38</td></tr>
<tr><td scope="row" class='awrnc'>DBWR checkpoint buffers written</td><td align="right" class='awrnc'>21,189</td><td align="right" class='awrnc'>34.14</td><td align="right" class='awrnc'>0.09</td><td align="right" headers="perSecond Average" class='awrnclb'>17.07</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.99</td><td align="right" headers="perSecond Min" class='awrnc'>14.96</td><td align="right" headers="perSecond Max" class='awrncrb'>19.18</td></tr>
<tr><td scope="row" class='awrc'>DBWR checkpoints</td><td align="right" class='awrc'>2,041</td><td align="right" class='awrc'>3.29</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>1.64</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>1.63</td><td align="right" headers="perSecond Max" class='awrcrb'>1.65</td></tr>
<tr><td scope="row" class='awrnc'>DBWR fusion writes</td><td align="right" class='awrnc'>359</td><td align="right" class='awrnc'>0.58</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.29</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.33</td><td align="right" headers="perSecond Min" class='awrnc'>0.06</td><td align="right" headers="perSecond Max" class='awrncrb'>0.52</td></tr>
<tr><td scope="row" class='awrc'>DBWR object drop buffers written</td><td align="right" class='awrc'>52</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>DBWR transaction table writes</td><td align="right" class='awrnc'>289</td><td align="right" class='awrnc'>0.47</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.23</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.23</td><td align="right" headers="perSecond Max" class='awrncrb'>0.24</td></tr>
<tr><td scope="row" class='awrc'>DBWR undo block writes</td><td align="right" class='awrc'>116,290</td><td align="right" class='awrc'>187.35</td><td align="right" class='awrc'>0.48</td><td align="right" headers="perSecond Average" class='awrclb'>93.68</td><td align="right" headers="perSecond StdDev" class='awrc'>0.54</td><td align="right" headers="perSecond Min" class='awrc'>93.29</td><td align="right" headers="perSecond Max" class='awrcrb'>94.06</td></tr>
<tr><td scope="row" class='awrnc'>DFO trees parallelized</td><td align="right" class='awrnc'>71</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.06</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.10</td></tr>
<tr><td scope="row" class='awrc'>Effective IO time</td><td align="right" class='awrc'>117,544</td><td align="right" class='awrc'>189.41</td><td align="right" class='awrc'>0.49</td><td align="right" headers="perSecond Average" class='awrclb'>189.41</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>189.41</td><td align="right" headers="perSecond Max" class='awrcrb'>189.41</td></tr>
<tr><td scope="row" class='awrnc'>HSC Heap Segment Block Changes</td><td align="right" class='awrnc'>2,640,800</td><td align="right" class='awrnc'>4,254.51</td><td align="right" class='awrnc'>11.00</td><td align="right" headers="perSecond Average" class='awrnclb'>2,127.26</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.74</td><td align="right" headers="perSecond Min" class='awrnc'>2,126.73</td><td align="right" headers="perSecond Max" class='awrncrb'>2,127.78</td></tr>
<tr><td scope="row" class='awrc'>Heap Segment Array Inserts</td><td align="right" class='awrc'>351</td><td align="right" class='awrc'>0.57</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.28</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.27</td><td align="right" headers="perSecond Max" class='awrcrb'>0.29</td></tr>
<tr><td scope="row" class='awrnc'>Heap Segment Array Updates</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc req</td><td align="right" class='awrc'>1,303</td><td align="right" class='awrc'>2.10</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>1.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.42</td><td align="right" headers="perSecond Min" class='awrc'>0.75</td><td align="right" headers="perSecond Max" class='awrcrb'>1.35</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc space (block)</td><td align="right" class='awrnc'>825,622,528</td><td align="right" class='awrnc'>1,330,154.82</td><td align="right" class='awrnc'>3,439.62</td><td align="right" headers="perSecond Average" class='awrnclb'>665,077.41</td><td align="right" headers="perSecond StdDev" class='awrnc'>69,168.58</td><td align="right" headers="perSecond Min" class='awrnc'>616,167.84</td><td align="right" headers="perSecond Max" class='awrncrb'>713,986.98</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc time (ms)</td><td align="right" class='awrc'>103,744,825</td><td align="right" class='awrc'>167,143.09</td><td align="right" class='awrc'>432.21</td><td align="right" headers="perSecond Average" class='awrclb'>83,571.55</td><td align="right" headers="perSecond StdDev" class='awrc'>10,544.07</td><td align="right" headers="perSecond Min" class='awrc'>76,115.76</td><td align="right" headers="perSecond Max" class='awrcrb'>91,027.33</td></tr>
<tr><td scope="row" class='awrnc'>KTFB apply req</td><td align="right" class='awrnc'>2,254</td><td align="right" class='awrnc'>3.63</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>1.82</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.96</td><td align="right" headers="perSecond Min" class='awrnc'>1.14</td><td align="right" headers="perSecond Max" class='awrncrb'>2.49</td></tr>
<tr><td scope="row" class='awrc'>KTFB apply time (ms)</td><td align="right" class='awrc'>154,624</td><td align="right" class='awrc'>249.13</td><td align="right" class='awrc'>0.64</td><td align="right" headers="perSecond Average" class='awrclb'>124.57</td><td align="right" headers="perSecond StdDev" class='awrc'>89.31</td><td align="right" headers="perSecond Min" class='awrc'>61.42</td><td align="right" headers="perSecond Max" class='awrcrb'>187.72</td></tr>
<tr><td scope="row" class='awrnc'>KTFB free req</td><td align="right" class='awrnc'>961</td><td align="right" class='awrnc'>1.55</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.77</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.54</td><td align="right" headers="perSecond Min" class='awrnc'>0.39</td><td align="right" headers="perSecond Max" class='awrncrb'>1.15</td></tr>
<tr><td scope="row" class='awrc'>KTFB free space (block)</td><td align="right" class='awrc'>64,928</td><td align="right" class='awrc'>104.61</td><td align="right" class='awrc'>0.27</td><td align="right" headers="perSecond Average" class='awrclb'>52.31</td><td align="right" headers="perSecond StdDev" class='awrc'>23.86</td><td align="right" headers="perSecond Min" class='awrc'>35.44</td><td align="right" headers="perSecond Max" class='awrcrb'>69.17</td></tr>
<tr><td scope="row" class='awrnc'>KTFB free time (ms)</td><td align="right" class='awrnc'>10,147,985</td><td align="right" class='awrnc'>16,350.17</td><td align="right" class='awrnc'>42.28</td><td align="right" headers="perSecond Average" class='awrnclb'>8,175.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>3,802.93</td><td align="right" headers="perSecond Min" class='awrnc'>5,486.00</td><td align="right" headers="perSecond Max" class='awrncrb'>10,864.16</td></tr>
<tr><td scope="row" class='awrc'>PX local messages recv'd</td><td align="right" class='awrc'>866</td><td align="right" class='awrc'>1.40</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.70</td><td align="right" headers="perSecond StdDev" class='awrc'>0.78</td><td align="right" headers="perSecond Min" class='awrc'>0.15</td><td align="right" headers="perSecond Max" class='awrcrb'>1.25</td></tr>
<tr><td scope="row" class='awrnc'>PX local messages sent</td><td align="right" class='awrnc'>867</td><td align="right" class='awrnc'>1.40</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.70</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.78</td><td align="right" headers="perSecond Min" class='awrnc'>0.15</td><td align="right" headers="perSecond Max" class='awrncrb'>1.25</td></tr>
<tr><td scope="row" class='awrc'>PX remote messages recv'd</td><td align="right" class='awrc'>915</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.74</td><td align="right" headers="perSecond StdDev" class='awrc'>0.07</td><td align="right" headers="perSecond Min" class='awrc'>0.69</td><td align="right" headers="perSecond Max" class='awrcrb'>0.79</td></tr>
<tr><td scope="row" class='awrnc'>PX remote messages sent</td><td align="right" class='awrnc'>924</td><td align="right" class='awrnc'>1.49</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.74</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.08</td><td align="right" headers="perSecond Min" class='awrnc'>0.69</td><td align="right" headers="perSecond Max" class='awrncrb'>0.80</td></tr>
<tr><td scope="row" class='awrc'>Parallel operations not downgraded</td><td align="right" class='awrc'>104</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrc'>0.10</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.15</td></tr>
<tr><td scope="row" class='awrnc'>Requests to/from client</td><td align="right" class='awrnc'>528</td><td align="right" class='awrnc'>0.85</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.43</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.14</td><td align="right" headers="perSecond Min" class='awrnc'>0.33</td><td align="right" headers="perSecond Max" class='awrncrb'>0.53</td></tr>
<tr><td scope="row" class='awrc'>SMON posted for undo segment shrink</td><td align="right" class='awrc'>61</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net roundtrips to/from client</td><td align="right" class='awrnc'>401</td><td align="right" class='awrnc'>0.65</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.32</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.14</td><td align="right" headers="perSecond Min" class='awrnc'>0.22</td><td align="right" headers="perSecond Max" class='awrncrb'>0.42</td></tr>
<tr><td scope="row" class='awrc'>TBS Extension: tasks created</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>active txn count during cleanout</td><td align="right" class='awrnc'>501</td><td align="right" class='awrnc'>0.81</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.40</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.39</td><td align="right" headers="perSecond Max" class='awrncrb'>0.42</td></tr>
<tr><td scope="row" class='awrc'>application wait time</td><td align="right" class='awrc'>476</td><td align="right" class='awrc'>0.77</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.38</td><td align="right" headers="perSecond StdDev" class='awrc'>0.37</td><td align="right" headers="perSecond Min" class='awrc'>0.12</td><td align="right" headers="perSecond Max" class='awrcrb'>0.65</td></tr>
<tr><td scope="row" class='awrnc'>auto extends on undo tablespace</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>background checkpoints completed</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>background timeouts</td><td align="right" class='awrnc'>16,465</td><td align="right" class='awrnc'>26.53</td><td align="right" class='awrnc'>0.07</td><td align="right" headers="perSecond Average" class='awrnclb'>13.26</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>13.23</td><td align="right" headers="perSecond Max" class='awrncrb'>13.29</td></tr>
<tr><td scope="row" class='awrc'>blocks cleaned out using minact</td><td align="right" class='awrc'>626,856</td><td align="right" class='awrc'>1,009.91</td><td align="right" class='awrc'>2.61</td><td align="right" headers="perSecond Average" class='awrclb'>504.95</td><td align="right" headers="perSecond StdDev" class='awrc'>3.09</td><td align="right" headers="perSecond Min" class='awrc'>502.77</td><td align="right" headers="perSecond Max" class='awrcrb'>507.14</td></tr>
<tr><td scope="row" class='awrnc'>buffer is not pinned count</td><td align="right" class='awrnc'>42,176,289</td><td align="right" class='awrnc'>67,948.95</td><td align="right" class='awrnc'>175.71</td><td align="right" headers="perSecond Average" class='awrnclb'>33,974.47</td><td align="right" headers="perSecond StdDev" class='awrnc'>18.75</td><td align="right" headers="perSecond Min" class='awrnc'>33,961.21</td><td align="right" headers="perSecond Max" class='awrncrb'>33,987.74</td></tr>
<tr><td scope="row" class='awrc'>buffer is pinned count</td><td align="right" class='awrc'>16,302,070</td><td align="right" class='awrc'>26,263.77</td><td align="right" class='awrc'>67.92</td><td align="right" headers="perSecond Average" class='awrclb'>13,131.89</td><td align="right" headers="perSecond StdDev" class='awrc'>13.58</td><td align="right" headers="perSecond Min" class='awrc'>13,122.28</td><td align="right" headers="perSecond Max" class='awrcrb'>13,141.49</td></tr>
<tr><td scope="row" class='awrnc'>bytes received via SQL*Net from client</td><td align="right" class='awrnc'>522,830</td><td align="right" class='awrnc'>842.44</td><td align="right" class='awrnc'>2.18</td><td align="right" headers="perSecond Average" class='awrnclb'>421.22</td><td align="right" headers="perSecond StdDev" class='awrnc'>446.15</td><td align="right" headers="perSecond Min" class='awrnc'>105.74</td><td align="right" headers="perSecond Max" class='awrncrb'>736.70</td></tr>
<tr><td scope="row" class='awrc'>bytes sent via SQL*Net to client</td><td align="right" class='awrc'>97,467</td><td align="right" class='awrc'>157.03</td><td align="right" class='awrc'>0.41</td><td align="right" headers="perSecond Average" class='awrclb'>78.52</td><td align="right" headers="perSecond StdDev" class='awrc'>23.80</td><td align="right" headers="perSecond Min" class='awrc'>61.69</td><td align="right" headers="perSecond Max" class='awrcrb'>95.35</td></tr>
<tr><td scope="row" class='awrnc'>calls to get snapshot scn: kcmgss</td><td align="right" class='awrnc'>1,879,373</td><td align="right" class='awrnc'>3,027.80</td><td align="right" class='awrnc'>7.83</td><td align="right" headers="perSecond Average" class='awrnclb'>1,513.90</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.42</td><td align="right" headers="perSecond Min" class='awrnc'>1,511.48</td><td align="right" headers="perSecond Max" class='awrncrb'>1,516.32</td></tr>
<tr><td scope="row" class='awrc'>calls to kcmgas</td><td align="right" class='awrc'>417,124</td><td align="right" class='awrc'>672.01</td><td align="right" class='awrc'>1.74</td><td align="right" headers="perSecond Average" class='awrclb'>336.00</td><td align="right" headers="perSecond StdDev" class='awrc'>21.88</td><td align="right" headers="perSecond Min" class='awrc'>320.53</td><td align="right" headers="perSecond Max" class='awrcrb'>351.48</td></tr>
<tr><td scope="row" class='awrnc'>calls to kcmgcs</td><td align="right" class='awrnc'>12,222</td><td align="right" class='awrnc'>19.69</td><td align="right" class='awrnc'>0.05</td><td align="right" headers="perSecond Average" class='awrnclb'>9.85</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.98</td><td align="right" headers="perSecond Min" class='awrnc'>9.15</td><td align="right" headers="perSecond Max" class='awrncrb'>10.54</td></tr>
<tr><td scope="row" class='awrc'>cell physical IO interconnect bytes</td><td align="right" class='awrc'>197,747,698,176</td><td align="right" class='awrc'>318,585,555.77</td><td align="right" class='awrc'>823,835.47</td><td align="right" headers="perSecond Average" class='awrclb'>159,292,777.88</td><td align="right" headers="perSecond StdDev" class='awrc'>631,498.36</td><td align="right" headers="perSecond Min" class='awrc'>158,846,241.11</td><td align="right" headers="perSecond Max" class='awrcrb'>159,739,314.66</td></tr>
<tr><td scope="row" class='awrnc'>change write time</td><td align="right" class='awrnc'>5,951</td><td align="right" class='awrnc'>9.59</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>4.79</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.19</td><td align="right" headers="perSecond Min" class='awrnc'>3.95</td><td align="right" headers="perSecond Max" class='awrncrb'>5.64</td></tr>
<tr><td scope="row" class='awrc'>cleanout - number of ktugct calls</td><td align="right" class='awrc'>4,632</td><td align="right" class='awrc'>7.46</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>3.73</td><td align="right" headers="perSecond StdDev" class='awrc'>0.40</td><td align="right" headers="perSecond Min" class='awrc'>3.45</td><td align="right" headers="perSecond Max" class='awrcrb'>4.01</td></tr>
<tr><td scope="row" class='awrnc'>cleanouts and rollbacks - consistent read gets</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>cleanouts only - consistent read gets</td><td align="right" class='awrc'>51</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>cluster key scan block gets</td><td align="right" class='awrnc'>2,202</td><td align="right" class='awrnc'>3.55</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>1.77</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.66</td><td align="right" headers="perSecond Min" class='awrnc'>0.60</td><td align="right" headers="perSecond Max" class='awrncrb'>2.95</td></tr>
<tr><td scope="row" class='awrc'>cluster key scans</td><td align="right" class='awrc'>1,523</td><td align="right" class='awrc'>2.45</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>1.23</td><td align="right" headers="perSecond StdDev" class='awrc'>1.01</td><td align="right" headers="perSecond Min" class='awrc'>0.51</td><td align="right" headers="perSecond Max" class='awrcrb'>1.94</td></tr>
<tr><td scope="row" class='awrnc'>cluster wait time</td><td align="right" class='awrnc'>1,993,292</td><td align="right" class='awrnc'>3,211.21</td><td align="right" class='awrnc'>8.30</td><td align="right" headers="perSecond Average" class='awrnclb'>1,605.61</td><td align="right" headers="perSecond StdDev" class='awrnc'>432.69</td><td align="right" headers="perSecond Min" class='awrnc'>1,299.65</td><td align="right" headers="perSecond Max" class='awrncrb'>1,911.56</td></tr>
<tr><td scope="row" class='awrc'>commit batch/immediate performed</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit batch/immediate requested</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: block lost</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: buffer being written</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: callback failure</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanouts</td><td align="right" class='awrnc'>2,641,018</td><td align="right" class='awrnc'>4,254.86</td><td align="right" class='awrnc'>11.00</td><td align="right" headers="perSecond Average" class='awrnclb'>2,127.43</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.28</td><td align="right" headers="perSecond Min" class='awrnc'>2,127.23</td><td align="right" headers="perSecond Max" class='awrncrb'>2,127.63</td></tr>
<tr><td scope="row" class='awrc'>commit cleanouts successfully completed</td><td align="right" class='awrc'>2,640,969</td><td align="right" class='awrc'>4,254.79</td><td align="right" class='awrc'>11.00</td><td align="right" headers="perSecond Average" class='awrclb'>2,127.39</td><td align="right" headers="perSecond StdDev" class='awrc'>0.28</td><td align="right" headers="perSecond Min" class='awrc'>2,127.19</td><td align="right" headers="perSecond Max" class='awrcrb'>2,127.59</td></tr>
<tr><td scope="row" class='awrnc'>commit immediate performed</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit immediate requested</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit txn count during cleanout</td><td align="right" class='awrnc'>307</td><td align="right" class='awrnc'>0.49</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.25</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.24</td><td align="right" headers="perSecond Max" class='awrncrb'>0.25</td></tr>
<tr><td scope="row" class='awrc'>concurrency wait time</td><td align="right" class='awrc'>10,862</td><td align="right" class='awrc'>17.50</td><td align="right" class='awrc'>0.05</td><td align="right" headers="perSecond Average" class='awrclb'>8.75</td><td align="right" headers="perSecond StdDev" class='awrc'>2.53</td><td align="right" headers="perSecond Min" class='awrc'>6.96</td><td align="right" headers="perSecond Max" class='awrcrb'>10.54</td></tr>
<tr><td scope="row" class='awrnc'>consistent changes</td><td align="right" class='awrnc'>15,066</td><td align="right" class='awrnc'>24.27</td><td align="right" class='awrnc'>0.06</td><td align="right" headers="perSecond Average" class='awrnclb'>12.14</td><td align="right" headers="perSecond StdDev" class='awrnc'>6.60</td><td align="right" headers="perSecond Min" class='awrnc'>7.47</td><td align="right" headers="perSecond Max" class='awrncrb'>16.80</td></tr>
<tr><td scope="row" class='awrc'>consistent gets</td><td align="right" class='awrc'>19,896,471</td><td align="right" class='awrc'>32,054.60</td><td align="right" class='awrc'>82.89</td><td align="right" headers="perSecond Average" class='awrclb'>16,027.30</td><td align="right" headers="perSecond StdDev" class='awrc'>9.90</td><td align="right" headers="perSecond Min" class='awrc'>16,020.30</td><td align="right" headers="perSecond Max" class='awrcrb'>16,034.31</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets examination</td><td align="right" class='awrnc'>3,231,159</td><td align="right" class='awrnc'>5,205.62</td><td align="right" class='awrnc'>13.46</td><td align="right" headers="perSecond Average" class='awrnclb'>2,602.81</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.48</td><td align="right" headers="perSecond Min" class='awrnc'>2,601.77</td><td align="right" headers="perSecond Max" class='awrncrb'>2,603.86</td></tr>
<tr><td scope="row" class='awrc'>consistent gets examination (fastpath)</td><td align="right" class='awrc'>3,230,524</td><td align="right" class='awrc'>5,204.60</td><td align="right" class='awrc'>13.46</td><td align="right" headers="perSecond Average" class='awrclb'>2,602.30</td><td align="right" headers="perSecond StdDev" class='awrc'>1.48</td><td align="right" headers="perSecond Min" class='awrc'>2,601.26</td><td align="right" headers="perSecond Max" class='awrcrb'>2,603.34</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets from cache</td><td align="right" class='awrnc'>19,896,460</td><td align="right" class='awrnc'>32,054.59</td><td align="right" class='awrnc'>82.89</td><td align="right" headers="perSecond Average" class='awrnclb'>16,027.29</td><td align="right" headers="perSecond StdDev" class='awrnc'>9.91</td><td align="right" headers="perSecond Min" class='awrnc'>16,020.29</td><td align="right" headers="perSecond Max" class='awrncrb'>16,034.30</td></tr>
<tr><td scope="row" class='awrc'>consistent gets pin</td><td align="right" class='awrc'>16,665,301</td><td align="right" class='awrc'>26,848.96</td><td align="right" class='awrc'>69.43</td><td align="right" headers="perSecond Average" class='awrclb'>13,424.48</td><td align="right" headers="perSecond StdDev" class='awrc'>11.39</td><td align="right" headers="perSecond Min" class='awrc'>13,416.43</td><td align="right" headers="perSecond Max" class='awrcrb'>13,432.53</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets pin (fastpath)</td><td align="right" class='awrnc'>12,361,490</td><td align="right" class='awrnc'>19,915.21</td><td align="right" class='awrnc'>51.50</td><td align="right" headers="perSecond Average" class='awrnclb'>9,957.61</td><td align="right" headers="perSecond StdDev" class='awrnc'>50.82</td><td align="right" headers="perSecond Min" class='awrnc'>9,921.67</td><td align="right" headers="perSecond Max" class='awrncrb'>9,993.54</td></tr>
<tr><td scope="row" class='awrc'>cursor authentications</td><td align="right" class='awrc'>170</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.14</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.13</td><td align="right" headers="perSecond Max" class='awrcrb'>0.14</td></tr>
<tr><td scope="row" class='awrnc'>data blocks consistent reads - undo records applied</td><td align="right" class='awrnc'>109</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.09</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.08</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.14</td></tr>
<tr><td scope="row" class='awrc'>db block changes</td><td align="right" class='awrc'>5,916,848</td><td align="right" class='awrc'>9,532.46</td><td align="right" class='awrc'>24.65</td><td align="right" headers="perSecond Average" class='awrclb'>4,766.23</td><td align="right" headers="perSecond StdDev" class='awrc'>13.36</td><td align="right" headers="perSecond Min" class='awrc'>4,756.78</td><td align="right" headers="perSecond Max" class='awrcrb'>4,775.68</td></tr>
<tr><td scope="row" class='awrnc'>db block gets</td><td align="right" class='awrnc'>3,452,160</td><td align="right" class='awrnc'>5,561.68</td><td align="right" class='awrnc'>14.38</td><td align="right" headers="perSecond Average" class='awrnclb'>2,780.84</td><td align="right" headers="perSecond StdDev" class='awrnc'>42.35</td><td align="right" headers="perSecond Min" class='awrnc'>2,750.90</td><td align="right" headers="perSecond Max" class='awrncrb'>2,810.79</td></tr>
<tr><td scope="row" class='awrc'>db block gets direct</td><td align="right" class='awrc'>1,374</td><td align="right" class='awrc'>2.21</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>1.11</td><td align="right" headers="perSecond StdDev" class='awrc'>0.86</td><td align="right" headers="perSecond Min" class='awrc'>0.50</td><td align="right" headers="perSecond Max" class='awrcrb'>1.71</td></tr>
<tr><td scope="row" class='awrnc'>db block gets from cache</td><td align="right" class='awrnc'>3,450,786</td><td align="right" class='awrnc'>5,559.47</td><td align="right" class='awrnc'>14.38</td><td align="right" headers="perSecond Average" class='awrnclb'>2,779.73</td><td align="right" headers="perSecond StdDev" class='awrnc'>41.49</td><td align="right" headers="perSecond Min" class='awrnc'>2,750.40</td><td align="right" headers="perSecond Max" class='awrncrb'>2,809.07</td></tr>
<tr><td scope="row" class='awrc'>db block gets from cache (fastpath)</td><td align="right" class='awrc'>679,638</td><td align="right" class='awrc'>1,094.95</td><td align="right" class='awrc'>2.83</td><td align="right" headers="perSecond Average" class='awrclb'>547.48</td><td align="right" headers="perSecond StdDev" class='awrc'>38.10</td><td align="right" headers="perSecond Min" class='awrc'>520.54</td><td align="right" headers="perSecond Max" class='awrcrb'>574.42</td></tr>
<tr><td scope="row" class='awrnc'>deferred (CURRENT) block cleanout applications</td><td align="right" class='awrnc'>629,435</td><td align="right" class='awrnc'>1,014.06</td><td align="right" class='awrnc'>2.62</td><td align="right" headers="perSecond Average" class='awrnclb'>507.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.36</td><td align="right" headers="perSecond Min" class='awrnc'>504.66</td><td align="right" headers="perSecond Max" class='awrncrb'>509.41</td></tr>
<tr><td scope="row" class='awrc'>dirty buffers inspected</td><td align="right" class='awrc'>2,492,802</td><td align="right" class='awrc'>4,016.10</td><td align="right" class='awrc'>10.39</td><td align="right" headers="perSecond Average" class='awrclb'>2,008.05</td><td align="right" headers="perSecond StdDev" class='awrc'>90.01</td><td align="right" headers="perSecond Min" class='awrc'>1,944.41</td><td align="right" headers="perSecond Max" class='awrcrb'>2,071.70</td></tr>
<tr><td scope="row" class='awrnc'>enqueue conversions</td><td align="right" class='awrnc'>25,372</td><td align="right" class='awrnc'>40.88</td><td align="right" class='awrnc'>0.11</td><td align="right" headers="perSecond Average" class='awrnclb'>20.44</td><td align="right" headers="perSecond StdDev" class='awrnc'>9.26</td><td align="right" headers="perSecond Min" class='awrnc'>13.89</td><td align="right" headers="perSecond Max" class='awrncrb'>26.99</td></tr>
<tr><td scope="row" class='awrc'>enqueue releases</td><td align="right" class='awrc'>736,866</td><td align="right" class='awrc'>1,187.15</td><td align="right" class='awrc'>3.07</td><td align="right" headers="perSecond Average" class='awrclb'>593.57</td><td align="right" headers="perSecond StdDev" class='awrc'>24.13</td><td align="right" headers="perSecond Min" class='awrc'>576.51</td><td align="right" headers="perSecond Max" class='awrcrb'>610.64</td></tr>
<tr><td scope="row" class='awrnc'>enqueue requests</td><td align="right" class='awrnc'>736,664</td><td align="right" class='awrnc'>1,186.82</td><td align="right" class='awrnc'>3.07</td><td align="right" headers="perSecond Average" class='awrnclb'>593.41</td><td align="right" headers="perSecond StdDev" class='awrnc'>24.16</td><td align="right" headers="perSecond Min" class='awrnc'>576.33</td><td align="right" headers="perSecond Max" class='awrncrb'>610.49</td></tr>
<tr><td scope="row" class='awrc'>enqueue timeouts</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>enqueue waits</td><td align="right" class='awrnc'>7,058</td><td align="right" class='awrnc'>11.37</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>5.69</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.31</td><td align="right" headers="perSecond Min" class='awrnc'>4.05</td><td align="right" headers="perSecond Max" class='awrncrb'>7.32</td></tr>
<tr><td scope="row" class='awrc'>exchange deadlocks</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>execute count</td><td align="right" class='awrnc'>1,615,180</td><td align="right" class='awrnc'>2,602.17</td><td align="right" class='awrnc'>6.73</td><td align="right" headers="perSecond Average" class='awrnclb'>1,301.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.78</td><td align="right" headers="perSecond Min" class='awrnc'>1,299.12</td><td align="right" headers="perSecond Max" class='awrncrb'>1,303.05</td></tr>
<tr><td scope="row" class='awrc'>file io service time</td><td align="right" class='awrc'>7,359,154,268</td><td align="right" class='awrc'>11,856,153.81</td><td align="right" class='awrc'>30,658.93</td><td align="right" headers="perSecond Average" class='awrclb'>5,928,076.90</td><td align="right" headers="perSecond StdDev" class='awrc'>149,039.85</td><td align="right" headers="perSecond Min" class='awrc'>5,822,689.82</td><td align="right" headers="perSecond Max" class='awrcrb'>6,033,463.99</td></tr>
<tr><td scope="row" class='awrnc'>file io wait time</td><td align="right" class='awrnc'>318,964,559,439</td><td align="right" class='awrnc'>513,850,588.49</td><td align="right" class='awrnc'>1,328,836.28</td><td align="right" headers="perSecond Average" class='awrnclb'>256,925,294.25</td><td align="right" headers="perSecond StdDev" class='awrnc'>85,393,967.64</td><td align="right" headers="perSecond Min" class='awrnc'>196,542,640.65</td><td align="right" headers="perSecond Max" class='awrncrb'>317,307,947.84</td></tr>
<tr><td scope="row" class='awrc'>free buffer inspected</td><td align="right" class='awrc'>17,892,499</td><td align="right" class='awrc'>28,826.09</td><td align="right" class='awrc'>74.54</td><td align="right" headers="perSecond Average" class='awrclb'>14,413.04</td><td align="right" headers="perSecond StdDev" class='awrc'>78.59</td><td align="right" headers="perSecond Min" class='awrc'>14,357.48</td><td align="right" headers="perSecond Max" class='awrcrb'>14,468.61</td></tr>
<tr><td scope="row" class='awrnc'>free buffer requested</td><td align="right" class='awrnc'>17,793,643</td><td align="right" class='awrnc'>28,666.82</td><td align="right" class='awrnc'>74.13</td><td align="right" headers="perSecond Average" class='awrnclb'>14,333.41</td><td align="right" headers="perSecond StdDev" class='awrnc'>50.27</td><td align="right" headers="perSecond Min" class='awrnc'>14,297.86</td><td align="right" headers="perSecond Max" class='awrncrb'>14,368.96</td></tr>
<tr><td scope="row" class='awrc'>gc blocks compressed</td><td align="right" class='awrc'>13,136</td><td align="right" class='awrc'>21.16</td><td align="right" class='awrc'>0.05</td><td align="right" headers="perSecond Average" class='awrclb'>10.58</td><td align="right" headers="perSecond StdDev" class='awrc'>3.33</td><td align="right" headers="perSecond Min" class='awrc'>8.23</td><td align="right" headers="perSecond Max" class='awrcrb'>12.93</td></tr>
<tr><td scope="row" class='awrnc'>gc blocks lost</td><td align="right" class='awrnc'>3,940</td><td align="right" class='awrnc'>6.35</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>3.17</td><td align="right" headers="perSecond StdDev" class='awrnc'>4.38</td><td align="right" headers="perSecond Min" class='awrnc'>0.08</td><td align="right" headers="perSecond Max" class='awrncrb'>6.27</td></tr>
<tr><td scope="row" class='awrc'>gc cleanout saved</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr anti locks created</td><td align="right" class='awrnc'>122,076</td><td align="right" class='awrnc'>196.67</td><td align="right" class='awrnc'>0.51</td><td align="right" headers="perSecond Average" class='awrnclb'>98.34</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.57</td><td align="right" headers="perSecond Min" class='awrnc'>97.23</td><td align="right" headers="perSecond Max" class='awrncrb'>99.45</td></tr>
<tr><td scope="row" class='awrc'>gc cr anti locks expanded</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>gc cr anti locks shrunk</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.06</td></tr>
<tr><td scope="row" class='awrc'>gc cr block build time</td><td align="right" class='awrc'>49</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block flush time</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.06</td></tr>
<tr><td scope="row" class='awrc'>gc cr block receive time</td><td align="right" class='awrc'>2,143</td><td align="right" class='awrc'>3.45</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>1.73</td><td align="right" headers="perSecond StdDev" class='awrc'>0.11</td><td align="right" headers="perSecond Min" class='awrc'>1.65</td><td align="right" headers="perSecond Max" class='awrcrb'>1.80</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks built</td><td align="right" class='awrnc'>5,788</td><td align="right" class='awrnc'>9.33</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>4.66</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.62</td><td align="right" headers="perSecond Min" class='awrnc'>4.23</td><td align="right" headers="perSecond Max" class='awrncrb'>5.10</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks flushed</td><td align="right" class='awrc'>71</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrc'>0.06</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks received</td><td align="right" class='awrnc'>6,586</td><td align="right" class='awrnc'>10.61</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>5.31</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.23</td><td align="right" headers="perSecond Min" class='awrnc'>5.14</td><td align="right" headers="perSecond Max" class='awrncrb'>5.47</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks served</td><td align="right" class='awrc'>6,576</td><td align="right" class='awrc'>10.59</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>5.30</td><td align="right" headers="perSecond StdDev" class='awrc'>0.15</td><td align="right" headers="perSecond Min" class='awrc'>5.19</td><td align="right" headers="perSecond Max" class='awrcrb'>5.40</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multiblock grant time</td><td align="right" class='awrnc'>2,406,175</td><td align="right" class='awrnc'>3,876.30</td><td align="right" class='awrnc'>10.02</td><td align="right" headers="perSecond Average" class='awrnclb'>1,938.15</td><td align="right" headers="perSecond StdDev" class='awrnc'>791.72</td><td align="right" headers="perSecond Min" class='awrnc'>1,378.32</td><td align="right" headers="perSecond Max" class='awrncrb'>2,497.98</td></tr>
<tr><td scope="row" class='awrc'>gc cr multiblock grants received</td><td align="right" class='awrc'>9,465,656</td><td align="right" class='awrc'>15,250.32</td><td align="right" class='awrc'>39.43</td><td align="right" headers="perSecond Average" class='awrclb'>7,625.16</td><td align="right" headers="perSecond StdDev" class='awrc'>1,741.31</td><td align="right" headers="perSecond Min" class='awrc'>6,393.87</td><td align="right" headers="perSecond Max" class='awrcrb'>8,856.45</td></tr>
<tr><td scope="row" class='awrnc'>gc current block flush time</td><td align="right" class='awrnc'>26</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gc current block receive time</td><td align="right" class='awrc'>17,961</td><td align="right" class='awrc'>28.93</td><td align="right" class='awrc'>0.07</td><td align="right" headers="perSecond Average" class='awrclb'>14.47</td><td align="right" headers="perSecond StdDev" class='awrc'>19.51</td><td align="right" headers="perSecond Min" class='awrc'>0.67</td><td align="right" headers="perSecond Max" class='awrcrb'>28.26</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks flushed</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks received</td><td align="right" class='awrc'>27,540</td><td align="right" class='awrc'>44.36</td><td align="right" class='awrc'>0.11</td><td align="right" headers="perSecond Average" class='awrclb'>22.18</td><td align="right" headers="perSecond StdDev" class='awrc'>25.58</td><td align="right" headers="perSecond Min" class='awrc'>4.09</td><td align="right" headers="perSecond Max" class='awrcrb'>40.27</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks served</td><td align="right" class='awrnc'>27,574</td><td align="right" class='awrnc'>44.43</td><td align="right" class='awrnc'>0.11</td><td align="right" headers="perSecond Average" class='awrnclb'>22.22</td><td align="right" headers="perSecond StdDev" class='awrnc'>25.67</td><td align="right" headers="perSecond Min" class='awrnc'>4.06</td><td align="right" headers="perSecond Max" class='awrncrb'>40.37</td></tr>
<tr><td scope="row" class='awrc'>gc force cr read cr</td><td align="right" class='awrc'>104</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.08</td><td align="right" headers="perSecond Max" class='awrcrb'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>gc force cr read current</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc kbytes saved</td><td align="right" class='awrc'>53,971</td><td align="right" class='awrc'>86.96</td><td align="right" class='awrc'>0.22</td><td align="right" headers="perSecond Average" class='awrclb'>43.48</td><td align="right" headers="perSecond StdDev" class='awrc'>14.65</td><td align="right" headers="perSecond Min" class='awrc'>33.12</td><td align="right" headers="perSecond Max" class='awrcrb'>53.84</td></tr>
<tr><td scope="row" class='awrnc'>gc kbytes sent</td><td align="right" class='awrnc'>219,229</td><td align="right" class='awrnc'>353.25</td><td align="right" class='awrnc'>0.91</td><td align="right" headers="perSecond Average" class='awrnclb'>176.62</td><td align="right" headers="perSecond StdDev" class='awrnc'>189.57</td><td align="right" headers="perSecond Min" class='awrnc'>42.58</td><td align="right" headers="perSecond Max" class='awrncrb'>310.67</td></tr>
<tr><td scope="row" class='awrc'>gc local grants</td><td align="right" class='awrc'>10,570,665</td><td align="right" class='awrc'>17,029.75</td><td align="right" class='awrc'>44.04</td><td align="right" headers="perSecond Average" class='awrclb'>8,514.88</td><td align="right" headers="perSecond StdDev" class='awrc'>1,191.34</td><td align="right" headers="perSecond Min" class='awrc'>7,672.47</td><td align="right" headers="perSecond Max" class='awrcrb'>9,357.28</td></tr>
<tr><td scope="row" class='awrnc'>gc merge pi fg</td><td align="right" class='awrnc'>50</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.05</td></tr>
<tr><td scope="row" class='awrc'>gc no change made</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc reader bypass grants</td><td align="right" class='awrnc'>56</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.06</td></tr>
<tr><td scope="row" class='awrc'>gc reader bypass waits</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gc remote grants</td><td align="right" class='awrnc'>7,203,551</td><td align="right" class='awrnc'>11,605.77</td><td align="right" class='awrnc'>30.01</td><td align="right" headers="perSecond Average" class='awrnclb'>5,802.89</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,257.96</td><td align="right" headers="perSecond Min" class='awrnc'>4,913.37</td><td align="right" headers="perSecond Max" class='awrncrb'>6,692.40</td></tr>
<tr><td scope="row" class='awrc'>gc status messages received</td><td align="right" class='awrc'>448,610</td><td align="right" class='awrc'>722.88</td><td align="right" class='awrc'>1.87</td><td align="right" headers="perSecond Average" class='awrclb'>361.44</td><td align="right" headers="perSecond StdDev" class='awrc'>491.75</td><td align="right" headers="perSecond Min" class='awrc'>13.72</td><td align="right" headers="perSecond Max" class='awrcrb'>709.16</td></tr>
<tr><td scope="row" class='awrnc'>gc status messages sent</td><td align="right" class='awrnc'>452,459</td><td align="right" class='awrnc'>728.81</td><td align="right" class='awrnc'>1.88</td><td align="right" headers="perSecond Average" class='awrnclb'>364.40</td><td align="right" headers="perSecond StdDev" class='awrnc'>495.89</td><td align="right" headers="perSecond Min" class='awrnc'>13.75</td><td align="right" headers="perSecond Max" class='awrncrb'>715.05</td></tr>
<tr><td scope="row" class='awrc'>gcs affinity lock failures</td><td align="right" class='awrc'>2,058</td><td align="right" class='awrc'>3.32</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>1.66</td><td align="right" headers="perSecond StdDev" class='awrc'>1.77</td><td align="right" headers="perSecond Min" class='awrc'>0.41</td><td align="right" headers="perSecond Max" class='awrcrb'>2.91</td></tr>
<tr><td scope="row" class='awrnc'>gcs affinity lock grants</td><td align="right" class='awrnc'>3,061,378</td><td align="right" class='awrnc'>4,931.56</td><td align="right" class='awrnc'>12.75</td><td align="right" headers="perSecond Average" class='awrnclb'>2,465.78</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,942.04</td><td align="right" headers="perSecond Min" class='awrnc'>1,092.55</td><td align="right" headers="perSecond Max" class='awrncrb'>3,839.01</td></tr>
<tr><td scope="row" class='awrc'>gcs anti-locks created</td><td align="right" class='awrc'>122,073</td><td align="right" class='awrc'>196.67</td><td align="right" class='awrc'>0.51</td><td align="right" headers="perSecond Average" class='awrclb'>98.33</td><td align="right" headers="perSecond StdDev" class='awrc'>1.57</td><td align="right" headers="perSecond Min" class='awrc'>97.23</td><td align="right" headers="perSecond Max" class='awrcrb'>99.44</td></tr>
<tr><td scope="row" class='awrnc'>gcs data block access records</td><td align="right" class='awrnc'>17,676,196</td><td align="right" class='awrnc'>28,477.60</td><td align="right" class='awrnc'>73.64</td><td align="right" headers="perSecond Average" class='awrnclb'>14,238.80</td><td align="right" headers="perSecond StdDev" class='awrnc'>46.60</td><td align="right" headers="perSecond Min" class='awrnc'>14,205.85</td><td align="right" headers="perSecond Max" class='awrncrb'>14,271.75</td></tr>
<tr><td scope="row" class='awrc'>gcs messages sent</td><td align="right" class='awrc'>22,708,521</td><td align="right" class='awrc'>36,585.54</td><td align="right" class='awrc'>94.61</td><td align="right" headers="perSecond Average" class='awrclb'>18,292.77</td><td align="right" headers="perSecond StdDev" class='awrc'>1,903.92</td><td align="right" headers="perSecond Min" class='awrc'>16,946.50</td><td align="right" headers="perSecond Max" class='awrcrb'>19,639.05</td></tr>
<tr><td scope="row" class='awrnc'>gcs read-mostly lock failures</td><td align="right" class='awrnc'>120,659</td><td align="right" class='awrnc'>194.37</td><td align="right" class='awrnc'>0.50</td><td align="right" headers="perSecond Average" class='awrnclb'>97.18</td><td align="right" headers="perSecond StdDev" class='awrnc'>87.01</td><td align="right" headers="perSecond Min" class='awrnc'>35.66</td><td align="right" headers="perSecond Max" class='awrncrb'>158.71</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly lock grants</td><td align="right" class='awrc'>682,758</td><td align="right" class='awrc'>1,099.83</td><td align="right" class='awrc'>2.84</td><td align="right" headers="perSecond Average" class='awrclb'>549.92</td><td align="right" headers="perSecond StdDev" class='awrc'>493.08</td><td align="right" headers="perSecond Min" class='awrc'>201.26</td><td align="right" headers="perSecond Max" class='awrcrb'>898.58</td></tr>
<tr><td scope="row" class='awrnc'>gcs stats management (SCM) process posts</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>ges messages sent</td><td align="right" class='awrc'>17,230</td><td align="right" class='awrc'>27.76</td><td align="right" class='awrc'>0.07</td><td align="right" headers="perSecond Average" class='awrclb'>13.88</td><td align="right" headers="perSecond StdDev" class='awrc'>3.43</td><td align="right" headers="perSecond Min" class='awrc'>11.45</td><td align="right" headers="perSecond Max" class='awrcrb'>16.31</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue get time</td><td align="right" class='awrnc'>77,721</td><td align="right" class='awrnc'>125.22</td><td align="right" class='awrnc'>0.32</td><td align="right" headers="perSecond Average" class='awrnclb'>62.61</td><td align="right" headers="perSecond StdDev" class='awrnc'>14.65</td><td align="right" headers="perSecond Min" class='awrnc'>52.25</td><td align="right" headers="perSecond Max" class='awrncrb'>72.97</td></tr>
<tr><td scope="row" class='awrc'>global enqueue gets sync</td><td align="right" class='awrc'>475,580</td><td align="right" class='awrc'>766.22</td><td align="right" class='awrc'>1.98</td><td align="right" headers="perSecond Average" class='awrclb'>383.11</td><td align="right" headers="perSecond StdDev" class='awrc'>81.25</td><td align="right" headers="perSecond Min" class='awrc'>325.65</td><td align="right" headers="perSecond Max" class='awrcrb'>440.56</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue releases</td><td align="right" class='awrnc'>456,888</td><td align="right" class='awrnc'>736.10</td><td align="right" class='awrnc'>1.90</td><td align="right" headers="perSecond Average" class='awrnclb'>368.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>71.90</td><td align="right" headers="perSecond Min" class='awrnc'>317.21</td><td align="right" headers="perSecond Max" class='awrncrb'>418.89</td></tr>
<tr><td scope="row" class='awrc'>global undo segment hints helped</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>global undo segment hints were stale</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>heap block compress</td><td align="right" class='awrc'>6,874</td><td align="right" class='awrc'>11.07</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>5.54</td><td align="right" headers="perSecond StdDev" class='awrc'>1.38</td><td align="right" headers="perSecond Min" class='awrc'>4.56</td><td align="right" headers="perSecond Max" class='awrcrb'>6.52</td></tr>
<tr><td scope="row" class='awrnc'>hot buffers moved to head of LRU</td><td align="right" class='awrnc'>278,550</td><td align="right" class='awrnc'>448.76</td><td align="right" class='awrnc'>1.16</td><td align="right" headers="perSecond Average" class='awrnclb'>224.38</td><td align="right" headers="perSecond StdDev" class='awrnc'>30.25</td><td align="right" headers="perSecond Min" class='awrnc'>202.98</td><td align="right" headers="perSecond Max" class='awrncrb'>245.77</td></tr>
<tr><td scope="row" class='awrc'>immediate (CR) block cleanout applications</td><td align="right" class='awrc'>69</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>immediate (CURRENT) block cleanout applications</td><td align="right" class='awrnc'>627</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.14</td><td align="right" headers="perSecond Min" class='awrnc'>0.40</td><td align="right" headers="perSecond Max" class='awrncrb'>0.61</td></tr>
<tr><td scope="row" class='awrc'>in call idle wait time</td><td align="right" class='awrc'>14,275,476</td><td align="right" class='awrc'>22,998.92</td><td align="right" class='awrc'>59.47</td><td align="right" headers="perSecond Average" class='awrclb'>11,499.46</td><td align="right" headers="perSecond StdDev" class='awrc'>453.88</td><td align="right" headers="perSecond Min" class='awrc'>11,178.52</td><td align="right" headers="perSecond Max" class='awrcrb'>11,820.40</td></tr>
<tr><td scope="row" class='awrnc'>index crx upgrade (positioned)</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.10</td><td align="right" headers="perSecond Max" class='awrncrb'>0.10</td></tr>
<tr><td scope="row" class='awrc'>index fast full scans (full)</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>index fetch by key</td><td align="right" class='awrnc'>9,110</td><td align="right" class='awrnc'>14.68</td><td align="right" class='awrnc'>0.04</td><td align="right" headers="perSecond Average" class='awrnclb'>7.34</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.74</td><td align="right" headers="perSecond Min" class='awrnc'>6.11</td><td align="right" headers="perSecond Max" class='awrncrb'>8.57</td></tr>
<tr><td scope="row" class='awrc'>index range scans</td><td align="right" class='awrc'>1,610,003</td><td align="right" class='awrc'>2,593.83</td><td align="right" class='awrc'>6.71</td><td align="right" headers="perSecond Average" class='awrclb'>1,296.91</td><td align="right" headers="perSecond StdDev" class='awrc'>4.88</td><td align="right" headers="perSecond Min" class='awrc'>1,293.47</td><td align="right" headers="perSecond Max" class='awrcrb'>1,300.36</td></tr>
<tr><td scope="row" class='awrnc'>leaf node 90-10 splits</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>leaf node splits</td><td align="right" class='awrc'>216</td><td align="right" class='awrc'>0.35</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.17</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.16</td><td align="right" headers="perSecond Max" class='awrcrb'>0.19</td></tr>
<tr><td scope="row" class='awrnc'>lob reads</td><td align="right" class='awrnc'>997</td><td align="right" class='awrnc'>1.61</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.80</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.72</td><td align="right" headers="perSecond Min" class='awrnc'>0.29</td><td align="right" headers="perSecond Max" class='awrncrb'>1.31</td></tr>
<tr><td scope="row" class='awrc'>lob writes</td><td align="right" class='awrc'>7,825</td><td align="right" class='awrc'>12.61</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>6.30</td><td align="right" headers="perSecond StdDev" class='awrc'>1.78</td><td align="right" headers="perSecond Min" class='awrc'>5.04</td><td align="right" headers="perSecond Max" class='awrcrb'>7.57</td></tr>
<tr><td scope="row" class='awrnc'>lob writes unaligned</td><td align="right" class='awrnc'>7,824</td><td align="right" class='awrnc'>12.61</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>6.30</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.78</td><td align="right" headers="perSecond Min" class='awrnc'>5.04</td><td align="right" headers="perSecond Max" class='awrncrb'>7.56</td></tr>
<tr><td scope="row" class='awrc'>logical read bytes from cache</td><td align="right" class='awrc'>191,260,565,504</td><td align="right" class='awrc'>308,134,227.82</td><td align="right" class='awrc'>796,809.46</td><td align="right" headers="perSecond Average" class='awrclb'>154,067,113.91</td><td align="right" headers="perSecond StdDev" class='awrc'>258,627.41</td><td align="right" headers="perSecond Min" class='awrc'>153,884,236.71</td><td align="right" headers="perSecond Max" class='awrcrb'>154,249,991.11</td></tr>
<tr><td scope="row" class='awrnc'>logons cumulative</td><td align="right" class='awrnc'>224</td><td align="right" class='awrnc'>0.36</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.18</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.18</td><td align="right" headers="perSecond Max" class='awrncrb'>0.18</td></tr>
<tr><td scope="row" class='awrc'>max cf enq hold time</td><td align="right" class='awrc'>9,873</td><td align="right" class='awrc'>15.91</td><td align="right" class='awrc'>0.04</td><td align="right" headers="perSecond Average" class='awrclb'>7.95</td><td align="right" headers="perSecond StdDev" class='awrc'>9.72</td><td align="right" headers="perSecond Min" class='awrc'>1.08</td><td align="right" headers="perSecond Max" class='awrcrb'>14.83</td></tr>
<tr><td scope="row" class='awrnc'>messages received</td><td align="right" class='awrnc'>386,563</td><td align="right" class='awrnc'>622.78</td><td align="right" class='awrnc'>1.61</td><td align="right" headers="perSecond Average" class='awrnclb'>311.39</td><td align="right" headers="perSecond StdDev" class='awrnc'>13.94</td><td align="right" headers="perSecond Min" class='awrnc'>301.53</td><td align="right" headers="perSecond Max" class='awrncrb'>321.24</td></tr>
<tr><td scope="row" class='awrc'>messages sent</td><td align="right" class='awrc'>386,558</td><td align="right" class='awrc'>622.77</td><td align="right" class='awrc'>1.61</td><td align="right" headers="perSecond Average" class='awrclb'>311.38</td><td align="right" headers="perSecond StdDev" class='awrc'>13.94</td><td align="right" headers="perSecond Min" class='awrc'>301.53</td><td align="right" headers="perSecond Max" class='awrcrb'>321.24</td></tr>
<tr><td scope="row" class='awrnc'>no work - consistent read gets</td><td align="right" class='awrnc'>16,635,377</td><td align="right" class='awrnc'>26,800.75</td><td align="right" class='awrnc'>69.30</td><td align="right" headers="perSecond Average" class='awrnclb'>13,400.38</td><td align="right" headers="perSecond StdDev" class='awrnc'>17.65</td><td align="right" headers="perSecond Min" class='awrnc'>13,387.90</td><td align="right" headers="perSecond Max" class='awrncrb'>13,412.86</td></tr>
<tr><td scope="row" class='awrc'>non-idle wait count</td><td align="right" class='awrc'>14,924,497</td><td align="right" class='awrc'>24,044.73</td><td align="right" class='awrc'>62.18</td><td align="right" headers="perSecond Average" class='awrclb'>12,022.36</td><td align="right" headers="perSecond StdDev" class='awrc'>1,147.62</td><td align="right" headers="perSecond Min" class='awrc'>11,210.88</td><td align="right" headers="perSecond Max" class='awrcrb'>12,833.85</td></tr>
<tr><td scope="row" class='awrnc'>non-idle wait time</td><td align="right" class='awrnc'>7,351,961</td><td align="right" class='awrnc'>11,844.56</td><td align="right" class='awrnc'>30.63</td><td align="right" headers="perSecond Average" class='awrnclb'>5,922.28</td><td align="right" headers="perSecond StdDev" class='awrnc'>120.24</td><td align="right" headers="perSecond Min" class='awrnc'>5,837.26</td><td align="right" headers="perSecond Max" class='awrncrb'>6,007.30</td></tr>
<tr><td scope="row" class='awrc'>opened cursors cumulative</td><td align="right" class='awrc'>1,856,373</td><td align="right" class='awrc'>2,990.75</td><td align="right" class='awrc'>7.73</td><td align="right" headers="perSecond Average" class='awrclb'>1,495.37</td><td align="right" headers="perSecond StdDev" class='awrc'>2.46</td><td align="right" headers="perSecond Min" class='awrc'>1,493.64</td><td align="right" headers="perSecond Max" class='awrcrb'>1,497.11</td></tr>
<tr><td scope="row" class='awrnc'>parse count (describe)</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>parse count (hard)</td><td align="right" class='awrc'>672</td><td align="right" class='awrc'>1.08</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.54</td><td align="right" headers="perSecond StdDev" class='awrc'>0.28</td><td align="right" headers="perSecond Min" class='awrc'>0.34</td><td align="right" headers="perSecond Max" class='awrcrb'>0.74</td></tr>
<tr><td scope="row" class='awrnc'>parse count (total)</td><td align="right" class='awrnc'>7,458</td><td align="right" class='awrnc'>12.02</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>6.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.09</td><td align="right" headers="perSecond Min" class='awrnc'>4.53</td><td align="right" headers="perSecond Max" class='awrncrb'>7.48</td></tr>
<tr><td scope="row" class='awrc'>parse time cpu</td><td align="right" class='awrc'>216</td><td align="right" class='awrc'>0.35</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.17</td><td align="right" headers="perSecond StdDev" class='awrc'>0.07</td><td align="right" headers="perSecond Min" class='awrc'>0.13</td><td align="right" headers="perSecond Max" class='awrcrb'>0.22</td></tr>
<tr><td scope="row" class='awrnc'>parse time elapsed</td><td align="right" class='awrnc'>585</td><td align="right" class='awrnc'>0.94</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.47</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.29</td><td align="right" headers="perSecond Min" class='awrnc'>0.27</td><td align="right" headers="perSecond Max" class='awrncrb'>0.67</td></tr>
<tr><td scope="row" class='awrc'>physical read IO requests</td><td align="right" class='awrc'>17,638,020</td><td align="right" class='awrc'>28,416.10</td><td align="right" class='awrc'>73.48</td><td align="right" headers="perSecond Average" class='awrclb'>14,208.05</td><td align="right" headers="perSecond StdDev" class='awrc'>69.65</td><td align="right" headers="perSecond Min" class='awrc'>14,158.80</td><td align="right" headers="perSecond Max" class='awrcrb'>14,257.30</td></tr>
<tr><td scope="row" class='awrnc'>physical read bytes</td><td align="right" class='awrnc'>144,498,802,688</td><td align="right" class='awrnc'>232,797,843.65</td><td align="right" class='awrnc'>601,995.57</td><td align="right" headers="perSecond Average" class='awrnclb'>116,398,921.83</td><td align="right" headers="perSecond StdDev" class='awrnc'>577,639.93</td><td align="right" headers="perSecond Min" class='awrnc'>115,990,468.71</td><td align="right" headers="perSecond Max" class='awrncrb'>116,807,374.94</td></tr>
<tr><td scope="row" class='awrc'>physical read total IO requests</td><td align="right" class='awrc'>17,648,774</td><td align="right" class='awrc'>28,433.43</td><td align="right" class='awrc'>73.53</td><td align="right" headers="perSecond Average" class='awrclb'>14,216.71</td><td align="right" headers="perSecond StdDev" class='awrc'>70.08</td><td align="right" headers="perSecond Min" class='awrc'>14,167.16</td><td align="right" headers="perSecond Max" class='awrcrb'>14,266.27</td></tr>
<tr><td scope="row" class='awrnc'>physical read total bytes</td><td align="right" class='awrnc'>147,462,422,016</td><td align="right" class='awrnc'>237,572,443.93</td><td align="right" class='awrnc'>614,342.29</td><td align="right" headers="perSecond Average" class='awrnclb'>118,786,221.96</td><td align="right" headers="perSecond StdDev" class='awrnc'>585,346.11</td><td align="right" headers="perSecond Min" class='awrnc'>118,372,319.76</td><td align="right" headers="perSecond Max" class='awrncrb'>119,200,124.17</td></tr>
<tr><td scope="row" class='awrc'>physical read total multi block requests</td><td align="right" class='awrc'>2,715</td><td align="right" class='awrc'>4.37</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>2.19</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>2.18</td><td align="right" headers="perSecond Max" class='awrcrb'>2.19</td></tr>
<tr><td scope="row" class='awrnc'>physical reads</td><td align="right" class='awrnc'>17,639,015</td><td align="right" class='awrnc'>28,417.71</td><td align="right" class='awrnc'>73.49</td><td align="right" headers="perSecond Average" class='awrnclb'>14,208.85</td><td align="right" headers="perSecond StdDev" class='awrnc'>70.51</td><td align="right" headers="perSecond Min" class='awrnc'>14,158.99</td><td align="right" headers="perSecond Max" class='awrncrb'>14,258.71</td></tr>
<tr><td scope="row" class='awrc'>physical reads cache</td><td align="right" class='awrc'>17,639,001</td><td align="right" class='awrc'>28,417.68</td><td align="right" class='awrc'>73.49</td><td align="right" headers="perSecond Average" class='awrclb'>14,208.84</td><td align="right" headers="perSecond StdDev" class='awrc'>70.50</td><td align="right" headers="perSecond Min" class='awrc'>14,158.99</td><td align="right" headers="perSecond Max" class='awrcrb'>14,258.69</td></tr>
<tr><td scope="row" class='awrnc'>physical reads cache prefetch</td><td align="right" class='awrnc'>10,750,794</td><td align="right" class='awrnc'>17,320.28</td><td align="right" class='awrnc'>44.79</td><td align="right" headers="perSecond Average" class='awrnclb'>8,660.14</td><td align="right" headers="perSecond StdDev" class='awrnc'>7.21</td><td align="right" headers="perSecond Min" class='awrnc'>8,655.05</td><td align="right" headers="perSecond Max" class='awrncrb'>8,665.24</td></tr>
<tr><td scope="row" class='awrc'>physical reads direct</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>physical reads direct (lob)</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>physical write IO requests</td><td align="right" class='awrc'>2,636,968</td><td align="right" class='awrc'>4,248.34</td><td align="right" class='awrc'>10.99</td><td align="right" headers="perSecond Average" class='awrclb'>2,124.17</td><td align="right" headers="perSecond StdDev" class='awrc'>3.61</td><td align="right" headers="perSecond Min" class='awrc'>2,121.62</td><td align="right" headers="perSecond Max" class='awrcrb'>2,126.72</td></tr>
<tr><td scope="row" class='awrnc'>physical write bytes</td><td align="right" class='awrnc'>22,540,156,928</td><td align="right" class='awrnc'>36,313,780.40</td><td align="right" class='awrnc'>93,904.41</td><td align="right" headers="perSecond Average" class='awrnclb'>18,156,890.20</td><td align="right" headers="perSecond StdDev" class='awrnc'>36,606.84</td><td align="right" headers="perSecond Min" class='awrnc'>18,131,005.26</td><td align="right" headers="perSecond Max" class='awrncrb'>18,182,775.14</td></tr>
<tr><td scope="row" class='awrc'>physical write total IO requests</td><td align="right" class='awrc'>2,873,802</td><td align="right" class='awrc'>4,629.89</td><td align="right" class='awrc'>11.97</td><td align="right" headers="perSecond Average" class='awrclb'>2,314.95</td><td align="right" headers="perSecond StdDev" class='awrc'>13.05</td><td align="right" headers="perSecond Min" class='awrc'>2,305.72</td><td align="right" headers="perSecond Max" class='awrcrb'>2,324.18</td></tr>
<tr><td scope="row" class='awrnc'>physical write total bytes</td><td align="right" class='awrnc'>25,132,156,416</td><td align="right" class='awrnc'>40,489,668.89</td><td align="right" class='awrnc'>104,702.92</td><td align="right" headers="perSecond Average" class='awrnclb'>20,244,834.45</td><td align="right" headers="perSecond StdDev" class='awrnc'>21,883.92</td><td align="right" headers="perSecond Min" class='awrnc'>20,229,360.18</td><td align="right" headers="perSecond Max" class='awrncrb'>20,260,308.72</td></tr>
<tr><td scope="row" class='awrc'>physical write total multi block requests</td><td align="right" class='awrc'>7,020</td><td align="right" class='awrc'>11.31</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>5.65</td><td align="right" headers="perSecond StdDev" class='awrc'>0.22</td><td align="right" headers="perSecond Min" class='awrc'>5.50</td><td align="right" headers="perSecond Max" class='awrcrb'>5.81</td></tr>
<tr><td scope="row" class='awrnc'>physical writes</td><td align="right" class='awrnc'>2,751,484</td><td align="right" class='awrnc'>4,432.83</td><td align="right" class='awrnc'>11.46</td><td align="right" headers="perSecond Average" class='awrnclb'>2,216.42</td><td align="right" headers="perSecond StdDev" class='awrnc'>4.47</td><td align="right" headers="perSecond Min" class='awrnc'>2,213.26</td><td align="right" headers="perSecond Max" class='awrncrb'>2,219.58</td></tr>
<tr><td scope="row" class='awrc'>physical writes direct</td><td align="right" class='awrc'>1,446</td><td align="right" class='awrc'>2.33</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>1.16</td><td align="right" headers="perSecond StdDev" class='awrc'>0.88</td><td align="right" headers="perSecond Min" class='awrc'>0.55</td><td align="right" headers="perSecond Max" class='awrcrb'>1.78</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct (lob)</td><td align="right" class='awrnc'>72</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.05</td><td align="right" headers="perSecond Max" class='awrncrb'>0.07</td></tr>
<tr><td scope="row" class='awrc'>physical writes direct temporary tablespace</td><td align="right" class='awrc'>954</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.77</td><td align="right" headers="perSecond StdDev" class='awrc'>0.85</td><td align="right" headers="perSecond Min" class='awrc'>0.17</td><td align="right" headers="perSecond Max" class='awrcrb'>1.37</td></tr>
<tr><td scope="row" class='awrnc'>physical writes from cache</td><td align="right" class='awrnc'>2,750,038</td><td align="right" class='awrnc'>4,430.50</td><td align="right" class='awrnc'>11.46</td><td align="right" headers="perSecond Average" class='awrnclb'>2,215.25</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.59</td><td align="right" headers="perSecond Min" class='awrnc'>2,212.71</td><td align="right" headers="perSecond Max" class='awrncrb'>2,217.79</td></tr>
<tr><td scope="row" class='awrc'>physical writes non checkpoint</td><td align="right" class='awrc'>2,748,079</td><td align="right" class='awrc'>4,427.35</td><td align="right" class='awrc'>11.45</td><td align="right" headers="perSecond Average" class='awrclb'>2,213.67</td><td align="right" headers="perSecond StdDev" class='awrc'>4.41</td><td align="right" headers="perSecond Min" class='awrc'>2,210.56</td><td align="right" headers="perSecond Max" class='awrcrb'>2,216.79</td></tr>
<tr><td scope="row" class='awrnc'>pinned buffers inspected</td><td align="right" class='awrnc'>607</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.49</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.18</td><td align="right" headers="perSecond Min" class='awrnc'>0.36</td><td align="right" headers="perSecond Max" class='awrncrb'>0.62</td></tr>
<tr><td scope="row" class='awrc'>process last non-idle time</td><td align="right" class='awrc'>686</td><td align="right" class='awrc'>1.11</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.55</td><td align="right" headers="perSecond StdDev" class='awrc'>0.63</td><td align="right" headers="perSecond Min" class='awrc'>0.10</td><td align="right" headers="perSecond Max" class='awrcrb'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>queries parallelized</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>recursive calls</td><td align="right" class='awrc'>2,160,116</td><td align="right" class='awrc'>3,480.10</td><td align="right" class='awrc'>9.00</td><td align="right" headers="perSecond Average" class='awrclb'>1,740.05</td><td align="right" headers="perSecond StdDev" class='awrc'>17.69</td><td align="right" headers="perSecond Min" class='awrc'>1,727.54</td><td align="right" headers="perSecond Max" class='awrcrb'>1,752.56</td></tr>
<tr><td scope="row" class='awrnc'>recursive cpu usage</td><td align="right" class='awrnc'>631,547</td><td align="right" class='awrnc'>1,017.50</td><td align="right" class='awrnc'>2.63</td><td align="right" headers="perSecond Average" class='awrnclb'>508.75</td><td align="right" headers="perSecond StdDev" class='awrnc'>127.11</td><td align="right" headers="perSecond Min" class='awrnc'>418.87</td><td align="right" headers="perSecond Max" class='awrncrb'>598.63</td></tr>
<tr><td scope="row" class='awrc'>redo KB read</td><td align="right" class='awrc'>1,658,880</td><td align="right" class='awrc'>2,672.57</td><td align="right" class='awrc'>6.91</td><td align="right" headers="perSecond Average" class='awrclb'>1,336.29</td><td align="right" headers="perSecond StdDev" class='awrc'>5.04</td><td align="right" headers="perSecond Min" class='awrc'>1,332.73</td><td align="right" headers="perSecond Max" class='awrcrb'>1,339.85</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks checksummed by FG (exclusive)</td><td align="right" class='awrnc'>1,614,978</td><td align="right" class='awrnc'>2,601.84</td><td align="right" class='awrnc'>6.73</td><td align="right" headers="perSecond Average" class='awrnclb'>1,300.92</td><td align="right" headers="perSecond StdDev" class='awrnc'>6.87</td><td align="right" headers="perSecond Min" class='awrnc'>1,296.07</td><td align="right" headers="perSecond Max" class='awrncrb'>1,305.78</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written</td><td align="right" class='awrc'>4,620,140</td><td align="right" class='awrc'>7,443.37</td><td align="right" class='awrc'>19.25</td><td align="right" headers="perSecond Average" class='awrclb'>3,721.68</td><td align="right" headers="perSecond StdDev" class='awrc'>5.99</td><td align="right" headers="perSecond Min" class='awrc'>3,717.45</td><td align="right" headers="perSecond Max" class='awrcrb'>3,725.92</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks written (group 0)</td><td align="right" class='awrnc'>2,815,686</td><td align="right" class='awrnc'>4,536.22</td><td align="right" class='awrnc'>11.73</td><td align="right" headers="perSecond Average" class='awrnclb'>2,268.11</td><td align="right" headers="perSecond StdDev" class='awrnc'>185.59</td><td align="right" headers="perSecond Min" class='awrnc'>2,136.87</td><td align="right" headers="perSecond Max" class='awrncrb'>2,399.34</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written (group 1)</td><td align="right" class='awrc'>1,804,454</td><td align="right" class='awrc'>2,907.15</td><td align="right" class='awrc'>7.52</td><td align="right" headers="perSecond Average" class='awrclb'>1,453.58</td><td align="right" headers="perSecond StdDev" class='awrc'>179.60</td><td align="right" headers="perSecond Min" class='awrc'>1,326.58</td><td align="right" headers="perSecond Max" class='awrcrb'>1,580.57</td></tr>
<tr><td scope="row" class='awrnc'>redo entries</td><td align="right" class='awrnc'>3,094,895</td><td align="right" class='awrnc'>4,986.10</td><td align="right" class='awrnc'>12.89</td><td align="right" headers="perSecond Average" class='awrnclb'>2,493.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>13.06</td><td align="right" headers="perSecond Min" class='awrnc'>2,483.81</td><td align="right" headers="perSecond Max" class='awrncrb'>2,502.28</td></tr>
<tr><td scope="row" class='awrc'>redo size</td><td align="right" class='awrc'>2,233,361,720</td><td align="right" class='awrc'>3,598,102.32</td><td align="right" class='awrc'>9,304.39</td><td align="right" headers="perSecond Average" class='awrclb'>1,799,051.16</td><td align="right" headers="perSecond StdDev" class='awrc'>1,042.95</td><td align="right" headers="perSecond Min" class='awrc'>1,798,313.68</td><td align="right" headers="perSecond Max" class='awrcrb'>1,799,788.64</td></tr>
<tr><td scope="row" class='awrnc'>redo size for direct writes</td><td align="right" class='awrnc'>1,916</td><td align="right" class='awrnc'>3.09</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>1.54</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>1.52</td><td align="right" headers="perSecond Max" class='awrncrb'>1.57</td></tr>
<tr><td scope="row" class='awrc'>redo subscn max counts</td><td align="right" class='awrc'>243</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.20</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.19</td><td align="right" headers="perSecond Max" class='awrcrb'>0.20</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>redo synch time (usec)</td><td align="right" class='awrc'>393,255</td><td align="right" class='awrc'>633.57</td><td align="right" class='awrc'>1.64</td><td align="right" headers="perSecond Average" class='awrclb'>316.79</td><td align="right" headers="perSecond StdDev" class='awrc'>44.57</td><td align="right" headers="perSecond Min" class='awrc'>285.27</td><td align="right" headers="perSecond Max" class='awrcrb'>348.30</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead (usec)</td><td align="right" class='awrnc'>6,780</td><td align="right" class='awrnc'>10.92</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>5.46</td><td align="right" headers="perSecond StdDev" class='awrnc'>4.43</td><td align="right" headers="perSecond Min" class='awrnc'>2.33</td><td align="right" headers="perSecond Max" class='awrncrb'>8.60</td></tr>
<tr><td scope="row" class='awrc'>redo synch time overhead count (  2ms)</td><td align="right" class='awrc'>55</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>redo synch writes</td><td align="right" class='awrnc'>134</td><td align="right" class='awrnc'>0.22</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.11</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.10</td><td align="right" headers="perSecond Max" class='awrncrb'>0.11</td></tr>
<tr><td scope="row" class='awrc'>redo wastage</td><td align="right" class='awrc'>56,978,636</td><td align="right" class='awrc'>91,795.47</td><td align="right" class='awrc'>237.38</td><td align="right" headers="perSecond Average" class='awrclb'>45,897.73</td><td align="right" headers="perSecond StdDev" class='awrc'>3,977.40</td><td align="right" headers="perSecond Min" class='awrc'>43,085.29</td><td align="right" headers="perSecond Max" class='awrcrb'>48,710.18</td></tr>
<tr><td scope="row" class='awrnc'>redo write active strands</td><td align="right" class='awrnc'>234,439</td><td align="right" class='awrnc'>377.69</td><td align="right" class='awrnc'>0.98</td><td align="right" headers="perSecond Average" class='awrnclb'>188.85</td><td align="right" headers="perSecond StdDev" class='awrnc'>16.52</td><td align="right" headers="perSecond Min" class='awrnc'>177.16</td><td align="right" headers="perSecond Max" class='awrncrb'>200.53</td></tr>
<tr><td scope="row" class='awrc'>redo write broadcast ack count</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>redo write broadcast ack time</td><td align="right" class='awrnc'>30,452</td><td align="right" class='awrnc'>49.06</td><td align="right" class='awrnc'>0.13</td><td align="right" headers="perSecond Average" class='awrnclb'>24.53</td><td align="right" headers="perSecond StdDev" class='awrnc'>14.34</td><td align="right" headers="perSecond Min" class='awrnc'>14.39</td><td align="right" headers="perSecond Max" class='awrncrb'>34.68</td></tr>
<tr><td scope="row" class='awrc'>redo write finish time</td><td align="right" class='awrc'>1,472,877,348</td><td align="right" class='awrc'>2,372,935.96</td><td align="right" class='awrc'>6,136.15</td><td align="right" headers="perSecond Average" class='awrclb'>1,186,467.98</td><td align="right" headers="perSecond StdDev" class='awrc'>99,263.10</td><td align="right" headers="perSecond Min" class='awrc'>1,116,278.37</td><td align="right" headers="perSecond Max" class='awrcrb'>1,256,657.59</td></tr>
<tr><td scope="row" class='awrnc'>redo write gather time</td><td align="right" class='awrnc'>67,502,744</td><td align="right" class='awrnc'>108,757.32</td><td align="right" class='awrnc'>281.22</td><td align="right" headers="perSecond Average" class='awrnclb'>54,378.66</td><td align="right" headers="perSecond StdDev" class='awrnc'>20,497.83</td><td align="right" headers="perSecond Min" class='awrnc'>39,884.50</td><td align="right" headers="perSecond Max" class='awrncrb'>68,872.81</td></tr>
<tr><td scope="row" class='awrc'>redo write info find</td><td align="right" class='awrc'>56</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>redo write info find fail</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write schedule time</td><td align="right" class='awrc'>69,621,079</td><td align="right" class='awrc'>112,170.15</td><td align="right" class='awrc'>290.05</td><td align="right" headers="perSecond Average" class='awrclb'>56,085.08</td><td align="right" headers="perSecond StdDev" class='awrc'>20,668.30</td><td align="right" headers="perSecond Min" class='awrc'>41,470.38</td><td align="right" headers="perSecond Max" class='awrcrb'>70,699.77</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (   4KB)</td><td align="right" class='awrnc'>19,939</td><td align="right" class='awrnc'>32.12</td><td align="right" class='awrnc'>0.08</td><td align="right" headers="perSecond Average" class='awrnclb'>16.06</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.69</td><td align="right" headers="perSecond Min" class='awrnc'>14.16</td><td align="right" headers="perSecond Max" class='awrncrb'>17.97</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (   8KB)</td><td align="right" class='awrc'>33,794</td><td align="right" class='awrc'>54.44</td><td align="right" class='awrc'>0.14</td><td align="right" headers="perSecond Average" class='awrclb'>27.22</td><td align="right" headers="perSecond StdDev" class='awrc'>8.75</td><td align="right" headers="perSecond Min" class='awrc'>21.04</td><td align="right" headers="perSecond Max" class='awrcrb'>33.41</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (  16KB)</td><td align="right" class='awrnc'>64,014</td><td align="right" class='awrnc'>103.13</td><td align="right" class='awrnc'>0.27</td><td align="right" headers="perSecond Average" class='awrnclb'>51.56</td><td align="right" headers="perSecond StdDev" class='awrnc'>14.54</td><td align="right" headers="perSecond Min" class='awrnc'>41.29</td><td align="right" headers="perSecond Max" class='awrncrb'>61.84</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (  32KB)</td><td align="right" class='awrc'>41,910</td><td align="right" class='awrc'>67.52</td><td align="right" class='awrc'>0.17</td><td align="right" headers="perSecond Average" class='awrclb'>33.76</td><td align="right" headers="perSecond StdDev" class='awrc'>1.95</td><td align="right" headers="perSecond Min" class='awrc'>32.38</td><td align="right" headers="perSecond Max" class='awrcrb'>35.14</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 128KB)</td><td align="right" class='awrnc'>9,304</td><td align="right" class='awrnc'>14.99</td><td align="right" class='awrnc'>0.04</td><td align="right" headers="perSecond Average" class='awrnclb'>7.50</td><td align="right" headers="perSecond StdDev" class='awrnc'>4.36</td><td align="right" headers="perSecond Min" class='awrnc'>4.41</td><td align="right" headers="perSecond Max" class='awrncrb'>10.58</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 256KB)</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 512KB)</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (1024KB)</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo write time</td><td align="right" class='awrnc'>147,956</td><td align="right" class='awrnc'>238.37</td><td align="right" class='awrnc'>0.62</td><td align="right" headers="perSecond Average" class='awrnclb'>119.19</td><td align="right" headers="perSecond StdDev" class='awrnc'>9.93</td><td align="right" headers="perSecond Min" class='awrnc'>112.17</td><td align="right" headers="perSecond Max" class='awrncrb'>126.20</td></tr>
<tr><td scope="row" class='awrc'>redo write time (usec)</td><td align="right" class='awrc'>1,479,553,090</td><td align="right" class='awrc'>2,383,691.05</td><td align="right" class='awrc'>6,163.96</td><td align="right" headers="perSecond Average" class='awrclb'>1,191,845.53</td><td align="right" headers="perSecond StdDev" class='awrc'>99,260.76</td><td align="right" headers="perSecond Min" class='awrc'>1,121,657.57</td><td align="right" headers="perSecond Max" class='awrcrb'>1,262,033.48</td></tr>
<tr><td scope="row" class='awrnc'>redo write total time</td><td align="right" class='awrnc'>1,536,734,239</td><td align="right" class='awrnc'>2,475,820.19</td><td align="right" class='awrnc'>6,402.18</td><td align="right" headers="perSecond Average" class='awrnclb'>1,237,910.09</td><td align="right" headers="perSecond StdDev" class='awrnc'>122,040.23</td><td align="right" headers="perSecond Min" class='awrnc'>1,151,614.62</td><td align="right" headers="perSecond Max" class='awrncrb'>1,324,205.57</td></tr>
<tr><td scope="row" class='awrc'>redo write worker delay (usec)</td><td align="right" class='awrc'>56,781,632</td><td align="right" class='awrc'>91,484.93</td><td align="right" class='awrc'>236.56</td><td align="right" headers="perSecond Average" class='awrclb'>45,742.47</td><td align="right" headers="perSecond StdDev" class='awrc'>20,762.20</td><td align="right" headers="perSecond Min" class='awrc'>31,061.37</td><td align="right" headers="perSecond Max" class='awrcrb'>60,423.56</td></tr>
<tr><td scope="row" class='awrnc'>redo write worker delay count</td><td align="right" class='awrnc'>169,007</td><td align="right" class='awrnc'>272.28</td><td align="right" class='awrnc'>0.70</td><td align="right" headers="perSecond Average" class='awrnclb'>136.14</td><td align="right" headers="perSecond StdDev" class='awrnc'>23.55</td><td align="right" headers="perSecond Min" class='awrnc'>119.49</td><td align="right" headers="perSecond Max" class='awrncrb'>152.79</td></tr>
<tr><td scope="row" class='awrc'>redo writes</td><td align="right" class='awrc'>169,007</td><td align="right" class='awrc'>272.28</td><td align="right" class='awrc'>0.70</td><td align="right" headers="perSecond Average" class='awrclb'>136.14</td><td align="right" headers="perSecond StdDev" class='awrc'>23.55</td><td align="right" headers="perSecond Min" class='awrc'>119.49</td><td align="right" headers="perSecond Max" class='awrcrb'>152.79</td></tr>
<tr><td scope="row" class='awrnc'>redo writes (group 0)</td><td align="right" class='awrnc'>92,914</td><td align="right" class='awrnc'>149.69</td><td align="right" class='awrnc'>0.39</td><td align="right" headers="perSecond Average" class='awrnclb'>74.84</td><td align="right" headers="perSecond StdDev" class='awrnc'>14.66</td><td align="right" headers="perSecond Min" class='awrnc'>64.48</td><td align="right" headers="perSecond Max" class='awrncrb'>85.21</td></tr>
<tr><td scope="row" class='awrc'>redo writes (group 1)</td><td align="right" class='awrc'>76,093</td><td align="right" class='awrc'>122.59</td><td align="right" class='awrc'>0.32</td><td align="right" headers="perSecond Average" class='awrclb'>61.29</td><td align="right" headers="perSecond StdDev" class='awrc'>8.89</td><td align="right" headers="perSecond Min" class='awrc'>55.01</td><td align="right" headers="perSecond Max" class='awrcrb'>67.58</td></tr>
<tr><td scope="row" class='awrnc'>redo writes adaptive all</td><td align="right" class='awrnc'>169,007</td><td align="right" class='awrnc'>272.28</td><td align="right" class='awrnc'>0.70</td><td align="right" headers="perSecond Average" class='awrnclb'>136.14</td><td align="right" headers="perSecond StdDev" class='awrnc'>23.55</td><td align="right" headers="perSecond Min" class='awrnc'>119.49</td><td align="right" headers="perSecond Max" class='awrncrb'>152.79</td></tr>
<tr><td scope="row" class='awrc'>redo writes adaptive worker</td><td align="right" class='awrc'>169,007</td><td align="right" class='awrc'>272.28</td><td align="right" class='awrc'>0.70</td><td align="right" headers="perSecond Average" class='awrclb'>136.14</td><td align="right" headers="perSecond StdDev" class='awrc'>23.55</td><td align="right" headers="perSecond Min" class='awrc'>119.49</td><td align="right" headers="perSecond Max" class='awrcrb'>152.79</td></tr>
<tr><td scope="row" class='awrnc'>rollback changes - undo records applied</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>rollbacks only - consistent read gets</td><td align="right" class='awrc'>31</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>rows fetched via callback</td><td align="right" class='awrnc'>4,515</td><td align="right" class='awrnc'>7.27</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>3.64</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.66</td><td align="right" headers="perSecond Min" class='awrnc'>3.17</td><td align="right" headers="perSecond Max" class='awrncrb'>4.10</td></tr>
<tr><td scope="row" class='awrc'>securefile allocation bytes</td><td align="right" class='awrc'>589,824</td><td align="right" class='awrc'>950.29</td><td align="right" class='awrc'>2.46</td><td align="right" headers="perSecond Average" class='awrclb'>475.14</td><td align="right" headers="perSecond StdDev" class='awrc'>149.45</td><td align="right" headers="perSecond Min" class='awrc'>369.47</td><td align="right" headers="perSecond Max" class='awrcrb'>580.82</td></tr>
<tr><td scope="row" class='awrnc'>securefile allocation chunks</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>securefile bytes non-transformed</td><td align="right" class='awrc'>509,732</td><td align="right" class='awrc'>821.25</td><td align="right" class='awrc'>2.12</td><td align="right" headers="perSecond Average" class='awrclb'>410.62</td><td align="right" headers="perSecond StdDev" class='awrc'>127.30</td><td align="right" headers="perSecond Min" class='awrc'>320.61</td><td align="right" headers="perSecond Max" class='awrcrb'>500.64</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct read bytes</td><td align="right" class='awrnc'>114,688</td><td align="right" class='awrnc'>184.81</td><td align="right" class='awrnc'>0.48</td><td align="right" headers="perSecond Average" class='awrnclb'>184.81</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>184.81</td><td align="right" headers="perSecond Max" class='awrncrb'>184.81</td></tr>
<tr><td scope="row" class='awrc'>securefile direct read ops</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct write bytes</td><td align="right" class='awrnc'>589,824</td><td align="right" class='awrnc'>950.29</td><td align="right" class='awrnc'>2.46</td><td align="right" headers="perSecond Average" class='awrnclb'>475.14</td><td align="right" headers="perSecond StdDev" class='awrnc'>149.45</td><td align="right" headers="perSecond Min" class='awrnc'>369.47</td><td align="right" headers="perSecond Max" class='awrncrb'>580.82</td></tr>
<tr><td scope="row" class='awrc'>securefile direct write ops</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>securefile number of non-transformed flushes</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>segment chunks allocation from dispenser</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser allocations</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>segment dispenser load empty</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser load tasks</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc ops</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc tasks</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc time (ms)</td><td align="right" class='awrc'>3,063</td><td align="right" class='awrc'>4.93</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>2.47</td><td align="right" headers="perSecond StdDev" class='awrc'>0.14</td><td align="right" headers="perSecond Min" class='awrc'>2.37</td><td align="right" headers="perSecond Max" class='awrcrb'>2.57</td></tr>
<tr><td scope="row" class='awrnc'>session connect time</td><td align="right" class='awrnc'>5,870</td><td align="right" class='awrnc'>9.46</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>4.73</td><td align="right" headers="perSecond StdDev" class='awrnc'>6.48</td><td align="right" headers="perSecond Min" class='awrnc'>0.15</td><td align="right" headers="perSecond Max" class='awrncrb'>9.31</td></tr>
<tr><td scope="row" class='awrc'>session cursor cache hits</td><td align="right" class='awrc'>1,852,835</td><td align="right" class='awrc'>2,985.05</td><td align="right" class='awrc'>7.72</td><td align="right" headers="perSecond Average" class='awrclb'>1,492.52</td><td align="right" headers="perSecond StdDev" class='awrc'>2.30</td><td align="right" headers="perSecond Min" class='awrc'>1,490.90</td><td align="right" headers="perSecond Max" class='awrcrb'>1,494.15</td></tr>
<tr><td scope="row" class='awrnc'>session logical reads</td><td align="right" class='awrnc'>23,348,701</td><td align="right" class='awrnc'>37,616.40</td><td align="right" class='awrnc'>97.27</td><td align="right" headers="perSecond Average" class='awrnclb'>18,808.20</td><td align="right" headers="perSecond StdDev" class='awrnc'>32.51</td><td align="right" headers="perSecond Min" class='awrnc'>18,785.21</td><td align="right" headers="perSecond Max" class='awrncrb'>18,831.19</td></tr>
<tr><td scope="row" class='awrc'>shared hash latch upgrades - no wait</td><td align="right" class='awrc'>5,746,351</td><td align="right" class='awrc'>9,257.78</td><td align="right" class='awrc'>23.94</td><td align="right" headers="perSecond Average" class='awrclb'>4,628.89</td><td align="right" headers="perSecond StdDev" class='awrc'>21.56</td><td align="right" headers="perSecond Min" class='awrc'>4,613.64</td><td align="right" headers="perSecond Max" class='awrcrb'>4,644.14</td></tr>
<tr><td scope="row" class='awrnc'>shared hash latch upgrades - wait</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>shared io pool buffer get success</td><td align="right" class='awrc'>42</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>sorts (memory)</td><td align="right" class='awrnc'>2,183</td><td align="right" class='awrnc'>3.52</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>1.76</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.74</td><td align="right" headers="perSecond Min" class='awrnc'>1.24</td><td align="right" headers="perSecond Max" class='awrncrb'>2.28</td></tr>
<tr><td scope="row" class='awrc'>sorts (rows)</td><td align="right" class='awrc'>1,043,831</td><td align="right" class='awrc'>1,681.96</td><td align="right" class='awrc'>4.35</td><td align="right" headers="perSecond Average" class='awrclb'>840.98</td><td align="right" headers="perSecond StdDev" class='awrc'>990.32</td><td align="right" headers="perSecond Min" class='awrc'>140.72</td><td align="right" headers="perSecond Max" class='awrcrb'>1,541.24</td></tr>
<tr><td scope="row" class='awrnc'>sql area evicted</td><td align="right" class='awrnc'>426</td><td align="right" class='awrnc'>0.69</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.34</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.32</td><td align="right" headers="perSecond Max" class='awrncrb'>0.37</td></tr>
<tr><td scope="row" class='awrc'>sql area purged</td><td align="right" class='awrc'>58</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.05</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>summed dirty queue length</td><td align="right" class='awrnc'>11,156,572</td><td align="right" class='awrnc'>17,973.94</td><td align="right" class='awrnc'>46.48</td><td align="right" headers="perSecond Average" class='awrnclb'>8,986.97</td><td align="right" headers="perSecond StdDev" class='awrnc'>278.73</td><td align="right" headers="perSecond Min" class='awrnc'>8,789.88</td><td align="right" headers="perSecond Max" class='awrncrb'>9,184.06</td></tr>
<tr><td scope="row" class='awrc'>switch current caused by our pin</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>switch current to new buffer</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.06</td></tr>
<tr><td scope="row" class='awrc'>table fetch by rowid</td><td align="right" class='awrc'>27,093,180</td><td align="right" class='awrc'>43,649.00</td><td align="right" class='awrc'>112.87</td><td align="right" headers="perSecond Average" class='awrclb'>21,824.50</td><td align="right" headers="perSecond StdDev" class='awrc'>20.90</td><td align="right" headers="perSecond Min" class='awrc'>21,809.72</td><td align="right" headers="perSecond Max" class='awrcrb'>21,839.28</td></tr>
<tr><td scope="row" class='awrnc'>table fetch continued row</td><td align="right" class='awrnc'>240</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.19</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.08</td><td align="right" headers="perSecond Min" class='awrnc'>0.14</td><td align="right" headers="perSecond Max" class='awrncrb'>0.25</td></tr>
<tr><td scope="row" class='awrc'>table scan blocks gotten</td><td align="right" class='awrc'>16,644</td><td align="right" class='awrc'>26.82</td><td align="right" class='awrc'>0.07</td><td align="right" headers="perSecond Average" class='awrclb'>13.41</td><td align="right" headers="perSecond StdDev" class='awrc'>2.20</td><td align="right" headers="perSecond Min" class='awrc'>11.85</td><td align="right" headers="perSecond Max" class='awrcrb'>14.96</td></tr>
<tr><td scope="row" class='awrnc'>table scan disk non-IMC rows gotten</td><td align="right" class='awrnc'>1,080,741</td><td align="right" class='awrnc'>1,741.15</td><td align="right" class='awrnc'>4.50</td><td align="right" headers="perSecond Average" class='awrnclb'>870.58</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.65</td><td align="right" headers="perSecond Min" class='awrnc'>867.99</td><td align="right" headers="perSecond Max" class='awrncrb'>873.16</td></tr>
<tr><td scope="row" class='awrc'>table scan rows gotten</td><td align="right" class='awrc'>1,080,741</td><td align="right" class='awrc'>1,741.15</td><td align="right" class='awrc'>4.50</td><td align="right" headers="perSecond Average" class='awrclb'>870.58</td><td align="right" headers="perSecond StdDev" class='awrc'>3.65</td><td align="right" headers="perSecond Min" class='awrc'>867.99</td><td align="right" headers="perSecond Max" class='awrcrb'>873.16</td></tr>
<tr><td scope="row" class='awrnc'>table scans (short tables)</td><td align="right" class='awrnc'>1,345</td><td align="right" class='awrnc'>2.17</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>1.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.15</td><td align="right" headers="perSecond Min" class='awrnc'>0.98</td><td align="right" headers="perSecond Max" class='awrncrb'>1.19</td></tr>
<tr><td scope="row" class='awrc'>temp space allocated (bytes)</td><td align="right" class='awrc'>3,145,728</td><td align="right" class='awrc'>5,068.98</td><td align="right" class='awrc'>13.11</td><td align="right" headers="perSecond Average" class='awrclb'>5,068.98</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>5,068.98</td><td align="right" headers="perSecond Max" class='awrcrb'>5,068.98</td></tr>
<tr><td scope="row" class='awrnc'>total cf enq hold time</td><td align="right" class='awrnc'>27,161</td><td align="right" class='awrnc'>43.76</td><td align="right" class='awrnc'>0.11</td><td align="right" headers="perSecond Average" class='awrnclb'>21.88</td><td align="right" headers="perSecond StdDev" class='awrnc'>12.32</td><td align="right" headers="perSecond Min" class='awrnc'>13.17</td><td align="right" headers="perSecond Max" class='awrncrb'>30.60</td></tr>
<tr><td scope="row" class='awrc'>total number of cf enq holders</td><td align="right" class='awrc'>567</td><td align="right" class='awrc'>0.91</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.46</td><td align="right" headers="perSecond StdDev" class='awrc'>0.06</td><td align="right" headers="perSecond Min" class='awrc'>0.41</td><td align="right" headers="perSecond Max" class='awrcrb'>0.50</td></tr>
<tr><td scope="row" class='awrnc'>total number of times SMON posted</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.04</td><td align="right" headers="perSecond Max" class='awrncrb'>0.06</td></tr>
<tr><td scope="row" class='awrc'>transaction rollbacks</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction tables consistent reads - undo records applied</td><td align="right" class='awrnc'>3,099</td><td align="right" class='awrnc'>4.99</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>2.50</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.92</td><td align="right" headers="perSecond Min" class='awrnc'>1.14</td><td align="right" headers="perSecond Max" class='awrncrb'>3.85</td></tr>
<tr><td scope="row" class='awrc'>undo change vector size</td><td align="right" class='awrc'>916,422,388</td><td align="right" class='awrc'>1,476,420.79</td><td align="right" class='awrc'>3,817.90</td><td align="right" headers="perSecond Average" class='awrclb'>738,210.39</td><td align="right" headers="perSecond StdDev" class='awrc'>672.32</td><td align="right" headers="perSecond Min" class='awrc'>737,735.00</td><td align="right" headers="perSecond Max" class='awrcrb'>738,685.79</td></tr>
<tr><td scope="row" class='awrnc'>user I/O wait time</td><td align="right" class='awrnc'>4,952,692</td><td align="right" class='awrnc'>7,979.26</td><td align="right" class='awrnc'>20.63</td><td align="right" headers="perSecond Average" class='awrnclb'>3,989.63</td><td align="right" headers="perSecond StdDev" class='awrnc'>474.81</td><td align="right" headers="perSecond Min" class='awrnc'>3,653.89</td><td align="right" headers="perSecond Max" class='awrncrb'>4,325.38</td></tr>
<tr><td scope="row" class='awrc'>user calls</td><td align="right" class='awrc'>1,995</td><td align="right" class='awrc'>3.21</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>1.61</td><td align="right" headers="perSecond StdDev" class='awrc'>0.15</td><td align="right" headers="perSecond Min" class='awrc'>1.50</td><td align="right" headers="perSecond Max" class='awrcrb'>1.71</td></tr>
<tr><td scope="row" class='awrnc'>user commits</td><td align="right" class='awrnc'>240,033</td><td align="right" class='awrnc'>386.71</td><td align="right" class='awrnc'>1.00</td><td align="right" headers="perSecond Average" class='awrnclb'>193.35</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>193.34</td><td align="right" headers="perSecond Max" class='awrncrb'>193.37</td></tr>
<tr><td scope="row" class='awrc'>user logons cumulative</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>user logouts cumulative</td><td align="right" class='awrnc'>130</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.10</td><td align="right" headers="perSecond Max" class='awrncrb'>0.11</td></tr>
<tr><td scope="row" class='awrc'>workarea executions - optimal</td><td align="right" class='awrc'>2,221</td><td align="right" class='awrc'>3.58</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>1.79</td><td align="right" headers="perSecond StdDev" class='awrc'>0.18</td><td align="right" headers="perSecond Min" class='awrc'>1.66</td><td align="right" headers="perSecond Max" class='awrcrb'>1.92</td></tr>
<tr><td scope="row" class='awrnc'>write clones created in foreground</td><td align="right" class='awrnc'>153</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.12</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.11</td><td align="right" headers="perSecond Max" class='awrncrb'>0.14</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12072"></a>
<h3 class="awr">Global Messaging Statistics (Global)</h3>
<ul>
<li class="awr"> per Second Average - average of per-instance per Second rates </li>
<li class="awr"> per Second Std Dev - standard deviation of per-instance per Second rates </li>
<li class="awr"> per Second Min     - minimum of per-instance per Second rates </li>
<li class="awr"> per Second Max     - maximum of per-instance per Second rates</li>
</ul>
<table border="0" class="tdiff" summary="Global Messaging Statistics (Global). . per Second Average - average of per-instance per Second rates. per Second Std Dev - standard deviation of per-instance per Second rates. per Second Min - minimum of per-instance per Second rates. per Second Max - maximum of per-instance per Second rates"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="perSecond">per Second</th>
</tr><tr>
<th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th><th class="awrbg" scope="col" id="Average">Average</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim Broadcasts sent</td><td align="right" class='awrc'>188</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.15</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.14</td><td align="right" headers="perSecond Max" class='awrcrb'>0.16</td></tr>
<tr><td scope="row" class='awrnc'>Global Enqueue S-optim S-lock gets</td><td align="right" class='awrnc'>144,045</td><td align="right" class='awrnc'>232.08</td><td align="right" class='awrnc'>0.60</td><td align="right" headers="perSecond Average" class='awrnclb'>116.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>47.88</td><td align="right" headers="perSecond Min" class='awrnc'>82.18</td><td align="right" headers="perSecond Max" class='awrncrb'>149.90</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim anti-locks crea</td><td align="right" class='awrc'>95</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.08</td><td align="right" headers="perSecond Max" class='awrcrb'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>acks for commit broadcast(actual)</td><td align="right" class='awrnc'>18,984</td><td align="right" class='awrnc'>30.59</td><td align="right" class='awrnc'>0.08</td><td align="right" headers="perSecond Average" class='awrnclb'>15.29</td><td align="right" headers="perSecond StdDev" class='awrnc'>10.11</td><td align="right" headers="perSecond Min" class='awrnc'>8.14</td><td align="right" headers="perSecond Max" class='awrncrb'>22.44</td></tr>
<tr><td scope="row" class='awrc'>acks for commit broadcast(logical)</td><td align="right" class='awrc'>96,393</td><td align="right" class='awrc'>155.30</td><td align="right" class='awrc'>0.40</td><td align="right" headers="perSecond Average" class='awrclb'>77.65</td><td align="right" headers="perSecond StdDev" class='awrc'>22.04</td><td align="right" headers="perSecond Min" class='awrc'>62.06</td><td align="right" headers="perSecond Max" class='awrcrb'>93.24</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(actual)</td><td align="right" class='awrnc'>96,260</td><td align="right" class='awrnc'>155.08</td><td align="right" class='awrnc'>0.40</td><td align="right" headers="perSecond Average" class='awrnclb'>77.54</td><td align="right" headers="perSecond StdDev" class='awrnc'>21.50</td><td align="right" headers="perSecond Min" class='awrnc'>62.33</td><td align="right" headers="perSecond Max" class='awrncrb'>92.74</td></tr>
<tr><td scope="row" class='awrc'>broadcast msgs on commit(logical)</td><td align="right" class='awrc'>168,389</td><td align="right" class='awrc'>271.28</td><td align="right" class='awrc'>0.70</td><td align="right" headers="perSecond Average" class='awrclb'>135.64</td><td align="right" headers="perSecond StdDev" class='awrc'>23.71</td><td align="right" headers="perSecond Min" class='awrc'>118.87</td><td align="right" headers="perSecond Max" class='awrcrb'>152.41</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(wasted)</td><td align="right" class='awrnc'>75,204</td><td align="right" class='awrnc'>121.16</td><td align="right" class='awrnc'>0.31</td><td align="right" headers="perSecond Average" class='awrnclb'>60.58</td><td align="right" headers="perSecond StdDev" class='awrnc'>10.35</td><td align="right" headers="perSecond Min" class='awrnc'>53.26</td><td align="right" headers="perSecond Max" class='awrncrb'>67.89</td></tr>
<tr><td scope="row" class='awrc'>gcs assume no cvt</td><td align="right" class='awrc'>15,357</td><td align="right" class='awrc'>24.75</td><td align="right" class='awrc'>0.06</td><td align="right" headers="perSecond Average" class='awrclb'>12.37</td><td align="right" headers="perSecond StdDev" class='awrc'>14.42</td><td align="right" headers="perSecond Min" class='awrc'>2.18</td><td align="right" headers="perSecond Max" class='awrcrb'>22.57</td></tr>
<tr><td scope="row" class='awrnc'>gcs ast to fg</td><td align="right" class='awrnc'>452,402</td><td align="right" class='awrnc'>728.71</td><td align="right" class='awrnc'>1.88</td><td align="right" headers="perSecond Average" class='awrnclb'>364.36</td><td align="right" headers="perSecond StdDev" class='awrnc'>495.93</td><td align="right" headers="perSecond Min" class='awrnc'>13.68</td><td align="right" headers="perSecond Max" class='awrncrb'>715.03</td></tr>
<tr><td scope="row" class='awrc'>gcs ast xid</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs bidless ast to lms</td><td align="right" class='awrnc'>1,520</td><td align="right" class='awrnc'>2.45</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>1.22</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.72</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>2.44</td></tr>
<tr><td scope="row" class='awrc'>gcs blocked converts</td><td align="right" class='awrc'>126,503</td><td align="right" class='awrc'>203.80</td><td align="right" class='awrc'>0.53</td><td align="right" headers="perSecond Average" class='awrclb'>101.90</td><td align="right" headers="perSecond StdDev" class='awrc'>1.14</td><td align="right" headers="perSecond Min" class='awrc'>101.09</td><td align="right" headers="perSecond Max" class='awrcrb'>102.71</td></tr>
<tr><td scope="row" class='awrnc'>gcs blocked cr converts</td><td align="right" class='awrnc'>6,511</td><td align="right" class='awrnc'>10.49</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>5.24</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.02</td><td align="right" headers="perSecond Min" class='awrnc'>4.52</td><td align="right" headers="perSecond Max" class='awrncrb'>5.97</td></tr>
<tr><td scope="row" class='awrc'>gcs compatible basts</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible cr basts (global)</td><td align="right" class='awrnc'>47</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.05</td></tr>
<tr><td scope="row" class='awrc'>gcs compatible cr basts (local)</td><td align="right" class='awrc'>23,342</td><td align="right" class='awrc'>37.61</td><td align="right" class='awrc'>0.10</td><td align="right" headers="perSecond Average" class='awrclb'>18.80</td><td align="right" headers="perSecond StdDev" class='awrc'>3.42</td><td align="right" headers="perSecond Min" class='awrc'>16.38</td><td align="right" headers="perSecond Max" class='awrcrb'>21.22</td></tr>
<tr><td scope="row" class='awrnc'>gcs cr requests to slave</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gcs dbwr flush pi msgs</td><td align="right" class='awrc'>1,114,403</td><td align="right" class='awrc'>1,795.42</td><td align="right" class='awrc'>4.64</td><td align="right" headers="perSecond Average" class='awrclb'>897.71</td><td align="right" headers="perSecond StdDev" class='awrc'>155.48</td><td align="right" headers="perSecond Min" class='awrc'>787.77</td><td align="right" headers="perSecond Max" class='awrcrb'>1,007.66</td></tr>
<tr><td scope="row" class='awrnc'>gcs dbwr write request msgs</td><td align="right" class='awrnc'>357</td><td align="right" class='awrnc'>0.58</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.29</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.33</td><td align="right" headers="perSecond Min" class='awrnc'>0.06</td><td align="right" headers="perSecond Max" class='awrncrb'>0.52</td></tr>
<tr><td scope="row" class='awrc'>gcs force cr block only</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs force cr grant</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs grant ast</td><td align="right" class='awrc'>453,922</td><td align="right" class='awrc'>731.16</td><td align="right" class='awrc'>1.89</td><td align="right" headers="perSecond Average" class='awrclb'>365.58</td><td align="right" headers="perSecond StdDev" class='awrc'>497.66</td><td align="right" headers="perSecond Min" class='awrc'>13.68</td><td align="right" headers="perSecond Max" class='awrcrb'>717.48</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate (compatible) converts</td><td align="right" class='awrnc'>14,735</td><td align="right" class='awrnc'>23.74</td><td align="right" class='awrnc'>0.06</td><td align="right" headers="perSecond Average" class='awrnclb'>11.87</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.41</td><td align="right" headers="perSecond Min" class='awrnc'>11.58</td><td align="right" headers="perSecond Max" class='awrncrb'>12.16</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate (null) converts</td><td align="right" class='awrc'>2,048,574</td><td align="right" class='awrc'>3,300.39</td><td align="right" class='awrc'>8.53</td><td align="right" headers="perSecond Average" class='awrclb'>1,650.20</td><td align="right" headers="perSecond StdDev" class='awrc'>10.52</td><td align="right" headers="perSecond Min" class='awrc'>1,642.76</td><td align="right" headers="perSecond Max" class='awrcrb'>1,657.63</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate cr (compatible) converts</td><td align="right" class='awrnc'>165,531</td><td align="right" class='awrnc'>266.68</td><td align="right" class='awrnc'>0.69</td><td align="right" headers="perSecond Average" class='awrnclb'>133.34</td><td align="right" headers="perSecond StdDev" class='awrnc'>6.83</td><td align="right" headers="perSecond Min" class='awrnc'>128.51</td><td align="right" headers="perSecond Max" class='awrncrb'>138.17</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate cr (null) converts</td><td align="right" class='awrc'>11,662,220</td><td align="right" class='awrc'>18,788.64</td><td align="right" class='awrc'>48.59</td><td align="right" headers="perSecond Average" class='awrclb'>9,394.32</td><td align="right" headers="perSecond StdDev" class='awrc'>55.23</td><td align="right" headers="perSecond Min" class='awrc'>9,355.27</td><td align="right" headers="perSecond Max" class='awrcrb'>9,433.37</td></tr>
<tr><td scope="row" class='awrnc'>gcs lms write request msgs</td><td align="right" class='awrnc'>208</td><td align="right" class='awrnc'>0.34</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.17</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.16</td><td align="right" headers="perSecond Min" class='awrnc'>0.05</td><td align="right" headers="perSecond Max" class='awrncrb'>0.28</td></tr>
<tr><td scope="row" class='awrc'>gcs msgs process time(ms)</td><td align="right" class='awrc'>567,810</td><td align="right" class='awrc'>914.80</td><td align="right" class='awrc'>2.37</td><td align="right" headers="perSecond Average" class='awrclb'>457.40</td><td align="right" headers="perSecond StdDev" class='awrc'>56.12</td><td align="right" headers="perSecond Min" class='awrc'>417.72</td><td align="right" headers="perSecond Max" class='awrcrb'>497.08</td></tr>
<tr><td scope="row" class='awrnc'>gcs msgs received</td><td align="right" class='awrnc'>22,691,472</td><td align="right" class='awrnc'>36,557.06</td><td align="right" class='awrnc'>94.53</td><td align="right" headers="perSecond Average" class='awrnclb'>18,278.53</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,750.96</td><td align="right" headers="perSecond Min" class='awrnc'>17,040.42</td><td align="right" headers="perSecond Max" class='awrncrb'>19,516.65</td></tr>
<tr><td scope="row" class='awrc'>gcs new served by master</td><td align="right" class='awrc'>437</td><td align="right" class='awrc'>0.70</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.35</td><td align="right" headers="perSecond StdDev" class='awrc'>0.33</td><td align="right" headers="perSecond Min" class='awrc'>0.12</td><td align="right" headers="perSecond Max" class='awrcrb'>0.59</td></tr>
<tr><td scope="row" class='awrnc'>gcs out-of-order msgs</td><td align="right" class='awrnc'>93</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.09</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.14</td></tr>
<tr><td scope="row" class='awrc'>gcs pings refused</td><td align="right" class='awrc'>2,015</td><td align="right" class='awrc'>3.25</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>1.62</td><td align="right" headers="perSecond StdDev" class='awrc'>0.05</td><td align="right" headers="perSecond Min" class='awrc'>1.59</td><td align="right" headers="perSecond Max" class='awrcrb'>1.66</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass grant immediate</td><td align="right" class='awrnc'>56</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.06</td></tr>
<tr><td scope="row" class='awrc'>gcs refuse xid</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs refuse xid to fg</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs side channel msgs actual</td><td align="right" class='awrc'>6,679</td><td align="right" class='awrc'>10.76</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>5.38</td><td align="right" headers="perSecond StdDev" class='awrc'>0.13</td><td align="right" headers="perSecond Min" class='awrc'>5.29</td><td align="right" headers="perSecond Max" class='awrcrb'>5.47</td></tr>
<tr><td scope="row" class='awrnc'>gcs side channel msgs logical</td><td align="right" class='awrnc'>486,562</td><td align="right" class='awrnc'>784.02</td><td align="right" class='awrnc'>2.03</td><td align="right" headers="perSecond Average" class='awrnclb'>392.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>470.77</td><td align="right" headers="perSecond Min" class='awrnc'>59.12</td><td align="right" headers="perSecond Max" class='awrncrb'>724.89</td></tr>
<tr><td scope="row" class='awrc'>gcs stale cr</td><td align="right" class='awrc'>102</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrc'>0.11</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.16</td></tr>
<tr><td scope="row" class='awrnc'>gcs undo cr</td><td align="right" class='awrnc'>50</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.08</td><td align="right" headers="perSecond Max" class='awrncrb'>0.08</td></tr>
<tr><td scope="row" class='awrc'>gcs writes refused</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges msgs process time(ms)</td><td align="right" class='awrnc'>420</td><td align="right" class='awrnc'>0.68</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.34</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.11</td><td align="right" headers="perSecond Min" class='awrnc'>0.26</td><td align="right" headers="perSecond Max" class='awrncrb'>0.42</td></tr>
<tr><td scope="row" class='awrc'>ges msgs received</td><td align="right" class='awrc'>17,283</td><td align="right" class='awrc'>27.85</td><td align="right" class='awrc'>0.07</td><td align="right" headers="perSecond Average" class='awrclb'>13.92</td><td align="right" headers="perSecond StdDev" class='awrc'>3.69</td><td align="right" headers="perSecond Min" class='awrc'>11.32</td><td align="right" headers="perSecond Max" class='awrcrb'>16.53</td></tr>
<tr><td scope="row" class='awrnc'>implicit batch messages received</td><td align="right" class='awrnc'>365,298</td><td align="right" class='awrnc'>588.51</td><td align="right" class='awrnc'>1.52</td><td align="right" headers="perSecond Average" class='awrnclb'>294.26</td><td align="right" headers="perSecond StdDev" class='awrnc'>35.66</td><td align="right" headers="perSecond Min" class='awrnc'>269.04</td><td align="right" headers="perSecond Max" class='awrncrb'>319.47</td></tr>
<tr><td scope="row" class='awrc'>implicit batch messages sent</td><td align="right" class='awrc'>365,500</td><td align="right" class='awrc'>588.86</td><td align="right" class='awrc'>1.52</td><td align="right" headers="perSecond Average" class='awrclb'>294.43</td><td align="right" headers="perSecond StdDev" class='awrc'>38.11</td><td align="right" headers="perSecond Min" class='awrc'>267.48</td><td align="right" headers="perSecond Max" class='awrcrb'>321.37</td></tr>
<tr><td scope="row" class='awrnc'>messages flow controlled</td><td align="right" class='awrnc'>36,964</td><td align="right" class='awrnc'>59.56</td><td align="right" class='awrnc'>0.15</td><td align="right" headers="perSecond Average" class='awrnclb'>29.78</td><td align="right" headers="perSecond StdDev" class='awrnc'>12.38</td><td align="right" headers="perSecond Min" class='awrnc'>21.02</td><td align="right" headers="perSecond Max" class='awrncrb'>38.53</td></tr>
<tr><td scope="row" class='awrc'>messages queue sent actual</td><td align="right" class='awrc'>3,856,697</td><td align="right" class='awrc'>6,213.33</td><td align="right" class='awrc'>16.07</td><td align="right" headers="perSecond Average" class='awrclb'>3,106.67</td><td align="right" headers="perSecond StdDev" class='awrc'>276.15</td><td align="right" headers="perSecond Min" class='awrc'>2,911.40</td><td align="right" headers="perSecond Max" class='awrcrb'>3,301.93</td></tr>
<tr><td scope="row" class='awrnc'>messages queue sent logical</td><td align="right" class='awrnc'>2,269,519</td><td align="right" class='awrnc'>3,656.43</td><td align="right" class='awrnc'>9.46</td><td align="right" headers="perSecond Average" class='awrnclb'>1,828.22</td><td align="right" headers="perSecond StdDev" class='awrnc'>280.12</td><td align="right" headers="perSecond Min" class='awrnc'>1,630.14</td><td align="right" headers="perSecond Max" class='awrncrb'>2,026.29</td></tr>
<tr><td scope="row" class='awrc'>messages received actual</td><td align="right" class='awrc'>8,793,250</td><td align="right" class='awrc'>14,166.41</td><td align="right" class='awrc'>36.63</td><td align="right" headers="perSecond Average" class='awrclb'>7,083.20</td><td align="right" headers="perSecond StdDev" class='awrc'>482.95</td><td align="right" headers="perSecond Min" class='awrc'>6,741.70</td><td align="right" headers="perSecond Max" class='awrcrb'>7,424.70</td></tr>
<tr><td scope="row" class='awrnc'>messages received logical</td><td align="right" class='awrnc'>22,708,755</td><td align="right" class='awrnc'>36,584.91</td><td align="right" class='awrnc'>94.61</td><td align="right" headers="perSecond Average" class='awrnclb'>18,292.45</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,747.27</td><td align="right" headers="perSecond Min" class='awrnc'>17,056.95</td><td align="right" headers="perSecond Max" class='awrncrb'>19,527.96</td></tr>
<tr><td scope="row" class='awrc'>messages sent directly</td><td align="right" class='awrc'>2,369,048</td><td align="right" class='awrc'>3,816.80</td><td align="right" class='awrc'>9.87</td><td align="right" headers="perSecond Average" class='awrclb'>1,908.40</td><td align="right" headers="perSecond StdDev" class='awrc'>351.16</td><td align="right" headers="perSecond Min" class='awrc'>1,660.09</td><td align="right" headers="perSecond Max" class='awrcrb'>2,156.71</td></tr>
<tr><td scope="row" class='awrnc'>messages sent indirectly</td><td align="right" class='awrnc'>8,791,796</td><td align="right" class='awrnc'>14,164.58</td><td align="right" class='awrnc'>36.63</td><td align="right" headers="perSecond Average" class='awrnclb'>7,082.29</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,381.63</td><td align="right" headers="perSecond Min" class='awrnc'>6,105.33</td><td align="right" headers="perSecond Max" class='awrncrb'>8,059.25</td></tr>
<tr><td scope="row" class='awrc'>messages sent not implicit batched</td><td align="right" class='awrc'>159,365</td><td align="right" class='awrc'>256.75</td><td align="right" class='awrc'>0.66</td><td align="right" headers="perSecond Average" class='awrclb'>128.37</td><td align="right" headers="perSecond StdDev" class='awrc'>2.23</td><td align="right" headers="perSecond Min" class='awrc'>126.80</td><td align="right" headers="perSecond Max" class='awrcrb'>129.95</td></tr>
<tr><td scope="row" class='awrnc'>messages sent pbatched</td><td align="right" class='awrnc'>18,890,858</td><td align="right" class='awrnc'>30,434.88</td><td align="right" class='awrnc'>78.70</td><td align="right" headers="perSecond Average" class='awrnclb'>15,217.44</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,389.09</td><td align="right" headers="perSecond Min" class='awrnc'>14,235.21</td><td align="right" headers="perSecond Max" class='awrncrb'>16,199.67</td></tr>
<tr><td scope="row" class='awrc'>msgs received kernel queue time (ns)</td><td align="right" class='awrc'>2,962,291,883,260</td><td align="right" class='awrc'>4,772,833,211.67</td><td align="right" class='awrc'>12,341,185.93</td><td align="right" headers="perSecond Average" class='awrclb'>2,386,416,605.84</td><td align="right" headers="perSecond StdDev" class='awrc'>1,349,856,999.90</td><td align="right" headers="perSecond Min" class='awrc'>1,431,923,567.57</td><td align="right" headers="perSecond Max" class='awrcrb'>3,340,909,644.10</td></tr>
<tr><td scope="row" class='awrnc'>msgs received queue time (ms)</td><td align="right" class='awrnc'>866,509</td><td align="right" class='awrnc'>1,396.10</td><td align="right" class='awrnc'>3.61</td><td align="right" headers="perSecond Average" class='awrnclb'>698.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>340.58</td><td align="right" headers="perSecond Min" class='awrnc'>457.22</td><td align="right" headers="perSecond Max" class='awrncrb'>938.88</td></tr>
<tr><td scope="row" class='awrc'>msgs received queued</td><td align="right" class='awrc'>22,708,755</td><td align="right" class='awrc'>36,584.91</td><td align="right" class='awrc'>94.61</td><td align="right" headers="perSecond Average" class='awrclb'>18,292.45</td><td align="right" headers="perSecond StdDev" class='awrc'>1,747.27</td><td align="right" headers="perSecond Min" class='awrc'>17,056.95</td><td align="right" headers="perSecond Max" class='awrcrb'>19,527.96</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queue time (ms)</td><td align="right" class='awrnc'>809,125</td><td align="right" class='awrnc'>1,303.63</td><td align="right" class='awrnc'>3.37</td><td align="right" headers="perSecond Average" class='awrnclb'>651.81</td><td align="right" headers="perSecond StdDev" class='awrnc'>246.42</td><td align="right" headers="perSecond Min" class='awrnc'>477.57</td><td align="right" headers="perSecond Max" class='awrncrb'>826.06</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queue time on ksxp (ms)</td><td align="right" class='awrc'>27,708,161</td><td align="right" class='awrc'>44,637.54</td><td align="right" class='awrc'>115.43</td><td align="right" headers="perSecond Average" class='awrclb'>22,318.77</td><td align="right" headers="perSecond StdDev" class='awrc'>8,122.58</td><td align="right" headers="perSecond Min" class='awrc'>16,575.24</td><td align="right" headers="perSecond Max" class='awrcrb'>28,062.30</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queued</td><td align="right" class='awrnc'>4,873,534</td><td align="right" class='awrnc'>7,851.57</td><td align="right" class='awrnc'>20.30</td><td align="right" headers="perSecond Average" class='awrnclb'>3,925.79</td><td align="right" headers="perSecond StdDev" class='awrnc'>111.43</td><td align="right" headers="perSecond Min" class='awrnc'>3,847.00</td><td align="right" headers="perSecond Max" class='awrncrb'>4,004.58</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queued on ksxp</td><td align="right" class='awrc'>8,790,546</td><td align="right" class='awrc'>14,162.33</td><td align="right" class='awrc'>36.62</td><td align="right" headers="perSecond Average" class='awrclb'>7,081.17</td><td align="right" headers="perSecond StdDev" class='awrc'>539.68</td><td align="right" headers="perSecond Min" class='awrc'>6,699.55</td><td align="right" headers="perSecond Max" class='awrcrb'>7,462.78</td></tr>
<tr><td scope="row" class='awrnc'>number of directly freed master res</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.04</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>process batch messages received</td><td align="right" class='awrc'>5,709,859</td><td align="right" class='awrc'>9,198.95</td><td align="right" class='awrc'>23.79</td><td align="right" headers="perSecond Average" class='awrclb'>4,599.47</td><td align="right" headers="perSecond StdDev" class='awrc'>127.53</td><td align="right" headers="perSecond Min" class='awrc'>4,509.30</td><td align="right" headers="perSecond Max" class='awrcrb'>4,689.65</td></tr>
<tr><td scope="row" class='awrnc'>process batch messages sent</td><td align="right" class='awrnc'>5,988,545</td><td align="right" class='awrnc'>9,648.02</td><td align="right" class='awrnc'>24.95</td><td align="right" headers="perSecond Average" class='awrnclb'>4,824.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>201.51</td><td align="right" headers="perSecond Min" class='awrnc'>4,681.52</td><td align="right" headers="perSecond Max" class='awrncrb'>4,966.50</td></tr>
<tr><td scope="row" class='awrc'>receiver cycle time</td><td align="right" class='awrc'>1,834,030</td><td align="right" class='awrc'>2,954.75</td><td align="right" class='awrc'>7.64</td><td align="right" headers="perSecond Average" class='awrclb'>1,477.38</td><td align="right" headers="perSecond StdDev" class='awrc'>2.00</td><td align="right" headers="perSecond Min" class='awrc'>1,475.96</td><td align="right" headers="perSecond Max" class='awrcrb'>1,478.79</td></tr>
<tr><td scope="row" class='awrnc'>receiver loop count</td><td align="right" class='awrnc'>7,058,752</td><td align="right" class='awrnc'>11,371.92</td><td align="right" class='awrnc'>29.41</td><td align="right" headers="perSecond Average" class='awrnclb'>5,685.96</td><td align="right" headers="perSecond StdDev" class='awrnc'>810.25</td><td align="right" headers="perSecond Min" class='awrnc'>5,113.03</td><td align="right" headers="perSecond Max" class='awrncrb'>6,258.89</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12073"></a>
<h3 class="awr">System Statistics (Absolute Values)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics (Absolute Values)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Sessions">Sessions</th>
<th class="awrbg" colspan=" 2" id="OpenCursors">Open Cursors</th>
<th class="awrbg" colspan=" 2" id="SessionCachedCursors">Session Cached Cursors</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sessions Begin" class='awrclb'>192</td><td align="right" headers="Sessions End" class='awrc'>127</td><td align="right" headers="OpenCursors Begin" class='awrclb'>391</td><td align="right" headers="OpenCursors End" class='awrc'>126</td><td align="right" headers="SessionCachedCursors Begin" class='awrclb'>14,774</td><td align="right" headers="SessionCachedCursors End" class='awrcrb'>15,073</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sessions Begin" class='awrnclb'>183</td><td align="right" headers="Sessions End" class='awrnc'>120</td><td align="right" headers="OpenCursors Begin" class='awrnclb'>410</td><td align="right" headers="OpenCursors End" class='awrnc'>93</td><td align="right" headers="SessionCachedCursors Begin" class='awrnclb'>20,645</td><td align="right" headers="SessionCachedCursors End" class='awrncrb'>21,010</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>375</td><td align="right" class='awrct'>247</td><td align="right" class='awrclbt'>801</td><td align="right" class='awrct'>219</td><td align="right" class='awrclbt'>35,419</td><td align="right" class='awrcrbt'>36,083</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>188</td><td align="right" class='awrnc'>124</td><td align="right" class='awrnclb'>401</td><td align="right" class='awrnc'>110</td><td align="right" class='awrnclb'>17,710</td><td align="right" class='awrncrb'>18,042</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>6</td><td align="right" class='awrc'>5</td><td align="right" class='awrclb'>13</td><td align="right" class='awrc'>23</td><td align="right" class='awrclb'>4,151</td><td align="right" class='awrcrb'>4,198</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="630"></a>
<h2 class="awr">
I/O Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12097">IO Profile (Global)</a></li>
<li class="awr"><a class="awr" href="#12076">IOStat by Function</a></li>
<li class="awr"><a class="awr" href="#12077">IOStat by File Type</a></li>
<li class="awr"><a class="awr" href="#12070">Segment Statistics (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12097"></a>
<h3 class="awr">IO Profile (Global)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IO Profile (Global)"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Read+Write/s</th><th class="awrbg" scope="col">Reads/s</th><th class="awrbg" scope="col">Writes/s</th></tr>
<tr><td class='awrc'>Total Requests</td><td align="right" class='awrc'>33,056.84</td><td align="right" class='awrc'>28,427.85</td><td align="right" class='awrc'>4,628.99</td></tr>
<tr><td class='awrnc'>Database Requests</td><td align="right" class='awrnc'>32,658.03</td><td align="right" class='awrnc'>28,410.52</td><td align="right" class='awrnc'>4,247.51</td></tr>
<tr><td class='awrc'>Optimized Requests</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>Redo Requests</td><td align="right" class='awrnc'>272.23</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>272.23</td></tr>
<tr><td class='awrc'>Total (MB)</td><td align="right" class='awrc'>265.13</td><td align="right" class='awrc'>226.52</td><td align="right" class='awrc'>38.61</td></tr>
<tr><td class='awrnc'>Database (MB)</td><td align="right" class='awrnc'>256.59</td><td align="right" class='awrnc'>221.97</td><td align="right" class='awrnc'>34.62</td></tr>
<tr><td class='awrc'>Optimized Total (MB)</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>Redo (MB)</td><td align="right" class='awrnc'>3.43</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3.43</td></tr>
<tr><td class='awrc'>Database (blocks)</td><td align="right" class='awrc'>32,844.09</td><td align="right" class='awrc'>28,412.13</td><td align="right" class='awrc'>4,431.97</td></tr>
<tr><td class='awrnc'>Via Buffer Cache (blocks)</td><td align="right" class='awrnc'>32,841.74</td><td align="right" class='awrnc'>28,412.10</td><td align="right" class='awrnc'>4,429.64</td></tr>
<tr><td class='awrc'>Direct (blocks)</td><td align="right" class='awrc'>2.35</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>2.33</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12076"></a>
<h3 class="awr">IOStat by Function</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IOStat by Function"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="Requests">Requests</th>
<th class="awrbg" colspan=" 4" id="MB">MB</th>
<td>&#160;</td><td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Function Name</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOs/s">IOs/s</th><th class="awrbg" scope="col" id="Reads/s">Reads/s</th><th class="awrbg" scope="col" id="Writes/s">Writes/s</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOMB/s">IO MB/s</th><th class="awrbg" scope="col" id="ReadMB/s">Read MB/s</th><th class="awrbg" scope="col" id="WriteMB/s">Write MB/s</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time </th></tr>
<tr><td align="right" scope="row" class='awrc'>*</td><td class='awrc'>Total</td><td align="right" headers="Requests Total" class='awrclb'>20,327,545</td><td align="right" headers="Requests IOs/s" class='awrc'>32,742.69</td><td align="right" headers="Requests Reads/s" class='awrc'>28,153.52</td><td align="right" headers="Requests Writes/s" class='awrc'>4,589.17</td><td align="right" headers="MB Total" class='awrclb'>163,055</td><td align="right" headers="MB IOMB/s" class='awrc'>262.64</td><td align="right" headers="MB ReadMB/s" class='awrc'>224.37</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>38.27</td><td align="right" class='awrc'>7M</td><td align="right" class='awrc'>7.23ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrnclb'>17,467,635</td><td align="right" headers="Requests IOs/s" class='awrnc'>28,136.07</td><td align="right" headers="Requests Reads/s" class='awrnc'>28,136.07</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>136,482</td><td align="right" headers="MB IOMB/s" class='awrnc'>219.84</td><td align="right" headers="MB ReadMB/s" class='awrnc'>219.84</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>6.8M</td><td align="right" class='awrnc'>7.21ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>DBWR</td><td align="right" headers="Requests Total" class='awrclb'>2,614,577</td><td align="right" headers="Requests IOs/s" class='awrc'>4,211.44</td><td align="right" headers="Requests Reads/s" class='awrc'>0.43</td><td align="right" headers="Requests Writes/s" class='awrc'>4,211.02</td><td align="right" headers="MB Total" class='awrclb'>21,307</td><td align="right" headers="MB IOMB/s" class='awrc'>34.32</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.01</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>34.31</td><td align="right" class='awrc'>264</td><td align="right" class='awrc'>4.39ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Others</td><td align="right" headers="Requests Total" class='awrnclb'>12,390</td><td align="right" headers="Requests IOs/s" class='awrnc'>19.96</td><td align="right" headers="Requests Reads/s" class='awrnc'>16.99</td><td align="right" headers="Requests Writes/s" class='awrnc'>2.96</td><td align="right" headers="MB Total" class='awrnclb'>3,025</td><td align="right" headers="MB IOMB/s" class='awrnc'>4.87</td><td align="right" headers="MB ReadMB/s" class='awrnc'>4.52</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.35</td><td align="right" class='awrnc'>6935</td><td align="right" class='awrnc'>8.29ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>LGWR</td><td align="right" headers="Requests Total" class='awrclb'>232,900</td><td align="right" headers="Requests IOs/s" class='awrc'>375.14</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>375.14</td><td align="right" headers="MB Total" class='awrclb'>2,236</td><td align="right" headers="MB IOMB/s" class='awrc'>3.60</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>3.60</td><td align="right" class='awrc'>167.8K</td><td align="right" class='awrc'>8.28ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Direct Reads</td><td align="right" headers="Requests Total" class='awrnclb'>17</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.03</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.02</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>3</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrclb'>26</td><td align="right" headers="Requests IOs/s" class='awrc'>0.04</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>0.04</td><td align="right" headers="MB Total" class='awrclb'>2</td><td align="right" headers="MB IOMB/s" class='awrc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnct'>1</td><td class='awrnct'>Total</td><td align="right" headers="Requests Total" class='awrnclbt'>10,221,971</td><td align="right" headers="Requests IOs/s" class='awrnct'>16,465.09</td><td align="right" headers="Requests Reads/s" class='awrnct'>14,171.94</td><td align="right" headers="Requests Writes/s" class='awrnct'>2,293.15</td><td align="right" headers="MB Total" class='awrnclbt'>82,050</td><td align="right" headers="MB IOMB/s" class='awrnct'>132.16</td><td align="right" headers="MB ReadMB/s" class='awrnct'>112.95</td><td align="right" headers="MB WriteMB/s" class='awrncrbt'>19.21</td><td align="right" class='awrnct'>3.5M</td><td align="right" class='awrnct'>7.80ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrclb'>8,792,672</td><td align="right" headers="Requests IOs/s" class='awrc'>14,162.84</td><td align="right" headers="Requests Reads/s" class='awrc'>14,162.84</td><td align="right" headers="Requests Writes/s" class='awrc'>0.00</td><td align="right" headers="MB Total" class='awrclb'>68,710</td><td align="right" headers="MB IOMB/s" class='awrc'>110.67</td><td align="right" headers="MB ReadMB/s" class='awrc'>110.67</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.00</td><td align="right" class='awrc'>3.4M</td><td align="right" class='awrc'>7.75ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>DBWR</td><td align="right" headers="Requests Total" class='awrnclb'>1,313,093</td><td align="right" headers="Requests IOs/s" class='awrnc'>2,115.07</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.21</td><td align="right" headers="Requests Writes/s" class='awrnc'>2,114.86</td><td align="right" headers="MB Total" class='awrnclb'>10,699</td><td align="right" headers="MB IOMB/s" class='awrnc'>17.23</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>17.23</td><td align="right" class='awrnc'>132</td><td align="right" class='awrnc'>4.57ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Others</td><td align="right" headers="Requests Total" class='awrclb'>6,573</td><td align="right" headers="Requests IOs/s" class='awrc'>10.59</td><td align="right" headers="Requests Reads/s" class='awrc'>8.86</td><td align="right" headers="Requests Writes/s" class='awrc'>1.73</td><td align="right" headers="MB Total" class='awrclb'>1,516</td><td align="right" headers="MB IOMB/s" class='awrc'>2.44</td><td align="right" headers="MB ReadMB/s" class='awrc'>2.27</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.17</td><td align="right" class='awrc'>3749</td><td align="right" class='awrc'>7.94ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>LGWR</td><td align="right" headers="Requests Total" class='awrnclb'>109,600</td><td align="right" headers="Requests IOs/s" class='awrnc'>176.54</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>176.54</td><td align="right" headers="MB Total" class='awrnclb'>1,120</td><td align="right" headers="MB IOMB/s" class='awrnc'>1.80</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>1.80</td><td align="right" class='awrnc'>73.9K</td><td align="right" class='awrnc'>9.89ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Direct Reads</td><td align="right" headers="Requests Total" class='awrclb'>17</td><td align="right" headers="Requests IOs/s" class='awrc'>0.03</td><td align="right" headers="Requests Reads/s" class='awrc'>0.02</td><td align="right" headers="Requests Writes/s" class='awrc'>0.00</td><td align="right" headers="MB Total" class='awrclb'>3</td><td align="right" headers="MB IOMB/s" class='awrc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrnclb'>16</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.03</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.03</td><td align="right" headers="MB Total" class='awrnclb'>2</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>2</td><td class='awrct'>Total</td><td align="right" headers="Requests Total" class='awrclbt'>10,105,574</td><td align="right" headers="Requests IOs/s" class='awrct'>16,277.60</td><td align="right" headers="Requests Reads/s" class='awrct'>13,981.58</td><td align="right" headers="Requests Writes/s" class='awrct'>2,296.02</td><td align="right" headers="MB Total" class='awrclbt'>81,005</td><td align="right" headers="MB IOMB/s" class='awrct'>130.48</td><td align="right" headers="MB ReadMB/s" class='awrct'>111.42</td><td align="right" headers="MB WriteMB/s" class='awrcrbt'>19.06</td><td align="right" class='awrct'>3.5M</td><td align="right" class='awrct'>6.66ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrnclb'>8,674,963</td><td align="right" headers="Requests IOs/s" class='awrnc'>13,973.24</td><td align="right" headers="Requests Reads/s" class='awrnc'>13,973.24</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>67,772</td><td align="right" headers="MB IOMB/s" class='awrnc'>109.16</td><td align="right" headers="MB ReadMB/s" class='awrnc'>109.16</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>3.4M</td><td align="right" class='awrnc'>6.65ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>DBWR</td><td align="right" headers="Requests Total" class='awrclb'>1,301,484</td><td align="right" headers="Requests IOs/s" class='awrc'>2,096.37</td><td align="right" headers="Requests Reads/s" class='awrc'>0.21</td><td align="right" headers="Requests Writes/s" class='awrc'>2,096.16</td><td align="right" headers="MB Total" class='awrclb'>10,608</td><td align="right" headers="MB IOMB/s" class='awrc'>17.09</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>17.08</td><td align="right" class='awrc'>132</td><td align="right" class='awrc'>4.20ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Others</td><td align="right" headers="Requests Total" class='awrnclb'>5,817</td><td align="right" headers="Requests IOs/s" class='awrnc'>9.37</td><td align="right" headers="Requests Reads/s" class='awrnc'>8.13</td><td align="right" headers="Requests Writes/s" class='awrnc'>1.24</td><td align="right" headers="MB Total" class='awrnclb'>1,509</td><td align="right" headers="MB IOMB/s" class='awrnc'>2.43</td><td align="right" headers="MB ReadMB/s" class='awrnc'>2.25</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.18</td><td align="right" class='awrnc'>3186</td><td align="right" class='awrnc'>8.70ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>LGWR</td><td align="right" headers="Requests Total" class='awrclb'>123,300</td><td align="right" headers="Requests IOs/s" class='awrc'>198.61</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>198.61</td><td align="right" headers="MB Total" class='awrclb'>1,116</td><td align="right" headers="MB IOMB/s" class='awrc'>1.80</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>1.80</td><td align="right" class='awrc'>93.9K</td><td align="right" class='awrc'>7.01ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrnclb'>10</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.02</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.02</td><td align="right" headers="MB Total" class='awrnclb'>0</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12077"></a>
<h3 class="awr">IOStat by File Type</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IOStat by File Type"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="Requests">Requests</th>
<th class="awrbg" colspan=" 4" id="MB">MB</th>
<th class="awrbg" colspan=" 2" id="ServiceTime">Service Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Filetype Name</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOs/s">IOs/s</th><th class="awrbg" scope="col" id="Reads/s">Reads/s</th><th class="awrbg" scope="col" id="Writes/s">Writes/s</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOMB/s">IO MB/s</th><th class="awrbg" scope="col" id="ReadMB/s">Read MB/s</th><th class="awrbg" scope="col" id="WriteMB/s">Write MB/s</th><th class="awrbg" scope="col" id="Small|Read">Small Read</th><th class="awrbg" scope="col" id="Large|Read">Large Read</th></tr>
<tr><td align="right" scope="row" class='awrc'>*</td><td class='awrc'>Total</td><td align="right" headers="Requests Total" class='awrclb'>20,320,070</td><td align="right" headers="Requests IOs/s" class='awrc'>32,730.65</td><td align="right" headers="Requests Reads/s" class='awrc'>28,143.63</td><td align="right" headers="Requests Writes/s" class='awrc'>4,587.02</td><td align="right" headers="MB Total" class='awrclb'>162,810</td><td align="right" headers="MB IOMB/s" class='awrc'>262.25</td><td align="right" headers="MB ReadMB/s" class='awrc'>224.29</td><td align="right" headers="MB WriteMB/s" class='awrc'>37.95</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>2.29ms</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1799.19ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Data File</td><td align="right" headers="Requests Total" class='awrnclb'>20,074,746</td><td align="right" headers="Requests IOs/s" class='awrnc'>32,335.49</td><td align="right" headers="Requests Reads/s" class='awrnc'>28,126.05</td><td align="right" headers="Requests Writes/s" class='awrnc'>4,209.44</td><td align="right" headers="MB Total" class='awrnclb'>157,727</td><td align="right" headers="MB IOMB/s" class='awrnc'>254.06</td><td align="right" headers="MB ReadMB/s" class='awrnc'>219.76</td><td align="right" headers="MB WriteMB/s" class='awrnc'>34.30</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>2.29ms</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>6.50ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Log File</td><td align="right" headers="Requests Total" class='awrclb'>235,747</td><td align="right" headers="Requests IOs/s" class='awrc'>379.73</td><td align="right" headers="Requests Reads/s" class='awrc'>4.76</td><td align="right" headers="Requests Writes/s" class='awrc'>374.97</td><td align="right" headers="MB Total" class='awrclb'>4,924</td><td align="right" headers="MB IOMB/s" class='awrc'>7.93</td><td align="right" headers="MB ReadMB/s" class='awrc'>4.33</td><td align="right" headers="MB WriteMB/s" class='awrc'>3.60</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>33.33us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1806.48ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Control File</td><td align="right" headers="Requests Total" class='awrnclb'>9,145</td><td align="right" headers="Requests IOs/s" class='awrnc'>14.73</td><td align="right" headers="Requests Reads/s" class='awrnc'>12.58</td><td align="right" headers="Requests Writes/s" class='awrnc'>2.15</td><td align="right" headers="MB Total" class='awrnclb'>142</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.23</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.19</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.03</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>3.61ms</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Temp File</td><td align="right" headers="Requests Total" class='awrclb'>300</td><td align="right" headers="Requests IOs/s" class='awrc'>0.48</td><td align="right" headers="Requests Reads/s" class='awrc'>0.24</td><td align="right" headers="Requests Writes/s" class='awrc'>0.25</td><td align="right" headers="MB Total" class='awrclb'>17</td><td align="right" headers="MB IOMB/s" class='awrc'>0.03</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.01</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.01</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>4.04ms</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>21.22ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Other</td><td align="right" headers="Requests Total" class='awrnclb'>132</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.21</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.21</td><td align="right" headers="MB Total" class='awrnclb'>0</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.00</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>&#160;</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>1</td><td class='awrct'>Total</td><td align="right" headers="Requests Total" class='awrclbt'>10,218,541</td><td align="right" headers="Requests IOs/s" class='awrct'>16,459.56</td><td align="right" headers="Requests Reads/s" class='awrct'>14,167.56</td><td align="right" headers="Requests Writes/s" class='awrct'>2,292.00</td><td align="right" headers="MB Total" class='awrclbt'>81,931</td><td align="right" headers="MB IOMB/s" class='awrct'>131.97</td><td align="right" headers="MB ReadMB/s" class='awrct'>112.91</td><td align="right" headers="MB WriteMB/s" class='awrct'>19.06</td><td align="right" headers="ServiceTime Small|Read" class='awrclbt'>2.52ms</td><td align="right" headers="ServiceTime Large|Read" class='awrcrbt'>1797.27ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Data File</td><td align="right" headers="Requests Total" class='awrnclb'>10,102,343</td><td align="right" headers="Requests IOs/s" class='awrnc'>16,272.40</td><td align="right" headers="Requests Reads/s" class='awrnc'>14,158.39</td><td align="right" headers="Requests Writes/s" class='awrnc'>2,114.00</td><td align="right" headers="MB Total" class='awrnclb'>79,372</td><td align="right" headers="MB IOMB/s" class='awrnc'>127.85</td><td align="right" headers="MB ReadMB/s" class='awrnc'>110.62</td><td align="right" headers="MB WriteMB/s" class='awrnc'>17.23</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>2.52ms</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>9.00ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Log File</td><td align="right" headers="Requests Total" class='awrclb'>111,036</td><td align="right" headers="Requests IOs/s" class='awrc'>178.85</td><td align="right" headers="Requests Reads/s" class='awrc'>2.39</td><td align="right" headers="Requests Writes/s" class='awrc'>176.46</td><td align="right" headers="MB Total" class='awrclb'>2,468</td><td align="right" headers="MB IOMB/s" class='awrc'>3.98</td><td align="right" headers="MB ReadMB/s" class='awrc'>2.17</td><td align="right" headers="MB WriteMB/s" class='awrc'>1.80</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>22.22us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1810.45ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Control File</td><td align="right" headers="Requests Total" class='awrnclb'>4,863</td><td align="right" headers="Requests IOs/s" class='awrnc'>7.83</td><td align="right" headers="Requests Reads/s" class='awrnc'>6.63</td><td align="right" headers="Requests Writes/s" class='awrnc'>1.21</td><td align="right" headers="MB Total" class='awrnclb'>76</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.12</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.10</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.02</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>3.69ms</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Temp File</td><td align="right" headers="Requests Total" class='awrclb'>191</td><td align="right" headers="Requests IOs/s" class='awrc'>0.31</td><td align="right" headers="Requests Reads/s" class='awrc'>0.15</td><td align="right" headers="Requests Writes/s" class='awrc'>0.15</td><td align="right" headers="MB Total" class='awrclb'>15</td><td align="right" headers="MB IOMB/s" class='awrc'>0.02</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.01</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.01</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>4.37ms</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>21.22ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Other</td><td align="right" headers="Requests Total" class='awrnclb'>108</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.17</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.17</td><td align="right" headers="MB Total" class='awrnclb'>0</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.00</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>&#160;</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>2</td><td class='awrct'>Total</td><td align="right" headers="Requests Total" class='awrclbt'>10,101,529</td><td align="right" headers="Requests IOs/s" class='awrct'>16,271.09</td><td align="right" headers="Requests Reads/s" class='awrct'>13,976.07</td><td align="right" headers="Requests Writes/s" class='awrct'>2,295.01</td><td align="right" headers="MB Total" class='awrclbt'>80,879</td><td align="right" headers="MB IOMB/s" class='awrct'>130.28</td><td align="right" headers="MB ReadMB/s" class='awrct'>111.39</td><td align="right" headers="MB WriteMB/s" class='awrct'>18.89</td><td align="right" headers="ServiceTime Small|Read" class='awrclbt'>2.06ms</td><td align="right" headers="ServiceTime Large|Read" class='awrcrbt'>1801.14ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Data File</td><td align="right" headers="Requests Total" class='awrnclb'>9,972,403</td><td align="right" headers="Requests IOs/s" class='awrnc'>16,063.09</td><td align="right" headers="Requests Reads/s" class='awrnc'>13,967.66</td><td align="right" headers="Requests Writes/s" class='awrnc'>2,095.44</td><td align="right" headers="MB Total" class='awrnclb'>78,355</td><td align="right" headers="MB IOMB/s" class='awrnc'>126.21</td><td align="right" headers="MB ReadMB/s" class='awrnc'>109.13</td><td align="right" headers="MB WriteMB/s" class='awrnc'>17.08</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>2.06ms</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>4.00ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Log File</td><td align="right" headers="Requests Total" class='awrclb'>124,711</td><td align="right" headers="Requests IOs/s" class='awrc'>200.88</td><td align="right" headers="Requests Reads/s" class='awrc'>2.38</td><td align="right" headers="Requests Writes/s" class='awrc'>198.50</td><td align="right" headers="MB Total" class='awrclb'>2,456</td><td align="right" headers="MB IOMB/s" class='awrc'>3.96</td><td align="right" headers="MB ReadMB/s" class='awrc'>2.16</td><td align="right" headers="MB WriteMB/s" class='awrc'>1.80</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>44.44us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1802.48ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Control File</td><td align="right" headers="Requests Total" class='awrnclb'>4,282</td><td align="right" headers="Requests IOs/s" class='awrnc'>6.90</td><td align="right" headers="Requests Reads/s" class='awrnc'>5.96</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.94</td><td align="right" headers="MB Total" class='awrnclb'>66</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.11</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.09</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.01</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>3.51ms</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Temp File</td><td align="right" headers="Requests Total" class='awrclb'>109</td><td align="right" headers="Requests IOs/s" class='awrc'>0.18</td><td align="right" headers="Requests Reads/s" class='awrc'>0.08</td><td align="right" headers="Requests Writes/s" class='awrc'>0.09</td><td align="right" headers="MB Total" class='awrclb'>2</td><td align="right" headers="MB IOMB/s" class='awrc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.00</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>3.49ms</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Other</td><td align="right" headers="Requests Total" class='awrnclb'>24</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.04</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.04</td><td align="right" headers="MB Total" class='awrnclb'>0</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.00</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>&#160;</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12070"></a>
<h3 class="awr">Segment Statistics (Global)</h3>
<ul>
<li class="awr"> % Total shows % of statistic for each segment compared to the global cluster-wide total     (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants) </li>
<li class="awr"> % Capture shows % of statistic for each segment compared to the  total captured     by AWR for all segments during the snapshot interval</li>
<li class="awr">Captured Segments account for	57.5% of Total Logical Reads:	   23,348,701</li>
<li class="awr">Captured Segments account for	75.1% of Total Physical Reads:	    17,639,015</li>
<li class="awr">Captured Segments account for	75.1% of Total Physical Read Requests:	    17,638,020</li>
<li class="awr">Captured Segments account for	75.1% of Total UnOptimized Read Requests:      17,638,020</li>
<li class="awr">Captured Segments account for	 0.0% of Total Optimized  Read Requests:	       1</li>
<li class="awr">Captured Segments account for	 0.0% of Total Direct Physical Reads:		   14</li>
<li class="awr">Captured Segments account for	72.7% of Total Physical Writes:       2,751,484</li>
<li class="awr">Captured Segments account for	75.7% of Total Physical Write Requests:       2,636,968</li>
<li class="awr">Captured Segments account for	29.0% of Total Direct Physical Writes:		 1,446</li>
<li class="awr">Captured Segments account for	 0.0% of Total Table Scans:		  2</li>
<li class="awr">Captured Segments account for	59.0% of Total CR Blocks Received:	     6,586</li>
<li class="awr">Captured Segments account for	17.3% of Total Current Blocks Received: 	 27,540</li>
<li class="awr">Captured Segments account for	59.1% of Total CR Blocks Served:	   6,576</li>
<li class="awr">Captured Segments account for	17.3% of Total Current Blocks Served:	       27,574</li>
<li class="awr">Captured Segments account for	70.5% of Total Global Cache Remote Grants:	 7,203,551</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="Segment Statistics (Global). . % Total shows % of statistic for each segment compared to the global cluster-wide total (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants). % Capture shows % of statistic for each segment compared to the total captured by AWR for all segments during the snapshot interval"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Value</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">%Capture</th></tr>
<tr><td class='awrc'>buffer busy waits</td><td class='awrc'>SYS</td><td class='awrc'>SYSTEM</td><td class='awrc'>SEG$</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>100.00</td></tr>
<tr><td class='awrnc'>db block changes</td><td class='awrnc'>USER61</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73520</td><td align="right" class='awrnc'>73523</td><td align="right" class='awrnc'>36,096</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>16.98</td></tr>
<tr><td class='awrc'><div class="hidden">db block changes</div></td><td class='awrc'>USER24</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73341</td><td align="right" class='awrc'>73340</td><td align="right" class='awrc'>35,584</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>16.74</td></tr>
<tr><td class='awrnc'><div class="hidden">db block changes</div></td><td class='awrnc'>USER114</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73788</td><td align="right" class='awrnc'>73792</td><td align="right" class='awrnc'>35,376</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>16.64</td></tr>
<tr><td class='awrc'><div class="hidden">db block changes</div></td><td class='awrc'>USER45</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73442</td><td align="right" class='awrc'>73445</td><td align="right" class='awrc'>35,184</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>16.55</td></tr>
<tr><td class='awrnc'><div class="hidden">db block changes</div></td><td class='awrnc'>USER108</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73749</td><td align="right" class='awrnc'>73760</td><td align="right" class='awrnc'>35,152</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>16.54</td></tr>
<tr><td class='awrc'><div class="hidden">db block changes</div></td><td class='awrc'>USER41</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73423</td><td align="right" class='awrc'>73426</td><td align="right" class='awrc'>35,152</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>16.54</td></tr>
<tr><td class='awrnc'>gc buffer busy</td><td class='awrnc'>SYS</td><td class='awrnc'>SYSTEM</td><td class='awrnc'>SEG$</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>100.00</td></tr>
<tr><td class='awrc'>gc cr blocks received</td><td class='awrc'>USER40</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73421</td><td align="right" class='awrc'>73425</td><td align="right" class='awrc'>156</td><td align="right" class='awrc'>2.37</td><td align="right" class='awrc'>22.38</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>USER109</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73761</td><td align="right" class='awrnc'>73763</td><td align="right" class='awrnc'>132</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnc'>18.94</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>USER27</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73351</td><td align="right" class='awrc'>73354</td><td align="right" class='awrc'>117</td><td align="right" class='awrc'>1.78</td><td align="right" class='awrc'>16.79</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>USER122</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73830</td><td align="right" class='awrnc'>73834</td><td align="right" class='awrnc'>98</td><td align="right" class='awrnc'>1.49</td><td align="right" class='awrnc'>14.06</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>USER115</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73790</td><td align="right" class='awrc'>73793</td><td align="right" class='awrc'>97</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>13.92</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>USER51</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73471</td><td align="right" class='awrnc'>73476</td><td align="right" class='awrnc'>97</td><td align="right" class='awrnc'>1.47</td><td align="right" class='awrnc'>13.92</td></tr>
<tr><td class='awrc'>gc cr blocks served</td><td class='awrc'>USER40</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73421</td><td align="right" class='awrc'>73425</td><td align="right" class='awrc'>156</td><td align="right" class='awrc'>2.37</td><td align="right" class='awrc'>22.38</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>USER109</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73761</td><td align="right" class='awrnc'>73763</td><td align="right" class='awrnc'>132</td><td align="right" class='awrnc'>2.01</td><td align="right" class='awrnc'>18.94</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>USER27</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73351</td><td align="right" class='awrc'>73354</td><td align="right" class='awrc'>117</td><td align="right" class='awrc'>1.78</td><td align="right" class='awrc'>16.79</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>USER122</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73830</td><td align="right" class='awrnc'>73834</td><td align="right" class='awrnc'>98</td><td align="right" class='awrnc'>1.49</td><td align="right" class='awrnc'>14.06</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>USER115</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73790</td><td align="right" class='awrc'>73793</td><td align="right" class='awrc'>97</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>13.92</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>USER51</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73471</td><td align="right" class='awrnc'>73476</td><td align="right" class='awrnc'>97</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>13.92</td></tr>
<tr><td class='awrc'>gc cu blocks received</td><td class='awrc'>USER47</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73450</td><td align="right" class='awrc'>73453</td><td align="right" class='awrc'>179</td><td align="right" class='awrc'>0.65</td><td align="right" class='awrc'>22.80</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks received</div></td><td class='awrnc'>USER38</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73409</td><td align="right" class='awrnc'>73412</td><td align="right" class='awrnc'>166</td><td align="right" class='awrnc'>0.60</td><td align="right" class='awrnc'>21.15</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks received</div></td><td class='awrc'>USER10</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73264</td><td align="right" class='awrc'>73272</td><td align="right" class='awrc'>164</td><td align="right" class='awrc'>0.60</td><td align="right" class='awrc'>20.89</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks received</div></td><td class='awrnc'>USER126</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73845</td><td align="right" class='awrnc'>73854</td><td align="right" class='awrnc'>149</td><td align="right" class='awrnc'>0.54</td><td align="right" class='awrnc'>18.98</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks received</div></td><td class='awrc'>USER122</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73830</td><td align="right" class='awrc'>73834</td><td align="right" class='awrc'>127</td><td align="right" class='awrc'>0.46</td><td align="right" class='awrc'>16.18</td></tr>
<tr><td class='awrnc'>gc cu blocks served</td><td class='awrnc'>USER47</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73450</td><td align="right" class='awrnc'>73453</td><td align="right" class='awrnc'>179</td><td align="right" class='awrnc'>0.65</td><td align="right" class='awrnc'>22.80</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks served</div></td><td class='awrc'>USER38</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73409</td><td align="right" class='awrc'>73412</td><td align="right" class='awrc'>166</td><td align="right" class='awrc'>0.60</td><td align="right" class='awrc'>21.15</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks served</div></td><td class='awrnc'>USER10</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73264</td><td align="right" class='awrnc'>73272</td><td align="right" class='awrnc'>164</td><td align="right" class='awrnc'>0.59</td><td align="right" class='awrnc'>20.89</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks served</div></td><td class='awrc'>USER126</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73845</td><td align="right" class='awrc'>73854</td><td align="right" class='awrc'>149</td><td align="right" class='awrc'>0.54</td><td align="right" class='awrc'>18.98</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks served</div></td><td class='awrnc'>USER122</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73830</td><td align="right" class='awrnc'>73834</td><td align="right" class='awrnc'>127</td><td align="right" class='awrnc'>0.46</td><td align="right" class='awrnc'>16.18</td></tr>
<tr><td class='awrc'>gc remote grants</td><td class='awrc'>USER26</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73349</td><td align="right" class='awrc'>73353</td><td align="right" class='awrc'>110,869</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>24.97</td></tr>
<tr><td class='awrnc'><div class="hidden">gc remote grants</div></td><td class='awrnc'>USER46</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73448</td><td align="right" class='awrnc'>73452</td><td align="right" class='awrnc'>105,843</td><td align="right" class='awrnc'>1.47</td><td align="right" class='awrnc'>23.84</td></tr>
<tr><td class='awrc'><div class="hidden">gc remote grants</div></td><td class='awrc'>USER73</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73582</td><td align="right" class='awrc'>73585</td><td align="right" class='awrc'>77,941</td><td align="right" class='awrc'>1.08</td><td align="right" class='awrc'>17.56</td></tr>
<tr><td class='awrnc'><div class="hidden">gc remote grants</div></td><td class='awrnc'>USER78</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73610</td><td align="right" class='awrnc'>73614</td><td align="right" class='awrnc'>75,201</td><td align="right" class='awrnc'>1.04</td><td align="right" class='awrnc'>16.94</td></tr>
<tr><td class='awrc'><div class="hidden">gc remote grants</div></td><td class='awrc'>USER43</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73432</td><td align="right" class='awrc'>73435</td><td align="right" class='awrc'>74,076</td><td align="right" class='awrc'>1.03</td><td align="right" class='awrc'>16.69</td></tr>
<tr><td class='awrnc'>logical reads</td><td class='awrnc'>USER24</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73341</td><td align="right" class='awrnc'>73340</td><td align="right" class='awrnc'>237,376</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>16.82</td></tr>
<tr><td class='awrc'><div class="hidden">logical reads</div></td><td class='awrc'>USER114</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73788</td><td align="right" class='awrc'>73792</td><td align="right" class='awrc'>236,208</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>16.74</td></tr>
<tr><td class='awrnc'><div class="hidden">logical reads</div></td><td class='awrnc'>USER45</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73442</td><td align="right" class='awrnc'>73445</td><td align="right" class='awrnc'>234,528</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>16.62</td></tr>
<tr><td class='awrc'><div class="hidden">logical reads</div></td><td class='awrc'>USER61</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73520</td><td align="right" class='awrc'>73523</td><td align="right" class='awrc'>234,528</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>16.62</td></tr>
<tr><td class='awrnc'><div class="hidden">logical reads</div></td><td class='awrnc'>USER41</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73423</td><td align="right" class='awrnc'>73426</td><td align="right" class='awrnc'>234,432</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>16.61</td></tr>
<tr><td class='awrc'><div class="hidden">logical reads</div></td><td class='awrc'>USER108</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73749</td><td align="right" class='awrc'>73760</td><td align="right" class='awrc'>234,320</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>16.60</td></tr>
<tr><td class='awrnc'>physical reads</td><td class='awrnc'>USER24</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73341</td><td align="right" class='awrnc'>73340</td><td align="right" class='awrnc'>233,359</td><td align="right" class='awrnc'>1.32</td><td align="right" class='awrnc'>20.15</td></tr>
<tr><td class='awrc'><div class="hidden">physical reads</div></td><td class='awrc'>USER114</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73788</td><td align="right" class='awrc'>73792</td><td align="right" class='awrc'>232,166</td><td align="right" class='awrc'>1.32</td><td align="right" class='awrc'>20.05</td></tr>
<tr><td class='awrnc'><div class="hidden">physical reads</div></td><td class='awrnc'>USER108</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73749</td><td align="right" class='awrnc'>73760</td><td align="right" class='awrnc'>231,053</td><td align="right" class='awrnc'>1.31</td><td align="right" class='awrnc'>19.95</td></tr>
<tr><td class='awrc'><div class="hidden">physical reads</div></td><td class='awrc'>USER41</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73423</td><td align="right" class='awrc'>73426</td><td align="right" class='awrc'>230,684</td><td align="right" class='awrc'>1.31</td><td align="right" class='awrc'>19.92</td></tr>
<tr><td class='awrnc'><div class="hidden">physical reads</div></td><td class='awrnc'>USER45</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73442</td><td align="right" class='awrnc'>73445</td><td align="right" class='awrnc'>230,678</td><td align="right" class='awrnc'>1.31</td><td align="right" class='awrnc'>19.92</td></tr>
<tr><td class='awrc'>physical read requests</td><td class='awrc'>USER24</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73341</td><td align="right" class='awrc'>73340</td><td align="right" class='awrc'>233,359</td><td align="right" class='awrc'>1.32</td><td align="right" class='awrc'>20.15</td></tr>
<tr><td class='awrnc'><div class="hidden">physical read requests</div></td><td class='awrnc'>USER114</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73788</td><td align="right" class='awrnc'>73792</td><td align="right" class='awrnc'>232,166</td><td align="right" class='awrnc'>1.32</td><td align="right" class='awrnc'>20.05</td></tr>
<tr><td class='awrc'><div class="hidden">physical read requests</div></td><td class='awrc'>USER108</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73749</td><td align="right" class='awrc'>73760</td><td align="right" class='awrc'>231,053</td><td align="right" class='awrc'>1.31</td><td align="right" class='awrc'>19.95</td></tr>
<tr><td class='awrnc'><div class="hidden">physical read requests</div></td><td class='awrnc'>USER41</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73423</td><td align="right" class='awrnc'>73426</td><td align="right" class='awrnc'>230,684</td><td align="right" class='awrnc'>1.31</td><td align="right" class='awrnc'>19.92</td></tr>
<tr><td class='awrc'><div class="hidden">physical read requests</div></td><td class='awrc'>USER45</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73442</td><td align="right" class='awrc'>73445</td><td align="right" class='awrc'>230,678</td><td align="right" class='awrc'>1.31</td><td align="right" class='awrc'>19.92</td></tr>
<tr><td class='awrnc'>physical writes</td><td class='awrnc'>USER24</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73341</td><td align="right" class='awrnc'>73340</td><td align="right" class='awrnc'>35,085</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>20.14</td></tr>
<tr><td class='awrc'><div class="hidden">physical writes</div></td><td class='awrc'>USER114</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73788</td><td align="right" class='awrc'>73792</td><td align="right" class='awrc'>34,934</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>20.05</td></tr>
<tr><td class='awrnc'><div class="hidden">physical writes</div></td><td class='awrnc'>USER108</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73749</td><td align="right" class='awrnc'>73760</td><td align="right" class='awrnc'>34,795</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>19.97</td></tr>
<tr><td class='awrc'><div class="hidden">physical writes</div></td><td class='awrc'>USER41</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73423</td><td align="right" class='awrc'>73426</td><td align="right" class='awrc'>34,707</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>19.92</td></tr>
<tr><td class='awrnc'><div class="hidden">physical writes</div></td><td class='awrnc'>USER61</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73520</td><td align="right" class='awrnc'>73523</td><td align="right" class='awrnc'>34,684</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>19.91</td></tr>
<tr><td class='awrc'>physical writes direct</td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_2732778098_0</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>73031</td><td align="right" class='awrc'>73031</td><td align="right" class='awrc'>420</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>100.00</td></tr>
<tr><td class='awrnc'>physical write requests</td><td class='awrnc'>USER24</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73341</td><td align="right" class='awrnc'>73340</td><td align="right" class='awrnc'>34,981</td><td align="right" class='awrnc'>1.33</td><td align="right" class='awrnc'>20.14</td></tr>
<tr><td class='awrc'><div class="hidden">physical write requests</div></td><td class='awrc'>USER114</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73788</td><td align="right" class='awrc'>73792</td><td align="right" class='awrc'>34,849</td><td align="right" class='awrc'>1.32</td><td align="right" class='awrc'>20.06</td></tr>
<tr><td class='awrnc'><div class="hidden">physical write requests</div></td><td class='awrnc'>USER108</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73749</td><td align="right" class='awrnc'>73760</td><td align="right" class='awrnc'>34,692</td><td align="right" class='awrnc'>1.32</td><td align="right" class='awrnc'>19.97</td></tr>
<tr><td class='awrc'><div class="hidden">physical write requests</div></td><td class='awrc'>USER41</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73423</td><td align="right" class='awrc'>73426</td><td align="right" class='awrc'>34,606</td><td align="right" class='awrc'>1.31</td><td align="right" class='awrc'>19.92</td></tr>
<tr><td class='awrnc'><div class="hidden">physical write requests</div></td><td class='awrnc'>USER61</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73520</td><td align="right" class='awrnc'>73523</td><td align="right" class='awrnc'>34,582</td><td align="right" class='awrnc'>1.31</td><td align="right" class='awrnc'>19.91</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12083"></a>
<h3 class="awr">Library Cache Activity</h3>
<ul>
<li class="awr"> Summarized for all instances in the report </li>
<li class="awr"> &quot;Pct Misses&quot;  should be very low  </li>
</ul>
<table border="0" class="tdiff" summary="Library Cache Activity. . Summarized for all instances in the report. &quot;Pct Misses&quot; should be very low "><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Pin Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Reloads</th><th class="awrbg" scope="col">Invali- dations</th><th class="awrbg" scope="col">GES Lock Requests</th><th class="awrbg" scope="col">GES Pin Requests</th><th class="awrbg" scope="col">GES Pin Releases</th><th class="awrbg" scope="col">GES Inval Requests</th><th class="awrbg" scope="col">GES Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>ACCOUNT_STATUS</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>AUDIT POLICY</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>342</td><td align="right" class='awrc'>1.75</td><td align="right" class='awrc'>978</td><td align="right" class='awrc'>1.12</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>273</td><td align="right" class='awrc'>929</td><td align="right" class='awrc'>929</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>CLUSTER</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>2.86</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>2.86</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>DBLINK</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>EDITION</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>HINTSET OBJECT</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>INDEX</td><td align="right" class='awrnc'>77</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>77</td><td align="right" class='awrnc'>16.88</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>77</td><td align="right" class='awrnc'>77</td><td align="right" class='awrnc'>77</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>OBJECT ID</td><td align="right" class='awrc'>55</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>QUEUE</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SCHEMA</td><td align="right" class='awrc'>446</td><td align="right" class='awrc'>0.22</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>60</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA</td><td align="right" class='awrnc'>3,295</td><td align="right" class='awrnc'>20.91</td><td align="right" class='awrnc'>1,623,965</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>199</td><td align="right" class='awrnc'>58</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA BUILD</td><td align="right" class='awrc'>579</td><td align="right" class='awrc'>89.29</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA STATS</td><td align="right" class='awrnc'>550</td><td align="right" class='awrnc'>81.27</td><td align="right" class='awrnc'>550</td><td align="right" class='awrnc'>81.27</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TABLE/PROCEDURE</td><td align="right" class='awrc'>3,573</td><td align="right" class='awrc'>5.99</td><td align="right" class='awrc'>20,250</td><td align="right" class='awrc'>7.06</td><td align="right" class='awrc'>556</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7,366</td><td align="right" class='awrc'>15,089</td><td align="right" class='awrc'>15,089</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TRANSFORMATION</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TRIGGER</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>21.43</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>21.43</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="633"></a>
<h2 class="awr">
Memory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12074">PGA Aggregate Target Statistics</a></li>
<li class="awr"><a class="awr" href="#12075">Process Memory Summary</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12074"></a>
<h3 class="awr">PGA Aggregate Target Statistics</h3>
<ul>
<li class="awr"> all stats are reported in MegaBytes</li>
</ul>
<table border="0" class="tdiff" summary="PGA Aggregate Target Statistics. . all stats are reported in MegaBytes"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="PGAAggrTarget">PGA Aggr Target</th>
<th class="awrbg" colspan=" 2" id="AutoPGATarget">Auto PGA Target</th>
<th class="awrbg" colspan=" 2" id="PGAMemAlloc">PGA Mem Alloc</th>
<th class="awrbg" colspan=" 2" id="AutoWorkareas">Auto Workareas</th>
<th class="awrbg" colspan=" 2" id="ManualWorkarea">Manual Workarea</th>
<th class="awrbg" colspan=" 2" id="GlobalMemBound">Global Mem Bound</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="PGAAggrTarget Begin" class='awrclb'>3,215.00</td><td align="right" headers="PGAAggrTarget End" class='awrc'>3,215.00</td><td align="right" headers="AutoPGATarget Begin" class='awrclb'>1,534.68</td><td align="right" headers="AutoPGATarget End" class='awrc'>1,799.48</td><td align="right" headers="PGAMemAlloc Begin" class='awrclb'>1,843.95</td><td align="right" headers="PGAMemAlloc End" class='awrc'>1,474.18</td><td align="right" headers="AutoWorkareas Begin" class='awrclb'>0.00</td><td align="right" headers="AutoWorkareas End" class='awrc'>0.00</td><td align="right" headers="ManualWorkarea Begin" class='awrclb'>0.00</td><td align="right" headers="ManualWorkarea End" class='awrc'>0.00</td><td align="right" headers="GlobalMemBound Begin" class='awrclb'>321.49</td><td align="right" headers="GlobalMemBound End" class='awrcrb'>321.49</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="PGAAggrTarget Begin" class='awrnclb'>3,215.00</td><td align="right" headers="PGAAggrTarget End" class='awrnc'>3,215.00</td><td align="right" headers="AutoPGATarget Begin" class='awrnclb'>1,538.73</td><td align="right" headers="AutoPGATarget End" class='awrnc'>1,822.54</td><td align="right" headers="PGAMemAlloc Begin" class='awrnclb'>1,859.70</td><td align="right" headers="PGAMemAlloc End" class='awrnc'>1,466.59</td><td align="right" headers="AutoWorkareas Begin" class='awrnclb'>0.00</td><td align="right" headers="AutoWorkareas End" class='awrnc'>0.00</td><td align="right" headers="ManualWorkarea Begin" class='awrnclb'>0.00</td><td align="right" headers="ManualWorkarea End" class='awrnc'>0.00</td><td align="right" headers="GlobalMemBound Begin" class='awrnclb'>321.49</td><td align="right" headers="GlobalMemBound End" class='awrncrb'>321.49</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#633">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12075"></a>
<h3 class="awr">Process Memory Summary</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap I#: Instance number  </li>
<li class="awr"> Max Alloc is Maximum PGA allocation size at snapshot time </li>
<li class="awr"> Hist Max Alloc is the Historical Max Allocation for still-connected processes </li>
<li class="awr"> ordered by instance, Begin/End snapshot, Alloc (MB) </li>
</ul>
<table border="0" class="tdiff" summary="Process Memory Summary. . B: Begin Snap E: End Snap I#: Instance number . Max Alloc is Maximum PGA allocation size at snapshot time. Hist Max Alloc is the Historical Max Allocation for still-connected processes. ordered by instance, Begin/End snapshot, Alloc (MB) "><tr><th class="awrbg" scope="col">I#</th><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Category</th><th class="awrbg" scope="col">Alloc (MB)</th><th class="awrbg" scope="col">Used (MB)</th><th class="awrbg" scope="col">Avg Alloc (MB)</th><th class="awrbg" scope="col">Std Dev Alloc (MB)</th><th class="awrbg" scope="col">Max Alloc (MB)</th><th class="awrbg" scope="col">Hist Max Alloc (MB)</th><th class="awrbg" scope="col">Num Proc</th><th class="awrbg" scope="col">Num Alloc</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>201.75</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>3.42</td><td align="right" class='awrc'>7.06</td><td align="right" class='awrc'>35</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>59</td><td align="right" class='awrc'>59</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>1062.20</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>4.09</td><td align="right" class='awrnc'>5.55</td><td align="right" class='awrnc'>38</td><td align="right" class='awrnc'>38</td><td align="right" class='awrnc'>260</td><td align="right" class='awrnc'>260</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>37.43</td><td align="right" class='awrc'>36.04</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>196</td><td align="right" class='awrc'>192</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>30.63</td><td align="right" class='awrnc'>26.70</td><td align="right" class='awrnc'>0.23</td><td align="right" class='awrnc'>0.40</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>135</td><td align="right" class='awrnc'>110</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>1332.02</td><td align="right" class='awrc'>62.74</td><td align="right" class='awrc'>7.92</td><td align="right" class='awrc'>13.28</td><td align="right" class='awrc'>75</td><td align="right" class='awrc'>58</td><td align="right" class='awrc'>650</td><td align="right" class='awrc'>621</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>179.19</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>5.12</td><td align="right" class='awrnc'>8.91</td><td align="right" class='awrnc'>33</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>35</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>771.82</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3.98</td><td align="right" class='awrc'>6.43</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>194</td><td align="right" class='awrc'>194</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>7.37</td><td align="right" class='awrnc'>6.37</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>130</td><td align="right" class='awrnc'>128</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>3.87</td><td align="right" class='awrc'>2.29</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>69</td><td align="right" class='awrc'>32</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>962.25</td><td align="right" class='awrnc'>8.66</td><td align="right" class='awrnc'>9.21</td><td align="right" class='awrnc'>15.74</td><td align="right" class='awrnc'>74</td><td align="right" class='awrnc'>60</td><td align="right" class='awrnc'>428</td><td align="right" class='awrnc'>389</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>231.63</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2.49</td><td align="right" class='awrc'>7.11</td><td align="right" class='awrc'>45</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>93</td><td align="right" class='awrc'>93</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>1054.90</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>4.20</td><td align="right" class='awrnc'>5.46</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>251</td><td align="right" class='awrnc'>251</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>39.03</td><td align="right" class='awrc'>37.53</td><td align="right" class='awrc'>0.21</td><td align="right" class='awrc'>0.34</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>187</td><td align="right" class='awrc'>184</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>22.22</td><td align="right" class='awrnc'>15.57</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>0.34</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>124</td><td align="right" class='awrnc'>110</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>1347.78</td><td align="right" class='awrc'>53.11</td><td align="right" class='awrc'>7.08</td><td align="right" class='awrc'>13.25</td><td align="right" class='awrc'>87</td><td align="right" class='awrc'>53</td><td align="right" class='awrc'>655</td><td align="right" class='awrc'>638</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>189.06</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4.85</td><td align="right" class='awrnc'>10.51</td><td align="right" class='awrnc'>45</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>39</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>752.76</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>4.03</td><td align="right" class='awrc'>6.83</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>187</td><td align="right" class='awrc'>187</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>9.49</td><td align="right" class='awrnc'>8.21</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.36</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>123</td><td align="right" class='awrnc'>121</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>3.34</td><td align="right" class='awrc'>1.88</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>61</td><td align="right" class='awrc'>35</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>954.65</td><td align="right" class='awrnc'>10.08</td><td align="right" class='awrnc'>9.01</td><td align="right" class='awrnc'>17.87</td><td align="right" class='awrnc'>98</td><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>410</td><td align="right" class='awrnc'>382</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#633">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="638"></a>
<h2 class="awr">
Supplemental Information
</h2>
<ul>
<li class="awr"><a class="awr" href="#12080">init.ora Parameters</a></li>
<li class="awr"><a class="awr" href="#12084">init.ora Multi-valued Parameters</a></li>
<li class="awr"><a class="awr" href="#99997">Complete List of SQL Text</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12080"></a>
<h3 class="awr">init.ora Parameters</h3>
<ul>
<li class="awr"> '*' indicates same value across all instances</li>
</ul>
<table border="0" class="tdiff" summary="This table displays values for init.ora parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>_ipddb_enable</td><td class='awrc'>*</td><td class='awrc'>TRUE</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>audit_file_dest</td><td class='awrnc'>*</td><td class='awrnc'>/u01/app/oracle/admin/p80db/adump</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>audit_trail</td><td class='awrc'>*</td><td class='awrc'>DB</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>cluster_database</td><td class='awrnc'>*</td><td class='awrnc'>TRUE</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>compatible</td><td class='awrc'>*</td><td class='awrc'>19.0.0</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>control_files</td><td class='awrnc'>*</td><td class='awrnc'>+P80/P80DB/CONTROLFILE/current.266.1031731955,  +FRA/P80DB/CONTROLFILE/current.265.1031731955</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_block_size</td><td class='awrc'>*</td><td class='awrc'>8192</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_create_file_dest</td><td class='awrnc'>*</td><td class='awrnc'>+P80</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_domain</td><td class='awrc'>*</td><td class='awrc'>example.com</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_name</td><td class='awrnc'>*</td><td class='awrnc'>p80db</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_recovery_file_dest</td><td class='awrc'>*</td><td class='awrc'>+FRA</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_recovery_file_dest_size</td><td class='awrnc'>*</td><td class='awrnc'>274877906944</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>diagnostic_dest</td><td class='awrc'>*</td><td class='awrc'>/u01/app/oracle</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>dispatchers</td><td class='awrnc'>*</td><td class='awrnc'>(PROTOCOL=TCP) (SERVICE=p80dbXDB)</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>instance_number</td><td class='awrc'>1</td><td class='awrc'>1</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">instance_number</div></td><td class='awrnc'>2</td><td class='awrnc'>2</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>listener_networks</td><td class='awrc'>*</td><td class='awrc'></td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>local_listener</td><td class='awrnc'>1</td><td class='awrnc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.11)(PORT=1522))</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'><div class="hidden">local_listener</div></td><td class='awrc'>2</td><td class='awrc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.12)(PORT=1522))</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>nls_language</td><td class='awrnc'>*</td><td class='awrnc'>AMERICAN</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>nls_territory</td><td class='awrc'>*</td><td class='awrc'>AMERICA</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>open_cursors</td><td class='awrnc'>*</td><td class='awrnc'>300</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>pga_aggregate_target</td><td class='awrc'>*</td><td class='awrc'>3371171840</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>processes</td><td class='awrnc'>*</td><td class='awrnc'>640</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>remote_listener</td><td class='awrc'>*</td><td class='awrc'>mcracpoc-scan.example.com:1521</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>remote_login_passwordfile</td><td class='awrnc'>*</td><td class='awrnc'>EXCLUSIVE</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>sga_target</td><td class='awrc'>*</td><td class='awrc'>10133438464</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>thread</td><td class='awrnc'>1</td><td class='awrnc'>1</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'><div class="hidden">thread</div></td><td class='awrc'>2</td><td class='awrc'>2</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>undo_tablespace</td><td class='awrnc'>1</td><td class='awrnc'>UNDOTBS1</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'><div class="hidden">undo_tablespace</div></td><td class='awrc'>2</td><td class='awrc'>UNDOTBS2</td><td class='awrc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12084"></a>
<h3 class="awr">init.ora Multi-valued Parameters</h3>
<ul>
<li class="awr"> This section only displays parameters that have more one value </li>
<li class="awr"> '*' indicates same value across all instances </li>
<li class="awr"> '(NULL)' indicates that the  parameter value was not set </li>
<li class="awr"> A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot</li>
</ul>
<table border="0" class="tdiff" summary="init.ora Multi-valued Parameters. . This section only displays parameters that have more one value. '*' indicates same value across all instances. '(NULL)' indicates that the parameter value was not set. A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td class='awrc'>control_files</td><td class='awrc'>*</td><td class='awrc'>+FRA/P80DB/CONTROLFILE/current.265.1031731955</td><td class='awrc'></td></tr>
<tr><td class='awrnc'><div class="hidden">control_files</div></td><td class='awrnc'>*</td><td class='awrnc'>+P80/P80DB/CONTROLFILE/current.266.1031731955</td><td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="99997"></a>
<p />
<h3 class="awr">Complete List of SQL Text</h3><p />
<table border="0" class="tdiff" summary="This table displays the text of the SQL statements which have been
      referred to in the report">
<tr><th class="awrbg" scope="col">SQL Id</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="0b4w7b9wmawht"></a>0b4w7b9wmawht</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '54';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="0bwq9jnxx14ju"></a>0bwq9jnxx14ju</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '88';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="0sbbcuruzd66f"></a>0sbbcuruzd66f</td><td class='awrc'><pre_sqltext class="awr">select /*+ rule */ bucket_cnt,  row_cnt,  cache_cnt,  null_cnt,  timestamp#,  sample_size,  minimum,  maximum,  distcnt,  lowval,	hival,	density,  col#,  spare1,  spare2,  avgcln,  minimum_enc,  maximum_enc from hist_head$ where obj#=:1 and intcol#=:2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="1naar97fs6vjd"></a>1naar97fs6vjd</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '120';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_
cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_
home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time
:= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_
SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------
----------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_up
date := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

		v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; (
v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been exec
uted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If
this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="1qgtsqmjvpysh"></a>1qgtsqmjvpysh</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '108';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="24djtk7r8fz33"></a>24djtk7r8fz33</td><td class='awrnc'><pre_sqltext class="awr">update svcobj_access$ set accesses = :5,  inc_no = :6 where name = :1 AND pdb = :2 AND tsn = :3 AND objid = :4</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="35dumc2tpr9dv"></a>35dumc2tpr9dv</td><td class='awrc'><pre_sqltext class="awr">UPDATE CF1 SET C2 = :B3 ,	C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 )) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="37t1xs69bxrq3"></a>37t1xs69bxrq3</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '41';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3d08mtaxbsq1u"></a>3d08mtaxbsq1u</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '36';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3fbzaw0xdxbp9"></a>3fbzaw0xdxbp9</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '38';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3mpqwg0bhu96w"></a>3mpqwg0bhu96w</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '127';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3q5pb4rskupya"></a>3q5pb4rskupya</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '6';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3u87drbcgrv1a"></a>3u87drbcgrv1a</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '71';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="4shu00r5t3255"></a>4shu00r5t3255</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '24';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="4wcssh7tbjvs5"></a>4wcssh7tbjvs5</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '124';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5krxnvhvxxszv"></a>5krxnvhvxxszv</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '26';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="6a6qafya34rwa"></a>6a6qafya34rwa</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '1';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="7auc6hxj3tazj"></a>7auc6hxj3tazj</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '61';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="7qs0jszf6qfw6"></a>7qs0jszf6qfw6</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '56';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="7rfsk00ahr6jt"></a>7rfsk00ahr6jt</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '84';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="86708bvah4akq"></a>86708bvah4akq</td><td class='awrc'><pre_sqltext class="awr">select name from undo$ where file#=:1 and block#=:2 and ts#=:3 and       status$ != 1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="879r9dt0g5p5w"></a>879r9dt0g5p5w</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '20';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="87gaftwrm2h68"></a>87gaftwrm2h68</td><td class='awrc'><pre_sqltext class="awr">select o.owner#, o.name, o.namespace, o.remoteowner, o.linkname, o.subname from obj$ o where o.obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9pyjpd8qx4zrm"></a>9pyjpd8qx4zrm</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '43';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9uvmr65d5xzyk"></a>9uvmr65d5xzyk</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '29';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9yraxx50ufhwk"></a>9yraxx50ufhwk</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '46';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="a7ng116w7tgbq"></a>a7ng116w7tgbq</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '80';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="acmvv4fhdc9zh"></a>acmvv4fhdc9zh</td><td class='awrnc'><pre_sqltext class="awr">select obj#, type#, ctime, mtime, stime,  status,  dataobj#,  flags,  oid$,  spare1,  spare2,  spare3,  signature,  spare7,  spare8,  spare9,  nvl(dflcollid,  16382),  creappid,  creverid,  modappid,	modverid,  crepatchid,	modpatchid from obj$ where owner#=:1 and name=:2 and namespace=:3 and remoteowner is null and linkname is null and subname is null</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="b8rb69y5nvtgv"></a>b8rb69y5nvtgv</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '114';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bgxwnc1uyqzrn"></a>bgxwnc1uyqzrn</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '68';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="bhdvtsvjhgvrh"></a>bhdvtsvjhgvrh</td><td class='awrc'><pre_sqltext class="awr">SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bsr5npqqpj681"></a>bsr5npqqpj681</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '12';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="cdxa5963ny7rv"></a>cdxa5963ny7rv</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '50';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="cw2v1c2sykpss"></a>cw2v1c2sykpss</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '45';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="dn5ztpzaw0pcu"></a>dn5ztpzaw0pcu</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '4';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="dsjqgbvpsxkp0"></a>dsjqgbvpsxkp0</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '96';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="f5bd91b8pq2rp"></a>f5bd91b8pq2rp</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '87';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f7xnvp44nukp7"></a>f7xnvp44nukp7</td><td class='awrnc'><pre_sqltext class="awr">insert into  wrm$_snapshot_details  (snap_id, dbid, instance_number, table_id, begin_time, end_time, step_id)	values (:snap_id, :dbid, :instance_number, :bind1, :bind2, :bind3, :step_id)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="faz197axzpffs"></a>faz197axzpffs</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '123';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fbdrcrjuy8a1m"></a>fbdrcrjuy8a1m</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '95';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fn5s5p6hr6702"></a>fn5s5p6hr6702</td><td class='awrc'><pre_sqltext class="awr">INSERT INTO wri$_adv_message_groups (task_id, id, seq, message#, fac, hdr, lm, nl, p1, p2, p3, p4, p5) VALUES (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="gbb8vrauphx5k"></a>gbb8vrauphx5k</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '18';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_c
nt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_h
ome_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :
= DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_S
CHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upd
ate := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

       	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v
_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execu
ted. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If t
his is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="gpa68g0juqfxf"></a>gpa68g0juqfxf</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '119';
v_update_pct PLS_INTEGER := '15';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '1048576';
v_work_unit PLS_INTEGER := '12' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '8';
v_hotspot_offset_mb NUMBER := '16';
v_hotspot_modulus  PLS_INTEGER := '3';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cn
t PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_ho
me_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
 DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SC
HEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

--------------------------------------------------------------------------------------------------------
--------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_upda
te := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

      	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_
random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execut
ed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If th
is is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="grwydz59pu6mc"></a>grwydz59pu6mc</td><td class='awrnc'><pre_sqltext class="awr">select text from view$ where rowid=:1</pre_sqltext></td></tr>
</table>
<p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="43"></a>
<h2 class="awr">
Active Session History(ASH) Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#9981">Top SQL with Top Events</a></li>
<li class="awr"><a class="awr" href="#9980">Top SQL with Top Row Sources</a></li>
<li class="awr"><a class="awr" href="#9984">Top Sessions</a></li>
<li class="awr"><a class="awr" href="#9983">Top Blocking Sessions</a></li>
<li class="awr"><a class="awr" href="#9982">Top PL/SQL Procedures</a></li>
<li class="awr"><a class="awr" href="#9979">Top Events</a></li>
<li class="awr"><a class="awr" href="#9985">Top Event P1/P2/P3 Values</a></li>
<li class="awr"><a class="awr" href="#9978">Top DB Objects</a></li>
<li class="awr"><a class="awr" href="#9977">Activity Over Time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9981"></a>
<h3 class="awr">Top SQL with Top Events</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top events by DB Time	 for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event that the SQL is	   waiting on. </li>
<li class="awr"> % Row Source is the percentage of DB Time due to the row source for the     SQL waiting on the event. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top SQL by Top Wait Events"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">Top Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrc'>1497866750</td><td align="right" class='awrc'>4724</td><td align="right" class='awrc'>58.67</td>
<td class='awrc'>db file sequential read</td><td align="right" class='awrc'>26.50</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>24.42</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">4724</div></td><td align="right" class='awrnc'><div class="hidden">58.66865375062096373571783407848981619473</div></td>
<td class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>15.09</td><td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>15.09</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">4724</div></td><td align="right" class='awrc'><div class="hidden">58.66865375062096373571783407848981619473</div></td>
<td class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>9.09</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>9.09</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrnc'>203653710</td><td align="right" class='awrnc'>2614</td><td align="right" class='awrnc'>32.86</td>
<td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>23.44</td><td class='awrnc'>UPDATE</td><td align="right" class='awrnc'>23.01</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrc'><div class="hidden">203653710</div></td><td align="right" class='awrc'><div class="hidden">2614</div></td><td align="right" class='awrc'><div class="hidden">32.86140089418777943368107302533532041729</div></td>
<td class='awrc'>gc current grant busy</td><td align="right" class='awrc'>4.92</td><td class='awrc'>UPDATE</td><td align="right" class='awrc'>4.92</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrnc'><div class="hidden">203653710</div></td><td align="right" class='awrnc'><div class="hidden">2614</div></td><td align="right" class='awrnc'><div class="hidden">32.86140089418777943368107302533532041729</div></td>
<td class='awrnc'>gc current block lost</td><td align="right" class='awrnc'>1.25</td><td class='awrnc'>UPDATE</td><td align="right" class='awrnc'>1.25</td>
<td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9980"></a>
<h3 class="awr">Top SQL with Top Row Sources</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top row sources by DB Time    for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Row Source is the percentage of DB Time spent on the row source by	   that SQL. </li>
<li class="awr"> % Event is the percentage of DB Time spent on the event by the      SQL executing the row source. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table display the Top SQLs with Top Row Sources"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">Top Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrc'>1497866750</td><td align="right" class='awrc'>4724</td><td align="right" class='awrc'>58.67</td>
<td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>55.81</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>24.42</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">4724</div></td><td align="right" class='awrnc'><div class="hidden">58.66865375062096373571783407848981619473</div></td>
<td class='awrnc'>INDEX - RANGE SCAN</td><td align="right" class='awrnc'>2.71</td><td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>2.09</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrc'>203653710</td><td align="right" class='awrc'>2614</td><td align="right" class='awrc'>32.86</td>
<td class='awrc'>UPDATE</td><td align="right" class='awrc'>30.40</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>23.01</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrnc'><div class="hidden">203653710</div></td><td align="right" class='awrnc'><div class="hidden">2614</div></td><td align="right" class='awrnc'><div class="hidden">32.86140089418777943368107302533532041729</div></td>
<td class='awrnc'>UPDATE STATEMENT</td><td align="right" class='awrnc'>1.92</td><td class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>1.04</td>
<td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9984"></a>
<h3 class="awr">Top Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9983"></a>
<h3 class="awr">Top Blocking Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9982"></a>
<h3 class="awr">Top PL/SQL Procedures</h3>
<ul>
<li class="awr"> 'PL/SQL entry subprogram' represents the application's top-level	 entry-point (procedure, function, trigger, package initialization	 or RPC call) into PL/SQL. </li>
<li class="awr"> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed	    at the point of sampling . If the value is 'SQL', it represents	   the percentage of time spent executing SQL for the particular	PL/SQL entry subprogram</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top PL/SQL procedures"><tr><th class="awrbg" scope="col">PL/SQL Entry Subprogram</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">PL/SQL Current Subprogram</th><th class="awrbg" scope="col">% Current</th></tr>
<tr><td scope="row" class='awrc'>USER1.SLOBUPDATE</td><td align="right" class='awrc'>33.38</td>
<td class='awrc'>SQL</td><td align="right" class='awrc'>33.38</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9979"></a>
<h3 class="awr">Top Events</h3>
<ul>
<li class="awr"> Top Events by DB Time </li>
<li class="awr"> % Activity is the percentage of DB Time due to the event</li>
</ul>
<table border="0" class="tdiff" summary="This table shows the top events"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Class</th><th class="awrbg" scope="col">Session Type</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td class='awrc'>User I/O</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>49.95</td><td align="right" class='awrc'>64.77</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td class='awrnc'>User I/O</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>15.09</td><td align="right" class='awrnc'>19.57</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block request</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>9.09</td><td align="right" class='awrc'>11.79</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td class='awrnc'>Cluster</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>5.79</td><td align="right" class='awrnc'>7.50</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>4.92</td><td align="right" class='awrc'>6.38</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9985"></a>
<h3 class="awr">Top Event P1/P2/P3 Values</h3>
<ul>
<li class="awr"> Top Events by DB Time and the top P1/P2/P3 values for those events. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event	</li>
<li class="awr"> % Activity is the percentage of DB Time due to the event with the given     P1,P2,P3 Values.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top event P1/P2/P3 values"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">P1, P2, P3 Values</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Parameter 1</th><th class="awrbg" scope="col">Parameter 2</th><th class="awrbg" scope="col">Parameter 3</th></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>49.96</td><td align="right" class='awrc'>&quot;2&quot;,&quot;490&quot;,&quot;1&quot;</td><td align="right" class='awrc'>0.01</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>blocks</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>15.09</td><td align="right" class='awrnc'>&quot;1&quot;,&quot;9&quot;,&quot;9&quot;</td><td align="right" class='awrnc'>14.90</td>
<td class='awrnc'>files</td><td class='awrnc'>blocks</td><td class='awrnc'>requests</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>9.10</td><td align="right" class='awrc'>&quot;1&quot;,&quot;20846&quot;,&quot;1&quot;</td><td align="right" class='awrc'>0.01</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>class#</td></tr>
<tr><td scope="row" class='awrnc'>log file parallel write</td><td align="right" class='awrnc'>2.04</td><td align="right" class='awrnc'>&quot;1&quot;,&quot;19&quot;,&quot;2&quot;</td><td align="right" class='awrnc'>0.07</td>
<td class='awrnc'>files</td><td class='awrnc'>blocks</td><td class='awrnc'>requests</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>&quot;1213661190&quot;,&quot;5&quot;,&quot;20971928&quot;</td><td align="right" class='awrc'>0.19</td>
<td class='awrc'>name|mode</td><td class='awrc'>table space #</td><td class='awrc'>block</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9978"></a>
<h3 class="awr">Top DB Objects</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9977"></a>
<h3 class="awr">Activity Over Time</h3>
<ul>
<li class="awr"> Analysis period is divided into smaller time slots as indicated    in the 'Slot Time (Duration)'. </li>
<li class="awr"> Top 3 events are reported in each of those slots </li>
<li class="awr"> 'Slot Count' shows the number of ASH samples in that slot </li>
<li class="awr"> 'Event Count' shows the number of ASH samples waiting for    that event in that slot </li>
<li class="awr"> '% Event' is 'Event Count' over all ASH samples in the analysis period</li>
</ul>
<table border="0" class="tdiff" summary="This table show the activity in ASH over time"><tr><th class="awrbg" scope="col">Slot Time (Duration)</th><th class="awrbg" scope="col">Slot Count</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Count</th><th class="awrbg" scope="col">% Event</th></tr>
<tr><td align="right" class='awrc'>09:07:41   (2.3 min)</td><td align="right" class='awrc'>2,090</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>1,115</td><td align="right" class='awrc'>13.85</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">09:07:41   (2.3 min)</div></td><td align="right" class='awrnc'><div class="hidden">2090</div></td><td class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>325</td><td align="right" class='awrnc'>4.04</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">09:07:41   (2.3 min)</div></td><td align="right" class='awrc'><div class="hidden">2090</div></td><td class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>180</td><td align="right" class='awrc'>2.24</td></tr>
<tr><td align="right" class='awrnc'>09:10:00   (5.0 min)</td><td align="right" class='awrnc'>4,145</td><td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>2,083</td><td align="right" class='awrnc'>25.87</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">09:10:00   (5.0 min)</div></td><td align="right" class='awrc'><div class="hidden">4145</div></td><td class='awrc'>db file parallel read</td><td align="right" class='awrc'>613</td><td align="right" class='awrc'>7.61</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">09:10:00   (5.0 min)</div></td><td align="right" class='awrnc'><div class="hidden">4145</div></td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>397</td><td align="right" class='awrnc'>4.93</td></tr>
<tr><td align="right" class='awrc'>09:15:00   (3.0 min)</td><td align="right" class='awrc'>1,817</td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>825</td><td align="right" class='awrc'>10.25</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">09:15:00   (3.0 min)</div></td><td align="right" class='awrnc'><div class="hidden">1817</div></td><td class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>277</td><td align="right" class='awrnc'>3.44</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">09:15:00   (3.0 min)</div></td><td align="right" class='awrc'><div class="hidden">1817</div></td><td class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>156</td><td align="right" class='awrc'>1.94</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="99994"></a>
<h2>ADDM Task ADDM:2732778098_56</h2>
<pre>
	  ADDM Report for Task &apos;ADDM:2732778098_56&apos;
	  -----------------------------------------

Analysis Period
---------------
AWR snapshot range from 55 to 56.
Time period starts at 12-FEB-20 09.07.41 AM
Time period ends at 12-FEB-20 09.18.02 AM

Analysis Target
---------------
Database &apos;P80DB&apos; with DB ID 2732778098.
Database version 19.0.0.0.0.
ADDM performed an analysis of all instances.

Activity During the Analysis Period
-----------------------------------
Total database time was 72706 seconds.
The average number of active sessions was 117.08.

Summary of Findings
-------------------
   Description		      Active Sessions	   Recommendations
			      Percent of Activity
   -------------------------  -------------------  ---------------
1  Interconnect Latency       117.08 | 100	   1
2  Top SQL Statements	      116.2 | 99.25	   2
3  &quot;User I/O&quot; wait Class	79.86 | 68.21	     0
4  Global Cache Messaging     31.98 | 27.31	   1
5  Buffer Busy - Hot Objects  14.91 | 12.73	   0
6  Global Cache Lost Blocks   3.32 | 2.83	   1


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 117.08 active sessions, 100% of total activity.
---------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time.
The database was consuming 84894 kilo bits per second of interconnect
bandwidth.
4% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 94% for database lock management.
The average latency for 8K interconnect messages was 1349 microseconds.

Instances that were significantly affected by this finding:
    Number  Name    Percent Impact  ADDM Task Name
    ------  ------  --------------  --------------
    2	    p80db2  49.11	    ADDM:2732778098_2_56
    1	    p80db1  42.66	    ADDM:2732778098_1_56

   Recommendation 1: Host Configuration
   Estimated benefit is 117.08 active sessions, 100% of total activity.
   --------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle&apos;s recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.
   Action
      Look at the instance level ADDM tasks for a list of interconnect devices
      used by a specific instance.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 31.98 active sessions, 27.31% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 32.22 active sessions, 27.52% of total activity.


Finding 2: Top SQL Statements
Impact is 116.2 active sessions, 99.25% of total activity.
----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

Instances that were significantly affected by this finding:
    Number  Name    Percent Impact  ADDM Task Name
    ------  ------  --------------  --------------
    1	    p80db1  50.62	    ADDM:2732778098_1_56
    2	    p80db2  49.38	    ADDM:2732778098_2_56

   Recommendation 1: SQL Tuning
   Estimated benefit is 74.48 active sessions, 63.62% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      &quot;bhdvtsvjhgvrh&quot;.
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND
	 (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 100% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;bhdvtsvjhgvrh&quot; was executed 1342302 times and
      had an average elapsed time of 0.034 seconds.

   Recommendation 2: SQL Tuning
   Estimated benefit is 39.3 active sessions, 33.57% of total activity.
   --------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      &quot;35dumc2tpr9dv&quot;.
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 ))
	 AND (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 94% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;35dumc2tpr9dv&quot; was executed 236920 times and
      had an average elapsed time of 0.1 seconds.


Finding 3: &quot;User I/O&quot; wait Class
Impact is 79.86 active sessions, 68.21% of total activity.
----------------------------------------------------------
Wait class &quot;User I/O&quot; was consuming significant database time.
The throughput of the I/O subsystem was not significantly lower than expected.

Instances that were significantly affected by this finding:
    Number  Name    Percent Impact  ADDM Task Name
    ------  ------  --------------  --------------
    1	    p80db1  54.09	    ADDM:2732778098_1_56
    2	    p80db2  45.91	    ADDM:2732778098_2_56

   No recommendations are available.


Finding 4: Global Cache Messaging
Impact is 31.98 active sessions, 27.31% of total activity.
----------------------------------------------------------
Inter-instance messaging was consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name    Percent Impact  ADDM Task Name
    ------  ------  --------------  --------------
    2	    p80db2  63.3	    ADDM:2732778098_2_56
    1	    p80db1  36.7	    ADDM:2732778098_1_56

   Recommendation 1: Application Analysis
   Estimated benefit is 31.98 active sessions, 27.31% of total activity.
   ---------------------------------------------------------------------
   Action
      Look at the &quot;Top SQL Statements&quot; finding for SQL statements consuming
      significant time on Cluster waits. For example, the SELECT statement
      with SQL_ID &quot;bhdvtsvjhgvrh&quot; is responsible for 63% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Cluster&quot; was consuming significant database time.
      Impact is 32.22 active sessions, 27.52% of total activity.


Finding 5: Buffer Busy - Hot Objects
Impact is 14.91 active sessions, 12.73% of total activity.
----------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

Instances that were significantly affected by this finding:
    Number  Name    Percent Impact  ADDM Task Name
    ------  ------  --------------  --------------
    2	    p80db2  100 	    ADDM:2732778098_2_56

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 14.91 active sessions, 12.73% of total activity.
	 Inter-instance messaging was consuming significant database time.
	 Impact is 31.98 active sessions, 27.31% of total activity.
	    Wait class &quot;Cluster&quot; was consuming significant database time.
	    Impact is 32.22 active sessions, 27.52% of total activity.


Finding 6: Global Cache Lost Blocks
Impact is 3.32 active sessions, 2.83% of total activity.
--------------------------------------------------------
Cluster communications that were retried due to lost blocks consumed
significant database time.
The database was consuming 84894 kilo bits per second of interconnect
bandwidth.
4% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 94% for database lock management.
The average latency for 8K interconnect messages was 1349 microseconds.

Instances that were significantly affected by this finding:
    Number  Name    Percent Impact  ADDM Task Name
    ------  ------  --------------  --------------
    1	    p80db1  98.71	    ADDM:2732778098_1_56

   Recommendation 1: Host Configuration
   Estimated benefit is 3.32 active sessions, 2.83% of total activity.
   -------------------------------------------------------------------
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.
   Action
      Look at the instance level ADDM tasks for a list of interconnect devices
      used by a specific instance.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 31.98 active sessions, 27.31% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 32.22 active sessions, 27.52% of total activity.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Instances that were analyzed:
-----------------------------
    Number  Name    Host Name		   Active Sessions  Percent of Activity
    ------  ------  ---------------------  ---------------  -------------------
    1	    p80db1  mcracpoc1.example.com  59.68	    50.89
    2	    p80db2  mcracpoc2.example.com  57.49	    49.11

Miscellaneous Information
-------------------------
Wait class &quot;Application&quot; was not consuming significant database time.
Wait class &quot;Commit&quot; was not consuming significant database time.
Wait class &quot;Concurrency&quot; was not consuming significant database time.
Wait class &quot;Configuration&quot; was not consuming significant database time.
Wait class &quot;Network&quot; was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.

</pre>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<p />
End of Report
</body></html>
Report written to awr_rac.html
SQL> Disconnected from Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0
NOTIFY  : 2020.02.12-09:18:53 : Compressing file: "awr.html".
NOTIFY  : 2020.02.12-09:18:53 : Compressing file: "awr_rac.html".
